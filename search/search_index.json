{"config":{"lang":["de","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open source firmware for ESP devices","text":"<p> Total local control with quick setup and updates. Control using MQTT, Web UI, HTTP or serial. Automate using timers, rules or scripts. Integration with home automation solutions. Incredibly expandable and flexible.</p> <p> </p> <p>Current ReleaseTasmota v15.1.0 Stella</p>"},{"location":"#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Berry animate framework is DEPRECATED, will be replace by animation framework</li> </ul>"},{"location":"#new-features","title":"New Features","text":"<ul> <li>Added support for:</li> <li>ESP32-C5 and ESP32-P4</li> <li>ESP32 Extension Manager replacing loading of Partition Wizard</li> <li>Many ESP32 berry fixes and enhancements</li> </ul> <p>See release notes for a complete list of new features, changes and bug fixes.</p>"},{"location":"#join-our-community","title":"Join Our Community","text":"<p>For feedback, questions, live troubleshooting or just general chat</p> <p></p> <ul> <li>Telegram</li> <li>Matrix</li> <li>Reddit </li> <li>Google Groups</li> </ul>"},{"location":"#report-bugs-and-suggest-features","title":"Report bugs and suggest features","text":"<p>Open a new topic on Tasmota discussions.</p> <p>Report a bug in Tasmota issues.</p>"},{"location":"A4988-Stepper-Motor-Controller/","title":"A4988 Stepper Motor Controller","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_A4988_STEPPER\n#define USE_A4988_STEPPER    // A4988/DRV8825 stepper motor (+10k5 code)\n#endif\n</code></pre></p> <p>This driver is used to control stepper-motors such as NEMA 17.   </p>"},{"location":"A4988-Stepper-Motor-Controller/#configuration","title":"Configuration","text":""},{"location":"A4988-Stepper-Motor-Controller/#wiring","title":"Wiring","text":"<p>The driverboard has several connectors: powering the controller (3.3-5.0 V), input (+/-) &amp; output (1a/1b/2a/2b), the motor (up to 35V/2A), and to control the circuit (in order at the control side of the board):  </p> Connector Description DIR Direction of rotation STEP Initiate stepping MS1 Microstep increment select MS2 Microstep increment select MS3 Microstep increment select EN Enable the power supply for the motor SLP Sleep (bridge to RST) RST Reset (bridge to SLP)"},{"location":"A4988-Stepper-Motor-Controller/#tasmota-settings","title":"Tasmota Settings","text":"<p>There are six GPIO components that should be configured to free GPIOs: <pre><code>A4988 DIR (170)  \nA4988 STP (171)  \nA4988 ENA (172)  \nA4988 MS1 (173)  \nA4988 MS2 (174)  \nA4988 MS3 (175)\n</code></pre> The minimal configuration are the <code>DIR</code> and <code>STEP</code> signals. In such a configuration the motor will be permanently powered and microstepping will be set to 1/1 (full steps).</p>"},{"location":"A4988-Stepper-Motor-Controller/#a4988-controller","title":"A4988 Controller","text":"<p>Detailed information about the A4988 controller can be found in the datasheet.  </p>"},{"location":"A4988-Stepper-Motor-Controller/#microstepping-configuration","title":"Microstepping Configuration","text":""},{"location":"A4988-Stepper-Motor-Controller/#drv8825-controller","title":"DRV8825 Controller","text":"<p>The DRV8825 is directly pin compatible with the A4988. The microstepping increment settings are different. Also, there is one additional option on the DRV8825.</p>"},{"location":"A4988-Stepper-Motor-Controller/#microstepping-configuration_1","title":"Microstepping Configuration","text":""},{"location":"A4988-Stepper-Motor-Controller/#operation","title":"Operation","text":"<p>Refer to the Stepper Motor Commands </p> <p><code>MotorRPM</code> is an imprecise setting due to the implementation method. Also, if the value is too high for the combination of chosen micro stepping increment (<code>MotorMIS</code>) and the number of steps the given motor needs for one revolution (<code>MotorSPR</code>), the motor will not turn but make a whining noise. You will have to experiment some to find the optimal combination for your use case.</p>"},{"location":"A4988-Stepper-Motor-Controller/#example-project","title":"Example Project","text":"<p>The cheap auto-feeder for my cats broke. It was a fancy plastic-thingy with voice-recording-function &amp; programmable to feed several times a day after playing back your voice (cats don't give a sh$7 about your voice - they come when they hear the food falling into the bowl). It was never precise - a concern for the amount of nutrition it gave the cats. And it was not reliable, as the torque of the internal moving mechanism was insufficient to spin the separator/proportioning wheel through the food reliably. In addition, the batteries were always drained in a day meaning very grumpy cats when we returned!  </p> <p>Thus the wish to install a high-torque stepper-motor (with shifting gear) was born. I could power it with mains instead of relying on a battery, control it over WiFi from my home automation hub. Tasmota now offers a way to do this!  </p> <p>The \"TasmotaSmartCatFeeder\" circuit consists of a WeMos D1 mini, an A4988 controller, and two power supplies (5V&amp;12V). This all fits into the housing of the feeder and costs less than 50\u20ac!</p> <p>Virtually everything which has to be moved or rotated can be done now using these cheap components. It can be a window, door, shutter, cat or dog flap, a solar panel which follows the sun, a moving spotlight, PTZ-camera, or whatever.  </p>"},{"location":"A4988-Stepper-Motor-Controller/#wiring-diagrams","title":"Wiring Diagrams","text":"<p>Convert 28BYJ-48 to bipolar so that it works with this driver</p>"},{"location":"A4988-Stepper-Motor-Controller/#breakout-boards","title":"Breakout Boards","text":""},{"location":"A4988-Stepper-Motor-Controller/#buy-links","title":"Buy Links","text":"<p>Banggood AliExpress #1 AliExpress #1 </p>"},{"location":"ADC/","title":"Analog Pin","text":"<p>The ESP8266 has a single ADC pin available. It may be used to read voltage at the ADC pin or to read a module supply voltage (VCC). </p> <p>Note</p> <p>When referring to the ADC pin these terms are used interchangeably: ADC (Analog-to-digital Converter), TOUT, Pin6, A0 or Analog0.  </p> <p>Warning</p> <p>Check your Wi-Fi module! The ESP8266 A0 pin supports a maximum voltage of 1.0V. Many newer Wi-Fi modules have an on-board voltage divider to support a higher A0 input voltage range (typically in the range between 0 and 3.3 volts). You may need to use an external voltage divider to ensure your input voltage is in the right range.</p> <p>By default Tasmota uses the ADC pin to read voltage. The signal comes from an analog peripheral, or sometimes from the device itself (see Shelly 2.5). </p> <p>After wiring a peripheral to GPIO17 (A0) pin you have to configure it in Configure Module:</p> <p></p> <p>The ESP32 board has four ADC GPIO pins available (gpio34, gpio35, gpio36, gpio39) which can be used for analog inputs. These can be used to read voltage at the ADC pin or to read the module supply voltage (VCC).  All analog input pins support 3.3V. </p> <p>After wiring a peripheral to the specified Analog Input GPIO pin, it can be configured in Configure Module:</p> <p></p> # Option WebUI display MQTT message 0 None none none 1 Analog Analog0 %value% <code>{\"A0\":%value%}</code> 2 Temperature Temperature %value% \u00b0C (\u00b0F) <code>{\"Temperature\":%value%},\"TempUnit\":\"C\"}</code> 3 Light Illuminance %value% lux <code>{\"Illuminance\":%value%}</code> 4 Button none none 5 Buttoni none none 6 Range Range %value% <code>{\"Range\":%value%}</code> 7 CT Power Voltage 230 VCurrent %value APower %value WEnergy Total %value kWh <code>{\"Energy\":%value,\"Power\":%value,\"Voltage\":230,\"Current\":%value}</code> 9 pH ph %value <code>{\"pH\":%value}</code> 10 MQ-X MQ-X %value ppm <code>{\"MQX\":%value}</code> <p>The reading will show in the web UI's sensor section as \"%option% %value%\" depending on the selected option. Tasmota calculates the values for temperature and light, analog values can be <code>1</code> to <code>1024</code>.</p> <p>Note</p> <p>When using Temperature (2) or light (3) calibration may be required. <code>AdcParam</code> can be used to calibrate the output to adjust for any shifted values.</p> <p>Example: ADC as <code>Analog (1)</code> </p> <p>A message will be published in <code>tele/%topic%/SENSOR</code> JSON response as <code>\"ANALOG\":</code> depending on the selected option.</p> <p>Example: ADC as <code>Light (3)</code> <pre><code>18:55:09 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T18:55:09\",\"ANALOG\":{\"Illuminance\":8}}\n</code></pre></p> <p>Warning</p> <p>Be careful when setting ADC as a 'Button', if there is a constant voltage to the pin it might register as a long press and reset the device to firmware defaults.</p>"},{"location":"ADC/#commands","title":"Commands","text":"Command Parameters AdcParam&lt;x&gt; ADC analog input tuning parameters. On ESP32 x is channel <code>1..8</code>, and the input max is 4095 instead of 1023 as used below.<code>&lt;sensor&gt;, &lt;param1&gt;, &lt;param2&gt;, &lt;param3&gt;,  &lt;param4&gt;</code><code>&lt;sensor&gt;</code> values: <code>2</code> = Temperature Steinhart-Hart thermistor equation parameters:<ul><code>&lt;param1&gt;</code> = NTC Voltage bridge resistor in Ohms (default = <code>32000</code>)<code>&lt;param2&gt;</code> = NTC Resistance in Ohms (default = <code>10000</code>)<code>&lt;param3&gt;</code> = NTC Beta Coefficient (default = <code>3350</code>)</ul> <code>3</code> = Light Lux equation parameters:<ul><code>&lt;param1&gt;</code> = LDR Voltage bridge resistor in Ohms (default = <code>10000</code>)<code>&lt;param2&gt;</code> = LDR Lux Scalar (default = <code>12518931</code>)<code>&lt;param3&gt;</code> = LDR Lux Exponent (default = <code>-1.4050</code>)</ul> <code>6</code> = ADC linear range remapping parameters:<ul><code>&lt;param1&gt;</code> = input range low value <code>adcLow</code> (default = <code>0</code>)<code>&lt;param2&gt;</code> = input range high value <code>adcHigh</code> (default = <code>1023</code>)<code>&lt;param3&gt;</code> = output range low value <code>rangeLow</code> (default = <code>0</code>)<code>&lt;param4&gt;</code> = output range high value <code>rangeHigh</code> (default = <code>100</code>)The range remapping perform the following calculation on the ADC value [0..1023]:<code>Range = ((adcHigh - ADC) / (adcHigh - adcLow)) * (rangeLow - rangeHigh) + rangeHigh</code>The calculation is performed in double resolution floating point, but the output is a signed integer. All 4 input parameters are unsigned 16 bit integers.Example to convert the ADC value on a D1-mini into millivolts (using the default resistor bridge of 220k/100k):<code>AdcParam 6, 0, 1023, 0, 3200</code></ul> <code>7</code> = CT POWER parameter adjustments:<ul><code>&lt;param1&gt;</code> = ANALOG_CT_FLAGS (default 0 for a non-invasive current sensor). When value is <code>&gt;0</code> it sets the <code>adcLow</code> value as base for the measurement via OpAmp differential amplifier.<code>&lt;param2&gt;</code> = ANALOG_CT_MULTIPLIER ( 2146 = Default settings for a (AC) 20A/1V Current Transformer.) multiplier*100000 to convert raw ADC peak to peak range 0..1023 to RMS current in Amps. Value of 100000 corresponds to 1<code>&lt;param3&gt;</code> = ANALOG_CT_VOLTAGE (default 2300) to convert current in Amps to apparent power in Watts using voltage in Volts/1000. Use value 0.220 for AC220V or 0.012 for 12VDC.<code>&lt;param4&gt;</code> minimum current threshold (AC only, optional, default 0). Current measured below this value will be forced to 0.0. Used to void measurment noise when load is null.Exemple for DC: <code>AdcParam 7,406,3282,0.012</code>Exemple for AC: <code>AdcParam 7,0,2146,0.230,0.060</code>See circuit diagram below</ul> <code>9</code> = ANALOG_PH parameter adjustments:<ul><code>&lt;param1&gt;</code> = ANALOG_PH_CALSOLUTION_LOW_PH (default 4.0).<code>&lt;param2&gt;</code> = ANALOG_PH_CALSOLUTION_LOW_ANALOG_VALUE ( default 282 )<code>&lt;param3&gt;</code> = ANALOG_PH_CALSOLUTION_HIGH_PH (default 9.18).<code>&lt;param4&gt;</code> = ANALOG_PH_CALSOLUTION_HIGH_ANALOG_VALUE (default 435).To calibrate the probe, two reference solutions with known pH are required. Calibration procedure: <ol><li>Put probe in solution with lower pH value. pH value of the solution is ANALOG_PH_CALSOLUTION_LOW_PH.</li><li>Wait until analog value / RAW value stabilizes (~3 minutes)</li><li>The analog reading is ANALOG_PH_CALSOLUTION_LOW_ANALOG_VALUE</li><li>Clean probe and put in solution with higher pH value. pH value of the solution is ANALOG_PH_CALSOLUTION_HIGH_PH.</li><li>Wait until analog value / RAW value stabilizes (~3 minutes)</li><li>The analog reading is ANALOG_PH_CALSOLUTION_HIGH_ANALOG_VALUE</li></ol>Analog readings can be read by either changing the analog port configuration to \"Analog Input\" while calibrating, or by enabling debug logs in the console and having a look at the <code>RAW Value</code>reading instead.</ul> <code>10</code> = MQ-X sensors parameter adjustments:<ul><code>&lt;param1&gt;</code> = ANALOG_MQ_TYPE (default 2) It used to specify sensor type. At the moment exists: 2, 3, 4, 5, 6, 7, 8, 9, 131, 135 (means MQ-02, MQ-03, MQ-04 ecc.).<code>&lt;param2&gt;</code> = ANALOG_MQ_A (default 574.25 a params for MQ-02) It is exponential regression a params<code>&lt;param3&gt;</code> = ANALOG_MQ_B (default -2.222 b params for MQ-02) It is exponential regression b params, generally negative<code>&lt;param4&gt;</code> = ANALOG_MQ_RatioMQCleanAir (default 15.0 RatioMQCleanAir params for MQ-02) NOT USED YET. It is threshold for good air in ppm for future alams armingUsage example for MQ-02, MQ-04, MQ-07 and MQ-131 <code>AdcParam 10, 2.00, 574.25, -2.22, 9.83</code> <code>AdcParam 10, 4.00, 1012.70, -2.79, 4.40</code> <code>AdcParam 10, 7.00, 99.04, -1.52, 27.50</code> <code>AdcParam 10, 131.00, 23.94, -1.11, 15.00</code></ul>"},{"location":"ADC/#rule-triggers","title":"Rule triggers","text":"<p>Use these triggers in rules:    </p> <p><code>on ANALOG#A0div10 do ...</code> - when the ADC input changes by more than 1% it provides a value between 0 and 100    </p> <p><code>on Tele-ANALOG#A0 do ...</code> - triggers on tele messages with Analog object</p> <p><code>MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-01-14T19:36:51\",\"ANALOG\":{\"A0\":1024}}</code></p> <p>Rule example: using a potentiometer on analog pin.</p>"},{"location":"ADC/#adc_ct-circuit","title":"ADC_CT circuit","text":"<p>You should use a current transformer with voltage output such as a 20A/1V or 50/1V. Do not use a CT with current output.</p> <p>The below circuit shows how to connect the CT. The exact values for the capacitors or the resitors is not very critical  (values that are double or half will work the same but the 2 resitors should be the same value).</p> <p>In order to avoid noise, build as compact as possible using short wires and insulating where possible.</p> <p></p> <p>Note</p> <p>The section on the right represents the voltage divider that is present on the NodeMCU or mini-D1 to   provide a [0.0 - 3.3V] input range (the native range of ESP8266 ADC pin is 0.0-1.0V). If you are using   a bare ESP8266 module without that divider, you need to add it.</p> <p>Note</p> <p>ESP32 natively has a [0.0 - 3.3V] input range and doesn't need the divider on the right.</p>"},{"location":"ADC/#adc_vcc","title":"ADC_VCC","text":"<p>Instead of an input, the ADC pin can be used to measure the supply voltage of the ESP module (this reading is not 100% accurate). To enable the ADC_VCC feature; compile your own build:</p> <p>If you enable ADC_VCC you cannot use the pin as analog input anymore.</p> <p>user_config_override.h flag: <pre><code>// -- Internal Analog input -----------------------\n#define USE_ADC_VCC                              // Display Vcc in Power status\n</code></pre></p> <p>Supply voltage is published in <code>tele/%topic%/STATE</code> under <code>\"Vcc\":</code> in mV: <pre><code>11:14:59 MQT: tele/tasmota/STATE = {\"Time\":\"2019-10-31T11:14:59\",\"Uptime\":\"0T18:36:12\",\"UptimeSec\":66972,\"Vcc\":3.423,\"Heap\":28,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":6,\"POWER\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"Tasmota\",\"BSSId\":\"00:00:00:00:00:00\",\"Channel\":13,\"RSSI\":100,\"LinkCount\":1,\"Downtime\":\"0T00:00:06\"}}\n</code></pre></p>"},{"location":"AHT1x/","title":"AHT10/AHT15 temperature and humidity sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_AHT1x\n#define USE_AHT1x       // [I2cDriver43] Enable AHT10/15 humidity and temperature sensor (I2C address 0x38, 0x39) (+0k8 code)\n#endif\n</code></pre></p> <p>AHT1x are an I<sup>2</sup>C temperature and humidity sensor. AHT2x or AM2301B are upgraded versions.</p>"},{"location":"AHT1x/#configuration","title":"Configuration","text":"<p>This sensor is incompatible with other I<sup>2</sup>C devices on I<sup>2</sup>C bus</p> <p>Sensor datasheet implicitly says: Only a single AHT10 can be connected to the I<sup>2</sup>C bus and no other I<sup>2</sup>C devices can be connected. The AHT2x/AM2301B does not suffer from this problem.</p>"},{"location":"AHT1x/#wiring","title":"Wiring","text":"AHT ESP VCC 3.3V GND GND SDA GPIOx SCL GPIOy"},{"location":"AHT1x/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect AHT1x automatically and display sensor readings.</p> <p></p> <p>and in MQTT topic (according to TelePeriod):   <pre><code>{\"Time\":\"2020-01-01T00:00:00\",\"AHT1X-0x38\":{\"Temperature\":24.7,\"Humidity\":61.9,\"DewPoint\":16.8},\"TempUnit\":\"C\"}\n</code></pre></p>"},{"location":"AHT1x/#troubleshooting","title":"Troubleshooting","text":"<p>On some I2C sensors, like the AHT25, Tasmota might mistake the sensor for another one using the same address. This can be resolved by disabling the unneeded drivers.</p> <p>For our example AHT25, the address might get confused with the VEML6070 UV sensor. You can tell Tasmota to use the other driver by issuing the following commands in the console:</p> <ul> <li><code>I2CDriver12 0</code> to disable the VEML driver</li> <li><code>I2CDriver43 1</code> to enable the AHT driver</li> </ul> <p>An overview of all I2C drivers is available in the docs.</p>"},{"location":"AHT1x/#breakout-boards","title":"Breakout Boards","text":"<p>Note: The pins on the smaller breakout board with the AHT15 are in a different order: VDD - SDA - GND - SCL See also the datasheet.</p> <p>AHT10 Datasheet AHT15 Datasheet</p>"},{"location":"AHT2x/","title":"AHT2x/AM2301B temperature and humidity sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_AHT2x\n#define USE_AHT2x       // [I2cDriver43] Enable AHT20/AM2301B instead of AHT1x humidity and temperature sensor (I2C address 0x38) (+0k8 code)\n#endif\n</code></pre></p>"},{"location":"AHT2x/#configuration","title":"Configuration","text":""},{"location":"AHT2x/#wiring","title":"Wiring","text":"AHT ESP VCC 3.3V GND GND SDA GPIOx SCL GPIOy <p>AHT25 breakout boards require external pull-up resistors on the I2C bus (for example: 4.7k\u03a9)</p>"},{"location":"AHT2x/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver should detect the sensor and display sensor readings.</p>"},{"location":"AHT2x/#troubleshooting","title":"Troubleshooting","text":"<p>On some I2C sensors, like the AHT25, Tasmota might mistake the sensor for another one using the same address. This can be resolved by disabling the unneeded drivers.</p> <p>For our example AHT25, the address might get confused with the VEML6070 UV sensor. You can tell Tasmota to use the other driver by issuing the following commands in the console:</p> <ul> <li><code>I2CDriver12 0</code> to disable the VEML driver</li> <li><code>I2CDriver43 1</code> to enable the AHT driver</li> </ul> <p>An overview of all I2C drivers is available in the docs.</p>"},{"location":"AHT2x/#breakout-boards","title":"Breakout Boards","text":"<p>AHT20 Datasheet AHT21 Datasheet AHT25 Datasheet</p>"},{"location":"AM2301/","title":"AM2301/AM2302 (DHT21/DHT22) temperature and humidity sensor","text":"This feature is included in <code>tasmota</code>, <code>tasmota32</code>, <code>tasmota-knx</code> and <code>tasmota-display</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_DHT\n#define USE_DHT     // Add support for DHT11, AM2301 (DHT21, DHT22, AM2302, AM2321) and SI7021 Temperature and Humidity sensor (1k6 code)\n#endif\n</code></pre></p> <p>AM2301 driver supports AM2301 (DHT21), AM2302 (DHT22), AM2320 and AM2321 temperature and humidity sensors. Introduced in Tasmota through Sonoff AM2301 accessory for Sonoff TH.</p> <p>This driver is ONLY for single wire implementations of the sensor.</p> <p>For AM2301B I<sup>2</sup>C model, refer to AHT2x driver.</p>"},{"location":"AM2301/#configuration","title":"Configuration","text":""},{"location":"AM2301/#wiring","title":"Wiring","text":"AM2301 ESP - GND OUT GPIOx + 3.3V - 5.2V (5V is recommended) AM2320 ESP - GND OUT (SDA) GPIOx + 3.3V - 5.2V (5V is recommended) SCL GND"},{"location":"AM2301/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:   - GPIOx to <code>AM2301</code> </p> <p>After a reboot webUI will display temperature and humidity measured.</p> <p></p> <p>Sensor sends a <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\n  \"Time\": \"2019-01-01T00:00:00\",\n  \"AM2301\": {\n    \"Temperature\": 24.6,\n    \"Humidity\": 58.2\n  },\n  \"TempUnit\": \"C\"\n}\n</code></pre>"},{"location":"AM2301/#commands","title":"Commands","text":"<p><code>TempOffset</code> can be used for calibrating the measured temperature. This setting affects all temperature sensors on the device.</p>"},{"location":"AM2301/#wemos-dht-shield","title":"Wemos DHT Shield","text":"<p>Like the Wemos DHT11 shield specs the DATA OUT pin of  Wemos DHT22 is connected to D4 of the Wemos.</p> <p></p>"},{"location":"AM2301/#tasmota-settings_1","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>AM2301 (2)</code> - Do not use GPIO2 as reading will not be available after a soft reboot.</li> </ol>"},{"location":"AM2301/#sensors","title":"Sensors","text":"<p>Read more about differences between sensors.</p> <p></p>"},{"location":"APDS-9960/","title":"APDS-9960 light and gesture sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_APDS9960\n#define USE_APDS9960                // [I2cDriver21] Enable APDS9960 Proximity Sensor (I2C address 0x39). Disables SHT and VEML6070 (+4k7 code)\n  #define USE_APDS9960_GESTURE        // Enable APDS9960 Gesture feature (+2k code)\n  #define USE_APDS9960_PROXIMITY      // Enable APDS9960 Proximity feature (&gt;50 code)\n  #define USE_APDS9960_COLOR          // Enable APDS9960 Color feature (+0.8k code)\n  #define USE_APDS9960_STARTMODE  0   // Default to enable Gesture mode\n#endif\n</code></pre></p> <p>Broadcom APDS-9960 is a digital RGB, ambient light, proximity and gesture sensor device in a single 8-pin package. The device has an I2C compatible interface providing red, green, blue, clear (RGBC), proximity and gesture sensing with IR LED. The RGB and ambient light sensing feature detects light intensity under various lighting conditions and through various attentuation materials including darkened glass. In addition, the integrated UV-IR blocking filter enables accurate ambient light and correlated color temperature sensing.</p>"},{"location":"APDS-9960/#configuration","title":"Configuration","text":""},{"location":"APDS-9960/#wiring","title":"Wiring","text":"Breakout ESP VCC/VIN +3.3VDC GND GND SCL GPIOy SDA GPIOx INT/IRQ not used"},{"location":"APDS-9960/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After configuring the GPIO's the driver will detect the APDS-9960 automatically. On first boot sensor will start in gesture mode. It will not appear in the webUI but it can be observed via MQTT messages in console:</p> <pre><code>21:34:21 MQT: tele/tasmota/RESULT = {\"Gesture\":\"Off\"}\n21:34:23 MQT: tele/tasmota/RESULT = {\"Gesture\":\"On\"}\n21:34:25 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:25\",\"APDS9960\":{\"None\":1}}\n21:34:26 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:26\",\"APDS9960\":{\"Right\":1}}\n21:34:29 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:29\",\"APDS9960\":{\"Down\":1}}\n21:34:29 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:29\",\"APDS9960\":{\"Right\":1}}\n21:34:31 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:31\",\"APDS9960\":{\"Left\":1}}\n21:34:33 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:33\",\"APDS9960\":{\"Up\":1}}\n21:34:35 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:34:35\",\"APDS9960\":{\"Down\":1}}\n</code></pre> <p>When you enable RGBC mode with <code>Sensor27 0</code> sensor will show up in web UI:   </p> <p>and in MQTT topic (according to TelePeriod):   <code>MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-10-31T21:48:51\",\"APDS9960\":{\"Red\":282,\"Green\":252,\"Blue\":196,\"Ambient\":169,\"CCT\":4217,\"Proximity\":9}}</code></p>"},{"location":"APDS-9960/#commands","title":"Commands","text":"Command Value Description Sensor27 Show APDS9960 gesture/RGBC mode Sensor27 0 / off Disable APDS9960 gesture mode/Enable RGBC mode Sensor27 1 / on Enable APDS9960 gesture mode/Disable RGBC mode Sensor27 2 / on Enable APDS9960 gesture mode/Disable RGBC mode with half gain Sensor27 3 ...255 Set ATIME register for different integration times"},{"location":"APDS-9960/#example-rules","title":"Example Rules","text":"<p>Device will be in RGBC mode until something is close to it, then it switches into gesture mode for 60 seconds.   <pre><code>Rule on APDS9960#Proximity=250 do backlog Sensor27 1; RuleTimer1 60 endon on Rules#Timer=1 do Sensor27 0 endon\n</code></pre></p> <p>Relay ON when ambient light is below 100 lux.   <pre><code>Rule on APDS9960#Ambient&lt;100 do POWER ON endon\n</code></pre></p> <p>Control ON/OFF, brightness and color temperature with gestures   <pre><code>Rule on APDS9960#Long=1 do power toggle endon on APDS9960#Up=1 do dimmer + endon on APDS9960#Down=1 do dimmer - endon on APDS9960#Left=1 do ct + endon on APDS9960#Right=1 do ct - endon\n</code></pre></p>"},{"location":"APDS-9960/#known-issues","title":"Known Issues","text":"<ol> <li> <p>The different PCB\u2019s on the market seem to differ quite substantially regarding to their electrical characteristics. We have at least one case report, where this led to a malfunction on an ESP8266-board within Tasmota but in another library too. The exact technical reason can only be suspected, but it is probably related to electrical noise and/or power consumption. In the case from above the sensor measured an incorrect high proximity value, which resulted in repeated triggering of a \"LONG\" gesture. The solution was to decrease the gain factor for proximity and gesture. Therefore the argument 2 (<code>sensor27 2</code>) was introduced to change this at runtime.     If you experience gesture sensing problems you could try this out, but if you measure proximity values &lt;25 with nothing in front of the sensor (e.g. web interface after <code>sensor27 0</code>), then there is very likely another problem. It can be assumed, that the gesture sensitivity will suffer with reduced gain, so first try option 1 (=default).   Beside that better wiring and maybe an additional capacitor over VCC and GROUND might be helpful.</p> </li> <li> <p>The measurement of the light level is briefly described in the datasheet and the open-source-libraries use the ambient-light-value directly from the sensor or calculate a LUX-value from RGB. Both variants are usable and differentiate between low and strong light, but the absolute values are questionable and at the moment we have an uncalibrated sensor.    All known solutions use a fixed integration time, which is more or less the same as a fixed exposure time in photography. In contrast the TSL2561-library uses various integration times and maybe this is possible on the APDS9960 too. To eventually achieve this in the future, the option to set this integration time at runtime was added. Every argument between 3 and 255 sets the ATIME-register.   The formula is: integration time = (256-ATIME)2,78 ms, so with the default value of 219 we get (256-219)2,78 = 102,86 ms. That means a smaller ATIME makes the integration time longer and more photons are captured, which might be usable for (very) low light conditions, because otherwise the sensor will saturate too early. The opposite is valid for a bigger ATIME value.   The change of this value only makes sense for: users who need to change the sensitivity, if the sensor resides behind dark glass or want to contribute to the development of a new LUX-calculation in the driver. If we get enough feedback, this could lead to an improvement on the software side. Feel free to open (or search for) an issue, if you have measured the APDS9960 against other devices with different ATIME-values at different light levels. This is not a trivial task though.</p> </li> </ol>"},{"location":"APDS-9960/#breakout-boards","title":"Breakout Boards","text":""},{"location":"APDS-9960/#where-to-get","title":"Where to get","text":"<ul> <li>~ 2\u20ac at AliExpress</li> <li>~ $8 at Adafruit</li> </ul> <p>APDS-9960 Datasheet</p>"},{"location":"API/","title":"Basic API information","text":"<p>Tasmota can easily be extended by developers using provided function pointers as callback Ids. This document lists the available callback function Ids. Read Sensor API for more information. \u00bd Callback availability can be checked by searching for either XdrvCall, XsnsCall, XdspCall, XnrgCall and XlgtCall.</p>"},{"location":"API/#driver-sensor-energy-and-light-callback-ids","title":"Driver, Sensor, Energy and Light Callback Ids","text":"<p>The following table lists Callback Ids and their availability for a Driver, Sensor or Energy service.</p> Callback Id Bool xdrv xsns xnrg xlgt Description FUNC_SETTINGS_OVERRIDE x Override start-up settings FUNC_PIN_STATE x 1 2 At GPIO configuration FUNC_MODULE_INIT x 1 2 Init module specific parameters FUNC_PRE_INIT 1 2 Once GPIO have been established FUNC_INIT 1 3 2 At end of initialisation FUNC_LOOP 1 2 In main loop FUNC_EVERY_50_MSECOND 1 2 FUNC_EVERY_100_MSECOND 1 2 FUNC_EVERY_200_MSECOND x FUNC_EVERY_250_MSECOND 1 3 2 FUNC_EVERY_SECOND 1 2 FUNC_SAVE_AT_MIDNIGHT x At midnight FUNC_SAVE_BEFORE_RESTART 2 1 Just before a planned restart FUNC_AFTER_TELEPERIOD 2 1 At end of teleperiod FUNC_JSON_APPEND 2 1 3 Extend teleperiod JSON text FUNC_WEB_SENSOR 2 1 3 Add sensor data to web GUI FUNC_COMMAND x 1 2 3 4 When a command is not recognized FUNC_COMMAND_DRIVER x x When command Driver&lt;id&gt; is executed FUNC_COMMAND_SENSOR x x When command Sensor&lt;id&gt; is executed FUNC_MQTT_SUBSCRIBE x At end of MQTT subscriptions FUNC_MQTT_INIT x Once at end of MQTT connection FUNC_MQTT_DATA x x Before decoding command FUNC_SET_POWER x Before setting relays FUNC_SET_DEVICE_POWER x x Set relay FUNC_SHOW_SENSOR x When FUNC_JSON_APPEND completes FUNC_ANY_KEY x FUNC_ENERGY_EVERY_SECOND x FUNC_ENERGY_RESET x FUNC_RULES_PROCESS x x Process specific rule FUNC_SERIAL x 1 2 3 Process serial data FUNC_FREE_MEM x Show free memory for debugging FUNC_BUTTON_PRESSED x x When a button is pressed FUNC_WEB_ADD_BUTTON 1 2 Add a Configuration Button to GUI FUNC_WEB_ADD_MAIN_BUTTON 1 2 Add a main button to GUI FUNC_WEB_ADD_HANDLER 1 2 Add a webserver handler FUNC_SET_CHANNELS 2 1 FUNC_SET_SCHEME x <p>The numbers represent the sequence of execution</p>"},{"location":"API/#display-call-back-ids","title":"Display Call back Ids","text":"<p>The following table lists all Callback Ids for a Display service.</p> Callback Id Bool Description FUNC_DISPLAY_INIT_DRIVER FUNC_DISPLAY_INIT FUNC_DISPLAY_EVERY_50_MSECOND FUNC_DISPLAY_EVERY_SECOND FUNC_DISPLAY_MODEL x FUNC_DISPLAY_MODE FUNC_DISPLAY_POWER FUNC_DISPLAY_CLEAR FUNC_DISPLAY_DRAW_FRAME FUNC_DISPLAY_DRAW_HLINE FUNC_DISPLAY_DRAW_VLINE FUNC_DISPLAY_DRAW_LINE FUNC_DISPLAY_DRAW_CIRCLE FUNC_DISPLAY_FILL_CIRCLE FUNC_DISPLAY_DRAW_RECTANGLE FUNC_DISPLAY_FILL_RECTANGLE FUNC_DISPLAY_TEXT_SIZE FUNC_DISPLAY_FONT_SIZE FUNC_DISPLAY_ROTATION FUNC_DISPLAY_DRAW_STRING FUNC_DISPLAY_ONOFF FUNC_DISPLAY_NUMBER * FUNC_DISPLAY_FLOAT * FUNC_DISPLAY_NUMBERNC * FUNC_DISPLAY_FLOATNC * FUNC_DISPLAY_BRIGHTNESS * FUNC_DISPLAY_RAW * FUNC_DISPLAY_LEVEL * FUNC_DISPLAY_SEVENSEG_TEXT * FUNC_DISPLAY_SEVENSEG_TEXTNC * FUNC_DISPLAY_SCROLLDELAY * FUNC_DISPLAY_CLOCK * FUNC_DISPLAY_SCROLLTEXT * <p>* TM1637, TM1638, MAX7219 and TM1650 driver only</p>"},{"location":"API/#init-sequence","title":"Init sequence","text":"<p>The following list shows a typical callback init sequence</p> <pre><code>CFG: Loaded from flash at FB, Count 1581\nxdrv - FUNC_SETTINGS_OVERRIDE\nxdrv - FUNC_PIN_STATE\nxsns - FUNC_PIN_STATE\nxdrv - FUNC_MODULE_INIT\nxlgt - FUNC_MODULE_INIT\nxdrv - FUNC_PRE_INIT\nxnrg - FUNC_PRE_INIT\nSRC: Restart\nxdrv - FUNC_SET_POWER\nxlgt - FUNC_SET_CHANNELS\nxdrv - FUNC_SET_DEVICE_POWER\nProject tasmota Wemos 2 Version 7.0.0.3(tasmota)-STAGE\nxdrv - FUNC_INIT\nxsns - FUNC_INIT\nI2C: ADS1115 found at 0x48\nxdrv - FUNC_LOOP\nxsns - FUNC_LOOP\nxdrv - FUNC_EVERY_50_MSECOND\nxlgt - FUNC_SET_CHANNELS\nxsns - FUNC_EVERY_50_MSECOND\nxdrv - FUNC_EVERY_100_MSECOND\nxsns - FUNC_EVERY_100_MSECOND\nxdrv - FUNC_EVERY_250_MSECOND\nxsns - FUNC_EVERY_250_MSECOND\nxdrv - FUNC_EVERY_SECOND\nxsns - FUNC_EVERY_SECOND\nWIF: Attempting connection...\nWIF: Network (re)scan started...\nWIF: Attempting connection...\nWIF: Attempting connection...\nWIF: Attempting connection...\nWIF: Network 0, AP1, SSId indebuurt1, Channel 1, BSSId 24:D3:F2:97:C0:A1, RSSI -86, Encryption 1\nWIF: Network 1, AP2, SSId indebuurt2, Channel 5, BSSId A0:AB:1B:7D:42:AC, RSSI -42, Encryption 1\nWIF: Network 2, AP-, SSId indebuurt3, Channel 12, BSSId 60:E3:27:58:77:E6, RSSI -84, Encryption 1\nWIF: Connecting to AP2 indebuurt2 in mode 11N as wemos2...\nWIF: Attempting connection...\nWIF: Attempting connection...\nWIF: Attempting connection...\nWIF: Connected\nxdrv - FUNC_WEB_ADD_HANDLER\nxsns - FUNC_WEB_ADD_HANDLER\nHTP: Web server active on wemos2 with IP address 192.168.2.191\nNTP: Drift 0, (UTC) Wed Nov 06 13:57:08 2019, (DST) Sun Mar 31 02:00:00 2019, (STD) Sun Oct 27 03:00:00 2019\nAPP: Boot Count 500\nMQT: Attempting connection...\nMQT: Connected\nMQT: tele/wemos2/LWT = Online (retained)\nMQT: cmnd/wemos2/POWER =\nMQT: Subscribe to cmnd/wemos2/#\nMQT: Subscribe to cmnd/sonoffs/#\nMQT: Subscribe to cmnd/DVES_15568C_fb/#\nxdrv - FUNC_MQTT_SUBSCRIBE\nMQT: tele/wemos2/INFO1 = {\"Module\":\"Generic\",\"Version\":\"7.0.0.3(tasmota)\",\"FallbackTopic\":\"cmnd/DVES_15568C_fb/\",\"GroupTopic\":\"cmnd/sonoffs/\"}\nMQT: tele/wemos2/INFO2 = {\"WebServerMode\":\"Admin\",\"Hostname\":\"wemos2\",\"IPAddress\":\"192.168.2.191\"}\nMQT: tele/wemos2/INFO3 = {\"RestartReason\":\"Software/System restart\"}\nMQT: stat/wemos2/RESULT = {\"POWER1\":\"OFF\"}\nMQT: stat/wemos2/POWER1 = OFF\nMQT: stat/wemos2/RESULT = {\"POWER2\":\"ON\"}\nMQT: stat/wemos2/POWER2 = ON\nxdrv - FUNC_MQTT_INIT\nCFG: Saved to flash at FA, Count 1582, Bytes 4096\n</code></pre>"},{"location":"AS3935/","title":"AS3935 Franklin Lightning sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_AS3935 \n#define USE_AS3935      // [I2cDriver48] Enable AS3935 Franklin Lightning Sensor (I2C address 0x03) (+5k4 code)\n#endif\n</code></pre></p> <p>The AS3935 is a programmable fully integrated Lightning Sensor IC that detects the presence and approach of potentially hazardous lightning activity in the vicinity and provides an estimation on the distance to the head of the storm. The embedded lightning algorithm checks the incoming signal pattern to reject the potential man-made disturbers.</p> <p>Tasmota driver includes:</p> <ul> <li>support for all AS3935 Parameters</li> <li>support of all related commands for configuration</li> <li>support of NF-Auto Function to auto Threshold the Noise Reduction</li> <li>support of Auto Disturber</li> <li>support of calibrating the internal OSC with switchable Caps</li> </ul>"},{"location":"AS3935/#configuration","title":"Configuration","text":""},{"location":"AS3935/#wiring","title":"Wiring","text":"AS3935 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy IRQ GPIOz <p>Warning</p> <p>\"Sensor uses a software interrupt. Make sure that the connection with the IRQ pin is stable to prevent flicker.\"</p>"},{"location":"AS3935/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> <li>GPIOz to <code>AS3935</code></li> </ol> <p>Note for using I<sup>2</sup>C</p> <ul> <li>You will need to wire up all of the associated pins for the different boards  </li> <li>Always connect <code>CS</code> and <code>MISO</code> to <code>GND</code> </li> <li>If <code>SI</code> is present, you need to connect to <code>VCC</code> </li> <li>See some wiring on the board pictures below</li> </ul> <p></p> <p>After a reboot the driver will detect AS3935 automatically.</p> <p></p> <p>and in MQTT topic when an Event occurs: <pre><code>{\"Time\":\"2020-01-01T17:07:07\",\"AS3935\":{\"Event\":4,\"Distance\":12,\"Energy\":58622,\"Stage\":1}}\n</code></pre></p>"},{"location":"AS3935/#commands-and-use","title":"Commands and Use","text":"Console Commands Description values Bitlength AS3935power Power On/Off the Device 0/1 (On/Off) (1 Bit) AS3935setnf Noise Floor Level value from 0-7 (3 Bit) AS3935setml Minimum number of lightning 1, 5, 9, 16 (2 bit) AS3935default load default for Sensor and Settings no argument AS3935setgain Set Indoor/Outdoor Indoors/Outdoors (Ascii) AS3935settunecaps Internal Tuning Cap. value from 0-15 (4 Bits) AS3935setrej Spike rejection value from 0-15 (4 Bits) AS3935setwdth Watchdog threshold value from 0-15 (4 Bits) AS3935setminstage min stage that could be come with NFautotune value from 0-15: 0-7 Indoors, 8-15 Outdoors (4 Bits) AS3935disturber Set Disturber 0/1 (On/Off) (1 Bit) AS3935autonf Set Auto Tune for Noise Level 0/1 (On/Off) (1 Bit) AS3935autodisturber Set Auto-Disturber 0/1 (On/Off) (1 Bit) AS3935autonfmax Auto Tune with INDOOR and OUTDOOR 0/1 (On/Off) (1 Bit) AS3935lightevent MQTT messages only for lightning events 0/1 (On/Off) (1 Bit) AS3935noirqevent suppress MQTT \"IRQ with no Event\" Messages 0/1 (On/Off) (1 Bit) AS3935settings show all settings no argument AS3935calibrate auto calibrate the internal Capacitors no argument AS3935disttime time for reset Disturber in auto-mode 0-15 min. (4 Bit) AS3935nftime time for auto-Nf threshold 0-15 min (4 Bit) <p>Note for <code>AS3935Calibrate</code></p> <p>Normally you don't need the calibrate function. If you buy the AS3935, the module has a sticker on it with the calibrated cap. Use <code>AS3935Settunecaps</code> for setting up this value. If the calibration fails, it is possible that you have a board with the wrong caps on it! (Some CJMCU-Boards)</p>"},{"location":"AS3935/#mqtt-events","title":"MQTT Events","text":"No. Description Suppress with Command<code>AS3935lightevent</code> Suppress with Command<code>AS3935noirqevent</code> 0 no event 1 Lightning with Distance detected 2 Lightning out of Distance 3 Distance cannot be determined 4 Storm is Overhead 5 Noise level too high * 6 Disturber detected * 7 Irq with no Event detected * 8 Irq Pin flicker detected 9 Device is Powerd Off"},{"location":"AS3935/#nf-setting-table","title":"NF setting table","text":"<p>Setting table of the NF-noise sensitivity and stages</p> Stages NF-LEV AFE-GB uVrms Sensitivity Stage 0 000 Indoors 28 highly sensitive Stage 1 001 Indoors 45 Stage 2 010 Indoors 62 Stage 3 011 Indoors 78 Stage 4 100 Indoors 95 Stage 5 101 Indoors 112 Stage 6 110 Indoors 130 Stage 7 111 Indoors 146 Stage 8 000 Outdoors 390 Stage 9 001 Outdoors 630 Stage 10 010 Outdoors 860 Stage 11 011 Outdoors 1100 Stage 12 100 Outdoors 1330 Stage 13 101 Outdoors 1570 Stage 14 110 Outdoors 1800 Stage 15 111 Outdoors 2000 less sensitive <p>Hint and Tips</p> <ul> <li>take a stabilized power supply  </li> <li>keep a distance of at least 200 mm from the ESP and the AS3935  </li> <li>be careful with ready to use devices like Sonoff, etc. They don't have a good power supply inside  </li> <li>use a ferrit clamp filter on the sensor cable  </li> <li>wire all related pins for I<sup>2</sup>C use  </li> </ul> <p>You can find some troubleshooting tips in the Tasmota GitHub discussion.</p>"},{"location":"AS3935/#breakout-boards-and-wiring-for-i2c-use","title":"Breakout Boards and Wiring for I<sup>2</sup>C use","text":""},{"location":"AS3935/#playingwithfusion-board","title":"PlayingwithFusion Board","text":""},{"location":"AS3935/#sparkfun-board-v20","title":"Sparkfun Board V2.0","text":""},{"location":"AS3935/#embedded-adventures-board","title":"Embedded Adventures Board","text":""},{"location":"AS3935/#cjmcu-board","title":"CJMCU Board","text":""},{"location":"AS3935/#gy-as3935-board","title":"GY-AS3935 Board","text":""},{"location":"AS3935/#breakout-boards-issues","title":"Breakout Boards Issues","text":"<p>Warning</p> <p>Some type of this sensor have wrong capacitors (100pF and 1000pF) installed and the calibration fails. The correct caps are 680pF and 270pF.</p> <p></p>"},{"location":"AS3935/#datasheet","title":"Datasheet","text":"<p>Datasheet from Mouser Web Site</p>"},{"location":"AWS-IoT-cert/","title":"AWS IoT cert","text":"<p>This page contains deprecated information.</p> <p>We advise to use the AWS IoT password based authentication.</p> <p>New simplified and automated configuration</p> <p>We now provide easy to use AWS CloudFormation templates to generate the private key and sign the certificate. The manual method is now in Appendix</p> <p>This feature is not included in precompiled binaries</p> <p>To use it you must compile your build. </p> <p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#define USE_MQTT_TLS_CA_CERT // Optional but highly recommended\n#endif\n#ifndef USE_MQTT_AWS_IOT\n#define USE_MQTT_AWS_IOT\n#endif\n#ifdef USE_DISCOVERY\n#undef USE_DISCOVERY\n#endif\n</code></pre> <p>As of Tasmota version 6.6.0.3, the device-specific credentials are no longer restricted to being set at compile time only. You can now use the same firmware for all your devices. AWS IoT credentials can be set through the Console at runtime and are stored in flash memory. Credentials will survive firmware updates and OTA. Credentials will not survive a full Flash reset <code>Reset 5</code> or <code>Reset 6</code> nor will it survive a System Parameter Flash reset <code>Reset 3</code></p>"},{"location":"AWS-IoT-cert/#benefits","title":"Benefits","text":"<p>AWS IoT provides secure, bi-directional communication between Internet-connected devices such as sensors, actuators, embedded micro-controllers. This basically allows to communicate in both direction from the cloud using MQTT over secure channels using TLS.</p>"},{"location":"AWS-IoT-cert/#1-more-alexa-controls","title":"1. More Alexa controls","text":"<p>It's actually easy to develop smarthome Alexa skills, so that you can control your whole house. Currently you can only use the local Philips Hue/Wemo emulation - limited to lights and switches. You can imagine for instance controlling your Sonoff RF Bridge and send IR codes to your TV.</p> <p>Alexa skills need to communicate back to your devices, which is easy using MQTT and AWS IoT</p>"},{"location":"AWS-IoT-cert/#2-no-need-for-a-local-gateway","title":"2. No need for a local gateway","text":"<p>Of course you can do it with a local gateway like Raspberry PI using many of the open-source solutions (Domoticz...).</p> <p>You can also do it entirely from the cloud without the hassle of managing and updating a local gateway.</p> <p>On top of it, AWS IoT provides tools to collect and archive your data, automate (AWS IoT things).</p>"},{"location":"AWS-IoT-cert/#maximum-security","title":"Maximum security","text":"<p>Keep in mind that AWS IoT is based with 'security first' in mind. All the data in AWS IoT is your data and is not shared with anyone else.</p> <p>Communication is done over TLS 1.2 tunnels, using client certificates to authenticate each device. Up to now it was challenging to enable TLS on ESP8266 because of the high memory requirements of TLS.</p> <p>Thanks to the switch of Arduino to BearSSL and aggressive optimization, the amount of memory needed is as low as 6.0k during normal operation, and an additional 6.6k during connection (TLS handshake). This makes it totally doable with standard 'Tasmota' firmware with Web and Hue emulation activated. You should see more than 20k of memory still available.</p>"},{"location":"AWS-IoT-cert/#caveats","title":"Caveats","text":"<p>AWS IoT requires each Tasmota device to have its own distinct Private Key and Certificate (~800 bytes). Although you could imagine to use the same Private Key in all your devices, this is considered as a very bad practice. You are warned!</p> <p>During TLS handshake, a secondary stack of 5.3k is allocated on the heap to allow BearSSL to have enough stack room. Memory is freed at the end of the handshake. Allocating such big chunks of memory can cause issues when heap fragmentation gets too high. If you see memory going below 15KB, you may experience crashes.</p>"},{"location":"AWS-IoT-cert/#cost","title":"Cost","text":"<p>AWS provides a Free Tier that allows you to use some services for free up to a specific level. For example, it allows you to have 50 devices connecting 24 hours a day exchanging 300 messages per day. For a typical house, there is a good chance the service costs you nothing (the first year).</p>"},{"location":"AWS-IoT-cert/#how-to-configure","title":"How to configure?","text":"<p>AWS IoT requires a distinct Private Key and Certificate per Tasmota device. Currently you need to custom compile your Tasmota firmware and burn the Key and Certificate in your firmware. We will later explore how to configure them separately.</p> <p>Here is a simple guide.</p>"},{"location":"AWS-IoT-cert/#0-open-an-aws-account","title":"0. Open an AWS Account","text":"<p>If you don't have already one, just follow the guide: https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/</p>"},{"location":"AWS-IoT-cert/#1-prerequisites","title":"1. Prerequisites","text":"<p>You will need to install/compile the following:</p> <ul> <li>Complete environment to compile Tasmota, ex: PlatformIO (PlatformIO)</li> <li>Recent version of <code>openssl</code></li> </ul>"},{"location":"AWS-IoT-cert/#2-enable-aws-iot-in-tasmota","title":"2. Enable AWS IoT in Tasmota","text":"<p>Using your favorite IDE, create <code>user_config_override.h</code> and add the required compilation directives as documented at the top of this article.  </p> <p>Note: TLS handshake takes ~1.2s on ESP8266 @80MHz. You may choose to switch to 160MHz if the power supply of your device supports it. If you do so, handshake time should be ~0.7s.</p> <p>Compile the firmware and ensure it completes successfully.</p> <p>This step is only to check compilation goes well. Your firmware is still not usable since it does not contain the Private Key + Certificate.</p>"},{"location":"AWS-IoT-cert/#3-flash-your-device","title":"3. Flash your device","text":"<p>Flash your device the normal way; either through serial or OTA. If you use OTA, first flash a <code>sonoff-minimal</code> firmware, then your target firmware.</p>"},{"location":"AWS-IoT-cert/#4-configure-aws-iot-policy-to-be-done-once","title":"4. Configure AWS IoT Policy (to be done once)","text":"<p>Open the AWS Console and select the target region. In the example below we will use (EU) Frankfurt (eu-central-1).</p> <p>Download the CloudFormation template Tasmota-MqttPolicy and use it in AWS CloudFormation.</p> <p>Or click on the link for the region you have chosen:  </p> Region Code Launch US East (N. Virginia) us-east-1 EU (Frankfurt) eu-central-1 EU (Paris) eu-west-3 <ol> <li> <p>At the Create Stack screen, click Next.    </p> </li> <li> <p>At the Specify stack details screen, keep all default parameters and click Next.    </p> </li> <li> <p>At the Configure stack options screen, keep all default parameters and click Next.    </p> </li> <li> <p>At the Review TasmotaMqttPolicy screen, scroll down and click Create Stack.    </p> </li> <li> <p>The stack usually takes less than 2 minutes to complete. Wait for it to reach <code>CREATE_COMPLETE</code> state.    </p> </li> <li> <p>If you have left the parameter <code>RetentionPolicy</code> to <code>Retain</code>, then you can delete this CloudFormation stack (it will not delete the Policy). Click on the Delete button.    </p> </li> <li> <p>After less than 2 minutes, the stack should have reached the state <code>DELETE_COMPLETE</code> </p> </li> </ol>"},{"location":"AWS-IoT-cert/#5-create-an-aws-iot-thing-with-private-key-and-certificate-once-per-tasmota-device","title":"5. Create an AWS IoT Thing with Private Key and Certificate (once per Tasmota device)","text":"<p>The provided AWS CloudFormation template will create the required resources to create:</p> <ul> <li>One AWS IoT Thing</li> <li>One Private key</li> <li>One Certificate signed by AWS IoT</li> <li>Temporary resources (AWS Lambda functions, AWS IAM resources) that you can delete once the Tasmota thing is created.</li> </ul> <p>Open the AWS Console and select the target region. In the example below we will use (EU) Frankfurt (eu-central-1).</p> <p>Download the CloudFormation template Tasmota-Thing and use it in AWS CloudFormation.</p> <p>Or click on the link for the region you have chosen:  </p> Region Code Launch US East (N. Virginia) us-east-1 EU (Frankfurt) eu-central-1 EU (Paris) eu-west-3 <ol> <li> <p>At the Create Stack screen, click Next.    </p> </li> <li> <p>At the Specify stack details screen, keep all default parameters and click Next.    Note: you can change the name of the Thing in AWS IoT by specifying the parameter ThingParamName.    </p> </li> <li> <p>At the Configure stack options screen, keep all default parameters and click Next.    </p> </li> <li> <p>At the Review Tasmota-91 screen, scroll down, check the box I acknowledge that AWS CloudFormation might create IAM resources. and click Create Stack.    </p> </li> <li> <p>The stack usually takes less than 4 minutes to complete. Wait for it to reach <code>CREATE_COMPLETE</code> state.    </p> <p>You need to copy &amp; paste the contents of the Outputs tab of the CloudFormation stack: MqttHost, TlsKey1, TlsKey2     Keep a copy of those parameters in a file, you might need them again.</p> </li> </ol> <p>Cleaning: to avoid having CloudFormation templates piling up in your console, you can delete them. The created resources will remain, if you have left the parameter <code>RetentionPolicy</code> to <code>Retain</code>.</p>"},{"location":"AWS-IoT-cert/#6-configure-tasmota-device","title":"6. Configure Tasmota device","text":"<p>This is the last step, you need to configure the MQTT parameters. The easiest way is through the web console. We will only cut and paste parameters from the Outputs tab of the CloudFormation console.</p>"},{"location":"AWS-IoT-cert/#configure-the-aws-endpoint","title":"Configure the AWS EndPoint","text":"<p>Copy and paste in the web console the content of MqttHost</p> <p>Example: <pre><code>Backlog MqttHost &lt;your_endpoint&gt;-ats.iot.eu-central-1.amazonaws.com; MqttPort 8883\n</code></pre></p> <p>This will trigger a reboot of the device.</p> <p>Optional, change the topic to distinguish the devices from each others: <code>Topic sonoff/Tasmota-01</code></p>"},{"location":"AWS-IoT-cert/#check-that-the-key-store-is-empty","title":"Check that the key store is empty","text":"<p>Type the following command: <code>TLSKey</code></p> <pre><code>hh:mm:ss CMD: TLSKey\nhh:mm:ss MQT: stat/&lt;topic&gt;/RESULT = {\"TLSKey1\":-1,\"TLSKey2\":-1}\n</code></pre> <p>If both values are <code>-1</code>, it means it does not contain any key.</p> <p>If you need to reset the key store, use the command <code>TLSKey 0</code>.</p>"},{"location":"AWS-IoT-cert/#configure-the-private-key-and-certificate","title":"Configure the Private Key and Certificate","text":"<p>AWS IoT credentials are composed of two distinct parts, first a Private Key - this is the secret that will allow your device to prove it is who it pretends to be. Consider this as sensitive as a password. The Private Key is exactly 32 bytes (256 bits).</p> <p>The second part is the Certificate delivered by AWS IoT. Tasmota will also need it to authenticate to the AWS IoT endpoint.</p> <p>Both credentials must be stored in Tasmota Flash memory, in that order, using the new <code>TLSKey</code> command. <code>TlsKey1</code> stores the Private Key. <code>TlsKey2</code> stores the Certificate. There is no command to retrieve the private key from a Tasmota device, but keep in mind this secret information can easily be dumped via Serial if somebody gets physical access to the device (ESP8266 does not contain any secure storage area).</p> <p>Simply Copy and Paste the two commands from <code>TlsKey1</code> and <code>TlsKey2</code>.</p> <pre><code>TLSKey1 &lt;secret_key_secret_key_secret_key&gt;=\nTLSKey2 MIIC&lt;certificate_very_long_string&gt;=\n</code></pre> <p><code>TLSKey1</code> and <code>TLSKey2</code> must be entered in that order. If successful, you should see a message similar to:</p> <pre><code>hh:mm:ss MQT: stat/&lt;topic&gt;/RESULT = {\"TLSKey1\":32,\"TLSKey2\":641}\n</code></pre> <p>You need to check that both values are not \"-1\". The value for \"TLSKey1\" should always be 32. The value for \"TLSKey2\" varies depending on several parameters, and should be within the 640-700 bytes range.</p>"},{"location":"AWS-IoT-cert/#connect-to-aws-iot","title":"Connect to AWS IoT","text":"<p>Once the <code>TLSKey1</code> and <code>TLSKey2</code> are entered, Tasmota will try to connect to AWS IoT. </p> <p>Keep in mind that AWS IoT does not support 'retained' messages. Whatever the 'retained' configuration in Tasmota, messages are always published as 'retained=false'.</p> <p>Here is an example of output you should see:</p> <pre><code>00:00:04 HTP: Web server active on sonoff-4585 with IP address 192.168.1.59\n00:00:04 UPP: Multicast (re)joined\n21:28:25 MQT: Attempting connection...\n21:28:25 MQT: AWS IoT endpoint: xxxxxxxxxxxxx-ats.iot.eu-central-1.amazonaws.com\n21:28:26 MQT: AWS IoT connected in 1279 ms\n21:28:26 MQT: Connected\n21:28:26 MQT: tele/tasmota/LWT = Online\n21:28:26 MQT: cmnd/tasmota/POWER =\n21:28:26 MQT: tele/tasmota/INFO1 = {\"Module\":\"Sonoff Basic\",\"Version\":\"6.5.0.14(sonoff)\",\"FallbackTopic\":\n\"cmnd/DVES_67B1E9_fb/\",\"GroupTopic\":\"sonoffs\"}\n</code></pre>"},{"location":"AWS-IoT-cert/#7-check-end-to-end-communication","title":"7. Check end-to-end communication","text":"<p>In the AWS IoT console, click on \"Test\" in the left panel.</p> <p>In the \"Subscription topic\" field, type <code>+/sonoff/#</code> then click on \"Subscribe to topic\". This will display all MQTT messages received. Type a command in the Web Tasmota console, you should see MQTT message flow.</p> <p>Enjoy!</p>"},{"location":"AWS-IoT-cert/#8-cleaning","title":"8. Cleaning","text":"<p>Cleaning: to avoid having CloudFormation templates piling up in your console, you can delete them. The created resources will remain, if you have left the parameter <code>RetentionPolicy</code> to <code>Retain</code>.</p>"},{"location":"AWS-IoT-cert/#9-troubleshooting","title":"9. Troubleshooting","text":"<p><code>TLSError</code> shows any error at the TLS level. See here for most common error codes.</p>"},{"location":"AWS-IoT-cert/#for-implementation-details-see-here","title":"For implementation details, see here","text":""},{"location":"AWS-IoT-cert/#appendix-manual-configuration","title":"Appendix: Manual configuration","text":""},{"location":"AWS-IoT-cert/#1-prerequisites_1","title":"1. Prerequisites","text":"<p>You will need to install/compile the following:</p> <ul> <li>Complete environment to compile Tasmota, ex: PlatformIO (PlatformIO)</li> <li>Recent version of <code>openssl</code></li> </ul>"},{"location":"AWS-IoT-cert/#2-configure-aws-iot-to-be-done-once","title":"2. Configure AWS IoT (to be done once)","text":"<p>Open the AWS Console.</p> <p>Click on \"Services\" and select \"IoT Core\".</p> <p>Select the AWS Region where you want to locate your data, for ex: \"(EU) Frankfurt\".</p> <p></p> <p>Now we need to create a security policy to allow your Tasmota devices to connect to AWS IoT, publish and subscribe to topics.</p> <p>On the left panel, click on \"Secure\" &gt; \"Policies\". Click on the \"Create\" button in the upper right corner.</p> <p>Enter in the \"Name\" field, enter the name of your policy, for ex: \"TasmotaMqttPolicy\".</p> <p></p> <p>Then click on \"Advanced mode\" Cut and paste the policy below. Click on \"Create\" in the lower right corner.</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iot:Connect\",\n        \"iot:Publish\",\n        \"iot:Subscribe\",\n        \"iot:Receive\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"AWS-IoT-cert/#3-create-a-private-key-and-certificate-once-per-tasmota-device","title":"3. Create a Private Key and Certificate (once per Tasmota device)","text":"<p>Do not use the default AWS IoT feature to generate your private key online. It creates a 2048 bits RSA key. Instead we are using elliptic curves keys - they are much smaller in memory than RSA keys (this saves ~1k of memory) and the handshake is significantly faster.</p> <p>First create an ECC private key for your device (as described in this Blog). Keep you private key in a safe place.</p> <pre><code>$ openssl ecparam -name prime256v1 -genkey -out tasmota-01.key\n</code></pre> <p>Next, using this private key, create a certificate signing request (CSR). When asked enter the certificate details. This is not really used later, you can just enter a 2 letters country code like \"EU\" and leave all other fields blank (type 8 times enter).</p> <pre><code>$ openssl req -new -sha256 -key tasmota-01.key -nodes -out tasmota-01.csr\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) []:EU &lt;enter&gt;\nState or Province Name (full name) []: &lt;enter&gt;\nLocality Name (eg, city) []: &lt;enter&gt;\nOrganization Name (eg, company) []: &lt;enter&gt;\nOrganizational Unit Name (eg, section) []: &lt;enter&gt;\nCommon Name (eg, fully qualified host name) []: &lt;enter&gt;\nEmail Address []: &lt;enter&gt;\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: &lt;enter&gt;\n</code></pre> <p>Next ask AWS IoT to sign your key with its certificate. On the left panel, click on \"Secure\" &gt; \"Certificates\". Click on \"Create a certificate\".</p> <p>Then choose the \"Create with CSR\" button, locate your CSR file from above. Click on \"Upload file\". Download the certificate file, click on \"Download\", save the file as \"tasmota-01.cert.pem\".</p> <p>Important: don't forget to click on the \"Activate\" to activate the certificate.</p> <p>Your Private Key and Certificates are ready to use. Now we need to register the Tasmota Device.</p>"},{"location":"AWS-IoT-cert/#4-write-down-your-aws-iot-endpoint-same-for-all-devices","title":"4. Write down your AWS IoT endpoint (same for all devices)","text":"<p>Click on \"Settings\" in the left panel. You should see a field called \"Custom endpoint\". Write down the endpoint domain name. It should look like this (if you have chosen the Frankfurt region:</p> <pre><code>&lt;xxxxxxxxxxxxxx&gt;-ats.iot.eu-central-1.amazonaws.com\n</code></pre> <p>This is your MQTT endpoint, the port is 8883 - MQTT over TLS.</p>"},{"location":"AWS-IoT-cert/#5-register-the-device-in-aws-iot-once-per-tasmota-device","title":"5. Register the device in AWS IoT (once per Tasmota device)","text":"<p>Now on the left pane, click on \"Manage\" &gt; \"Things\". Click on \"Register a thing\", then \"Create a single thing\".</p> <p>Give your device a name like \"Tasmota-01\". Scroll down and click \"Next\" at the bottom right. Then click on \"Create thing without a certificate\".</p> <p>Now we need to associate the certificate created earlier to your device. In the left panel, click back on \"Secure\" &gt; \"Certificates\". Select the certificate created earlier. In the next pane, click on \"Actions\" in the upper right part. First select \"Attach policy\", check \"TasmotaMqttPolicy\" and \"Attach\". Click again on \"Actions\" and select \"Attach thing\", check \"Tasmota-01\" and \"Attach\".</p> <p>Your setup is done in AWS IoT. Let's proceed to the custom firmware.</p> <p></p>"},{"location":"AWS-IoT-cert/#8-prepare-your-aws-iot-credentials","title":"8. Prepare your AWS IoT credentials","text":"<p>You will now need to convert your AWS IoT credentials to Tasmota commands. Credentials are composed of two distinct parts, first a Private Key - this is the secret that will allow your device to prove it is who it pretends to be. Consider this as sensitive as a password. The Private Key is exactly 32 bytes (256 bits).</p> <p>The second part is the Certificate delivered by AWS IoT. Tasmota will also need it to authenticate to the AWS IoT endpoint.</p> <p>Both credentials must be stored in Tasmota Flash memory, in that order, using the new <code>TLSKey</code> command.</p>"},{"location":"AWS-IoT-cert/#a-first-check-that-the-key-store-is-empty","title":"a. First check that the key store is empty","text":"<p>Type the following command: <code>TLSKey</code></p> <pre><code>hh:mm:ss CMD: TLSKey\nhh:mm:ss MQT: stat/tasmota/RESULT = {\"TLSKey1\":-1,\"TLSKey2\":-1}\n</code></pre> <p>If both values are <code>-1</code>, it means it does not contain any key.</p> <p>If you need to reset the key store, use the command <code>TLSKey 0</code>.</p>"},{"location":"AWS-IoT-cert/#b-convert-the-private-key","title":"b. Convert the Private Key","text":"<p>We will extract the 32 bytes Private key from <code>tasmota-01.key</code> generated above.</p> <p>1-line method, use the following command: (fake key below)</p> <p>`openssl ec -in tasmota-01.key -inform PEM -outform DER | openssl asn1parse -inform DER | head -3 | tail -1 | awk -F':' '{ print $4 }' | xxd -r -p | base64 | echo \"TLSKey1 $(</p>"},{"location":"AWS-IoT/","title":"AWS IoT","text":"<p>Tip</p> <p>New simplified configuration, since AWS IoT doesn't require private certificates anymore and can use password authentication. Requires v8.5.0.1 or higher. The certificate based authentication is kept for reference.</p> <p>New simplified and automated configuration</p> <p>We now provide easy to use AWS CloudFormation templates to generate the private key and sign the certificate. The manual method is now in Appendix</p> <p>This feature is not included in precompiled ESP8266 binaries, except tasmota-zbbridge. It is included in all ESP32 builds.</p> <p>To use it you must compile your build. </p> <p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#define USE_MQTT_TLS_CA_CERT // Optional but highly recommended\n#endif\n#ifndef USE_MQTT_AWS_IOT_LIGHT\n#define USE_MQTT_AWS_IOT_LIGHT\n#endif\n#ifdef USE_DISCOVERY\n#undef USE_DISCOVERY\n#endif\n</code></pre> <p>As of Tasmota version 8.5.0.1, device-specific private key and certificate are no more required. We introduces AWS_IOT_LIGHT to use password based authentication. Legacy private certificate authentication can be found here.</p>"},{"location":"AWS-IoT/#benefits","title":"Benefits","text":"<p>AWS IoT provides secure, bi-directional communication between Internet-connected devices such as sensors, actuators, embedded micro-controllers. This basically allows to communicate in both direction from the cloud using MQTT over secure channels using TLS.</p>"},{"location":"AWS-IoT/#1-more-alexa-controls","title":"1. More Alexa controls","text":"<p>It's actually easy to develop smarthome Alexa skills, so that you can control your whole house. Currently you can only use the local Philips Hue/Wemo emulation - limited to lights and switches. You can imagine for instance controlling your Sonoff RF Bridge and send IR codes to your TV.</p> <p>Alexa skills need to communicate back to your devices, which is easy using MQTT and AWS IoT</p>"},{"location":"AWS-IoT/#2-no-need-for-a-local-gateway","title":"2. No need for a local gateway","text":"<p>Of course you can do it with a local gateway like Raspberry PI using many of the open-source solutions (Domoticz...).</p> <p>You can also do it entirely from the cloud without the hassle of managing and updating a local gateway.</p> <p>On top of it, AWS IoT provides tools to collect and archive your data, automate (AWS IoT things).</p>"},{"location":"AWS-IoT/#maximum-security","title":"Maximum security","text":"<p>Keep in mind that AWS IoT is based with 'security first' in mind. All the data in AWS IoT is your data and is not shared with anyone else.</p> <p>Communication is done over TLS 1.2 tunnels. Thanks to the switch of Arduino to BearSSL and aggressive optimization, the amount of memory needed is as low as 6.0k during normal operation, and an additional 6.6k during connection (TLS handshake). This makes it totally doable with standard 'Tasmota' firmware with Web and Hue emulation activated. You should see more than 20k of memory still available.</p>"},{"location":"AWS-IoT/#caveats","title":"Caveats","text":"<p>During TLS handshake, a secondary stack of 4.8k is allocated on the heap to allow BearSSL to have enough stack room. Memory is freed at the end of the handshake. Allocating such big chunks of memory can cause issues when heap fragmentation gets too high. If you see memory going below 15KB, you may experience crashes.</p>"},{"location":"AWS-IoT/#cost","title":"Cost","text":"<p>AWS provides a Free Tier that allows you to use some services for free up to a specific level. For example, it allows you to have 50 devices connecting 24 hours a day exchanging 300 messages per day. For a typical house, there is a good chance the service costs you nothing (the first year).</p>"},{"location":"AWS-IoT/#how-to-configure","title":"How to configure?","text":"<p>AWS IoT now works with Password authentication. Although it is not a good practice to use the same password for all your devices, it is technically working and the easiest way to start with Tasmota and AWS IoT.</p> <p>Here is a simple guide.</p>"},{"location":"AWS-IoT/#0-open-an-aws-account","title":"0. Open an AWS Account","text":"<p>If you don't have already one, just follow the guide: https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/</p>"},{"location":"AWS-IoT/#1-prerequisites","title":"1. Prerequisites","text":"<p>You will need to install/compile the following:</p> <ul> <li>Complete environment to compile Tasmota, ex: PlatformIO (PlatformIO)</li> </ul>"},{"location":"AWS-IoT/#2-enable-aws-iot-in-tasmota","title":"2. Enable AWS IoT in Tasmota","text":"<p>Add the required compilation directives to <code>user_config_override.h</code> as documented at the top of this article.</p> <p>Note: TLS handshake takes ~1.2s on ESP8266 @80MHz. You may choose to switch to 160MHz if the power supply of your device supports it. If you do so, handshake time should be ~0.7s.</p> <p>Compile the firmware and ensure it completes successfully.</p> <p>This step is only to check compilation goes well. Your firmware is still not usable since it does not contain the Private Key + Certificate.</p>"},{"location":"AWS-IoT/#3-flash-your-device","title":"3. Flash your device","text":"<p>Flash your device the normal way; either through serial or OTA.</p>"},{"location":"AWS-IoT/#4-configure-aws-iot-policy-to-be-done-once","title":"4. Configure AWS IoT Policy (to be done once)","text":"<p>Open the AWS Console and select the target region. In the example below we will use (EU) Frankfurt (eu-central-1).</p> <p>Download the CloudFormation template TasmotaAuth and use it in AWS CloudFormation.</p> <p>Or click on the link for the region you have chosen:  </p> Region Code Launch US East (N. Virginia) us-east-1 EU (Frankfurt) eu-central-1 EU (Paris) eu-west-3 <ol> <li> <p>At the Create Stack screen, click Next.    </p> </li> <li> <p>At the Specify stack details screen, keep all default parameters and click Next.    </p> </li> <li> <p>At the Configure stack options screen, keep all default parameters and click Next.    </p> </li> <li> <p>At the Review TasmotaAuth screen, scroll down, click the checkbox to acknowledge the creation of IAM resources, and click Submit.</p> </li> <li> <p>The stack usually takes less than 1 minute to complete. Wait for it to reach <code>CREATE_COMPLETE</code> state.    </p> </li> <li> <p>Copy the commands under <code>BackLogCommand</code>, you will need it to configure Tasmota devices. The BackLogCommand will be found on the Cloudformation console, under the Outputs tab.    </p> </li> <li> <p>If you have left the parameter <code>RetentionPolicy</code> to <code>Retain</code>, then you can delete this CloudFormation stack (it will not delete the Policy). Click on the Delete button.    </p> </li> <li> <p>After less than 2 minutes, the stack should have reached the state <code>DELETE_COMPLETE</code> </p> </li> </ol>"},{"location":"AWS-IoT/#6-configure-tasmota-device","title":"6. Configure Tasmota device","text":"<p>This is the last step, you need to configure the MQTT parameters. The easiest way is through the web console. We will only paste the backlog command from the Outputs tab of the CloudFormation console as previously instructed.</p> <p>Example: <pre><code>BackLog SetOption3 1; SetOption103 1; MqttHost a............u-ats.iot.eu-central-1.amazonaws.com; MqttPort 443; MqttUser tasmota?x-amz-customauthorizer-name=TasmotaAuth; MqttPassword YknLuSd2tBY2HodwI/7RqA==\n\n11:28:44 CMD: BackLog SetOption3 1; SetOption103 1; MqttHost a............u-ats.iot.eu-central-1.amazonaws.com; MqttPort 443; MqttUser tasmota?x-amz-customauthorizer-name=TasmotaAuth; MqttPassword YknLuSd2tBY2HodwI/7RqA==\n11:28:44 MQT: stat/tasmota_4B3316/RESULT = {\"SetOption3\":\"ON\"}\n11:28:44 MQT: stat/tasmota_4B3316/RESULT = {\"SetOption103\":\"ON\"}\n11:28:45 MQT: stat/tasmota_4B3316/RESULT = {\"MqttHost\":\"a...........u-ats.iot.eu-central-1.amazonaws.com\"}\n11:28:45 MQT: stat/tasmota_4B3316/RESULT = {\"MqttPort\":443}\n11:28:45 MQT: stat/tasmota_4B3316/RESULT = {\"MqttUser\":\"tasmota?x-amz-customauthorizer-name=TasmotaAuth\"}\n11:28:45 MQT: stat/tasmota_4B3316/RESULT = {\"MqttPassword\":\"YknLuSd2tBY2HodwI/7RqA==\"}\n11:28:47 APP: Restarting\n</code></pre></p>"},{"location":"AWS-IoT/#connect-to-aws-iot","title":"Connect to AWS IoT","text":"<p>Once the <code>MQTTHost</code> and <code>MQTTPort</code> are configured, Tasmota will try to connect to AWS IoT. </p> <p>Keep in mind that AWS IoT does not support 'retained' messages. Whatever the 'retained' configuration in Tasmota, messages are always published as 'retained=false'.</p> <p>Here is an example of output you should see:</p> <pre><code>00:00:04 HTP: Web server active on sonoff-4585 with IP address 192.168.1.59\n00:00:04 UPP: Multicast (re)joined\n21:28:25 MQT: Attempting connection...\n21:28:25 MQT: AWS IoT endpoint: xxxxxxxxxxxxx-ats.iot.eu-central-1.amazonaws.com\n21:28:26 MQT: AWS IoT connected in 1279 ms\n21:28:26 MQT: Connected\n21:28:26 MQT: tele/tasmota/LWT = Online\n21:28:26 MQT: cmnd/tasmota/POWER =\n21:28:26 MQT: tele/tasmota/INFO1 = {\"Module\":\"Sonoff Basic\",\"Version\":\"9.0.0.2(sonoff)\",\"FallbackTopic\":\n\"cmnd/DVES_67B1E9_fb/\",\"GroupTopic\":\"sonoffs\"}\n</code></pre>"},{"location":"AWS-IoT/#7-check-end-to-end-communication","title":"7. Check end-to-end communication","text":"<p>In the AWS IoT console, click on \"MQTT test client\" in the left panel.</p> <p>In the \"Subscribe to a topic\" field, type <code>+/topic/#</code>, <code>topic</code> being your topic name, then click on \"Subscribe\". This will display all MQTT messages received. Type a command in the Web Tasmota console, you should see MQTT message flow.</p> <p>Enjoy!</p>"},{"location":"AWS-IoT/#8-cleaning","title":"8. Cleaning","text":"<p>Cleaning: to avoid having CloudFormation templates piling up in your console, you can delete them. The created resources will remain, if you have left the parameter <code>RetentionPolicy</code> to <code>Retain</code>.</p>"},{"location":"AWS-IoT/#9-troubleshooting","title":"9. Troubleshooting","text":"<p><code>TLSError</code> shows any error at the TLS level. See here for most common error codes.</p>"},{"location":"AWS-IoT/#for-implementation-details-see-here","title":"For implementation details, see here","text":""},{"location":"AZ-7798/","title":"AZ7798 CO<sub>2</sub> meter","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_AZ7798\n#define USE_AZ7798      // Add support for AZ-Instrument 7798 CO2 datalogger (+1k6 code)\n#endif\n</code></pre></p> <p></p> <p>The AZ7798 CO<sub>2</sub> Meter/Datalogger appears to be made by AZ Instrument, but other branded versions exist.</p> <p>The CO<sub>2</sub> meter is already provided with a PC interface in the form of a logic-level (3V3) serial port, accessible through a 2.5mm stereo jack on the back. The Wemos D1 Mini is connected to this serial port instead, and the PC interface is no longer available.</p>"},{"location":"AZ-7798/#configuration","title":"Configuration","text":""},{"location":"AZ-7798/#connecting-the-az7798-to-a-wemos-d1-mini","title":"Connecting the AZ7798 to a Wemos D1 Mini","text":"<p>The Wemos D1 Mini is fitted inside the meter enclosure. This requires the enclosure to be opened. There are four screws. Two of the screws are hidden behind the type label. Use the tip of a small knife to cut holes in the label.</p> <p></p> <p>There are also two clips at the top of the enclosure. To release those, gently pry apart the bottom of the enclosure a small amount. The grey band between the two halves can now be lifted up and pushed aside a little and expose the clips near the top. A push with a flat-blade screwdriver will then release the clips.</p> <p>Once the enclosure is opened, disconnect the two serial port wires from the socket on the back panel. The black wire (0V) can remain connected. Now connect these two wires to TX and RX of the Wemos D1 Mini.</p> Wemos D1 Mini AZ7798 TX wire with stripe RX wire without stripe <p></p> <p>The power supply for the Wemos D1 Mini is taken directly from the power supply for the meter, which is a 5V external power supply. Solder two wires to the incoming power supply and connect the other ends to the 5V and G terminals on the Wemos D1 Mini.</p> <p></p> <p>Make a small right-angle bracket for mounting the Wemos D1 Mini to the meter board. Use double-sided tape to hold everything together.</p>"},{"location":"AZ-7798/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>D1 TX to <code>AZ Tx</code></li> <li>D3 RX to <code>AZ Rx</code></li> </ol> <p></p> <p>After reboot of the device the AZ7798 measurements are shown.</p> <p></p>"},{"location":"About/","title":"About","text":"<p>If you don't have the willingness to tinker and learn... TURN BACK!.</p> <p>Tasmota is not a commercial product and support is limited. You have to be willing to research and solve potential problems yourself. </p> <p></p> <p>Tasmota is an open source firmware for Espressif ESP8266, ESP32, ESP32-S or ESP32-C3 chipset based devices created and maintained by Theo Arends. </p> <p>Everything began as Sonoff-MQTT-OTA with a commit on 25th January 2016, by Theo Arends. Its goal was to provide ESP8266 based ITEAD Sonoff devices with MQTT and 'Over the Air' or OTA firmware. </p> <p>What started as a simple way to hack a cloud bound Sonoff Basic (one of the first cheap and accessible smart home devices in the market) into a locally controlled device has grown into a fully fledged ecosystem for virtually any ESP8266 based device.</p>"},{"location":"About/#contribute","title":"Contribute","text":"<p>Any contribution helps our team and makes Tasmota better for the entire community!</p> <p>Everybody is welcome and invited to contribute to Tasmota Project by:</p> <ul> <li>providing Pull Requests (Features, Proof of Concepts, Language files or Fixes)</li> <li>testing new released features and report issues</li> <li>donating to acquire hardware for testing and implementing or out of gratitude</li> <li>contributing missing documentation for features and devices</li> </ul>"},{"location":"About/#credits","title":"Credits","text":"<p>People helping to keep the show on the road:</p> <ul> <li>David Lang providing initial issue resolution and code optimizations</li> <li>Heiko Krupp for his IRSend, HTU21, SI70xx and Wemo/Hue emulation drivers</li> <li>Wiktor Schmidt for Travis CI implementation</li> <li>Thom Dietrich for PlatformIO optimizations</li> <li>Marinus van den Broek for his EspEasy groundwork</li> <li>Pete Ba for more user friendly energy monitor calibration</li> <li>Lobradov providing compile optimization tips</li> <li>Flexiti for his initial timer implementation</li> <li>reloxx13 for his TasmoAdmin management tool</li> <li>Joachim Banzhaf for his TSL2561 library and driver</li> <li>Gijs Noorlander for his MHZ19, SenseAir and updated PubSubClient drivers</li> <li>Erik Montnemery for his HomeAssistant Discovery concept and many code tuning tips</li> <li>Federico Leoni for continued HomeAssistant Discovery support</li> <li>Aidan Mountford for his HSB support</li> <li>Daniel Ztolnai for his Serial Bridge implementation</li> <li>Gerhard Mutz for multiple sensor &amp; display drivers, Sunrise/Sunset, and scripting</li> <li>Nuno Ferreira for his HC-SR04 driver</li> <li>Adrian Scillato for his (security) fixes and implementing and maintaining KNX</li> <li>Gennaro Tortone for implementing and maintaining Eastron drivers</li> <li>Raymond Mouthaan for managing Wemos Wiki information</li> <li>Norbert Richter for his decode-config.py tool</li> <li>Andre Thomas for TasmotaClient, Tasmota Sleep and sensor drivers</li> <li>Joel Stein, digiblur and Shantur Rathore for their Tuya research and driver</li> <li>Frogmore42 for providing many issue answers</li> <li>Jason2866 for platformio support and providing many issue answers</li> <li>Blakadder for managing the new document site and providing template management</li> <li>Stephan Hadinger for refactoring light driver, enhancing HueEmulation and Zigbee support</li> <li>tmo for designing the official Tasmota logo</li> <li>Stefan Bode for his Shutter and Deep sleep drivers</li> <li>Jacek Zi\u00f3\u0142kowski for his TDM management tool and Tasmotizer flashing tool</li> <li>Christian Staars for NRF24L01 and HM-10 Bluetooth sensor support</li> <li>Paul Diem for UDP Group communication support</li> <li>J\u00f6rg Sch\u00fcler-Maroldt for his initial ESP32 port</li> <li>Many more providing Tips, Wips, Pocs, PRs and Donations</li> </ul>"},{"location":"About/#license","title":"License","text":"<p>This program is licensed under GPL-3.0</p>"},{"location":"Alexa/","title":"Alexa","text":"This feature is included only in <code>tasmota</code>, <code>tasmota32</code>, <code>tasmota-lite</code> and <code>tasmota-sensors</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <code>c++  #define USE_EMULATION              // Enable Wemo or Hue emulation  #define USE_EMULATION_HUE          // Enable Hue Bridge emulation for Alexa (+14k code, +2k mem common)  #define USE_EMULATION_WEMO         // Enable Belkin WeMo emulation for Alexa (+6k code, +2k mem common)</code></p>"},{"location":"Alexa/#connecting-to-alexa","title":"Connecting to Alexa","text":"<p>You can interact with Tasmota using Amazon Alexa through its Echo devices . </p> <p>In Configuration - Configure Other page in the webUI select emulation type.</p> <p></p> <p>Warning</p> <p>Alexa Hue integration requires a physical Alexa device. The app alone is not enough.</p> <p>Check your router settings. You have to enable IGMP</p>"},{"location":"Alexa/#belkin-wemo-emulation","title":"Belkin WeMo Emulation","text":"<p>Use Belkin WeMo for devices with a single relay or Hue Bridge for devices with one or more relays or for lights. Tasmota devices will be discovered by the Alexa app.</p> <p>You do not need to install the Wemo app or enable the Wemo skill in Alexa. Just tell Alexa to discover devices of the appropriate type (plug, switch, etc.) and when it asks what brand device, scroll to the end and choose \"Other\".</p>"},{"location":"Alexa/#hue-bridge-emulation","title":"Hue Bridge Emulation","text":"<p>For control of lights, color control (introduced in version 6.5.0.9), on/off, and dimming is supported. Enable <code>Hue Bridge</code> emulation and perform a device discovery in the Alexa app. No skill needs to be added to Alexa. Select Hue Bridge V1 as the device type.</p> <p>Relays and lights with friendly names beginning with a dollar sign (<code>$</code>) will cause Tasmota to not \"announce\" them (i.e., be hidden) to Alexa. If they were previously discovered, they will still continue to work. As there are only four friendly names provided in Tasmota, if <code>FriendlyName4</code> begins with <code>$</code>, component 4 and all higher numbered discoverable components will not be discovered by Alexa.  </p> <p>Hue Bridge emulation does not support sensors.</p>"},{"location":"ArtNet/","title":"ArtNet DMX","text":"This feature included in Tasmota32 precompiled binary but not in ESP8266 builds <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_LIGHT_ARTNET                         // Add support for DMX/ArtNet via UDP on port 6454 (+3.5k code) \n</code></pre></p> <p>ArtNet is a royalty-free UDP based protocol to transport DMX lighting control.It allows to control either a Light, or a WS2812 Matrix/Strip with a remote software with real-time animations.</p> <p>This feature is experimental, it has been tested with LED Lab (Mac and iOS) and QLC (linux)</p> <p>When enabling ArtNet mode, Tasmota listens to UDP port 6454 on local address and on multicast address <code>239.255.25.54</code>. Incoming DMX/ArtNet packets drive the display and light.</p> <p></p> <p>Important: DMX/ArtNet payload must be sent in <code>GBR</code> format, i.e. 3 bytes in Green/Red/Blue order.</p> <p>While in ArtNet mode, you can control the brightness with <code>Dimmer</code> and turn off light/display with <code>Power</code>; or with the Web UI. Changing the color has no effect until you stop ArtNet mode.</p>"},{"location":"ArtNet/#quickstart-tutorial","title":"Quickstart Tutorial","text":"<p>Step 1. Flash Tasmota32 to ESP32 based device, or compile your own firmware with <code>#define USE_LIGHT_ARTNET</code> for ESP8266 based devices</p> <p>Step 2. Configure and launche ArtNet.</p> <p>For M5Stack Atom Matrix or ESP32C3 01Space RGB, the matrix is 5x5 no alternate:</p> <p><code>ArtNetConfig {\"Rows\":5, \"Cols\":5, \"Offset\":0, \"Alternate\":false, \"Universe\":0}</code> <code>ArtNet Start</code></p> <p>For BTF Lighting 8x8 or 16x16 matrix, with alternate lines:</p> <p><code>ArtNetConfig {\"Rows\":8, \"Cols\":8, \"Offset\":0, \"Alternate\":true, \"Universe\":0}</code> <code>ArtNet Start</code></p> <p>Step 3. Download LED Lab from Christopher Schardt for MacOS or iOS</p> <p>Step 4. Launch <code>LED Lab</code>, click on the <code>Settings</code> icon (wheel), select <code>LED Setup...</code> </p> <p>In the LED Setup:</p> <ul> <li>Enter the number of rows in <code>Outputs</code></li> <li>Enter the number of columns in <code>LEDS/Output</code></li> <li>Enter the IP Address of the Tasmota device</li> <li>Make sure that <code>UDP Broadcast</code> is selected (green background)</li> <li>Make sure <code>First Universe</code> is 1 and <code>Channel Range</code> starts with <code>1</code></li> <li>Set <code>Channel Values for Each Pixel</code> to <code>GRB</code>. NOTE: for ESP32 you should use <code>RGB</code> instead.</li> <li>Click <code>OK</code> in upper right corner</li> </ul> <p></p> <p>Step 5. Back to the Settings, click on <code>LED Display</code> to start streaming. Your device should start to show LED animations.</p> <p></p>"},{"location":"ArtNet/#operating-modes","title":"Operating modes","text":""},{"location":"ArtNet/#led-matrix","title":"LED matrix","text":"<p>When setting <code>\"Rows\":&lt;x&gt;</code> with <code>&lt;x&gt;</code> greater than <code>1</code>, the display is considered as a LED matrix. The first row matches the Univers number, and following rows are matched to increasing Universe numbers.</p> <p>Example for M5Stack Atom Matrix or ESP32C3 RGB: <pre><code>ArtNetConfig {\"Rows\":5, \"Cols\":5, \"Offset\":0, \"Alternate\":false, \"Universe\":0}\nArtNet Start\n</code></pre></p> <p>The following are done with Athom LED strip controller (ESP8266), using an external level shifter, and 8x8 Adafruit matrix.</p> <p>Fast animation: </p>"},{"location":"ArtNet/#linear-strip","title":"Linear Strip","text":"<p>When setting <code>\"Rows\":1</code> ArtNet uses the WS2812 as a linear strip, and converts the paylaod to strip values.</p> <p>Example for M5Stack Atom Matrix or ESP32C3 RGB: <pre><code>ArtNetConfig {\"Rows\":1, \"Cols\":30, \"Offset\":0, \"Universe\":0}\nArtNet Start\n</code></pre></p>"},{"location":"ArtNet/#single-light","title":"Single Light","text":"<p>When setting <code>\"Cols\":0</code> (zero columns) ArtNet uses the first GBRWW payload to control the global light (ex PWM) or the entire WS2812 strip. Multiple single lights (eg. bulbs) can be used on the same universe by setting the offset value.</p> <p>Example: <pre><code>ArtNetConfig {\"Cols\":0, \"Universe\":0, \"Offset\":0}\nArtNet Start\n</code></pre></p> <p>The calibration values set by the RGBWWTable command will be applied to any DMX inputs. For example to disable the white channels: <pre><code>RGBWWTable 255,255,255,0,0\n</code></pre></p>"},{"location":"ArtNet/#commands","title":"Commands","text":"Command Description ArtNetConfig &lt;json&gt; Example <code>ArtNetConfig {\"Rows\":5, \"Cols\":5, \"Offset\":0, \"Alternate\":false, \"Universe\":0}</code>There are two modes for ArtNet configuration: simple light or adressable leds.In simple Light mode, <code>\"cols\"</code> is zero. Only <code>\"Universe\"</code> needs to be specified.Example: <code>ArtNetConfig {\"Cols\":0, \"Universe\":0}</code>In Adressable Light mode, all parameters can be specified.<code>Rows</code>: number of rows of display, <code>1</code> for light mode or single strip<code>Cols</code>: number of columns of the display, or length of the strip, or <code>0</code> for single light<code>\"Offset\"</code>: number of adressable leds to skip<code>Alternate</code>: (true/false) indicates that every other line is reversed (common in large matrix)<code>Universe</code>: starting DMX Universe number for the first line (0 based so you may need to substract 1 from software) ArtNet <code>Start</code>, <code>On</code>, or <code>1</code>: Start ArtNet mode, listen to UDP port 6454 and force <code>SetOption148 1</code> for autorun at restart<code>Stop</code>, <code>Off</code> or <code>0</code>: Stop ArtNet mode, close UDP port and force <code>SetOption148 0</code> to disable ArtNet mode at restart SetOption148 Enables or disables autorun of ArtNet mode at start. If for any reason listening to UDP port fails, this mode is disabled"},{"location":"ArtNet/#troubleshooting","title":"Troubleshooting","text":"<p>Note: ArtNet mode is not compatible with <code>Fade</code> or <code>Scheme</code>.</p> <p>When ArtNet mode is enabled, packet metrics are added to Teleperiod or can be shown with <code>Status 10</code>.</p> <pre><code>16:47:42.981 RSL: SENSOR = {\"Time\":\"2022-11-12T16:47:42\",\"ArtNet\":{\"PacketsReceived\":40149,\"PacketsAccepted\":40149,\"Frames\":8272,\"PacketsPerRow\":[8030,8030,8030,8030,8029]}}\n</code></pre> ArtNet metric Description PacketsReceived Number of UDP packet received on port 6454 PacketsAccepted Number of packets that are valid ArtNet packets (signature is ok) Frames Number of complete frames displayed (i.e. several packets were aggregated to a single frame) PacketsPerRow Array of number of packets processed for each row; this can indicate packet loss <p><code>ArtNetConfig</code> parameters are pesisted in the following Settings:</p> ArtNet parameter Stored in Cols Stored in <code>StepPixels</code> Rows Stored in <code>Pixels</code> containing Rows*Cols Offset Stored in <code>Rotation</code> Atl Stored in <code>SetOption16</code> (counter/clock-wise) Universe Stored in a new Settings parameter"},{"location":"ArtNet/#limitations","title":"Limitations","text":"<p>The display size is currently limite to 30x30 leds due to RAM and size constraints. It should be possible to go beyond this size with custom builds.</p> <p>The display was only tested with LED Lab from Christopher Schardt</p> <p>LED payload must be formed by a series of 3-bytes for WS2812 or 4-bytes for SK6812 in the following format: GRB for WS2812 and RGBW for SK6812.</p> <p>Multicast is currently untested.</p>"},{"location":"Azure-IoT-Central/","title":"Azure IoT Central","text":"<p>!!! failure \"This feature is not included in precompiled binaries, To use it you must compile your build.</p> <p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n#define USE_MQTT_AZURE_DPS_SCOPEID        \"YOURSCOPEIDHERE\"\n#define USE_MQTT_AZURE_DPS_PRESHAREDKEY   \"YOURPRESHAREDKEYHERE==\"\n</code></pre> <p>As of Tasmota version 9.2.4, Tasmota now supports TLS 1.2 connections to Azure IoT Hub and IoT Central using time bound token authentication based on a unique key.  IoT Central includes Azure Device Provisioning Service which is used for simplified deployment at scale.</p>"},{"location":"Azure-IoT-Central/#benefits","title":"Benefits","text":"<p>Azure IoT Central supports supports bi-directional communication between the could and both IoT Devices and/or Intelligent Edge devices base on Azure IoT Edge and is delivered as a Software as a Service (SaaS).  In addition to telemtary and communication, IoT Central if a full solution for quickly managing and deploying IoT solutions at scale.</p>"},{"location":"Azure-IoT-Central/#authentication","title":"Authentication","text":"<p>This version of Tasmota leverages the Preshared Key authentication, which will create a time bound (one hour by default) SHA256 signature based on a unique key.  Only this signed text is sent across the network over a TLS 1.2 channel ensuring mutual authentication.  Because of this time bound nature, Tasmota must (by default) be configured to synchronize time with public Network Time Protocol Servers.  Developer level information provided here discussed here.</p>"},{"location":"Azure-IoT-Central/#cost","title":"Cost","text":"<p>Azure IoT Central provides a free tier that allows for 2 devices at no charge.</p>"},{"location":"Azure-IoT-Central/#get-started","title":"Get Started","text":""},{"location":"Azure-IoT-Central/#0-create-an-iot-central-application","title":"0. Create an IoT Central Application","text":"<p>Follow the steps here to create an IoT Central Application: https://docs.microsoft.com/en-us/azure/iot-central/core/quick-deploy-iot-central</p>"},{"location":"Azure-IoT-Central/#1-get-the-id-scope","title":"1. Get the ID Scope","text":"<p>Select Administration --&gt; Device Connection to note the ID Scope as shown below:</p> <p></p>"},{"location":"Azure-IoT-Central/#2-create-an-enrollment-group","title":"2. Create an Enrollment Group","text":"<p>Click <code>Create enrollment group</code>, name the group, and select the Attestation type as <code>Shared access signature (SAS)</code>.  Click Save to and copy the Primary Key, as shown below:</p> <p></p>"},{"location":"Azure-IoT-Central/#3-compile-your-binary-including-support-for-azure-iot-device-provisioning-service-and-iot-central","title":"3. Compile your binary including support for Azure IoT Device Provisioning Service (and IoT Central)","text":"<p>Following the directions here: https://tasmota.github.io/docs/Compile-your-build/. Compile your binary adding the following settings to your my_user_config.h adding your Scope Id and your Primary Key.</p> <p>Tip</p> <p>Don't forget your WiFi for complete automation.</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n#define USE_MQTT_AZURE_DPS_SCOPEID        \"0ne002AEBBA\"\n#define USE_MQTT_AZURE_DPS_PRESHAREDKEY   \"iQ9Qtjfux9wWW0guHi/ChRGQX//LLkZEnyUNIaLD8+imAsKvpZwYYT8M0kFPVxt3KjtRF00KpNi5/ejBt+1YLA==\"\n</code></pre>"},{"location":"Azure-IoT-Central/#4-flash-your-device-and-configure-for-wifi","title":"4. Flash your device and configure for WiFi","text":"<p>Tip</p> <p>If you configured the WiFi in the config file, no WiFi configuration needed.</p> <p>Flash your device as discussed here and then configure the WiFi as discussed here.</p>"},{"location":"Azure-IoT-Central/#5-verify-your-automatic-dps-configuration","title":"5. Verify your automatic (DPS) configuration","text":"<p>In the Console of Tasmota, you will see it was registered with Device Provisioning Service (which created the IoT Hub device) and authenticated with a token, connected and it will start sending state:</p> <p></p> <p>If you look at the properties, you will see it automatically defined the Host name, port, TLS and MQTT Client (device Id) -- which defaulted to the MAC address:</p> <p></p> <p>In the IoT Central Application, you can see the telemtry data:</p> <p></p>"},{"location":"Azure-IoT-Hub/","title":"Azure IoT Hub","text":"<p>!!! failure \"This feature is not included in precompiled binaries, To use it you must compile your build.</p> <p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n</code></pre> <p>As of Tasmota version 9.2.4, Tasmota now supports TLS 1.2 connections to Azure IoT Hub using time bound token authentication based on a unique key.  Tasmota can be used with or without Azure Device Provisioning Service which is used for simplified deployment at scale.</p>"},{"location":"Azure-IoT-Hub/#benefits","title":"Benefits","text":"<p>Azure IoT Hub supports bi-directional communication between the could and both IoT Devices and/or Intelligent Edge devices base on Azure IoT Edge.  Azure IoT Hub supports REST, AMQP and the MQTT 3.1.1 protocol as discussed here.  IoT Hub supports Trusted Platform Module (when used with Device Provisioning Service), x509 Certificates and Preshared Keys authentication discussed here.</p>"},{"location":"Azure-IoT-Hub/#authentication","title":"Authentication","text":"<p>This version of Tasmota leverages the Preshared Key authentication, which will create a time bound (one hour by default) SHA256 signature based on a unique key.  Only this signed text is sent across the network over a TLS 1.2 channel ensuring mutual authentication.  Because of this time bound nature, Tasmota must (by default) be configured to synchronize time with public Network Time Protocol Servers.  Developer level information provided here discussed here.</p>"},{"location":"Azure-IoT-Hub/#cost","title":"Cost","text":"<p>Azure IoT Hub provides a free tier that allows for up to 8,000 message a day.</p>"},{"location":"Azure-IoT-Hub/#iot-central","title":"IoT Central","text":"<p>In addition to Azure IoT Hub which is a Platform as a Service (PaaS), Tasmota also works with IoT Central which is a more complete Software as a Service (SaaS).</p>"},{"location":"Azure-IoT-Hub/#how-to-configure-without-device-provisioning-service","title":"How to configure (without Device Provisioning Service)","text":""},{"location":"Azure-IoT-Hub/#0-open-an-azure-subscription","title":"0. Open an Azure Subscription","text":"<p>If you don't already have an Azure Subscription (one is included with most MSDN subscriptions), you can get started here: https://azure.microsoft.com/account/free</p>"},{"location":"Azure-IoT-Hub/#1-create-an-azure-iot-hub-and-a-device","title":"1. Create an Azure IoT Hub and a Device","text":"<p>The following steps will walk you through creating an IoT Hub and your first device using a web browser: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-create-through-portal</p> <p>You will need 3 pieces of information from this step:</p> Information Your Setting Example Value IoT Hub Full Name myiothub.azure-devices.net Device Id myfirstTasmotaDevice Primary Key i2B6TVRnpWGS5i5aZaRddaGTc+tIte1gg4PUkh0t+30="},{"location":"Azure-IoT-Hub/#2-compile-your-binary-including-support-for-azure-iot","title":"2. Compile your binary including support for Azure IoT","text":"<p>Following the directions here: https://tasmota.github.io/docs/Compile-your-build/ compile your binary adding the following settings to your my_user_config.h. <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n</code></pre></p>"},{"location":"Azure-IoT-Hub/#3-flash-your-device-and-configure-for-wifi","title":"3. Flash your device and configure for WiFi","text":"<p>Flash your device as discussed here and then configure the WiFi as discussed here.</p>"},{"location":"Azure-IoT-Hub/#4-configure-your-device-for-you-azure-iot-hub","title":"4. Configure your device for you Azure IoT Hub","text":"<p>In the web portal, click the configuration button and then the configure MQTT button.</p> <p>Following the diagram below, set the: Host (IoT Hub Full Name), Port of 8883, select MQTT TLS, type in the Client and User (your Device Id) and the Password (your Primary Key) and click <code>Save</code>.  Your device will reboot and connect.</p> <p></p>"},{"location":"Azure-IoT-Hub/#5-verify-the-connection","title":"5. Verify the connection","text":"<p>In the Console of Tasmota, you will see it was authenticated with a token, connected and it will start sending state:</p> <p></p> <p>Using a tool like the Azure IoT Explorer, you can see message received in IoT Hub.  Note the topic property.</p> <p></p>"},{"location":"Azure-IoT-Hub/#6-send-a-message-to-your-tasmota","title":"6. Send a message to your Tasmota","text":"<p>Using a tool like the Azure IoT Explorer, select Cloud-to-device message set a property of <code>Topic</code> to <code>/power</code>, add <code>toggle</code> to the message body and click <code>Send message to device</code> button.  All of the Tasmota Commands are discussed here https://tasmota.github.io/docs/Commands/.</p> <p></p>"},{"location":"Azure-IoT-Hub/#how-to-configure-with-device-provisioning-service","title":"How to configure (with Device Provisioning Service)","text":"<p>Azure Device Provisioning Services (DPS) allows for automatic deployment at scale.  Simular to Tasmota authenticating to IoT Hub without DPS, authenticating to DPS uses a time bound SHA256 signature to authenticate over TLS 1.2.</p> <p>For this setup, we configure the following settings when building our binary.  For full automation, you will want to add <code>STA_SSID1</code> and <code>STA_PASS1</code> to your <code>user_config_override.h</code>.</p> <p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n#define USE_MQTT_AZURE_DPS_SCOPEID        \"YOURSCOPEIDHERE\"\n#define USE_MQTT_AZURE_DPS_PRESHAREDKEY   \"YOURPRESHAREDKEYHERE==\"\n</code></pre>"},{"location":"Azure-IoT-Hub/#0-open-an-azure-subscription_1","title":"0. Open an Azure Subscription","text":"<p>If you don't already have an Azure Subscription (one is included with most MSDN subscriptions), you can get started here: https://azure.microsoft.com/account/free</p>"},{"location":"Azure-IoT-Hub/#1-create-a-device-provisioning-service-iot-hub-and-link-them-together","title":"1. Create a Device Provisioning Service, IoT Hub and link them together","text":"<p>Following: https://docs.microsoft.com/en-us/azure/iot-dps/tutorial-set-up-cloud to create your DPS and IoT Hub.  Note your Scope Id for later use as shown below:</p> <p></p>"},{"location":"Azure-IoT-Hub/#2-create-a-group-enrollment-with-a-symmetrical-key","title":"2. Create a Group Enrollment with a Symmetrical Key","text":"<p>In your Device Provisiniong Service, click <code>Manage enrollments</code> and then click <code>Add enrollment group</code>.</p> <p>As shown below, name your group, select Symmetric Key, select your linked IoT Hub and then click <code>Save</code>.</p> <p></p> <p>Once created you can select the enrollment group to retrieve the Primary Key, as shown below:</p> <p></p>"},{"location":"Azure-IoT-Hub/#3-compile-your-binary-including-support-for-azure-iot-device-provisioning-service","title":"3. Compile your binary including support for Azure IoT Device Provisioning Service","text":"<p>Following the directions here: https://tasmota.github.io/docs/Compile-your-build/ compile your binary adding the following settings to your my_user_config.h adding your Scope Id and your Primary Key.</p> <p>!!! tip Don't forget your WiFi settings for complete automation.</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#endif\n#define USE_MQTT_AZURE_IOT\n#define USE_MQTT_AZURE_DPS_SCOPEID        \"0ne00223A39\"\n#define USE_MQTT_AZURE_DPS_PRESHAREDKEY   \"mVVdX8MPUFUoYaG7Wq6HyMcsz0kZNfwVwiafChvFDxrs0s8pa5gVV6myMbqOBCqGraVFZFupD3RiIgx0B4ZACA==\"\n</code></pre>"},{"location":"Azure-IoT-Hub/#4-flash-your-device-and-configure-for-wifi","title":"4. Flash your device and configure for WiFi","text":"<p>!!! tip If you configured the WiFi in the config file, no WiFi configuration needed.</p> <p>Flash your device as discussed here and then configure the WiFi as discussed here.</p>"},{"location":"Azure-IoT-Hub/#5-verify-your-automatic-dps-configuration","title":"5. Verify your automatic (DPS) configuration","text":"<p>In the Console of Tasmota, you will see it was registered with Device Provisioning Service (which created the IoT Hub device) and authenticated with a token, connected and it will start sending state:</p> <p></p> <p>If you look at the Information, you will see it automatically defined: Host, Port, TLS and MQTT Client (device Id) -- which defaulted to the MAC address which is unique:</p> <p></p> <p>Using a tool like the Azure IoT Explorer, you can see message received in IoT Hub.  Note the topic property.</p> <p></p>"},{"location":"Azure-IoT-Hub/#6-send-a-message-to-your-tasmota_1","title":"6. Send a message to your Tasmota","text":"<p>Using a tool like the Azure IoT Explorer, select Cloud-to-device message set a property of Topic to <code>/power</code>, add <code>toggle</code> to the message body and click the <code>Send message to device</code> button.</p> <p></p>"},{"location":"BH1750/","title":"BH1750 ambient light sensor","text":"This feature is included only in <code>tasmota32</code> and <code>tasmota-sensors</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_BH1750\n#define USE_BH1750      // [I2cDriver11] Enable BH1750 sensor (I2C address 0x23 or 0x5C) (+0k5 code)\n#endif\n</code></pre></p> <p>The BH1750 is a digital ambient light sensor module which uses I<sup>2</sup>C to communicate. The BH1750 provides you with a digital value in lux (Lx) over a range of 1 - 65535 lx. See datasheet for more information.</p>"},{"location":"BH1750/#configuration","title":"Configuration","text":""},{"location":"BH1750/#wiring","title":"Wiring","text":"BH1750 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"BH1750/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect BH1750 automatically and display Illuminance.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\"Time\":\"2019-11-03T20:45:37\",\"BH1750\":{\"Illuminance\":79}}\n</code></pre>"},{"location":"BH1750/#commands","title":"Commands","text":"Command Parameters Bh1750Resolution resolution mode. x = sensor number (1..2)<code>0..2</code> = choose sensor resolution (<code>0</code> = high (default), <code>1</code> = high2, <code>2</code> = low) Bh1750MTime Measurement Time value. x = sensor number (1..2)<code>31..254</code> = set measurement time (default = <code>69</code>)"},{"location":"BH1750/#breakout-boards","title":"Breakout Boards","text":""},{"location":"BME280/","title":"BME280 temperature, humidity and pressure sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_BMP\n#define USE_BMP     // [I2cDriver10] Enable BMP085/BMP180/BMP280/BME280 sensors (I2C addresses 0x76 and 0x77) (+4k4 code)\n#endif\n</code></pre></p> <p>BME280 sensor, an environmental sensor with temperature, barometric pressure and humidity\" See BME280 Temperature, Humidity and Pressure Sensor for more information.</p> <p>BME280 driver also supports BMP085, BMP180 and BMP280 pressure sensors.</p>"},{"location":"BME280/#configuration","title":"Configuration","text":""},{"location":"BME280/#wiring","title":"Wiring","text":"BME280 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"BME280/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>Note</p> <p>If you are using breakout boards which break out pins CSB please ensure that you connect this pin to VCC to ensure that the chip stays in I<sup>2</sup>C mode. This is due to some manufacturers of breakout boards add pull-up resistors to allow for SPI compatibility (some would default to SPI, others to I<sup>2</sup>C)_ Connect the SDO pin to GND or VCC to ensure required I<sup>2</sup>C address is used by the chip - Again some manufacturers add resistors to provide external bias but due to them wanting to retain SPI compatibility such pulldown resistors may not be sufficient to ensure that the pin levels are at the correct transition during power-up / reset state._ Since the chip supports both SPI and I<sup>2</sup>C, but in Tasmota only I<sup>2</sup>C is supported you want to make sure that the chip is in I<sup>2</sup>C mode during reset/power-on and remain in that state during operation otherwise unexpected behaviour may result when the Tasmota firmware polls the chip for sensor data.</p> <p>Sonoff Basic wiring</p> <p>After a reboot the driver will detect BME280 automatically and display temperature, humidity and pressure measured.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\n  \"Time\": \"2019-11-03T19:34:28\",\n  \"BME280\": {\n    \"Temperature\": 21.7,\n    \"Humidity\": 66.6,\n    \"Pressure\": 988.6\n  },\n  \"PressureUnit\": \"hPa\",\n  \"TempUnit\": \"C\"\n}\n</code></pre> <p>From v6.1.2.20 you can use multiple BMP Sensors (#4195)</p> <p>Limit is 2 sensors and you have to change the address of one sensor.  Than connect your sensor SCL and SDA parallel to the device.  </p> <p></p> <p>BME280 address change example: </p>"},{"location":"BME280/#commands","title":"Commands","text":"<p><code>TempOffset</code> can be used for calibrating the measured temperature. This setting affects all temperature sensors on the device.</p>"},{"location":"BME280/#breakout-boards","title":"Breakout boards","text":"<p>Do NOT buy Breakout boards which supports 5V too. The onboard vreg will heat the PCB and you get false too high readings</p> <p> </p>"},{"location":"BME680/","title":"BME680 temperature, humidity, pressure and gas sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_BME68X\n#define USE_BME68X      // Enable support for BME680/BME688 sensor using Bosch BME68x library (+6k9 code)\n#endif\n</code></pre></p> <p>BME680 sensor, an environmental I<sup>2</sup>C sensor with temperature, humidity, barometric pressure and gas.</p> <p>The BME680 takes those sensors to the next step in that it contains a small MOX sensor. The heated metal oxide changes resistance based on the volatile organic compounds (VOC) in the air, so it can be used to detect gasses &amp; alcohols such as Ethanol, Alcohol and Carbon Monoxide, and perform air quality measurements. Note it will give you one resistance value, with overall VOC content, but it cannot differentiate gasses or alcohols.</p> <p>See BME680 - Temperature, Humidity, Pressure and Gas Sensor for more information.</p>"},{"location":"BME680/#configuration","title":"Configuration","text":""},{"location":"BME680/#wiring","title":"Wiring","text":"BME680 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"BME680/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>I2C SDA</code> </li> <li>GPIOy to <code>I2C SCL</code></li> </ul> <p>After a reboot the driver will detect BME680 automatically and display temperature, humidity, dew point, pressure and gas resistance measured.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\n  \"Time\": \"2021-09-22T17:00:00\",\n  \"BME680\": {\n    \"Temperature\": 24.5,\n    \"Humidity\": 33.0,\n    \"DewPoint\": 7.1,\n    \"Pressure\": 987.7,\n    \"Gas\": 1086.43\n  },\n  \"PressureUnit\": \"hPa\",\n  \"TempUnit\": \"C\"\n}\n</code></pre>"},{"location":"BME680/#commands","title":"Commands","text":"<ul> <li><code>TempOffset</code> can be used for calibrating the measured temperature. This setting affects all temperature sensors on the device.</li> <li><code>TempRes</code> sets temperature resolution.</li> <li><code>SetOption8</code> sets temperature unit in <code>Celsius</code> or in <code>Fahrenheit</code>.</li> <li><code>SetOption24</code> sets pressure unit in <code>hPa</code> or in <code>mmHg</code>.</li> </ul>"},{"location":"BME680/#breakout-boards","title":"Breakout Boards","text":"<p>Buy from: - Adafruit - AliExpress</p>"},{"location":"BUILDS/","title":"BUILDS","text":""},{"location":"BUILDS/#available-features-and-sensors","title":"Available Features and Sensors","text":"<p>l = lite, t = tasmota (ESP8266 / ESP32), k = knx, s = sensors, i = ir, d = display</p> <p>Note: <code>minimal</code> variant is not listed as it shouldn't be used outside of the upgrading process.</p> Feature or Sensor l t k s i d Remarks MY_LANGUAGE en_GB x x / x x x x x USE_IMPROV x x / x x x x x USE_UFILESYS - - / x - - - - USE_ARDUINO_OTA - - / - - - - - USE_DOMOTICZ - x / x x x x - USE_HOME_ASSISTANT - - / - - - - - USE_TASMOTA_DISCOVERY x x / x x x x x USE_MQTT_TLS* - - / x - - - - USE_MQTT_AWS_IOT - - / - - - - - USE_4K_RSA - - / - - - - - USE_TELEGRAM - - / - - - - - USE_KNX - - / x x - - - USE_WEBSERVER x x / x x x x x USE_WEBSEND_RESPONSE - - / - - - - - USE_EMULATION_HUE x x / x - x - - USE_EMULATION_WEMO x x / x - x - - USE_DISCOVERY - - / - - - - - WEBSERVER_ADVERTISE - x / - x - - x MQTT_HOST_DISCOVERY - - / - - - - - USE_TIMERS x x / x x x x x USE_TIMERS_WEB x x / x x x x x USE_SUNRISE x x / x x x x x USE_RULES x x / x x x x x USE_SCRIPT - - / - - - - - USE_EXPRESSION - - / x - - - - Every ESP32 + ESP8266 &gt; 1MB SUPPORT_IF_STATEMENT - - / x - - - - Every ESP32 + ESP8266 &gt; 1MB USE_HOTPLUG - - / - - - - - USE_PROMETHEUS - - / - - - - - USE_PING - - / - - - - - Feature or Sensor l t k s i d Remarks ROTARY_V1 - x / x - x - - USE_SONOFF_RF - x / - x x - - USE_RF_FLASH - x / - x x - - USE_SONOFF_SC - x / - x x - - USE_TUYA_MCU x x / - x x - x USE_ARMTRONIX_DIMMERS - x / - x - - - USE_PS_16_DZ - x / - x - - - USE_SONOFF_IFAN - x / - x - - - USE_BUZZER - x / x x x - - USE_ARILUX_RF - x / - x - - - USE_SHUTTER - x / x x - - - USE_DEEPSLEEP - x / x - x - - USE_EXS_DIMMER - x / - x - - - USE_DEVICE_GROUPS - x / x - - - - USE_PWM_DIMMER - x / - x - - - USE_KEELOQ - - / - - - - - USE_SONOFF_D1 - x / - x - - - USE_SHELLY_DIMMER - x / - - - - - USE_AC_ZERO_CROSS_DIMMER - x / x x x x x Feature or Sensor l t k s i d Remarks USE_LIGHT x x / x x x x x USE_WS2812 - x / x x x - x USE_WS2812_DMA - - / - - - - - USE_MY92X1 - x / - x x - x USE_SM16716 - x / - x x - x USE_SM2135 - x / - x x - x USE_SM2335 - x / - x x - x USE_BP5758D - x / - x x - x USE_BP1658CJ - x / - x x - x USE_SONOFF_L1 - x / - x x - x USE_ELECTRIQ_MOODL - x / - x x - x USE_ENERGY_SENSOR - x / x x x - - USE_ENERGY_DUMMY - x / x x x - - USE_PZEM004T - x / x x x - - USE_PZEM_AC - x / x x x - - USE_PZEM_DC - x / x x x - - USE_MCP39F501 - x / - x x - - USE_SDM72 - - / x - x - - USE_SDM120 - - / x - x - - USE_SDM230 - - / x - - - - USE_SDM630 - - / x - x - - USE_DDS2382 - - / x - x - - USE_DDSU666 - - / x - x - - USE_SOLAX_X1 - - / - - - - - USE_LE01MR - - / - - - - - USE_BL09XX - x / x x x - - USE_TELEINFO - - / - - - - - USE_IEM3000 - - / - - - - - USE_WE517 - - / x - - - - USE_MODBUS_ENERGY - - / x - - - - USE_ADC_VCC x - / - - - x - USE_COUNTER - x / x x x - x USE_DS18x20 - x / x x x - x USE_DHT - x / x x x - x USE_MAX31855 - - / x - x - - USE_MAX31865 - - / - - - - - USE_THERMOSTAT - - / - - - - - USE_LMT01 - - / x - x - - Feature or Sensor l t k s i d Remarks USE_I2C - x / x x x - x USE_SHT - - / x - x - - USE_HTU - - / x - x - - USE_BMP - - / x - x - - USE_BME68X - - / x - x - - USE_BH1750 - - / x - x - - USE_VEML6070 - - / x - x - - USE_ADS1115 - - / x - x - - USE_INA219 - - / x - x - - USE_INA226 - - / - - - - - USE_INA3221 - - / - - - - - USE_SHT3X - - / x - x - - USE_TSL2561 - - / - - - - - USE_TSL2591 - - / - - - - - USE_MGS - - / x - x - - USE_SGP30 - - / x - x - - USE_SGP40 - - / x - x - - USE_SGP4X - - / x - - - - USE_SEN5X - - / x - x - - USE_SI1145 - - / - - - - - USE_LM75AD - - / x - x - - USE_APDS9960 - - / - - - - - USE_MCP230xx - - / - - - - - USE_MCP23XXX_DRV - - / - - - - - USE_PCA9632 - - / - - - - - USE_PCA9685 - - / - - - - - USE_PCA9685_V2 - - / - - - - - USE_MPR121 - - / - - - - - USE_CCS811 - - / - - x - - USE_CCS811_V2 - - / x - - - - USE_ENS16x - - / - - - - - USE_ENS210 - - / - - - - - USE_MPU6050 - - / - - - - - USE_DS3231 - - / - - - - - USE_MGC3130 - - / - - - - - USE_MAX44009 - - / - - - - - USE_SCD30 - - / x - x - - USE_SCD40 - - / x - - - - USE_SPS30 - - / - - - - - USE_ADE7880 - - / - - - - - USE_ADE7953 - x / x x x - x USE_VL53L0X - - / x - x - - USE_VL53L1X - - / - - - - - USE_MLX90614 - - / - - - - - USE_CHIRP - - / - - - - - USE_PAJ7620 - - / - - - - - USE_PCF8574 - - / - - - - - USE_PMSA003I - - / - - - - - USE_LOX_O2 - - / x - x - - USE_GDK101 - - / - - - - - USE_TC74 - - / - - - - - USE_PCA9557 - - / - - - - - Feature or Sensor l t k s i d Remarks USE_HIH6 - - / x - x - - USE_DHT12 - - / x - x - - USE_DS1624 - - / x - x - - USE_AHT1x - - / - - - - - USE_HDC1080 - - / - - - - - USE_WEMOS_MOTOR_V1 - - / x - x - - USE_IAQ - - / x - x - - USE_AS3935 - - / x - x - - USE_VEML6075 - - / - - - - - USE_VEML7700 - - / - - - - - USE_MCP9808 - - / - - - - - USE_MLX90640 - - / - - - - - USE_HP303B - - / - - - - - USE_EZOCO2 - - / - - - - - USE_EZODO - - / - - - - - USE_EZOEC - - / - - - - - USE_EZOFLO - - / - - - - - USE_EZOHUM - - / - - - - - USE_EZOO2 - - / - - - - - USE_EZOORP - - / - - - - - USE_EZOPH - - / - - - - - USE_EZOPMP - - / - - - - - USE_EZOPRS - - / - - - - - USE_EZORGB - - / - - - - - USE_EZORTD - - / - - - - - USE_SEESAW_SOIL - - / - - - - - USE_TOF10120 - - / - - - - - USE_BM8563 - - / - - - - - USE_AM2320 - - / - - - - - USE_T67XX - - / - - - - - USE_HM330X - - / - - - - - USE_HDC2010 - - / - - - - - USE_PCF85363 - - / - - - - - USE_DS3502 - - / - - - - - USE_HYT - - / - - - - - USE_LUXV30B - - / - - - - - USE_HMC5883L - - / - - - - - USE_QMC5883L - - / - - - - - Feature or Sensor l t k s i d Remarks USE_SPI - - / - - - - x USE_RC522 - - / - - - - - USE_CANSNIFFER - - / - - - - - USE_MHZ19 - - / x - x - - USE_SENSEAIR - - / x - x - - USE_PMS5003 - - / x - x - - USE_NOVA_SDS - - / x - x - - USE_HPMA - - / x - x - - USE_SERIAL_BRIDGE - x / x x x - x USE_MODBUS_BRIDGE - - / x - - - - USE_MP3_PLAYER - - / x - x - - USE_AZ7798 - - / - - - - - USE_PN532_HSU - - / x - x - - USE_RDM6300 - - / x - x - - USE_IBEACON - - / x - x - - USE_GPS - - / - - - - - USE_HM10 - - / - - x - - USE_HRXL - - / x - x - - USE_TASMOTA_CLIENT - - / - - - - - USE_OPENTHERM - - / - - - - - USE_MIEL_HVAC - - / - - - - - USE_PROJECTOR_CTRL - - / - - - - - USE_AS608 - - / - - - - - USE_LD2410 - - / - - - - - USE_GM861 - - / - - - - - USE_TCP_BRIDGE - - / - - - - - zbbridge / zbbrdgpro USE_NRF24 - - / - - - - - USE_MIBLE - - / - - - - - USE_ZIGBEE - - / - - - - - USE_ZIGBEE_ZNP - - / - - - - - USE_ZIGBEE_EZSP - - / - - - - - Sonoff ZbBridge USE_IR_REMOTE - x / - x x x x USE_IR_RECEIVE - x / - x x x x USE_IR_REMOTE_FULL - - / - - - x - Enable ALL protocols USE_SR04 - - / - - x - - USE_ME007 - - / - - - - - USE_DYP - - / - - - - - USE_TM1638 - - / x - x - - USE_HX711 - - / x - x - - USE_TX2x_WIND_SENSOR - - / - - - - - USE_WINDMETER - - / - - - - - USE_RC_SWITCH - - / x - x - - USE_RF_SENSOR - - / x - x - - AlectoV2 only USE_HRE - - / x - x - - USE_A4988_STEPPER - - / - - - - - USE_NEOPOOL - - / - - - - - USE_FLOWRATEMETER - - / - - - - - Feature or Sensor l t k s i d Remarks USE_DISPLAY - - / - - - - x USE_DISPLAY_LCD - - / - - - - x USE_DISPLAY_SSD1306 - - / - - - - x USE_DISPLAY_MATRIX - - / - - - - x USE_DISPLAY_SH1106 - - / - - - - x USE_DISPLAY_ILI9341 - - / - - - - x USE_DISPLAY_EPAPER_29 - - / - - - - x USE_DISPLAY_EPAPER_42 - - / - - - - x USE_DISPLAY_SSD1351 - - / - - - - x USE_DISPLAY_RA8876 - - / - - - - x USE_DISPLAY_ST7789 - - / - - - - x USE_DISPLAY_TM1637 - - / - - - - x USE_DISPLAY_TM1621_SONOFF - - / x - - - - USE_DISPLAY_TM1650 - - / - - - - - USE_FT5206 - - / - - - - - USE_FTC532 - - / - - - - - USE_BS814A2 - - / - - - - - ESP32 Feature l t k s i d Remarks USE_HALLEFFECT / x USE_MI_ESP32 / x See SetOption115 USE_IBEACON_ESP32 / - USE_WEBCAM / - USE_ETHERNET / x USE_I2S_AUDIO / - USE_TTGO_WATCH / - USE_SONOFF_SPM / x USE_DISPLAY_TM1621_SONOFF / x USE_SHELLY_PRO / x USE_DALI / - USE_DINGTIAN_RELAY / - USE_MATTER_DEVICE / x See SetOption151 <ul> <li>USE_MQTT_TLS is enabled by default in every ESP32 variants</li> </ul>"},{"location":"Berry-Cookbook/","title":"Berry Cookbook","text":""},{"location":"Berry-Cookbook/#adding-commands-to-tasmota","title":"Adding commands to Tasmota","text":"<p>It is very easy to dynamically add a command to Tasmota with Berry.</p>"},{"location":"Berry-Cookbook/#trivial-example","title":"Trivial example","text":"<p>Let's start with the most simple command.</p> <p>Let's define a command <code>BrGC</code> that triggers a garbage collection and returns the memory allocated by Berry. We first define the function:</p> <pre><code>def br_gc()\n  var allocated = tasmota.gc()    #- trigger gc and return allocated memory -#\n  import string\n  tasmota.resp_cmnd(string.format('{\"BrGc\":%i}', allocated))\nend\n</code></pre> <p>And register the function:</p> <pre><code>tasmota.add_cmd('BrGc', br_gc)\n</code></pre> <p>Then in Tasmota Console:</p> <pre><code>brgc\n\n21:04:30.369 CMD: brgc\n21:04:30.376 RSL: stat/tasmota_923B34/RESULT = {\"BrGc\":5767}\n</code></pre>"},{"location":"Berry-Cookbook/#general-form-of-the-custom-command-function","title":"General form of the custom command function","text":"<p>The custom command function have the general form below where parameters are optional:</p> <pre><code>def function_name(cmd, idx, payload, payload_json)\n  ...\nend\n</code></pre> Parameter Description <code>cmd</code> <code>string</code> name of the command in lower case. Can be used if same function is used for multiple similar commands for example. <code>idx</code> Command's index is the unsigned <code>integer</code> (optionally) added at the end of the command name before the parameters (like <code>Demo1</code>). Default to 1 if not specified. <code>payload</code> <code>string</code> of the command line as without any parsing. <code>payload_json</code> if the payload is a valid JSON, it is converted into a Berry <code>map</code> object."},{"location":"Berry-Cookbook/#more-complete-example","title":"More complete example","text":"<p>In this example, we will create a new command called <code>LightGold</code> that turns the light on and sets it to color gold #FFD700. This command accepts an optional JSON payload with the argument <code>Dimmer</code> ranging from 0..100.</p> <p>First we define a new Berry function with the logic. This function takes 4 arguments:</p> <ol> <li><code>cmd</code>: the command name (with same case as it was registered). This is useful if you want to share the same code in multiple commands. Here <code>cmd</code> is <code>LightGold</code></li> <li><code>idx</code>: the command index used, default to 1.</li> <li><code>payload</code>: the raw payload of the command as string</li> <li><code>payload_json</code>: the payload parsed as JSON, or <code>nil</code> if the payload is not JSON</li> </ol> <p>Example:</p> <ul> <li>command <code>lightgold</code>: <code>cmd</code>=<code>LightGold</code>, <code>idx</code>=1, <code>payload</code>=<code>\"\"</code>, <code>payload_json</code>=<code>nil</code></li> <li>command <code>LIGHTGOLD2</code>: <code>cmd</code>=<code>LightGold</code>, <code>idx</code>=2, <code>payload</code>=<code>\"\"</code>, <code>payload_json</code>=<code>nil</code></li> <li>command <code>lightgold not sure</code>: <code>cmd</code>=<code>LightGold</code>, <code>idx</code>=1, <code>payload</code>=<code>'not sure'</code>, <code>payload_json</code>=<code>nil</code></li> <li>command <code>lightgold {\"value\":\"some\"}</code>: <code>cmd</code>=<code>LightGold</code>, <code>idx</code>=1, <code>payload</code>=<code>'{\"value\":\"some\"}'</code>, <code>payload_json</code>=<code>{'value':'some'}</code></li> </ul> <p>In Berry, arguments are always optional, so you don't need to define them if you don't need them.</p> <pre><code>def light_gold(cmd, idx, payload, payload_json)\n  var dimmer = 50      #- default brightness to 50% -#\n  var bri\n\n  # parse payload\n  if payload_json != nil &amp;&amp; payload_json.find(\"Dimmer\") != nil    # does the payload contain a 'dimmer' field\n    dimmer = int(payload_json.find(\"Dimmer\"))\n  end\n\n  # set_light expects a brightness in range 0..255\n  bri = tasmota.scale_uint(dimmer, 0, 100, 0, 255)\n\n  # build the payload for set_light\n  var light_payload = {'power':true, 'rgb':'FFD700', 'bri':bri}\n\n  #- set the light values -#\n  tasmota.set_light(light_payload)\n\n  # report the command as successful\n  tasmota.resp_cmnd_done()\nend\n</code></pre> <p>Finally you need to register the command:</p> <pre><code>tasmota.add_cmd('LightGold', light_gold)\n</code></pre> <p>Example (in Tasmota console, not Berry console):</p> <pre><code>lightgold\n\n20:53:28.142 CMD: lightgold\n20:53:28.151 RSL: stat/tasmota_923B34/RESULT = {\"POWER\":\"ON\"}\n20:53:28.153 RSL: stat/tasmota_923B34/POWER = ON\n20:53:28.160 RSL: stat/tasmota_923B34/RESULT = {\"LightGold\":\"Done\"}\n\nlightgold {\"Dimmer\":20}\n\n20:54:16.837 CMD: lightgold {\"Dimmer\":20}\n20:54:16.848 RSL: stat/tasmota_923B34/RESULT = {\"LightGold\":\"Done\"}\n</code></pre>"},{"location":"Berry-Cookbook/#responding-to-commands","title":"Responding to commands","text":"<p>Tasmota expects that you send a response to commands. You can use the following methods:</p> <ul> <li><code>tasmota.resp_cmnd_done()</code>: report command as <code>Done</code> (including translated versions)</li> <li><code>tasmota.resp_cmnd_error()</code>: report command as <code>Error</code></li> <li><code>tasmota.resp_cmnd_failed()</code>: report command as <code>Failed</code></li> <li><code>tasmota.resp_cmnd_str(&lt;msg&gt;)</code>: report an arbitrary string</li> <li><code>tasmota.resp_cmnd(&lt;json&gt;)</code>: report a custom JSON message (not prefixed by command name).</li> </ul>"},{"location":"Berry-Cookbook/#adding-a-button-to-the-main-menu","title":"Adding a button to the Main menu","text":"<p>Adding a button to the e.g. main menu can be achieved by using the message type <code>web_add_main_button()</code>. </p> <p>The method to be performed, when the user clicks the button is achieved by using the <code>web_sensor()</code> method checking for the presence of an argument and a possible value assigned to the argument. The  class provides the necessary methods to read the arguments:</p> <ul> <li><code>webserver.has_arg(arg_name:string)</code>: -&gt; boolean, checks if an argument with this name exists</li> <li><code>webserver.arg_size()</code>: -&gt; integer, returns the number of arguments</li> <li><code>webserver.arg(arg_name:string or arg_index:int)</code>: -&gt; string, returns the value of the argument either by name or by position number [0..arg_size()-1]. If an argument has multiple values, you need to iterate using ints to get all values</li> <li><code>webserver.arg_name(arg_index:int)</code> -&gt; string, get the name of argument by index [0..arg_size()-1]</li> </ul> <p>Additionally the webserver class provides a new function of sending information to the Web UI by using the following methods</p> <ul> <li><code>webserver.content_send(content:string)</code></li> <li><code>webserver.content_send_style(content:string)</code></li> </ul> <p>Let's see an example implementation of button methods in a Driver class</p> <pre><code>import webserver # import webserver class\n\nclass MyButtonMethods\n\n  def myOtherFunction(myValue)\n    #- do something -#\n  end\n\n  #- create a method for adding a button to the main menu -#\n  def web_add_main_button()\n    webserver.content_send(\"&lt;p&gt;&lt;/p&gt;&lt;button onclick='la(\\\"&amp;m_toggle_main=1\\\");'&gt;Toggle Main&lt;/button&gt;\")\n  end\n\n  #- create a method for adding a button to the configuration menu-#\n  def web_add_config_button()\n    #- the onclick function \"la\" takes the function name and the respective value you want to send as an argument -#\n    webserver.content_send(\"&lt;p&gt;&lt;/p&gt;&lt;button onclick='la(\\\"&amp;m_toggle_conf=1\\\");'&gt;Toggle Conf&lt;/button&gt;\")\n  end\n\n  #- As we can add only one sensor method we will have to combine them besides all other sensor readings in one method -#\n  def web_sensor()\n\n    if webserver.has_arg(\"m_toggle_main\")\n      print(\"button pressed\")\n    end\n\n    if webserver.has_arg(\"m_toggle_conf\") # takes a string as argument name and returns a boolean\n\n      # we can even call another function and use the value as a parameter\n      var myValue = int(webserver.arg(\"m_toggle_conf\")) # takes a string or integer(index of arguments) to get the value of the argument\n      self.myOtherFunction(myValue)\n    end\n\n    end\n  end\nd1 = MyButtonMethods()\ntasmota.add_driver(d1)\n</code></pre>"},{"location":"Berry-Cookbook/#creating-an-i2c-driver","title":"Creating an I2C driver","text":"<p>Berry Scripting provides all necessary primitives for a complete I2C driver.</p>"},{"location":"Berry-Cookbook/#step-by-step-approach","title":"Step by step approach","text":"<p>We will explore the different steps to write an I2C driver, and will take the MPU6886 as an example. The native driver already exists, and we'll rewrite it in Berry code.</p> <p>Step 1: detect the device</p> <p>I2C device are identified by address, only one device per address is allowed per I2C physical bus. Tasmota32 supports up to 2 I2C buses, using <code>wire1</code> or <code>wire2</code> objects.</p> <p>To simplify device detection, we provide the convenience method <code>tasmota.scan_wire()</code>. The first argument is the device address (0x68 for MPU6886). The optional second argument is the I2C Tasmota index, allowing to selectively disable some device families. See <code>I2CDevice</code> command and page XXX. The index number for MPU6886 is 58.</p> <pre><code>class MPU6886\n  var wire     # contains the wire object if the device was detected\n\n  def init()\n    self.wire = tasmota.wire_scan(0x68, 58)\n  end\nend\n</code></pre> <p><code>self.wire</code> contains a reference to <code>wire1</code> if the device was detected on I2C bus 1, a reference to <code>wire2</code> if the device was detected on bus 2, or <code>nil</code> if the device was not detected, or if I2C index 58 was disabled through <code>I2CEnable</code>.</p> <p>Step 2: verify the device</p> <p>To make sure the device is actually an MPU6886, we check its signature by reading register 0x75. It should respond 0x19 (see datasheet for MPU6886).</p> <pre><code>[...]\n    if self.wire\n      var v = self.wire.read(0x68,0x75,1)\n      if v != 0x19 return end  #- wrong device -#\n[...]\n</code></pre> <p>Step 3: initialize the device</p> <p>We write a series of values in registers to configure the device as expected (see datasheet).</p> <pre><code>[...]\n      self.wire.write(0x68, 0x6B, 0, 1)\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x6B, 1&lt;&lt;7, 1)    # MPU6886_PWR_MGMT_1\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x6B, 1&lt;&lt;0, 1)    # MPU6886_PWR_MGMT_1\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x1C, 0x10, 1)    # MPU6886_ACCEL_CONFIG - AFS_8G\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1B, 0x18, 1)    # MPU6886_GYRO_CONFIG - GFS_2000DPS\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1A, 0x01, 1)    # MPU6886_CONFIG\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x19, 0x05, 1)    # MPU6886_SMPLRT_DIV\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x38, 0x00, 1)    # MPU6886_INT_ENABLE\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1D, 0x00, 1)    # MPU6886_ACCEL_CONFIG2\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x6A, 0x00, 1)    # MPU6886_USER_CTRL\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x23, 0x00, 1)    # MPU6886_FIFO_EN\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x37, 0x22, 1)    # MPU6886_INT_PIN_CFG\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x38, 0x01, 1)    # MPU6886_INT_ENABLE\n      tasmota.delay(100)\n[...]\n</code></pre> <p>We also pre-compute multiplier to convert raw values to actual values:</p> <pre><code>[...]\n      self.gres = 2000.0/32768.0\n      self.ares = 8.0/32678.0\n      print(\"I2C: MPU6886 detected on bus \"+str(self.wire.bus))\n[...]\n</code></pre> <p>Step 4: read sensor value</p> <p>We will detail here the acceleration senor; gyroscope works similarly and is not further detailed.</p> <p>Reading the x/y/z sensor requires to read 6 bytes as a <code>bytes()</code> object</p> <pre><code>    var b = self.wire.read_bytes(0x68,0x3B,6)\n</code></pre> <p>Each value is 2 bytes. We use <code>bytes.get(offset,size)</code> to extract 2-bytes values at offsets 0/2/4. The size is <code>-2</code> to indicate that values are encoded in Big Endian instead of Little Endian.</p> <pre><code>    var a1 = b.get(0,-2)\n</code></pre> <p>Finally the read value is unsigned 16 bits, but the sensor value is signed 16 bits. We convert 16 bits unsigned to 16 bits signed.</p> <pre><code>    if a1 &gt;= 0x8000 a1 -= 0x10000 end\n</code></pre> <p>We then repeat for y and z:</p> <pre><code>  def read_accel()\n    if !self.wire return nil end  #- exit if not initialized -#\n    var b = self.wire.read_bytes(0x68,0x3B,6)\n    var a1 = b.get(0,-2)\n    if a1 &gt;= 0x8000 a1 -= 0x10000 end\n    var a2 = b.get(2,-2)\n    if a2 &gt;= 0x8000 a2 -= 0x10000 end\n    var a3 = b.get(4,-2)\n    if a3 &gt;= 0x8000 a3 -= 0x10000 end\n    self.accel = [a1 * self.ares, a2 * self.ares, a3 * self.ares]\n    return self.accel\n  end\n</code></pre> <p>Step 5: read sensor every second</p> <p>Simply override <code>every_second()</code></p> <pre><code>  def every_second()\n    if !self.wire return nil end  #- exit if not initialized -#\n    self.read_accel()\n    self.read_gyro()\n  end\n</code></pre> <p>Step 6: display sensor value in Web UI</p> <p>You need to override <code>web_sensor()</code> and provide the formatted string. <code>tasmota.web_send_decimal()</code> sends a string to the Web UI, and converts decimal numbers according to the locale settings.</p> <p>Tasmota uses specific markers:</p> <ul> <li><code>{s}</code>: start of line</li> <li><code>{m}</code>: separator between name and value</li> <li><code>{e}</code>: end of line</li> </ul> <pre><code>  #- display sensor value in the web UI -#\n  def web_sensor()\n    if !self.wire return nil end  #- exit if not initialized -#\n    import string\n    var msg = string.format(\n             \"{s}MPU6886 acc_x{m}%.3f G{e}\"..\n             \"{s}MPU6886 acc_y{m}%.3f G{e}\"..\n             \"{s}MPU6886 acc_z{m}%.3f G{e}\"..\n             \"{s}MPU6886 gyr_x{m}%i dps{e}\"..\n             \"{s}MPU6886 gyr_y{m}%i dps{e}\"..\n             \"{s}MPU6886 gyr_z{m}%i dps{e}\",\n              self.accel[0], self.accel[1], self.accel[2], self.gyro[0], self.gyro[1], self.gyro[2])\n    tasmota.web_send_decimal(msg)\n  end\n</code></pre> <p>Step 7: publish JSON TelePeriod sensor value</p> <p>Similarly to Web UI, publish sensor value as JSON.</p> <pre><code>  #- add sensor value to teleperiod -#\n  def json_append()\n    if !self.wire return nil end  #- exit if not initialized -#\n    import string\n    var ax = int(self.accel[0] * 1000)\n    var ay = int(self.accel[1] * 1000)\n    var az = int(self.accel[2] * 1000)\n    var msg = string.format(\",\\\"MPU6886\\\":{\\\"AX\\\":%i,\\\"AY\\\":%i,\\\"AZ\\\":%i,\\\"GX\\\":%i,\\\"GY\\\":%i,\\\"GZ\\\":%i}\",\n              ax, ay, az, self.gyro[0], self.gyro[1], self.gyro[2])\n    tasmota.response_append(msg)\n  end\n</code></pre>"},{"location":"Berry-Cookbook/#full-example","title":"Full example","text":"<p>The code can be loaded manually with copy/paste, or stored in flash and loaded at startup in <code>autoexec.be</code> as <code>load(\"mpu6886.be\")</code>. Alternatively it can be loaded with a Tasmota native command or rule:</p> <pre><code>Br load(\"mpu6886.be\")\n</code></pre> <p>See code example below for MPU6886:</p> <pre><code>#-\n - Example of I2C driver written in Berry\n -\n - Support for MPU6886 device found in M5Stack\n - Alternative to xsns_85_mpu6886.ino \n -#\n\nclass MPU6886\n  var wire          #- if wire == nil then the module is not initialized -#\n  var gres, ares\n  var accel, gyro\n\n  def init()\n    self.wire = tasmota.wire_scan(0x68, 58)\n\n    if self.wire\n      var v = self.wire.read(0x68,0x75,1)\n      if v != 0x19 return end  #- wrong device -#\n\n      self.wire.write(0x68, 0x6B, 0, 1)\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x6B, 1&lt;&lt;7, 1)    # MPU6886_PWR_MGMT_1\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x6B, 1&lt;&lt;0, 1)    # MPU6886_PWR_MGMT_1\n      tasmota.delay(10)\n      self.wire.write(0x68, 0x1C, 0x10, 1)    # MPU6886_ACCEL_CONFIG - AFS_8G\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1B, 0x18, 1)    # MPU6886_GYRO_CONFIG - GFS_2000DPS\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1A, 0x01, 1)    # MPU6886_CONFIG\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x19, 0x05, 1)    # MPU6886_SMPLRT_DIV\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x38, 0x00, 1)    # MPU6886_INT_ENABLE\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x1D, 0x00, 1)    # MPU6886_ACCEL_CONFIG2\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x6A, 0x00, 1)    # MPU6886_USER_CTRL\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x23, 0x00, 1)    # MPU6886_FIFO_EN\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x37, 0x22, 1)    # MPU6886_INT_PIN_CFG\n      tasmota.delay(1)\n      self.wire.write(0x68, 0x38, 0x01, 1)    # MPU6886_INT_ENABLE\n      tasmota.delay(100)\n\n      self.gres = 2000.0/32768.0\n      self.ares = 8.0/32678.0\n      print(\"I2C: MPU6886 detected on bus \"+str(self.wire.bus))\n    end\n  end\n\n  #- returns a list of 3 axis, float as g acceleration -#\n  def read_accel()\n    if !self.wire return nil end  #- exit if not initialized -#\n    var b = self.wire.read_bytes(0x68,0x3B,6)\n    var a1 = b.get(0,-2)\n    if a1 &gt;= 0x8000 a1 -= 0x10000 end\n    var a2 = b.get(2,-2)\n    if a2 &gt;= 0x8000 a2 -= 0x10000 end\n    var a3 = b.get(4,-2)\n    if a3 &gt;= 0x8000 a3 -= 0x10000 end\n    self.accel = [a1 * self.ares, a2 * self.ares, a3 * self.ares]\n    return self.accel\n  end\n\n  #- returns a list of 3 gyroscopes, int as dps (degree per second)  -#\n  def read_gyro()\n    if !self.wire return nil end  #- exit if not initialized -#\n    var b = self.wire.read_bytes(0x68,0x43,6)\n    var g1 = b.get(0,-2)\n    if g1 &gt;= 0x8000 g1 -= 0x10000 end\n    var g2 = b.get(2,-2)\n    if g2 &gt;= 0x8000 g2 -= 0x10000 end\n    var g3 = b.get(4,-2)\n    if g3 &gt;= 0x8000 g3 -= 0x10000 end\n    self.gyro = [int(g1 * self.gres), int(g2 * self.gres), int(g3 * self.gres)]\n    return self.gyro\n  end\n\n  #- trigger a read every second -#\n  def every_second()\n    if !self.wire return nil end  #- exit if not initialized -#\n    self.read_accel()\n    self.read_gyro()\n  end\n\n  #- display sensor value in the web UI -#\n  def web_sensor()\n    if !self.wire return nil end  #- exit if not initialized -#\n    import string\n    var msg = string.format(\n             \"{s}MPU6886 acc_x{m}%.3f G{e}\"..\n             \"{s}MPU6886 acc_y{m}%.3f G{e}\"..\n             \"{s}MPU6886 acc_z{m}%.3f G{e}\"..\n             \"{s}MPU6886 gyr_x{m}%i dps{e}\"..\n             \"{s}MPU6886 gyr_y{m}%i dps{e}\"..\n             \"{s}MPU6886 gyr_z{m}%i dps{e}\",\n              self.accel[0], self.accel[1], self.accel[2], self.gyro[0], self.gyro[1], self.gyro[2])\n    tasmota.web_send_decimal(msg)\n  end\n\n  #- add sensor value to teleperiod -#\n  def json_append()\n    if !self.wire return nil end  #- exit if not initialized -#\n    import string\n    var ax = int(self.accel[0] * 1000)\n    var ay = int(self.accel[1] * 1000)\n    var az = int(self.accel[2] * 1000)\n    var msg = string.format(\",\\\"MPU6886\\\":{\\\"AX\\\":%i,\\\"AY\\\":%i,\\\"AZ\\\":%i,\\\"GX\\\":%i,\\\"GY\\\":%i,\\\"GZ\\\":%i}\",\n              ax, ay, az, self.gyro[0], self.gyro[1], self.gyro[2])\n    tasmota.response_append(msg)\n  end\n\nend\nmpu6886 = MPU6886()\ntasmota.add_driver(mpu6886)\n</code></pre>"},{"location":"Berry-Cookbook/#lvgl-touchscreen-with-3-relays","title":"LVGL Touchscreen with 3 Relays","text":"<pre><code>#- start LVGL and init environment -#\nlv.start()\n\nhres = lv.get_hor_res()     # should be 240\nvres = lv.get_ver_res()     # should be 320\n\nscr = lv.scr_act()          # default screean object\nf20 = lv.montserrat_font(20)  # load embedded Montserrat 20\nf28 = lv.montserrat_font(28)  # load embedded Montserrat 28\n\n#- Background -#\nscr.set_style_local_bg_color(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, lv_color(0x000066))  # background in dark blue #000066\n\n#- Upper state line -#\nstat_line = lv_label(scr)\nif f20 != nil stat_line.set_style_local_text_font(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, f20) end\nstat_line.set_long_mode(lv.LABEL_LONG_SROLL)                                                  # auto scrolling if text does not fit\nstat_line.set_width(hres)\nstat_line.set_align(lv.LABEL_ALIGN_LEFT)                                                      # align text left\nstat_line.set_style_local_bg_color(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, lv_color(0x000088))    # background #000088\nstat_line.set_style_local_bg_opa(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, lv.OPA_COVER)            # 100% background opacity\nstat_line.set_style_local_text_color(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, lv_color(0xFFFFFF))  # text color #FFFFFF\nstat_line.set_text(\"Tasmota\")\nstat_line_height = stat_line.get_height()\n\n#- display wifi strength indicator icon (for professionals ;) -#\nstat_line.set_style_local_pad_right(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, stat_line_height + 1)\nwifi_bars = lv_wifi_bars(stat_line)\nwifi_bars.set_style_local_bg_color(lv.OBJ_PART_MAIN, lv.STATE_DEFAULT, lv_color(lv.BLACK))\nwifi_bars.set_height(stat_line_height)\nwifi_bars.set_width(stat_line_height)\nwifi_bars.set_x(stat_line.get_width() - stat_line_height)\n\n#- create a style for the buttons -#\nbtn_style = lv_style()\nbtn_style.set_radius(lv.STATE_DEFAULT, 10)                                                    # radius of rounded corners\nbtn_style.set_bg_opa(lv.STATE_DEFAULT, lv.OPA_COVER)                                          # 100% background opacity\nif f28 != nil btn_style.set_text_font(lv.STATE_DEFAULT, f28) end\nbtn_style.set_bg_color(lv.STATE_DEFAULT, lv_color(0x33BBFF))                                  # background color #1FA3EC (Tasmota Blue)\nbtn_style.set_border_color(lv.STATE_DEFAULT, lv_color(0x0000FF))                              # border color #0000FF\n#btn_style.set_bg_color(lv.STATE_FOCUSED, lv_color(0x0000FF))                                  # background color when pressed #0000FF\n#btn_style.set_border_color(lv.STATE_FOCUSED, lv_color(0xFFFFFF))                              # border color when pressed #FFFFFF\nbtn_style.set_text_color(lv.STATE_DEFAULT, lv_color(0x000000))                                # text color #FFFFFF\n#- enabled -#\nbtn_style.set_bg_color(lv.STATE_CHECKED, lv_color(0x0000FF))                                  # background color #1FA3EC (Tasmota Blue)\nbtn_style.set_text_color(lv.STATE_CHECKED, lv_color(0xFFFFFF))                                # text color #FFFFFF\nbtn_style.set_outline_width(lv.STATE_FOCUSED, 0)                                              # remove focus outline, not needed with touchscreen\n\n#- register buttons -#\nvar btns = []         # relay buttons are added to this list to match with Tasmota relays\n\n#- simple function to find the index of an element in a list -#\ndef findinlist(l, x)\n  for i:0..size(l)-1\n    if l[i] == x\n      return i\n    end\n  end\nend\n\n#- callback function when a button is pressed -#\n#- checks if the button is in the list, and react to EVENT_VALUE_CHANGED event -#\ndef btn_event_cb(o, event)\n  var btn_idx = findinlist(btns, o)\n  if btn_idx != nil &amp;&amp; event == lv.EVENT_VALUE_CHANGED\n    var val = o.get_state() &lt; lv.BTN_STATE_CHECKED_RELEASED   # true if checked, false if unchecked\n    tasmota.set_power(btn_idx, !val)                          # toggle the value\n  end\nend\n\n#- create a button object, set style, register callback and add to global list -#\n#- you still need to re-position the button -#\ndef create_btn_relay(label)\n  var btn, btn_label\n  btn = lv_btn(scr)\n  btn.set_pos(30, 30)\n  btn.set_size(hres - 60, 60)\n  btn.add_style(lv.OBJ_PART_MAIN, btn_style)\n  btn.set_checkable(true)                                                                      # enable toggle mode\n  btn_label = lv_label(btn)\n  btn_label.set_text(label)\n  btn.set_event_cb(btn_event_cb)                            # set callback to update Tasmota relays\n  btns.push(btn)                                            # append button to the list\n  return btn\nend\n\n#- create 3 buttons -#\nvar btn1 = create_btn_relay(\"Relay 1\")\nbtn1.set_y(30)\nvar btn2 = create_btn_relay(\"Relay 2\")\nbtn2.set_y(100)\nvar btn3 = create_btn_relay(\"Relay 3\")\nbtn3.set_y(170)\n\n#- update the buttons values according to internal relays status -#\ndef btns_update()\n  var power_list = tasmota.get_power()                                            # get a list of booleans with status of each relay\n  for b:btns\n    var state = b.get_state()\n    var power_state = (size(power_list) &gt; 0) ? power_list.pop(0) : false          # avoid exception if less relays than buttons\n    if state != lv.BTN_STATE_PRESSED &amp;&amp; state != lv.BTN_STATE_CHECKED_PRESSED     # update only if the button is not currently being pressed\n      b.set_state(power_state ? lv.BTN_STATE_CHECKED_RELEASED : lv.BTN_STATE_RELEASED)\n    end\n  end\nend\n\n#- update every 500ms -#\ndef btns_update_loop()\n  btns_update()\n  tasmota.set_timer(500, btns_update_loop)\nend\nbtns_update_loop()  # start\n\n# If you change the style after creating the button, you need to update objects:\ndef btns_refresh_style()\n  for b:btns b.refresh_style(lv.OBJ_PART_MAIN, lv.STYLE_PROP_ALL) end\nend\n\n# Button states, read and set with:\n#   btn1.get_state()  or  btn1.set_state(lv.BTN_STATE_CHECKED_RELEASED)\n# Ex:\n#    btn1.set_state(lv.BTN_STATE_RELEASED)\n#    btn1.set_state(lv.BTN_STATE_CHECKED_RELEASED)\n\n#- Here are the states for buttons -#\n# BTN_STATE_RELEASED\n# BTN_STATE_PRESSED\n# BTN_STATE_DISABLED\n# BTN_STATE_CHECKED_RELEASED\n# BTN_STATE_CHECKED_PRESSED\n# BTN_STATE_CHECKED_DISABLED\n</code></pre>"},{"location":"Berry-Cookbook/#multi-zone-heating-controller","title":"Multi-Zone Heating Controller","text":"<p>This project is a multi-zone heating controller written entirely in berry. It demonstrates the use of the persist module for saving/loading data; the webserver module for creating a custom \"Manage Heating\" user interface; dynamic loading of HTML from the file system; subscribing to a variety of rule triggers (using tasmota.add_rule); the implementation of custom commands (using tasmota.add_cmnd). It also makes good use of time functionality (via <code>tasmota.rtc</code>, <code>tasmota.time_dump</code>, <code>tasmota.set_timer</code> and <code>tasmota.strftime</code>). The project also includes an LCD I2C driver for running a basic 20x4 display. The entire driver is implemented using just the <code>tasmota.wire_scan</code> method.</p> <p>https://github.com/Beormund/Tasmota32-Multi-Zone-Heating-Controller</p>"},{"location":"Berry-Cookbook/#ethernet-network-flipper","title":"Ethernet Network Flipper","text":"<p>Used on board with Ethernet. If both Wi-Fi and Ethernet are active, turn off Wi-Fi. Place code in <code>autoexec.be</code> to execute on boot. You can call the function from Berry console any time with <code>netflip()</code>.</p> <pre><code>def netflip()\n  var eth = tasmota.eth().find('ip') != nil   #1\n  if tasmota.wifi().find('ip') != nil == eth  #2\n    tasmota.cmd('Wifi ' .. (eth ? 0 : 1))     #3\n  end\nend\ntasmota.set_timer(30000,netflip)              #4\n</code></pre> <ol> <li>store variable \"eth\" with Ethernet status - \"true\" if Ethernet IP exists and \"false\" if not</li> <li>check if wifi status is true and compare to eth status</li> <li>send command <code>Wifi</code> with parameter depending on eth variable. <code>..</code> is to concatenate a string. See Berry manual</li> <li>set a timer to execute the netflip function 30000ms (30 seconds) after loading <code>autoexec.be</code></li> </ol> <p>For newer Berry versions, there is an improved version:</p> <pre><code># Ethernet Network Flipper - checks every 30 seconds if ethernet if up\n# if Ethernet is up, Wifi is turned off to avoid interference with Zigbee\n# if Ethernet is down, Wifi is turned back on to allow fallback connection\ndef netflip()\n  var eth = tasmota.eth('up')                 #1\n  if tasmota.wifi('up') == eth                #2\n    tasmota.cmd('Wifi ' + (eth ? '0' : '1'))  #3\n  end\n  tasmota.set_timer(30000,netflip)            #4\nend\ntasmota.set_timer(30000,netflip)              #5\n</code></pre> <ol> <li>store variable \"eth\" with Ethernet status - \"true\" if Ethernet IP exists and \"false\" if not</li> <li>check if wifi and eth are both up or both down</li> <li>send command <code>Wifi</code> with parameter depending on eth variable, turn Wifi on if eth is down, turn Wifi off if eth is up</li> <li>set a timer to execute the netflip function every 30000ms (30 seconds)</li> <li>set a timer to execute the netflip function 30000ms (30 seconds) after loading <code>autoexec.be</code></li> </ol>"},{"location":"Berry-Cookbook/#tmp117-driver","title":"TMP117 Driver","text":"<p>TomsTek@GitHub</p>"},{"location":"Berry-Cookbook/#call-function-at-intervals","title":"Call function at intervals","text":"<p>This small helper function allows you to call a function at stable intervals, automatically correcting in case of latency or other deviations. Not suitable for very short intervals; while the delay interval is in milliseconds for consistency with the standard <code>tasmota.set_timer</code>, it would normally be seconds multiplied by 1000, like 60000 for every minute.</p> <p><pre><code>def set_timer_modulo(delay,f,id)\n  var now=tasmota.millis()\n  tasmota.set_timer((now+delay/4+delay)/delay*delay-now, def() set_timer_modulo(delay,f,id) f() end, id)\nend\n</code></pre> Note that the timer calculation will overflow after about 25 days of uptime, resulting in incorrect timer values.  A better option is to use cron instead.</p>"},{"location":"Berry-Cookbook/#h-bridge-control","title":"H-bridge control","text":"<p>An H-bridge is an electronic circuit that switches the polarity of a voltage applied to a load. These circuits are often used in robotics and other applications to allow DC motors to run forwards or backwards.</p> <p>You can typically use 2 PWM channels to pilot a H-bridge, under the condition that both channels are never active at the same time; otherwise you may destroy your device. This means that phasing must be calculated so that one pulse started once the other pulse is inactive, and the sum of both duty cycles must not exceed 100%.</p> <p>The following Berry function ensures appropriate management of H-bridge:</p> <pre><code>#\n# H_bridge class in Berry to pilot a H-bridge device\n#\n\nclass H_bridge\n  var gpio1, gpio2\n  var max\n\n  # init(phy_gpio1, phy_gpio2) - initialize H-bridge with the 2 GPIOs used to control it\n  def init(gpio1, gpio2)\n    self.gpio1 = gpio1\n    self.gpio2 = gpio2\n    self.max = 1023     # max value of duty\n  end\n\n  # set the value of both PWM values\n  def set(v1, v2)\n    if v1 &lt; 0   v1 = 0 end\n    if v2 &lt; 0   v2 = 0 end\n    if v1 + v2 &gt; self.max\n      raise \"value_error\", \"the sum of duties must not exceed 100%\"\n    end\n\n    import gpio\n    gpio.set_pwm(self.gpio1, v1, 0)\n    gpio.set_pwm(self.gpio2, v2, v1)    # dephase by value v1\n  end\nend\n</code></pre> <p>Example of use:</p> <pre><code>var hbridge = H_bridge(12, 13)    # use GPIO12 and GPIO13\nhbridge.set(100,200)              # set values to 102/1023 and 204/1023, i.e. 10% and 20%\n\nhbridge.set(100,950)              # set values to 102/1023 and 950/1023, i.e. 10% and 93%\nBRY: Exception&gt; 'value_error' - the sum of duties must not exceed 100%\n</code></pre>"},{"location":"Berry-Cookbook/#flash-to-file","title":"Flash to file","text":"<p>This is an example of dumping the content of the internal flash of the ESP32 and write the content in the file system that you can download back to your PC.</p> <p>The example below dumps the content of the safeboot partition.</p> <pre><code>def flash_to_file(filename, addr, len)\n  import flash\n  import string\n\n  var f = open(filename, \"wb\")\n  try\n    # Do 4KB chunks\n\n    while len &gt; 0\n      var chunk = 512\n      if len &lt; chunk    chunk = len end\n      var b = flash.read(addr, chunk)\n      print(string.format(\"0x%06X - %s (%i)\", addr, str(b), chunk))\n      f.write(b)\n      b = nil\n\n      addr += chunk\n      len -= chunk\n    end\n\n    f.close()\n  except .. as e,m\n    f.close()\n  end\n\nend\n\nflash_to_file(\"safe_boot_flashed.bin\", 0x10000, 768320)\n</code></pre>"},{"location":"Berry-Cookbook/#tank-sensor","title":"Tank Sensor","text":"<p>Tank Sensor for fuel-oil volume measurement using a VL53L1X or SR04 sensor</p> <p>https://github.com/trlafleur/Tasmota-Tank-Sensor</p>"},{"location":"Berry-Cookbook/#home-assistant-controls-for-tasmota","title":"Home Assistant Controls for Tasmota","text":"<p>This is a Tasmota Berry Script library to greatly simplify the process of exposing Home Assistant controls (e.g. Pull-down Lists, Number Sliders, Sensors, etc.) from a Tasmota device - and handling the communication between both sides.</p> <p>https://github.com/fmtr/hct</p>"},{"location":"Berry-Cookbook/#build-mqtt-topic-string-based-on-fulltopic-configuration","title":"Build MQTT topic string based on FullTopic configuration","text":"<p>This code bit illustrates how you can create a topic string in the form of the <code>FullTopic</code> specification. Details like which <code>%prefix%</code> you want and what topic last level are obviously variable. In a class, creating the variable makes snnse in <code>init()</code> to avoid issuing commands every time. Commands prefixed with <code>_</code> does avoid MQTT messages, but this feature is not available on older Tasmota version.</p> <pre><code>var topic = string.replace(string.replace(\n              tasmota.cmd('_FullTopic',true)['FullTopic'],\n              '%topic%', tasmota.cmd('_Topic',true)['Topic']),\n              '%prefix%', tasmota.cmd('_Prefix',true)['Prefix3'])\n            + 'SENSOR'\n</code></pre>"},{"location":"Berry-Cookbook/#wake-on-lan","title":"Wake-on-LAN","text":"<p>The code below sends WoL (Wake on Lan) packets so you can wake up a device located on the same LAN.</p> <pre><code>def send_wake_on_lan(mac, broadcast_ip)\n  import string\n  u = udp()\n  u.begin(\"\", 0)\n  var payload = bytes(\"FFFFFFFFFFFF\")\n  var mac_bytes = bytes().fromhex(string.tr(mac, \":\", \"\"))\n  for i:1..16\n    payload += mac_bytes\n  end\n  #print(payload)\n  return u.send(broadcast_ip, 9, payload)\nend\n\n\nsend_wake_on_lan(\"84:CC:A8:64:B7:68\", \"192.168.2.255\")\n</code></pre>"},{"location":"Berry-Cookbook/#other-resources","title":"Other resources","text":"<p>For Tasmota the're many Berry scripts available which can be found in the links below.</p> <p>https://github.com/arendst/Tasmota/tree/development/tasmota/berry http://sfromis.strangled.net/tasmota/berry/github-repositories https://github.com/tasmota/Berry_playground/tree/main</p>"},{"location":"Berry-Introduction/","title":"Berry Introduction (in 20 minutes or less)","text":"<p>This quick start will drive you in the basics of the Berry language. It should take no more than 20 minutes and is inspired by Ruby in Twenty Minutes</p> <p>Berry is an ultra-lightweight dynamically typed scripting language. It is designed for lower-performance embedded devices. It also runs on a regular computer, and it can run directly in your browser for quick testing.</p> <p>Berry is the next generation scripting for Tasmota, embedded by default in all ESP32 based firmwares. It is used for advanced scripting and superseded Rules. Its advanced features are used to extend Tasmota: adding commands, adding drivers (I2C, serial...), extending the web UI, adding full applications (TAPP files), driving advanced graphics with LVGL.</p> <p>To start with Berry, you have at least 3 choices:</p> <ul> <li>use the Berry online console and start in less than 10 seconds</li> <li>flash an ESP32 based device with Tasmota and use the Berry console</li> <li>compile Berry on your computer from sources and run the Berry interpreter (less preferred)</li> </ul>"},{"location":"Berry-Introduction/#hello-berry","title":"Hello, Berry","text":"<p>In the console type:</p> <pre><code>&gt; print(\"Hello, Berry\")\nHello, Berry\n</code></pre> <p>What just happened? We just sent the simplest possible Berry program <code>print(\"Hello, Berry\")</code>. Internally this program was compiled into Berry bytecode and ran using the Berry virtual machine.</p> <p>In Berry you can append commands one after the other. Contrary to <code>C</code> you don't need any separator like <code>;</code>. Unlike <code>Python</code> indentation has no importance. Commands need only to be separated by at least one space-like character: space, tab, newline.</p> <pre><code>&gt; print(\"Hello, Berry\") print(\"Hello, Berry\")\nHello, Berry\nHello, Berry\n</code></pre> <p>In this second example, the implicit program contains 2 commands.</p>"},{"location":"Berry-Introduction/#your-free-calculator-is-here","title":"Your free calculator is here","text":"<p>Not surprisingly, like most scripting languages you can do direct calculation.</p> <pre><code>&gt; 3+2\n5\n&gt; 3*2\n6\n</code></pre> <p>The above computations are made against integers. Berry supports either 32 bits or 64 bits integers depending on the underlying platform (usually 32 bits on embedded systems).</p> <p>Berry supports floating point calculation, as soon as at lest one member if floating point. Floating point uses either 32 bits <code>float</code> or 64 bits <code>double</code> depending on compilation options (usually 32 bits on embedded systems).</p> <pre><code>&gt; 3/2\n1\n&gt; 3.0/2\n1.5\n&gt; 1/3.0\n0.333333\n</code></pre> <p>The command <code>3/2</code> works on integers and returns an integer result. <code>3.0/2</code>, <code>3/2.0</code> or <code>3.0/2.0</code> work on floating point numbers since at least one operand is floating point.</p> <p>You can convert an integer to floating point using <code>real()</code> and truncate to integer with <code>int()</code>.</p> <pre><code>&gt; 3/2\n1\n&gt; real(3)/2\n1.5\n&gt; int(3.0/2)\n1\n</code></pre> <p>Beyond the core Berry language, advanced math function are available via the additional module <code>math</code> see documentation.</p> <pre><code>&gt; import math\n&gt; math.sqrt(2)       # square root of 2\n1.41421\n\n&gt; math.pow(2,3)      # 2^3\n8\n</code></pre>"},{"location":"Berry-Introduction/#defining-a-function","title":"Defining a function","text":"<p>What if you want to say \"Hello\" a lot without getting your fingers all tired? You should define another function:</p> <pre><code>&gt; def hi() print(\"Hello, Berry\") end\n&gt; \n</code></pre> <p>Now let's call the function:</p> <pre><code>&gt; hi()\nHello, Berry\n</code></pre> <p><code>hi</code> is a function that takes no argument, returns nothing, and prints a message in the console. Calling a function always requires sending arguments between parenthesis <code>()</code>. Otherwise Berry thinks that you want to manipulate the function itself as an entity.</p> <pre><code>&gt; hi           # return the function entity itself\n&lt;function: 0x3ffdac6c&gt;\n\n&gt; hi()         # call the function\nHello, Berry\n</code></pre> <p>What if we want to say hello to one person, and not only to Berry? Just redefine hi function to take a name as an argument.</p> <pre><code>&gt; def hi(name) print(\"Hello, \" + name) end\n</code></pre> <p>This way, <code>hi</code> is a function that takes a single argument as string.</p> <pre><code>&gt; hi(\"Skiars\") hi(\"Theo\")\nHello, Skiars\nHello, Theo\n</code></pre> <p>This function only works if the argument is a string, and fails if you use any other type of argument. Let's use <code>str()</code> built-in function to force-convert the argument to a string.</p> <pre><code>&gt; def hi(name) print(\"Hello, \" + str(name)) end\n\n&gt; hi(\"Skiars\") hi(\"Theo\")\nHello, Skiars\nHello, Theo\n\n&gt; hi(2)\nHello, 2\n</code></pre> <p>What happens if you don't send any argument to a function that expects one? Let's try:</p> <pre><code>&gt; def hi(name) print(\"Hello, \" + str(name)) end\n\n&gt; hi()\nHello, nil\n</code></pre>"},{"location":"Berry-Introduction/#the-knights-who-say-nil","title":"The knights who say <code>nil</code>","text":"<p>What is this <code>nil</code> thing? Berry has a special value <code>nil</code> meaning \"nothing\". <code>nil</code> is the implicit value passed to a function when no argument is sent, or the value returned by a function that does not return anything.</p> <pre><code>&gt; nil\nnil\n\n&gt; hi(nil)\nHello, nil\n\n&gt; hi()\nHello, nil\n</code></pre> <p>As you see, <code>nil</code> is the implicit value passed when arguments are missing, but also a value that you can pass explicitly.</p>"},{"location":"Berry-Introduction/#formatting-strings","title":"Formatting strings","text":"<p>In the above example, we only concatenated two strings. Berry provides a more advanced scheme to format numerical values as well. It is widely inspired from <code>C</code> formatting used by <code>printf</code>. Don't forget to import the <code>string</code> module first.</p> <pre><code>&gt; import string\n&gt; def say_hi(name) print(string.format(\"Hello, %s!\", name)) end\n&gt; def say_bye(name) print(string.format(\"Bye, %s, come back soon\", name)) end\n\n&gt; say_hi(\"Bob\")\nHello, Bob!\n&gt; say_bye(\"Bob\")\nBye, Bob, come back soon\n</code></pre> <p>You can combine with string functions like <code>toupper()</code> to convert to uppercase</p> <pre><code>&gt; import string\n&gt; name = \"Bob\"\n&gt; string.format(\"Hello, %s!\", string.toupper(name))\nHello, BOB!\n</code></pre> <p>In the example above, we have created a global variable called <code>name</code> containing the string <code>\"Bob\"</code> and used <code>string.toupper()</code> to convert it to all uppercase.</p>"},{"location":"Berry-Introduction/#evolving-into-a-greeter","title":"Evolving into a Greeter","text":"<p>What if we want a real greeter around, one that remembers your name and welcomes you and treats you always with respect. You might want to use an object for that. Let\u2019s create a \u201cGreeter\u201d class.</p> <p>Note: since it's a multi-line example, you may need to copy the entire block and paste it at once in the console (not line-by-line).</p> <pre><code>class Greeter\n  var name\n\n  def init(name)\n    self.name = name\n  end\n\n  def say_hi()\n    import string\n    print(string.format(\"Hi %s\", self.name))\n  end\n\n  def say_bye()\n    import string\n    print(string.format(\"Bye %s, come back soon.\", self.name))\n  end\nend\n</code></pre> <p>The new keyword here is <code>class</code>. This defines a new class called <code>Greeter</code> and a bunch of methods for that class. Also notice <code>var name</code>. This is an instance variable, and is available to all the methods of the class. As you can see it\u2019s used by <code>say_hi</code> and <code>say_bye</code> as <code>self.name</code>.</p> <p>The <code>init()</code> method is a special method called a \"constructor\". It is implicitly called when you create a new instance for the class, and the arguments are passed to <code>init()</code>. The constructor is responsible for complete initialization of the object, and it's always the first method called. The above example is typical of any object: it takes an argument <code>name</code> and copies it to an instance variable <code>self.name</code> to make it available to any method.</p> <p>Note: Berry has no concept of private members (contrary to C++). All instance variables and methods are always public.</p>"},{"location":"Berry-Introduction/#creating-a-greeter-object","title":"Creating a greeter object","text":"<p>Now let\u2019s create a greeter object and use it:</p> <pre><code>&gt; greeter = Greeter(\"Pat\")\n&gt; greeter.say_hi()\nHi Pat\n&gt; greeter.say_bye()\nBye Pat, come back soon.\n</code></pre> <p>Once the <code>greeter</code> object is created, it remembers that the name is Pat.  If you want to get the <code>name</code> from a greeter, you can ask a greeter by accessing the name variable on it (without parenthesis):</p> <pre><code>&gt; greeter.name\nPat\n</code></pre>"},{"location":"Berry-Introduction/#subclasses","title":"Subclasses","text":"<p>Methods and instance variables are defined at the class creation. You can't add method or instance variables to an already existing class. To extend a class you can create a sub-class:</p> <pre><code>class SurGreeter : Greeter     # subclass of Greeter\n  var surname\n\n  def init(name, surname)      # sub-class takes 2 arguments\n    super(self).init(name)     # call constructor of super-class\n    self.surname = surname\n  end\n\n  def say_hi()\n    import string\n    print(string.format(\"Hi %s %s\", self.name, self.surname))\n  end\nend\n</code></pre> <p>The class <code>SurGreeter</code> extends <code>Greeter</code> with an additional <code>surname</code> field. It overwrides <code>say_hi()</code> but leaves <code>say_bye()</code> unchanged.</p> <p>There is a special syntax for calling a method of the subclass <code>super(self).init(name)</code>.</p> <p>Note: classes have always an <code>init()</code> method, either because it was explicitly defined, or implicitly. It is always ok to call <code>super(self).init()</code> even if the subclass has no explicit <code>init()</code> method.</p> <p>Now let's try this new class:</p> <pre><code>&gt; greet = SurGreeter(\"John\", \"Smith\")\n&gt; greet.say_hi()\nHi John Smith\n&gt; greet.say_bye()\nBye John, come back soon.\n\n&gt; greet.name\nJohn\n&gt; greet.surname\nSmith\n</code></pre>"},{"location":"Berry-Introduction/#greetings-everyone","title":"Greetings everyone!","text":"<p>This greeter isn\u2019t all that interesting though, it can only deal with one person at a time. What if we had some kind of MegaGreeter that could either greet the world, one person, or a whole list of people? Let\u2019s try to build that. We will start with a class definition:</p> <pre><code>class MegaGreeter\n  var names\n\n  def init(name)\n    self.names = []          # empty list\n    if name != nil\n      self.names.push(name)\n    end\n  end\nend\n</code></pre> <p>So MegaGreeter objects have a list of names. The names field is initialized to the empty list <code>[]</code>. The body of the MegaGreeter constructor adds the given name argument to the end of the list of names if it's not <code>nil</code>. Mega greeters don't have a single name and no name field, so here the name is just an ordinary parameter that we can use in the body of the constructor.</p> <p>Let's try it:</p> <pre><code>&gt; greeter = MegaGreeter()\n&gt; greeter.names\n[]\n\n&gt; greeter = MegaGreeter(\"World\")\n&gt; greeter.names\n['World']\n</code></pre> <p>We can now go ahead and add greeter methods that add more names and show all the names:</p> <pre><code>class MegaGreeter\n  var names\n\n  def init(name)\n    self.names = []          # empty list\n    if name != nil\n      self.names.push(name)\n    end\n  end\n\n  def add(name)\n    self.names.push(name)\n  end\n\n  def say_hi()\n    import string\n    for n: self.names\n      print(string.format(\"Hello %s!\", n))\n    end\n  end\n\n  def say_bye()\n    import string\n    for n: self.names\n      print(string.format(\"Bye %s, come back soon.\", n))\n    end\n  end\nend\n</code></pre> <p>We introduced here a new construct known as an iterator. <code>for n: self.names</code> creates a new local variable <code>n</code> and iterate the following code for each value in <code>self.names</code>.</p> <p>Let's try the full example now:</p> <pre><code>&gt; greeter = MegaGreeter()\n&gt; greeter.add(\"Skiars\")\n&gt; greeter.add(\"Theo\")\n&gt; greeter.add(\"Stephan\")\n\n&gt; greeter.say_hi()\nHello Skiars!\nHello Theo!\nHello Stephan!\n\n&gt; greeter.say_bye()\nBye Skiars, come back soon.\nBye Theo, come back soon.\nBye Stephan, come back soon.\n</code></pre>"},{"location":"Berry-Introduction/#comments","title":"Comments","text":"<p>Sometimes, it is nice just to add comments that explain interesting things related to your code. In the example in the last section, there were a few single line comments:</p> <pre><code>  self.names = []          # empty list\n</code></pre> <p>Such comments start with <code>#</code> and tell the system to ignore the rest of the line.</p> <p>You can also use multi-line comments starting with <code>#-</code> and ending with <code>-#</code>.</p> <pre><code>#-\n This is a comment\n-#\n\n#-\n# This is also a comment block (`#` are ignored)\n-#\n\n#-----------------------------------------\n Alternative way to make comment blocks\n -----------------------------------------#\n</code></pre> <p>Indentation has no impact on Berry compiler, it's only by convention to make source code more readable.</p>"},{"location":"Berry-Introduction/#maps","title":"Maps","text":"<p>Maps are a very common and powerful feature to store key/value pairs. They are declared using <code>{}</code>.</p> <pre><code>&gt; m1 = {}           # empty map\n&gt; m\n{}\n\n&gt; m2 = {\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\n&gt; m2\n{'k2': 'v2', 'k1': 'v1', 'k3': 'v3'}\n</code></pre> <p>Actually keys and values can be of arbitrary type.</p> <pre><code>&gt; m3 = { 1.5: 3, 2:\"two\", true:1, false:nil }\n&gt; m3\n{1.5: 3, true: 1, 2: 'two', false: nil}\n</code></pre> <p>The main restriction is that a key can't be <code>nil</code>. Setting adding a key of value <code>nil</code> is silently ignored.</p> <pre><code>&gt; m4 = { nil:\"foo\" }\n&gt; m4\n{}\n</code></pre> <p>Accessing a value in the map uses <code>[&lt;key&gt;]</code>:</p> <pre><code>&gt; m1 = {}\n&gt; m1['k1'] = \"value1\"\n&gt; m1\n{'k1': 'value1'}\n\n# working with numerical values\n&gt; m1['k2'] = 0\n&gt; m1['k2'] += 5      # shortcut for `m1['k2'] = m1['k2'] + 5`\n&gt; m1\n{'k': 'value', 'k2': 5}\n</code></pre> <p>Accessing a non-existent key raises an error. There is an alternative function <code>find()</code> to access a key and return a default value if the key is absent. <code>contains()</code> can also be used to check the presence of the key.</p> <pre><code>&gt; m1 = {\"foo\":\"bar\"}\n&gt; m1.contains(\"foo\")\ntrue\n&gt; m1.contains(\"bar\")      # only checks for keys, not values\nfalse\n\n&gt; m1[\"foo\"]\nbar\n&gt; m1[\"bar\"]\nkey_error: bar\nstack traceback:\n   &lt;native&gt;: in native function\n   stdin:1: in function `main`\n\n# alternative with find\n&gt; m1.find(\"foo\", \"not_found\")\nbar\n&gt; m1.find(\"bar\", \"not_found\")\nnot_found\n&gt; m1.find(\"bar\")          # returns nil by default if not found\n</code></pre> <p>Note: <code>m[k] = v</code> is syntactic sugar for <code>m.setitem(k, v)</code>. When reading a value, <code>m[k]</code> is equivalent to <code>m.item(k)</code>.</p>"},{"location":"Berry-Introduction/#if-statements-and-basic-expressions","title":"If statements and basic expressions","text":"<p>We can program a ridiculously inefficient Fibonacci sequence generator using if and recursion:</p> <pre><code>def fib(n)\n  if n &lt;= 1 return n end\n  return fib(n-1) + fib(n-2)\nend\n</code></pre> <p>This defines a top-level function called <code>fib</code> that is not a member of any class. The <code>fib</code> function is recursive, calling itself, and also makes use of a few new features. The if-statement is well known from other languages. In Berry it works by taking an expression and conditionally evaluating a block.</p> <p>Berry also has the usual array of infix operators, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> etc. and the relational operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code> and <code>!=</code>.</p> <pre><code>&gt; fib(10)\n55\n</code></pre>"},{"location":"Berry-Introduction/#cycling-and-looping","title":"Cycling and Looping","text":"<p>As we've seen in <code>MegaGreeter</code> it is very simple to iterate over a list <code>for n: self.names [...] end</code>.</p> <p>Iterators can also be used over ranges like <code>for i:0..4</code> which will iterate over all values between <code>0</code> and <code>4</code> inclusive (5 iterations in total).</p> <pre><code>&gt; for i:0..4 print(i) end\n0\n1\n2\n3\n4\n</code></pre> <p>Iterating over maps goes in two flavors: iterating over values, or over keys.</p> <pre><code>&gt; m = {\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\n&gt; print(m)     # keep in mind that there is no order in a map\n{'k2': 'v2', 'k1': 'v1', 'k3': 'v3'}\n\n# iterate over values\n&gt; for v: m          print(v) end\nv2\nv1\nv3\n\n# iterate over keys\n&gt; for k: m.keys()   print(k) end\nk2\nk1\nk3\n\n# iterate over both keys and values\n&gt; for k: m.keys()   print(k, m[k]) end\nk2 v2\nk1 v1\nk3 v3\n</code></pre> <p>For <code>C</code> programmers, the equivalent of <code>for (int i=0; i&lt;a; i++) { [...] }</code> is <code>for i: 0..a-1 [...] end</code></p>"},{"location":"Berry-Introduction/#functions-and-arguments","title":"Functions and arguments","text":"<p>In Berry, functions are first class entities (Berry supports functional programming as well as object oriented). Berry is not a strongly types language, which means that you don't define any type as input or output when you define a function. This may seem as a problem, but it's a very powerful feature instead.</p> <p>Berry relies on what is known as \"Duck Typing\", as in \u201cIf it walks like a duck and it quacks like a duck, then it must be a duck\u201d. As long as the type you provide supports the right methods and calls, then it's fine.</p> <p>A function only defines the number of arguments it receives:</p> <pre><code>&gt; def f(a, b) return str(a) + str(b) end        # takes only 2 arguments\n</code></pre> <p><code>f</code> expects 2 arguments, if you provide less than 2, the non-defined are set to <code>nil</code>. If you provide more than 2, the extra-arguments are silently ignored.</p> <pre><code>&gt; def f(a, b) return str(a) + str(b) end        # takes only 2 arguments\n&gt; f(\"foo\", \"bar\")\nfoobar\n&gt; f(\"foo\")\nfoonil\n&gt; f(\"foo\", \"bar\", \"baz\")\nfoobar\n</code></pre> <p>A function may or may not return a value with <code>return &lt;expression&gt;</code>. If you call just <code>return</code> or the function ends without any return statement, the function returns <code>nil</code>.</p>"},{"location":"Berry-Introduction/#closures","title":"Closures","text":"<p>Let's finish this introduction with a very powerful feature known as closures. It is sometimes seen as intimidating or complex, but it's actually very simple. We will visit only the most common use of closures, if you want to get more details see the Berry documentation.</p> <p>Let's go back to our simple Byer example (class that says Bye).</p> <pre><code>class Byer\n  var name\n  def init(name)\n    self.name = name\n  end\n  def say_bye()\n    import string\n    print(string.format(\"Bye %s, see you soon.\", self.name))\n  end\nend\n</code></pre> <p>Let's define an instance of this class:</p> <pre><code>&gt; bye_bob = Byer(\"Bob\")\n&gt; bye_pat = Byer(\"Pat\")\n&gt; bye_bob.say_bye()\nBye Bob, see you soon.\n</code></pre> <p>Nothing new until now. Closure are useful as soon as you need callbacks. Let's say that you are using a framework that accepts a callback (a function you provide that will be fired in the future). We want to pass a function that says Bye to Bob.</p> <p>The naive approach would be to use <code>bye_bob.say_bye</code> method, which is a valid function. However this function has no context and can't know which instance you are referring to.</p> <pre><code>&gt; bye_bob.say_bye\n&lt;function: 0x3ffb3200&gt;\n&gt; bye_pat.say_bye\n&lt;function: 0x3ffb3200&gt;    # same function as above\n</code></pre> <p>As shown above, since the context is missing, you can't distinguish from the method <code>bye_bob.say_bye</code> and <code>bye_pat.say_bye</code>. They are the same function.</p> <p>Closure allows to create a new synthetic function that encapsulates transparently the context.</p> <pre><code>&gt; cb = def () bye_bob.say_bye() end\n&gt; cb\n&lt;function: 0x3ffd9df4&gt;\n\n# let's check that a closure on bye_pat is different\n&gt; cb_pat = def () bye_pat.say_bye() end\n&gt; cb_pat\n&lt;function: 0x3ffdaaa0&gt;\n</code></pre> <p><code>cb</code> is a closure, if creates a function that captures the instance <code>bye_bob</code> and then calls <code>say_bye()</code> on it. Let's call the closures to check they are working.</p> <pre><code>&gt; cb()\nBye Bob, see you soon.\n</code></pre> <p>Tasmota this is widely used in Tasmota for example for deferred functions. For example if you want to run <code>bye_bob.say_bye()</code> in 5 seconds in the future:</p> <pre><code>&gt; tasmota.set_timer(5000, cb)     # cb() is called in 5000 milliseconds\n</code></pre> <p>Advanced users: there is a compact syntax for simple callbacks: <code>def cb(a,b) return &lt;expr&gt; end</code> becomes<code>/ a,b -&gt; &lt;expr&gt;</code></p>"},{"location":"Berry-Introduction/#consider-yourself-introduced","title":"Consider Yourself Introduced","text":"<p>So that's a quick tour of Berry. Please have a look at the online Berry documentation.</p> <p>For Tasmota users, also have a look at the Tasmota Berry documentation and Tasmota Berry Cookbook.</p>"},{"location":"Berry-Introduction/#extra","title":"Extra","text":"<p>Here is a short comparison of Berry and Python syntax, courtesy of @Beormund</p> Berry vs Python Berry MicroPython Current object <code>self</code> <code>self</code> Single line comments <code>#</code> <code>#</code> Multi line comments <code>#- ... -#</code> Logical 'and', 'or' and not operators <code>&amp;&amp; || !</code> <code>and or not</code> Shift left, right <code>&lt;&lt; &gt;&gt;</code> <code>&lt;&lt; &gt;&gt;</code> Integer division <code>/</code> <code>//</code> Statement blocks/grouping (scope) (indent) Class definition &amp; inheritance <code>class a:b</code> <code>class a(b):</code> Class constructor <code>def init(x) ... end</code> <code>def __init__(self, x):</code> Class and superclass constructors <code>def init(x)</code><code>super(self).init(x)</code><code>end</code> <code>def __init__(self, x): super(b, self).__init__(x)</code> Class constructor that assigns to fields <code>def init(x)</code><code>self.x = x</code><code>end</code> <code>def __init__(self, x): self.x = x</code> Check object's type <code>isinstance(b, a)</code> <code>isinstance(b, a)</code> Call method foo with 2 arguments <code>foo(x, y)</code> <code>foo(x,y)</code> Declare a member variable in a class <code>self.x = nil</code> <code>self.x = None</code> Declare a local variable in a method <code>var x = 2, y = nil</code> <code>x = 2</code><code>y = None</code> Define a constant in a class <code>static x = 2</code> Define a top level function <code>def foo(x,y) end</code> <code>def foo(x,y):</code> Define an instance method in a class <code>def foo(x,y) end</code> <code>def foo(self, x, y):</code> Define a static method in a class <code>static def foo(x,y) end</code> If statement <code>if condition end</code> <code>if condition:</code> Fixed loop <code>for i: range end</code> <code>for i in range(end):</code> Iterate over collection <code>for k: coll.keys() end</code> <code>for x in coll:</code> While loop <code>while condition end</code> <code>while condition:</code> Import from library <code>import library</code> <code>import library</code> Print <code>print('hello world')</code> <code>print('Hello world')</code> Interpolation <code>string.format(\"Hello %s\", name)</code> <code>print(\"Hello %s\" %(name))</code> Simple types <code>int</code><code>real</code><code>bool (true\\|false)</code><code>string</code><code>nil</code> <code>int</code><code>float</code><code>bool (True\\|False)</code><code>string</code><code>None</code> Class types <code>list</code><code>map</code><code>range</code> <code>list</code><code>dict</code><code>tuple</code><code>set</code>"},{"location":"Berry-crypto/","title":"Berry crypto","text":""},{"location":"Berry-crypto/#crypto-module","title":"<code>crypto</code> module","text":"<p>Module <code>import crypto</code> support for common cryptographic algorithms.  </p> <p>Cryptographic operations are heavy tasks for an embedded platform and especially do enlarge the size of the firmware binaries. That's why not every supported cryptographic function is part of Tasmota's standard builds. Keep in mind, that some of the newer cryptographic methods are not finalized standardized RFCs of the IETF. Tasmota's crypto functionality is based on BearSSL, which has no support for hardware acceleration but a small memory footprint and allows usage on the ESP8266 in a reasonable way in some areas (of course not in Berry). Very few Berry crypto functions use reference C implementations.  </p> <p>It is hard to keep the naming schemes 100% consistent and you will find different names for the same things every now and then in our code and documentation. In 99.9% of the occurrences: <code>iv</code> aka initialization vector == <code>nonce</code> aka number used once <code>mac</code> aka message authentication code == tag  (== <code>MIC</code> aka message integrity code) <code>private_key</code> == <code>secret_key</code> </p> <p>On the other hand, similar names may have vastly different meanings or at least different underlying implementations: Elliptic Curve <code>C25519</code> != <code>EdDSA25519</code> <code>ssh-chacha20-poly1305@openssh</code> != <code>chacha20-poly1305-aead</code></p> <p>Currently supported algorithms:</p> <ul> <li>AES CTR 256 bits - requires <code>#define USE_BERRY_CRYPTO_AES_CTR</code></li> <li>AES GCM 256 bits</li> <li>AES CCM 128 or 256 bits</li> <li>AES CBC 128 bits</li> <li>Chacha20-Poly1305 - requires <code>#define USE_BERRY_CRYPTO_CHACHA_POLY</code></li> <li>Elliptic Curve C25519 - requires <code>#define USE_BERRY_CRYPTO_EC_C25519</code></li> <li>Elliptic Curve P256 (secp256r1) - requires <code>#define USE_BERRY_CRYPTO_EC_P256</code></li> <li>EdDSA25519 - requires <code>#define USE_BERRY_CRYPTO_ED25519</code></li> <li>HKDF key derivation with HMAC SHA256 - requires <code>#define USE_BERRY_CRYPTO_HKDF_SHA256</code></li> <li>HMAC SHA256</li> <li>MD5</li> <li>PKKDF2 with HMAC SHA256 key derivation - requires <code>#define USE_BERRY_CRYPTO_PBKDF2_HMAC_SHA256</code></li> <li>SHA256</li> <li>JWT RS256 (RSASSA-PKCS1-v1_5 with SHA256) - requires <code>#define USE_BERRY_CRYPTO_RSA</code></li> </ul>"},{"location":"Berry-crypto/#cryptoaes_ctr-class","title":"<code>crypto.AES_CTR</code> class","text":"<p>Encrypt and decrypt, using AES CTR (Counter mode) with 256 bits keys.</p> General Function Parameters and details init <code>AES_CTR.init(secret_key:bytes(32)) -&gt; instance</code>Initialise AES CTR instance with <code>secret_key</code> (256 bits) and <code>iv</code> (initialization vector or nonce, 96 bits) encrypt <code>encrypt(ciphertext:bytes, iv:bytes(12), cc:int) -&gt; bytes</code>Encrypt the ciphertext. The <code>iv</code> (Initialization Vector) must be 12 bytes, it can be the concatenation of 4 bytes Nonce and 8 bytes iv. <code>cc</code> is the counter (4 bytes) incremented for each block of 16 bytes.Note: the last counter value is not returned, so it is advised to encrypt all data at once. decrypt <code>decrypt(ciphertext:bytes, iv:bytes(12), cc:int) -&gt; bytes</code>Identical to <code>encrypt</code> above. <p>Test vectors from https://datatracker.ietf.org/doc/html/rfc4231</p> <pre><code># Test case from https://www.ietf.org/rfc/rfc3686.txt\nimport crypto\nkey = bytes(\"F6D66D6BD52D59BB0796365879EFF886C66DD51A5B6A99744B50590C87A23884\")\niv = bytes(\"00FAAC24C1585EF15A43D875\")\ncc = 0x000001\naes = crypto.AES_CTR(key)\nplain = bytes(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\")\ncipher = aes.encrypt(plain, iv, cc)\nassert(cipher == bytes(\"F05E231B3894612C49EE000B804EB2A9B8306B508F839D6A5530831D9344AF1C\"))\nplain2 = aes.decrypt(cipher, iv, cc)\nassert(plain == plain2)\n</code></pre>"},{"location":"Berry-crypto/#cryptoaes_gcm-class","title":"<code>crypto.AES_GCM</code> class","text":"<p>Encrypt, decrypt and verify, using AES GCM (Galois Counter Mode) with 256 bits keys.</p> General Function Parameters and details init <code>AES_GCM.init(secret_key:bytes(32), iv:bytes(12)) -&gt; instance</code>Initialise AES GCM instance with <code>secret_key</code> (256 bits) and <code>iv</code> (initialization vector or nonce, 96 bits) encrypt <code>encrypt(ciphertext:bytes) -&gt; bytes</code>Encrypt the ciphertext. Can be called multiple times, the tag is updated accordingly decrypt <code>decrypt(ciphertext:bytes) -&gt; bytes</code>Decrypt the ciphertext. Can be called multiple times, the tag is updated accordingly tag <code>tag() -&gt; bytes</code>Compute the verification tag for the object encrypted or decrypted (128 bits). <p>Example taken from https://wizardforcel.gitbooks.io/practical-cryptography-for-developers-book/content/symmetric-key-ciphers/aes-encrypt-decrypt-examples.html</p> <pre><code>import crypto\n\nkey = bytes('233f8ce4ac6aa125927ccd98af5750d08c9c61d98a3f5d43cbf096b4caaebe80')\nciphertext = bytes('1334cd5d487f7f47924187c94424a2079656838e063e5521e7779e441aa513de268550a89917fbfb0492fc')\niv = bytes('2f3849399c60cb04b923bd33265b81c7')\nauthTag = bytes('af453a410d142bc6f926c0f3bc776390')\n\n# decrypt ciphertext with key and iv\naes = crypto.AES_GCM(key, iv)\nplaintext = aes.decrypt(ciphertext)\nprint(plaintext.asstring())\n# 'Message for AES-256-GCM + Scrypt encryption'\n\ntag = aes.tag()\nprint(tag == authTag)\n# true\n</code></pre>"},{"location":"Berry-crypto/#cryptoaes_ccm-class","title":"<code>crypto.AES_CCM</code> class","text":"<p>Encrypt and decrypt, using AES CCM with 256 bits keys.</p> General Function Parameters and details init <code>AES_CCM.init(secret_key:bytes(16 or 32), iv:bytes(7..13), aad:bytes(), data_len:int, tag_len:int) -&gt; instance</code>Initialise AES CCM instance with <code>secret_key</code> (128 or 256 bits), <code>iv</code> (initialization vector or nonce, 56 to 104 bits), <code>aad</code> is the associated data, <code>data_len</code> is the size of the payload that you need to announce in advance, <code>tag_len</code> is the lenght in bytes of the tag (normally 16). encrypt <code>encrypt(ciphertext:bytes) -&gt; bytes</code>Encrypt the ciphertext. decrypt <code>decrypt(ciphertext:bytes) -&gt; bytes</code>Identical to <code>encrypt</code> above. tag <code>tag() -&gt; bytes</code>Returns the tag or MIC. decrypt1 <code>AES_CCM.decrypt1(secret_key:bytes(16 or 32), iv:bytes(), iv_start:int, iv_len:int (7..13), aad:bytes(), aad_start:int, aad_len:int, data:bytes(), data_start:int, data_len:int, tag:bytes(), tag_start:int, tag_len:int (4..16)) -&gt; bool (true if tag matches)</code>Decrypt in a single call, avoiding any object allocation encrypt1 <code>AES_CCM.encrypt1(secret_key:bytes(16 or 32), iv:bytes(), iv_start:int, iv_len:int (7..13), aad:bytes(), aad_start:int, aad_len:int, data:bytes(), data_start:int, data_len:int, tag:bytes(), tag_start:int, tag_len:int (4..16)) -&gt; bool (always true)</code>Decrypt in a single call, avoiding any object allocation. Data is encrypted in-place and Tag is changed in the buffer. <p>Example from Matter:</p> <pre><code># raw_in is the received frame\nraw_in = bytes(\"00A0DE009A5E3D0F3E85246C0EB1AA630A99042B82EC903483E26A4148C8AC909B12EF8CDB6B144493ABD6278EDBA8859C9B2C\")\n\npayload_idx = 8     # unencrypted header is 8 bytes\ntag_len = 16        # MIC is 16 bytes\n\np = raw[payload_idx .. -tag_len - 1]   # payload\nmic = raw[-tag_len .. ]                # MIC\na = raw[0 .. payload_idx - 1]          # AAD\n\ni2r = bytes(\"92027B9F0DBC82491D4C3B3AFA5F2DEB\")   # key\n# p   = bytes(\"3E85246C0EB1AA630A99042B82EC903483E26A4148C8AC909B12EF\")\n# a     = bytes(\"00A0DE009A5E3D0F\")\nn   = bytes(\"009A5E3D0F0000000000000000\")         # nonce / IV\n# mic = bytes(\"8CDB6B144493ABD6278EDBA8859C9B2C\")\n\n# expected cleartext\nclr = bytes(\"05024FF601001536001724020024031D2404031818290324FF0118\")\n\n# method 1 - with distinct calls\nimport crypto\naes = crypto.AES_CCM(i2r, n, a, size(p), 16)\ncleartext = aes.decrypt(p)\ntag = aes.tag()\n\nassert(cleartext == clr)\nassert(tag == mic)\n\n# method 2 - single call\nraw = raw_in.copy()      # copy first if we want to keep the encrypted version\nvar ret = crypto.AES_CCM.decrypt1(i2r, n, 0, size(n), raw, 0, payload_idx, raw, payload_idx, size(raw) - payload_idx - tag_len, raw, size(raw) - tag_len, tag_len)\n\nassert(ret)\nassert(raw[payload_idx .. -tag_len - 1] == clr)\n</code></pre>"},{"location":"Berry-crypto/#cryptoaes_cbc-class","title":"<code>crypto.AES_CBC</code> class","text":"<p>Encrypt and decrypt, using AES CBC with 128 bits keys.</p> General Function Parameters and details decrypt1 <code>AES_CBC.decrypt1(secret_key:bytes(16), iv:bytes(16), data:bytes(n*16)) -&gt; bool (always true)</code>Decrypt in a single call in-place, avoiding any object allocation encrypt1 <code>AES_CBC.encrypt1(secret_key:bytes(16), iv:bytes(16), data:bytes(n*16)) -&gt; bool (always true)</code>Decrypt in a single call, avoiding any object allocation. Data is encrypted in-place and IV is changed in the buffer too. <p>Example:</p> <pre><code>var b = bytes().fromstring(\"hello world_____\") # 16-byte aligned\nvar key = bytes().fromstring(\"1122334455667788\") # 16 bytes\nvar iv = bytes().fromstring(\"8877665544332211\") # 16 bytes\n\nprint(\"data:\",b.asstring()) # \"hello world_____\"\nimport crypto\naes = crypto.AES_CBC()\naes.encrypt1(key, iv, b)\nprint(\"cipher:\",b)\niv = bytes().fromstring(\"8877665544332211\")\naes.decrypt1(key, iv, b)\nprint(\"decrypted data:\",b.asstring()) # \"hello world_____\"\n</code></pre>"},{"location":"Berry-crypto/#cryptochach20_poly1305-class","title":"<code>crypto.CHACH20_POLY1305</code> class","text":"<p>Encrypt and decrypt using stream cipher ChaCha20 and compute MAC (= message authentication code aka integrity tag) using Poly1305. The reason to split this module into relatively low level functions is to have support for ssh-chacha20-poly1305@openssh. Thus the implementation for Chacha20-Poly1305-AEAD has to be completed in Berry.  </p> General Function Parameters and details chacha_run <code>CHACH20_POLY1305.chacha_run(secret_key:bytes(32),iv:bytes(12),cipher:bytes(n*16),)-&gt; int counter</code>En/Decrypt in a single call in-place, returns counter poly_run <code>CHACH20_POLY1305.poly_run(data:bytes(),poly_key:bytes(32),)-&gt; tag:bytes(16)</code>Computes tag on (encrypted) data. <p>Example: <pre><code># helper function to support Chacha20-POLY1305-AEAD\ndef pad16(data)\n    # pad to 16 bytes\n    if (size(data) % 16) == 0\n        return data\n    else\n        return data + bytes(-(16 - (size(data) % 16)))\n    end\nend\n\n# https://boringssl.googlesource.com/boringssl/+/2e2a226ac9201ac411a84b5e79ac3a7333d8e1c9/crypto/cipher_extra/test/chacha20_poly1305_tests.txt\nimport crypto\nc = crypto.CHACHA20_POLY1305()\nkey = bytes(\"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\")\niv =bytes(\"070000004041424344454647\")\naad= bytes(\"50515253c0c1c2c3c4c5c6c7\")\n_msg = \"Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.\"\nmsg = bytes().fromstring(_msg) # make bytes\nct = bytes(\"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d63dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b3692ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc3ff4def08e4b7a9de576d26586cec64b6116\") # reference crypto ciphertext for comparison\ntag = bytes(\"1ae10b594f09e26a7e902ecbd0600691\")\n#create polykey\npoly_key = bytes(-32)\nc.chacha_run(key,iv,0,poly_key) # create with zero'ed bytes object and counter value of 0\nsizes = bytes(-16)\nsizes.seti(0,size(aad),4) # in reality this is uint64 and not only uint32\nsizes.seti(8,size(ct),4) # same here\n_tag = c.poly_run(pad16(aad)+pad16(ct)+sizes,poly_key) # for AEAD standard data must be padded to 16 and sizes bytes are added\n# encrypt\nc.chacha_run(key,iv,1,msg) # now run with counter value of 1\nassert(_tag == tag)\nassert(ct == msg)\n\n# now decrypt - reuse aad and sizes\n _newtag = c.poly_run(pad16(aad)+pad16(msg)+sizes,poly_key) # first run poly on still encrypted data\nc.chacha_run(key,iv,1,msg) # then decrypt\nassert(_newtag==_tag)\nassert(msg.asstring()==_msg)\n\n# https://datatracker.ietf.org/doc/draft-ietf-sshm-chacha20-poly1305/01/\n# special needs for SSH:\n# chacha run over length and data with different keys\n# poly run over whole encrypted material with key used for data\n\nimport crypto\nc = crypto.CHACHA20_POLY1305()\nkeys = bytes(\"8bbff6855fc102338c373e73aac0c914f076a905b2444a32eecaffeae22becc5e9b7a7a5825a8249346ec1c28301cf394543fc7569887d76e168f37562ac0740\")\npacket = bytes(\"2c3ecce4a5bc05895bf07a7ba956b6c68829ac7c83b780b7000ecde745afc705bbc378ce03a280236b87b53bed5839662302b164b6286a48cd1e097138e3cb909b8b2b829dd18d2a35ff82d995349e855bf02c298ef775f2d1a7e8b8\")\niv = bytes(\"000000000000000000000007\") # seq number\nk_header = keys[-32..]\nk_main = keys[0..31]\n\npoly_key = bytes(-32)\nc.chacha_run(k_main,iv,0,poly_key)\ngiven_mac = packet[-16..]\ncalculated_mac = c.poly_run(packet[0..-17],poly_key)\nassert(calculated_mac == given_mac)\n\ndata = packet[4..-17]\nlength = packet[0..3]\nc.chacha_run(k_header,iv,0,length) # use upper 32 bytes of key material\nassert(length == bytes(\"00000048\"))\ncounter = c.chacha_run(k_main, iv, 1, data) # lower bytes of key for packet\n# assert(valid == true)\nassert(length + data == bytes(\"00000048065e00000000000000384c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e7365637465747572206164697069736963696e6720656c69744e43e804dc6c\"))\n\n# reverse it - now encrypt a packet\n\nraw_packet = bytes(\"00000048065e00000000000000384c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e7365637465747572206164697069736963696e6720656c69744e43e804dc6c\")\nlength = raw_packet[0..3]\nc.chacha_run(k_header,iv,0,length) # use upper 32 bytes of key material\n\ndata = raw_packet[4..]\ncounter = c.chacha_run(k_main, iv, 1, data) # lower bytes of key for packet\nenc_packet = length + data\n\npoly_key = bytes(-32)\nc.chacha_run(k_main,iv,0,poly_key)\nmac = c.poly_run(enc_packet,poly_key)\nenc_packet .. mac\nassert(enc_packet == packet)\n</code></pre></p>"},{"location":"Berry-crypto/#cryptoec_c25519-class","title":"<code>crypto.EC_C25519</code> class","text":"<p>Provides Elliptic Curve C25519 Diffie-Hellman key agreement. Requires <code>#define USE_BERRY_CRYPTO_EC_C25519</code></p> General Function Parameters and details public_key <code>crypto.EC_C25519().public_key(secret_key:bytes(32)) -&gt; bytes(32)</code>Computes the public key given a random private key. shared_key <code>crypto.EC_C25519().shared_key(our_private_key:bytes(32), their_public_key:bytes(32)) -&gt; bytes(32)</code>Compute a shared key (Diffie-Hellman) using our private key and the other party's public key. The other party will compute the same shared key using their private key and our pubic key. <p>Example from test vectors https://www.rfc-editor.org/rfc/rfc7748:</p> <pre><code>import crypto\n\n# alice side\nalice_priv_key = bytes(\"77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a\")\nalice_pub_key = bytes(\"8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a\")\nassert(crypto.EC_C25519().public_key(alice_priv_key) == alice_pub_key)\n\n# bob side\nbob_priv_key = bytes(\"5dab087e624a8a4b79e17f8b83800ee66f3bb1292618b6fd1c2f8b27ff88e0eb\")\nbob_pub_key = bytes(\"de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f\")\nassert(crypto.EC_C25519().public_key(bob_priv_key) == bob_pub_key)\n\n# shared key computed by alice\nref_shared_key = bytes(\"4a5d9d5ba4ce2de1728e3bf480350f25e07e21c947d19e3376f09b3c1e161742\")\nalice_shared_key = crypto.EC_C25519().shared_key(alice_priv_key, bob_pub_key)\nbob_shared_key = crypto.EC_C25519().shared_key(bob_priv_key, alice_pub_key)\nassert(alice_shared_key == ref_shared_key)\nassert(bob_shared_key == ref_shared_key)\n</code></pre>"},{"location":"Berry-crypto/#cryptoec_p256-class","title":"<code>crypto.EC_P256</code> class","text":"<p>Provides Elliptic Curve Prime256 (secp256r1) Diffie-Hellman key agreement and various functions on P256 curve. Requires <code>#define USE_BERRY_CRYPTO_EC_P256</code></p> General Function Parameters and details public_key <code>crypto.EC_P256().public_key(secret_key:bytes(32)) -&gt; bytes(65)</code>Computes the public key given a random private key. The result is uncompressed point coordinates starting with 0x04 (65 bytes in total) shared_key <code>crypto.EC_P256().shared_key(our_private_key:bytes(32), their_public_key:bytes(65)) -&gt; bytes(32)</code>Compute a shared key (Diffie-Hellman) using our private key and the other party's public key. The other party will compute the same shared key using their private key and our pubic key.The result is actually the X coordinate of the multiplication of the points coordinates of the public key, and a large number (private key) Specific Functions Parameters and details mod <code>crypto.EC_P256().mod(data:bytes()) -&gt; bytes(32)</code>Computes the modulus of an arbitrary large number. The modulus is done towards the order of the curve. neg <code>crypto.EC_P256().neg(data:bytes(32)) -&gt; bytes(32)</code><code>-x mod p</code> or <code>p - x</code> if <code>x</code> is lower than <code>p</code>Computes the opposite (negate) of a number modulus the order of the curve (it's actuall modulus - data). mul <code>crypto.EC_P256().mul(x:bytes(), A:bytes(65)) -&gt; bytes(65)</code><code>x * A</code>Computes multiplication of a number and a point on the curve.<code>x</code> needs to be smaller than <code>p</code>, use <code>mod()</code> if not sureThe function checks that the point <code>A</code> is on the curve, or raises an error muladd <code>crypto.EC_P256().muladd(x:bytes(), A:bytes(65), y:bytes(), B:bytes(65)) -&gt; bytes(65)</code><code>x * A + y * B</code><code>x</code> and <code>y</code> need to be smaller than <code>p</code>, use <code>mod()</code> if not sureThe function checks that the points <code>A</code> and <code>B</code> are on the curve, or raises an errorIf <code>B</code> is empty <code>bytes()</code>, the Generator <code>P</code> of the curve is used instead. <p>Example:</p> <pre><code>import crypto\npriv = bytes(\"f502fb911d746b77f4438c674e1c43650b68285dfcc0583c49cd6ed88f0fbb58\")\np = crypto.EC_P256()\npub = p.public_key(priv)\nassert(pub == bytes(\"04F94C20D682DA29B7E99985D8DBA6ABEA9051D16508742899835098B1113D3D749466644C47B559DB184556C1733C33E5788AE250B8FB45F29D4CF48FF752C1ED\"))\n\nimport crypto\npriv = bytes(\"4E832960415F2B5FA2B1FDA75C1A8F3C84BAEB189EDC47211EF6D27A21FC0ED8\")\np = crypto.EC_P256()\npub = p.public_key(priv)\nassert(pub == bytes(\"042166AE4F89981472B7589B8D79B8F1244E2EEE6E0A737FFBFED2981DA3E193D6643317E054D2A924F2F56F1BF4BECA13192B27D8566AF379FBBF8615A223D899\"))\nprint(\"x=\",pub[1..32])\nprint(\"y=\",pub[33..65])\n\nimport crypto\np = crypto.EC_P256()\npriv_A = bytes(\"f502fb911d746b77f4438c674e1c43650b68285dfcc0583c49cd6ed88f0fbb58\")\npub_A = bytes(\"04F94C20D682DA29B7E99985D8DBA6ABEA9051D16508742899835098B1113D3D749466644C47B559DB184556C1733C33E5788AE250B8FB45F29D4CF48FF752C1ED\")\npriv_B = bytes(\"4E832960415F2B5FA2B1FDA75C1A8F3C84BAEB189EDC47211EF6D27A21FC0ED8\")\npub_B = bytes(\"042166AE4F89981472B7589B8D79B8F1244E2EEE6E0A737FFBFED2981DA3E193D6643317E054D2A924F2F56F1BF4BECA13192B27D8566AF379FBBF8615A223D899\")\n\nshared_1 = p.shared_key(priv_A, pub_B)\nshared_2 = p.shared_key(priv_B, pub_A)\nassert(shared_1 == shared_2)\n</code></pre>"},{"location":"Berry-crypto/#cryptoed25519-class","title":"<code>crypto.ED25519</code> class","text":"<p>Edwards-Curve Digital Signature Algorithm (EdDSA) using the edwards25519 curve, more info in RFC8032.</p> General Function Parameters and details secret_key <code>crypto.EC_C25519().secret_key(seed:bytes(32)) -&gt; secret_key:bytes(64)</code>Computes the secret key given a random private key. As the public key is equal to the last 32 bytes, there is no extra function to get the public key. Example: public_key = secret_key[-32..] sign <code>crypto.EC_C25519().sign(message:bytes(), secret_key:bytes(64)) -&gt; signature:bytes(64)</code>Returns the signature of a message, signed with the secret key. verify <code>crypto.EC_C25519().verify((message:bytes(), signature:bytes(64), public_key:bytes(32) -&gt; bool</code>Verifies the the given signature of a message with a public key, returns success as boolean. <pre><code>import crypto\ne = crypto.ED25519()\nseed = bytes(\"9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60\") # some randome bytes\nsecret_key=e.secret_key(seed)\nmessage = bytes()\npublic_key = secret_key[-32..]\n_public_key = bytes(\"d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a\") # test data\nassert(public_key == _public_key)\nsignature = e.sign(message, secret_key)\nassert(signature == bytes(\"e5564300c360ac729086e2cc806e828a84877f1eb8e5d974d873e065224901555fb8821590a33bacc61e39701cf9b46bd25bf5f0595bbe24655141438e7a100b\")) # test data\n# now verify\nassert(e.verify(message, signature, public_key)==true)\n</code></pre>"},{"location":"Berry-crypto/#cryptohkdf_sha256-class","title":"<code>crypto.HKDF_SHA256</code> class","text":"<p>Provides HKDF using HMAC SHA256 key derivation. Turns 'ikm' (input keying material) of low entropy and creates a pseudo random key. Requires <code>#define USE_BERRY_CRYPTO_HKDF_SHA256</code></p> General Function Parameters and details derive <code>crypto.HKDF_SHA256().derive(ikm:bytes(), salt:bytes(), info:bytes(), out_bytes:int) -&gt; bytes(out_bytes)</code>Computes a key derivation function<code>ikm</code> is the input keying material, typically a password<code>salt</code> can be empty<code>info</code> can be empty and is used to create multiple derived keys<code>out_bytes</code> indicates the number of bytes to generate (between 1 and 256) <p>Test vectors from https://www.rfc-editor.org/rfc/rfc5869</p> <pre><code>import crypto\n\n# Test Case 1\nhk = crypto.HKDF_SHA256()\nikm = bytes(\"0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B\")\nsalt = bytes(\"000102030405060708090A0B0C\")\ninfo = bytes(\"F0F1F2F3F4F5F6F7F8F9\")\nk = hk.derive(ikm, salt, info, 42)\nassert(k == bytes(\"3CB25F25FAACD57A90434F64D0362F2A2D2D0A90CF1A5A4C5DB02D56ECC4C5BF34007208D5B887185865\"))\n\n# Test Case 2\nhk = crypto.HKDF_SHA256()\nikm  = bytes(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f\")\nsalt = bytes(\"606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf\")\ninfo = bytes(\"b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\nk = hk.derive(ikm, salt, info, 82)\nassert(k == bytes(\"b11e398dc80327a1c8e7f78c596a49344f012eda2d4efad8a050cc4c19afa97c59045a99cac7827271cb41c65e590e09da3275600c2f09b8367793a9aca3db71cc30c58179ec3e87c14c01d5c1f3434f1d87\"))\n\n# Test Case 3\nhk = crypto.HKDF_SHA256()\nikm  = bytes(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\")\nsalt = bytes()\ninfo = bytes()\nk = hk.derive(ikm, salt, info, 42)\nassert(k == bytes(\"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d9d201395faa4b61a96c8\"))\n</code></pre>"},{"location":"Berry-crypto/#cryptopbkdf2_hmac_sha256-class","title":"<code>crypto.PBKDF2_HMAC_SHA256</code> class","text":"<p>Provides PBKDF2 using HMAC SHA256 key derivation. Turns a password into a hash.</p> General Function Parameters and details derive <code>crypto.PBKDF2_HMAC_SHA256().derive(password:bytes(), salt:bytes(), iterations:int, out_bytes:int) -&gt; bytes(out_bytes)</code>Computes a key derivation function<code>password</code> is the input keying material<code>salt</code> can be empty <code>bytes()</code><code>iterations</code> counts the number of iterations of HMAC, limited to 10000 to make computation short enough for ESP32<code>out_bytes</code> indicates the number of bytes to generate (between 1 and 256) <p>Test vectors from https://github.com/brycx/Test-Vector-Generation/blob/master/PBKDF2/pbkdf2-hmac-sha2-test-vectors.md</p> <pre><code>import crypto\npb = crypto.PBKDF2_HMAC_SHA256()\n\nassert(pb.derive(\"password\", \"salt\", 1, 20) == bytes('120fb6cffcf8b32c43e7225256c4f837a86548c9'))\n\nassert(pb.derive(\"password\", \"salt\", 2, 20) == bytes('ae4d0c95af6b46d32d0adff928f06dd02a303f8e'))\n\nassert(pb.derive(\"password\", \"salt\", 3, 20) == bytes('ad35240ac683febfaf3cd49d845473fbbbaa2437'))\n\nassert(pb.derive(\"password\", \"salt\", 4096, 20) == bytes('c5e478d59288c841aa530db6845c4c8d962893a0'))\n\nassert(pb.derive(\"passwd\", \"salt\", 1, 128) == bytes('55AC046E56E3089FEC1691C22544B605F94185216DDE0465E68B9D57C20DACBC49CA9CCCF179B645991664B39D77EF317C71B845B1E30BD509112041D3A19783C294E850150390E1160C34D62E9665D659AE49D314510FC98274CC79681968104B8F89237E69B2D549111868658BE62F59BD715CAC44A1147ED5317C9BAE6B2A'))\n</code></pre>"},{"location":"Berry-crypto/#cryptosha256-class","title":"<code>crypto.SHA256</code> class","text":"<p>Provides SHA256 hashing function</p> General Function Parameters and details init <code>HMAC_SHA256.init() -&gt; instance</code>Initialise SHA256 hashing function update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained. out <code>out() -&gt; bytes(32)</code>Output the value of the hash <p>Example test vectors from https://www.dlitz.net/crypto/shad256-test-vectors/</p> <pre><code>import crypto\nh = crypto.SHA256()\n\n# SHA256 of empty message\nassert(h.out() == bytes(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"))\n\n# (first 16 bytes of RC4 keystream where the key = 0)\nh.update(bytes(\"de188941a3375d3a8a061e67576e926d\"))\nassert(h.out() == bytes(\"067c531269735ca7f541fdaca8f0dc76305d3cada140f89372a410fe5eff6e4d\"))\n</code></pre>"},{"location":"Berry-crypto/#cryptohmac_sha256-class","title":"<code>crypto.HMAC_SHA256</code> class","text":"<p>Provides HMAC SHA256 hashing function</p> General Function Parameters and details init <code>HMAC_SHA256.init(key:bytes) -&gt; instance</code>Initialise HMAC_SHA256 hashing function with a provided key update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained out <code>out() -&gt; bytes(32)</code>Output the value of the hash <p>Test case from https://datatracker.ietf.org/doc/html/rfc4231:</p> <pre><code>import crypto\nkey = bytes(\"4a656665\")\nmsg = bytes(\"7768617420646f2079612077616e7420666f72206e6f7468696e673f\")\nh = crypto.HMAC_SHA256(key)\nh.update(msg)\nhmac = h.out()\nassert(hmac == bytes(\"5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843\"))\n</code></pre>"},{"location":"Berry-crypto/#cryptorsa-class","title":"<code>crypto.RSA</code> class","text":"<p>Provides RSA core features, currently only JWT RS256 signing (RSASSA-PKCS1-v1_5 with SHA256) - requires <code>#define USE_BERRY_CRYPTO_RSA</code></p> Function Parameters and details rs256 <code>crypto.RSA.rs256HMAC_SHA256.init(private_key:bytes(), payload:bytes()) -&gt; bytes()</code>Sign a payload with an RSA private key in DER binary format.<code>private_key</code>: (bytes) contains the binary DER (ASN.1) private key, see example below to convert from PEM.<code>payload</code> (bytes) JWT payload to sign, it should be derived from JSON encoded as base64urlOutputs a <code>bytes()</code> array of the payload, hashed with SHA256 and signed with the RSA private key. The output is 256 bytes longs for a 2048 RSA key. <p>Signing a full JWT token with RS256</p> <pre><code>import string\nimport crypto\n\n# JWT requires base64url and not raw base64\n# see https://base64.guru/standards/base64url\n# input: string or bytes\ndef base64url(v)\n  import string\n  if type(v) == 'string'   v = bytes().fromstring(v) end\n  var b64 = v.tob64()\n  # remove trailing padding\n  b64 = string.tr(b64, '=', '')\n  b64 = string.tr(b64, '+', '-')\n  b64 = string.tr(b64, '/', '_')\n  return b64\nend\n\n# JWT header and claim\nvar header = '{\"alg\":\"RS256\",\"typ\":\"JWT\"}'\nvar claim = '{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":1516239022}'\nvar b64header = base64url(header)\nvar b64claim = base64url(claim)\n\nassert(b64header == 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9')\nassert(b64claim == 'eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0')\n\n# `body` is the payload to sign with RS256\nvar body = b64header + '.' + b64claim\nassert(body == 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0')\n\nvar private_key =\n'-----BEGIN PRIVATE KEY-----\\n'+\n'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKj\\n'+\n'MzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\\n'+\n'NMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\\n'+\n'qgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulg\\n'+\n'p2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlR\\n'+\n'ZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwi\\n'+\n'VuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskV\\n'+\n'laAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8\\n'+\n'sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83H\\n'+\n'mQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwY\\n'+\n'dgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cw\\n'+\n'ta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQ\\n'+\n'DM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2T\\n'+\n'N0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t\\n'+\n'0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPv\\n'+\n't8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDU\\n'+\n'AhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk\\n'+\n'48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISL\\n'+\n'DY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnK\\n'+\n'xt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEA\\n'+\n'mNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh\\n'+\n'2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfz\\n'+\n'et6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhr\\n'+\n'VBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicD\\n'+\n'TQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cnc\\n'+\n'dn/RsYEONbwQSjIfMPkvxF+8HQ==\\n'+\n'-----END PRIVATE KEY-----\\n'\n\n# public_key for reference but not actually used here\nvar public_key =\n'-----BEGIN PUBLIC KEY-----\\n'+\n'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo\\n'+\n'4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u\\n'+\n'+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh\\n'+\n'kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ\\n'+\n'0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg\\n'+\n'cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc\\n'+\n'mwIDAQAB\\n'+\n'-----END PUBLIC KEY-----\\n'\n\n# read private_key as DER binary\nwhile (private_key[-1] == '\\n') private_key = private_key[0..-2] end\nvar private_key_DER = bytes().fromb64(string.split(private_key, '\\n')[1..-2].concat())\n\n# comparison with what was expected\nassert(private_key_DER.tob64() == 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKjMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvuNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZqgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulgp2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlRZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwiVuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskVlaAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83HmQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwYdgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cwta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQDM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2TN0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPvt8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDUAhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISLDY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnKxt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEAmNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfzet6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhrVBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicDTQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cncdn/RsYEONbwQSjIfMPkvxF+8HQ==')\n\n# sign body\nvar body_b64 = bytes().fromstring(body)\nvar sign = crypto.RSA.rs256(private_key_DER, body_b64)\nvar b64sign = base64url(sign)\n\n# check output\nassert(b64sign == 'NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ')\n\n# Final token:\nvar jwt_token = payload + '.' + b64sign\n</code></pre>"},{"location":"Berry-crypto/#cryptomd5-class","title":"<code>crypto.MD5</code> class","text":"<p>Provides MD5 hashing function.</p> General Function Parameters and details init <code>MD5.init() -&gt; instance</code>Initialise MD5 hashing function update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained. finish <code>finish() -&gt; bytes(16)</code>Finish the MD5 calculation and output the result (16 bytes) <p>Test vector:</p> <pre><code>import crypto\nh = crypto.MD5()\nt = bytes().fromstring(\"The quick brown fox jumps over the lazy dog\")\nh.update(t)\nm = h.finish()\nassert(m == bytes(\"9e107d9d372bb6826bd81d3542a419d6\"))\n</code></pre>"},{"location":"Berry/","title":"Berry Scripting Language","text":"<p>Berry Scripting is included in all <code>tasmota32</code> builds. It is NOT supported on ESP82xx</p> <p>If you plan to code in Berry, you should enable <code>#define USE_BERRY_DEBUG</code> which will give you much more details when coding</p> <p>If you want to use Generative AI to generate Berry code, it is highly suggested to use claude.ai and use the Markdown Language Reference. This files consumes ~6000 input tokens.</p> <p></p> <p>Useful resources:</p> <ul> <li>First time user of Berry: Berry Introduction (in 20 minutes of less)</li> <li>Language fast reference PDF (7 pages) Berry Short manual</li> <li>Full language documentation The Berry Script Language Reference Manual</li> <li>Tasmota extension of Berry, see below</li> <li>Full examples in the Berry Cookbook</li> </ul> <p>If you're new to Berry, have a look at Berry Introduction (in 20 minutes of less)</p>"},{"location":"Berry/#introduction-to-berry","title":"Introduction to Berry","text":"<p>Berry is the next generation scripting for Tasmota. It is based on the open-source Berry project, delivering an ultra-lightweight dynamically typed scripting language designed for lower-performance embedded devices.</p> <p>Github Manual</p> <p>Reference sheet</p> <p>Download Berry Short Manual to get a list of basic functions and capabilities of Berry language</p> <p>Berry Scripting allows simple and also advanced extensions of Tasmota, for example:</p> <ul> <li>simple scripting</li> <li>advanced rules, beyond what is possible with native rules</li> <li>advanced automations</li> </ul> <p>Berry Scripting takes it one step further and allows to build dynamic extensions to Tasmota, that would previously require native code:</p> <ul> <li>build light animations</li> <li>build I<sup>2</sup>C drivers</li> <li>build complete Tasmota drivers</li> <li>integrate native libraries like <code>lvgl</code> see LVGL</li> </ul>"},{"location":"Berry/#about-the-berry-language","title":"About the Berry language","text":"<p>Berry has the following advantages:</p> <ul> <li>Lightweight: A well-optimized interpreter with very little resources. Ideal for use in microprocessors.</li> <li>Fast: optimized one-pass bytecode compiler and register-based virtual machine.</li> <li>Powerful: supports imperative programming, object-oriented programming, functional programming.</li> <li>Flexible: Berry is a dynamic type script, and it's intended for embedding in applications. It can provide good dynamic scalability for the host system.</li> <li>Simple: simple and natural MicroPython-eque syntax, supports garbage collection and easy to use FFI (foreign function interface).</li> <li>RAM saving: With compile-time object construction, most of the constant objects are stored in read-only code data segments, so the RAM usage of the interpreter is very low when it starts.</li> </ul>"},{"location":"Berry/#tasmota-port","title":"Tasmota Port","text":"<p>Berry Scripting in only supported on Tasmota32 for ESP32. The RAM usage starts at ~10KB and will be later optimized. Berry uses PSRAM on ESP32 if available (PSRAM is external RAM attached to ESP32 via SPI, it is slower but larger than internal RAM.</p>"},{"location":"Berry/#quick-start","title":"Quick Start","text":"<p>Click on Configuration then Berry Scripting Console and enjoy the colorful Berry console, also called REPL (Read-Eval-Print-Loop).</p> <p></p> <p>Drag the bottom corner of each screen to change its size</p> <p>The console is not designed for big coding tasks but it's recommended to use a code editor when dealing with many, many lines of code. An extension for Visual Studio Code exists to make writing Berry scripts even easier with colored syntax. Download the entire folder and copy to VSCode extensions folder.</p>"},{"location":"Berry/#repl-console","title":"REPL Console","text":"<p>Try typing simple commands in the REPL. Since the input can be multi-lines, press Enter twice or click \"Run\" button to run the code. Use Up and Down to navigate through history of previous commands.</p> <pre><code>&gt; 1+1\n2\n</code></pre> <pre><code>&gt; 2.0/3\n0.666667\n</code></pre> <pre><code>&gt; print('Hello Tasmota!')\nHello Tasmota!\n</code></pre> <p>Note: Berry's native <code>print()</code> command displays text in the Berry Console and in the Tasmota logs. To log with finer control, you can also use the <code>log()</code> function which will not display in the Berry Console.</p> <pre><code>&gt; print('Hello Tasmota!')\n  log('Hello again')\nHello Tasmota!\n</code></pre> <p>Meanwhile the Tasmota log shows: <pre><code>&gt; tasmota.cmd(\"Dimmer 60\")\n{'POWER': 'ON', 'Dimmer': 60, 'Color': '996245', 'HSBColor': '21,55,60', 'Channel': [60, 38, 27]}\nThe light is bright\n</code></pre></p>"},{"location":"Berry/#save-your-scripts","title":"Save your Scripts","text":"<p>Berry can autostart your scripts. See a short description in the Section about the filesystem: https://tasmota.github.io/docs/UFS/#autoexecbe Your can use the Filemanager to edit or save files with your berry scripts.</p>"},{"location":"Berry/#iterate-without-rebooting","title":"Iterate without rebooting","text":"<p>Since v13.0.0.1 you can restart the entire Berry VM with a click in the Berry console. This feature requires to compile with <code>#define USE_BERRY_DEBUG</code> which is anyways highly recommended when coding in Berry. Be aware that restarting the Berry VM loses all context, and may generate negative side effects that we haven't yet identified. When restarting the VM, <code>autoexec.be</code> is ran again.</p> <p>Instead of using the Web UI, you can also use the <code>BrRestart</code> command which does not require <code>#define USE_BERRY_DEBUG</code>.</p>"},{"location":"Berry/#lights-and-relays","title":"Lights and Relays","text":"<p>Berry provides complete support for Relays and Lights.</p> <p>You can control individual Relays or lights with <code>tasmota.get_power()</code> and <code>tasmota.set_power()</code>.</p> <p><code>tasmota.get_power()</code> returns an array of booleans representing the state of each relays and light (light comes last).</p> <p><code>tasmota.set_power(relay, onoff)</code> changes the state of a single relay/light.</p> <p>2 relays and 1 light</p> <pre><code>&gt; tasmota.get_power()\n[false, true, false]\n\n&gt; tasmota.set_power(0, true)\ntrue\n\n&gt; tasmota.get_power()\n[true, true, false]\n</code></pre> <p>For light control, <code>light.get()</code> and <code>light.set</code> accept a structured object containing the following arguments:</p> Attributes Details power <code>boolean</code>Turns the light off or on. Equivalent to <code>tasmota.set_power()</code>. When brightness is set to <code>0</code>, power is automatically set to off. On the contrary, you need to specify <code>power:true</code> to turn the light on. bri <code>int range 0..255</code>Set the overall brightness. Be aware that the range is <code>0..255</code> and not <code>0..100</code> as Dimmer. hue <code>int 0..360</code>Set the color Hue in degree, range 0..360 (0=red). sat <code>int 0..255</code>Set the color Saturation (0 is gray). ct <code>int 153..500</code>Set the white color temperature in mired, ranging from 153 (cold white) to 500 (warm white) rgb <code>string 6 hex digits</code>Set the color as hex <code>RRGGBB</code>, changing color and brightness. channels <code>array of int, ranges 0..255</code>Set the value for each channel, as an array of numbers <p>When setting attributes, they are evaluated in the following order, the latter overriding the previous: <code>power</code>, <code>ct</code>, <code>hue</code>, <code>sat</code>, <code>rgb</code>, <code>channels</code>, <code>bri</code>.</p> <pre><code>  # set to yellow, 25% brightness\n&gt; light.set({\"power\": true, \"hue\":60, \"bri\":64, \"sat\":255})\n{'bri': 64, 'hue': 60, 'power': true, 'sat': 255, 'rgb': '404000', 'channels': [64, 64, 0]}\n\n  # set to RGB 000080 (blue 50%)\n&gt; light.set({\"rgb\": \"000080\"})\n{'bri': 128, 'hue': 240, 'power': true, 'sat': 255, 'rgb': '000080', 'channels': [0, 0, 128]}\n\n  # set bri to zero, also powers off\n&gt; light.set({\"bri\": 0})\n{'bri': 0, 'hue': 240, 'power': false, 'sat': 255, 'rgb': '000000', 'channels': [0, 0, 0]}\n\n  # changing bri doesn't automatically power\n&gt; light.set({\"bri\": 32, \"power\":true})\n{'bri': 32, 'hue': 240, 'power': true, 'sat': 255, 'rgb': '000020', 'channels': [0, 0, 32]}\n\n  # set channels as numbers (purple 12%)\n&gt; light.set({\"channels\": [32,0,32]})\n{'bri': 32, 'hue': 300, 'power': true, 'sat': 255, 'rgb': '200020', 'channels': [32, 0, 32]}\n</code></pre>"},{"location":"Berry/#rules","title":"Rules","text":"<p>The rule function have the general form below where parameters are optional:</p> <pre><code>def function_name(value, trigger, msg)\nend\n</code></pre> Parameter Description <code>value</code> The value of the trigger. Similar to <code>%value%</code> in native rules. <code>trigger</code> <code>string</code> of the trigger with all levels. Can be used if the same function is used with multiple triggers. <code>msg</code> <code>map</code> Berry structured object of the message, decoded from JSON. If JSON was invalid, it contains the original string <p>Dimmer rule</p> <p>Define the function and add a rule to Tasmota where the function runs if Dimmer value is more than 50 <pre><code>&gt; def dimmer_over_50()\n    print(\"The light is bright\")\n  end\n  tasmota.add_rule(\"Dimmer&gt;50\", dimmer_over_50)\n</code></pre></p> <pre><code>&gt; tasmota.cmd(\"Dimmer 30\")\n{'POWER': 'ON', 'Dimmer': 30, 'Color': '4D3223', 'HSBColor': '21,55,30', 'Channel': [30, 20, 14]}\n\n&gt; tasmota.cmd(\"Dimmer 60\")\n{'POWER': 'ON', 'Dimmer': 60, 'Color': '996245', 'HSBColor': '21,55,60', 'Channel': [60, 38, 27]}\nThe light is bright\n</code></pre> <p>The same function can be used with multiple triggers.</p> <p>If the function to process an ADC input should be triggered both by the <code>tele/SENSOR</code> message and the result of a <code>Status 10</code> command:</p> <pre><code>tasmota.add_rule(\"ANALOG#A1\", rule_adc_1)\ntasmota.add_rule(\"StatusSNS#ANALOG#A1\", rule_adc_1)\n</code></pre> <p>Or if the same function is used to process similar triggers: <pre><code>import string\n\ndef rule_adc(value, trigger)\n  var i=string.find(trigger,\"#A\")\n  var tr=string.split(trigger,i+2)\n  var adc=number(tr[1])\n  print(\"value of adc\",adc,\" is \",value)\nend\n\ntasmota.add_rule(\"ANALOG#A1\",rule_adc)\ntasmota.add_rule(\"ANALOG#A2\",rule_adc)\n</code></pre></p> <p>Another way to address the same using anonymous functions created dynamically <pre><code>def rule_adc(adc, value)\n  print(\"value of adc\",adc,\" is \",value)\nend\ntasmota.add_rule(\"ANALOG#A1\", def (value) rule_adc(1,value) end )\ntasmota.add_rule(\"ANALOG#A2\", def (value) rule_adc(2,value) end )\n</code></pre></p>"},{"location":"Berry/#multiple-triggers-and-logic","title":"Multiple triggers AND logic","text":"<p>It is possible to combine multiple triggers in a AND logic as an array: <pre><code>tasmota.add_rule([\"ANALOG#A1&gt;300\",\"ANALOG#A1&lt;500\"], def (values) rule_adc_in_range(1,values) end )\n</code></pre> would trigger if <code>300 &lt; ANALOG#A1 &lt; 500</code></p> <p>Triggers can be of different types too: <pre><code>tasmota.add_rule([\"ANALOG#A1&gt;300\",\"BME280#Temperature&gt;28.0\"], def (values) rule_adc_and_temp(1,values) end )\n</code></pre> would trigger for simultaneous <code>ANALOG#A1&gt;300</code> AND <code>BME280#Temperature&gt;28.0</code></p> <p>In that case, the value and trigger arguments passed to the rule function are also lists: <pre><code>def function_name(values:list_of_string, triggers:list_of_string, msg)\nend\n</code></pre> The 3rd argument <code>msg</code> remains unchanged.</p>"},{"location":"Berry/#teleperiod-rules","title":"Teleperiod rules","text":"<p>Teleperiod rules are supported with a different syntax from Tasmota rules. Instead of using <code>Tele-</code> prefix, you must use <code>Tele#</code>. For example <code>Tele#ANALOG#Temperature1</code> instead of <code>Tele-ANALOG#Temperature1</code></p>"},{"location":"Berry/#rules-operators","title":"Rules operators","text":"Operator Function String Operators <code>=</code> equal to (used for string comparison) <code>!==</code> not equal to (used for string comparison) <code>$&lt;</code> string starts with <code>$&gt;</code> string ends with <code>$\\|</code> string contains <code>$!</code> string is not equal to <code>$^</code> string do not contains Numerical Operators <code>==</code> equal to (used for numerical comparison) <code>&gt;</code> greater than <code>&lt;</code> lesser than <code>!=</code> number not equal to <code>&gt;=</code> greater than or equal to <code>&lt;=</code> lesser than or equal to <code>\\|</code> Modulo division to this number is <code>0</code> (remainder=0)"},{"location":"Berry/#timers","title":"Timers","text":"<p>Berry code, when it is running, blocks the rest of Tasmota. This means that you should not block for too long, or you may encounter problems. As a rule of thumb, try to never block more than 50ms. If you need to wait longer before the next action, use timers. As you will see, timers are very easy to create thanks to Berry's functional nature.</p> <p>All times are in milliseconds. You can know the current running time in milliseconds since the last boot:</p> <pre><code>&gt; tasmota.millis()\n9977038\n</code></pre> <p>Sending a timer is as easy as <code>tasmota.set_timer(&lt;delay in ms&gt;,&lt;function&gt;)</code></p> <pre><code>&gt; def t() print(\"Booh!\") end\n\n&gt; tasmota.set_timer(5000, t)\n[5 seconds later]\nBooh!\n</code></pre> <p>Timers are scheduled roughly within 50 milliseconds ticks. This means that you cannot have better than 50 ms resolution, and <code>set_timer(0, &lt;function&gt;</code>) will schedule the function 50 ms later. In certain cases, you need to defer a function to an immediate future; for such case use <code>tasmota.defer(&lt;function&gt;)</code> which will run the function typically within the next millisecond.</p>"},{"location":"Berry/#a-word-on-functions-and-closure","title":"A word on functions and closure","text":"<p>Berry is a functional language, and includes the very powerful concept of a closure. In a nutshell, it means that when you create a function, it can capture the values of variables when the function was created. This roughly means that it does what intuitively you would expect it to do.</p> <p>When using Rules or Timers, you always pass Berry functions.</p>"},{"location":"Berry/#cron-recurrent-calls","title":"<code>cron</code> recurrent calls","text":"<p>You can choose to run some function/closure at regular intervals specified as <code>cron</code> style format with the first field representing seconds.  <pre><code>&gt; def f() print(\"Hi\") end\n&gt; tasmota.add_cron(\"*/15 * * * * *\", f, \"every_15_s\")\nHi\nHi      # added every 15 seconds\n&gt; tasmota.remove_cron(\"every_15_s\")     # cron stops\n</code></pre></p> <p>Like timers, you need to create a closure if you want to register a method of an instance. Example:</p> <pre><code>class A\n    var name\n    def init(name)\n        self.name = name\n    end\n    def p()\n        print(\"Hi,\", self.name)\n    end\nend\n</code></pre> <pre><code>&gt; bob = A(\"bob\")\n&gt; bob.p()\nHi, bob\n&gt; tasmota.add_cron(\"*/15 * * * * *\", /-&gt; bob.p(), \"hi_bob\")\nHi, bob\nHi, bob\nHi, bob\n&gt; tasmota.remove_cron(\"hi_bob\")     # cron stops\n</code></pre> <p>You can get the timestamp for the next event by using <code>tasmota.next_cron(id)</code> which returns an epoch in seconds.</p>"},{"location":"Berry/#loading-filesystem","title":"Loading Filesystem","text":"<p>Berry files can exist in 2 forms, either a source file (extension <code>.be</code>) or a pre-compiled bytecode (extension <code>.bec</code>). Pre-compiled are usually smaller and load slightly faster (although compilation is fast enough in most use cases). It's usually more flexible and simpler to use source code (<code>.be</code>).</p> <p>You can upload Berry code in the filesystem using the Consoles - Manage File system menu and load them at runtime. Make careful to use <code>*.be</code> extension for those files.</p> <p>To load a Berry file, use the <code>load(filename)</code> function where <code>filename</code> is the name of the file with <code>.be</code> or <code>.bec</code> extension; if the file has no extension '.be' is automatically appended.</p> <p>You don't need to prefix with <code>/</code>. A leading <code>/</code> will be added automatically if it is not present.</p> Previous behavior before 13.4.0.3: <p>When loading a Berry script, the compiled bytecode is automatically saved to the filesystem, with the extension <code>.bec</code> (this is similar to Python's <code>.py</code>/<code>.pyc</code> mechanism). The <code>save(filename,closure)</code> function is used internally to save the bytecode.</p> <p>If a precompiled bytecode (extension <code>.bec</code>) is present of more recent than the Berry source file, the bytecode is directly loaded which is faster than compiling code. You can eventually remove the <code>*.be</code> file and keep only <code>*.bec</code> file (even with <code>load(\"file.be\")</code>.</p> <p>The loading behavior is as follows:</p> <ul> <li><code>load(\"hello\")</code> and <code>load(\"hello.be\")</code> loads <code>hello.be</code> and tries <code>hello.bec</code> if the first does not exist. If both <code>hello.be</code> and <code>hello.bec</code> exist, <code>hello.bec</code> is deleted to avoid confusion between versions.</li> <li><code>load(\"hello.bec\")</code> loads only <code>hello.bec</code> and fails if only <code>hello.be</code> is present</li> </ul> <p>To compile to <code>.bec</code> use <code>tasmota.compile(\"hello.be\")</code>. If all is good, it returns <code>true</code> and creates <code>hello.bec</code>. But beware that if you use <code>load()</code> the <code>.bec</code> file is deleted.</p> <p>Note: <code>tasmota.compile()</code> is different than native Berry <code>compile()</code></p>"},{"location":"Berry/#creating-a-tasmota-driver","title":"Creating a Tasmota Driver","text":"<p>You can easily create a complete Tasmota driver with Berry.</p> <p>A Driver responds to messages from Tasmota. For each message type, the method with the same name is called. Actually you can register any class as a driver, it does not need to inherit from <code>Driver</code>; the call mechanism is based on names of methods that must match the name of the event to be called.</p> <p>Driver methods are called with the following parameters: <code>f(cmd, idx, payload, raw)</code>. <code>cmd</code> is a string, <code>idx</code> an integer, <code>payload</code> a Berry object representation of the JSON in <code>payload</code> (if any) or <code>nil</code>, <code>raw</code> is a string. These parameters are meaningful to a small subset of events:</p> <ul> <li><code>every_second()</code>: called every second</li> <li><code>every_50ms()</code>: called every 50ms (i.e. 20 times per second)</li> <li><code>every_100ms()</code>: called every 100ms (i.e. 10 times per second)</li> <li><code>every_250ms()</code>: called every 250ms (i.e. 4 times per second)</li> <li><code>web_sensor()</code>: display sensor information on the Web UI</li> <li><code>json_append()</code>: display sensor information in JSON format for TelePeriod reporting</li> <li><code>web_add_button()</code>: (deprecated) synonym of <code>web_add_console_button()</code></li> <li><code>web_add_main_button()</code>, <code>web_add_management_button()</code>, <code>web_add_console_button()</code>, <code>web_add_config_button()</code>: add a button to Tasmota's Web UI on a specific page</li> <li><code>web_add_handler()</code>: called when Tasmota web server started, and the right time to call <code>webserver.on()</code> to add handlers</li> <li><code>button_pressed()</code>: called when a button is pressed</li> <li><code>save_before_restart()</code>: called just before a restart</li> <li><code>mqtt_data(topic, idx, data, databytes)</code>: called for MQTT payloads matching <code>mqtt.subscribe</code>. <code>idx</code> is zero, and <code>data</code> is normally unparsed JSON.</li> <li><code>set_power_handler(cmd, idx)</code>: called whenever a Power command is made. <code>idx</code> is a combined index value, with one bit per relay or light currently on. <code>cmd</code> can be ignored.</li> <li><code>any_key(cmd, idx)</code>: called when an interaction with Button or Switch occurs. <code>idx</code> is encoded as follows: <code>device_save &lt;&lt; 24 | key &lt;&lt; 16 | state &lt;&lt; 8 | device</code></li> <li><code>display()</code>: called by display driver with the following subtypes: <code>init_driver</code>, <code>model</code>, <code>dim</code>, <code>power</code>.</li> </ul> <p>Then register the driver with <code>tasmota.add_driver(&lt;driver&gt;)</code>.</p> <p>There are basically two ways to respond to an event:</p> <p>Example</p> <p>Define a class and implement methods with the same name as the events you want to respond to.</p> <pre><code>class MyDriver\n  def every_second()\n    # do something\n  end\nend\n\nd1 = MyDriver()\n\ntasmota.add_driver(d1)\n</code></pre>"},{"location":"Berry/#fast-loop","title":"Fast Loop","text":"<p>Beyond the events above, a specific mechanism is available for near-real-time events or fast loops (200 times per second, or 5ms).</p> <p>Special attention is made so that there is no or very little impact on performance. Until a first callback is registered, performance is not impacted and Berry is not called. This protects any current use from any performance impact.</p> <p>Once a callback is registered, it is called separately from Berry drivers to ensure minimal overhead.</p> <p><code>tasmota.add_fast_loop(cl:function) -&gt; nil</code> registers a callback to be called in fast loop mode.</p> <p>The callback is called without any parameter and does not need to return anything. The callback is called at each iteration of Tasmota event loop. The frequency is set to 200Hz or 5ms.</p> <p>Note: since v13.1.0.2, the frequency of <code>fast_loop</code> does not depend anymore on the value of the <code>Sleep &lt;x&gt;</code> command.</p> <p><code>tasmota.remove_fast_loop(cl:function) -&gt; nil</code> removes a previously registered function or closure. You need to pass the exact same closure reference.</p> <p>Warning, if you need to register a method from an instance, you need a closure:</p> <pre><code>class my_driver\n  def every_100ms()\n    # called every 100ms via normal way\n  end\n\n  def fast_loop()\n    # called at each iteration, and needs to be registered separately and explicitly\n  end\n\n  def init()\n    # register fast_loop method\n    tasmota.add_fast_loop(/-&gt; self.fast_loop())\n    # variant:\n    # tasmota.add_fast_loop(def () self.fast_loop() end)\n  end\nend\n\ntasmota.add_driver(my_driver())                     # register driver\ntasmota.add_fast_loop(/-&gt; my_driver.fast_loop())    # register a closure to capture the instance of the class as well as the method\n</code></pre>"},{"location":"Berry/#tasmota-only-extensions","title":"Tasmota Only Extensions","text":""},{"location":"Berry/#logmsgstring-levelint-3-string","title":"<code>log(msg:string [, level:int = 3]) -&gt; string</code>","text":"<p>Logs a message to the Tasmota console. Optional second argument is log_level (0..4), default is <code>2</code> (matching build time <code>LOG_LEVEL_INFO</code>).</p> <p>Example</p> <pre><code>&gt; log(\"A\")\nA\n</code></pre>"},{"location":"Berry/#loadfilenamestring-bool","title":"<code>load(filename:string) -&gt; bool</code>","text":"<p>Loads a Berry script from the filesystem, and returns true if loaded successfully, false if file not found, or raises an exception in runtime. Filename does not need to start with <code>/</code>, but needs to end with <code>.be</code> (Berry source code) or <code>.bec</code> (precompiled bytecode). If the <code>.be</code> extension is missing, it is automatically added.</p> <p>The behavior for <code>.bec</code> files changed in v13.4: - when loading <code>&lt;file&gt;.be</code>, the <code>.be</code> file is loaded in priority and any <code>.bec</code> file with same prefix is removed (to avoid inconsistencies). If no <code>.be</code> file is present, it tried to load <code>.bec</code> file. - when loading <code>&lt;file&gt;.bec</code>, only <code>.bec</code> files are loaded and <code>.be</code> is ignored. - to create <code>.bec</code> files, you need to use <code>tasmota.compile</code> (see below)</p>"},{"location":"Berry/#tasmotacompilefilenamestring-bool","title":"<code>tasmota.compile(filename:string) -&gt; bool</code>","text":"<p>Loads a <code>.be</code> file, compiles it and saves a <code>.bec</code> file containing the compiled bytecode.</p> <p>Note: <code>tasmota.compile</code> is different from Berry native <code>compile</code> function.</p>"},{"location":"Berry/#savefilenamestring-fclosure-nil","title":"<code>save(filename:string, f:closure) -&gt; nil</code>","text":"<p>Internally used function to save bytecode. It's a wrapper to the Berry's internal API <code>be_savecode()</code>. There is no check made on the filename.</p> <p>There is generally no need to use this function, it is used internally by <code>load()</code>.</p>"},{"location":"Berry/#tasmota-object","title":"<code>tasmota</code> object","text":"<p>A root level object called <code>tasmota</code> is created and contains numerous functions to interact with Tasmota.</p> Tasmota Function Parameters and details tasmota.get_free_heap <code>() -&gt; int</code>Returns the number of free bytes on the Tasmota heap. tasmota.publish <code>(topic:string, payload:string[, retain:bool, start:int, len:int]) -&gt; nil</code>Deprecated see <code>mqtt.publish</code> tasmota.publish_result <code>(payload:string, subtopic:string) -&gt; nil</code>Publishes a JSON result and triggers any associated rule. <code>payload</code> is expected to be a JSON string, and <code>subtopic</code> the subtopic used to publish the payload. tasmota.publish_rule <code>(payload:string) -&gt; handled:bool</code>sends a JSON stringified message to the rule engine, without actually publishing a message to MQTT. Returns <code>true</code> if the message was handled by a rule. tasmota.cmd <code>(command:string [, mute:bool]) -&gt; map</code>Sends any command to Tasmota, like it was type in the console. It returns the result of the command if any, as a map parsed from the command output JSON. Takes an optional <code>mute</code> attribute. If <code>mute</code> is <code>true</code>, logging (serial, web, mqtt) is reduced to level <code>1</code> (only severe errors) to avoid polluting the logs. tasmota.memory <code>() -&gt; map</code> or <code>(key:string) -&gt; any</code>Returns memory stats similar to the Information page.Example: <code>{'iram_free': 41, 'frag': 51, 'program_free': 1856, 'flash': 4096, 'heap_free': 226, 'program': 1679}</code>or when PSRAM <code>{'psram_free': 3703, 'flash': 16384, 'program_free': 3008, 'program': 1854, 'psram': 4086, 'frag': 27, 'heap_free': 150}</code>If a <code>key</code> is passed, the value is returned without allocating a new <code>map</code>, or <code>nil</code> if no value matches the <code>key</code>. tasmota.add_rule <code>(trigger:string, f:function [, id:any]) -&gt;nil</code><code>(triggers:list_of_string, f:function [, id:any]) -&gt;nil</code>Adds a rule to the rule engine. See above for rule triggers.Optional <code>id</code> allows to remove selectively rules with <code>tasmota.remove_rule()</code>.If you add a new rule with the same <code>trigger</code> and the same non-<code>nil</code> <code>id</code>, the previous rule is removed and the new one replaces it (this is handy when developing new code) tasmota.add_rule_once <code>(trigger:string, f:function [, id:any]) -&gt;nil</code><code>(triggers:list_of_string, f:function [, id:any]) -&gt;nil</code>Same as <code>add_rule</code> except the rule is fired only once and then removed from rules tasmota.remove_rule <code>(trigger:string [, id:any]) -&gt;nil</code><code>(triggers:list_of_string [, id:any]) -&gt;nil</code>Removes a rule from the rule engine. Silently ignores the trigger(s) if no rule matches. Optional <code>id</code> to remove selectively some rules. tasmota.when_network_up <code>(f:function) -&gt;nil</code>Runs the provided function or closure as soon as the first network stack is available (wifi or ethernet).This is to be used whenever you call network function from Berry, calling most of network functions before the network is up generally causes a crash. tasmota.add_driver <code>(instance) -&gt;nil</code>Registers an instance as a driver tasmota.remove_driver <code>(instance) -&gt;nil</code>Removes a driver tasmota.gc <code>() -&gt; int</code>Triggers garbage collection of Berry objects and returns the bytes currently allocated. This is for debug only and shouldn't be normally used. <code>gc</code> is otherwise automatically triggered when necessary. tasmota.urlfetch <code>(url:string [, filename:string]) -&gt; bytes:int</code>Download a url (http or https) and store the content in the filesystem<code>filename</code> is optional, needed if you want to change the name of the file from the url suffix. Returns the number of bytes downloaded or -1 if failed. tasmota.urlbecload <code>(url:string) -&gt; bool</code>Download <code>.bec</code> file from a url and run it, return <code>true</code> if successful. This allows to run complementary code like Partition Wizard from precompiled Berry. tasmota.scale_uint <code>(value:int, fromMin:int, fromMax:int, toMin:int, toMax:int) -&gt; int</code>Linear scaling of an unsigned integer range, based on two points on the line, typically min and max for \"from\" and \"to\" ranges. The internal implementation works better on 16 bits integers. tasmota.scale_int <code>(value:int, fromMin:int, fromMax:int, toMin:int, toMax:int) -&gt; int</code>Linear scaling of an integer range, based on two points on the line, typically min and max for \"from\" and \"to\" ranges. tasmota.int <code>(value:int, min:int, max:int) -&gt; int</code>Convert a value <code>v</code> to an <code>int</code> and to guard the value between <code>min</code> and <code>max</code>. If <code>v</code> is <code>nil</code>, it returns <code>min</code>. If <code>min &gt; max</code>, it returns <code>min</code>. If <code>min</code> or <code>max</code> are <code>nil</code>, it behaves like Berry native <code>int()</code>.Since v14.4.2"},{"location":"Berry/#functions-used-to-retrieve-tasmota-configuration","title":"Functions used to retrieve Tasmota configuration","text":"Tasmota Function Parameters and details tasmota.get_option <code>(index:int) -&gt; int</code>Returns the value of <code>SetOption &lt;index&gt;</code> tasmota.wire_scan <code>(addr:int [, index:int]) -&gt; wire instance or nil</code>Scan both I<sup>2</sup>C buses for a device of address <code>addr</code>, optionally taking into account disabled devices via <code>I2CDevice</code>. Returns a <code>wire</code> object corresponding to the bus where the device is, or <code>nil</code> if device is not connected or disabled. tasmota.i2c_enabled <code>(index:int) -&gt; bool</code>Returns true if the I<sup>2</sup>C module is enabled, see I<sup>2</sup>C page. tasmota.arch <code>() -&gt; string</code>Returns the name of the architecture. Currently can be <code>esp32</code>, <code>esp32s2</code>, <code>esp32s3</code>, <code>esp32c3</code> tasmota.read_sensors <code>([show_sensor:bool]) -&gt; string</code>Returns the value of sensors as a JSON string similar to the teleperiod. The response is a string, not a JSON object. The reason is that some sensors might produce invalid JSON. It's your code's responsibility to try parsing as JSON.An optional boolean parameter (false by default) can be set to trigger a display of the new values (i.e. sends a FUNC_SHOW_SENSOR` event to drivers). tasmota.wifi <code>() -&gt; map</code> or <code>(key:string) -&gt; any</code>Retrieves Wi-Fi connection info or empty map.Example: <code>{'mac': 'aa:bb:cc:22:11:03', 'quality': 100, 'rssi': -47, 'ip': '192.168.1.102'}</code>If a <code>key</code> is passed, the value is returned without allocating a new <code>map</code>, or <code>nil</code> if no value matches the <code>key</code>. tasmota.eth <code>() -&gt; map</code> or <code>(key:string) -&gt; any</code>Retrieves Ethernet connection info or empty map.Example: <code>{'mac': 'aa:bb:cc:22:11:00', 'ip': '192.168.1.101'}</code>If a <code>key</code> is passed, the value is returned without allocating a new <code>map</code>, or <code>nil</code> if no value matches the <code>key</code>. tasmota.webcolor <code>() -&gt; map</code> or <code>(index:integer) -&gt; string</code>Dump all webcolors from the Tasmota configuratio, or retrieve a specific color by index number.Colors are expressed in <code>#RRGGBB</code> hex format and ready to use for HASPmotaNote: indices are 0-based so <code>1</code> less than in <code>WebColor</code> command<code>0</code>: Global text, default <code>\"#eaeaea\"</code><code>1</code>: Global background, default <code>\"#252525\"</code><code>2</code>: Form background, default <code>\"#4f4f4f\"</code><code>3</code>: Input text, default <code>\"#000000\"</code><code>4</code>: Input background, default <code>\"#dddddd\"</code><code>5</code>: Console text, default <code>\"#65c115\"</code><code>6</code>: Console background, default <code>\"#1f1f1f\"</code><code>7</code>: Warning text, default <code>\"#ff5661\"</code><code>8</code>: Success text, default <code>\"#008000\"</code><code>9</code>: Button text, default <code>\"#faffff\"</code><code>10</code>: Button, default <code>\"#1fa3ec\"</code><code>11</code>: Button hovered over, default <code>\"#0e70a4\"</code><code>12</code>: Restart/Reset/Delete button, default <code>\"#d43535\"</code><code>13</code>: Restart/Reset/Delete button hover, default <code>\"#931f1f\"</code><code>14</code>: Save button, default <code>\"#47c266\"</code><code>15</code>: Save button hover, default <code>\"#5aaf6f\"</code><code>16</code>: Config timer tab text, default <code>\"#faffff\"</code><code>17</code>: Config timer tab background, default <code>\"#999999\"</code><code>18</code>: Module title and FriendlyName text, default <code>\"#eaeaea\"</code><code>19</code>: Button color when off, default <code>\"#08405e\"</code>"},{"location":"Berry/#functions-for-time-timers-or-cron","title":"Functions for time, timers or cron","text":"Tasmota Function Parameters and details tasmota.millis <code>([delay:int]) -&gt; int</code>Returns the number of milliseconds since last reboot. The optional parameter lets you specify the number of milliseconds in the future; useful for timers. tasmota.time_reached <code>(timer:int) -&gt; bool</code>Checks whether the timer (in milliseconds) has been reached or not. Always use this function and don't do compares between <code>millis()</code> and timers, because of potential sign and overflow issues. tasmota.rtc <code>() -&gt; map</code> or <code>(key:string) -&gt; any</code>Returns clockwall time with variants.Example: <code>{'local': 1619560407, 'utc': 1619556807, 'timezone': 60, 'restart': 1619556779}</code>If a <code>key</code> is passed, the value is returned without allocating a new <code>map</code>, or <code>nil</code> if no value matches the <code>key</code>. tasmota.time_dump <code>(timestamp:int) -&gt; map</code>Decompose a timestamp value (in seconds) to its componentsExample: <code>tasmota.time_dump(1619560407)</code> -&gt; <code>{'min': 53, 'weekday': 2, 'sec': 27, 'month': 4, 'year': 2021, 'day': 27, 'epoch': 1619560407, 'hour': 21}</code> tasmota.time_str <code>(timestamp:int) -&gt; string</code>Converts a timestamp value (in seconds) to an ISO 8601 stringExample: <code>tasmota.time_str(1619560407)</code> -&gt; <code>2021-04-27T21:53:27</code> tasmota.set_timer <code>(delay:int, f:function [, id:any]) -&gt; nil</code>Runs the closure or function <code>f</code> after <code>delay</code> milliseconds, optional <code>id</code> can be used to remove the timer.The <code>delay</code> resolution is roughly 50 milliseconds.If you need to defer the function immediately after the current event loop, and not wait for 50 millisecond, consider using <code>tasmota.defer()</code> below. tasmota.defer <code>(f:function) -&gt; nil</code>Runs the closure or function <code>f</code> within the next millisecond (delay is not guaranteed). This can be used as a faster alternative to <code>tasmota.set_timer(0, f)</code> tasmota.remove_timer <code>(id:string) -&gt; nil</code>Removes the timer with the <code>id</code> used on <code>tasmota.set_timer</code>. tasmota.strftime <code>(format:string, timestamp:int) -&gt; string</code>Converts a timestamp value (in seconds) to a string using the format conversion specifiersExample: <code>tasmota.strftime(\"%d %B %Y %H:%M:%S\", 1619560407)</code> -&gt; <code>27 April 2021 21:53:27</code> tasmota.strptime <code>(time:string, format:string) -&gt; map or nil</code>Converts a string to a date, according to a time format following the C <code>strptime</code> format. Returns a <code>map</code> similar to <code>tasmota.time_dump()</code> or <code>nil</code> if parsing failed. An additional <code>unparsed</code> attribute reports the unparsed string, or empty string if everything was parsed.Example: <code>tasmota.strptime(\"2001-11-12 18:31:01\", \"%Y-%m-%d %H:%M:%S\")</code> -&gt; <code>{'unparsed': '', 'weekday': 1, 'day': 12, 'epoch': 1005589861, 'min': 31, 'year': 2001, 'month': 11, 'sec': 1, 'hour': 18}</code> tasmota.yield <code>() -&gt; nil</code>Calls Arduino framework <code>yield()</code> function to give back some time to low-level functions, like Wifi. Prevents WDT watchdog from happening. tasmota.delay <code>([delay:int]) -&gt; int</code>Waits and blocks execution for <code>delay</code> milliseconds. Should ideally never wait more than 10ms and absolute max 50ms. Otherwise use <code>set_timer</code>. tasmota.add_cron <code>(pattern:string, f:function [, id:any]) -&gt; nil</code>Adds a cron-type timer, with a cron pattern and a function/closure to call. An optional id can be added to retrieve or delete the cron timer tasmota.remove_cron <code>(id:any) -&gt; nil</code>Remove a cron timer. tasmota.next_cron <code>(id:any) -&gt; int</code>returns the next timestamp for the cron timer. The timestamp is second epoch in local time. You can use <code>tasmota.tasmota.time_str()</code> to convert to a time string."},{"location":"Berry/#functions-to-create-custom-tasmota-command","title":"Functions to create custom Tasmota command","text":"Tasmota Function Parameters and details tasmota.add_cmd <code>(name:string, f:function) -&gt; nil</code>Adds a command to Tasmota commands. Command names are case-insensitive. Command names are analyzed after native commands and after most commands, so you can't override a native command. tasmota.resp_cmnd_str <code>(message:string) -&gt; nil</code>Sets the output for the command to <code>message</code>. tasmota.resp_cmnd_done <code>() -&gt; nil</code>Sets the output for the command to \"Done\" (localized message). tasmota.resp_cmnd_error <code>() -&gt; nil</code>Sets the output for the command to \"Error\" (localized message). tasmota.resp_cmnd_failed <code>() -&gt; nil</code>Sets the output for the command to \"Fail\" (localized message). tasmota.resp_cmnd <code>(message:string) -&gt; nil</code>Overrides the entire command response. Should be a valid JSON string. tasmota.remove_cmd <code>(name:string) -&gt; nil</code>Remove a command to Tasmota commands. Removing an non-existing command is skipped silently."},{"location":"Berry/#functions-to-add-custom-responses-to-json-and-web-ui-to-sensors","title":"Functions to add custom responses to JSON and Web UI to sensors","text":"Tasmota Function Parameters and details tasmota.response_append <code>(name:string) -&gt; nil</code>Adds JSON fragment to the current response. Used for example for sensors to add JSON to teleperiod.Can be called only in <code>json_append()</code> method of a registered driver (see cookbook). It is called at least at each teleperiod, or when reading sensor data in JSON. tasmota.web_send <code>(message:string) -&gt; nil</code>Adds an HTML fragment to the Web output.Can be called only in <code>web_sensor()</code> method of a registered driver (see cookbook). It is called at each main page refresh. tasmota.web_send_decimal <code>(message:string) -&gt; nil</code>Adds an HTML fragment to the Web output, similar to <code>web_send</code> but converts decimal dot <code>.</code> to the locale decimal separator.Can be called only in <code>web_sensor()</code> method of a registered driver (see cookbook). It is called at each main page refresh. <p>See examples in the Berry-Cookbook</p>"},{"location":"Berry/#functions-to-manage-relays-and-lights","title":"Functions to manage Relays and Lights","text":"Tasmota Function Parameters and details tasmota.get_power <code>([index:int]) -&gt; bool or list[bool]</code>Returns Relay or Light On/Off state for one channel, or as a list of <code>bool</code> for all. tasmota.set_power <code>(index:int, onoff:bool) -&gt; bool or nil</code>Sets the on/off state of a Relay/Light. Returns the previous status of the Relay/Light or <code>nil</code> if index is invalid.Example:<code>&gt; tasmota.set_power(0, true)</code><code>[true]</code> tasmota.get_light deprecated use <code>light.get</code> tasmota.set_light deprecated use <code>light.set</code> tasmota.get_switches <code>() -&gt; list(bool)</code>Returns as many values as switches are present. <code>true</code> means <code>PRESSED</code> and <code>false</code> means <code>NOT_PRESSED</code>. (Warning: this is the opposite of the internal representation where PRESSED=0)Note: if there are holes in the switch definition, the values will be skipped. I.e. if you define SWITCH1 and SWITCH3, the array will return the two consecutive values for switches 1/3."},{"location":"Berry/#low-level-access-to-tasmota-globals-and-settings","title":"Low-level access to Tasmota globals and settings.","text":"<p>Use with care and only if you know what you are doing.</p> <p>The construct is to use <code>tasmota.global</code> or <code>tasmota.settings</code> to read or write attributes. </p> <p>You can do bad things with these features</p> Value Details tasmota.global.sleep Current sleep value tasmota.global.devices_present Number of Power channels, e.g. having virtual relays tasmota.settings.sleep Sleep value stored in flash"},{"location":"Berry/#mqtt-module","title":"<code>mqtt</code> module","text":"<p>Use with <code>import mqtt</code>.</p> <p>Since v11.1.0.1, there is an easier way than registering a driver, and listening to <code>mqtt_data</code> event. You can now just attach a function or closure to a MQTT topic, and it does the magic for you.</p> <p>The function you attach to a topic pattern received only the matching MQTT messages, not all messages unlike <code>mqtt_data()</code> would.</p> <p>The function takes the same parameters as <code>mqtt_data()</code>:</p> <ul> <li><code>topic</code>: full topic received from the broker</li> <li><code>idx</code>: not used</li> <li><code>payload_s</code>: payload as string, usually converted to JSON with <code>import json json.load(payload_s)</code></li> <li><code>payload_b</code>: payload as a binary payload, bytes() array</li> </ul> <p>the function should return <code>true</code> if the event was parsed or if the event should not trigger a Tasmota command. If you return <code>nil</code> or nothing, it is considered as <code>true</code> which is the usual behavior you want (i.e. not trigger a Tasmota command from random MQTT messages).</p> Tasmota Function Parameters and details mqtt.publish <code>(topic:string, payload:string[, retain:bool, start:int, len:int]) -&gt; nil</code>Equivalent of <code>publish</code> command, publishes a MQTT message on <code>topic</code> with <code>payload</code>. Optional <code>retain</code> parameter.<code>payload</code> can be a string or a bytes() binary array<code>start</code> and <code>len</code> allow to specify a sub-part of the string or bytes buffer, useful when sending only a portion of a larger buffer. mqtt.subscribe <code>mqtt.subscribe(topic:string [, function:closure]) -&gt; nil</code>Subscribes to a <code>topic</code> (exact match or pattern). Contrary to Tasmota's <code>Subscribe</code> command, the topic is sent as-is and not appended with <code>/#</code>. You need to add wildcards yourself. Driver method <code>mqtt_data</code> is called for each matching payload.If a function/closure is added, the function is called whenever and only if an incoming messages matches the pattern for this function. The function should return <code>true</code> if message was processed, <code>false</code> if not which will let the message flow to Tasmota eventually as a command.You can call mqtt.subscribe even without MQTT connection, and Tasmota will manage subscriptions upon connection, also when reconnecting after an outage. This allows code in <code>autoexec.be</code> do make a subscription, which will then have effect after connection has been established. mqtt.unsubscribe <code>(topic:string) -&gt; nil</code>Unsubscribe to a <code>topic</code> (exact match). mqtt.connected <code>mqtt.connected() -&gt; bool</code>Returns <code>true</code> if Tasmota is connected to the MQTT broker"},{"location":"Berry/#light-object","title":"<code>light</code> object","text":"<p>Module <code>light</code> is automatically imported via a hidden <code>import light</code> command.</p> Tasmota Function Parameters and details light.get <code>([index:int, name:string]) -&gt; map or value</code>Get the current status if light number <code>index</code> (default:0).Example:<code>&gt; light.get</code><code>{'bri': 77, 'hue': 21, 'power': true, 'sat': 140, 'rgb': '4D3223', 'channels': [77, 50, 35]}</code><code>light.get(0, 'bri')</code><code>50</code> light.set <code>(settings:map[, index:int]) -&gt; map</code>Sets the current state for light <code>index</code> (default: 0.Example:<code>&gt; light.set({'hue':120,'bri':50,'power':true})</code><code>{'bri': 50, 'hue': 120, 'power': true, 'sat': 140, 'rgb': '173217', 'channels': [23, 50, 23]}</code> light.gamma10 <code>(channel) -&gt; int</code>Computes the gamma corrected value with 10 bits resolution for input and output. Note: Gamma is optimized for speed and smooth fading, and is not 100% mathematically accurate.Input and output are in range 0..1023. light.reverse_gamma10 <code>(gamma) -&gt; int</code>Computes the reverse gamma with 10 bits resolution for input and output.Input and output are in range 0..1023. light.gamma8 <code>(channel) -&gt; int</code>Computes the gamma corrected value with 8 bits resolution for input and output.Input and output are in range 0..255."},{"location":"Berry/#gpio-module","title":"<code>gpio</code> module","text":"<p>This module allows to retrieve the GPIO configuration set in the templates. You need to distinguish between logical GPIO (like PWM, or I2C) and physical GPIO which represent the GPIO number of the physical pin. <code>gpio.pin()</code> transforms a logical GPIO to a physical GPIO, or <code>-1</code> if the logical GPIO is not set.</p> <p>Currently there is limited support for GPIO: you can only read/write in digital mode and set the GPIO mode.</p> Tasmota Function Parameters and details gpio.pin_used <code>(gpio [,index]) -&gt; bool</code>returns if a specific GPIO is used. <code>index</code> allows to iterate through GPIOs. Example: <code>gpio.pin_used(gpio.REL1)</code> to check Relay1, or <code>gpio.pin_used(gpio.REL1,1)</code> to check Relay2 (index is zero-based) gpio.pin <code>(gpio [,index]) -&gt; int</code>returns the physical GPIO number assigned to the Tasmota GPIO, or -1 if the GPIO is not assigned gpio.digital_write <code>(phy_gpio, val) -&gt; nil</code> needs the physical GPIO numbersets the GPIO to LOW/HIGH. <code>val</code> can be <code>0</code>, <code>1</code>, <code>gpio.LOW</code> or <code>gpio.HIGH</code>. Example: <code>gpio.digital_write(gpio.pin(gpio.REL1), gpio.HIGH)</code> sets Relay1 to High. gpio.digital_read <code>(phy_gpio) -&gt; int</code> needs the physical GPIO numberreads the value of a GPIO. Returns 0 or 1. gpio.pin_mode <code>(phy_gpio, mode) -&gt; nil</code> needs the physical GPIO numberChanges the GPIO mode. It should be called very cautiously. Normally Tasmota handles automatically GPIO modes.<code>mode</code> can have the following values: <code>gpio.INPUT</code>, <code>gpio.OUTPUT</code>, <code>gpio.PULLUP</code>, <code>gpio.INPUT_PULLUP</code>, <code>gpio.PULLDOWN</code>, <code>gpio.OPEN_DRAIN</code>, <code>gpio.OUTPUT_OPEN_DRAIN</code>, <code>gpio.DAC</code> gpio.dac_voltage <code>(phy_gpio:int, voltage_mv:int) -&gt; int</code>Sets the DAC voltage in mV. The resolution is 8 bits over a range of 0..3.3V, i.e. an increment of ~13mV, this function returns the actual voltage output rounded to the closest value. See below for constraints of DAC GPIOs. gpio.set_pwm <code>(phy_gpio:int, duty:int [, phase:int]) -&gt; nil</code>Sets the value of a PWM output<code>phy_gpio</code>: physical GPIO number<code>duty</code>: analog value for the pwm, range is 0..1023 unless you change the PWM range<code>phase</code>: (opt) set the starting point in time for this pulse from start of cycle. Range is 0..1023 unless you change PWM range. This allows to dephase pulses, for example for H-bridge.Low-level this is a low-level function that bypasses all the Tasmota logic around PWM. Use with caution as a <code>PWM</code> command might overwrite your settings. gpio.set_pwm_freq <code>(phy_gpio:int, frequency:int) -&gt; nil</code>Sets the frequency value of a PWM output.Low-level this is a low-level function that bypasses all the Tasmota logic around PWM. Use with caution as a <code>PWM</code> command might overwrite your settings. gpio.counter_read <code>(counter:int) -&gt; int or nil</code>Read counter value, 0 is Counter1, or return nil if counter is not used gpio.counter_set <code>(counter:int, value:int) -&gt; int or nil</code>Set the counter value, 0 is Counter1, return the actual value, or return nil if counter is not used gpio.counter_add <code>(counter:int, value:int) -&gt; int or nil</code>Add to the counter value, 0 is Counter1, return the actual value, or return nil if counter is not used <p>Any internal error or using unsupported GPIO yields a Berry exception.</p> Possible values for Tasmota GPIOs: <p><code>gpio.NONE</code>, <code>gpio.KEY1</code>, <code>gpio.KEY1_NP</code>, <code>gpio.KEY1_INV</code>, <code>gpio.KEY1_INV_NP</code>, <code>gpio.SWT1</code>, <code>gpio.SWT1_NP</code>, <code>gpio.REL1</code>, <code>gpio.REL1_INV</code>, <code>gpio.LED1</code>, <code>gpio.LED1_INV</code>, <code>gpio.CNTR1</code>, <code>gpio.CNTR1_NP</code>, <code>gpio.PWM1</code>, <code>gpio.PWM1_INV</code>, <code>gpio.BUZZER</code>, <code>gpio.BUZZER_INV</code>, <code>gpio.LEDLNK</code>, <code>gpio.LEDLNK_INV</code>, <code>gpio.I2C_SCL</code>, <code>gpio.I2C_SDA</code>, <code>gpio.SPI_MISO</code>, <code>gpio.SPI_MOSI</code>, <code>gpio.SPI_CLK</code>, <code>gpio.SPI_CS</code>, <code>gpio.SPI_DC</code>, <code>gpio.SSPI_MISO</code>, <code>gpio.SSPI_MOSI</code>, <code>gpio.SSPI_SCLK</code>, <code>gpio.SSPI_CS</code>, <code>gpio.SSPI_DC</code>, <code>gpio.BACKLIGHT</code>, <code>gpio.OLED_RESET</code>, <code>gpio.IRSEND</code>, <code>gpio.IRRECV</code>, <code>gpio.RFSEND</code>, <code>gpio.RFRECV</code>, <code>gpio.DHT11</code>, <code>gpio.DHT22</code>, <code>gpio.SI7021</code>, <code>gpio.DHT11_OUT</code>, <code>gpio.DSB</code>, <code>gpio.DSB_OUT</code>, <code>gpio.WS2812</code>, <code>gpio.MHZ_TXD</code>, <code>gpio.MHZ_RXD</code>, <code>gpio.PZEM0XX_TX</code>, <code>gpio.PZEM004_RX</code>, <code>gpio.PZEM016_RX</code>, <code>gpio.PZEM017_RX</code>, <code>gpio.SAIR_TX</code>, <code>gpio.SAIR_RX</code>, <code>gpio.PMS5003_TX</code>, <code>gpio.PMS5003_RX</code>, <code>gpio.SDS0X1_TX</code>, <code>gpio.SDS0X1_RX</code>, <code>gpio.SBR_TX</code>, <code>gpio.SBR_RX</code>, <code>gpio.SR04_TRIG</code>, <code>gpio.SR04_ECHO</code>, <code>gpio.SDM120_TX</code>, <code>gpio.SDM120_RX</code>, <code>gpio.SDM630_TX</code>, <code>gpio.SDM630_RX</code>, <code>gpio.TM1638CLK</code>, <code>gpio.TM1638DIO</code>, <code>gpio.TM1638STB</code>, <code>gpio.MP3_DFR562</code>, <code>gpio.HX711_SCK</code>, <code>gpio.HX711_DAT</code>, <code>gpio.TX2X_TXD_BLACK</code>, <code>gpio.TUYA_TX</code>, <code>gpio.TUYA_RX</code>, <code>gpio.MGC3130_XFER</code>, <code>gpio.MGC3130_RESET</code>, <code>gpio.RF_SENSOR</code>, <code>gpio.AZ_TXD</code>, <code>gpio.AZ_RXD</code>, <code>gpio.MAX31855CS</code>, <code>gpio.MAX31855CLK</code>, <code>gpio.MAX31855DO</code>, <code>gpio.NRG_SEL</code>, <code>gpio.NRG_SEL_INV</code>, <code>gpio.NRG_CF1</code>, <code>gpio.HLW_CF</code>, <code>gpio.HJL_CF</code>, <code>gpio.MCP39F5_TX</code>, <code>gpio.MCP39F5_RX</code>, <code>gpio.MCP39F5_RST</code>, <code>gpio.PN532_TXD</code>, <code>gpio.PN532_RXD</code>, <code>gpio.SM16716_CLK</code>, <code>gpio.SM16716_DAT</code>, <code>gpio.SM16716_SEL</code>, <code>gpio.DI</code>, <code>gpio.DCKI</code>, <code>gpio.CSE7766_TX</code>, <code>gpio.CSE7766_RX</code>, <code>gpio.ARIRFRCV</code>, <code>gpio.ARIRFSEL</code>, <code>gpio.TXD</code>, <code>gpio.RXD</code>, <code>gpio.ROT1A</code>, <code>gpio.ROT1B</code>, <code>gpio.ADC_JOY</code>, <code>gpio.SSPI_MAX31865_CS1</code>, <code>gpio.HRE_CLOCK</code>, <code>gpio.HRE_DATA</code>, <code>gpio.ADE7953_IRQ</code>, <code>gpio.SOLAXX1_TX</code>, <code>gpio.SOLAXX1_RX</code>, <code>gpio.ZIGBEE_TX</code>, <code>gpio.ZIGBEE_RX</code>, <code>gpio.RDM6300_RX</code>, <code>gpio.IBEACON_TX</code>, <code>gpio.IBEACON_RX</code>, <code>gpio.A4988_DIR</code>, <code>gpio.A4988_STP</code>, <code>gpio.A4988_ENA</code>, <code>gpio.A4988_MS1</code>, <code>gpio.OUTPUT_HI</code>, <code>gpio.OUTPUT_LO</code>, <code>gpio.DDS2382_TX</code>, <code>gpio.DDS2382_RX</code>, <code>gpio.DDSU666_TX</code>, <code>gpio.DDSU666_RX</code>, <code>gpio.SM2135_CLK</code>, <code>gpio.SM2135_DAT</code>, <code>gpio.DEEPSLEEP</code>, <code>gpio.EXS_ENABLE</code>, <code>gpio.TASMOTACLIENT_TXD</code>, <code>gpio.TASMOTACLIENT_RXD</code>, <code>gpio.TASMOTACLIENT_RST</code>, <code>gpio.TASMOTACLIENT_RST_INV</code>, <code>gpio.HPMA_RX</code>, <code>gpio.HPMA_TX</code>, <code>gpio.GPS_RX</code>, <code>gpio.GPS_TX</code>, <code>gpio.HM10_RX</code>, <code>gpio.HM10_TX</code>, <code>gpio.LE01MR_RX</code>, <code>gpio.LE01MR_TX</code>, <code>gpio.CC1101_GDO0</code>, <code>gpio.CC1101_GDO2</code>, <code>gpio.HRXL_RX</code>, <code>gpio.ELECTRIQ_MOODL_TX</code>, <code>gpio.AS3935</code>, <code>gpio.ADC_INPUT</code>, <code>gpio.ADC_TEMP</code>, <code>gpio.ADC_LIGHT</code>, <code>gpio.ADC_BUTTON</code>, <code>gpio.ADC_BUTTON_INV</code>, <code>gpio.ADC_RANGE</code>, <code>gpio.ADC_CT_POWER</code>, <code>gpio.WEBCAM_PWDN</code>, <code>gpio.WEBCAM_RESET</code>, <code>gpio.WEBCAM_XCLK</code>, <code>gpio.WEBCAM_SIOD</code>, <code>gpio.WEBCAM_SIOC</code>, <code>gpio.WEBCAM_DATA</code>, <code>gpio.WEBCAM_VSYNC</code>, <code>gpio.WEBCAM_HREF</code>, <code>gpio.WEBCAM_PCLK</code>, <code>gpio.WEBCAM_PSCLK</code>, <code>gpio.WEBCAM_HSD</code>, <code>gpio.WEBCAM_PSRCS</code>, <code>gpio.BOILER_OT_RX</code>, <code>gpio.BOILER_OT_TX</code>, <code>gpio.WINDMETER_SPEED</code>, <code>gpio.KEY1_TC</code>, <code>gpio.BL0940_RX</code>, <code>gpio.TCP_TX</code>, <code>gpio.TCP_RX</code>, <code>gpio.ETH_PHY_POWER</code>, <code>gpio.ETH_PHY_MDC</code>, <code>gpio.ETH_PHY_MDIO</code>, <code>gpio.TELEINFO_RX</code>, <code>gpio.TELEINFO_ENABLE</code>, <code>gpio.LMT01</code>, <code>gpio.IEM3000_TX</code>, <code>gpio.IEM3000_RX</code>, <code>gpio.ZIGBEE_RST</code>, <code>gpio.DYP_RX</code>, <code>gpio.MIEL_HVAC_TX</code>, <code>gpio.MIEL_HVAC_RX</code>, <code>gpio.WE517_TX</code>, <code>gpio.WE517_RX</code>, <code>gpio.AS608_TX</code>, <code>gpio.AS608_RX</code>, <code>gpio.SHELLY_DIMMER_BOOT0</code>, <code>gpio.SHELLY_DIMMER_RST_INV</code>, <code>gpio.RC522_RST</code>, <code>gpio.P9813_CLK</code>, <code>gpio.P9813_DAT</code>, <code>gpio.OPTION_A</code>, <code>gpio.FTC532</code>, <code>gpio.RC522_CS</code>, <code>gpio.NRF24_CS</code>, <code>gpio.NRF24_DC</code>, <code>gpio.ILI9341_CS</code>, <code>gpio.ILI9341_DC</code>, <code>gpio.ILI9488_CS</code>, <code>gpio.EPAPER29_CS</code>, <code>gpio.EPAPER42_CS</code>, <code>gpio.SSD1351_CS</code>, <code>gpio.RA8876_CS</code>, <code>gpio.ST7789_CS</code>, <code>gpio.ST7789_DC</code>, <code>gpio.SSD1331_CS</code>, <code>gpio.SSD1331_DC</code>, <code>gpio.SDCARD_CS</code>, <code>gpio.ROT1A_NP</code>, <code>gpio.ROT1B_NP</code>, <code>gpio.ADC_PH</code>, <code>gpio.BS814_CLK</code>, <code>gpio.BS814_DAT</code>, <code>gpio.WIEGAND_D0</code>, <code>gpio.WIEGAND_D1</code>, <code>gpio.NEOPOOL_TX</code>, <code>gpio.NEOPOOL_RX</code>, <code>gpio.SDM72_TX</code>, <code>gpio.SDM72_RX</code>, <code>gpio.TM1637CLK</code>, <code>gpio.TM1637DIO</code>, <code>gpio.PROJECTOR_CTRL_TX</code>, <code>gpio.PROJECTOR_CTRL_RX</code>, <code>gpio.SSD1351_DC</code>, <code>gpio.XPT2046_CS</code>, <code>gpio.CSE7761_TX</code>, <code>gpio.CSE7761_RX</code>, <code>gpio.VL53LXX_XSHUT1</code>, <code>gpio.MAX7219CLK</code>, <code>gpio.MAX7219DIN</code>, <code>gpio.MAX7219CS</code>, <code>gpio.TFMINIPLUS_TX</code>, <code>gpio.TFMINIPLUS_RX</code>, <code>gpio.ZEROCROSS</code>, <code>gpio.HALLEFFECT</code>, <code>gpio.EPD_DATA</code>, <code>gpio.GPIO_INPUT</code>, <code>gpio.KEY1_PD</code>, <code>gpio.KEY1_INV_PD</code>, <code>gpio.SWT1_PD</code>, <code>gpio.I2S_OUT_DATA</code>, <code>gpio.I2S_OUT_CLK</code>, <code>gpio.I2S_OUT_SLCT</code>, <code>gpio.I2S_IN_DATA</code>, <code>gpio.I2S_IN_CLK</code>, <code>gpio.I2S_IN_SLCT</code>, <code>gpio.INTERRUPT</code>, <code>gpio.MCP2515_CS</code>, <code>gpio.HRG15_TX</code>, <code>gpio.VINDRIKTNING_RX</code>, <code>gpio.BL0939_RX</code>, <code>gpio.BL0942_RX</code>, <code>gpio.HM330X_SET</code>, <code>gpio.HEARTBEAT</code>, <code>gpio.HEARTBEAT_INV</code>, <code>gpio.SHIFT595_SRCLK</code>, <code>gpio.SHIFT595_RCLK</code>, <code>gpio.SHIFT595_OE</code>, <code>gpio.SHIFT595_SER</code>, <code>gpio.SOLAXX1_RTS</code>, <code>gpio.OPTION_E</code>, <code>gpio.SDM230_TX</code>, <code>gpio.SDM230_RX</code>, <code>gpio.ADC_MQ</code>, <code>gpio.CM11_TXD</code>, <code>gpio.CM11_RXD</code>, <code>gpio.BL6523_TX</code>, <code>gpio.BL6523_RX</code>, <code>gpio.ADE7880_IRQ</code>, <code>gpio.RESET</code>, <code>gpio.MS01</code>, <code>gpio.SDIO_CMD</code>, <code>gpio.SDIO_CLK</code>, <code>gpio.SDIO_D0</code>, <code>gpio.SDIO_D1</code>, <code>gpio.SDIO_D2</code>, <code>gpio.SDIO_D3</code>, <code>gpio.FLOWRATEMETER_SIGNAL</code>, <code>gpio.SENSOR_END</code></p> <p>An H-bridge is an electronic circuit that switches the polarity of a voltage applied to a load. These circuits are often used in robotics and other applications to allow DC motors to run forwards or backwards.</p> <p>See the Berry cookbook for H-bridge control</p>"},{"location":"Berry/#dac-gpios","title":"DAC GPIOs","text":"<p>DAC is limited to specific GPIOs:</p> <ul> <li>ESP32: only GPIO 25-26</li> <li>ESP32-S2: only GPIO 17-18</li> <li>ESP32-C3: not supported</li> </ul> <p>Example</p> <p><pre><code>&gt; gpio.pin_mode(25, gpio.DAC)   # sets GPIO25 to a DAC pin\n&gt; gpio.dac_voltage(25, 1250)    # set voltage to 1250mV\n1255\n</code></pre> The function returns the closest voltage found. In this case it's 1255 for setting to 1250.</p>"},{"location":"Berry/#i2s","title":"I2S","text":"<p>DAC can also be used via <code>Esp8266Audio</code> through the ESP32 I2S -&gt; DAC bridge.</p> Example <pre><code>class MP3_Player : Driver\n  var audio_output, audio_mp3, fast_loop_closure\n  def init()\n    self.audio_output = AudioOutputI2S()\n    self.audio_mp3 = AudioGeneratorMP3()\n    self.fast_loop_closure = def () self.fast_loop() end\n    tasmota.add_fast_loop(self.fast_loop_closure)\n  end\n\n  def play(mp3_fname)\n    if self.audio_mp3.isrunning()\n      self.audio_mp3.stop()\n    end\n    var audio_file = AudioFileSourceFS(mp3_fname)\n    self.audio_mp3.begin(audio_file, self.audio_output)\n    self.audio_mp3.loop()    #- start playing now -#\n  end\n\n  def fast_loop()\n    if self.audio_mp3.isrunning()\n      if !self.audio_mp3.loop()\n        self.audio_mp3.stop()\n        tasmota.remove_fast_loop(self.fast_loop_closure)\n      end\n    end\n  end\nend\n\nmp3_player = MP3_Player()\nmp3_player.play(\"/pno-cs.mp3\")\n</code></pre>"},{"location":"Berry/#energy-module","title":"<code>energy</code> module","text":"<p>The <code>energy</code> module provides ways to read current energy counters and values (if you're creating your own automation) or updating the energy counters (if you're writing a driver).</p> <p>It relies on a new Berry feature that provides a direct mapping between the internal <code>C</code> structure called <code>struct Energy</code> and the <code>energy</code> module in Berry.</p> <p>For example, if you want to read or update an energy value:</p> <pre><code>&gt; energy.active_power\n0\n&gt; energy.active_power = 460\n&gt; energy.active_power\n460\n\n# internally it updates the C value `Energy.active_power[0]` (float)\n</code></pre> <p>You don't need to do <code>import energy</code> since Tasmota does it for you at boot.</p> <p>The special <code>energy.read()</code> function dumps all current values to a single <code>map</code>. Be aware that the object is very long. Prefer accessing individual attributes instead.</p> Tasmota Function Parameters and details energy.read() <code>() -&gt; map</code>Returns all current values for the energy module. Some values may be unused by the current driver. energy.driver_enabled() <code>() -&gt; bool</code>Returns <code>true</code> if the Berry virtual driver is active, i.e. <code>OPTION_A 9</code> is configured on a GPIO.See below for Berry Energy driver implementation. <p>List of <code>energy</code> attributes that you can read or write:</p> Attribute Type Description voltage float Voltage (V) for main phase voltage_phases array of float Voltage (V) as an array of phases current float Current (A) for main phase current_phases array of float Current (A) as an array of phases active_power float Active Power (W) for main phase active_power_phases array of float Active Power (W) as an array of phases reactive_power float Reactive Power (W) for main phase reactive_power_phases array of float Reactive Power (W) as an array of phases power_factor float Power Factor (no unit) for main phase power_factor_phases array of float Power Factor (no unit) as an array of phases frequency float Frequency (Hz) for main phase frequency_phases array of float Frequency (Hz) as an array of phases export_active float (kWh) export_active_phases array of float (kWh) start_energy float Total previous energy (kWh) daily float Daily energy (kWh) total float Total energy (kWh) today_delta_kwh uint32 (deca milli Watt hours)5764 = 0.05764 kWh = 0.058 kWh today_offset_kwh uint32 (deca milli Watt hours) today_kwh uint32 (deca milli Watt hours) period uint32 (deca milli Watt hours) fifth_second uint8 command_code uint8 data_valid uint8 <code>0</code> if data is valid for main phase data_valid_phases array of uint8 <code>0</code> if data is valid as an array of phases phase_count uint8 Number of phases (1..8) voltage_common bool Use single voltage frequency_common bool Use single frequency use_overtemp bool Use global temperature as overtemp trigger on internal energy monitor hardware today_offset_init_kwh bool voltage_available bool Enable if voltage is measured current_available bool Enable if current is measured type_dc bool power_on bool power_history_0power_history_1power_history_2 uint16 power_steady_counter uint8 Allow for power on stabilization min_power_flag bool max_power_flag bool min_voltage_flag bool max_voltage_flag bool min_current_flag bool max_current_flag bool mplh_counter uint16 mplw_counter uint16 mplr_counter uint8 max_energy_state uint8"},{"location":"Berry/#energy-driver-in-berry","title":"Energy driver in Berry","text":"<p>Since v14.2.0, it is possible to implement an Energy driver in pure Berry. The Berry driver is enabled when an <code>OPTION_A 9</code> GPIO is configured:</p> <ul> <li>by default, the energy driver has zero consumption.</li> <li>the berry code can is <code>energy.driver_enabled()</code> to check if the virtual Berry Energy driver is active (i.e. <code>OPTION_A 9</code> is configured)</li> <li>the following values need to be configured: <code>energy.phase_count</code> (default <code>1</code>), <code>energy.voltage</code>, <code>energy.current</code>, <code>energy.power_factor</code> (typically <code>1.0</code> or less), <code>energy.frequency</code> (default <code>nan</code>)</li> <li>the most important value is <code>energy.active_power</code> (in Watt) which is added to the daily power consumption</li> </ul> <p>Example test code in <code>autoexec.be</code>:</p> <pre><code>if energy.driver_enabled()\n  energy.phase_count = 1\n  energy.voltage = 240\n  energy.power_factor = 1.0\n  energy.current = 1.5\n  energy.frequency = 50\n  energy.active_power = 360\nend\n</code></pre>"},{"location":"Berry/#wire-object-for-i2c","title":"<code>wire</code> object for I<sup>2</sup>C","text":"<p>Berry Scripting provides 2 objects: <code>wire1</code> and <code>wire2</code> to communicate with both I<sup>2</sup>C buses.</p> <p>Use <code>wire1.scan()</code> and <code>wire2.scan()</code> to scan both buses:</p> <pre><code>&gt; wire1.scan()\n[]\n\n&gt; wire2.scan()\n[140]\n</code></pre> <p>You generally use <code>tasmota.wire_scan()</code> to find a device and the corresponding I<sup>2</sup>C bus.</p> <p>MPU6886 on bus 2</p> <pre><code>&gt; mpuwire = tasmota.wire_scan(0x68, 58)\n&gt; mpuwire\n&lt;instance: Wire()&gt;\n</code></pre> Wire Function Parameters and details bus <code>read only attribute, 1 or 2</code>Bus number for this wire instance. enabled <code>() -&gt; bool</code>Returns <code>true</code> is the I2C bus is initialized (i.e. GPIOs are defined) scan <code>() -&gt; array of int</code>Scan the bus and return all responding addresses. Note: addresses are displayed as decimal ints, not hex. scan <code>() -&gt; array of int</code>Scan the bus and return all responding addresses. Note: addresses are displayed as decimal ints, not hex. detect <code>(addr:int) -&gt; bool</code>Returns <code>true</code> if the device of address <code>addr</code> is connected to this bus. read <code>(addr:int, reg:int, size:int) -&gt; int or nil</code>Read a value of 1..4 bytes from address <code>addr</code> and register <code>reg</code>. Returns <code>nil</code> if no response. write <code>(addr:int, reg:int, val:int, size:int) -&gt; bool</code>Writes a value of 1..4 bytes to address <code>addr</code>, register <code>reg</code> with value <code>val</code>. Returns <code>true</code> if successful, <code>false</code> if not. read_bytes <code>(addr:int, reg:int ,size:int) -&gt; instance of bytes()</code>Reads a sequence of <code>size</code> bytes from address <code>addr</code> register <code>reg</code>. Result is a <code>bytes()</code> instance or <code>bytes()</code> if not successful.` write_bytes <code>(addr:int, reg:int, val:bytes) -&gt; nil</code>Writes the <code>val</code> bytes sequence as <code>bytes()</code> to address <code>addr</code> register <code>reg</code>. <p>Low-level commands if you need finer control:</p> Wire Function Parameters and details _begin_transmission <code>(address:int) -&gt; nil</code> _end_transmission <code>([stop:bool]) -&gt; nil</code>Send stop if <code>stop</code> is <code>true</code>. _request_from <code>(addr:int, size:int [stop:bool = true]) -&gt; nil</code> _available <code>() -&gt; bool</code> _read <code>read() -&gt; int</code>Reads a single byte. _write <code>(value:int or s:string) -&gt; nil</code>Sends either single byte or an arbitrary string."},{"location":"Berry/#path-module","title":"<code>path</code> module","text":"<p>A simplified version of <code>os.path</code> module of standard Berry which is disabled in Tasmota because we don't have a full OS.</p> <p>The default file-system is the ESP32 internal flash. If you have a SD card mounted, it is mapped to the <code>/sd/</code> subdirectory.</p> <p>Example:</p> <pre><code>import path\nprint(path.listdir(\"/sd/\"))\n# outputs a list of filenames at the root dir of the SD card\n</code></pre> Tasmota Function Parameters and details path.exists <code>(file_name:string) -&gt; bool</code>Returns <code>true</code> if the file exists. You don't need to prefix with <code>/</code>, as it will automatically be added if the file does not start with <code>/</code> path.last_modified <code>(file_name:string) -&gt; int</code>Returns the timestamp when the file was last modified, or <code>nil</code> if the file does not exist. You don't need to prefix with <code>/</code>, as it will automatically be added if the file does not start with <code>/</code> path.listdir <code>(dir_name:string) -&gt; list(string)</code>List a directory, typically root dir <code>\"/\"</code> and returns a list of filenames in the directory. Returns an empty list if the directory is invalid path.remove <code>(file_name:string) -&gt; bool</code>Deletes a file by name, return <code>true</code> if successfulA folder needs to be empty or a <code>false</code> is returned. path.format <code>(true:bool) -&gt; bool</code>Re-formats the LittleFS filesystem (internal ESP32 flash) and erases all content. The parameter needs to be true as to avoid unwanted calls. Returns true if reformatting was successful.This is sometimes useful when the file-system becomes unstable or corrupt after multiple re-partitionings. path.mkdir <code>(dir_name:string) -&gt; bool</code>Creates a directory, return <code>true</code> if successful path.rmdir <code>(dir_name:string) -&gt; bool</code>Deletes a directory if empty, return <code>true</code> if successful path.isdir <code>(name:string) -&gt; bool</code>Checks if path name is a directory path.rename <code>(name1:string, name2:string) -&gt; bool</code>Rename file or folder <code>name1</code> into <code>name2</code>, return <code>true</code> if successful"},{"location":"Berry/#persist-module","title":"<code>persist</code> module","text":"<p>Easy way to persist simple values in Berry and read/write any attribute. Values are written in JSON format in <code>_persist.json</code> file. Be aware that <code>persist</code> cannot detect any change in sub-objects like lists or maps; in such case you can call <code>persist.dirty()</code> to indicate that data needs to be saved.</p> <p>Example</p> <pre><code>&gt; import persist    \n&gt; persist.a = 1    \n&gt; persist.b = \"foobar\"    \n&gt; print(persist)    \n&lt;instance: Persist({'a': 1, 'b': 'foobar'})&gt;    \n&gt; persist.save()   # save to _persist.json\n</code></pre> Tasmota Function Parameters and details persist.save <code>()</code> -&gt; niltriggers saving to filesystem. It is called automatically before a restart but you might want to call it yourself to prevent losing data in case of power loss or crash. <code>persist.save()</code> writes to flash, so be careful of not calling it too often, or it will cause wearing of flash and reduce its lifetime.By default <code>persist.save()</code> only saves if data was marked as dirty, or does nothing. You can force an actual save with <code>persist.save(true)</code> persist.has <code>(key:string) -&gt; bool</code>returns true/false if the key exists persist.remove <code>(key:string) -&gt; bool</code>removes a key or ignores if key doesn't exist persist.find <code>(key:string [, \"default value\"]) -&gt; string | bool</code>returns the value for a key, nil or the default value. Similar to <code>map.find</code> persist.member <code>(key:string) -&gt; string | nil</code>returns the value for a key, or nil. persist.setmember <code>(key:string, value:string) -&gt; nil</code>sets the value for a key, when the key is in a variable persist.zero <code>() -&gt; nil</code>clears all entries. This may be destructive to other code using <code>persist</code> persist.dirty <code>() -&gt; nil</code>marks data as dirty to force writing to flash"},{"location":"Berry/#introspect-module","title":"<code>introspect</code> module","text":"<p>Allows to do introspection on instances and modules, to programmatically list attributes, set and get them.</p> <pre><code>&gt; class A var a,b def f() return 1 end end\n&gt; ins=A()\n&gt; ins.a = \"foo\"\n&gt; import introspect\n\n&gt; introspect.members(ins)\n['b', 'a', 'f']\n\n&gt; introspect.get(ins, \"a\")\nfoo\n\n&gt; introspect.set(ins, \"a\", \"bar\")\nbar\n\n&gt; ins.a\nbar\n</code></pre> Tasmota Function Parameters and details introspect.members <code>(nil | instance | module | class) -&gt; list</code>Returns the list of members of the object. If <code>nil</code> is passed, it returns the list of globals (similar to <code>global</code> module). Note: virtual dynamic members are not listed. introspect.get <code>(instance | module, name:string) -&gt; any</code>Returns the member of name <code>name</code> or <code>nil</code> if it does not exist. Note: virtual dynamic members are not yet supported. Note2: classes are not yet supported. introspect.set <code>(instance | module, name:string, value:any) -&gt; any</code>Sets the member of name <code>name</code> to <code>value</code> or ignores the call if the member does not exist. Note: virtual dynamic members are not yet supported. introspect.module <code>(name:string) -&gt; module or nil</code>Loads a module by name or return nil if not found. The import command works only for static predefined names, this addition makes it dynamic. Contrary to import command, this function does not create an entry in the current scope (i.e. does not either create a global variable with the module's name). introspect.toptr <code>(any) -&gt; comptr</code>Converts an <code>int</code> to a <code>comptr</code> pointer. This is sage in Tasmota since pointers and ints are both 32 bits in size.If argument is a general object, this returns a pointer to the object, and can be converted back to the original object with <code>introspect.fromptr</code>. introspect.fromptr <code>(comptr) -&gt; any</code>Converts a <code>comptr</code> pointer to its original object.Warning: this operation is considered dangerous and should be used with extreme care. If the pointer is invalid or the object was garbage collected, Tasmota will crash. introspect.ismethod <code>(function or closure) -&gt; bool</code>Returns <code>true</code> if the function passed as argument is a method of a class, or <code>false</code> if the argument is a simple function or a static method.This is typically used to check callbacks and make sure that you don't pass a method as argument; methods typically need to be wrapped in a closure to capture the target object."},{"location":"Berry/#webclient-class","title":"<code>webclient</code> class","text":"<p>Class <code>webclient</code> provides an implementation of an HTTP/HTTPS web client and make requests on the LAN or over the Internet.</p> <p>Features:</p> <ul> <li>Support HTTP and HTTPS requests to IPv4 addresses and domain names, to arbitrary ports, via a full URL.</li> <li>Support for HTTPS and TLS via BearSSL (which is much lighter than default mbedTLS)</li> <li>HTTPS (TLS) only supports cipher ECDHE_RSA_WITH_AES_128_GCM_SHA256 which is both secure and widely supported</li> <li>Support for URL redirections</li> <li>Ability to set custom User-Agent</li> <li>Ability to set custom headers</li> <li>Ability to set Authentication header</li> <li>Support for Chunked encoding response (so works well with Tasmota devices)</li> <li>Support for <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> methods</li> </ul> <p>The current implementation is based on a fork of Arduino's HttpClient customized to use BearSSL</p> <p>Current limitations (if you need extra features please open a feature request on GitHub):</p> <ul> <li>Payload sent to server (<code>POST</code>) can include either text or binary</li> <li>Only supports text responses (html, json...) but not binary content yet (no NULL char allowed). However you can download binary content to the file-system with <code>write_file</code></li> <li>Maximum response size is 32KB, requests are dropped if larger</li> <li>HTTPS (TLS) is in 'insecure' mode and does not check the server's certificate; it is subject to Man-in-the-Middle attack</li> <li>No support for compressed response - this should not be a problem since the client does not advertise support for compressed responses</li> </ul> <p>Example</p> <pre><code>&gt; cl = webclient()\n&gt; cl.begin(\"http://ota.tasmota.com/tasmota32/release/\")\n&lt;instance: webclient()&gt;\n\n&gt; r = cl.GET()\n&gt; print(r)\n200\n\n&gt; s = cl.get_string()\n&gt; print(s)\n&lt;pre&gt;\n&lt;b&gt;&lt;/b&gt;Alternative firmware for ESP32 based devices with web UI,\n[.../...]\n</code></pre> <p>Example</p> <pre><code>&gt; cl = webclient()\n&gt; cl.begin(\"https://raw.githubusercontent.com/tasmota/autoconf/main/esp32/M5Stack_Fire_autoconf.zip\")\n&lt;instance: webclient()&gt;\n\n&gt; r = cl.GET()\n&gt; print(r)\n200\n\n&gt; cl.write_file(\"M5Stack_Fire_autoconf.zip\")\n950\n</code></pre>"},{"location":"Berry/#managing-redirects","title":"Managing redirects","text":"<p>HTTP redirects (301/302) are not followed by default. You can use <code>wc.set_follow_redirects(true)</code> to have redirects automatically followed for HEAD and GET. There is a default limit of 10 successive redirects, this prevents from infinite loops.</p> <p>For the examples, we use <code>http://ota.tasmota.com/tasmota32</code> which is redirected to <code>http://ota.tasmota.com/tasmota32/</code></p> <p>Example</p> <pre><code>cl = webclient()\ncl.set_follow_redirects(true)\ncl.begin(\"http://ota.tasmota.com/tasmota32\")\nr = cl.GET()\nprint(r)\ns = cl.get_string()\nprint(s)\n</code></pre> <p>Alternatively, you can manage yourself redirects and retrieve the <code>Location</code> header</p> <p>Example</p> <pre><code>cl = webclient()\ncl.set_follow_redirects(false)\ncl.collect_headers(\"Location\")\ncl.begin(\"http://ota.tasmota.com/tasmota32\")\nr = cl.GET()\nprint(r)\nif r == 301 || r == 302\n  print(\"Location:\", cl.get_header(\"Location\"))\nelif r == 200\n  s = cl.get_string()\n  print(s)\nend\ncl.close()\n</code></pre> <p>Main functions:</p> webclient method Parameters and details begin <code>(url:string) -&gt; self</code>Set the complete URL, including protocol (<code>http</code> or <code>https</code>), IPv4 or domain name, port... This should be the first call. The connection is not established at this point.Use <code>url_encode()</code> prior to sending a URL if it requires URL encoding. GET <code>() -&gt; result_code:int</code>Establish a connection to server, send GET request and wait for response header.Returns the HTTP result code or an error code if negative, <code>200</code> means OK. POST <code>(payload:string or bytes) -&gt; result_code:int</code>Establish a connection to server, send POST request with payload and wait for response header.Returns the HTTP result code or an error code if negative, <code>200</code> means OK. PUT <code>(payload:string or bytes) -&gt; result_code:int</code>Establish a connection to server, send PUT request with payload and wait for response header.Returns the HTTP result code or an error code if negative, <code>200</code> means OK. PATCH <code>(payload:string or bytes) -&gt; result_code:int</code>Establish a connection to server, send PATCH request with payload and wait for response header.Returns the HTTP result code or an error code if negative, <code>200</code> means OK. DELETE <code>(payload:string or bytes) -&gt; result_code:int</code>Establish a connection to server, send DELETE request with payload and wait for response header.Returns the HTTP result code or an error code if negative, <code>200</code> means OK. get_size <code>() -&gt; int</code>Once a connection succeeded (GET or POST), reads the size of the response as returned by the server in headers (before actually reading the content). A value <code>-1</code> means that the response size is unknown until you read it. get_string <code>() -&gt; string</code>Once a connection succeeded (GET or POST), reads the content of the response in a string. The response max size is 32KB, any response larger is dropped. Connection is closed and resources are freed after this call completes. close <code>() -&gt; nil</code>Closes the connection and frees buffers. <code>close</code> can be called after <code>GET</code> or <code>POST</code> and is implicitly called by <code>get_string</code>. You don't usually need to use <code>close</code> unless you are only retrieving the result_code for a request and not interested in the content. write_file <code>(file_name:string) -&gt; int</code>Downloads the binary content of the resource and stores it on the filesystem. Returns the number of bytes downloaded or -1 if an error occurred <p>Request customization:</p> webclient method Parameters and details add_header <code>(name:string, value:string [, first:bool=false [, replace:bool=true]]) -&gt; nil</code>Sets an arbitrary header for <code>name</code>:<code>value</code>.<code>first</code> moves the header in the first place, <code>replace</code> replaces a header with the same name or adds one line if false. set_timeouts <code>(req_timeout:int [, tcp_timeout:int]) -&gt; self</code>Sets the request timeout in ms and optionally the TCP connection timeout in ms. set_useragent <code>(useragent:string) -&gt; self</code>Sets the User-Agent header used in request. set_auth <code>(auth:string) or (user:string, password:string) -&gt; self</code>Sets the authentication header, either using pre-encoded string, or standard user/password encoding. set_follow_redirects <code>(bool) -&gt; self</code>Enables or disables redirects following.If <code>false</code>: (<code>HTTPC_DISABLE_FOLLOW_REDIRECTS</code>) no redirection will be followed.If <code>true</code>: (<code>HTTPC_STRICT_FOLLOW_REDIRECTS</code>) strict RFC2616, only requests using GET or HEAD methods will be redirected (using the same method), since the RFC requires end-user confirmation in other cases.There is a default limit of 10 successive redirects, this prevents from infinite loops. collect_headers <code>( [header_name:string]* ) -&gt; self</code>Registers a list of header names that needs to be collected from the response. Pass multiple strings as separate arguments (not as a list). get_header <code>(header_name:string) -&gt; string</code>Returns the header value for a header name (case sensitive). Returns \"\" (empty string) if no header. <p>Static utility methods:</p> webclient static method Parameters and details url_encode <code>(url:string) -&gt; string</code>Encodes a string according to URL escape rules. Use before you use <code>begin()</code>"},{"location":"Berry/#webserver-module","title":"<code>webserver</code> module","text":"<p>Module <code>webserver</code> provides functions to enrich Tasmota's Web UI. It is tightly linked to Tasmota page layout.</p> <p>Functions used to add UI elements like buttons to Tasmota pages, and analyze the current request. See above <code>Driver</code> to add buttons to Tasmota UI.</p> General Function Parameters and details arg_size <code>() -&gt; int</code>Returns the number of arguments in the request arg <code>(arg_name:string or arg_index:int): -&gt; string</code>Returns the value of the argument either by name or by position number [0..arg_size()-1]. If an argument has multiple values, you need to iterate using ints to get all values arg_name <code>(arg_index:int) -&gt; string</code>Returns the name of argument by index [0..arg_size()-1] has_arg <code>(arg_name:string): -&gt; bool</code>Checks if an argument with this name exists check_privileged_access <code>() -&gt; bool</code>Returns <code>true</code> if the page needs privileged access header <code>(name:string) -&gt; string or nil</code>Return the header with key <code>name</code> sent by the browser. The name is case sensitive. Return <code>nil</code> if the header is not present or not collected.Currently only <code>Referer</code>, <code>Host</code>, <code>Authorization</code> and <code>If-None-Match</code>. content_send <code>(string) -&gt; nil</code>Sends the HTML content to the client. Tasmota uses Chunked encoding, which means that the content is regularly sent to the client and not buffered in Tasmota's memory content_button <code>([button:int]) -&gt; nil</code>Displays a standard button by code, using Tasmota localization. Possible values are <code>webserver.BUTTON_CONFIGURATION</code>, <code>webserver.BUTTON_INFORMATION</code>, <code>webserver.BUTTON_MAIN</code>, <code>webserver.BUTTON_MANAGEMENT</code>, <code>webserver.BUTTON_MODULE</code>. Default is <code>webserver.BUTTON_MAIN</code>. html_escape <code>(string) -&gt; string</code>Escapes characters to safe HTML. <p>Low-level functions if you want to display custom pages and content:</p> General Function Parameters and details on <code>(prefix:string, callback:closure [, method:int]) -&gt; nil</code>Attaches a handler (any closure or function) to a prefix. An optional <code>method</code> argument (defaults to <code>webserver.HTTP_ANY</code> specifies the HTTP methods to be received (ANY, GET, POST, OPTIONS, POST)WARNING - this should be called only when receiving <code>web_add_handler</code> event. If called before the WebServer is set up and Wi-Fi on, it will crash. For debug purpose, it can be called later when you are sure that Wi-Fi or Ethernet is up. state <code>() -&gt; int</code>Returns the internal state of Tasmota web server. Possible values are <code>webserver.HTTP_OFF</code>, <code>webserver.HTTP_USER</code>, <code>webserver.HTTP_ADMIN</code>, <code>webserver.HTTP_MANAGER</code>, <code>webserver.HTTP_MANAGER_RESET_ONLY</code>. content_open <code>(http_code:int, mimetype:string) -&gt; nil</code>Sets http code and mime type for the response content_start <code>(string) -&gt; nil</code>Start response page with title content_response <code>(string) -&gt; nil</code>Sends a response to a XMLHttpRequest content_send_style <code>([styles -&gt; string]) -&gt; nil</code>Sends the standard Tasmota styleOptional argument <code>styles</code> to add custom CSS styles to the <code>&lt;head&gt;</code> section content_flush <code>() -&gt; nil</code>Flush the buffer and send any buffered content to the client content_stop <code>() -&gt; nil</code>Produce the standard Tasmota footer and closes the connection content_close <code>() -&gt; nil</code>Closes the connection without adding any more content redirect <code>(string) -&gt; nil</code>Sets location header, and http status 302 <p>Module <code>webserver</code> also defines the following constants:</p> <ul> <li>Tasmota's web server states: <code>webserver.HTTP_OFF</code>, <code>webserver.HTTP_USER</code>, <code>webserver.HTTP_ADMIN</code>, <code>webserver.HTTP_MANAGER</code>, <code>webserver.HTTP_MANAGER_RESET_ONLY</code></li> <li>Tasmota's pages: <code>webserver.BUTTON_CONFIGURATION</code>, <code>webserver.BUTTON_INFORMATION</code>, <code>webserver.BUTTON_MAIN</code>, <code>webserver.BUTTON_MANAGEMENT</code>, <code>webserver.BUTTON_MODULE</code></li> <li>Methods received by handler: <code>webserver.HTTP_ANY</code>, <code>webserver.HTTP_GET</code>, <code>webserver.HTTP_OPTIONS</code>, <code>webserver.HTTP_POST</code></li> </ul> <p>See the Berry Cookbook for examples.</p>"},{"location":"Berry/#tcpclient-class","title":"<code>tcpclient</code> class","text":"<p>Simple TCP client supporting string and binary transfers:</p> <ul> <li>create an instance of the client with <code>var tcp = tcpclient()</code></li> <li>connect to the server <code>tcp.connect(address:string, port:int [, timeout_ms:int]) -&gt; bool</code> Address can be numerical IPv4 or domain name. Returns <code>true</code> if the connection succeeded. Optional <code>timeout</code> in milliseconds. The default timeout is <code>USE_BERRY_WEBCLIENT_TIMEOUT</code> (2 seconds).</li> <li>check if the socket is connected with <code>tcp.connected()</code></li> <li>send content with <code>tcp.write(content:string or bytes) -&gt; int</code>. Accepts either a string or a bytes buffer, returns the number of bytes sent. It's your responsibility to resend the missing bytes</li> <li>check if bytes are available for reading <code>tcp.available() -&gt; int</code>. Returns <code>0</code> if nothing was received. This is the call you should make in loops for polling.</li> <li>read incoming content as string <code>tcp.read() -&gt; string</code> or as bytes <code>tcp.readbytes() -&gt; bytes</code>. It is best to call <code>tcp.available()</code> first to avoid creating empty response objects when not needed</li> <li>close the socket with <code>tcp.close()</code></li> </ul> tcpclient Function Parameters and details connect <code>connect(address:string, port:int [, timeout_ms:int]) -&gt; bool</code>Connect to <code>addr:port</code> with optional timeout in milliseconds (default 2s).Returns <code>true</code> if connection was successful, the call is blocking until the connection succeeded to the timeout expired. connected <code>connected() -&gt; bool</code>Returns <code>true</code> if the connection was successful and is still valid (not dropped by server or closed by client) close <code>close() -&gt; nil</code>Drops the current connection. write <code>write(content:string or bytes) -&gt; int</code>Accepts either a string or a bytes buffer, returns the number of bytes sent. It's you responsibility to resend the missing bytes.Returns <code>0</code> if something went wrong. available <code>available() -&gt; int</code>Returns the number of bytes received in buffer and ready to be read. read <code>read([max_len:int]) -&gt; string</code>Returns all the bytes received in Rx buffer as <code>string</code>.Optional <code>max_len</code> parameter limits the number of characters returned, or read as much as possible by default. readbytes <code>read([max_bytes:int]) -&gt; bytes()</code>Returns all the bytes received in Rx buffer as <code>bytes()</code>.Optional <code>max_bytes</code> parameter limits the number of bytes returned, or read as much as possible by default. <p>Full example:</p> <pre><code>tcp = tcpclient()\ntcp.connect(\"192.168.2.204\", 80)\nprint(\"connected:\", tcp.connected())\ns= \"GET / HTTP/1.0\\r\\n\\r\\n\"\ntcp.write(s)\nprint(\"available1:\", tcp.available())\ntasmota.delay(100)\nprint(\"available1:\", tcp.available())\nr = tcp.read()\ntcp.close()\nprint(r)\n</code></pre>"},{"location":"Berry/#tcpclientasync-class","title":"<code>tcpclientasync</code> class","text":"<p>Variant of <code>tcpclient</code> using only non-blocking calls in full asynchronous mode. This allows to have multiple concurrent connections with fine-grained control over timeouts and no blocking of Tasmota. This is especially useful for Matter Border Router for ESP8266 Tasmota based devices via HTTP.</p> <p>All calls return immediately, so you need to poll the API periodically to send/receive data, and manage timeouts yourself.</p> <p>Typical sequence:</p> <ul> <li>create an instance of the client with <code>var tcp = tcpclientasync()</code></li> <li>connect to the server <code>tcp.connect(address:string, port:int) -&gt; bool</code>. Address should be numerical IPv4 or IPv6 if you want the call to return immediately (i.e. do DNS resolution ahead of time), otherwise a DNS resolution might take some time and fail. If DNS failed, this call returns <code>false</code>.</li> <li>regularly call <code>connected()</code> waiting for <code>true</code> to detect when the connection is established. While <code>connected()</code> returns <code>nil</code> then connection is in-progress. If <code>connected()</code> changes to <code>false</code> then the connection was refused by the host.</li> <li>if the connection is not established after a definite amount of time, you should declare 'timeout' and call <code>close()</code></li> <li>to send data: first call <code>listening()</code> to ensure that the socket is ready to send data. Note: the socket is always listening when the connection was just established. Then call <code>write()</code> to send you data (string or bytes), this call returns the actual amount of data sent; if it is lower than your content, you need to handle yourself re-sending the remaining data. Note: ensuring that you send less than the MTU should keep you from happening (~1430 bytes max).</li> <li>to receive data: first call <code>available()</code> to check if some data is ready to be received. Then call <code>read()</code> or <code>readbytes()</code> to get the buffer as string or bytes. You can limit the amount of data received, but in such case, the extra data is discarded and lost.</li> <li>regularly call <code>connected()</code> to check if the connection is still up</li> <li>finally call <code>close()</code> to close the connection on your side and free resources. It is implicitly called if the connection was closed from the peer.</li> </ul> tcpclient Function Parameters and details connect <code>connect(address:string, port:int) -&gt; bool</code>Initiates a connection to <code>addr:port</code>.If <code>addr</code> is in numerical format, DNS is immediate, and this calls returns immediately.If <code>addr</code> is a domain name, the DNS resolution is made in blocking mode and call returns <code>true</code> if successful, or <code>false</code> if DNS failed.Hence if you want a pure non-blocking mode, you should do the DNS resolution ahead of time. connected <code>connected() -&gt; bool or nil</code>Returns:<code>nil</code> if the connection in still on-going and was not yet established<code>true</code> if the connection is established.<code>false</code> if the connection is down, either because it was refused or closed (if it changed from <code>true</code> to <code>false</code>) listening <code>listening() -&gt; bool</code>Returns <code>true</code> if the socket is ready to send data (hence established and out buffer empty), or <code>false</code> if the out buffer is not empty or the connection is down.You should always wait for <code>listening()</code> to be <code>true</code> before calling <code>write()</code>. available <code>available() -&gt; int</code>Returns the number of bytes received in buffer and ready to be read, or <code>0</code> if nothing to read. close <code>close() -&gt; nil</code>Close the current connection and free the file descriptor. write <code>write(content:string or bytes) -&gt; int</code>Accepts either a string or a bytes buffer, returns the number of bytes sent. It's you responsibility to resend the missing bytes.Returns <code>0</code> if something went wrong. read <code>read([max_len:int]) -&gt; string</code>Returns all the bytes received in Rx buffer as <code>string</code>.Optional <code>max_len</code> parameter limits the number of characters returned, or read as much as possible by default. However in the non-blocking version, limiting receive buffer will truncate (and lose) any extra data. readbytes <code>read([max_bytes:int]) -&gt; bytes()</code>Returns all the bytes received in Rx buffer as <code>bytes()</code>.Optional <code>max_bytes</code> parameter limits the number of bytes returned, or read as much as possible by default.  However in the non-blocking version, limiting receive buffer will truncate (and lose) any extra data. info <code>info() -&gt; map</code>Returns a map with various information about the socket.Example: <code>{'listening': true, 'local_addr': '192.168.1.20', 'available': false, 'fd': 50, 'remote_addr': '192.168.1.54', 'connected': true, 'local_port': 64808, 'remote_port': 53469}</code><code>fd</code>: the file descriptor number used internally<code>connected</code>, <code>listening</code>, <code>available</code>: values of corresponding methods<code>remote_addr</code>, <code>remote_port</code>: remote address used and remote port<code>local_addr</code>, <code>local_port</code>: local address used and local port. <p>Full example:</p> <pre><code>def try_connect(addr, port)\n  import string\n  var tcp = tcpclientasync()\n  var now = tasmota.millis()\n  var r = tcp.connect(addr, port)\n  print(string.format(\"Time=%5i state=%s\", tasmota.millis()-now, str(tcp.connected())))\n  print(tcp.info())\n  tasmota.delay(50)\n  print(string.format(\"Time=%5i state=%s\", tasmota.millis()-now, str(tcp.connected())))\n  print(tcp.info())\n  tasmota.delay(150)\n  print(string.format(\"Time=%5i state=%s\", tasmota.millis()-now, str(tcp.connected())))\n  print(tcp.info())\n  tasmota.delay(500)\n  print(string.format(\"Time=%5i state=%s\", tasmota.millis()-now, str(tcp.connected())))\n  print(tcp.info())\n  return tcp\nend\ntcp = try_connect(\"192.168.1.19\", 80)\n</code></pre>"},{"location":"Berry/#tcpserver-class","title":"<code>tcpserver</code> class","text":"<p>Simple TCP server (socket) listening for incoming connection on any port.</p> <ul> <li>create an instance of the <code>tcpserver</code> on a specific port with <code>s = tcpserver(8888)</code></li> <li>periodically call <code>s.hasclient()</code> to know if a new client has connected</li> <li>if the previous returned <code>true</code>, call <code>var c = s.accept()</code> or <code>var c = s.acceptasync()</code> to accept the connection. It returns an instance of <code>tcpclient</code> or <code>tcpclientasync</code>; it responds to the same APIs as outgoing TCP connection and allows text and binary transfers.</li> <li>you can call <code>c.close()</code> to close the connection, or call <code>c.connected()</code> to know if it's still connected (i.e. the client hasn't closed the connection on their side)</li> <li>close the server with <code>s.close()</code>. This will prevent the server from receiving any new connection, but existing connections are kept alive.</li> </ul> tcpserver Function Parameters and details constructor <code>tcpserver(port:int) -&gt; nit</code>Opens a socket on <code>port</code> and starts listening to new incoming connections. If the server can't open the socket (ex: it is already in use) an exception is raised hasclient <code>hasclient() -&gt; bool</code>Returns <code>true</code> if a new client connected to the socket, in such case you should call <code>accept()</code>. You need to call this method regularly (ex: in event loop or fast_loop) accept <code>accept() -&gt; instance:tcpclient or nil</code>Returns an instance of <code>tcpclient</code> for the new incoming connection, or raise an exception if no connection is available. You should call <code>hasclient()</code> returning <code>true</code> before calling <code>accept()</code>. acceptasync <code>acceptasync() -&gt; instance:tcpclientasync or nil</code>Returns an instance of <code>tcpclientasync</code> for the new incoming connection, or raise an exception if no connection is available. You should call <code>hasclient()</code> returning <code>true</code> before calling <code>acceptasync()</code>. close <code>close() -&gt; nil</code>Closes the server and makes the port available again. <p>Full example: <pre><code>&gt; s = tcpserver(8888)    # listen on port 8888\n&gt; s.hasclient()\nfalse\n\n# in parallel connect on this port with `nc &lt;ip_address&gt; 8888`\n\n&gt; s.hasclient()\ntrue               # we have an incoming connection\n&gt; c = s.accept()\n&gt; c\n&lt;instance: tcpclient()&gt;\n\n# send 'foobar' from the client\n&gt; c.read()\nfoobar\n\n# send 'foobar2' again from the client\n&gt; c.readbytes()\nbytes('666F6F626172320A')\n\n&gt; c.close()\n# this closes the connection\n</code></pre></p>"},{"location":"Berry/#udp-class","title":"<code>udp</code> class","text":"<p>Class <code>udp</code> provides ability to send and received UDP packets, including multicast addresses.</p> <p>You need to create an object of class <code>udp</code>. Such object can send packets and listen to local ports. If you don't specify a local port, the client will take a random source port. Otherwise the local port is used as source port.</p> <p>When creating a local port, you need to use <code>udp-&gt;begin(&lt;ip&gt;, &lt;port)&gt;</code>. If <code>&lt;ip&gt;</code> is empty string <code>\"\"</code> then the port is open on all interfaces (wifi and ethernet).</p> General Function Parameters and details udp() <code>udp() -&gt; &lt;instance udp&gt;</code>Creates an instance of <code>udp</code> class. begin <code>begin(interface:string, port:int) -&gt; bool</code>Create a UDP listener and sender on a specific interface (IP address) or on all interfaces if <code>interface</code> is an empty stringListen on a specific <code>port</code> number, or set <code>0</code> to choose a random free port for sending onlyReturns <code>true</code> if successful. begin_multicast <code>begin(ip:string, port:int) -&gt; bool</code>Create a UDP listener and sender on interface <code>ip</code> and <code>port</code>. <code>ip</code> must be a multicast address.Returns <code>true</code> if successful. close <code>close() -&gt; bil</code>Closes UDP listener and sender, and frees resources. You can't send or receive anymore with this instance. send <code>send(addr:string, port:int, payload:bytes) -&gt; bool</code>Sends a packet to address <code>addr</code>, port <code>port</code> and message as <code>bytes()</code> buffer.Returns <code>true</code> if successful. send_multicast <code>send(payload:bytes) -&gt; bool</code>Sends a payload as <code>bytes()</code> buffer to the multicast address. <code>begin_multicast()</code> must have been previously called.Returns <code>true</code> if successful.You can also send a multicast packet with <code>send</code> if you specify the multicast address and port. read <code>read() -&gt; bytes() or</code>nil<code>&lt;BR&gt;Reads any received udp packet as bytes() buffer, or</code>nil` if no packet was received. remote_ip <code>remote_ip (string or nil)</code>Instance variable containing the remote ip (as string) from the last successful <code>read()</code> command. remote_port <code>remote_port (int or nil)</code>Instance variable containing the remote port (as int) from the last successful <code>read()</code> command."},{"location":"Berry/#sending-udp-packets","title":"Sending udp packets","text":"<pre><code>&gt; u = udp()\n&gt; u.begin(\"\", 2000)    # listen on all interfaces, port 2000\ntrue\n&gt; u.send(\"192.168.1.10\", 2000, bytes(\"414243\"))   # send 'ABC' to 192.168.1.10:2000, source port is 2000\ntrue\n</code></pre>"},{"location":"Berry/#receive-udp-packets","title":"Receive udp packets","text":"<p>You need to do polling on <code>udp-&gt;read()</code>. If no packet was received, the call immediately returns <code>nil</code>.</p> <pre><code>&gt; u = udp()\n&gt; u.begin(\"\", 2000)    # listen on all interfaces, port 2000\ntrue\n&gt; u.read()     # if no packet received, returns `nil`\n&gt;\n\n&gt; u.read()     # if no packet received, returns `nil`\nbytes(\"414243\")    # received packet as `bytes()`\n</code></pre>"},{"location":"Berry/#simple-udp-server-printing-received-packets","title":"Simple UDP server printing received packets","text":"<pre><code>class udp_listener\n  var u\n  def init(ip, port)\n    self.u = udp()\n    print(self.u.begin_multicast(ip, port))\n    tasmota.add_driver(self)\n  end\n  def every_50ms()\n    import string\n    var packet = self.u.read()\n    while packet != nil\n      tasmota.log(string.format(\"&gt;&gt;&gt; Received packet ([%s]:%i): %s\", self.u.remote_ip, self.u.remote_port, packet.tohex()), 2)\n      packet = self.u.read()\n    end\n  end\nend\n\n# listen on port 2000 for all interfaces\n# udp_listener(\"\", 2000)\n</code></pre>"},{"location":"Berry/#send-and-receive-multicast","title":"Send and receive multicast","text":"<p>IPv4 example, using the <code>udp_listener</code> listener above.</p> <p>On receiver side: <pre><code>udp_listener(\"224.3.0.1\", 2000)\n</code></pre></p> <p>On sender side: <pre><code>u = udp()\nu.begin_multicast(\"224.3.0.1\", 2000)\nu.send_multicast(bytes().fromstring(\"hello\"))\n\n# alternatively\nu = udp()\nu.begin(\"\", 0)      # send on all interfaces, choose random port number\nu.send(\"224.3.0.1\", 2000, bytes().fromstring(\"world\"))\n</code></pre></p> <p>The receiver will show: <pre><code>&gt;&gt;&gt; Received packet ([192.168.x.x]:2000): 68656C6C6F\n&gt;&gt;&gt; Received packet ([192.168.x.x]:64882): 776F726C64\n</code></pre></p> <p>This works the same with IPv6 using an address like \"FF35:0040:FD00::AABB\"</p>"},{"location":"Berry/#mdns-module","title":"<code>mdns</code> module","text":"<p>Module <code>import mdns</code> support for mDNS (Multicast DNS, aka Bonjour protocol) announces. This is needed for Matter Wifi support.</p> <p>This feature requires <code>#define USE_DISCOVERY</code> compile option (not included in standard builds).</p> <p>Example (announce of a Matter Wifi device):</p> <pre><code>import mdns\nmdns.start()\nmdns.add_service(\"_matterc\",\"_udp\", 5540, {\"VP\":\"65521+32768\", \"SII\":5000, \"SAI\":300, \"T\":1, \"D\":3840, \"CM\":1, \"PH\":33, \"PI\":\"\"})\n</code></pre> General Function Parameters and details start <code>mdns.start([hostname: string]) -&gt; nil</code>Start or restart mDNS, specify a new hostname if needed or implicitly use <code>tasmota.hostname()</code> if none provided (default) stop <code>mdns.stop() -&gt; nil</code>Free all mDNS resources set_hostname <code>mdsn.set_hostname(hostname:string) -&gt; nil</code>Change the hostname add_service <code>mdns.add_service(service:string, proto:string, port:int, txt:map) -&gt; nil</code>Add a service declaration using the current hostname as instance name, and specify TXT fields as a <code>map</code>"},{"location":"Berry/#addressable-leds-ws2812-sk6812","title":"Addressable LEDs (WS2812, SK6812)","text":"<p>There is native support for addressable LEDs via NeoPixelBus, with support for animations. Currently supported: WS2812, SK6812.</p> <p>Details are in Berry LEDs</p>"},{"location":"Berry/#serial-class","title":"<code>serial</code> class","text":"<p>The <code>serial</code> class provides a low-level interface to hardware UART. The serial GPIOs don't need to be configured in the template.</p> <p>Example</p> <pre><code># gpio_rx:4 gpio_tx:5\nser = serial(4, 5, 9600, serial.SERIAL_7E1)\n\nser.write(bytes(203132))   # send binary 203132\nser.write(bytes().fromstring(\"Hello))   # send string \"Hello\"\n\nmsg = ser.read()   # read bytes from serial as bytes\nprint(msg.asstring())   # print the message as string\n</code></pre> Tasmota Function Parameters and details serial (constructor) <code>serial(gpio_rx:int, gpio_tx:int, baud:int [, mode:int, inverted:bool])</code>Creates a <code>serial</code> object<code>gpio_rx</code> receive GPIO (or -1 if transmit only)<code>gpio_tx</code> transmit GPIO (or -1 if receive only)<code>baud</code> speed, ex: 9600, 115200<code>mode</code> serial message format, default is <code>serial.SERIAL_8N1</code> (8 bits, no parity, 1 stop bit)<code>inverted</code> true if signal is inverted (inactive low), default <code>false</code>Other mode values are described below. config_tx_en <code>config_tx_en(phy_gpio:int) -&gt; nil</code>Configures the Tx EN GPIO, or <code>-1</code> to clear it. Typically used for RS485. write <code>write(val:int || bytes()) -&gt; bytes_sent:int</code>Send either a single byte if argument is int, or send a binary message from a <code>bytes()</code> object.The methods blocks until all messages are sent to the UART hardware buffer; they may not all have been sent over the wire read <code>read( [max_bytes:int] ) -&gt; bytes()</code>Read all bytes received in the incoming buffer. If the buffer is empty, returns an empty <code>bytes()</code> object; in such case you can call <code>available()</code> first to check if the buffer is emptyTakes an optional argument <code>max_bytes</code> to limit the number of bytes returned, remaining bytes are kept in the internal serial buffer. flush <code>flush(void) -&gt; void</code>Flushes all buffers. Waits for all outgoing messages to be sent over the wire and clear the incoming buffer. available <code>available(void) -&gt; int</code>Returns the number of incoming bytes in the incoming buffer, <code>0</code> in none. close <code>close(void) -&gt; nil</code>Closes the serial port and deallocates resources and hardware serial. After this, any call to the serial instance will return <code>nil</code> and will have no effect <p>Supported serial message formats: <code>SERIAL_5N1</code>, <code>SERIAL_6N1</code>, <code>SERIAL_7N1</code>, <code>SERIAL_8N1</code>, <code>SERIAL_5N2</code>, <code>SERIAL_6N2</code>, <code>SERIAL_7N2</code>, <code>SERIAL_8N2</code>, <code>SERIAL_5E1</code>, <code>SERIAL_6E1</code>, <code>SERIAL_7E1</code>, <code>SERIAL_8E1</code>, <code>SERIAL_5E2</code>, <code>SERIAL_6E2</code>, <code>SERIAL_7E2</code>, <code>SERIAL_8E2</code>, <code>SERIAL_5O1</code>, <code>SERIAL_6O1</code>, <code>SERIAL_7O1</code>, <code>SERIAL_8O1</code>, <code>SERIAL_5O2</code>, <code>SERIAL_6O2</code>, <code>SERIAL_7O2</code>, <code>SERIAL_8O2</code></p>"},{"location":"Berry/#display-module","title":"<code>display</code> module","text":"<p>The <code>display</code> module provides a simple API to initialize the Universal Display Driver with data provided as a string. It is used by <code>autoconf</code> mechanism.</p> Tasmota Function Parameters and details start <code>display.start(displayini:string) -&gt; nil</code>Initializes the Universal Display Driver with the string provided as argument, similar to content in <code>display.ini</code>. It is typically read from a file in the file-system. started <code>display.started() -&gt; bool</code>Returns <code>true</code> if display is already initialized, <code>false</code> if not started. dimmer <code>display.dimmer([dim:int]) -&gt; int</code>Sets the dimmer of display, value 0..100. If <code>0</code> then turn off display. If no arg, read the current value. driver_name <code>display.driver_name() -&gt; string</code>Returns the Display driver name as specified in <code>display.ini</code> touch_update <code>display.touch_update(touches:int, raw_x:int, raw_y:int, gesture:int) -&gt; nil</code>Sets the last Touch Screen update values to be passed to LVGL. This allows an external touchscreen driver to periodically update the touch information.<code>touches</code>: number of touches (<code>0</code> = no touch, <code>1</code> = screen touched). Multiple touch is not supported<code>raw_x</code> and <code>raw_y</code> = coordinates before conversion (resistive touch screens need conversion)<code>gesture</code>: type of gesture. <code>0</code> = no gesture, <code>16</code> = move up, <code>17</code> = move down, <code>18</code> = move left, <code>19</code> = move right, <code>32</code> = zoom in, <code>33</code> = zoom out."},{"location":"Berry/#uuid-module","title":"<code>uuid</code> module","text":"<p>The <code>uuid</code> module allows to generate uuid4 random ids.</p> <pre><code>&gt; import uuid\n&gt; uuid.uuid4()\n1a8b7f78-59d8-4868-96a7-b7ff3477d43f\n</code></pre> Tasmota Function Parameters and details uuid4 <code>uuid.uuid4() -&gt; string</code>Generates a uuid4 random id as string."},{"location":"Berry/#crc-module","title":"<code>crc</code> module","text":"<p>The <code>crc</code> module allows to compute crc32/16/8 from bytes() arrays.</p> <pre><code>&gt; import crc\n&gt; crc.crc32(0xFFFFFFFF, bytes(\"AABBCC\"))\n-1091314015\n&gt; crc.crc16(0xFFFF, bytes(\"AABBCC\"))\n20980\n&gt; crc.crc8(0xFF, bytes(\"AABBCC\"))\n139\n</code></pre> Tasmota Function Parameters and details crc32 <code>crc.crc32(crc:int, payload:bytes) -&gt; int</code>Compute crc32 from an initial value and a bytes() buffer crc16 <code>crc.crc16(crc:int, payload:bytes) -&gt; int</code>Compute crc16 from an initial value and a bytes() buffer crc8 <code>crc.crc8(crc:int, payload:bytes) -&gt; int</code>Compute crc8 from an initial value and a bytes() buffer"},{"location":"Berry/#tasmota_log_reader-class","title":"<code>tasmota_log_reader</code> class","text":"<p>The <code>tasmota_log_reader</code> class allows you to read and potentially parse the Tasmota logs. It keeps track of what logs were already read in the past and feeds you with new log lines if some are available. It is for example used by the LVGL <code>tasmota_log</code> widget to display logs on a display.</p> <p>Note: calling <code>tasmota_log_reader</code> can be expensive in string allocations, and adds pressure on the garbage collector. Use wisely.</p> <p>Example:</p> <pre><code>var lr = tasmota_log_reader()\n\n# do this regularly\nvar ret = lr.get_log(2)    # read at log level 2\nif ret != nil\n  var lines = r.split('\\n')  # extract as a list of lines\n  # do whatever you need\nend\n</code></pre> Tasmota Function Parameters and details tasmota_log_reader() <code>tasmota_log_reader(void) -&gt; instance(tasmota_log_reader)</code>Instantiate a new <code>tasmota_log_reader</code>. Multiple readers can coexist and they each keep track of already read log lines get_log <code>get_log(log_level:int) -&gt; string or nil</code>Returns new log lines as a big string object. Lines are separated by <code>\\n</code>. Returns <code>nil</code> if no new logs are available.<code>log_level</code> can be <code>0..4</code> and specifies the highest log level that we be reported (it is usually wise to start with <code>2</code>). Higher log level will be reported only if they are recorded, i.e. there is at least one logger that asks for it. This class does not cause log-level 4 to be recorded if none other loggers are recording them (<code>weblog</code>, <code>mqttlog</code> or <code>seriallog</code>)."},{"location":"Berry/#ulp-module","title":"<code>ULP</code> module","text":"<p>The <code>ULP</code> module exposes the third computing unit of the ESP32, which is a simple finite state machine (FSM) that is designed to perform measurements using the ADC, temperature sensor and even external I2C sensors. This small ultra low power coprocessor can run in parallel to the main cores and in deep sleep mode, where it is capable to wake up the system, i.e. in reaction to sensor measurements. The binding to Berry consists of some lightweight wrapper functions and the communication with the main cores works by accessing the RTC_SLOW_MEM from both sides, which is the same way as in any other ESP32 ULP project.</p> <pre><code># simple LED blink example\nimport ULP\nULP.wake_period(0,500000) # off time\nULP.wake_period(1,200000) # on time \nc = bytes(\"756c70000c006c00000000001000008000000000000000000000000010008072010000d0e5af2c72340040802705cc190005681d10008072e1af8c720100006821008072040000d0120080720800207004000068010005825c0000800405681d00000092680000800505681d0100009268000080000000b0\")\nULP.load(c)\nULP.run()\n</code></pre> Tasmota Function Parameters and details run <code>ULP.run() -&gt; nil</code>Execute ULP program load <code>ULP.load(code:bytes) -&gt; nil</code>Load ULP code from a bytes() buffer into memory set_mem <code>ULP.set_mem(addr:int, value:int) -&gt; nil</code>Set memory position in RTC_SLOW_MEM to value. Address and Value are 32-bit!! get_mem <code>ULP.set_mem(addr:int) -&gt; int16_t</code>Get value from memory position in RTC_SLOW_MEM. By hardware design only the lower 16-bit are usable, so this function already masks out the upper 16-bit gpio_init  <code>ULP.gpio_init(pin:int, mode:int) -&gt; pin:int</code>Makes a valid GPIO pin accessible to the ULP and sets the mode according to the enum 'rtc_gpio_mode_t', returns the same pin, but translated to the RTC system, which is the numbering scheme in the assembly code adc_config  <code>ULP.adc_config(channel:int, attenuation:int, width:int) -&gt; nil</code>Configures ADC pin usage for the ULP according to the enums ' adc1_channel_t', 'adc_atten_t' and 'adc_bits_width_t' wake_period  <code>ULP.wake_period(register:int, time:int) -&gt; nil</code>Configures one of 5 (0..4) wake timer registers with the time value in microseconds sleep  <code>ULP.wake_period([time:int]) -&gt; nil</code>Starts deep sleep mode and allow wake up by the ULP, with an optional time value in seconds an additional wake up timer gets started <p>More information (including suggestions for a toolchain) on the ULP page.</p>"},{"location":"Berry/#re-regex-module","title":"<code>re</code> regex module","text":"<p>Use with <code>import re</code>.</p> <p>There are two ways to use regex, first is to call directly the module which triggers a compilation of the regex at each call. The second one is to pre-compile the regex once into an object which is much more efficient if you need to use the regex multiple times. Any error in the compilation of the regex pattern yields an exception.</p> <pre><code>&gt; import re\n\n# first series are all-in-one, patterns are compiled on the fly\n\n# Returns the list of matches, or empty list of no match\n&gt; re.search(\"a.*?b(z+)\", \"zaaaabbbccbbzzzee\")\n['aaaabbbccbbzzz', 'zzz']\n\n# Returns the list of list of matches\n&gt; re.searchall('&lt;([a-zA-Z]+)&gt;', '&lt;abc&gt; yeah &lt;xyz&gt;')\n[['&lt;abc&gt;', 'abc'], ['&lt;xyz&gt;', 'xyz']]\n\n# Returns the list of matches, or empty list of no match; must match from the beginning of the string.\n&gt; re.match(\"a.*?b(z+)\", \"aaaabbbccbbzzzee\")\n['aaaabbbccbbzzz', 'zzz']\n\n# Returns the number of chars matched instead of the entire match (saves memory)\n&gt; re.match2(\"a.*?b(z+)\", \"aaaabbbccbbzzzee\")\n[14, 'zzz']\n\n# Returns the list of matches, or empty list of no match; there should not be any gaps between matches.\n&gt; re.matchall('&lt;([a-zA-Z]+)&gt;', '&lt;abc&gt; yeah &lt;xyz&gt;')\n[['&lt;abc&gt;', 'abc']])\n&gt; re.matchall('&lt;([a-zA-Z]+)&gt;', '&lt;abc&gt;&lt;xyz&gt;')\n[['&lt;abc&gt;', 'abc'], ['&lt;xyz&gt;', 'xyz']]\n\n# Returns the list of strings from split\n&gt; re.split('/', \"foo/bar//baz\")\n['foo', 'bar', '', 'baz']\n\n# below are pre-compiled patterns, which is much faster if you use the\n# pattern multiple times\n#\n# the compiled pattern is a `bytes()` object that can be used\n# as a replacement for the pattern string\n&gt; rb = re.compilebytes('&lt;([a-zA-Z]+)&gt;')\n# rb is compiled to bytes('1A0000000C0000000100000062030260FB7E00013C7E020302617A415A62F87E03013E7E017F')\n\n&gt; re.searchall(rb, '&lt;abc&gt; yeah &lt;xyz&gt;')\n[['&lt;abc&gt;', 'abc'], ['&lt;xyz&gt;', 'xyz']]\n\n&gt; rb = re.compilebytes(\"/\")\n&gt; rb\nbytes('0C000000070000000000000062030260FB7E00012F7E017F')\n\n&gt; re.split(rb, \"foo/bar//baz\")\n['foo', 'bar', '', 'baz']\n&gt; re.split(rb, \"/b\")\n['', 'b']\n</code></pre> Tasmota Function Parameters and details search <code>re.search(pattern:string or bytes, payload:string [, offset:int]) -&gt; list of strings</code>Returns the list of matches, or empty list of no match match <code>re.match(pattern:string or bytes, payload:string [, offset:int]) -&gt; list of strings</code>Returns the list of matches, or empty list of no match. The difference with <code>search</code> is that match must match from the beginning of the string.Takes an optional second argument offset which indicates at which character to start the in the payload (default 0). match2 <code>re.match2(pattern:string or bytes, payload:string [, offset:int]) -&gt; list of strings</code>Returns the list of matches, or empty list of no match. The difference with <code>match</code> is that the first element contains the number of matched characters instead of the matched string, which saves memory for large matches.Takes an optional second argument offset which indicates at which character to start the in the payload (default 0). searchall <code>re.searchall(pattern:string or bytes, payload:string [, limit:string]) -&gt; list of list of strings</code>Returns the list of list of matches, or empty list of no match. <code>limit</code> allows to limit the number of matches. matchall <code>re.matchall(pattern:string or bytes, payload:string [, limit:string]) -&gt; list of list of strings</code>Returns the list of matches, or empty list of no match. The difference with <code>searchall</code> is that there should not be any gaps between matches.  <code>limit</code> allows to limit the number of matches. split <code>re.search(pattern:string or bytes, payload:string) -&gt; list of strings</code>Returns the list of strings from split, or a list with a single element containing the entire string if no match compilebytes <code>re.compilebytes(pattern:string) -&gt; instance of bytes()</code>Compiles the regex into a reusable faster bytecode. You can then use the <code>bytes()</code> compiled pattern as a replacement for the patter string compile Deprecated, use <code>compilebytes</code> instead.<code>re.compile(pattern:string) -&gt; instance of &lt;re_pattern&gt;</code>Compiles the regex into a reusable faster bytecode. You can then call the following methods:<code>search()</code>, <code>match()</code>, <code>split()</code> similarly to the module's functions. dump <code>re.dump(pattern:bytes) -&gt; nil</code>Prints to the console a dump of the compiled pattern.Only if compiled with <code>#define USE_BERRY_DEBUG</code> and only for curiosity/debugging purpose. <p>Note: for <code>match</code> and <code>search</code>, the first element in the list contains the global match of the pattern. Additional elements correspond to the sub-groups (in parenthesis).</p> <p>The regex engine is based on re1.5 also used in MicroPython.</p>"},{"location":"Berry/#crypto-module","title":"<code>crypto</code> module","text":"<p>Module <code>import crypto</code> support for common cryptographic algorithms.</p> <p>Currently supported algorithms:</p> <ul> <li>AES CTR 256 bits - requires <code>#define USE_BERRY_CRYPTO_AES_CTR</code></li> <li>AES GCM 256 bits</li> <li>AES CCM 128 or 256 bits</li> <li>AES CBC 128 bits</li> <li>Elliptic Curve C25519 - requires <code>#define USE_BERRY_CRYPTO_EC_C25519</code></li> <li>Elliptic Curve P256 (secp256r1) - requires <code>#define USE_BERRY_CRYPTO_EC_P256</code></li> <li>HKDF key derivation with HMAC SHA256 - requires <code>#define USE_BERRY_CRYPTO_HKDF_SHA256</code></li> <li>HMAC SHA256</li> <li>MD5</li> <li>PKKDF2 with HMAC SHA256 key derivation - requires <code>#define USE_BERRY_CRYPTO_PBKDF2_HMAC_SHA256</code></li> <li>SHA256</li> <li>JWT RS256 (RSASSA-PKCS1-v1_5 with SHA256) - requires <code>#define USE_BERRY_CRYPTO_RSA</code></li> </ul>"},{"location":"Berry/#cryptoaes_ctr-class","title":"<code>crypto.AES_CTR</code> class","text":"<p>Encrypt and decrypt, using AES CTR (Counter mode) with 256 bits keys.</p> General Function Parameters and details init <code>AES_CTR.init(secret_key:bytes(32)) -&gt; instance</code>Initialize AES CTR instance with <code>secret_key</code> (256 bits) and <code>iv</code> (initialization vector or nonce, 96 bits) encrypt <code>encrypt(ciphertext:bytes, iv:bytes(12), cc:int) -&gt; bytes</code>Encrypt the ciphertext. The <code>iv</code> (Initialization Vector) must be 12 bytes, it can be the concatenation of 4 bytes Nonce and 8 bytes iv. <code>cc</code> is the counter (4 bytes) incremented for each block of 16 bytes.Note: the last counter value is not returned, so it is advised to encrypt all data at once. decrypt <code>decrypt(ciphertext:bytes, iv:bytes(12), cc:int) -&gt; bytes</code>Identical to <code>encrypt</code> above. <p>Test vectors from https://datatracker.ietf.org/doc/html/rfc4231</p> <pre><code># Test case from https://www.ietf.org/rfc/rfc3686.txt\nimport crypto\nkey = bytes(\"F6D66D6BD52D59BB0796365879EFF886C66DD51A5B6A99744B50590C87A23884\")\niv = bytes(\"00FAAC24C1585EF15A43D875\")\ncc = 0x000001\naes = crypto.AES_CTR(key)\nplain = bytes(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\")\ncipher = aes.encrypt(plain, iv, cc)\nassert(cipher == bytes(\"F05E231B3894612C49EE000B804EB2A9B8306B508F839D6A5530831D9344AF1C\"))\nplain2 = aes.decrypt(cipher, iv, cc)\nassert(plain == plain2)\n</code></pre>"},{"location":"Berry/#cryptoaes_gcm-class","title":"<code>crypto.AES_GCM</code> class","text":"<p>Encrypt, decrypt and verify, using AES GCM (Galois Counter Mode) with 256 bits keys.</p> General Function Parameters and details init <code>AES_GCM.init(secret_key:bytes(32), iv:bytes(12)) -&gt; instance</code>Initialize AES GCM instance with <code>secret_key</code> (256 bits) and <code>iv</code> (initialization vector or nonce, 96 bits) encrypt <code>encrypt(ciphertext:bytes) -&gt; bytes</code>Encrypt the ciphertext. Can be called multiple times, the tag is updated accordingly decrypt <code>decrypt(ciphertext:bytes) -&gt; bytes</code>Decrypt the ciphertext. Can be called multiple times, the tag is updated accordingly tag <code>tag() -&gt; bytes</code>Compute the verification tag for the object encrypted or decrypted (128 bits). <p>Example taken from https://wizardforcel.gitbooks.io/practical-cryptography-for-developers-book/content/symmetric-key-ciphers/aes-encrypt-decrypt-examples.html</p> <pre><code>import crypto\n\nkey = bytes('233f8ce4ac6aa125927ccd98af5750d08c9c61d98a3f5d43cbf096b4caaebe80')\nciphertext = bytes('1334cd5d487f7f47924187c94424a2079656838e063e5521e7779e441aa513de268550a89917fbfb0492fc')\niv = bytes('2f3849399c60cb04b923bd33265b81c7')\nauthTag = bytes('af453a410d142bc6f926c0f3bc776390')\n\n# decrypt ciphertext with key and iv\naes = crypto.AES_GCM(key, iv)\nplaintext = aes.decrypt(ciphertext)\nprint(plaintext.asstring())\n# 'Message for AES-256-GCM + Scrypt encryption'\n\ntag = aes.tag()\nprint(tag == authTag)\n# true\n</code></pre>"},{"location":"Berry/#cryptoaes_ccm-class","title":"<code>crypto.AES_CCM</code> class","text":"<p>Encrypt and decrypt, using AES CCM with 256 bits keys.</p> General Function Parameters and details init <code>AES_CCM.init(secret_key:bytes(16 or 32), iv:bytes(7..13), aad:bytes(), data_len:int, tag_len:int) -&gt; instance</code>Initialize AES CCM instance with <code>secret_key</code> (128 or 256 bits), <code>iv</code> (initialization vector or nonce, 56 to 104 bits), <code>aad</code> is the associated data, <code>data_len</code> is the size of the payload that you need to announce in advance, <code>tag_len</code> is the length in bytes of the tag (normally 16). encrypt <code>encrypt(ciphertext:bytes) -&gt; bytes</code>Encrypt the ciphertext. decrypt <code>decrypt(ciphertext:bytes) -&gt; bytes</code>Identical to <code>encrypt</code> above. tag <code>tag() -&gt; bytes</code>Returns the tag or MIC. decrypt1 <code>AES_CCM.decrypt1(secret_key:bytes(16 or 32), iv:bytes(), iv_start:int, iv_len:int (7..13), aad:bytes(), aad_start:int, aad_len:int, data:bytes(), data_start:int, data_len:int, tag:bytes(), tag_start:int, tag_len:int (4..16)) -&gt; bool (true if tag matches)</code>Decrypt in a single call, avoiding any object allocation encrypt1 <code>AES_CCM.encrypt1(secret_key:bytes(16 or 32), iv:bytes(), iv_start:int, iv_len:int (7..13), aad:bytes(), aad_start:int, aad_len:int, data:bytes(), data_start:int, data_len:int, tag:bytes(), tag_start:int, tag_len:int (4..16)) -&gt; bool (always true)</code>Decrypt in a single call, avoiding any object allocation. Data is encrypted in-place and Tag is changed in the buffer. <p>Example from Matter:</p> <pre><code># raw_in is the received frame\nraw_in = bytes(\"00A0DE009A5E3D0F3E85246C0EB1AA630A99042B82EC903483E26A4148C8AC909B12EF8CDB6B144493ABD6278EDBA8859C9B2C\")\n\npayload_idx = 8     # unencrypted header is 8 bytes\ntag_len = 16        # MIC is 16 bytes\n\np = raw[payload_idx .. -tag_len - 1]   # payload\nmic = raw[-tag_len .. ]                # MIC\na = raw[0 .. payload_idx - 1]          # AAD\n\ni2r = bytes(\"92027B9F0DBC82491D4C3B3AFA5F2DEB\")   # key\n# p   = bytes(\"3E85246C0EB1AA630A99042B82EC903483E26A4148C8AC909B12EF\")\n# a     = bytes(\"00A0DE009A5E3D0F\")\nn   = bytes(\"009A5E3D0F0000000000000000\")         # nonce / IV\n# mic = bytes(\"8CDB6B144493ABD6278EDBA8859C9B2C\")\n\n# expected cleartext\nclr = bytes(\"05024FF601001536001724020024031D2404031818290324FF0118\")\n\n# method 1 - with distinct calls\nimport crypto\naes = crypto.AES_CCM(i2r, n, a, size(p), 16)\ncleartext = aes.decrypt(p)\ntag = aes.tag()\n\nassert(cleartext == clr)\nassert(tag == mic)\n\n# method 2 - single call\nraw = raw_in.copy()      # copy first if we want to keep the encrypted version\nvar ret = crypto.AES_CCM.decrypt1(i2r, n, 0, size(n), raw, 0, payload_idx, raw, payload_idx, size(raw) - payload_idx - tag_len, raw, size(raw) - tag_len, tag_len)\n\nassert(ret)\nassert(raw[payload_idx .. -tag_len - 1] == clr)\n</code></pre>"},{"location":"Berry/#cryptoaes_cbc-class","title":"<code>crypto.AES_CBC</code> class","text":"<p>Encrypt and decrypt, using AES CBC with 128 bits keys.</p> General Function Parameters and details decrypt1 <code>AES_CBC.decrypt1(secret_key:bytes(16), iv:bytes(16), data:bytes(n*16)) -&gt; bool (always true)</code>Decrypt in a single call in-place, avoiding any object allocation encrypt1 <code>AES_CBC.encrypt1(secret_key:bytes(16), iv:bytes(16), data:bytes(n*16)) -&gt; bool (always true)</code>Decrypt in a single call, avoiding any object allocation. Data is encrypted in-place and IV is changed in the buffer too. <p>Example:</p> <pre><code>var b = bytes().fromstring(\"hello world_____\") # 16-byte aligned\nvar key = bytes().fromstring(\"1122334455667788\") # 16 bytes\nvar iv = bytes().fromstring(\"8877665544332211\") # 16 bytes\n\nprint(\"data:\",b.asstring()) # \"hello world_____\"\nimport crypto\naes = crypto.AES_CBC()\naes.encrypt1(key, iv, b)\nprint(\"cipher:\",b)\niv = bytes().fromstring(\"8877665544332211\")\naes.decrypt1(key, iv, b)\nprint(\"decrypted data:\",b.asstring()) # \"hello world_____\"\n</code></pre>"},{"location":"Berry/#cryptoec_c25519-class","title":"<code>crypto.EC_C25519</code> class","text":"<p>Provides Elliptic Curve C25519 Diffie-Hellman key agreement. Requires <code>#define USE_BERRY_CRYPTO_EC_C25519</code></p> General Function Parameters and details public_key <code>crypto.EC_C25519().public_key(secret_key:bytes(32)) -&gt; bytes(32)</code>Computes the public key given a random private key. shared_key <code>crypto.EC_C25519().shared_key(our_private_key:bytes(32), their_public_key:bytes(32)) -&gt; bytes(32)</code>Compute a shared key (Diffie-Hellman) using our private key and the other party's public key. The other party will compute the same shared key using their private key and our pubic key. <p>Example from test vectors https://www.rfc-editor.org/rfc/rfc7748:</p> <pre><code>import crypto\n\n# alice side\nalice_priv_key = bytes(\"77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a\")\nalice_pub_key = bytes(\"8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a\")\nassert(crypto.EC_C25519().public_key(alice_priv_key) == alice_pub_key)\n\n# bob side\nbob_priv_key = bytes(\"5dab087e624a8a4b79e17f8b83800ee66f3bb1292618b6fd1c2f8b27ff88e0eb\")\nbob_pub_key = bytes(\"de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f\")\nassert(crypto.EC_C25519().public_key(bob_priv_key) == bob_pub_key)\n\n# shared key computed by alice\nref_shared_key = bytes(\"4a5d9d5ba4ce2de1728e3bf480350f25e07e21c947d19e3376f09b3c1e161742\")\nalice_shared_key = crypto.EC_C25519().shared_key(alice_priv_key, bob_pub_key)\nbob_shared_key = crypto.EC_C25519().shared_key(bob_priv_key, alice_pub_key)\nassert(alice_shared_key == ref_shared_key)\nassert(bob_shared_key == ref_shared_key)\n</code></pre>"},{"location":"Berry/#cryptoec_p256-class","title":"<code>crypto.EC_P256</code> class","text":"<p>Provides Elliptic Curve Prime256 (secp256r1) Diffie-Hellman key agreement and various functions on P256 curve. Requires <code>#define USE_BERRY_CRYPTO_EC_P256</code></p> General Function Parameters and details public_key <code>crypto.EC_P256().public_key(secret_key:bytes(32)) -&gt; bytes(65)</code>Computes the public key given a random private key. The result is uncompressed point coordinates starting with 0x04 (65 bytes in total) shared_key <code>crypto.EC_P256().shared_key(our_private_key:bytes(32), their_public_key:bytes(65)) -&gt; bytes(32)</code>Compute a shared key (Diffie-Hellman) using our private key and the other party's public key. The other party will compute the same shared key using their private key and our pubic key.The result is actually the X coordinate of the multiplication of the points coordinates of the public key, and a large number (private key) Specific Functions Parameters and details mod <code>crypto.EC_P256().mod(data:bytes()) -&gt; bytes(32)</code>Computes the modulus of an arbitrary large number. The modulus is done towards the order of the curve. neg <code>crypto.EC_P256().neg(data:bytes(32)) -&gt; bytes(32)</code><code>-x mod p</code> or <code>p - x</code> if <code>x</code> is lower than <code>p</code>Computes the opposite (negate) of a number modulus the order of the curve (it's actually modulus - data). mul <code>crypto.EC_P256().mul(x:bytes(), A:bytes(65)) -&gt; bytes(65)</code><code>x * A</code>Computes multiplication of a number and a point on the curve.<code>x</code> needs to be smaller than <code>p</code>, use <code>mod()</code> if not sureThe function checks that the point <code>A</code> is on the curve, or raises an error muladd <code>crypto.EC_P256().muladd(x:bytes(), A:bytes(65), y:bytes(), B:bytes(65)) -&gt; bytes(65)</code><code>x * A + y * B</code><code>x</code> and <code>y</code> need to be smaller than <code>p</code>, use <code>mod()</code> if not sureThe function checks that the points <code>A</code> and <code>B</code> are on the curve, or raises an errorIf <code>B</code> is empty <code>bytes()</code>, the Generator <code>P</code> of the curve is used instead. <p>Example:</p> <pre><code>import crypto\npriv = bytes(\"f502fb911d746b77f4438c674e1c43650b68285dfcc0583c49cd6ed88f0fbb58\")\np = crypto.EC_P256()\npub = p.public_key(priv)\nassert(pub == bytes(\"04F94C20D682DA29B7E99985D8DBA6ABEA9051D16508742899835098B1113D3D749466644C47B559DB184556C1733C33E5788AE250B8FB45F29D4CF48FF752C1ED\"))\n\nimport crypto\npriv = bytes(\"4E832960415F2B5FA2B1FDA75C1A8F3C84BAEB189EDC47211EF6D27A21FC0ED8\")\np = crypto.EC_P256()\npub = p.public_key(priv)\nassert(pub == bytes(\"042166AE4F89981472B7589B8D79B8F1244E2EEE6E0A737FFBFED2981DA3E193D6643317E054D2A924F2F56F1BF4BECA13192B27D8566AF379FBBF8615A223D899\"))\nprint(\"x=\",pub[1..32])\nprint(\"y=\",pub[33..65])\n\nimport crypto\np = crypto.EC_P256()\npriv_A = bytes(\"f502fb911d746b77f4438c674e1c43650b68285dfcc0583c49cd6ed88f0fbb58\")\npub_A = bytes(\"04F94C20D682DA29B7E99985D8DBA6ABEA9051D16508742899835098B1113D3D749466644C47B559DB184556C1733C33E5788AE250B8FB45F29D4CF48FF752C1ED\")\npriv_B = bytes(\"4E832960415F2B5FA2B1FDA75C1A8F3C84BAEB189EDC47211EF6D27A21FC0ED8\")\npub_B = bytes(\"042166AE4F89981472B7589B8D79B8F1244E2EEE6E0A737FFBFED2981DA3E193D6643317E054D2A924F2F56F1BF4BECA13192B27D8566AF379FBBF8615A223D899\")\n\nshared_1 = p.shared_key(priv_A, pub_B)\nshared_2 = p.shared_key(priv_B, pub_A)\nassert(shared_1 == shared_2)\n</code></pre>"},{"location":"Berry/#cryptohkdf_sha256-class","title":"<code>crypto.HKDF_SHA256</code> class","text":"<p>Provides HKDF using HMAC SHA256 key derivation. Turns 'ikm' (input keying material) of low entropy and creates a pseudo random key. Requires <code>#define USE_BERRY_CRYPTO_HKDF_SHA256</code></p> General Function Parameters and details derive <code>crypto.HKDF_SHA256().derive(ikm:bytes(), salt:bytes(), info:bytes(), out_bytes:int) -&gt; bytes(out_bytes)</code>Computes a key derivation function<code>ikm</code> is the input keying material, typically a password<code>salt</code> can be empty<code>info</code> can be empty and is used to create multiple derived keys<code>out_bytes</code> indicates the number of bytes to generate (between 1 and 256) <p>Test vectors from https://www.rfc-editor.org/rfc/rfc5869</p> <pre><code>import crypto\n\n# Test Case 1\nhk = crypto.HKDF_SHA256()\nikm = bytes(\"0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B\")\nsalt = bytes(\"000102030405060708090A0B0C\")\ninfo = bytes(\"F0F1F2F3F4F5F6F7F8F9\")\nk = hk.derive(ikm, salt, info, 42)\nassert(k == bytes(\"3CB25F25FAACD57A90434F64D0362F2A2D2D0A90CF1A5A4C5DB02D56ECC4C5BF34007208D5B887185865\"))\n\n# Test Case 2\nhk = crypto.HKDF_SHA256()\nikm  = bytes(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f\")\nsalt = bytes(\"606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf\")\ninfo = bytes(\"b0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\nk = hk.derive(ikm, salt, info, 82)\nassert(k == bytes(\"b11e398dc80327a1c8e7f78c596a49344f012eda2d4efad8a050cc4c19afa97c59045a99cac7827271cb41c65e590e09da3275600c2f09b8367793a9aca3db71cc30c58179ec3e87c14c01d5c1f3434f1d87\"))\n\n# Test Case 3\nhk = crypto.HKDF_SHA256()\nikm  = bytes(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\")\nsalt = bytes()\ninfo = bytes()\nk = hk.derive(ikm, salt, info, 42)\nassert(k == bytes(\"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d9d201395faa4b61a96c8\"))\n</code></pre>"},{"location":"Berry/#cryptopbkdf2_hmac_sha256-class","title":"<code>crypto.PBKDF2_HMAC_SHA256</code> class","text":"<p>Provides PBKDF2 using HMAC SHA256 key derivation. Turns a password into a hash.</p> General Function Parameters and details derive <code>crypto.PBKDF2_HMAC_SHA256().derive(password:bytes(), salt:bytes(), iterations:int, out_bytes:int) -&gt; bytes(out_bytes)</code>Computes a key derivation function<code>password</code> is the input keying material<code>salt</code> can be empty <code>bytes()</code><code>iterations</code> counts the number of iterations of HMAC, limited to 10000 to make computation short enough for ESP32<code>out_bytes</code> indicates the number of bytes to generate (between 1 and 256) <p>Test vectors from https://github.com/brycx/Test-Vector-Generation/blob/master/PBKDF2/pbkdf2-hmac-sha2-test-vectors.md</p> <pre><code>import crypto\npb = crypto.PBKDF2_HMAC_SHA256()\n\nassert(pb.derive(\"password\", \"salt\", 1, 20) == bytes('120fb6cffcf8b32c43e7225256c4f837a86548c9'))\n\nassert(pb.derive(\"password\", \"salt\", 2, 20) == bytes('ae4d0c95af6b46d32d0adff928f06dd02a303f8e'))\n\nassert(pb.derive(\"password\", \"salt\", 3, 20) == bytes('ad35240ac683febfaf3cd49d845473fbbbaa2437'))\n\nassert(pb.derive(\"password\", \"salt\", 4096, 20) == bytes('c5e478d59288c841aa530db6845c4c8d962893a0'))\n\nassert(pb.derive(\"passwd\", \"salt\", 1, 128) == bytes('55AC046E56E3089FEC1691C22544B605F94185216DDE0465E68B9D57C20DACBC49CA9CCCF179B645991664B39D77EF317C71B845B1E30BD509112041D3A19783C294E850150390E1160C34D62E9665D659AE49D314510FC98274CC79681968104B8F89237E69B2D549111868658BE62F59BD715CAC44A1147ED5317C9BAE6B2A'))\n</code></pre>"},{"location":"Berry/#cryptosha256-class","title":"<code>crypto.SHA256</code> class","text":"<p>Provides SHA256 hashing function</p> General Function Parameters and details init <code>HMAC_SHA256.init() -&gt; instance</code>Initialize SHA256 hashing function update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained. out <code>out() -&gt; bytes(32)</code>Output the value of the hash <p>Example test vectors from https://www.dlitz.net/crypto/shad256-test-vectors/</p> <pre><code>import crypto\nh = crypto.SHA256()\n\n# SHA256 of empty message\nassert(h.out() == bytes(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"))\n\n# (first 16 bytes of RC4 keystream where the key = 0)\nh.update(bytes(\"de188941a3375d3a8a061e67576e926d\"))\nassert(h.out() == bytes(\"067c531269735ca7f541fdaca8f0dc76305d3cada140f89372a410fe5eff6e4d\"))\n</code></pre>"},{"location":"Berry/#cryptohmac_sha256-class","title":"<code>crypto.HMAC_SHA256</code> class","text":"<p>Provides HMAC SHA256 hashing function</p> General Function Parameters and details init <code>HMAC_SHA256.init(key:bytes) -&gt; instance</code>Initialize HMAC_SHA256 hashing function with a provided key update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained out <code>out() -&gt; bytes(32)</code>Output the value of the hash <p>Test case from https://datatracker.ietf.org/doc/html/rfc4231:</p> <pre><code>import crypto\nkey = bytes(\"4a656665\")\nmsg = bytes(\"7768617420646f2079612077616e7420666f72206e6f7468696e673f\")\nh = crypto.HMAC_SHA256(key)\nh.update(msg)\nhmac = h.out()\nassert(hmac == bytes(\"5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843\"))\n</code></pre>"},{"location":"Berry/#cryptorsa-class","title":"<code>crypto.RSA</code> class","text":"<p>Provides RSA core features, currently only JWT RS256 signing (RSASSA-PKCS1-v1_5 with SHA256) - requires <code>#define USE_BERRY_CRYPTO_RSA</code></p> Function Parameters and details rs256 <code>crypto.RSA.rs256HMAC_SHA256.init(private_key:bytes(), payload:bytes()) -&gt; bytes()</code>Sign a payload with an RSA private key in DER binary format.<code>private_key</code>: (bytes) contains the binary DER (ASN.1) private key, see example below to convert from PEM.<code>payload</code> (bytes) JWT payload to sign, it should be derived from JSON encoded as base64urlOutputs a <code>bytes()</code> array of the payload, hashed with SHA256 and signed with the RSA private key. The output is 256 bytes longs for a 2048 RSA key. <p>Signing a full JWT token with RS256</p> <pre><code>import string\nimport crypto\n\n# JWT requires base64url and not raw base64\n# see https://base64.guru/standards/base64url\n# input: string or bytes\ndef base64url(v)\n  import string\n  if type(v) == 'string'   v = bytes().fromstring(v) end\n  var b64 = v.tob64()\n  # remove trailing padding\n  b64 = string.tr(b64, '=', '')\n  b64 = string.tr(b64, '+', '-')\n  b64 = string.tr(b64, '/', '_')\n  return b64\nend\n\n# JWT header and claim\nvar header = '{\"alg\":\"RS256\",\"typ\":\"JWT\"}'\nvar claim = '{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":1516239022}'\nvar b64header = base64url(header)\nvar b64claim = base64url(claim)\n\nassert(b64header == 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9')\nassert(b64claim == 'eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0')\n\n# `body` is the payload to sign with RS256\nvar body = b64header + '.' + b64claim\nassert(body == 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0')\n\nvar private_key =\n'-----BEGIN PRIVATE KEY-----\\n'+\n'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKj\\n'+\n'MzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\\n'+\n'NMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\\n'+\n'qgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulg\\n'+\n'p2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlR\\n'+\n'ZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwi\\n'+\n'VuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskV\\n'+\n'laAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8\\n'+\n'sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83H\\n'+\n'mQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwY\\n'+\n'dgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cw\\n'+\n'ta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQ\\n'+\n'DM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2T\\n'+\n'N0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t\\n'+\n'0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPv\\n'+\n't8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDU\\n'+\n'AhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk\\n'+\n'48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISL\\n'+\n'DY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnK\\n'+\n'xt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEA\\n'+\n'mNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh\\n'+\n'2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfz\\n'+\n'et6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhr\\n'+\n'VBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicD\\n'+\n'TQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cnc\\n'+\n'dn/RsYEONbwQSjIfMPkvxF+8HQ==\\n'+\n'-----END PRIVATE KEY-----\\n'\n\n# public_key for reference but not actually used here\nvar public_key =\n'-----BEGIN PUBLIC KEY-----\\n'+\n'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo\\n'+\n'4lgOEePzNm0tRgeLezV6ffAt0gunVTLw7onLRnrq0/IzW7yWR7QkrmBL7jTKEn5u\\n'+\n'+qKhbwKfBstIs+bMY2Zkp18gnTxKLxoS2tFczGkPLPgizskuemMghRniWaoLcyeh\\n'+\n'kd3qqGElvW/VDL5AaWTg0nLVkjRo9z+40RQzuVaE8AkAFmxZzow3x+VJYKdjykkJ\\n'+\n'0iT9wCS0DRTXu269V264Vf/3jvredZiKRkgwlL9xNAwxXFg0x/XFw005UWVRIkdg\\n'+\n'cKWTjpBP2dPwVZ4WWC+9aGVd+Gyn1o0CLelf4rEjGoXbAAEgAqeGUxrcIlbjXfbc\\n'+\n'mwIDAQAB\\n'+\n'-----END PUBLIC KEY-----\\n'\n\n# read private_key as DER binary\nwhile (private_key[-1] == '\\n') private_key = private_key[0..-2] end\nvar private_key_DER = bytes().fromb64(string.split(private_key, '\\n')[1..-2].concat())\n\n# comparison with what was expected\nassert(private_key_DER.tob64() == 'MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC7VJTUt9Us8cKjMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvuNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZqgtzJ6GR3eqoYSW9b9UMvkBpZODSctWSNGj3P7jRFDO5VoTwCQAWbFnOjDfH5Ulgp2PKSQnSJP3AJLQNFNe7br1XbrhV//eO+t51mIpGSDCUv3E0DDFcWDTH9cXDTTlRZVEiR2BwpZOOkE/Z0/BVnhZYL71oZV34bKfWjQIt6V/isSMahdsAASACp4ZTGtwiVuNd9tybAgMBAAECggEBAKTmjaS6tkK8BlPXClTQ2vpz/N6uxDeS35mXpqasqskVlaAidgg/sWqpjXDbXr93otIMLlWsM+X0CqMDgSXKejLS2jx4GDjI1ZTXg++0AMJ8sJ74pWzVDOfmCEQ/7wXs3+cbnXhKriO8Z036q92Qc1+N87SI38nkGa0ABH9CN83HmQqt4fB7UdHzuIRe/me2PGhIq5ZBzj6h3BpoPGzEP+x3l9YmK8t/1cN0pqI+dQwYdgfGjackLu/2qH80MCF7IyQaseZUOJyKrCLtSD/Iixv/hzDEUPfOCjFDgTpzf3cwta8+oE4wHCo1iI1/4TlPkwmXx4qSXtmw4aQPz7IDQvECgYEA8KNThCO2gsC2I9PQDM/8Cw0O983WCDY+oi+7JPiNAJwv5DYBqEZB1QYdj06YD16XlC/HAZMsMku1na2TN0driwenQQWzoev3g2S7gRDoS/FCJSI3jJ+kjgtaA7Qmzlgk1TxODN+G1H91HW7t0l7VnL27IWyYo2qRRK3jzxqUiPUCgYEAx0oQs2reBQGMVZnApD1jeq7n4MvNLcPvt8b/eU9iUv6Y4Mj0Suo/AU8lYZXm8ubbqAlwz2VSVunD2tOplHyMUrtCtObAfVDUAhCndKaA9gApgfb3xw1IKbuQ1u4IF1FJl3VtumfQn//LiH1B3rXhcdyo3/vIttEk48RakUKClU8CgYEAzV7W3COOlDDcQd935DdtKBFRAPRPAlspQUnzMi5eSHMD/ISLDY5IiQHbIH83D4bvXq0X7qQoSBSNP7Dvv3HYuqMhf0DaegrlBuJllFVVq9qPVRnKxt1Il2HgxOBvbhOT+9in1BzA+YJ99UzC85O0Qz06A+CmtHEy4aZ2kj5hHjECgYEAmNS4+A8Fkss8Js1RieK2LniBxMgmYml3pfVLKGnzmng7H2+cwPLhPIzIuwytXywh2bzbsYEfYx3EoEVgMEpPhoarQnYPukrJO4gwE2o5Te6T5mJSZGlQJQj9q4ZB2Dfzet6INsK0oG8XVGXSpQvQh3RUYekCZQkBBFcpqWpbIEsCgYAnM3DQf3FJoSnXaMhrVBIovic5l0xFkEHskAjFTevO86Fsz1C2aSeRKSqGFoOQ0tmJzBEs1R6KqnHInicDTQrKhArgLXX4v3CddjfTRJkFWDbE/CkvKZNOrcf1nhaGCPspRJj2KUkj1Fhl9Cncdn/RsYEONbwQSjIfMPkvxF+8HQ==')\n\n# sign body\nvar body_b64 = bytes().fromstring(body)\nvar sign = crypto.RSA.rs256(private_key_DER, body_b64)\nvar b64sign = base64url(sign)\n\n# check output\nassert(b64sign == 'NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ')\n\n# Final token:\nvar jwt_token = payload + '.' + b64sign\n</code></pre>"},{"location":"Berry/#cryptomd5-class","title":"<code>crypto.MD5</code> class","text":"<p>Provides MD5 hashing function.</p> General Function Parameters and details init <code>MD5.init() -&gt; instance</code>Initialize MD5 hashing function update <code>update(data:bytes) -&gt; self</code>Add content to the hash. Calls can be chained. finish <code>finish() -&gt; bytes(16)</code>Finish the MD5 calculation and output the result (16 bytes) <p>Test vector:</p> <pre><code>import crypto\nh = crypto.MD5()\nt = bytes().fromstring(\"The quick brown fox jumps over the lazy dog\")\nh.update(t)\nm = h.finish()\nassert(m == bytes(\"9e107d9d372bb6826bd81d3542a419d6\"))\n</code></pre>"},{"location":"Berry/#flash-module","title":"<code>flash</code> module","text":"<p>Warning: this is a low-level module used to read and write flash memory. You normally shouldn't need to use it. It is used internally by <code>partition_core</code>. Use with <code>import flash</code>.</p> Function Parameters and details read <code>flash.read(address:int[, length:int]) -&gt; bytes()</code>Reads bytes from an absolute address from the flash and returns a <code>bytes()</code> object. If <code>length</code> is omitted, the size is 4KB (4096 bytes) write <code>flash.write(address:int, content:bytes [, no_erase:bool]) -&gt; nil</code>Writes a <code>bytes</code> object to flash. It is generally better to do 4KB aligned writes.By default, the 4KB page is first erased and the content is written back to it. This call handles automatically writes non-aligned to 4KB boundariesIf <code>no_erase</code> is <code>true</code>, content is written without erasing, which can be useful when writing a small number of bytes from previously erased pagesFlash contains all ones when erased, and writing to flash can only turn <code>1</code> to <code>0</code>. Erasing flash causes wear leveling and reduces the lifetime of flash. erase <code>flash.erase(address:int, length:int) -&gt; nil</code>Erases flash pages. <code>address</code> and <code>lenght</code> must be 4KB aligned, i.e. multiples of <code>4096</code> id <code>flash.id() -&gt; int</code>Returns the 32-bit flash identifier size <code>flash.size() -&gt; int</code>Returns the size of flash in bytes current_ota <code>flash.current_ota() -&gt; int</code>Returns the number of the partition Tasmota is running from, typically <code>0</code> or <code>1</code>, or <code>-1</code> for safeboot. With safeboot layout, it is always <code>0</code> factory <code>flash.factory(force_ota:bool) -&gt; nil</code>Forces the next restart to use the <code>factory</code> partition if any is present.If <code>force_ota</code> is true, it forces an OTA update with the current URL"},{"location":"Berry/#img-class","title":"<code>img</code> class","text":"<p>Thin wrapper for image data, that allows format conversions and is able to reduce memory reallocations in certain scenarios.  </p> <p>Supports following image types, which integer values are equal to the enum <code>pixformat_t</code> of Espressif's webcam driver: - <code>img.RGB565</code>      = 0 - <code>img.RGB888</code>      = 5 - <code>img.JPEG</code>        = 4 - <code>img.GRAYSCALE</code>   = 3  </p> <p>Create an instance of an image with <code>var i = img()</code>. Memory will be released automatically by Berry's garbage collector after deletion of the instance.  </p> img Function Parameters and details from_jpeg <code>img.from_jpeg(jpeg_buffer:bytes[, type:img.type]) -&gt; nil</code> Copy JPEG image as byte buffer to the buffer of an <code>img</code> instance. If optional image type is provided, this will be converted on the fly. This will not reallocate the image buffer, if the size and format does not change. from_buffer <code>img.from_buffer(image_data:bytes,width:int:height:int,type:img.type) -&gt; nil</code> Construct image from raw image data for the types <code>RGB565</code>, <code>RGB888</code> and <code>GRAYSCALE</code>. get_buffer <code>img.get_buffer([descriptor:bytes]) -&gt; image_data:bytes</code> Returns the raw image data for any supported type. For <code>RGB565</code>, <code>RGB888</code> and <code>GRAYSCALE</code> a descriptor can be provided to get a ROI (region of interest). convert_to <code>img.convert_to(type:img.type) -&gt; nil</code> Internal conversion of the image format. info <code>img.info() -&gt; map</code> Returns a map with some information about the current image. <p>The optional ROI descriptor is a representation of an affine matrix, which can be constructed in Berry: <pre><code>#  Describe ROI using an affine matrix (https://en.wikipedia.org/wiki/Affine_transformation#Image_transformation)\n#   | scale_x shear_x translation_x |\n#   | shear_y scale_y translation_y |\n#   | 0       0       1             | - these are constants in this scope\n\ndef roi_dsc(m)\n    var d = bytes(-24)\n    d.setfloat(0,m[\"scaleX\"])\n    d.setfloat(4,m[\"shearX\"])\n    d.setfloat(8,m[\"shearY\"])\n    d.setfloat(12,m[\"scaleY\"])\n    d.seti(16,m[\"transX\"],2)\n    d.seti(18,m[\"transY\"],2)\n    d.seti(20,m[\"width\"],2)\n    d.seti(22,m[\"height\"],2)\n    return d\nend\n</code></pre> A simple web tool to create such matrices is embedded in the docs: ROI  editor</p> <p>Example: <pre><code># load jpg file into img\nvar i = img()\nvar f = open(\"j.jpg\",\"r\")\ni.from_jpg(f.readbytes(),img.RGB565) # i now holds image data with type RGB565\nf.close()\n</code></pre></p>"},{"location":"Berry/#cam-module","title":"<code>cam</code> module","text":"<p>Very small module to access a connected camera module with the purpose to have as much heap memory available as possible in comparison to the fully fledged webcam drivers for machine learning, but there are more possible applications. It is not intended to be a general replacement for the webcam drivers.</p> Tasmota Function Parameters and details cam.setup <code>(mode:int) -&gt; bool</code> Init camera hardware with the resolution (same value as command <code>wcresolution</code>). cam.get_image <code>([image:img[,type:img.type]]) -&gt; bytes or nil</code> Takes a picture - without an additional option this is just a JPEG buffer. If an image instance is provided, the image data will go there. If an additional type is given, a conversion will happen on the fly. This will not lead to a memory reallocation, if there is no change for size and type of the image. cam.info <code>() -&gt; map</code> Shows info map with last current resolution and camera mode <p>Example:  </p> <pre><code># Simple \"video player\" for boards with a camera and a display\n\nscr = lv.scr_act()\nscr.set_style_bg_color(lv.color(lv.COLOR_BLUE), lv.PART_MAIN | lv.STATE_DEFAULT)\n\n# create a lv_img object as image view\ncam_view = lv.img(scr)\ncam_view.center()\n\ni = img()\n\nimport cam\ncam.setup(4) # 240 x 240\ncam.get_image(i,i.RGB565)\n\ndef lv_img_dsc(image)\n    var i = image.info()\n    var dsc = bytes(24)\n    dsc..0x19 # magic\n    dsc..0x12 # cf RGB565\n    dsc.add(0,2) # flags\n    dsc.add(i[\"width\"],2) # width\n    dsc.add(i[\"height\"],2) # height\n    dsc.add(i[\"width\"] * 2,2) # stride\n    dsc.add(0,2) # reserved\n    dsc.add(i[\"size\"],4) # size\n    dsc.add(i[\"buf_addr\"],4) # data\n    dsc.add(0,4) # reserved\n    print(dsc)\n    return dsc\nend\n\ndescriptor = lv_img_dsc(i)\ncam_view.set_src(descriptor) # bind cam_view to buffer of img\n\ndef video()\n    cam.get_image(i,i.RGB565) # this will just update the buffer, no reallocation\n    cam_view.invalidate()\n    tasmota.set_timer(20,/-&gt;video()) # aim for 50 Hz\nend\n\nvideo()\n</code></pre>"},{"location":"Berry/#ble-module","title":"<code>BLE</code> module","text":"<p>Write drivers and applications for Bluetooth Low Energy supporting all 4 roles. More information here: BLE module</p>"},{"location":"Berry/#philips-hue-emulation-for-alexa","title":"Philips Hue emulation for Alexa","text":"<p>Berry extends the native Hue/Alexa emulation and makes it possible to handle any number of virtual lights. You can easily define \"virtual\" lights in Berry, respond to commands from Alexa and send light status.</p> <p>It is up to you to define the final behavior. For example you could control some fancy devices, light strips or whatever takes on/off, dimmer or RGB commands. Your imagination is the limit.</p> <p>Hue emulation requires both <code>#define USE_EMULATION</code> and  <code>#define USE_EMULATION_HUE</code>. Emulation must also be enabled with <code>Emulation 2</code> command.</p>"},{"location":"Berry/#light_state-class","title":"<code>light_state</code> class","text":"<p>The core class is <code>light_state</code> which represents a virtual light.</p> <p><code>light_state</code> general methods:</p> Methods Parameters and details init <code>light_state.init(channels:int) -&gt; instance</code>Creates a <code>light_state</code> instance for a light with <code>channels</code> channels.Constants are:<code>light_state.RELAY</code> = <code>0</code><code>light_state.DIMMER</code> = <code>1</code><code>light_state.CT</code> = <code>2</code><code>light_state.RGB</code> = <code>3</code><code>light_state.RGBW</code> = <code>4</code><code>light_state.RGBCT</code> = <code>5</code> signal_change <code>signal_change() -&gt; nil</code>Called when a changed was triggered by Alexa.You can sub-class this class and override this method. Alternatively you can also poll for any change. <p><code>light_state</code> getters:</p> Attributes Parameters and details power <code>(bool)</code> on/off state reachable <code>(bool)</code> light is reachable type <code>(int)</code> number of channels of the light bri <code>(int)</code> brightness of the light (0..255) ct <code>(int)</code> white temperature of the light (153..500) sat <code>(int)</code> saturation of the light (0..255) hue <code>(int)</code> hue of the light (0..360) hue16 <code>(int)</code> hue as 16 bits (0..65535) rgb <code>(int)</code> Red Green Blue channels (0..255) xy <code>(float)</code> x/y color as floats (0.0 .. 1.0) mode_ctmode_rgb <code>(bool)</code> light is in RGB or CT mode get <code>get() -&gt; map</code> returns the complete state of the light as a mapExample:<code>{'rgb': '1E285A', 'hue': 230, 'type': 5, 'power': false, 'bri': 90, 'mode_rgb': true, 'sat': 170, 'mode_ct': false, 'channels': [30, 40, 90, 0, 0]}</code> <p><code>light_state</code> setters:</p> Methods Parameters and details set_power <code>set_power(bool) -&gt; nil</code> sets on/off state set_reachable <code>set_reachable(bool) -&gt; nil</code> sets the reachable state set_bri <code>set_bri(int) -&gt; nil</code> sets the brightness (0..255) set_ct <code>set_ct(int) -&gt; nil</code> sets the white temperature (153..500) set_sat <code>set_sat(int) -&gt; nil</code> sets the saturation (0..255) set_huesat <code>set_huesat(hue:int, sat:int) -&gt; nil</code> sets hue and saturation (0..360, 0..255) set_hue16sat <code>set_hue16sat(hue16:int, sat:int) -&gt; nil</code> sets hue16 and saturation (0..65535, 0..255) set_rgb <code>set_rgb(r:int, g:int, b=int) -&gt; nil</code> sets red/green/blue channels (0..255 x 3) set_xy <code>set_xy(x:float, y:float) -&gt; nil</code> sets color as x/y (0.0 .. 1.0 x 2) <p><code>light_state</code> static helper functions:</p> Methods Parameters and details gamma8 <code>gamma8(int) -&gt; nil</code> applies gamma correction to 8 bits value (0..255) gamma10 <code>gamma10(int) -&gt; nil</code> applies gamma correction to 10 bits value (0..1023) reverse_gamma10 <code>reverse_gamma10(int) -&gt; nil</code> applies reverse gamma correction to 10 bits value (0..1023)"},{"location":"Berry/#hue_bridge-module","title":"<code>hue_bridge</code> module","text":"<p>Use <code>import hue_bridge</code> and declare all the virtual lights. Example:</p> <pre><code># put this in `autoexec.be`\nimport hue_bridge\n\nl1 = light_state(light_state.DIMMER)\nhue_bridge.add_light(11, l1, \"Synthetic Dimmer\", \"V1\", \"Tasmota Factory\")\n\nl2 = light_state(light_state.CT)\nhue_bridge.add_light(12, l2, \"Synthetic CT\", \"V1\", \"Tasmota Factory\")\n\nl5 = light_state(light_state.RGBCT)\nhue_bridge.add_light(15, l5, \"Synthetic RGBCT\")\n</code></pre> <p>When you start the Hue pairing, all virtual lights are advertised. You need to make sure that virtual lights are defined at each restart (in <code>autoexec.be</code> for example).</p> <p><code>hue_bridge</code> functions:</p> Methods Parameters and details add_light <code>add_light(id:int, light:instance of light_state, name:string [, model:string, manuf:strin]) -&gt; light</code>Adds an virtual light to the Hue bridge.<code>id</code> = numerical identifier of the Hue light. Using low numbers avoids conflict with real lights from Tasmota<code>light</code> = instance of <code>light_state</code> handling the state and behavior of the light<code>name</code> = name of the light as displayed in the Alexa app (can be overridden in the app)<code>model</code> (opt) = name of the manufacturer model, defaults to \"Unknown\"<code>manuf</code> (opt) = name of the manufacturer, defaults to \"Tasmota\" remove_light <code>remove_light(id:int) -&gt; nil</code>Removes a light from the Hue bridge by hue id. light_to_id <code>light_to_id(light:instance) -&gt; int</code> converts a registered <code>light_instance</code> instance to its Hue id"},{"location":"Berry/#zigbee","title":"Zigbee","text":"<p>For Zigbee coordinators, there is a Berry mapping that allows explore Zigbee configurations and devices. It also allows to intercept incoming message (low and high level) and transform messages before they reach the Tasmota layer. This is useful for non-standard Zigbee devices for which Zigbee plug-ins are not sufficient.</p> <p>Note: the following are only available when compiling with <code>#define USE_ZIGBEE</code></p> <p>Internally, the Tasmota Zigbee engine calls <code>callBerryZigbeeDispatcher()</code> at key points to allow your Berry code to take over and change messages on-the-fly.</p>"},{"location":"Berry/#import-zigbee","title":"<code>import zigbee</code>","text":"<p>First step is to use <code>import zigbee</code> which returns an instance (monad) of <code>zb_coord()</code>.</p> General methods Parameters and details started <code>zigbee.started() -&gt; bool or nil</code>Returns <code>true</code> if Zigbee successfully started, then all other Zigbee methods are available. This state is final and does not change.Returns <code>false</code> if Zigbee is still in initialization process. This state eventually changes to <code>true</code> or <code>nil</code>.Returns <code>nil</code> if Zigbee is not configured (no GPIO) or if initialization failed. This state is final and indicates a fatal error. info <code>zigbee.info() -&gt; map</code> returns a map with general configuration of the Zigbee coordinator.Format is identical to <code>ZbConfig</code>Example: <code>{'ext_pan_id': '0xCCCCCCCCA11A2233', 'tx_radio': 20, 'shortaddr': 0, 'longaddr': '0x00124B0026BAABBC', 'channel': 11, 'pan_id': 837, 'pan_id_hex': '0x0345', 'shortaddr_hex': '0x0000'}</code> size <code>zigbee.size() -&gt; int</code> returns the number of devices known by the coordinator iter <code>zigbee.iter() -&gt; iterator</code>Returns an iterator on all Zigbee devicesUse compact implicit form:<code>for ze: zigbee  print(ze)  end</code> item[] <code>zigbee.item(shortaddr:int | friendlyname:str) -&gt; instance of zb_device</code>Returns the Zigbee device corresponding to short address <code>shortaddr</code> or to friendly name <code>friendlyname</code>.Returns an <code>index_error</code> exception if not found.You can use the compact syntax <code>zigbee[0xFAB6]</code> find <code>zigbee.find(shortaddr:int | friendlyname:str) -&gt; instance of zb_device</code>Returns the Zigbee device corresponding to short address <code>shortaddr</code> or to friendly name <code>friendlyname</code>.Contrary to the above, returns <code>nil</code> if not found (no exception). abort <code>zigbee.abort() -&gt; nil</code> aborts the initialization of Zigbee MCU. To be used when initialization of Zigbee failed"},{"location":"Berry/#zb_device-class","title":"<code>zb_device</code> class","text":"<p>The class <code>zb_device</code> contains all known information about a paired Zigbee device (end-device or router). You can't create a <code>zb_device</code> from scratch, they most be retrieved from <code>zigbee</code> object.</p> General methods Parameters and details info <code>info() -&gt; attribute_list or nil</code>Returns the last known state for this device as an <code>attribute_list</code>This is equivalent of running `ZbInfo `` and getting the attribute_list <p><code>zb_device</code> instances can only be read, you can't change directly any attribute.</p> Instance Variables Parameters and details shortaddr <code>shortaddr -&gt; int</code> returns the 16 bits short address longaddr <code>longaddr -&gt; bytes</code> returns the long 64 bits address as 8 bytes (or all zeroes if unknown) name <code>name -&gt; string</code> returns the friendly name of the device or <code>0x....</code> hex name if no friendly name was defined using <code>ZbName</code> command reachable <code>reachable -&gt; bool</code> is the device reachable, i.e. did it respond last time we tried to contact them hidden <code>hidden -&gt; bool</code> is the device declared as hidden, i.e. not announced in Hue emulation router <code>router -&gt; bool</code> is the device known to be a router model <code>model -&gt; string</code> model of the device manufacturer <code>manufacturer -&gt; string</code> manufacturer name of the device lastseen <code>lastseen -&gt; int</code> timestamp (epoch) when the device was last seen lqi <code>lqi -&gt; int</code> radio strength and quality when the device was last seen battery <code>battery -&gt; int</code> percentage of battery, or <code>-1</code> if unknown of no battery battery_lastseen <code>battery_lastseen -&gt; int</code> timestamp (epoch) when the battery was last reported, or <code>-1</code> <p>Example: <pre><code>import zigbee\n\n# show all devices\nfor device: zigbee\n  print(device)\nend\n#\n# outputs:\n# &lt;instance: zb_device(0x868E, 0x00124B001F841E41, name:'Bedroom', model:'TH01', manufacturer:'eWeLink')&gt;\n# ... more devices\n\n# read one device by short address\nvar device = zigbee[0x868E]\n\nprint(device.longaddr)\n# bytes('411E841F004B1200')\n\nprint(device.reachable)\n# false - because it's a sleep device\n\nprint(device.router)\n# false - it's a sleepy device so not a router\n\nprint(device.manufacturer, device.model)\n# eWeLink TH013000_g5xawfcq')&gt;\n\n# example with a plug\ndevice = zigbee[0xC1BC]\nprint(device.longaddr, device.reachable, device.router)\n# bytes('859F4E001044EF54') true false\nprint(device.manufacturer, device.model)\n# LUMI lumi.plug.maeu01\n</code></pre></p>"},{"location":"Berry/#changing-zigbee-values-on-the-fly","title":"Changing Zigbee values on-the-fly","text":"<p>Whenever a Zigbee message is received (typically values of attributes), the Tasmota Zigbee engines generates events at key points which allow custom Berry code to intercept and change messages on-the-fly.</p> <p>Messages are sent in the following order:</p> <ul> <li><code>frame_received</code>: (low-level) the raw Zigbee message is passed as <code>bytes</code> and attributes are not yet decoded. The <code>bytes</code> buffer can be modified and passed back to the Tasmota Zigbee engine.</li> <li><code>attributes_raw</code>: (mid-level) Zigbee attributes are decoded but no transformation is applied yet. Attributes are only available in cluster/attribute format, names are not decoded and plug-ins are not yet applied.This is the perfect moment to change non-standard attributes and map them to standard ones.</li> <li><code>attributes_refined</code>: (high-level) Attributes are mapped to their names (when possible) and all transformations are applied. This is the last chance to change values.</li> <li><code>attributes_final</code>: (high-level) consolidated <code>attributes_refined</code>. It is triggered just before final and consolidated attributes are sent to MQTT. Zigbee typically waits for 350ms before sending attributes, so it can consolidate multiple sensors (like temperature + humidity + pressure) in a single MQTT message</li> </ul> <p>The format of methods are the following: <code>def &lt;zigbee event&gt;(event_type, frame, attr_list, idx)</code></p> Argument Description <code>event_type</code> (string) can take values: <code>frame_received</code>, <code>attributes_raw</code> or <code>attributes_refined</code> <code>frame</code> (instance of <code>zcl_frame</code>) low-level ZCL frameAlways present <code>attr_list</code> (instance of <code>XXX</code>) list of attributes.This attribute is <code>nil</code> for <code>frame_received</code>, contains raw attributes in <code>attributes_raw</code> and refined attributes in <code>attributes_refined</code> <code>idx</code> (int 16 bits unsigned) contains the Zigbee short address <p>Example, if you want to dump all the traffic passed:</p> <pre><code>import zigbee\nclass my_zb_handler\n  def frame_received(event_type, frame, attr_list, idx)\n    print(f\"shortaddr=0x{idx:04X} {event_type=} {frame=}\")\n  end\n  def attributes_raw(event_type, frame, attr_list, idx)\n    print(f\"shortaddr=0x{idx:04X} {event_type=} {attr_list=}\")\n  end\n  def attributes_refined(event_type, frame, attr_list, idx)\n    print(f\"shortaddr=0x{idx:04X} {event_type=} {attr_list=}\")\n  end\n  def attributes_final(event_type, frame, attr_list, idx)\n    print(f\"shortaddr=0x{idx:04X} {event_type=} {attr_list=}\")\n  end\n\nend\n\nvar my_handler = my_zb_handler()\nzigbee.add_handler(my_handler)\n\n# example of reading for a plug\n#\n# shortaddr=0xC1BC event_type=frame_received frame={'srcendpoint': 21, 'transactseq_set': 0, 'shortaddr': 49596, 'dstendpoint': 1, 'payload': bytes('5500003956CE8243'), 'shortaddr_hex': '0xC1BC', 'manuf': 0, 'payload_ptr': &lt;ptr: 0x3ffccb5c&gt;, 'need_response': 0, 'transactseq': 25, 'cmd': 1, 'direct': 0, 'cluster': 12, 'cluster_specific': 0, 'groupaddr': 0}\n# shortaddr=0xC1BC event_type=attributes_raw attr_list={\"000C/0055\":261.612,\"Endpoint\":21,\"LinkQuality\":21}\n# shortaddr=0xC1BC event_type=attributes_refined attr_list={\"ActivePower\":261.612,\"(ActivePower)\":\"0B04/050B\",\"Endpoint\":21,\"LinkQuality\":21}\n# shortaddr=0xC1BC event_type=attributes_final attr_list={\"ActivePower\":261.612,\"(ActivePower)\":\"0B04/050B\",\"Endpoint\":21,\"LinkQuality\":21}\n\n# to remove handler:\n# zigbee.remove_handler(my_handler)\n</code></pre> <p>The <code>attr_list</code> is of class <code>zcl_attribute_list</code> and can be accessed with <code>zigbee.zcl_attribute_list</code>.</p> Methods Parameters and details size <code>size() -&gt; int</code>Number of attributes in the list remove <code>remove(index:int) -&gt; nil</code>Remove the item at <code>index</code> item[x] <code>item(index:int) -&gt; instance</code> or <code>[index:int] -&gt; instance</code>Retrieve attribute at <code>index</code>, or <code>nil</code> if none.Note: contrary to native <code>list</code> it does not throw an exception if the index if off bounds. new_head <code>new_head(attribute:instance of zigbee.zcl_attribute_list) -&gt; self</code>Adds a new attribute at the beginning (head) of the list new_tail <code>new_tail(attribute:instance of zigbee.zcl_attribute_list) -&gt; self</code>Adds a new attribute at the end (tail) of the list <p>Variables of <code>zcl_attribute_list</code> for the entire list and common to all attributes:</p> Attributes (read or write) Details <code>groupaddr</code> <code>uint16</code> group address if the message was multicast, or <code>nil</code> <code>src_ep</code> <code>uint8</code> source endpoint of the message <code>lqi</code> <code>uint8</code> lqi for the message received (link quality) <p>The <code>zcl_attribute_list</code> contains a list of <code>zcl_attribute</code> instance.</p> Attributes (read or write) Details <code>cluster</code> <code>uint16</code> ZCL cluster number <code>attr_id</code> <code>uint16</code> ZCL attribute id <code>cmd</code> <code>uint8</code> ZCL command number <code>direction</code> <code>0 or 1</code> ZCL direction of the message (to or from the coordinator) <code>cmd_general</code> <code>0 or 1</code> ZCL flag indicating a general command vs a cluster specific command <code>key</code> <code>string or nil</code> attribute name (if any) or <code>nil</code> <code>val</code> <code>any</code> ZCL value of the attribute, can be <code>int/float/string/bytes...</code> <code>key_suffix</code> <code>uint8</code> key suffix in case a same attribute is repeatedLike <code>Power1</code>, <code>Power2</code>... <code>manuf</code> <code>uint16</code> ZCL manufacturer specific code or 0 if noneThis is typically indicating a proprietary attribute <code>attr_multiplier</code> <code>int</code> multiplier to be applied or <code>1</code> <code>attr_divider</code> <code>int</code> divider to be applied or <code>1</code> <code>attr_base</code> <code>int</code> offset to be applied or <code>0</code> <code>attr_type</code> <code>uint8</code> ZCL type byte for the received attribute <p><code>zcl_attribute_list</code> methods:</p> Methods Parameters and details tomap <code>tomap() -&gt; map</code>Transforms main attributes as map (read-only): <code>cluster</code>, <code>attr_id</code>, <code>cmd</code>, <code>direction</code>, <code>key</code>, <code>val</code>"},{"location":"Berry/#changing-attributes-received","title":"Changing attributes received","text":"<p>For events <code>attributes_raw</code> and <code>attributes_refined</code>, you receive an instance of <code>attr_list</code> which represents all the attributes received. This list can be modified according to specificities of devices, hence giving full liberty on decoding exotic protocols or manufacturers.</p> <p>The decoding is done in 2 steps:</p> <ul> <li> <p><code>attributes_raw</code> contains individual attributes with their native raw values. Names are not yet matched, nor scale factors applied. This is where you want to decode non-standard protocols   Example:   <code>{\"000C/0055\":261.612,\"Endpoint\":21,\"LinkQuality\":21}</code>   represents raw value from a plug; the value was decoded as float.</p> </li> <li> <p><code>attributes_refined</code> contains a similar list with additional decoding handled, any scale factor applied (like transforming integer temperature in 1/100 of Celsius to a <code>float</code>), and human readable names attached.   Example:   <code>{\"ActivePower\":261.612,\"(ActivePower)\":\"0B04/050B\",\"Endpoint\":21,\"LinkQuality\":21}</code>   In this example, the attribute is <code>0B04/050B</code> is rename as <code>ActivePower</code>, but the original <code>0B04/050B</code> attribute cluster/id is still readable. We can see that the generic <code>000C/0055 (AnalogValue)</code> from <code>lumi.plug.maeu01</code> is replaced with <code>0B04/050B (ActivePower)</code>.</p> </li> </ul>"},{"location":"Berry/#changing-zigbee-frame-zcl_frame-class","title":"Changing Zigbee frame, <code>zcl_frame</code> class","text":"<p>The <code>zcl_frame</code> represents a low-level ZCL (Zigbee Cluster Library) structure before any decoding or specific processing. You generally prefer to modify a frame later on when attributes or commands are decoded.</p> <p>class <code>zcl_frame</code>:</p> Attributes (read or write) Details <code>srcendpoint</code> <code>uint8</code> source endpoint <code>dtsendpoint</code> <code>uint8</code> destination endpoint <code>shortaddr</code> <code>uint16</code> destination short address <code>groupadddr</code> <code>uint16</code> destination multicast group address (if shortaddr is 0xFFFE) <code>cluster</code> <code>uint16</code> cluster number <code>cmd</code> <code>uint8</code> ZCL command number <code>cluster_specific</code> <code>flag 0/1</code> is the command general or cluster specific <code>manuf</code> <code>uint16</code> manufacturer specific number (or 0x0000) <code>needs_response</code> <code>flag 0/1</code> does this frame needs a response <code>payload</code> <code>bytes()</code> bytes of the actual data (use with caution, can be read and changed) The following are rarely used flags <code>direct</code> <code>flag 0/1</code> is the frame to be sent directly only (not routed) <code>transactseq</code> <code>uint8</code> transaction number (read only) <code>transactseq_set</code> <code>uint8</code> transaction number (write only - if you need to change it) <p>Example: <pre><code>frame_received frame_received {'srcendpoint': 21, 'transactseq_set': 0, 'shortaddr': 49596, 'dstendpoint': 1, 'payload': bytes('550039D5787B43'), 'shortaddr_hex': '0xC1BC', 'manuf': 4447, 'payload_ptr': &lt;ptr: 0x3ffd4d04&gt;, 'need_response': 0, 'transactseq': 60, 'cmd': 10, 'direct': 0, 'cluster': 12, 'cluster_specific': 0, 'groupaddr': 0} nil 49596\n</code></pre></p>"},{"location":"Berry/#compiling-berry","title":"Compiling Berry","text":"<p>Berry is included if the following is defined in <code>user_config_override.h</code>:</p> <pre><code>#define USE_BERRY\n</code></pre> <p>Other options that can be changed:</p> Option Description <code>#define USE_BERRY_PSRAM</code> Use PSRAM to allocate memory instead of main RAM. If no PSRAM is connected, this option has no effect.Enabled by default <code>#define USE_BERRY_DEBUG</code> Provide additional information in case of a Berry exception, adding line number in the call chain. This feature adds ~8% of memory consumption to Berry compiled code.Disabled by default <code>#define USE_WEBCLIENT</code> Enable the <code>webclient</code> module allowing to do HTTP requests.Enabled by default <code>#define USE_WEBCLIENT_HTTPS</code> Adds support for HTTPS to <code>webclient</code>. This feature adds ~45KB of Flash space for TLS support.Disabled by default <code>#define USE_BERRY_WEBCLIENT_USERAGENT  \"TasmotaClient\"</code> Specifies the default <code>User-Agent</code> field sent by <code>webclient</code>. Can be changed on a per request basis. <code>#define USE_BERRY_WEBCLIENT_TIMEOUT  5000</code> Specifies the default timeout in millisecond for <code>webclient</code>. Can be changed on a per request basis."},{"location":"Berry/#berry-cookbook","title":"Berry Cookbook","text":"<p>Find complete examples and use scenarios of Berry in the Berry Cookbook</p>"},{"location":"Berry_Addressable-LED/","title":"Addressable LEDs in Berry","text":"<p>Requires <code>#define USE_WS2812</code>, included in Tasmota32</p> <p>Support for addressable leds strips and animation. Internally relies on optimized TasmotaLED library, currently supporting WS2812 and SK6812, 3 and 4 channels, over RMT and SPI.</p>"},{"location":"Berry_Addressable-LED/#how-to-use","title":"How to use","text":""},{"location":"Berry_Addressable-LED/#compatibility-with-templates","title":"Compatibility with Templates","text":"<p>You can control multiple LED strips. <code>WS2812 - 1</code> is also controlled by Tasmota's light controls. It is still possible to control this light strip with Berry, but whenever you use Tasmota light controls they will temporarily overrid Berry animations.</p> <p>To avoid any conflict between native WS2812 and Berry control, you can use <code>Scheme 14</code> which disables native WS2812.</p>"},{"location":"Berry_Addressable-LED/#led-strips-sub-strips","title":"Led strips, sub-strips","text":"<p>You first need to define the low-level <code>Leds</code> object that describes the hardware strip of connected leds.</p> <p>You can then define higher level objects like sub-strips (if there are actually several strips chained together like rings).</p> Class Details Leds <code>Leds(pixels:int, gpio:int [,model:int ,rmt:int]) -&gt; instance&lt;Leds&gt;</code>Creates a <code>Leds</code> instance for a linear leds strip<code>pixels</code>: number of leds<code>gpio</code>: physical gpio number<code>model</code>: (optional) LED model, default: <code>Leds.WS2812_GRB</code>, alternative <code>Leds.SK6812_GRBW</code><code>rmt</code>: (optional) <code>RMT</code>channel to use, or auto-select (see below) <p>Once a <code>Leds</code> object, you can use sub-objects:</p> Method Details create_segment <code>&lt;strip&gt;.create_segment(offset:int, pixels:int) -&gt; instance&lt;Leds_segment&gt;</code>Creates a virtual segment from a physical Leds strip, from Led number <code>offset</code> with <code>pixels</code> leds. <p>The <code>Leds_segment</code> class provides the same interface as the <code>Leds</code> class, with the following differences: - It doesn't have its own buffer, it's a view into the parent strip's buffer - The <code>show()</code> method takes an optional <code>force</code> parameter that, when <code>true</code>, forces a show even if the segment doesn't cover the entire strip - The <code>pixels_buffer()</code> method returns <code>nil</code> since segments don't have their own buffer</p> LED model Details Leds.WS2812_GRB WS2812b Leds (GRB) - takes 24 bits RGB colors Leds.SK6812_GRBW SK6812 Leds (GRBW) - takes 32 bits RGBW colors (with white channel) <p>Methods are the equivalent low-level from NeoPixelBus. All colors are in <code>0xRRGGBB</code> format (24 bits) or <code>0xWWRRGGBB</code> format (32 bits).</p> Attributes Details clear <code>clear() -&gt; nil</code>Clear all led (set to black) clear_to <code>clear_to(col:color [, bri:int]) -&gt; nil</code>Set all leds to the specified color. <code>bri</code> (0..255) is optional and default to 255 show <code>show() -&gt; nil</code>Pushes the internal buffer to leds. May be ignored if a show command is already in progress. Use <code>can_show()</code> to see if <code>show()</code> is possible can_show <code>can_show() -&gt; bool</code>Indicates if <code>show()</code> is possible, i.e. no transfer is ongoing can_show_wait <code>can_show_wait() -&gt; nil</code>Waits until <code>show()</code> is possible, i.e. no transfer is ongoing is_dirty <code>is_dirty() -&gt; bool</code>Indicates if a led was changed since last <code>show()</code> dirty <code>dirty() -&gt; nil</code>Forces a refresh during next <code>show()</code> pixel_size <code>pixel_size() -&gt; int</code>Returns the number of bytes per pixel pixel_count <code>pixel_count() -&gt; int</code>Returns the number of leds in the strip clear_to <code>clear_to(col:color [, bri:int]) -&gt; nil</code>Clears all leds to the specified color. <code>bri</code> is optional and default to 255 set_pixel_color <code>set_pixel_color(idx:int, col:color [, bri:int]) -&gt; nil</code>Set led number <code>idx</code> to the specified color. <code>bri</code> (0..255) is optional and default to 255 get_pixel_color <code>get_pixel_color(idx:int) -&gt; color:int</code>Returns the color (including brightness and gamma correction) of led number <code>idx</code> set_gamma <code>set_gamma(gamma:bool) -&gt; nil</code>Sets whether gamma correction is applied get_gamma <code>get_gamma() -&gt; bool</code>Returns whether gamma correction is applied set_bri <code>set_bri(bri:int) -&gt; nil</code>Sets the brightness (0..255) get_bri <code>get_bri() -&gt; int</code>Returns the current brightness set_animate <code>set_animate(animate) -&gt; nil</code>Sets the animation object attached to this strip get_animate <code>get_animate() -&gt; instance</code>Returns the animation object attached to this strip gamma <code>gamma:bool</code>Applies gamma correction if <code>true</code> (default) pixels_buffer <code>pixels_buffer() -&gt; bytes()</code>Returns the internal buffer used by NeoPixelBus. The <code>byte()</code> object points to the original buffer, no new buffer is allocated; which means that raw data can be changed directly. Don't forget to call <code>dirty()</code> and <code>show()</code> afterwards"},{"location":"Berry_Addressable-LED/#advanced-features","title":"Advanced features","text":""},{"location":"Berry_Addressable-LED/#hardware-rmt-channels","title":"Hardware <code>RMT</code> channels","text":"<p>This library uses NeoPixelBus library, and <code>RMT</code> hardware support in ESP32. The number of <code>RMT</code> channels, hence the number of simultaneous strips, depends on the CPU type. Tasmota native support for WS2812 uses <code>RMT</code> channel 0; it is not usable in such case.</p> CPU type RMT channels ESP32 8 ESP32S2 4 ESP32C3 2 <p>Currently <code>RMT</code> channel 0 is used by default if no GPIO <code>WS2812-1</code> is configured, <code>RMT</code> channel 1 otherwise.  </p>"},{"location":"Berry_Addressable-LED/#pixmat-class-for-2d-pixel-buffers","title":"pixmat class for 2D pixel buffers","text":"<p>The <code>pixmat</code> class provides a native high-performance 2D pixel buffer abstraction for Berry. It supports mono (1\u2011bpp), RGB (3\u2011bpp), and RGBW (4\u2011bpp) formats, with optional serpentine layout.</p>"},{"location":"Berry_Addressable-LED/#constructor","title":"Constructor","text":"Overload Description <code>pixmat(bitplane_bytes:bytes, bytes_per_line:int)</code> Creates a 1\u2011bpp mono matrix from packed bitplane data. Each bit becomes a pixel (0 or 255). <code>pixmat(buf:bytes, width:int, height:int, bpp:int[, serpentine:bool])</code> Wraps an existing pixel buffer. No copy is made. <code>bpp</code> is bytes per pixel (1=mono, 3=RGB, 4=RGBA). <code>serpentine</code> reverses odd rows if <code>true</code>. <code>pixmat(width:int, height:int, bpp:int[, serpentine:bool])</code> Allocates a new zero\u2011filled buffer with given dimensions and pixel format. <ul> <li><code>bitplane_bytes</code>: packed bits (1\u2011bpp), each bit becomes a pixel (0 or 255)</li> <li><code>buf</code>: external buffer to wrap (no copy)</li> <li><code>width</code>, <code>height</code>: pixel dimensions</li> <li><code>bpp</code>: bytes per pixel (1=mono, 3=RGB, 4=RGBW)</li> <li><code>serpentine</code>: if true, odd rows are reversed in memory</li> </ul>"},{"location":"Berry_Addressable-LED/#methods","title":"Methods","text":"Method Description <code>pixmat.clear([val:int])</code> Fills the entire matrix with <code>val</code> (default 0). For mono: luminance. For RGB/RGBA: all channels. <code>pixmat.get(x:int, y:int)</code> \u2192 <code>int</code> or <code>list</code> Returns pixel value at <code>(x, y)</code>. Packed int for mono/RGB/RGBA, list for other bpp. <code>pixmat.set(x:int, y:int, rgb:int[, bri:int])</code> Sets pixel at <code>(x, y)</code> using packed RGB (<code>0xRRGGBB</code>). Optional brightness scaling. <code>pixmat.set(x:int, y:int, h:int, s:int, v:int[, bri:int])</code> Sets pixel using HSV values. Converts to RGB internally. Optional brightness. <code>pixmat.blit(src:pixmat, dx:int, dy:int[, bri:int][, tint:int])</code> Copies pixels from <code>src</code> matrix with optional brightness and RGB tint. Supports mono\u2192color expansion. <code>pixmat.scroll(dir:int[, src:pixmat])</code> Scrolls matrix content by one pixel. <code>dir</code>: 0=up, 1=left, 2=down, 3=right. Optional <code>src</code> fills vacated row/column. <ul> <li><code>clear(val)</code>: fills matrix with value (default 0)</li> <li><code>get(x,y)</code>: returns pixel value (packed int or list)</li> <li><code>set(x,y,rgb)</code>: sets pixel with packed RGB</li> <li><code>set(x,y,h,s,v)</code>: sets pixel with HSV (converted internally)</li> <li><code>blit(src, dx, dy)</code>: copies pixels from another matrix, for mono source 0 becomes transparent</li> <li><code>scroll(dir)</code>: scrolls content by one pixel (0=up, 1=left, 2=down, 3=right)</li> </ul>"},{"location":"Berry_Addressable-LED/#notes","title":"Notes","text":"<ul> <li>All operations are in-place and use integer math</li> <li>Brightness and tinting are supported in <code>set()</code> and <code>blit()</code></li> <li>Mono\u2192color expansion is automatic when blitting</li> <li>Ideal for use with <code>Leds.pixels_buffer()</code> to drive 2D LED panels</li> </ul>"},{"location":"Berry_Addressable-LED/#example","title":"Example","text":"<pre><code>var strip = Leds(256, gpio.pin(gpio.WS2812, 32))\nvar m = pixmat(strip.pixels_buffer(), 32, 8, strip.pixel_size(), true)\nm.set(0, 0, 0xFF0000)  # top-left pixel red\nstrip.show()\n</code></pre> <p>A few more examples can be found here.</p>"},{"location":"Berry_Addressable-LED/#wled-palettes-reference","title":"WLED Palettes Reference","text":"<p>This page displays all 59 WLED gradient palettes available in the Berry Animation Framework.</p>"},{"location":"Berry_Addressable-LED/#palette-gallery","title":"Palette Gallery","text":"Palette Gradient <code>Analogous</code>5 color stops <code>April Night</code>17 color stops <code>Aqua Flash</code>7 color stops <code>Atlantica</code>6 color stops <code>Aurora</code>6 color stops <code>Aurora 2</code>5 color stops <code>Autumn</code>13 color stops <code>Beach</code>6 color stops <code>Beech</code>15 color stops <code>Blink Red</code>8 color stops <code>Breeze</code>4 color stops <code>C9</code>8 color stops <code>C9 2</code>10 color stops <code>C9 New</code>8 color stops <code>Candy2</code>10 color stops <code>Candy</code>5 color stops <code>Cyane</code>11 color stops <code>Departure</code>12 color stops <code>Drywet</code>7 color stops <code>Fairy Reaf</code>4 color stops <code>Fire</code>13 color stops <code>Grintage</code>5 color stops <code>Hult64</code>8 color stops <code>Hult</code>6 color stops <code>Icefire</code>7 color stops <code>Jul</code>4 color stops <code>Landscape</code>9 color stops <code>Light Pink</code>11 color stops <code>Lite Light</code>6 color stops <code>Magenta</code>7 color stops <code>Magred</code>5 color stops <code>Orangery</code>9 color stops <code>Orange &amp; Teal</code>4 color stops <code>Pastel</code>11 color stops <code>Pink Candy</code>7 color stops <code>Red &amp; Blue</code>9 color stops <code>Red Flash</code>5 color stops <code>Red Reaf</code>4 color stops <code>Red Shift</code>7 color stops <code>Red Tide</code>11 color stops <code>Retro Clown</code>3 color stops <code>Rewhi</code>6 color stops <code>Rivendell</code>5 color stops <code>Sakura</code>5 color stops <code>Semi Blue</code>9 color stops <code>Sherbet</code>7 color stops <code>Splash</code>5 color stops <code>Sunset2</code>8 color stops <code>Sunset</code>7 color stops <code>Temperature</code>18 color stops <code>Tertiary</code>5 color stops <code>Tiamat</code>11 color stops <code>Toxy Reaf</code>2 color stops <code>Traffic Light</code>4 color stops <code>Vintage</code>8 color stops <code>Yelblu</code>5 color stops <code>Yelblu Hot</code>7 color stops <code>Yellowout</code>2 color stops <code>Yelmag</code>7 color stops"},{"location":"Berry_Addressable-LED/#credits","title":"Credits","text":"<ul> <li>WLED Palettes: From WLED Project by Aircoookie</li> <li>Conversion: For Tasmota Berry Animation Framework</li> <li>Total Palettes: 59 gradient palettes</li> </ul>"},{"location":"Blinds-and-Shutters/","title":"Shutters and Blinds","text":"<p>Control blinds and roller shades connected to regular ON/OFF motors,stepper motors or position servos</p> <p>Before starting you have to enable shutter support with <code>SetOption80 1</code></p> <p>There is a new enhanced ESP32 version you can enable with the following compiler option <code>#define USE_SHUTTER_ESP32</code>. Will be default in future versions for ESP32 after some testing. New features most likely only in ESP32 due to memory limitations in ESP8266.  Current feature set: </p> <ul> <li>up to 16 shutters, </li> <li>up to 32 shutterbuttons, </li> <li>tilt definition with buttons. </li> <li>Configuration saved to filesystem.</li> <li>shuttersetup for Shelly plus 2PM to automatically measure open and close duration</li> </ul>"},{"location":"Blinds-and-Shutters/#commands","title":"Commands","text":"<p>Complete list of commands is available at Blinds, Shutters and Roller Shades Commands.</p>"},{"location":"Blinds-and-Shutters/#shutter-modes","title":"Shutter Modes","text":"<p>There are five shutter modes which define how the relays operate. Additionally you can define PulseTime on any relay to change the relay into a pulse relay where the pulse changes start/stop. At least for Shutter mode 1 an interlock is mandatory Interlock. </p> <p>The examples below are for a <code>ShutterRelay1 1</code> configuration (using Relay1 and Relay2).</p> <p>Shutter mode 1 - Normal Operation   </p> <p>Relay1: UP/OFF, Relay2: DOWN/OFF  </p> <ul> <li><code>Interlock 1,2</code> (Interlocked relay pair)</li> <li><code>Interlock ON</code></li> </ul> <p>Shutter mode 2 - Circuit Safe (must be set manually)</p> <p>Relay1: ON/OFF, Relay2: UP/DOWN</p> <ul> <li><code>Interlock OFF</code></li> </ul> <p>Shutter mode 3 - Garage Motors (must be set manually) </p> <p>Relay1: OFF/DOWN PULSE, Relay2: OFF/UP PULSE</p> <p>Shutter mode 4 - Stepper Motors (autodetect with PWM and COUNTER)  </p> <p>Relay1: ON/OFF, Relay2: UP/DOWN</p> <ul> <li>PWM: Stepper signal, COUNTER: Stepper position signal</li> <li>PWM and COUNTER defined</li> </ul> <p>Shutter mode 5 - Servo Motors (PWM position based servo)  </p> <p>Relay1: ON/OFF, Relay2: UP/DOWN (optional not used)</p> <ul> <li>PWM: Stepper signal</li> <li><code>PWMfrequency 200</code>   ( This is mandatory for most relay to get correct PWM duty cylces)</li> <li><code>SetOption15 0</code> (required to store value and make it reboot save)</li> </ul> <p>Shutter mode 6 - Servo Motors 360\u00b0 (PWM speed based servo)</p> <p>Relay1: ON/OFF, Relay2: UP/DOWN (optional not used)</p> <ul> <li>PWM: Stepper signal</li> <li><code>PWMfrequency 200</code>   ( This is mandatory for most relay to get correct PWM duty cylces)</li> <li><code>SetOption15 0</code> (required to store value and make it reboot save)</li> </ul> <p>Wiring diagrams for Normal, Stepper motor, and Short Circuit-Safe configurations are available at the end of this page. Even if the shutter does not have two motors, three wires have to be connected.</p> <p>Note</p> <p>After setting the options for shutter mode, the device should be rebooted. Otherwise, the sliders won't be available in the web UI, and the <code>ShutterOpenDuration&lt;x&gt;</code>and  <code>ShutterCloseDuration&lt;x&gt;</code> commands will report \"Shutter unknown\". </p> <p>Issue <code>Shuttermode</code> command and check in console which ShutterMode is displayed: Issue <code>Status 13</code> command and check in console how the shutter is defined</p> <p>If you define <code>Shuttermode 1</code> and there is NO interlock defined on the relay the driver go into ERROR state. To solve define INTERLOCK on the relay pair and set it to ON. Then define <code>ShutterRelay1</code> again.</p> <pre><code>Shutter accuracy digits: 1\nShutter 0 (Relay:1): Init. Pos: 20000 [100 %], Open Vel.: 100 Close Vel.: 100 , Max Way: 20000, Opentime 10.0 [s], Closetime 10.0 [s], CoedffCalc: c0: 0, c1 200, c2: 200, c3: 0, c4: 0, binmask 3, is inverted 1, &lt;span style=\"font-weight:bold;color:lime\"&gt;ShutterMode 0&lt;/span&gt;, motordelay 0\n</code></pre>"},{"location":"Blinds-and-Shutters/#operation","title":"Operation","text":"<p>Turning a device relay on or off directly (i.e., using <code>Power</code>) will function to affect a shutter's movement. In momentary mode (i.e., stepper motor), the relays start or stop the motor. The driver takes care of the direction and proper update of the shutter position.</p> <p>The shutter reports its position and can also be sent to a dedicated position. <code>ShutterPosition 0</code> means the shutter is closed and <code>ShutterPosition 100</code> means the shutter is open. If you need the position values reversed (<code>0</code> = open, <code>100</code> = closed), define and calibrate your shutter as documented below. Then tell Tasmota to reverse the shutter position meaning via the <code>ShutterInvert&lt;x&gt; 1</code> command. All internal calculations are the same (the log output is the same). Only the interaction with the user and other systems changes. Now <code>ShutterPosition&lt;x&gt; 0</code> will open the shutter and <code>ShutterPosition&lt;x&gt; 100</code> will close the shutter. </p> Function ShutterInvert 0 ShutterInvert 1 Relay 1 open shutter open shutter Relay 2 close shutter close shutter Webbutton UP open shutter open shutter Webbutton DOWN close shutter close shutter Slider OPEN open shutter open shutter Slider CLOSE close shutter close shutter ShutterOpen open shutter open shutter ShutterClose close shutter close shutter ShutterPosition 100 open shutter close shutter ShutterPosition 0 close shutter open shutter Reported position when open 100 0 Reported position when close 0 100 <p>To set a value to all shutter you can use the index 0. For example <code>ShutterPosition0 30</code> will move all shutters to 30%. The index 0 also works with all configuration items.</p> <p>When <code>SetOption80 1</code> is invoked you have to define <code>Shutterrelay1 &lt;value&gt;</code> to get started If possible to avoid any injury on unexpected movement all RELAYS should start in OFF mode when the device reboots: <code>PowerOnState 0</code> </p> <p>A maximum of four shutters per device are supported on ESP8266. The newer ESP32 can support up to 16 Shutters with 32 Relays. Nevertheless it might be required to add a GPIO expension board to get enough connectors.</p> <p> </p> <p>To enable additional shutters, <code>ShutterRelay&lt;x&gt; &lt;value&gt;</code> must be executed for each additional shutter. Additional shutter declarations must be sequentially numbered, and without gaps (i.e., second shutter is 2, next shutter 3 and finally shutter 4).</p> <p>Disabling a shutter in the middle of the defined set of shutters will disable all other higher numbered shutters. If the disabled shutter is restored, the higher numbered shutters previously declared will also be restored. When a shutter is added or removed, a list of the active shutters, with their parameters, is output to the log. If you intend to remove shutters, explicitly remove each one beginning with the highest numbered shutter.</p> <p>With four shutters, eight <code>Relay&lt;x&gt;</code> components are needed. If manual operation switches (<code>Switch&lt;x&gt;</code> or <code>Button&lt;x&gt;</code> pairs) are also used, additional input GPIO are required. The ESP82xx device may not have enough free GPIO to support all the shutter connections required. A GPIO expander such as a PCF8574 or MCP230xx can be used with additional effort.</p> <p>When using a switch for manual operation <code>Switch&lt;x&gt;</code> pairs should usually be set to <code>SwitchMode&lt;x&gt; 2</code> (inverse follow) for proper switch behavior.</p> <p>Any shutter positioning can be locked <code>ShutterLock&lt;x&gt; 1</code>. Once executed an ongoing movement is finished while further positioning commands like <code>ShutterOpen&lt;x&gt;</code>, <code>ShutterClose&lt;x&gt;</code>, <code>ShutterStop&lt;x&gt;</code>,  <code>ShutterPosition&lt;x&gt;</code>, ... as well as web UI buttons, web UI sliders, and shutter buttons are disabled. This can be used to lock an outdoor blind in case of high wind or rain. You may also disable shutter positioning games by your children. Shutter positioning can be unlocked using <code>ShutterLock&lt;x&gt; 0</code>. Please be aware that the shutter can still be moved by direct relay control (i.e., <code>Power&lt;x&gt;</code>), or physical switches and buttons. Use the <code>ShutterButton&lt;x&gt;</code> command prior to <code>ShutterLock</code> to be able to lock buttons.</p>"},{"location":"Blinds-and-Shutters/#autosetup-only-shelly-plus-2pm-esp32-based","title":"AutoSetup (Only Shelly plus 2PM, ESP32 based)","text":"<p>The shelly plus has enough memory and a power measuring unit to setup the shutter in a convenient way. First you must callibrate your mechanical endstops of the shutter. Please do as descibed in the documentation of your shutter motors to ensure the shutter will stop at the endpoint correctly.</p> <p>Then close the shutter until endstop is reached (repeat: <code>backlog shuttersetopen;shutterclose</code> until closed) - <code>interlock 1,2</code> - <code>interlock on</code> - <code>shutterrelay1 1</code> - <code>shuttersetup</code> (shutter will start moving....)</p> <p>After setup is started the shutter will move to the upper endpoint and close again. If the shutter stops somewhere in the middle, try again. After setup you can use your shutter. Initial callibration for <code>ShutterSetHalfway</code> is 70. If you want to have it more accurate: <code>backlog shutterclose;ShutterSetHalfway 50</code> and follow instructions below.</p>"},{"location":"Blinds-and-Shutters/#calibration","title":"Calibration","text":"<p>Shutter calibration video tutorial </p> <p>Shutter calibration Google Spreadsheet</p> <ul> <li>Start your shutter in a closed position preferably. Set internal position to closed with <code>ShutterSetClose&lt;x&gt;</code>. </li> <li>Set the time needed to open the shutter completely with <code>ShutterOpenDuration&lt;x&gt;</code>. </li> <li>If the shutter opens more than needed, move it to the desired position with <code>ShutterSetPosition&lt;x&gt;</code> then set the position to fully open (100) with <code>ShutterSetOpen&lt;x&gt;</code> and decrease the open time. </li> <li>Set the time needed to close the shutters with <code>ShutterCloseDuration&lt;x&gt;</code>. </li> <li>If the shutter does not close completely, open again and adjust close time.</li> <li>If it runs too long, move it back to desired closed position with <code>ShutterSetPosition&lt;x&gt;</code>, reset to 0 with <code>ShutterSetClose&lt;x&gt;</code> and decrease open time.</li> <li>Alternate between opening and closing the shutter until you find out the exact times needed to get the same positions multiple times</li> </ul> <p>After calibration is complete, you might want to enable an additional 1 second motor movement with <code>ShutterEnableEndStopTime&lt;x&gt; 1</code> when the shutter is asked to move to its end positions (0% and 100%). With this you can guarantee that end positions are still reached in case of inaccuracies. Take care to disable this with <code>ShutterEnableEndStopTime&lt;x&gt; 0</code> before further open or close duration measurements.</p>"},{"location":"Blinds-and-Shutters/#motor-movement-delays","title":"Motor Movement Delays","text":"<p>Some motors need up to one second after power is turned on before they start moving. You can confirm if you are having this issue if opening and closing as a single action works properly but doing this in smaller steps result in a shift of the position.  </p> <ol> <li><code>Shutterposition&lt;x&gt; 30</code>    Measure the shutter position. This is the <code>reference_position</code></li> <li><code>Shutterposition&lt;x&gt; 80</code>    Measure the shutter position. This is the <code>max_position</code></li> <li><code>Shutterposition&lt;x&gt; 30</code>    Return the shutter to starting position. This must be the same position as measured in step #1 (<code>reference_position</code>). If not, <code>ShutterCloseDuration</code> must be adjusted.  </li> <li><code>Shutterposition&lt;x&gt; 50</code> </li> <li><code>Shutterposition&lt;x&gt; 70</code> </li> <li><code>Shutterposition&lt;x&gt; 80</code>     If you do not reach <code>max_position</code> you have a motor delay problem. Measure the shutter position. This is the <code>real_max</code>. Use this value in the calculation below.  </li> <li><code>ShutterMotorDelay&lt;x&gt; &lt;delay&gt;</code>    Motor <code>&lt;delay&gt;</code> calculation - fine tune in 0.05 second increments (e.g. <code>0.65</code>) as required. <code>&lt;delay&gt; =  ((max_position-real_max) / 2) / (((100/80) * max_position) / ShutterOpenDuration)</code></li> </ol> <p>Close the shutter and repeat this procedure until the motor delay is set properly.  </p> <p>Following defaults are pre-compiled into the code and can only be changed by compiling you own binary and use the <code>user_config.override</code> - In Failsafe-Mode the driver waits for 0.1sec to let the direction relay execute and be stable before switching on the power relay starting the movement. The time in [ms] can be changed by adding following line with a different value: <code>#define SHUTTER_RELAY_OPERATION_TIME 100 // wait for direction relay 0.1sec before power up main relay</code></p>"},{"location":"Blinds-and-Shutters/#coarse-positioning-calibration-halfway-point-only","title":"Coarse Positioning Calibration (Halfway point only)","text":"<p>Some shutters need some time from totally closed until they begin moving the bottom-most part and opening. This often results in a shutter that is less than 50% open when the shutter has been operating for 50% of the set time. This can be corrected by using <code>ShutterSetHalfway&lt;x&gt;</code>. Use this procedure to calibrate the half-open position (alternatively there is a more exact calibration sequence using matrix values available in the next section):</p> <ol> <li><code>ShutterClose&lt;x&gt;</code> (confirm that the shutter is completely closed)</li> <li><code>ShutterSetHalfway&lt;x&gt; 50</code> (reset to default)</li> <li>Move the shutter to actual 50% open position.</li> <li>Use <code>ShutterPosition&lt;x&gt;</code> to inquire the shutter's current position and record the value. This value is a percentage of the total opening (e.g., <code>63</code> = 63% of opening).</li> <li><code>ShutterClose&lt;x&gt;</code></li> <li><code>ShutterSetHalfway&lt;x&gt; 63</code> (using the value from step #4 above)</li> <li><code>Restart 1</code></li> </ol>"},{"location":"Blinds-and-Shutters/#fine-positioning-calibration-calibration-matrix","title":"Fine Positioning Calibration (Calibration Matrix)","text":"<p>If you desire that the %-opening closely match what <code>ShutterPosition&lt;x&gt;</code> and web UI indicate, there is a granular calibration matrix available. Ensure that <code>ShutterClose&lt;x&gt;</code> and <code>ShutterOpen&lt;x&gt;</code> moves the shutter more or less to the limit positions and follow this procedure:</p> <ol> <li><code>ShutterSetHalfway&lt;x&gt; 50</code> (reset to default)</li> <li><code>ShutterCalibration&lt;x&gt; 30 50 70 90 100</code> (reset to default)</li> <li><code>ShutterClose&lt;x&gt;</code></li> <li>Move the shutter to each of the following opening percentages and measure the shutter's position for each. <ol> <li><code>ShutterPosition&lt;x&gt; 30</code> (e.g., measurement = <code>15</code>)</li> <li><code>ShutterPosition&lt;x&gt; 50</code> (e.g., measurement = <code>50</code>)</li> <li><code>ShutterPosition&lt;x&gt; 70</code> (e.g., measurement = <code>100</code>)</li> <li><code>ShutterPosition&lt;x&gt; 90</code> (e.g., measurement = <code>150</code>)</li> <li><code>ShutterPosition&lt;x&gt; 100</code> (e.g., measurement = <code>180</code>)</li> </ol> </li> <li>Finally, enter the position measurements as the calibration values: <code>ShutterCalibration&lt;x&gt; 15 50 100 150 180</code> </li> </ol> <p><code>ShutterCalibration&lt;x&gt;</code> takes position measurements (not the time it takes to move). During calibration you position the shutter to an indicated percentage (e.g., <code>30%</code>) of opening and measure the shutter position (e.g., <code>15</code>). Use the same unit of measure for all your measurements (e.g., centimeters, inches, steps, etc.). After calibration <code>ShutterPosition&lt;x&gt; 30</code> will move to <code>30%</code> opening. This will be 30% from  <code>180</code> (full open) == <code>54</code>. Now the percentage match the percent in cm/inch/steps.</p> <p>Notice that there is no calibration for the 10% position. On many shutters, there is no movement during the initial phase (i.e., nearly 10% of total time). Therefore the opening could be <code>0</code>. This measurement would cause an execution DIV 0 exception. Therefore the first calibration point is 30%. In most cases this is not a large opening so the calibration will be near enough. Yes, until ~10%, the position will be a bit \"off\" but not enough for concern. </p>"},{"location":"Blinds-and-Shutters/#motor-stop-time","title":"Motor Stop time","text":"<p>When shutters change direction immediatly it can happen that there is a short circuit or at least high moments on the motors. Therfore the default time between a STOP and the next START of the shutter is 0.5s = 500ms. This allows in most cases the shutter to fully stop and then start from a static position. With Version 12.3 you can change the duration through <code>shuttermotorstop 500</code> or any other value in ms. The value is for all defined shutters the same.</p> <p>WARNING: If you control the relay DIRECT through buttons or switches and do not use shutterbuttons or a rule to decouple it, then the MOTOSTOPTIME cannot kick in. The Relay is ON before the shutterdriver can intercept.</p>"},{"location":"Blinds-and-Shutters/#button-control","title":"Button Control","text":"<p>When shutter is running in <code>ShutterMode 1</code> (normal two relay up/off down/off), you already have basic control over the shutter movement using switches or buttons in the module configuration to directly drive the shutter relays. For short circuit safe operation <code>ShutterMode 2</code> direct control of the relays will not give you a nice user interface since you have to 1st set the direction with one switch/button and 2nd switch on the power by the other switch/button. Because the button controll use multi-press events ensure that the \"immediate action\" is disabled: <code>SetOption13 0</code> (default)</p> <p>To have shutter mode independent button control over the shutter and not over its relays one can use the <code>ShutterButton&lt;x&gt;</code> command. It also introduces some more features, see below:</p> <p><code>ShutterButton&lt;x&gt; &lt;button&gt; &lt;func&gt; &lt;mqtt&gt;</code> </p> <p>This assigns a Tasmota button <code>&lt;button&gt;</code> to control your shutter <code>&lt;x&gt;</code> having functionality <code>&lt;func&gt;</code>. The Tasmota button <code>&lt;button&gt;</code> must already be configured in the module configuration. You can assign multiple buttons to a single shutter. Any button can only control one shutter (beside the <code>&lt;mqtt&gt;</code> broadcast feature, see description below). Any press of the button while the shutter is moving will immediately stop the shutter.</p> <p>One can remove all button control for shutter <code>&lt;x&gt;</code> by <code>ShutterButton&lt;x&gt; 0</code>. </p> <p>The assigned button can have one of the following functionalities:</p> <ul> <li> <p>Setup for an \"up\" button: <code>ShutterButton&lt;x&gt; &lt;button&gt; up &lt;mqtt&gt;</code>     Single press will move shutter to 100%, double press to 50% and triple press to 74%. Holding the button for more than the hold time (<code>SetOption32</code>) moves all shutters with same <code>&lt;grouptopic&gt;</code> to 100% when <code>&lt;mqtt&gt;</code> is equal to <code>1</code>. When <code>&lt;mqtt&gt;</code> is equal to <code>0</code> hold action of this button is same as single press.</p> </li> <li> <p>Setup for a \"down\" button: <code>ShutterButton&lt;x&gt; &lt;button&gt; down &lt;mqtt&gt;</code>     Single press will move shutter to 0%, double press to 50% and triple press to 24%. Holding the button for more than the hold time (SetOption32) moves all shutters with same <code>&lt;grouptopic&gt;</code> to 0% when <code>&lt;mqtt&gt;</code> is equal to <code>1</code>. When <code>&lt;mqtt&gt;</code> is equal to <code>0</code> hold action of this button is same as single press. </p> </li> <li> <p>Setup for an \"updown\" button: <code>ShutterButton&lt;x&gt; &lt;button&gt; updown &lt;mqtt&gt;</code>     Single press will move shutter to 100%, double press down to 0% and triple press to 50%. No hold action and no other shutter control by MQTT, <code>&lt;mqtt&gt;</code> is don't care here.</p> </li> <li> <p>Setup for a \"toggle\" button: <code>ShutterButton&lt;x&gt; &lt;button&gt; toggle &lt;mqtt&gt;</code>    Single press will toggle shutter, double press will move it to 50%. Be aware that the toggle select direction based on the current position. If the position is between 0..50% the shutter move to 100%. If the position is 51%..100% it moves to 0%. No hold action and no other shutter control by MQTT, <code>&lt;mqtt&gt;</code> is don't care here.</p> </li> </ul> <p>More advanced control of the button press actions is given by the following <code>ShutterButton&lt;x&gt;</code> command syntax:</p> <p><code>ShutterButton&lt;x&gt; &lt;button&gt; &lt;p1&gt; &lt;p2&gt; &lt;p3&gt; &lt;ph&gt; &lt;m1&gt; &lt;m2&gt; &lt;m3&gt; &lt;mh&gt; &lt;mi&gt;</code> </p> <p><code>&lt;button&gt;</code> ESP8266:<code>1..4</code>,ESP32:<code>1..32</code> : Button number, <code>0/-</code>: disable buttons for this shutter<code>&lt;p1&gt;</code> <code>0..100</code>: single press position, <code>t</code>: toggle, <code>-</code>: disable, <code>--0..100</code> or <code>++0..100</code> single press increment position<code>&lt;p2&gt;</code> <code>0..100</code>: double press position, <code>t</code>: toggle, <code>-</code>: disable, <code>--0..100</code> or <code>++0..100</code> double press increment position<code>&lt;p3&gt;</code> <code>0..100</code>: triple press position, <code>t</code>: toggle, <code>-</code>: disable, <code>--0..100</code> or <code>++0..100</code> tripple press increment position<code>&lt;ph&gt;</code> <code>0..100</code>: hold press position, shutter stop after releasing the hold button if no group send <code>&lt;mh&gt;</code> is defined. If<code>&lt;mh&gt;</code> is 1 the release of the botton will NOT stop any shutter, <code>t</code>: toggle, <code>-</code>: disable<code>&lt;m1&gt;</code> <code>1</code>: enable single press position MQTT broadcast, <code>0/-</code>: disable<code>&lt;m2&gt;</code> <code>1</code>: enable double press position MQTT broadcast, <code>0/-</code>: disable<code>&lt;m3&gt;</code> <code>1</code>: enable triple press position MQTT broadcast, <code>0/-</code>: disable<code>&lt;mh&gt;</code> <code>1</code>: enable hold press position MQTT broadcast, <code>0/-</code>: disable<code>&lt;mi&gt;</code> <code>1</code>: enable MQTT broadcast to all shutter indices, <code>0/-</code>: disable</p> <p>Parameters are optional. When missing, all subsequent parameters are set to <code>disable</code>.</p> <p>ESP32 only: <code>&lt;p0..h&gt;</code> can be optional extended with a dedicated position of the tilt if a venetian blind is configured and supported. The position of the tilt can be added after the normal position with a <code>/</code> as seperator. This is optional. Example: <code>shutterbutton1 1 100/-90 50/0 75/-90 100 - - 1 1</code>. Tilt and position also support increment or decrement position from current state with <code>--</code>oder <code>++</code>.</p> <p>By a button single press the shutter is set to position <code>&lt;p1&gt;</code>.  Double press will drive the shutter to position <code>&lt;p2&gt;</code> and  triple press to position <code>&lt;p3&gt;</code>. Holding the button for more than the <code>SetOption32</code> time sets the shutter position to <code>&lt;ph&gt;</code> max if button is hold until position. If the hold button is released during the shutter moves the shutter will stop. Any button action <code>&lt;p1&gt;</code> to <code>&lt;ph&gt;</code> can be disabled by setting the parameter to <code>-</code>. Independent from configuration <code>&lt;p1&gt;</code> to <code>&lt;ph&gt;</code> any press of the button while the shutter is moving will immediately stop the shutter.</p> <p>Ensure that you set a value higher than 5 for <code>SetOption32</code> (0.6 seconds is the minimum possible time). Lower values will not trigger the hold action for <code>ShutterButton</code>, and the shutter will not move.</p> <p>Global steering of all your shutters at home is supported by additional MQTT broadcast. By any button action a corresponding MQTT command can be initiated to the <code>&lt;grouptopic&gt;</code> of the device. For single press this can be enabled by <code>&lt;m1&gt;</code> equal to <code>1</code>, disabling is indicated by <code>-</code>. Double to hold MQTT configurations are given by <code>&lt;m2&gt;</code> to <code>&lt;mh&gt;</code>, correspondingly. When <code>&lt;mi&gt;</code> is equal to <code>-</code> only <code>cmnd/&lt;grouptopic&gt;/Shutterposition&lt;x&gt; &lt;p1..h&gt;</code> is fired. When <code>&lt;mi&gt;</code> is equal to <code>1</code>, <code>&lt;x&gt;</code>=<code>1..4</code> is used to control any shutter number of a Tasmota device having same <code>&lt;grouptopic&gt;</code>.</p> <pre><code>ShutterButton&lt;x&gt; &lt;button&gt; 100 50 74 100 0 0 0 1 1` is same as `ShutterButton&lt;x&gt; &lt;button&gt; up 1\nShutterButton&lt;x&gt; &lt;button&gt; 0 50 24 0 0 0 0 1 1` is same as `ShutterButton&lt;x&gt; &lt;button&gt; down 1\nShutterButton&lt;x&gt; &lt;button&gt; 100 0 50 - 0 0 0 0 0` is same as `ShutterButton&lt;x&gt; &lt;button&gt; updown 0\nShutterButton&lt;x&gt; &lt;button&gt; t 50 - - 0 0 0 0 0` is same as `ShutterButton&lt;x&gt; &lt;button&gt; toggle 0\n</code></pre> <p>Module WiFi setup, restart, upgrade and reset according to Buttons and Switches are supported \"child and fool proof\" only when no button restriction (<code>SetOption1</code>) is given and when all configured shutter buttons of that shutter are pressed 5x, 6x, 7x times or hold long simultaneously.</p>"},{"location":"Blinds-and-Shutters/#remote-control","title":"Remote Control","text":"<p>Use any other Tasmota device with buttons or switches to control remotely a shutter using rules. Similar behavior as direct button control can be achieved by applying <code>ShutterStopClose, ShutterStopOpen, ShutterStopToggle, ShutterStopPosition</code> commands. They stop shutter movement if it is in motion and otherwise execute close, open, toggle or position commands.</p> <p>Run this rule on another Tasmota device with a switch configured.</p> <pre><code>rule1 on switch1#state=2 do publish cmnd/%shutter-topic%/ShutterStopToggle endon\n</code></pre>"},{"location":"Blinds-and-Shutters/#using-rules","title":"Using Rules","text":"<p>Shutters can be used in rules to react on sensor data. Durign shutter operations data from all shutters is send every second to inform about current position, target, direction and the tilt (if supported). As usual with rules the compare operator can be used. Examples:</p> <pre><code>rule1 on shutter1#direction=0 do &lt;echo shutter1 stopped&gt; endon\nrule1 on shutter2#position do var1 = %value% endon\nrule1 on shutter#moving do &lt;echo at least one shutter start moving&gt; endon\nrule1 on shutter#moved do &lt;echo on shutter just stopped moving&gt; endon\n</code></pre> <p>Additionally all commands are send as rules and can be used to trigger an action</p> <pre><code>rule1 on shutterposition1=0 do &lt;echo shutter 1 is closing&gt; endon\n</code></pre>"},{"location":"Blinds-and-Shutters/#specific-configuration","title":"Specific Configuration","text":"<p>Note</p> <p>The PWM remains on even after the end position has been reached. The motor then permanently tries to hold the position and could thereby trigger noises or a slight \"twitching\". If this is not desired, you can switch off the PWM after reaching the end position with <code>#define SHUTTER_CLEAR_PWM_ONSTOP</code>. </p>"},{"location":"Blinds-and-Shutters/#pulse-motors","title":"Pulse Motors","text":"<p>There are shutters that have two or three relays but only need a pulse to start or stop. Depending on the current situation a pulse will stop the shutter or send it into a specific direction. To use these kinds of shutters a <code>PulseTime</code> must be defined on each relay. The minimum setting that seems to make it work consistently is <code>2</code>. A setting of <code>1</code> does not work. If the shutter moves too fast and does not react to a stop command, increase the setting to <code>3</code> or <code>4</code>.  If there is a dedicated relay for STOP and the other relays are only for OPEN and CLOSE you can enable this configuration e.g. on shutter one through: <code>shutterStopRelay1 1</code>. In this case a pulse will send to RELAY3 for stop and RELAY1 is for OPEN and RELAY2 for CLOSE only. </p>"},{"location":"Blinds-and-Shutters/#stepper-motors","title":"Stepper Motors","text":"<p>Stepper motors can also be used to operate shutters and blinds. Additionally you can operate sliding doors with this configuration. Currently ESP32 12.0.2  does not support shutter with stepper motors. ESP8266 and ESP32 12.0.3+ supports up to 4 shutters. </p>"},{"location":"Blinds-and-Shutters/#servo-motors","title":"Servo Motors","text":"<p>Servos are small devices with typical 180\u00b0 or 360\" rotation movement. The position will be drived by the PWM duty cycle time. This will all automatically calculated</p> <p>If you miss low angles (i.e 2\u00b0) you should be able to get this by changing the minimum <code>ShutterPWMRange</code>. If this does not help you can customize <code>PwmFrequency</code>. Normally for PWM servos, there is no calibration required, but you have the option to do a calibration. Check the documentation for shuttercallibration. Maybe <code>ShutterSetHalfway</code> is already enough. Otherwise you can do a fine granular calibration.</p> <p>If you change the shutteropenduration/closeduration the servo will operate slower, but now the servo also achieves small angle changes.</p> <p>Servo controlled by PWM pulses. The angle to which the servo should be set is regulated by the pulse width. The servo has no direction of rotation (clockwise or counterclockwise), but only the rotation angle of the output shaft.</p> <p>Servo controlled by PWM pulses. The angle to which the servo should be set is regulated by the pulse width. The servo has no direction of rotation (clockwise or counterclockwise), but only the rotation angle of the output shaft.</p> <p>To operate a servo requires signal uses:</p> <ul> <li><code>EN</code> (enable) turn on / off servo.</li> <li><code>PLS</code> (pulse) for controls rotation angl.</li> <li><code>DIR</code> (direction) only shows the direction of rotation, but does not control it.</li> </ul>"},{"location":"Blinds-and-Shutters/#more-information","title":"More information:","text":"<ul> <li>Wikipedia</li> <li>How to Mod a Servo to Get Closed Loop Feedback</li> <li>as5600 + Servo motor</li> </ul>"},{"location":"Blinds-and-Shutters/#example-configuration","title":"Example configuration","text":"<p><code>EN</code> and <code>DIR</code> are on <code>Relay1</code> and <code>Relay2</code> respectively. Remember to use a non-inverse relay for the enable signal. The <code>PLS</code> signal is assigned as a <code>PWM&lt;x&gt;</code> component where <code>&lt;x&gt;</code> matches the number of the shutter (e.g., <code>PWM1</code> for <code>Shutter1</code>).</p> <p>The PWM frequency must be set with the <code>PWMfrequency 200</code> command. The frequency setting is a global setting all PWM components on the device. This means that all shutters on the device will operate at the same speed.</p> <p>Using the <code>ShutterMotorDelay</code> command to provide a slow increase / decrease in speed. This causes the driver to ramp the speed up and down during the defined duration. The change of the ShutterMotorDelay does NOT change the distance the shutter makes. This is very convinent to trim the accelerate and decelerate rate without changeing the distance.</p> <p><code>ShutterOpenDuration</code> and <code>ShutterCloseDuration</code> define the open / close time. By changing the times you adjust the speed of the servo output shaft. <code>ShutterOpenDuration</code> and <code>ShutterCloseDuration</code> can be different.</p> <p>Using the <code>ShutterPwmRange</code> command to set the pulse width range. The calculation of parameters for <code>ShutterPwmRange</code> is obtained by dividing by 5 the minimum and maximum values of the pulse width range.</p>"},{"location":"Blinds-and-Shutters/#note","title":"Note!","text":"<p>Even within the same servo model, there may be manufacturing tolerances that result in a different operating range of pulse lengths. For accurate operation, each specific servo must be calibrated: through experiments, it is necessary to select the correct range that is specific to it.</p> <p>For example the pulse width range for different servos:</p> <ul> <li>Servo MG90 (180\u00b0): pulse width range 544 - 2400microseconds, <code>ShutterPwmRange</code> 109, 480</li> <li>Servo TD-8130MG (180\u00b0): pulse width range 500 - 2500microseconds, <code>ShutterPwmRange</code> 100, 500</li> </ul>"},{"location":"Blinds-and-Shutters/#servo-datasheet","title":"Servo datasheet:","text":"<ul> <li>Servo MG90</li> <li>Servo TD-8130MG</li> <li>Servo DS5160ssg</li> </ul>"},{"location":"Blinds-and-Shutters/#how-to-use-it","title":"How to use it:","text":"Wemos Pin GPIO Component Servo Signal D3 0 Relay1 EN D4 2 PWM1 PLS D5 14 Relay2 DIR <p>Important: Please do the first start after configure without any load on the servo. If the shutterposition and servo position are not in sync the servo will change to the start position without speed and acceleration control like later in normal operation.</p> <ul> <li>Run commands in the console to run the \"Shutter\" mode (you must first configure the GPIO!): <code>SetOption80 1</code>     // enable Shutters support. <code>shutterrelay1 1</code>   // Define that RELAY1 is for ON/OFF and PWM1 drive position <code>Shuttermode 5</code>     // enable Shutter mode for servo. <code>PWMfrequency 200</code>  // this is a global variable for all Servos. <code>SetOption15 0</code>     // to control the storage of values.  </li> <li>Run commands in the console to configure the motor operation: <code>ShutterPwmRange1 100, 500</code>  //this is a global variable for all Servos. <code>ShutterOpenDuration1 0.5</code>   // define the open time, in seconds. <code>ShutterCloseDuration1 0.5</code>  // define the close time, in seconds. <code>ShutterMotorDelay1 0.2</code>     // servo does not like abrupt start / stop. <code>Restart 1</code> </li> <li>Run commands in the consolee to test the motor operation: <code>ShutterOpen1</code>      // to open the SERVO#1. <code>ShutterStop1</code>      // to stop the SERVO#1. <code>ShutterClose1</code>     // to close the SERVO#1.  </li> <li>Perform the shutter calibration  (optional).</li> </ul>"},{"location":"Blinds-and-Shutters/#motor-wiring-diagrams","title":"Motor Wiring Diagrams","text":""},{"location":"Blinds-and-Shutters/#one-shutter","title":"One Shutter","text":"<ul> <li>Diagram v512: Minimum configuration for one servo, power on continuously.   </li> </ul>"},{"location":"Blinds-and-Shutters/#dual-shutter","title":"Dual Shutter","text":"<ul> <li>Diagram v522: Optimal configuration for two servos, power is supplied through the relay.   </li> <li>Diagram v532: Maximum configuration for two servos, power is supplied via the relay only if the servo is running. Current control for each servo drive via INA219.   </li> </ul>"},{"location":"Blinds-and-Shutters/#additional-information","title":"Additional Information:","text":""},{"location":"Blinds-and-Shutters/#dc-motors","title":"DC Motors","text":"<p>More info</p>"},{"location":"Blinds-and-Shutters/#smooth-ramp-up-and-ramp-down-support","title":"Smooth RAMP-UP and RAMP-DOWN Support","text":"<p>Servos and Steppers also have a velocity control. With <code>ShutterMotorDelay&lt;x&gt; 1.5</code> you can define a 1.5second soft start/stop before the device reaches it final moving speed. Usefull for moving heavy items like doors.</p>"},{"location":"Blinds-and-Shutters/#using-normal-motors","title":"using normal Motors","text":""},{"location":"Blinds-and-Shutters/#short-circuit-safe-wire-configuration-with-a-pcf-as-digital-io-avoid-electrical-shortage-also-on-wrong-configuration","title":"Short Circuit safe wire configuration with a PCF as digital I/O. Avoid electrical shortage also on wrong configuration.","text":""},{"location":"Blinds-and-Shutters/#using-stepper-motors","title":"using Stepper Motors","text":"<p>Stepper motors can be used to operate shutters and blinds. The configuration is very similar to the  Circuit Safe (Shuttermode 1) configuration. To operate a stepper motor requires driver module such as the A4988 and uses EN (enable), DIR (direction), STP (Stepper) for controls. If everything is defined correctly Shuttermode 4 will be reported at boot time. ESP8266 only supports one shutter with steppermotors. ESP32 up to 4.</p> <p>Tasmota supports a maximum of four shutters with one stepper motor per shutter simultaneously. In very rare conditions where two or more shutters simultaneously move the last mm it can happen than one shutter moves to far.   </p> <ul> <li>Stepper drivers configuration tutorials:  <ul> <li>A4988</li> <li>DRV8825</li> <li>TMC2208 </li> </ul> </li> <li>Modifying a 28BYJ-48 12V stepper motor from unipolar to bipolar tutorial </li> <li>Bill of Materials </li> </ul>"},{"location":"Blinds-and-Shutters/#example-configuration_1","title":"Example configuration","text":"<p><code>EN</code> and <code>DIR</code> are on <code>Relay1i</code> and <code>Relay2</code> respectively. Please be aware to use the inverse relay for the enable signal.  </p> <p>The <code>STP</code> signal is assigned as a <code>PWM&lt;x&gt;</code> component where <code>&lt;x&gt;</code> matches the number of the shutter (e.g., <code>PWM1</code> for <code>Shutter1</code>). The shutter feature adjusts the PWM frequency to operate the motor for proper shutter operation. The stepper motor frequency setting is a global setting all PWM components on the device. This means that all shutters on the device will operate at the same speed. Therefore no PWM devices other than shutters can be connected to the same Tasmota device. To get in the UI the light sliders hidden you must set <code>setoption15 0</code></p> <p>The frequency of the PWM can be changed from 1000Hz to any value up to 10,000Hz. The command <code>ShutterFrequency</code> globally changes this. Be aware that most 12V operated motors cannot work faster than 2,000Hz. 5,000Hz.10,000Hz is possible by increasing the supplied voltage to 24V and use <code>ShutterMotorDelay</code> to allow a slow speed up/speed down. The maximum voltage of the A4988 is 36V. The TMC2208 is much more silent than the others but also significant slower and does not like high frequencies. For example, the speed at 24V is half o A4988</p> <p>Finally a GPIO must be assigned as <code>Counter1</code>. This counter is used to keep track of the steps and send the stepper to the correct position. The <code>Counter1</code> GPIO must be connected to the <code>PWM1</code> GPIO. Otherwise the stepper and your shutter will run continually or freeze up randomly.</p> <p>Only bipolar stepper motors may be used (see above).  </p> <p>You must properly configure the stepper motor driver (see above).</p> <p><code>ShutterOpenDuration</code> and <code>ShutterCloseDuration</code> can be different. Shutter with Stepper motors always match positions exact. There is no need to vary <code>ShutterOpenDuration</code> and <code>ShutterCloseDuration</code>. Anyhow, if you decrease <code>ShutterCloseDuration</code> the Shutter will close with a higher speed on a virtual higher <code>ShutterFrequency</code> if possible. Same vice versa.</p> <p>You can define a soft start/stop by defining a <code>ShutterMotorDelay</code>. This causes the driver to ramp the speed up and down during the defined duration. The change of the <code>ShutterMotorDelay</code> does NOT change the distance the shutter makes. This is very convenient to trim the accelerate and decelerate rate without changing the distance.</p> Wemos Pin GPIO Component Stepper Signal D1 5 Relay1i EN D2 4 Relay2 DIR D3 0 PWM1 STP D4 2 Counter1 STP <p>a) Set ShutterMode 4 <code>Backlog PulseTime1 0; PulseTime2 0</code>   // for relay Relay1i and Relay2 <code>Interlock OFF</code>                        // this is a global variable for all Relays or at least the RELAYS NOT in the Interlock group    <code>setoption15 0</code>                        // remove any light sliders from the UI    PWM1 and COUNTER1 defined</p> <p>b) Enable Shutters <code>SetOption80 1</code>   // this is a global variable for all Shutters  </p> <p>c) Configure Shutter 1 and test ShutterMode 1 is working <code>ShutterRelay1 1</code>   // for relay Relay1i and Relay2</p> <p>d) Set the stepper motor speed (optional setting) <code>ShutterFrequency 1500</code>  // this is a global variable for all steppers (1000rpm by default)</p> <p>e) Set at least a small ramp-up/ramp down period 1.0 second (optional) <code>ShutterMotorDelay1 1.0</code>  // Stepper do not like infinite momentum. Ramp up/down speed allow much higher frequencies.</p> <p>f) Restart Tasmota <code>Restart 1</code></p> <p>g) Test the shutter <code>ShutterOpen1</code> <code>ShutterStop1</code>      // to stop the STEPPER1 <code>ShutterClose1</code> <code>ShutterInvert1</code>    // to change the direction of rotation of the STEPPER1  </p> <p>h) Perform the shutter calibration </p>"},{"location":"Blinds-and-Shutters/#configuration-for-additional-shutters","title":"Configuration for additional shutters","text":"<p>You must first set up the first shutter and only then the next.  </p> Wemos Pin GPIO Component Stepper Signal D5 14 Relay3i EN D6 12 Relay4 DIR D7 13 PWM2 STP D8 15 Counter2 STP <p>a) Set ShutterMode 4 <code>Backlog PulseTime3 0; PulseTime4 0</code>   // for relay Relay3i and Relay4   PWM2 and COUNTER2 defined</p> <p>c) Configure Shutter 2 and test ShutterMode 1 is working <code>ShutterRelay2 3</code>   // for relay Relay3i and Relay4</p> <p>b) Restart Tasmota <code>Restart 1</code></p> <p>d) Test the shutter <code>ShutterOpen2</code> <code>ShutterStop2</code>     // to stop the STEPPER2 <code>ShutterClose2</code> <code>ShutterInvert2</code>   // to change the direction of rotation of the STEPPER2  </p> <p>e) Perform the shutter calibration </p>"},{"location":"Blinds-and-Shutters/#motor-wiring-diagrams_1","title":"Motor Wiring Diagrams","text":""},{"location":"Blinds-and-Shutters/#one-shutter_1","title":"One Shutter","text":"<p> - Diagram v412: simple universal setup. For example, the control of horizontal curtain or vertical shutters, blinds adjuster or window opener, pet feeders, opening of a water tap for watering the lawn, rotating table for subject photography, opening the ventilation flap, PTZ camera, 3D Scanner Table, linear Actuator.  - Diagram v414: parallel setup is to run two parallel steppers motors from the same controller. For example, to control a large and heavy hanging screen for an LCD projector, or two curtains at once on one large window.  - Diagram v416: minimum setup size. For example, for small curtains located in a limited space. </p>"},{"location":"Blinds-and-Shutters/#2-shutters","title":"2 Shutters","text":"<p> - Diagram v422: parallel setup is to run two shutters and independent control of two stepper motors from one controller. For example, to control two independent curtains.  - Diagram v424: big parallel setup is to run two shutters and independent control of two pairs of stepper motors from one controller. For example, to control four curtains on one very large window. </p>"},{"location":"Blinds-and-Shutters/#bill-of-materials","title":"Bill of Materials","text":"<ul> <li>ESP8266 Boards:  </li> <li>Wemos D1 mini </li> <li>NodeMCU </li> <li>ESP-01S </li> <li>Stepper motors (NEMA 17):  </li> <li>Standard </li> <li>5:1 Planetary Gearbox </li> <li>Stepper motors (28BYJ-48):  </li> <li>Standard </li> <li>Stepper Drivers:  </li> <li>A4988 </li> <li>DRV8825 </li> <li>TMC 2208 </li> <li>Stepper Motor Control Development Boards:  </li> <li>x1 board </li> <li>x2 board </li> <li>DC-DC Step Down Power Supply Module:  </li> <li>MP1584EN </li> <li>LM2596 </li> <li>XL4015 </li> <li>Power Supplies (AC-DC):  </li> <li>DC 12V 2.5A </li> <li>DC 12V 4A </li> <li>DC 24v 4A </li> <li>Aluminum Capacitors:  </li> <li>35V 100UF </li> <li>35V 10UF </li> <li>Motor Testing PWM Signal Generator:  </li> <li>1 type </li> <li>2 type </li> </ul>"},{"location":"Blinds-and-Shutters/#using-sonoff-dual-r2","title":"using Sonoff Dual R2","text":"<p>If using a Sonoff Dual R2, use the following Template: <pre><code>{\"NAME\":\"Sonoff Dual R2\",\"GPIO\":[17,255,0,255,0,22,18,0,21,56,0,0,0],\"FLAG\":0,\"BASE\":39}\n</code></pre></p>"},{"location":"Blinds-and-Shutters/#checklist","title":"Checklist","text":"<ul> <li>Ensure that the first relay opens the shutter</li> <li>Ensure that the second relay closes the shutter</li> <li>Set <code>ShutterRelay&lt;x&gt;</code></li> <li>Set <code>ShutterOpenDuration&lt;x&gt;</code></li> <li>Set <code>ShutterCloseDuration&lt;x&gt;</code></li> <li>Set <code>ShutterSetHalfway&lt;x&gt;</code> (optional)</li> <li>Set <code>ShutterInvert&lt;x&gt;</code>(optional)</li> <li>Set <code>ShutterInvertWebButtons&lt;x&gt;</code>(optional) (eg. useful for horizontal awnings)</li> <li>If the shutter uses a pulse motor instead of a motors with one wire for each direction (i.e., duration based), define <code>PulseTime&lt;x&gt; 2</code> on both relays. The driver's behavior will change to a pulse motor that needs pulses to start and stop.  </li> </ul>"},{"location":"Blinds-and-Shutters/#rules","title":"Rules","text":"<p>Tasmota rule triggers:  </p> <ul> <li><code>Shutter&lt;x&gt;#Position</code> is triggered at start, during and at the end of movement reporting actual position (<code>%value%</code>=0-100)</li> <li><code>Shutter&lt;x&gt;#Direction</code> is triggered at start, during and at the end of movement reporting actual direction (<code>%value%</code>: <code>-1</code>=close direction, <code>0</code>=no movement, <code>1</code>=open direction)</li> <li><code>Shutter&lt;x&gt;#Target</code> is triggered at start, during and at the end of movement reporting current target (<code>%value%</code>0-100)</li> <li><code>Shutter#Moving</code> is triggered during movement and just before moving (shutter independently). If VAR&lt;x&gt; is set to 99 then this trigger will be executed BEFORE the shutter starts. You can start the shutter after rule execution by setting VAR&lt;x&gt; to 0 or wait 10seconds before the timeout kicks in. After the movement with shutter#moved the <code>VAR</code> must be set back to 99 and the initial rule must be enabled again. The initial rule has to be defined to run ONCE.     EXAMPLE: power3 on and wait 2sec before start. After movement: power off    <pre><code>rule1 on shutter#moving=1 do backlog power3 on;delay 20;var1 0 endon\nrule1 5\nrule2 on shutter#moved do backlog power3 off;var1 99;rule1 5 endon\nrule2 1\n</code></pre></li> <li><code>Shutter#Moved</code> is triggered at end of movement (shutter independently)</li> <li><code>Shutter&lt;x&gt;#Button&lt;button&gt;=0</code>  is triggered when <code>button</code> is hold</li> <li><code>Shutter&lt;x&gt;#Button&lt;button&gt;=&lt;n&gt;</code>  is triggered when <code>button</code> is pressed <code>n</code> times</li> <li><code>Shutter&lt;x&gt;#Button0=0</code>  is triggered when all buttons of that shutter are hold simultaneously</li> <li><code>Shutter&lt;x&gt;#Button0=&lt;n&gt;</code>  is triggered when all buttons of that shutter are pressed simultaneously <code>n</code> times</li> </ul> <p>Examples</p> <ul> <li>Publish a message with the position of the shutter:   <code>Rule1 ON Shutter1#Position DO Publish status/%topic%/level {\"%value%\"} ENDON</code></li> <li>Open/Close or set a specific position for a shutter. This example drives the second shutter to the same position as the first shutter: <code>Rule1 ON Shutter1#Position DO ShutterPosition2 %value%\" ENDON</code></li> </ul>"},{"location":"Blinds-and-Shutters/#jarolift-shutter-support","title":"Jarolift Shutter Support","text":"<p>Jarolift shutters operates by the 3 commands up/stop/down. Compile with the KeeLoq Option and provide the extracted master keys to communicate. Please see KeeLoq description how to do that. After this create a rule to allow the shutter to control the Jarolift devices. Shutter must be in ShutterMode 0.</p> <p><code>Rule1 On Power1#state=0 DO KeeloqSendButton 4 endon On Power2#state=0 DO KeeloqSendButton 4 endon on Power1#state=1 DO KeeloqSendButton 8 endon on Power2#State=1 DO KeeloqSendButton 2 endon</code></p>"},{"location":"Blinds-and-Shutters/#venetian-blind-support","title":"Venetian Blind Support","text":"<p>All time based shutters (not stepper, pwm) can be enhanced with Venetian Blind functionality. The configuration need following parameters: angle of blinds during opening phase, angle of blinds during closing phase. This are the max and the min values of the venetian blinds (e.g. opening at 0\u00b0 - closing at 90\u00b0). Additionally the runtime is required from min to max. This is typically 1-2sec. The resolution of the time is 0.05sec. Duration in [sec] must be multiplied by 20. e.g. 1.2sec =&gt; 1.2 x 20 = 24. To open and close the tilt you must define the angle for CLOSE and the angle for OPEN of the tilt (be careful about the correct order, refer to the following example)</p> <p>Example: - Angle of the slats when the blind is opening: 0\u00b0 - Angle of the slats when the blind is closing: 90\u00b0 - Time needed to flip in 1/20 seconds (1 second = 20): 40 - Desired angle of the slats when set to CLOSE : 90\u00b0 - Desired angle of the slats when set to OPEN : 0\u00b0</p> <p><code>ShutterTiltConfig1  0  90  40  90  0</code></p> <p>Tilt configuration can be set for every shutter independently. The tilt can be set with one of the following commands:    <code>shuttertilt1 open</code> set tilt to defined open angle    <code>shuttertilt1 close</code> set tilt to defined close angle    <code>shuttertilt1 20</code> set tilt to 20\u00b0 angle</p> <p>If the shutter is moved from one position to another position the tilt will be restored AFTER the movement. If the shutter is fully opened or fully closed the tilt will be reset. This means there is no tilt restore at the endpoints. If you want to restore the tilt at the endpoint you have two options to do that: - use a backlog command e.g. <code>backlog shutterclose1; shuttertilt1 open</code> - use <code>shutterposition1 0,90</code> with an optional position of the tilt as a second parameter</p> <p>Similar to shutterchange to make relative movements there is also a <code>shuttertiltchange</code> with the same behavior. </p> <p>If the shutter is operated with wall buttons or the web interface and stopped during a tilte change before the shutter starts moving the NEW tilt position is stored. Now any additional position movements will restore this new tilt position. This makes is possible with small ON/OFF to change the tilt and with long ON/OFF to change the position and retain the tilt after movement.</p> <p>Similar to shutterposition there is a minimum runtime of the motor required that TASMOTA can control. This is 0.2sec. Because the tiltmovement from one position into the other takes often about 1sec it is very common that you cannot make small tilt changes of 10\u00b0 or sometimes even 20\". </p>"},{"location":"Bluetooth/","title":"BLE Gateway","text":"<p>For ESP32 Bluetooth go here</p>"},{"location":"Bluetooth/#bluetooth-low-energy-sensors","title":"Bluetooth Low Energy Sensors","text":"<p>Different vendors offer Bluetooth solutions, mostly as part of the Xiaomi brand, often under the Mijia label. The sensors supported by Tasmota use BLE (Bluetooth Low Energy) to transmit the sensor data, but they differ in their accessibilities quite substantially.  </p> <p>Basically all of them use the so-called \"MiBeacons\" which are BLE advertisement packets with a certain data structure, which are broadcasted by the devices automatically while the device is not in an active Bluetooth connection.      The frequency of these messages is set by the vendor and ranges from one per 3 seconds to one per hour (e.g., for the battery status of the LYWSD03MMC). Motion sensors and BLE remote controls start to send when an event is triggered.    These packets already contain the sensor data and can be passively received by other devices and will be published regardless if a user decides to read out the sensors via connections or not. Thus the battery life of a BLE sensor is not influenced by reading these advertisements and the big advantage is the power efficiency as no active bi-directional connection has to be established. The other advantage is, that scanning for BLE advertisements can happen nearly parallel (very quickly one after the other), while a direct connection must be established for at least a few seconds and will then block both involved devices for that time.  </p> <p>This is therefore the preferred option, if supported by the sensor.</p>"},{"location":"Bluetooth/#supported-devices","title":"Supported Devices","text":"<p>It can not be ruled out, that changes in the device firmware may break the functionality of this driver completely!</p> <p>The naming conventions in the product range of Bluetooth sensors in Xiaomi universe can be a bit confusing. The exact same sensor can be advertised under slightly different names depending on the seller (Mijia, Xiaomi, Cleargrass, ...).</p> MJ_HT_V1 LYWSD02 CGG1 CGD1 temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery passive for all entities, reliable battery value battery only active, thus not on the NRF24L01, set clock and unit, very frequent data sending passive for all entities, reliable battery value battery only active, thus not on the NRF24L01, no reliable battery value, no clock functions MiFlora LYWSD03MMC / ATC NLIGHT MJYD2S temperature, illuminance, soil humidity, soil fertility, battery, firmware version temperature, humidity, battery motion motion, illuminance, battery, no-motion-time passive only with newer firmware (&gt;3.0?), battery only active, thus not on the NRF24L01 passive only with decryption or using custom ATC-firmware, no reliable battery value with stock firmware NRF24L01, ESP32 passive only with decryption, thus only NRF24L01, ESP32 YEE RC MHO-C401 MHO-C303 button press (single and long) temperature, humidity, battery temperature, humidity, battery passive equal to the LYWS03MMC, but no custom firmware yet passive for all entities,  set clock and unit, no alarm functions, very frequent data sending <p>passive means data is received via BLE advertisements while active means data is received via a bidirectional connection to the sensor.</p> <p>LYWSD03MMC sends encrypted sensor data every 10 minutes. As there are no confirmed reports about correct battery presentation of the sensor (always shows 99%), this function is currently not supported.  </p> <p>MJYD2S sends motion detection events and 2 discrete illuminance levels (1 lux or 100 lux for a dark or bright environment). Additionally battery level and contiguous time without motion in discrete growing steps (no motion time = NMT).    </p>"},{"location":"Bluetooth/#encryption-and-bind_key","title":"Encryption and bind_key","text":"<p>Most of the older sensors use unencrypted messages, which can be read by all kinds of BLE devices or even a NRF24L01. With the arrival of newer sensors, such as LYWSD03MMC, MHO-C401 or MJYD2S, came the problem of encrypted data in MiBeacons, which can be decrypted in Tasmota (not yet with the HM-1x).</p> <p>Some sensor still allow an unencrypted connection the reading of the sensor data using normal subscription methods to GATT-services (currently used on the HM-1x). This is more power hungry than the passive reading of BLE advertisements. </p> <p>Some other sensors like the MJYD2S are not usable without the \"bind_key\". </p> <p>It is recommended to obtain the bind_key if usable by your BLE driver to reduce the battery drain.  </p>"},{"location":"Bluetooth/#obtain-bind_key","title":"Obtain bind_key","text":"<p>To get the necessary decryption key (\"bind_key\") use:</p> <ul> <li>Xiaomi Cloud Tokens Extractor (Windows executable or Python) - works on any device in the Mi Home app</li> <li>pvvx Telink Flasher (Webpage) - LYWSD03MMC, MHO-C401 and CGG1 only</li> <li>ATC Telink Flasher (Webpage) - LYWSD03MMC only</li> </ul> <p>Telink Flashers allow the generation of a bind_key by faking a pairing with the Xiaomi cloud.</p>"},{"location":"Bluetooth/#use-bind_key","title":"Use bind_key","text":"<p>Use the bind_key and MAC address of the sensor to use with command <code>NRFkey</code>. Tasmota will receive the sensor data roughly every 10 minutes (in two chunks for humidity and temperature with about a minute in between) and decode the data. This is the most energy efficient way. </p> <p>The current way of storing these keys on the NRF24L01 is to use <code>NRFkey</code>):</p> <p><pre><code>rule1 on System#Boot do backlog NRFkey 00112233445566778899AABBCCDDEEFF112233445566; NRFkey 00112233445566778899AABBCCDDEEFF112233445566; NRFPage 6; NRFUse 0; NRFUse 4 endon\n</code></pre> (key for two sensors, 6 sensors per page in the WebUI, turn off all sensors, turn on LYWSD03MMC)  </p> <p>Note</p> <p>This option is currently not available for the HM-10 because of memory considerations as part of the standard sensor-firmware package.  </p> <p>Encryption is not supported on HM-1x (for legacy reasons). The only method is to connect to the sensor from time to time. This circumvents the data encryption but drains the battery fast. Thus it is only recommended as a last resort.</p>"},{"location":"Bluetooth/#custom-firmware","title":"Custom firmware","text":"<p>pvvx Telink Flasher also allows to flash custom firmware on supported sensors. This will work out of the box with Tasmota. This firmware does send data more frequently and is a bit more power hungry than the stock firmware.  </p>"},{"location":"Bluetooth/#working-principle-of-tasmota-ble-drivers-85","title":"Working principle of Tasmota BLE drivers (&gt;8.5.)","text":"<p>The idea is to provide drivers with as many automatic functions as possible. Besides the hardware setup, there are zero or very few things to configure. The sensor namings are based on the original sensor names and shortened if appropriate (Flower care -&gt; Flora). A part of the MAC will be added to the name as a suffix. All sensors are treated as if they are physically connected to the ESP8266 device. For motion and remote control sensors, MQTT messages will be published in (nearly) real time.</p> <p>Take note that only the ESP32 and the HM-1x modules are real BLE devices whereas the NRF24L01(+) is only a generic 2.4 GHz transceiver with very limited capabilities that was finagled into reading BLE packets.  </p>"},{"location":"Bluetooth/#using-hm-1x","title":"using HM-1x","text":"<p>This feature is included only in tasmota-sensors.bin</p> <p>Otherwise you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_HM10\n#define USE_HM10          // Add support for HM-10 as a BLE-bridge (+9k3 code)\n#endif\n</code></pre>"},{"location":"Bluetooth/#features","title":"Features","text":"<p>Supported sensors will be connected to at a set interval (default interval equals TelePeriod). A subscription is established for 5 seconds and data (e.g. temperature, humidity and battery) is read and reported to an mqtt topic (Dew point is calculated):</p> <pre><code>tele/%topic%/SENSOR = {\"Time\":\"2020-03-24T12:47:51\",\"LYWSD03-52680f\":{\"Temperature\":21.1,\"Humidity\":58.0,\"DewPoint\":12.5,\"Battery\":100},\"LYWSD02-a2fd09\":{\"Temperature\":21.4,\"Humidity\":57.0,\"DewPoint\":12.5,\"Battery\":2},\"MJ_HT_V1-d8799d\":{\"Temperature\":21.4,\"Humidity\":54.6,\"DewPoint\":11.9},\"TempUnit\":\"C\"}\n</code></pre> <p>After a completed discovery scan, the driver will report the number of found sensors. As Tasmota can not know how many sensors are meant to be discovered you have to force a re-scan until the desired number of devices is found. <pre><code>Rule1 ON HM10#Found&lt;6 DO Add1 1 ENDON ON Var1#State&lt;=3 DO HM10Scan ENDON \n</code></pre> This will re-scan up to 3 times if less than 6 sensors are found.</p>"},{"location":"Bluetooth/#using-nrf24l01","title":"using nRF24L01(+)","text":""},{"location":"Bluetooth/#configuration","title":"Configuration","text":"<p>You must compile your build. Change the following in <code>my_user_config.h</code>:</p> <pre><code>#define USE_SPI                                  // Hardware SPI using GPIO12(MISO), GPIO13(MOSI) and GPIO14(CLK) in addition to two user selectable GPIOs(CS and DC)\n#ifdef USE_SPI\n  #define USE_NRF24                              // Add SPI support for NRF24L01(+) (+2k6 code)\n  #ifdef USE_NRF24\n    #define USE_MIBLE                            // BLE-bridge for some Mijia-BLE-sensors (+4k7 code)\n</code></pre> <p>Sensors will be discriminated by using the Product ID of the MiBeacon. A human readable short product name will be shown instead of the company-assigned ID of the BLE Public Device Address (the \"lower\" 24 bits). </p> <p>A Tele message could like look this:  </p> <pre><code>10:13:38 RSL: stat/tasmota/STATUS8 = {\"StatusSNS\":{\"Time\":\"2019-12-18T10:13:38\",\"Flora-6ab577\":{\"Temperature\":21.7,\"Illuminance\":21,\"Humidity\":0,\"Fertility\":0},\"MJ_HT_V1-3108be\":{\"Temperature\":22.3,\"Humidity\":56.1},\"TempUnit\":\"C\"}}\n</code></pre> <p>As the NRF24L01 can only read BLE-advertisements, only the data in these advertisements is accessible. All sensors have an additional GATT-interface with more data in it, but it can not be read with a NRF24L01. </p> <p>As we can not use a checksum to test data integrity of the packet, only data of sensors whose addresses showed up more than once (default = 3 times) will be published. Internally from time to time \"fake\" sensors will be created, when there was data corruption in the address bytes.  These will be removed automatically.  </p>"},{"location":"Bluetooth/#commands","title":"Commands","text":"<p>Full list of available Bluetooth commands.</p>"},{"location":"Bluetooth/#ibeacon","title":"iBeacon","text":"<p>This feature is included only in tasmota-sensors.bin</p> <p>Otherwise you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_IBEACON\n#define USE_IBEACON          // Add support for bluetooth LE passive scan of ibeacon devices \n#endif\n</code></pre>"},{"location":"Bluetooth/#hm-1x-or-nrf24l01","title":"HM-1x or nRF24L01(+)","text":"<p>Tasmota uses a BLE 4.x module to scan for iBeacon devices. This driver is working with HM-10 and clones and HM16/HM17  modules and potentially other from the HM-1x series, depending on firmware capabilities.</p> <p>Tip</p> <p>If using an external module, When first connected some modules will be in peripheral mode. You have to change it to central mode using commands <code>Sensor52 1</code> and <code>Sensor52 2</code>.</p>"},{"location":"Bluetooth/#features_1","title":"Features","text":"<p>For a list of all available commands see Sensor52 command.  </p> <p>This driver reports all beacons found during a scan with its ID (derived from beacon's MAC address) prefixed with <code>IBEACON_</code> and RSSI value.</p> <p>Every beacon report is published as an MQTT tele/%topic%/SENSOR in a separate message:</p> <pre><code>tele/ibeacon/SENSOR = {\"Time\":\"2021-01-02T12:08:40\",\"IBEACON\":{\"MAC\":\"A4C1387FC1E1\",\"RSSI\":-56,\"STATE\":\"ON\"}}\n</code></pre> <p>If the beacon can no longer be found during a scan and the timeout interval has passed the beacon's RSSI is set to zero (0) and it is no longer displayed in the webUI</p> <pre><code>tele/ibeacon/SENSOR = {\"Time\":\"2021-01-02T12:08:40\",\"IBEACON\":{\"MAC\":\"A4C1387FC1E1\",\"RSSI\":-56,\"STATE\":\"OFF\"}}\n</code></pre> <p>Additional fields will be present depending upon the beacon, e.g. NAME, UID, MAJOR, MINOR.</p>"},{"location":"Bluetooth/#supported-devices_1","title":"Supported Devices","text":"<p>All Apple compatible iBeacon devices should be discoverable. </p> <p>Various nRF51822 beacons should be fully Apple compatible, programmable and their battery lasts about a year.</p> <ul> <li>Amazon.com</li> <li>Aliexpress</li> </ul> <p>Cheap \"iTag\" beacons with a beeper. The battery on these lasts only about a month.</p> <ul> <li>Aliexpress</li> <li>eBay</li> <li>Amazon.com</li> </ul> <p></p> <p>Tip</p> <p>You can activate a beacon with a beeper using command <code>IBEACON_%BEACONID%_RSSI 99</code> (ID is visible in webUI and SENSOR reports). This command can freeze the Bluetooth module and beacon scanning will stop. After a reboot of Tasmota the beacon will start beeping and scanning will resume. (untested on ESP32 native BLE)</p>"},{"location":"Bluetooth_ESP32/","title":"Bluetooth for ESP32","text":"<p>(Bluetooth version 4.x)</p>"},{"location":"Bluetooth_ESP32/#mi32-sensors","title":"MI32 Sensors","text":"This feature is included only in tasmota32-bluetooth.bin <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_MI_ESP32       // (ESP32 only) Add support for ESP32 as a BLE-bridge (+9k2 mem, +292k flash)\n</code></pre></p> <p>Different vendors offer Bluetooth solutions, mostly as part of the Xiaomi brand, often under the Mijia label. The sensors supported by Tasmota use BLE (Bluetooth Low Energy) to transmit the sensor data, but they differ in their accessibilities quite substantially.</p> <p>Basically all of them use the so-called \"MiBeacons\" which are BLE advertisement packets with a certain data structure, which are broadcasted by the devices automatically while the device is not in an active Bluetooth connection. The frequency of these messages is set by the vendor and ranges from one per 3 seconds to one per hour (e.g., for the battery status of the LYWSD03MMC). Motion sensors and BLE remote controls start to send when an event is triggered. These packets already contain the sensor data and can be passively received by other devices and will be published regardless if a user decides to read out the sensors via connections or not. Thus the battery life of a BLE sensor is not influenced by reading these advertisements and the big advantage is the power efficiency as no active bi-directional connection has to be established. The other advantage is, that scanning for BLE advertisements can happen nearly parallel (very quickly one after the other), while a direct connection must be established for at least a few seconds and will then block both involved devices for that time.</p> <p>This is therefore the preferred option, if supported by the sensor.</p>"},{"location":"Bluetooth_ESP32/#supported-devices","title":"Supported Devices","text":"<p>It can not be ruled out, that changes in the device firmware may break the functionality of this driver completely!</p> <p>The naming conventions in the product range of Bluetooth sensors in Xiaomi universe can be a bit confusing. The exact same sensor can be advertised under slightly different names depending on the seller (Mijia, Xiaomi, Cleargrass, ...).</p> MJ_HT_V1 LYWSD02 CGG1 CGD1 temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery passive for all entities, reliable battery value battery only active, thus not on the NRF24L01, set clock and unit, very frequent data sending passive for all entities, reliable battery value battery only active, thus not on the NRF24L01, no reliable battery value, no clock functions MiFlora LYWSD03MMC / ATC NLIGHT MJYD2S temperature, illuminance, soil humidity, soil fertility, battery, firmware version temperature, humidity, battery motion motion, illuminance, battery, no-motion-time passive only with newer firmware (&gt;3.0?), battery only active, thus not on the NRF24L01 passive only with decryption or using custom ATC-firmware, no reliable battery value with stock firmware NRF24L01, ESP32 passive only with decryption, thus only NRF24L01, ESP32 YEE RC MHO-C401 MHO-C303 MCCGQ02HL button press (single and long) temperature, humidity, battery temperature, humidity, battery door opening/closing, light present passive equal to the LYWS03MMC, but no custom firmware yet passive for all entities,  set clock and unit, no alarm functions, very frequent data sending passive, difficult to get key (must be close, press button) WZ-KR220IBLE-310 button press (1-3 buttons) passive <p>passive means data is received via BLE advertisements while active means data is received via a bidirectional connection to the sensor.</p> <p>LYWSD03MMC sends encrypted sensor data every 10 minutes. As there are no confirmed reports about correct battery presentation of the sensor (always shows 99%), this function is currently not supported.</p> <p>MJYD2S sends motion detection events and 2 discrete illuminance levels (1 lux or 100 lux for a dark or bright environment). Additionally battery level and contiguous time without motion in discrete growing steps (no motion time = NMT).</p>"},{"location":"Bluetooth_ESP32/#wz-kr220ible-310","title":"WZ-KR220IBLE-310","text":"<p>These bluetooth switches are NOT Xiaomi branded devices and do not use encryption. They are normally be found in combination with a Tuya relay module and avaialble in 1 2 or 3 button versions. Also known as bluetooth remote controls. All of these switches use the same source MAC address (C1A2A3A4A5A6). To be able to distinguish individual switchs and buttons, the end of the MAC address is replaced with the unique switch_id. Thus you can use BLEAlias to name individual switches and monitor for the button presses.</p> <p>To use these switches, you also need to set a few other MI32 options</p> option meaning BLEAddrFilter 1 So BLE can see address, any value greater than 0 MI32Option1 1 Stops button press occuring at TELEPERIOD times MI32Option2 2 Sends message on button press <p>Tip</p> <p>Two button switches are btn 1 and 3 (not 1 and 2)</p> <p>Tip</p> <p>If BLEAlias is used then an alias for C1A2A3A4A5A6 must be included, along with the alias for the unique switch</p> <pre><code>BLEAlias c1a2a3a40048=LoungeBtn\nBLEAlias c1a2a3a4a5a6=AnyButton\n</code></pre>"},{"location":"Bluetooth_ESP32/#encryption-and-bind_key","title":"Encryption and bind_key","text":"<p>Most of the older sensors use unencrypted messages, which can be read by all kinds of BLE devices or even a NRF24L01. With the arrival of newer sensors, such as LYWSD03MMC, MHO-C401 or MJYD2S, came the problem of encrypted data in MiBeacons, which can be decrypted in Tasmota.</p> <p>Some sensor still allow an unencrypted connection the reading of the sensor data using normal subscription methods to GATT-services. This is more power hungry than the passive reading of BLE advertisements.</p> <p>Some other sensors like the MJYD2S are not usable without the \"bind_key\".</p> <p>It is recommended to obtain the bind_key in any case to reduce the battery drain.</p>"},{"location":"Bluetooth_ESP32/#obtain-bind_key","title":"Obtain bind_key","text":"<p>To get the necessary decryption key (\"bind_key\") use:</p> <ul> <li>Xiaomi Cloud Tokens Extractor (Windows executable or Python) - works on any device in the Mi Home app</li> <li>pvvx Telink Flasher (Webpage) - LYWSD03MMC, MHO-C401 and CGG1 only</li> <li>ATC Telink Flasher (Webpage) - LYWSD03MMC only</li> </ul> <p>Telink Flashers allow the generation of a bind_key by faking a pairing with the Xiaomi cloud.</p>"},{"location":"Bluetooth_ESP32/#use-bind_key","title":"Use bind_key","text":"<p>Use the bind_key and MAC address of the sensor to use with commands <code>Mi32Keys</code> or <code>Mi32Key</code>. Tasmota will receive the sensor data roughly every 10 minutes (in two chunks for humidity and temperature with about a minute in between) and decode the data. This is the most energy efficient way.</p> <p>The current way of storing these keys on the ESP32 is to use <code>Mi32Key</code> command:</p> <p><code>MI32Keys &lt;mac or blealias&gt;=&lt;bind_key&gt; &lt;mac or blealias&gt;=&lt;key&gt;</code></p> <p>The Key is the 32 character (16 byte) key retrieved by above methods.</p> <p>Older way of using <code>MI32Key</code> is retained for backward compatibility. Mi32Key needs a 44 character combination of bind_key and MAC:</p> <p><code>MI32Keys &lt;bind_keymac&gt;</code></p> <p>To retain the data use a rule on startup: <pre><code>rule1 on System#Boot do backlog MI32key 00112233445566778899AABBCCDDEEFF112233445566; MI32key 00112233445566778899AABBCCDDEEFFAABBCCDDEEFF endon\n</code></pre></p>"},{"location":"Bluetooth_ESP32/#commands","title":"Commands","text":"<p>Full list of available Mi Sensors commands.</p> <p>Tip</p> <p>If you really want to read battery for LYWSD02, Flora and CGD1, consider doing it once a day with a rule:</p> <pre><code>Backlog Rule1 on Time#Minute=30 do MI32Battery endon; Rule1 1\n</code></pre> <p>This will update every day at 00:30 AM.</p>"},{"location":"Bluetooth_ESP32/#ble-esp32","title":"BLE ESP32","text":"<p>This allows for the receiving of BLE advertisements from BLE devices, including \"iBeacons\" and BLE sensors, but also for the control of simple BLE devices, providing for reading, writing and receiving notifications.</p> This feature is included only in tasmota32-bluetooth.bin <p>When compiling your build, you need to</p> <p>(1) Add the following to <code>user_config_override.h</code>: <pre><code>#define USE_BLE_ESP32                // Add support for ESP32 as a BLE-bridge (+9k2? mem, +292k? flash)\n</code></pre> (2) Copy <code>platformio_override_sample.ini</code> to <code>platformio_override.ini</code></p> <p>(3) In <code>platformio_override.ini</code>, search for the following lines and remove the <code>;</code> in front of the 2nd line if it is there <pre><code>; *** uncomment the following line if you use Bluetooth or Apple Homekit in a Tasmota32 build. Reduces compile time\n;                          lib/libesp32_div\n</code></pre> becomes <pre><code>; *** uncomment the following line if you use Bluetooth or Apple Homekit in a Tasmota32 build. Reduces compile time\n                          lib/libesp32_div\n</code></pre></p> <p>Be aware, enabling of the native BLE on ESP32 has an impact on Wi-Fi performance.  Although later SDK helped a bit, expect more lag on the web interface and on MQTT. If only controlling BLE devices, then scanning can be disabled, which will minimize Wi-Fi impact. BLE can be enabled from the web UI menus.</p> <p>This is compiled by default in the Bluetooth firmware, but you need to enable it using the webUI Configure BLE button or <code>SetOption115 1</code> command.</p> <p>Note that the only configuration stored is the <code>SetOption115</code> to turn BLE on and off.  All other configurations can be set at boot if necessary using Rules.</p>"},{"location":"Bluetooth_ESP32/#ibeacon","title":"iBeacon","text":"<p>Hear adverts from BLE devices, and produce MQTT messages containing RSSI and other information about them.  Break out iBeacon specific data if present.</p> This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_IBEACON_ESP32                // Add support for Bluetooth LE passive scan of iBeacon devices\n</code></pre></p> <p>This driver reports all beacons found during a scan with its ID (derived from beacon's MAC address) prefixed with <code>IBEACON_</code> and RSSI value.</p> <p>Every beacon report is published as an MQTT tele/%topic%/SENSOR in a separate message:</p> <pre><code>tele/ibeacon/SENSOR = {\"Time\":\"2021-01-02T12:08:40\",\"IBEACON\":{\"MAC\":\"A4C1387FC1E1\",\"RSSI\":-56,\"STATE\":\"ON\"}}\n</code></pre> <p>If the beacon can no longer be found during a scan and the timeout interval has passed the beacon's RSSI is set to zero (0) and it is no longer displayed in the webUI</p> <pre><code>tele/ibeacon/SENSOR = {\"Time\":\"2021-01-02T12:08:40\",\"IBEACON\":{\"MAC\":\"A4C1387FC1E1\",\"RSSI\":-56,\"STATE\":\"OFF\"}}\n</code></pre> <p>Additional fields will be present depending upon the beacon, e.g. NAME, UID, MAJOR, MINOR.</p>"},{"location":"Bluetooth_ESP32/#ibeacon-mqtt-fields","title":"iBeacon MQTT Fields","text":""},{"location":"Bluetooth_ESP32/#always-present","title":"Always present","text":"json meaning Time time of MQTT send IBEACON.MAC mac addr IBEACON.RSSI signal strength IBEACON.STATE ON - present, OFF - last MQTT you will get for now (device removed)"},{"location":"Bluetooth_ESP32/#optional","title":"Optional","text":"json meaning IBEACON.NAME name if in scan, or BLEAlias if set - only present if NAME present IBEACON.PERSEC count of adverts per sec.  Useful for detecting button press IBEACON.MAJOR some iBeacon related term? - only present for some IBEACON.MINOR some iBeacon related term? - only present for some"},{"location":"Bluetooth_ESP32/#examples","title":"Examples","text":""},{"location":"Bluetooth_ESP32/#setup-a-rule-to-set-some-aliases-at-boot-time-and-only-allow-those-starting-ib","title":"Setup a rule to set some aliases at boot time, and only allow those starting <code>iB</code>","text":"<pre><code>Rule1 ON System#Boot DO backlog iBeacon 1; BLEAlias A4C1386A1E24=iBfred A4C1387FC1E1=iBjames; iBeaconOnlyAliased 2 endon\nRule1 1\n</code></pre>"},{"location":"Bluetooth_ESP32/#supported-devices_1","title":"Supported Devices","text":"<p>All Apple compatible iBeacon devices should be discoverable.</p> <p>Various nRF51822 beacons should be fully Apple compatible, programmable and their battery lasts about a year.</p> <ul> <li>Amazon.com</li> <li>Aliexpress</li> </ul> <p>Cheap \"iTag\" beacons with a beeper. The battery on these lasts only about a month.</p> <ul> <li>Aliexpress</li> <li>eBay</li> <li>Amazon.com</li> </ul> <p></p> <p>Tip</p> <p>You can activate a beacon with a beeper using command <code>IBEACON_%BEACONID%_RSSI 99</code> (ID is visible in webUI and SENSOR reports). This command can freeze the Bluetooth module and beacon scanning will stop. After a reboot of Tasmota the beacon will start beeping and scanning will resume. (untested on ESP32 native BLE)</p>"},{"location":"Bluetooth_ESP32/#mi32-mqtt-messages","title":"MI32 MQTT Messages","text":"<p>Because we can have many sensors reporting, tele messages are chunked to have a maximum of four sensors per message.</p> <p>If you enable MQTT discovery (<code>SetOption19 1</code>), additional MQTT messages are send.</p> <p>Primarily, at teleperiod or MI32period, discovery messages are sent.  These inform Home Assistant about the devices.  Device names can be dependent upon BLEAlias, so set <code>BLEAlias</code> at boot.</p> <p>With Mi32Option6, additional actual data messages are sent on a dedicated topic (set by Mi32Topic) topics including the device name: <code>tele/&lt;mi32topic&gt;/&lt;name&gt;</code></p> <p>Each message for one sensor.</p> <p>These messages can be used without Home Assistant if it is a preferred format.</p> <p>Note</p> <p>The topic would be the same from all Tasmotas if they have the same BLEAlias or no BLEAlias.  So if you wish to 'hear' the same device separately from different Tasmotas, use different BLEAlias names or different Mi32Topic.</p>"},{"location":"Bluetooth_ESP32/#eq3-trv","title":"EQ3 TRV","text":"<p>A preliminary EQ3 driver is in production. Documentation.</p>"},{"location":"Bluetooth_ESP32/#commands_1","title":"Commands","text":"<p>Full list of available BLE ESP32 commands.</p> <p>If you enable MQTT discovery (<code>SetOption19 1</code>), additional MQTT messages are send.</p> <p>Primarily, at teleperiod or MI32period, discovery messages are sent.  These inform Home Assistant about the devices.  Device names can be dependent upon BLEAlias, so set <code>BLEAlias</code> at boot.</p> <pre><code>Backlog Rule1 ON System#Boot DO BLEAlias A4C1386A1E24=fred A4C1387FC1E1=james endon; Rule1 1\n</code></pre>"},{"location":"Bluetooth_ESP32/#enable-static-random-mac-addresses-in-addition-to-public-mac-addresses","title":"Enable static random mac addresses in addition to public mac addresses","text":"<p>If you have a device which does not appear, it may be advertising on a 'static random' address.  Using this command may make it appear, but will also make other devices appear that you may not wish to see... For example phones advertising Covid messages.  To know more, google 'BLE static random'. Be aware you can set 2 or 3....</p> <p>Note</p> <p>The topic would be the same from all Tasmotas if they have the same BLEAlias or no BLEAlias.  So if you wish to 'hear' the same device separately from different Tasmotas, use different BLEAlias names.</p>"},{"location":"Bluetooth_ESP32/#setup-a-rule-to-set-some-aliases-at-boot-time","title":"Setup a rule to set some aliases at boot time","text":"<pre><code>Backlog Rule1 ON System#Boot DO BLEAlias A4C1386A1E24=fred A4C1387FC1E1=james endon; Rule1 1\n</code></pre>"},{"location":"Bluetooth_ESP32/#enable-static-random-mac-addresses-in-addition-to-public-mac-addresses_1","title":"Enable static random mac addresses in addition to public mac addresses","text":"<p><code>BLEAddrFilter 1</code></p>"},{"location":"Bluetooth_ESP32/#check-the-interval-between-ble-tele-messages","title":"Check the interval between BLE tele messages","text":"<p><code>BLEPeriod</code></p> <p>Set it to 40s: <code>BLEPeriod 40</code></p>"},{"location":"Bluetooth_MI32/","title":"MI32 legacy","text":"<p>Focus on the passive observation of BLE sensors of the Xiaomi/Mijia universe with a small memory footprint. Create generic Bluetooth applications with Berry.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#usage","title":"Usage","text":"<p>Currently supported are all members of the ESP32 family with Bluetooth capabilities. This driver is not part of any standard build. To self compile it is recommended to use <code>platformio_tasmota_cenv.ini</code>, which needs to be created first. Use or change one of the existing example sections with naming scheme <code>tasmota32xx-mi32</code>.</p> build environment <pre><code>[env:tasmota32-mi32-legacy]\nextends                 = env:tasmota32_base\nbuild_flags             = ${env:tasmota32_base.build_flags}\n                          -DUSE_MI_ESP32\n                          -DUSE_MI_EXT_GUI\n                          -DCONFIG_BT_NIMBLE_NVS_PERSIST=y\nlib_extra_dirs          = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_div, lib/lib_ssl\n</code></pre>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#bluetooth-5","title":"Bluetooth 5","text":"<p>If you want to try out Bluetooth version 5.x, which consumes a bit more memory and has limited capabilities on the ESP platform itself, a custom build is needed, e.g.:</p> build environment BLE 5 <pre><code>[env:tasmota32c3-mi32]\nextends                 = env:tasmota32_base\nboard                   = esp32c3\nboard_build.flash_mode  = qio\nlib_ignore              = Micro-RTSP\nbuild_flags             = ${env:tasmota32_base.build_flags}\n                          -DFIRMWARE_BLUETOOTH\n                          -DUSE_MI_EXT_GUI\n                          -DCONFIG_BT_NIMBLE_EXT_ADV\n                          -DCONFIG_BT_NIMBLE_MAX_EXT_ADV_INSTANCES=1\n                          -DOTA_URL='\"http://ota.tasmota.com/tasmota32/release/tasmota32c3.bin\"'\ncustom_sdkconfig        = CONFIG_BT_NIMBLE_50_FEATURE_SUPPORT=y\n                          CONFIG_BT_NIMBLE_EXT_ADV=y\n;It is probably necessary to restart your IDE (i.e. Visual Studio Code) to see the option to build this environment.\n</code></pre> <p>Basically every consumer BLE device with \"BLE 5\" capabilities has only hardware support for Bluetooth 5.x. At the time of writing there is not a single widely used product out there, that has the software support enabled. The only known exception is the open source firmware on pvvx.github.io with possible BLE long range support, but due to hardware limitations the ESP32 platform does not gain much (aka nothing) here.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#tasmota-and-ble-sensors","title":"Tasmota and BLE-sensors","text":"<p>Different vendors offer Bluetooth solutions as part of the XIAOMI family often under the MIJIA-brand (while AQARA is the typical name for a ZigBee sensor). The sensors supported by Tasmota use BLE (Bluetooth Low Energy) to transmit the sensor data, but they differ in their accessibilities quite substantially.</p> <p>Basically all of them use of so-called \u201eMiBeacons\u201c which are BLE advertisement packets with a certain data structure, which are broadcasted by the devices automatically while the device is not in an active bluetooth connection. The frequency of these messages is set by the vendor and ranges from one per 3 seconds to one per hour (for the battery status of the LYWSD03MMC). Motion sensors and BLE remote controls start to send when an event is triggered. These packets already contain the sensor data and can be passively received by other devices and will be published regardless if a user decides to read out the sensors via connections or not. Thus the battery life of a BLE sensor is not influenced by reading these advertisements and the big advantage is the power efficiency as no active bi-directional connection has to be established. The other advantage is, that scanning for BLE advertisements can happen nearly parallel (= very quick one after the other), while a direct connection must be established for at least a few seconds and will then block both involved devices for that time. This is therefore the preferred option, if technically possible (= for the supported sensors).</p> <p>Most of the \u201eolder\u201c BLE-sensor-devices use unencrypted messages, which can be read by all kinds of BLE-devices or even a NRF24L01. With the arrival of \"newer\" sensors came the problem of encrypted data in MiBeacons, which can be decrypted in Tasmota. Meanwhile it is possible to get the needed \"bind_key\" without the need to use Xiaomis apps and server infrastructure. At least the LYWSD03 allows the use of a simple BLE connection without any encrypted authentication and the reading of the sensor data using normal subscription methods to GATT-services (currently used on the HM-1x). This is more power hungry than the passive reading of BLE advertisements. It is not directly supported by the driver anymore, but can be realized in Berry, i.e. to read the correct battery status. Other sensors like the MJYD2S and nearly every newer device are not usable without the \"bind_key\".</p> <p>The idea is to provide as many automatic functions as possible. Besides the hardware setup, there are zero or very few things to configure. The sensor namings are based on the original sensor names and shortened if appropriate (Flower care -&gt; Flora). A part of the MAC will be added to the name as a suffix. All sensors are treated as if they are physically connected to the ESP32 device. For motion and remote control sensors MQTT-messages will be published in (nearly) real time.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#supported-devices","title":"Supported Devices","text":"<p>It can not be ruled out, that changes in the device firmware may break the functionality of this driver completely!</p> <p>The naming conventions in the product range of bluetooth sensors in XIAOMI-universe can be a bit confusing. The exact same sensor can be advertised under slightly different names depending on the seller (Mijia, Xiaomi, Cleargrass, ...). If an unknown \"Mijia\" sensor is found it will be added with naming scheme <code>MI_</code>+<code>PID</code> and if the builtin parser of the driver supports the packet type, it will work too.</p> MJ_HT_V1 LYWSD02 CGG1 CGD1 temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery temperature, humidity, battery passive for all entities, reliable battery value battery only active, set clock and unit, very frequent data sending passive for all entities, reliable battery value battery only active, no reliable battery value, no clock functions MiFlora LYWSD03MMC / ATC NLIGHT MJYD2S temperature, illuminance, soil humidity, soil fertility, battery, firmware version temperature, humidity, battery motion motion, illuminance, battery, no-motion-time passive only with newer firmware (&gt;3.0?), battery only active passive only with decryption or using custom ATC-firmware, no reliable battery value with stock firmware passive passive only with decryption YLYK01 MHO-C401 MHO-C303 MCCGQ02HL button press (single and long) temperature, humidity, battery temperature, humidity, battery contact opening/closing, battery passive equal to the LYWS03MMC passive for all entities,  set clock and unit, no alarm functions, very frequent data sending passive only with decryption SJWS01L YLKG07/08 button press (single and long), leak alarm, battery button press (single and double), hold, incremental rotary encoder w/o press passive only with decryption passive only with decryption (legacy decryption)both versions reported as YLKG08 <p>[passive]: data is received via BLE advertisements [active]: data is received via bidirectional connection to the sensor  </p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#devices-with-payload-encryption","title":"Devices with payload encryption","text":"<p>The encrypting devices will start to send advertisements with encrypted sensor data after pairing it with the official Xiaomi app. Out-of-the-box the sensors do only publish a static advertisement. It is possible to do a pairing and get the necessary decryption key (\"bind_key\") right here in the Wiki. This method uses the same code base as the first published working example: https://atc1441.github.io/TelinkFlasher.html. This project also provides a custom firmware for the LYWSD03MMC, which then becomes an ATC and is supported by Tasmota too. Default ATC-setting will drain the battery more than stock firmware, because of very frequent data sending. This key and the corresponding MAC of the sensor can be injected with the MI32key-command (or NRFMJYD2S), but the new and recommended option is to use a mi32cfg file.</p> <p>It is still possible to save the whole config as RULE like that:  (not recommended anymore!)</p> <p><pre><code>rule1 on System#Boot do backlog MI32key 00112233445566778899AABBCCDDEEFF112233445566; MI32key 00112233445566778899AABBCCDDEEFF112233445566 endon\n</code></pre> (key for two sensors)</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#tracking-of-ble-devices-and-iphone-presence-detection","title":"Tracking of BLE devices and \"iPhone presence detection\"","text":"<p>It is possible to track generic BLE devices with <code>mi32option5 1</code>. This includes every device with a public address (aka a fixed MAC address) out of the box. Additionally it is possible to observe (typically more modern) BLE devices with a Random Private Resolvable Address or in short RPA, which includes iPhones and other Apple devices. For the latter it is necessary to retrieve the Identiy Resolving Key (= IRK), which is supported directly by the driver with the help of a Berry script:</p>  Retrieve IRK from BLE device with RPA <pre><code>#------------------------------------------------------------------------------\n- Fake heartrate server to get IRK\n-------------------------------------------------------------------------------#\nimport BLE\nvar cbuf = bytes(-255)\n\nclass IRK : Driver\n    var current_func, next_func\n\n    def init()\n        import cb\n        var cbp = cb.gen_cb(/e,o,u,h-&gt;self.cb(e,o,u,h))\n        BLE.serv_cb(cbp,cbuf)\n        self.current_func = /-&gt;self.add_bpm()\n        log(\"BLE: start hearrate server\",1)\n    end\n\n    def every_50ms()\n        self.current_func()\n    end\n\n    def wait()\n    end\n\n    def then(func)\n        # save function pointers for callback, typically expecting a closure\n        self.next_func = func\n        self.current_func = /-&gt;self.wait()\n    end\n\n    def updateMI32cfg()\n        import json\n        import string\n        var i = BLE.info()\n        var d = {}\n        d[\"MAC\"] = string.tr(i[\"connection\"][\"peerID_addr\"],\":\",\"\")\n        d[\"name\"] = i[\"connection\"][\"name\"]\n        try\n            d[\"key\"] = bytes(i[\"connection\"][\"IRK\"]).reverse().tohex()\n        except ..\n            log(\"M32: could not get IRK, is firmware configured with -DCONFIG_BT_NIMBLE_NVS_PERSIST=y ??\",1)\n            return\n        end\n        d[\"PID\"] = \"0000\"\n        var j = []\n        var f\n        try\n            f = open(\"mi32cfg\",\"r\")\n            j = json.load(f.read())\n            j.push(d)\n            f.close()\n        except ..\n            j.push(d)\n        end\n        f = open(\"mi32cfg\",\"w\")\n        f.write(json.dump(j))\n        f.close()\n        log(j.tostring())\n    end\n\n    def cb(error,op,uuid,handle)\n        import persist\n        print(error,op,uuid,handle)\n        if op == 201\n            print(\"Handles:\",cbuf[1..cbuf[0]])\n        elif op == 227\n            print(\"MAC:\",cbuf[1..cbuf[0]])\n        elif op == 228\n            log(\"Disconnected\")\n        elif op == 229\n            print(\"Status:\",cbuf[1..cbuf[0]])\n        elif op == 230\n            var name = BLE.info()[\"connection\"][\"name\"]\n            print(\"Authenticated:\",name)\n            persist.setmember(name,cbuf[1..cbuf[0]].tob64())\n            self.updateMI32cfg()\n        end\n        if error == 0 &amp;&amp; op != 229\n            self.current_func = self.next_func\n        end\n    end\n\n    # custom section\n    def add_bpm()\n        BLE.set_svc(\"180D\") # Heart Rate Service\n        BLE.set_chr(\"2A37\") # Heart Rate Measurements Characteristics (BPM)\n        cbuf.setbytes(0,bytes(\"0100\"))\n        BLE.run(211,true, 1554) # READ | READ_ENC | NOTIFY |  READ_AUTHENT\n        self.then(/-&gt;self.add_loc())\n    end\n    def add_loc()\n        BLE.set_chr(\"2A38\") # Body Sensor Location\n        var b = bytes().fromstring(\"Please enter PIN first.\")\n        cbuf.setbytes(1,b)\n        cbuf[0] = size(b)\n        BLE.run(211)\n        self.then(/-&gt;self.add_ScanResp())\n    end\n\n    def add_ADV()\n        var payload = bytes(\"02010603020D18\") # flags and heartrate svc uuid\n        cbuf[0] = size(payload)\n        cbuf.setbytes(1,payload)\n        BLE.run(201)\n        self.then(/-&gt;self.wait())\n    end\n\n    def add_ScanResp()\n        var local_name = \"Tasmota BLE\"\n        var payload = bytes(\"0201060008\") + bytes().fromstring(local_name) # 00 before 08  is a placeholder\n        payload[3] = size(local_name) + 1 # ..set size of name\n        cbuf[0] = size(payload)\n        cbuf.setbytes(1,payload)\n        BLE.run(202)\n        self.then(/-&gt;self.add_ADV())\n    end\nend\n\nvar irk = IRK()\ntasmota.add_driver(irk)\n</code></pre> <p>This script can be launched directly from the Berry console and allows the pairing with the desired BLE device by presenting the ESP as a heartrate sensor. After successful authentication the script will save the MAC and the IRK to the <code>mi32cfg</code> file, which will start the tracking after reboot.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#mi32-configuration","title":"MI32 Configuration","text":"<p>There are several ways to manage and save your configuration.</p> <ol> <li> <p>Do it on the device Starting after a fresh install the driver will not find a configuration file and begins to search for every BLE device, that it can unterstand. Thus after a while all BLE sensors in sight should have been added to the non-persistent internal memory. You can save them with command <code>MI32CFG</code>, which will create a JSON-file named 'mi32cfg' in the root folder of the internal flash of the ESP32. After the next reboot, the driver will read this configuration into memory and does not add more devices to this list.</p> </li> <li> <p>Create the mi32cfg file manually After a fresh install you can simply create a file in the root folder of the flash file system with the name 'mi32cfg' and paste the JSON into it. Save it and reboot.</p> </li> <li> <p>Adding sensors including the keys directly on this page It is recommended to paste the data of 'mi32cfg' into the next textfield, if you already have one. After that press IMPORT MI32CFG. The config will get parsed and presented in a table.</p> </li> </ol>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#mi32cfg-importer-web-app","title":"MI32CFG Importer - Web App","text":"<p>MI32CFG - nothing imported yet</p> <p> Import MI32Cfg</p> <p> TableJSON <p>empty config</p> <pre><code>[]\n</code></pre> <p>After that you can add more sensors with the following Bind Key Generator, which will also add sensors, that do not need a key. This will only work, if your browser supports this and should work with Opera, Chrome and Edge. Safari and Firefox are not able to do this. After successful pairing a sensor in the next step or simply connecting to a non-encrypting sensor, the JSON in the textfield above will be updated with the added new sensor at the bottom. You can copy-paste the new JSON via the Web-GUI to the mi32cfg file on the ESP32 or save it elsewhere. For adding more sensors, repeat the whole procedure after refreshing the site (after saving your data!!).</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#bind-key-generator-web-app","title":"Bind Key Generator - Web App","text":"99% of the work was done by: https://atc1441.github.io/TelinkFlasher.html !!  <p>Will disable device in MiHome</p><p>When doing an activation here the device is needed to be activated in the Mi app again when wanted to use there.</p> Connect  Pair instantly BLE device name prefix filter(s) Reconnect Reset Page Disconnect BLE-Log: <p>.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#device_name","title":"MI32 legacy","text":"Device id:  \u2003Mi Token:  Mi Bind Key:  MAC:  Do Activation Clear Log","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#commands","title":"Commands","text":"Command Parameters MI32Cfg Saves current sensor list as mi32cfg file to the flash of the ESP32. After reboot only the saved drivers will be observed, no unknown drivers will be added. A valid config file is mandatory for HomeKit in this driver. MI32Key Set a \"bind_key\" for a MAC-address to decrypt sensor data (LYWSD03MMC, MJYD2S). The argument is a 44 uppercase characters long string, which is the concatenation of the bind_key and the corresponding MAC.<code>&lt;00112233445566778899AABBCCDDEEFF&gt;</code> (32 characters) = bind_key<code>&lt;112233445566&gt;</code> (12 characters) = MAC of the sensor<code>&lt;00112233445566778899AABBCCDDEEFF112233445566&gt;</code> (44 characters)= final string MI32Name Override the name of the sensor with <code>mi32name&lt;slot&gt; &lt;name&gt;</code>. Slot is the position of the sensor in the internal array (like in the payload from <code>status 8</code>), starting with 0. Will not append the OUI of the MAC to the name in the MQTT payload. Should be made persistent using command <code>mi32cfg</code>. <code>mi32name&lt;slot&gt;</code> will delete the override at runtime, but not change the config file. MI32Option0 <code>0</code> = sends only recently received sensor data<code>1</code> = aggregates all recent sensors data types MI32Option1 <code>0</code> = shows full sensor data at Teleperiod<code>1</code> = shows no sensor data at Teleperiod MI32Option2 <code>0</code> = sensor data only at Teleperiod (default)<code>1</code> = direct bridging of BLE data to MQTT messages MI32Option3 <code>0</code> = do not add new sensors, which is set after a valid mi32cfg file is parsed after boot (default)<code>1</code> = turn on auto-adding of new sensors again MI32Option4 <code>0</code> = use passive scanning (default)<code>1</code> = use active scanning, needed for a few sensors (can have negative side effects!) MI32Option5 <code>0</code> = do not report generic BLE devices (default)<code>1</code> = report every BLE device with a public adress or every device with a resolvable private address with the IRK provided as the key. <p>Tip</p> <p>If you really want to read battery for LYWSD02, Flora and CGD1, consider doing it in Berry.</p> <p>Tip</p> <p>If you want to add a new BLE sensor to your config on the device, use <code>MI32option3 1</code> to add the new sensor by catching a BLE packet. Then use <code>MI32Cfg</code> to save the new config to the file system. To support unknown sensor types give them a suitable name with <code>mi32name&lt;slot&gt; &lt;name&gt;</code>, then save with <code>mi32cfg</code>. The system will learn about the sensors feature set by receiving data packets. The feature set can be saved too with <code>mi32cfg</code> in order to have knowledge about it at boot time.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#mi-dashboard","title":"Mi Dashboard","text":"<p>The driver provides an extended web GUI to show the observed Xiaomi sensors in a widget style, that features a responsive design to use the screen area as effective as possible. The other advantage is, that only the widget with new data gets redrawn (indicated by a fading circle) and no unnecessary refresh operations will happen. A simple graph shows if valid data for every hour was received in the last 24h, where only one gap for the coming hour is not a sign of an error. Configured sensors with no received packet since boot or key/decryption errors are dimmed. Own widgets can be added with Berry using the <code>MI32</code> module, thus allowing to create small Apps or visualizing the state of arbitrary BLE devices.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#homeassistant-and-tasmota-ble-sensors","title":"Homeassistant and Tasmota - BLE sensors","text":"<p>After creating a valid configuration with a <code>mi32cfg</code> file in the local file system, it is possible to announce all sensors to Homeassistant via MQTT discovery by using a Berry script. This will parse the <code>mi32cfg</code> file and create all needed entities for Homassistant by publishing specific messages to Homeassistant. It will not generate duplicated sensors, but instead allows to use multiple ESP's as data sources for the same BLE sensor. The best way is to not fiddle around with the default Tasmota configuration, especially not to change the default topic name, because this will lose the ability to automatically configure everything.</p> <p>One way to use it, is to save the following script disco.be to the filesystem of the ESP and the launch it at the startup. Create <code>autoexec.bat</code> if not already present and add the following line: <code>br load(\"disco\")</code> This will create and/or init entities for every sensor and group them as a single device for every BLE device in Homeassistants MQTT integration.</p> <p>In the diagnostic panel of every sensor you will see the signal strength of the BLE sensor in relation to the observing ESP, so the value will very likely differ between multiple of these BLE-ESP32-combinations. A virtual Tasmota BLE Hub device is created, that shows all contributing ESP32 nodes for a better overview.</p> <p>For sensors like humidity or temperature it should not matter, how many ESP's do contribute data. For buttons of a remote control or binary sensors like motion, this could have side effects, as multiple events will be generated (in a very short time frame). The dimmer of the YLKG08 is special case, as the data of the BLE sensor are relative steps, that are combined to a so called <code>number</code>entity with a range of  0 - 100. That way multiple messages from many ESP's will add up and \"accelerate\" the dimmer knob.</p> <p>Tip</p> <p>Use the embedded MI32CFG Importer on this site to delete unwanted sensors and then save the result to the ESP32 of your choice.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#berry-support","title":"Berry support","text":"<p>The driver provides two Berry modules to allow extensions and interactions with the sensors. It is also possible to write generic BLE functions unrelated to Xiaomi sensors.</p> <p>What can be done?</p> Example Improv Wi-Fi use Bluetooth Low-Energy for Wi-Fi commissioning of your ESP32 device iBeacon create your own beacon, that can be tracked BTHome build your own BLE sensor, that sends data via BLE advertisements BLE lights control lights that uses smartphone apps like Happy Lighting, Triones, ILC, ... BLE remotes use a cheap BLE remote control like the BPR2S Air Mouse BLE UART control Tasmota without WiFi via Nordic UART Service (NUS) Tuya BLE Control Tuya Bluetooth devices like the Fingerbot","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#mi32-module","title":"MI32 module","text":"<p>This module allows access and modification of the internal data backend of the MI32 driver for the observed Xiaomi sensors. First we need to import the module: <code>import MI32</code></p> MI32 method Parameters and details MI32.devices <code>()</code> returns the number of monitored Xiaomi devices MI32.get_name <code>(x)</code> returns a string with the sensor name (internal name of the driver) at slot x in the internal sensor array of the driver MI32.get_MAC <code>(x)</code> returns a byte buffer (6 bytes) representing the MAC at slot x in the internal sensor array of the driver MI32.set_bat <code>(x,v)</code>  sets the battery value to v at slot x in the internal sensor array of the driver MI32.set_hum <code>(x,v)</code>  sets the humidity value to v at slot x in the internal sensor array of the driver MI32.set_temp <code>(x,v)</code>  sets the temperature value to v at slot x in the internal sensor array of the driver MI32.widget <code>(html:string[,cb:function])</code>  send a custom widget to the dashboard expecting a string with minimal content of <code>&lt;div class=\"box\" id=\"myID\"&gt;hello world!&lt;/div&gt;</code>, optionally get notified with a callback function for a complex UI","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#ble-module","title":"BLE module","text":"<p>For generic BLE access we import the module: <code>import BLE</code></p> BLE Function Parameters and details adv_cb <code>(callback function:function, buffer:bytes)</code>Will start listening to advertisements or stop it by providing <code>nil</code> as function.The callback function will have arguments <code>service data</code> and <code>manufacturer data</code> as integer values, that are indices pointing to these kinds of data in the buffer or have a value of 0 if there is no such data in the advertisement. adv_watch <code>(MAC:bytes[, type:int])</code>Watch BLE address exclusively, is added to a list (MAC is a 6-byte-buffer, type is optional 0-3, default is 0). adv_block <code>(MAC:bytes[, type:int])</code>Block BLE address, is added to a list (MAC is a 6-byte-buffer, type is optional 0-3, default is 0). conn_cb <code>(callback function:function, buffer:bytes)</code>Will init Tasmota as a peripheral device, that can connect to a central device.The callback function will have arguments <code>error</code>,<code>op code</code>,<code>16-bit uuid</code> and <code>handle</code>. If an UUID with more than 16 bit is accessed, the automatic conversion to 16-bit will probably give no usable result, thus the handle should be used in these cases. serv_cb <code>(callback function:function, buffer:bytes)</code>Will init Tasmota as a central device (aka server) or stop it by providing <code>nil</code> as function.The callback function will have arguments <code>error</code>,<code>op code</code>,<code>16-bit uuid</code> and <code>handle</code>. If an UUID with more than 16 bit is accessed, the automatic conversion to 16-bit will probably give no usable result, thus the handle should be used in these cases. set_MAC <code>(MAC:bytes[, type:int]) -&gt; handled:bool</code>Set MAC for for use as peripheral or central device as a 6-byte-buffer, type is optional 0-3, default is 0. set_svc <code>(UUID:string[, discoverAttributes:bool]) -&gt; handled:bool</code>Set service UUID for for use as peripheral or central device as a 16-Bit or 128-Bit service uuid, the latter must include the dashes. Optional: Let the BLE stack discover all attributes of the service, which takes time and battery. Default is <code>false</code>. set_chr <code>(UUID:string) -&gt; handled:bool</code>Set characteristic UUID for for use as peripheral or central device as a 16-Bit or 128-Bit service uuid, the latter must include the dashes. run <code>(operation:int[, response:bool, optional_arg: int])</code>Start a Bluetooth operation, where <code>operation</code> is a proprietary code - see sections below. <code>Response</code> is optional and defaults to <code>false</code>. <code>optional_arg</code> depends on used operation, no default. loop <code>()</code>Triggers a synchronization between Bluetooth stack and Berry, thus firing callbacks, if there is new data. Will typically be called from Berrys Fast Loop. <p>To simplify BLE access this works in the form of state machine, where you have to set some properties of a context and then finally launch an operation. Besides we have three callback mechanisms for listening to advertisements, active sensor connections with Tasmota as a client and providing a server including advertising. All you need is a byte buffer in Berry for data exchange and a Berry function as the callback. The byte buffer is always organized in the format <code>length-data bytes</code>, where the first byte represents the length of the following data bytes, which results in a maximum of 255 data bytes. Because Bluetooth is inherently very asynchronous, almost every status, result or error condition is reported via callbacks. <pre><code>sequenceDiagram\n    participant Berry\n    participant Context\n    participant Bluetooth-Task\n    Berry-&gt;&gt;Berry: create bytes buffer for data exchange\n    Berry-&gt;&gt;Berry: create callback function\n    Berry-&gt;&gt;Context: bind buffer and callback to context\n    Berry-&gt;&gt;Context: set properties with methods of BLE module\n    Berry-&gt;&gt;Context: launch a command with op code\n    Context-&gt;&gt;Bluetooth-Task: act on the BLE stack asynchronously\n    Bluetooth-Task-&gt;&gt;Context: finish requested job, update context\n    Context-&gt;&gt;Berry: callback function</code></pre></p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#observer-aka-advertisement-listener","title":"Observer (aka Advertisement listener)","text":"<p>To listen to advertisements inside a class (that could be a driver) we could initialize like that:</p> <p>Simple Advertisement Listener</p> <pre><code>class LISTENER\n    var buf # transfer buffer, gets filled by the Bluetooth driver, can be read in Berry\n    def init()\n        import BLE\n        self.buf = bytes(-64) # will be used in the form length-data, so self.buf[0] = length of actual data\n        var callback_pointer = cb.gen_cb(/svc,manu-&gt;self.cb(svc,manu))\n        BLE.adv_cb(callback_pointer,self.buf)\n    end\n    def cb(svc,manu)\n        print(\"Full buffer:\")\n        print(self.buf[1..self.buf[0]])\n        if svc != 0 # if service data present\n            print(\"service data:\")\n            var _len = self.buf[svc-2]-1\n            # the index points to the data part of an AD element, two position before that is length of \"type + data\",\n            # so we subtract one byte from that length to get the \"pure\" data length\n            print(self.buf[svc.._len+svc])\n        end\n        if manu != 0 # if manufacturer data present\n            print(\"manufacturer data:\")\n            var _len = self.buf[manu-2]-1\n            print(self.buf[manu.._len+manu])\n        end\n    end\nend\n\nreturn LISTENER()\n</code></pre> <p>To stop listening call: <code>BLE.adv_cb(nil)</code></p> <p>We just have to provide a pointer to a (callback) function and a byte buffer.  The returned data in the byte buffer uses the following proprietary format: <pre><code>6 bytes - MAC\n1 byte - address type\n1 byte  - RSSI\n1 byte  - length of payload\nn bytes - payload data\n</code></pre> <pre><code>packet-beta\n0-5: \"MAC\"\n6: \"t\"\n7: \"R\"\n8: \"l\"\n9-40: \"payload data (up to 31 byte)\"\n41-71: \"optional scan response (up to 31 byte)\"</code></pre></p> <p>The advertisement callback function provides 2 arguments, which are indices of the whole buffer that point to optional parts of the payload. A value of 0 means, this type of of element is not in the payload. 1. svc (= service data index) - index of service data in the advertisement buffer 2. manu (= manufacturer data index) - index of manufacturer data in the advertisement buffer</p> <p>The payload is always provided completely, so every possibles AD type can be parsed in Berry if needed, but for convenience the two most important types for IOT applications are given in the callback.</p> <p>Tip</p> <p>The payload can be parsed according to the BLE GAP standard. It consists of AD elements of variable size in the format length-type-data, where the length byte describes the length of the two following components in bytes, the type byte is defined in the GAP and the data part of 'length-1' bytes is interpreted according to the type.</p> <p>Tip</p> <p>The watchlist is more effective to avoid missing packets than the blocklist in environments with high BLE traffic. Both methods work for the internal Xiaomi driver and the post processing with Berry, because they set properties of the underlying Bluetooth framework.</p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#peripheral-role-aka-client","title":"Peripheral role (aka client)","text":"<p>Communicating via connections is a bit more complex. We have to start with a callback function and a byte buffer again. <pre><code># simple example for the Berry console\nimport BLE\ncbuf = bytes(-64)\n\ndef cb(error,op,uuid,handle)\nend\n\ncbp = tasmota.gen_cb(/e,o,u,h-&gt;cb)\nBLE.conn_cb(cbp,cbuf)\n</code></pre></p> <pre><code>---\ntitle: \"Return values of the callback function\"\n---\nclassDiagram\nclass cb{\n    &lt;&lt;function&gt;&gt;\n    error, operation, uuid, handle\n}\nclass error{\n    &lt;&lt;int&gt;&gt;\n    0 - no error\n    1 - connection error\n    2 - did disconnect\n    3 - did not get service\n    4 - did not get characteristic\n    5 - could not read value\n    6 - characteristic can not notify\n    7 - characteristic not writable\n    8 - did not write value\n    9 - timeout: did not read on notify\n}\nclass operation{\n    &lt;&lt;int&gt;&gt;\n    1   - read\n    2   - write\n    3   - subscribe - response to command to subscribe, not a notification\n    5   - disconnect\n    6   - retrieve all services of connected device\n    7   - retrieve all characteristics and GATT Characteristic Property Flags  of a service\n    103 - notify read - the notification with data from the BLE server\n}\nclass uuid{\n    &lt;&lt;int&gt;&gt;\n    16-bit uuid\n}\nclass handle{\n    &lt;&lt;int&gt;&gt;\n    16-bit handle\n}\ncb --|&gt; error\ncb --|&gt; operation\ncb --|&gt; uuid\ncb --|&gt; handle</code></pre> <p>Internally this creates a context, that can be modified with the following methods:</p> <p>Set the MAC of the device we want to connect to: <code>BLE.set_MAC(MAC,type)</code>: where MAC is a 6-byte-buffer, type is optional 0-3, default is 0</p> <p>Set service and characteristic: <code>BLE.set_svc(string)</code>: where string is a 16-Bit, 32-Bit or 128-Bit service uuid <code>BLE.set_chr(string)</code>: where string is a 16-Bit, 32-Bit or 128-Bit characteristic uuid</p> <p>Finally run the context with the specified properties and (if you want to get data back to Berry) have everything prepared in the callback function: <code>BLE.run(operation,response)</code>: where operation is a number (optional: boolean w/o server response to write or subscribe, default is false) , that represents an operation in a proprietary format. Values below 10 will not disconnect automatically after completion:</p> <ul> <li>1 - read</li> <li>2 - write</li> <li>3 - subscribe</li> <li>5 - disconnect</li> <li>6 - get all services</li> <li> <p>7 - get all characteristics</p> </li> <li> <p>11 - read - then disconnect (returns 1 in the callback)</p> </li> <li>12 - write - then disconnect (returns 2 in the callback)</li> <li>13 - subscribe - then disconnect after waiting for notification (returns 3 in the callback)</li> </ul> <p>The buffer format for reading and writing is in the format (length - data): <pre><code>1 byte  - length of data in bytes\nn bytes - data\n</code></pre></p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#central-role-aka-server","title":"Central role (aka server)","text":"<p>The server is initiated similarly with <code>BLE.serv_cb(cbp,cbuf)</code>. After that you have to construct the server by first adding all characteristics and finally starting it, by setting the advertisement data for the first time. Setting advertisement data without adding characteristics will not start a BLE server but only a BLE Broadcaster, which is totally fine for some use cases (i.e. Beacons, BTHome). The BLE server can be stopped with <code>BLE.serv_cb(nil)</code>, which will restart the \"BLE Scan Task\".</p> <p>The callback functions returns error, operation, 16-bit-uuid and 16-bit-handle.</p> <pre><code># simple server setup example for the Berry console\nimport BLE\ncbuf = bytes(-256)\n\ndef cb(error,op,uuid,handle)\nend\n\ncbp = tasmota.gen_cb(cb)\nBLE.serv_cb(cbp,cbuf)\n# now add characteristics and advertisement ...\n</code></pre>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#command-op-codes","title":"Command op codes:","text":"<ul> <li>201 - add and/or set advertisement data according to the BLE standard, typically chaining small packets in the in the format of <code>length-type-data</code>. When called for the first time, will return a bytes buffer, that represents an array of the 16-bit-handles of all characteristics in the order of addition.</li> <li>202 - add and/or set scan response data, according to the BLE standard which is equally  to the advertisement data. Should be used sparsely.</li> <li>211 - add and/or set characteristic with value of bytes buffer.  For simplicity a <code>Client Characteristic Configuration Descriptor</code> (aka 0x2902) will be added on construction of every characteristic and read, write, notification and indication is enabled. You can select write with or without response withe the optional boolean of  <code>BLE.set_chr(string, bool)</code>, which defaults to \"write with no response\". The function call will always trigger a callback. As every characteristic belongs to a service, <code>BLE.set_svc(string)</code> must have been called before.</li> </ul>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#response-op-codes-triggered-when-a-client-interacts-with-the-server","title":"Response op codes (triggered when a client interacts with the server):","text":"<ul> <li>221 - on read of a characteristic, returns no buffer data</li> <li>222 - on write of a characteristic, returns the written values as byte buffer data</li> <li>223 - on unsubscribe, returns no buffer data</li> <li>224 - on subscribe to notifications, returns no buffer data</li> <li>225 - on subscribe to indications, returns no buffer data</li> <li>226 - on subscribe to notifications and indications, returns no buffer data</li> <li>227 - on connect, returns MAC of client device as byte buffer</li> <li>228 - on disconnect, returns no buffer data</li> <li>229 - on status, returns error code as byte buffer</li> <li>230 - on authentication, returns raw security record as byte buffer</li> </ul> <p>Tip</p> <p>By default the synchronization between the BLE framework and Berry happens every 50 milliseconds, which should be enough for the majority of use cases. For very fast BLE devices it can be necessary to use Berrys <code>fast_loop</code> to trigger this at maximum speed (of about every 5 milliseconds). This is typically done in an init function of a class like that: <code>tasmota.add_fast_loop(/-&gt; BLE.loop())</code></p>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#configuration-op-codes-return-immediately-no-callback-involved","title":"Configuration op codes (return immediately, no callback involved):","text":"<ul> <li>231 - set own address to random with <code>BLE.set_MAC(bytes(\"aabbccddeeff\"),1)</code></li> <li>232 - set advertising parameters with bytes() descriptor of length 5 [advType:byte, minInterval:uint16_t, max interval: uint16_t]</li> <li>233 - set GAP name with <code>string</code> in bytes buffer (must be null terminated)</li> </ul>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#berry-examples","title":"Berry examples","text":"<p>Here is an implementation of the \"old\" MI32 commands:</p> <p>removed MI32 commands in Berry</p> <pre><code>import BLE\nimport MI32\n\nj = 0\nsl = 0\n\ncbuf = bytes(-64)\ndef cb()\n\n    if j == 0\n        print(cbuf)\n    end\n    if j == 1\n        var temp = cbuf.get(1,2)/100.0\n        var hum = cbuf.get(3,1)*1.0\n        var bat = (cbuf.get(4,2)-2100)/12\n        MI32.set_temp(sl,temp)\n        MI32.set_hum(sl,hum)\n        MI32.set_bat(sl,bat)\n    end\n    if j == 4\n        var bat = cbuf.get(1,1)\n        MI32.set_bat(sl,bat)\n    end\nend\n\ncbp = tasmota.gen_cb(cb)\nBLE.conn_cb(cbp,cbuf)\n\ndef SetMACfromSlot(slot)\n    if slot+1&gt;MI32.devices()\n        return \"out of bounds\"\n    end\n    sl = slot\n    BLE.set_MAC(MI32.get_MAC(slot))\nend\n\ndef MI32Time(slot)\n    SetMACfromSlot(slot)\n    BLE.set_svc(\"EBE0CCB0-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n    BLE.set_chr(\"EBE0CCB7-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n    cbuf[0] = 5\n    var t = tasmota.rtc()\n    var utc = t.item(\"utc\")\n    var tz = t.item(\"timezone\")/60\n    cbuf.set(1,utc,4)\n    cbuf.set(5,tz,1)\n    j = 0\n    BLE.run(12,true)\nend\n\ndef MI32Unit(slot,unit)\n    SetMACfromSlot(slot)\n    BLE.set_svc(\"EBE0CCB0-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n    BLE.set_chr(\"EBE0CCBE-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n    cbuf[0] = 1\n    cbuf[1] = unit\n    j = 0\n    BLE.run(12,true)\nend\n\ndef MI32Bat(slot)\n    SetMACfromSlot(slot)\n    var name = MI32.get_name(slot)\n    if name == \"LYWSD03\"\n        BLE.set_svc(\"ebe0ccb0-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        BLE.set_chr(\"ebe0ccc1-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        j = 1\n        BLE.run(13)\n    end\n    if name == \"MHOC401\"\n        BLE.set_svc(\"ebe0ccb0-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        BLE.set_chr(\"ebe0ccc1-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        j = 1\n        BLE.run(13,true)\n    end\n    if name == \"LYWSD02\"\n        BLE.set_svc(\"ebe0ccb0-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        BLE.set_chr(\"ebe0ccc1-7A0A-4B0C-8A1A-6FF2997DA3A6\")\n        j = 2\n        BLE.run(11,true)\n    end\n    if name == \"FLORA\"\n        BLE.set_svc(\"00001204-0000-1000-8000-00805f9b34fb\")\n        BLE.set_chr(\"00001a02-0000-1000-8000-00805f9b34fb\")\n        j = 3\n        BLE.run(11,true)\n    end\n    if name == \"CGD1\"\n        BLE.set_svc(\"180F\")\n        BLE.set_chr(\"2A19\")\n        j = 4\n        BLE.run(11,true)\n    end\nend\n</code></pre>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Bluetooth_MI32/#more-examples","title":"More Examples","text":"Control Tasmota with your Smartphone via Bluetooth <pre><code>#------------------------------------------------------------------------------\n- NRF Connect UART 2 Tasmota\n- use with App NRF Toolbox - Nordic UART Service\n- use Log console\n- first command must be '123456' as PIN at application level\n- phone app will show direct command response, not the whole log\n-------------------------------------------------------------------------------#\n\nimport BLE\nvar cbuf = bytes(-255)\n\nclass NRFUART : Driver\n    var current_func, next_func\n    var pin_ready\n    var ssid, pwd, imp_state, msg_buffer, ble_server_up\n    static PIN = \"123456\" # \ud83e\udd2b\n\n    static nordic_svc = \"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\"\n    static RX  = \"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\"\n    static TX  = \"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\"\n\n    def init()\n        import cb\n        var cbp = cb.gen_cb(/e,o,u,h-&gt;self.cb(e,o,u,h))\n        BLE.serv_cb(cbp,cbuf)\n        # BLE.set_svc(self.imp_svc)\n        self.current_func = /-&gt;self.add_TX()\n        log(\"BLE: ready for Nordic UART via BLE\")\n        self.pin_ready = false\n        self.msg_buffer = []\n        self.ble_server_up = false\n    end\n\n    def every_50ms()\n        self.current_func()\n    end\n\n    def wait()\n\n    end\n\n    def then(func)\n        # save function pointers for callback, typically expecting a closure\n        self.next_func = func\n        self.current_func = /-&gt;self.wait()\n    end\n\n    def sendTX(r)\n        var resp_left = nil\n        if size(r) &gt; size(cbuf) - 2\n            log(f\"message too large with {size(r)} chars!! ... will cut it\",3)\n            resp_left = r[253..]\n            r = r[0..253]\n        end\n        BLE.set_chr(self.TX)\n        cbuf[0] = size(r)\n        var r_buf = bytes().fromstring(r)\n        log(r_buf)\n        cbuf.setbytes(1,r_buf)\n        log(cbuf)\n        BLE.run(211)\n        if resp_left == nil\n            self.then(/-&gt;self.wait())\n        else\n            self.then(/-&gt;self.sendTX(resp_left))\n        end\n    end\n\n    def execCmd(c)\n        var resp\n        if self.pin_ready == true\n            resp = tasmota.cmd(c).tostring()\n            log(f\"{c}-&gt;{resp}\",1)\n        else\n            if c == self.PIN\n                resp = \"PIN accepted ... enter commands\"\n                self.pin_ready = true\n            else\n                resp = \"Wrong PIN!!\"\n                print(c,self.PIN)\n            end\n        end\n        self.sendTX(resp)\n    end\n\n    def cb(error,op,uuid,handle)\n        # print(error,op,uuid,handle)\n        if op == 201\n            print(\"Handles:\",cbuf[1..cbuf[0]])\n            self.ble_server_up = true\n        elif op == 221\n\n        elif op == 222\n            if handle == 6\n                self.then(/-&gt;self.execCmd((cbuf[1..cbuf[0]]).asstring()))\n            end\n        elif op == 227\n\n        elif op == 228\n            log(\"BLE: Disconnected\",1)\n            self.pin_ready = false\n        elif op == 229\n            # print(\"Status:\",cbuf[1..cbuf[0]])\n        end\n        if error == 0 &amp;&amp; op != 229\n            self.current_func = self.next_func\n        end\n    end\n\n    # custom section\n    def add_TX()\n        BLE.set_svc(self.nordic_svc)\n        BLE.set_chr(self.TX)\n        cbuf.setbytes(0,bytes(\"0100\"))\n        BLE.run(211)\n        self.then(/-&gt;self.add_RX())\n    end\n    def add_RX()\n        BLE.set_chr(self.RX)\n        var b = bytes().fromstring(\"Please enter PIN first.\")\n        cbuf.setbytes(1,b)\n        cbuf[0] = size(b)\n        BLE.run(211)\n        self.then(/-&gt;self.add_ScanResp())\n    end\n    # services and characteristics are set, now start the server with first set of advertisement data\n    def add_ADV()\n        import string\n        var svcuuid = string.tr(self.nordic_svc,\"-\",\"\")\n        var payload = bytes(\"0201061107\") + bytes(svcuuid).reverse() # flags and Nordic svc uuid\n        cbuf[0] = size(payload)\n        cbuf.setbytes(1,payload)\n        BLE.run(201)\n        self.then(/-&gt;self.wait())\n    end\n    # unused example function, could be called from add_fff2()\n    def add_ScanResp()\n        var local_name = \"Tasmota BLE\"\n        var payload = bytes(\"0201060008\") + bytes().fromstring(local_name) # 00 before 08  is a placeholder\n        payload[3] = size(local_name) + 1 # ..set size of name\n        cbuf[0] = size(payload)\n        cbuf.setbytes(1,payload)\n        BLE.run(202)\n        self.then(/-&gt;self.add_ADV())\n    end\nend\n\nvar nrfuart = NRFUART()\ntasmota.add_driver(nrfuart)\n</code></pre> Govee desk lamp - pre-alpha <pre><code># control a BLE Govee desk lamp\nclass GOVEE : Driver\n    var buf\n\n    def init(MAC)\n        import BLE\n        self.buf = bytes(-21) # create a byte buffer, first byte reserved for length info\n        self.buf[0] = 20 # length of the data part of the buffer in bytes\n        self.buf[1] = 0x33 # a magic number - control byte for the Govee lamp\n        var cbp = tasmota.gen_cb(/e,o,u-&gt;self.cb(e,o,u)) # create a callback function pointer\n        BLE.conn_cb(cbp,self.buf)\n        BLE.set_MAC(bytes(MAC),1) # addrType: 1 (random)\n    end\n\n    def cb(error,op,uuid)\n        if error == 0\n            print(\"success!\")\n            return\n        end\n        print(error)\n    end\n\n    def chksum()\n        var cs = 0\n        for i:1..19\n            cs ^= self.buf[i]\n        end\n        self.buf[20] = cs\n    end\n\n    def clr()\n        for i:2..19\n            self.buf[i] = 0\n        end\n    end\n\n    def writeBuf()\n        import BLE\n        BLE.set_svc(\"00010203-0405-0607-0809-0a0b0c0d1910\")\n        BLE.set_chr(\"00010203-0405-0607-0809-0a0b0c0d2b11\")\n        self.chksum()\n        print(self.buf)\n        BLE.run(12) # op: 12 (write, then disconnect)\n    end\nend\n\ngv = GOVEE(\"AABBCCDDEEFF\") # MAC of the lamp\ntasmota.add_driver(gv)\n\ndef gv_power(cmd, idx, payload, payload_json)\n    if int(payload) &gt; 1\n        return 'error'\n    end\n    gv.clr()\n    gv.buf[2] = 1 # power cmd\n    gv.buf[3] = int(payload)\n    gv.writeBuf()\nend\n\ndef gv_bright(cmd, idx, payload, payload_json)\n    if int(payload) &gt; 255\n        return 'error'\n    end\n    gv.clr()\n    gv.buf[2] = 4 # brightness\n    gv.buf[3] = int(payload)\n    gv.writeBuf()\nend\n\ndef gv_rgb(cmd, idx, payload, payload_json)\n    var rgb = bytes(payload)\n    print(rgb)\n    gv.clr()\n    gv.buf[2] = 5 # color\n    gv.buf[3] = 5 # manual ??\n    gv.buf[4] = rgb[3]\n    gv.buf[5] = rgb[0]\n    gv.buf[6] = rgb[1]\n    gv.buf[7] = rgb[2]\n    gv.writeBuf()\nend\n\ndef gv_scn(cmd, idx, payload, payload_json)\n    gv.clr()\n    gv.buf[2] = 5 # color\n    gv.buf[3] = 4 # scene\n    gv.buf[4] = int(payload)\n    gv.writeBuf()\nend\n\ndef gv_mus(cmd, idx, payload, payload_json)\n    var rgb = bytes(payload)\n    print(rgb)\n    gv.clr()\n    gv.buf[2] = 5 # color\n    gv.buf[3] = 1 # music\n    gv.buf[4] = rgb[0]\n    gv.buf[5] = 0\n    gv.buf[6] = rgb[1]\n    gv.buf[7] = rgb[2]\n    gv.buf[8] = rgb[3]\n    gv.writeBuf()\nend\n\n\ntasmota.add_cmd('gpower', gv_power) # only on/off\ntasmota.add_cmd('bright', gv_bright) # brightness 0 - 255\ntasmota.add_cmd('color', gv_rgb) #  color 00FF0000 - sometimes the last byte has to be set to something greater 00, usually it should be 00\ntasmota.add_cmd('scene', gv_scn) # scene 0 - ?,\ntasmota.add_cmd('music', gv_mus) # music 00 - 0f + color 000000   -- does not work at all!!!\n\n#   POWER      = 0x01\n#   BRIGHTNESS = 0x04\n\n#   COLOR      = 0x05\n    #   MANUAL     = 0x02 - seems to be wrong for this lamp\n    #   MICROPHONE = 0x01 - can not be confirmed yet\n    #   SCENES     = 0x04\n</code></pre>  Air mouse controller <pre><code># Simple Berry driver for the BPR2S Air mouse (a cheap BLE HID controller)\n\nimport BLE\n\nclass BLE_BPR2S : Driver\n    var buf\n    var connecting, connected, new_position\n    var x,y\n\n    def init(MAC,addr_type)\n        var cbp = tasmota.gen_cb(/e,o,u,h-&gt;self.cb(e,o,u,h))\n        self.buf = bytes(-256)\n        BLE.conn_cb(cbp,self.buf)\n        BLE.set_MAC(bytes(MAC),addr_type)\n        print(\"BLE: will try to connect to BPR2S with MAC:\",MAC)\n        self.connect()\n        tasmota.add_fast_loop(/-&gt; BLE.loop()) # needed for mouse position\n    end\n\n    def connect()\n        self.connecting = true\n        self.connected = false\n        self.new_position = false\n        self.x = 128\n        self.y = 128\n        BLE.set_svc(\"1812\")\n        BLE.set_chr(\"2a4a\") # the first characteristic we have to read\n        BLE.run(1) # read\n    end\n\n    def every_second()\n        if (self.connecting == false &amp;&amp; self.connected == false)\n            print(\"BLE: try to reconnect BPR2S\")\n            self.connect()\n        end\n    end\n\n    def every_50ms()\n        import mqtt\n        if self.new_position == true\n            mqtt.publish(\"tele/BPR2S\",format('{\"mouse\":{\"x\":%s,\"y\":%s}}',self.x,self.y))\n            self.new_position = false\n        end\n    end\n\n    def handle_read_CB(uuid) # uuid is the callback characteristic\n        self.connected = true;\n    # we just have to read these characteristics before we can finally subscribe\n        if uuid == 0x2a4a # did receive HID info\n            print(\"BLE: now connecting to BPR2S\")\n            BLE.set_chr(\"2a4b\")\n            BLE.run(1) # read next characteristic\n        elif uuid == 0x2a4b # did receive HID report map\n            BLE.set_chr(\"2a4d\")\n            BLE.run(1) # read to trigger notifications of the HID device\n        elif uuid == 0x2a4d # did receive HID report\n            BLE.set_chr(\"2a4d\")\n            BLE.run(3) # subscribe\n        end\n    end\n\n    def handle_mouse_pos()\n        var x = self.buf.getbits(12,12)\n        if x &gt; 2048\n            x -= 4096\n        end\n        var y = self.buf.getbits(24,12)\n        if y &gt; 2048\n            y -= 4096\n        end\n\n        self.x += (x &gt;&gt; 7) # some conversion factor\n        self.y += (y &gt;&gt; 7)\n\n        # could be mapped to hue, saturation, brightness, ...\n        if self.x &gt; 255 self.x = 255\n        elif self.x &lt; 0 self.x = 0\n        end\n        if self.y &gt; 255 self.y = 255\n        elif self.y &lt; 0 self.y = 0\n        end\n        self.new_position = true\n    end\n\n    def handle_HID_notification(h)\n        import mqtt\n        var t = \"key\"\n        var v = \"\"\n        if h == 42\n            var k = self.buf[3]\n            if k == 0x65\n                v = \"square\"\n            elif k == 0x4f\n                v = \"right\"\n            elif k == 0x50\n                v = \"left\"\n            elif k == 0x51\n                v = \"down\"\n            elif k == 0x52\n                v = \"up\"\n            elif k == 0x2a\n                v = \"back\"\n            end\n        elif h == 38\n            var k = self.buf[1]\n            if k == 0x30\n                v = \"on\"\n            elif k == 0xe2\n                v = \"mute\"\n            elif k == 0x23\n                v = \"triangle\"\n            elif k == 0x21\n                v = \"circle\"\n            elif k == 0x41\n                v = \"set\"\n            elif k == 0x24\n                v = \"return\"\n            elif k == 0xea\n                v = \"minus\"\n            elif k == 0xe9\n                v = \"plus\"\n            end\n        elif h == 34\n            self.handle_mouse_pos()\n            return\n        end\n        if v != ''\n            mqtt.publish(\"tele/BPR2S\",format('{\"%s\":\"%s\"}',t,v))\n        # else # will be triggered on button release too\n        #     print(self.buf[1..self.buf[0]],h) # show the packet as byte buffer\n        end\n    end\n\n    def cb(error,op,uuid,handle)\n        if error == 0\n            if op == 1 # read OP\n                # print(op,uuid)\n                self.handle_read_CB(uuid)\n            elif op == 3\n                self.connecting = false\n                self.connected = true\n                print(\"BLE: init completed for BPR2S\")\n            elif op == 5\n                self.connected = false\n                self.connecting = false\n                print(\"BLE: did disconnect BPR2S ... will try to reconnect\")\n            elif op == 103 # notification OP\n                if self.connected == false return end\n                self.handle_HID_notification(handle)\n            end\n        else\n            print(\"BLE: error:\",error)\n            if self.connecting == true\n                print(\"BLE: init sequence failed ... try to repeat\")\n                self.connecting = false\n            end\n        end\n    end\n\nend\n\nble_hid = BLE_BPR2S(\"E007020103C1\",1) # HID controller MAC and address type\ntasmota.add_driver(ble_hid)\n</code></pre>","tags":["Bluetooth","BLE","Berry","Mijia","Xiaomi","ESP32"]},{"location":"Buttons-and-Switches/","title":"Buttons and Switches","text":"<p>Buttons and switches: why the difference and how to configure them</p> <p>A typical device usually has at least one button (exception being bulbs and some lights) to control the power state(s). Additional buttons and switches can be wired to a free GPIO and configured in Module or Template settings.</p> <p>Note</p> <p>Other than relays/lights, Tasmota does not publish the state of components (switches, buttons, sensors, etc.) in real-time. State of components is transmitted automatically each TelePeriod via the <code>SENSORS</code> message.</p>"},{"location":"Buttons-and-Switches/#choose-gpio-configuration","title":"Choose GPIO configuration","text":"<p>All board are not born equal so does your own diy realisations, you might have choosen to put your own pull-up resistors , or had an inverted logic on your button input.</p> <p>The first thing is to correctly select the Button or Switch variant accordingly in the \"Configure module\" or \"Configure template\" menu. the variants supported by ESP8266 are following :</p> <ul> <li>Button : Button active low, internal pull-up resistor</li> <li>Button_n :  Button active low, no internal pull-up resistor (_n like NoPullUp)</li> <li>Button_i : Button inverted, active high with internal pull-up resistor</li> <li>Button_in :  Button inverted, active high no internal pull-up resistor (_in like Inverted NoPullUp)</li> <li>Switch : Switch with internal pull-up resistor</li> <li>Switch_n : Switch without pull-up resistor</li> </ul> <p>the ESP32 supports all forementionned variants plus : </p> <ul> <li>Button_d : Button with internal pull-down resistor</li> <li>Button_id : Button inverted, active high with internal pull-down resistor</li> <li>Switch_d : Switch with internal pull-down resistor</li> </ul>"},{"location":"Buttons-and-Switches/#button-vs-switch","title":"Button vs. Switch","text":"<p>A button (also called a push-button) is a momentary or non-latching switch which causes a temporary change in the state of an electrical circuit only while the switch is pressed. An automatic mechanism (i.e. a spring) returns the switch to its default position immediately afterwards, restoring the initial circuit condition.</p> <p>A switch (more precisely a latching or toggle switch), when activated by the user, remains in that state until activated again.</p> <p>Learn more about buttons and switches in this video.</p> <p>Both have a similar function, but Tasmota distinguishes between a \"Button\" and a \"Switch\" in other ways.</p>"},{"location":"Buttons-and-Switches/#switch","title":"Switch","text":"<p>In Tasmota a <code>Switch</code> is any switch or push-button additionally connected to a free GPIO. Some possibilities include:</p> <ul> <li>mechanical toggle switch - also called a rocker switch</li> <li>capacitive touch switch</li> <li>reed switch</li> <li>PIR sensor - even though it's technically a  sensor it is configured as a switch in Tasmota</li> <li>mechanical push-button</li> </ul> <p>By default a switch toggles the corresponding power state (e.g., <code>Switch1</code> controls <code>Power1</code>). Every time the switch gets flipped the power state of the relay toggles.</p> <p>If you want to detach switches from relays read here.</p> <p>Warning</p> <p>If you define a switch with a number higher than available power outputs it will default to controlling <code>Power1</code>. Example: Switch4 on a device with Power1 and Power2 will control <code>Power1</code>.</p> <p>And now, to make everything completely confusing: A push-button can be configured as a <code>Switch</code> and a toggle switch can be configured as a <code>Button</code>. Configuring a toggle switch as a <code>Button</code> is not recommended!</p>"},{"location":"Buttons-and-Switches/#switchmode","title":"SwitchMode","text":"<p>To change the behavior of a physical input peripheral configured as a Tasmota <code>Switch&lt;x&gt;</code> component, whether a toggle switch or a momentary switch (i.e., a push-button), use the <code>SwitchMode</code> command. If there is more than one <code>Switch&lt;x&gt;</code> component, use <code>SwitchMode&lt;x&gt;</code> where <code>&lt;x&gt;</code> is the number of your switch from the Tasmota GPIO configuration.</p> <p>SwitchMode, as the name implies, applies ONLY to GPIO configured in Tasmota as a <code>Switch&lt;x&gt;</code> component. SwitchMode has NO impact on the behavior of GPIO configured as <code>Button&lt;x&gt;</code> components. SwitchMode sets the desired behavior of a <code>Switch&lt;x&gt;</code> component based on whether it's a switch or a push-button (i.e., a momentary switch) that is physically connected to the GPIO.</p> <code>SwitchMode 0</code> <p>Default mode</p> <p>Set switch to toggle mode (<code>0 = TOGGLE</code>, <code>1 = TOGGLE</code>).</p> <p>Tasmota sends <code>TOGGLE</code> command each time the state of the circuit changes (closing or opening). In case of a push button attached Tasmota will send a <code>TOGGLE</code> command when pressed and another <code>TOGGLE</code> command when released.</p> <p>Example</p> <p>When the button is pressed, toggle the power to ring the doorbell; when the button is released, ring the doorbell again.</p> <code>SwitchMode 1</code> <p>Set switch to follow mode (<code>0 = OFF</code>, <code>1 = ON</code>)</p> <p>At the time when the circuit is closed, Tasmota will send <code>ON</code> and opening the circuit sends <code>OFF</code>.</p> <p>Tip</p> <p>You want to use <code>SwitchMode 1</code> when connecting a toggle switch (e.g. a classic light switch) to your  device. This way the \"software switch\" will mirror the state of the \"hardware switch\". If the real switch is in the \"ON\" position, the state in Tasmota  is <code>ON</code> as well.</p> <code>SwitchMode 2</code> <p>Set switch to inverted follow mode (<code>0 = ON</code>, <code>1 = OFF</code>)</p> <p>At the time when the circuit is closed, Tasmota will send <code>OFF</code> and opening the circuit sends <code>ON</code>.</p> <p>Tip</p> <p>When connecting a momentary switch (i.e., a push-button) you will want to use <code>SwitchMode 3..7</code>.</p> <code>SwitchMode 3</code> <p>Set push-button mode (<code>0 = TOGGLE</code>, <code>1 = ON</code> (default))</p> <p>Tasmota will send a <code>TOGGLE</code> command when the button is pressed (closing the circuit). When the button is released (opening the circuit) nothing will happen. Default state is OFF and when pressed it's ON. (This trigger is known as rising-edge)</p> <code>SwitchMode 4</code> <p>Set inverted push-button mode (<code>0 = OFF</code> (default), <code>1 = TOGGLE</code>)</p> <p>Tasmota will send a <code>TOGGLE</code> command when the button is released (opening the circuit). When pressing the button (closing the circuit) nothing will happen. Default state is ON and when pressed it's OFF. (This trigger is known as falling-edge)</p> <code>SwitchMode 5</code> <p>Set push-button with long press mode (<code>0 = TOGGLE</code>, <code>1 = ON</code> (default), <code>long press = HOLD</code>)</p> <p>Tasmota will send a <code>TOGGLE</code> command when the button is released (opening the circuit). When pressing the button (closing the circuit) nothing will happen. Default state is ON and when pressed it's OFF. When held for the time set in <code>SetOption32</code> (default = 4s), Tasmota sends <code>HOLD</code> (use <code>Switch&lt;x&gt;#state=3</code> in rules).</p> <code>SwitchMode 6</code> <p>Set inverted push-button with long press mode (<code>0 = OFF</code> (default), <code>1 = TOGGLE</code>, <code>long press = HOLD</code>)</p> <p>Tasmota will send a <code>TOGGLE</code> command when the button pressed (closing the circuit). When the button is released (opening the circuit) nothing will happen. Default state is OFF and when pressed it's ON. When held for the time set in <code>SetOption32</code> (default = 4s), Tasmota sends <code>HOLD</code> (use <code>Switch&lt;x&gt;#state=3</code> in rules).</p> <p>Long press or hold can be used in conjunction with rules to create additional features or to control another Tasmota device</p> <code>SwitchMode 7</code> Set toggle push-button mode. Same as <code>SwitchMode 0</code>. <code>SwitchMode 8</code> <p>Set switch to multi change toggle mode (<code>0 = TOGGLE</code>, <code>1 = TOGGLE</code>, <code>2x change = HOLD</code>).</p> <p>Same as <code>SwitchMode 0</code> but when the state of the circuit changes within 0.5s twice no <code>TOGGLE</code> commands are send but Tasmota sends <code>HOLD</code> (use <code>Switch&lt;x&gt;#state=3</code> in rules).</p> <p>Warning</p> <p>When you change switch states fast (within 0.5s) some extra actions can be triggered using rules. ON and OFF power states are only changed when there is no second switch change within 0.5s.</p> <code>SwitchMode 9</code> <p>Set switch to multi change follow mode (<code>0 = OFF</code>, <code>1 = ON</code>, <code>2x change = HOLD</code>)</p> <p>Same as <code>SwitchMode 1</code> but when the state of the circuit changes within 0.5s twice no <code>OFF/ON</code> commands are send but Tasmota sends <code>HOLD</code> (use <code>Switch&lt;x&gt;#state=3</code> in rules).</p> <p>Warning</p> <p>When you change switch states fast (within 0.5s) some extra actions can be triggered using rules. ON/OFFpower state is only changed when there is no second switch change within 0.5s.</p> <code>SwitchMode 10</code> <p>Set switch to multi change inverted follow mode (<code>0 = ON</code>, <code>1 = OFF</code>, <code>2x change = HOLD</code>)</p> <p>Same as <code>SwitchMode 2</code> but when the state of the circuit changes within 0.5s twice no <code>ON/OFF</code> commands are send but Tasmota sends <code>HOLD</code> (use <code>Switch&lt;x&gt;#state=3</code> in rules).</p> <p>Warning</p> <p>When you change switch states fast (within 0.5s) some extra actions can be triggered using rules. ON/OFFpower state is only changed when there is no second switch change within 0.5s.</p> <code>SwitchMode 11</code> <p>Set switch to pushbutton with dimmer mode incl. double press feature</p> <p>Note</p> <p>Setoption32 must be smaller than 64, when you use switchmode 11 and 12 !!</p> <p>Tasmota will send a <code>TOGGLE</code> command when the button is pressed for a short time and then is released (use <code>Switch&lt;x&gt;#state=2</code> in rules).</p> <p>When pressing the button (closing the circuit) for a long time (set in <code>SetOption32</code>), Tasmota will send repeated <code>INC_DEC</code> (increment or decrement the dimmer) commands for as long as the button is pressed (use <code>Switch&lt;x&gt;#state=4</code> in rules).</p> <p>Two different <code>CLEAR</code> commands are available. An immediate <code>CLEAR</code> command is send upon button release - no delay (use <code>Switch&lt;x&gt;#state=7</code> in rules).</p> <p>Releasing the button also starts an internal timer (time is set in <code>SetOption32</code>). When released for the time set in <code>SetOption32</code>, Tasmota will send a 'delayed' <code>CLEAR</code> command (use <code>Switch&lt;x&gt;#state=6</code> in rules).</p> <p>If the button is pressed again before the timeout, Tasmota will send an <code>INV</code> command. The <code>INV</code> command is for the controlling software (Home Assistant) to switch between incrementing and decrementing the dimmer (use <code>Switch&lt;x&gt;#state=5</code> in rules).</p> <p>If button is pressed twice (within time set in <code>SetOption32</code>), Tasmota will send a <code>DOUBLE</code> command. Note that this doesn't change behaviour of other switch states. So along with the <code>DOUBLE</code> command, <code>TOGGLE</code> command will also be fired twice upon a double press (use <code>Switch&lt;x&gt;#state=8</code> in rules).</p> <p>If the button is pressed only once and shorter than the time set in <code>SetOption32</code>, Tasmota will also send the <code>POWER_DELAYED</code> command (use <code>Switch&lt;x&gt;#state=10</code> in rules) when no second press occurs within time set in <code>SetOption32</code>. You can use this for triggering single press events instead of using <code>TOGGLE</code> if you want to use single and double press individually (since <code>TOGGLE</code> is triggered for both single and double press). Keep in mind, that this event is delayed in comparison to <code>TOGGLE</code>.</p> <p>Tip</p> <p>Possible use case: using rules to create additional features or to control another Tasmota device. </p> <code>SwitchMode 12</code> <p>Set switch to inverted pushbutton with dimmer mode incl. double press feature. Same as <code>Switchmode 11</code> but with inverted behaviour.</p> <p>Note</p> <p>Setoption32 must be smaller than 64, when you use switchmode 11 and 12 !!</p> <code>SwitchMode 13</code> <p>Set switch to \"push to on\" mode (<code>1 = ON</code>, <code>0 = nothing</code>)</p> <p>Tasmota will send an <code>ON</code> command when the button pressed (closing the circuit). When the button is released (opening the circuit) nothing will happen. Switch off using <code>PulseTime</code>.</p> <code>SwitchMode 14</code> <p>Set switch to inverted \"push to on\" mode (<code>0 = ON</code>, <code>1 = nothing</code>)</p> <p>This mode is useful with PIR sensors</p> <code>SwitchMode 15</code> <p>Send only MQTT message on switch change. This will stop the switch from controlling power outputs, and you get no state values for rules.</p> <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"OFF\"}\ntele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"ON\"}\n</code></pre> <code>SwitchMode 16</code> Send only MQTT message on inverted switch change. This will stop the switch from controlling power outputs, and you get no state values for rules. <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"ON\"}\ntele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"OFF\"}\n</code></pre> <p>Also see <code>SetOption114</code> below.</p>"},{"location":"Buttons-and-Switches/#button","title":"Button","text":"<p>For Tasmota, a <code>Button</code> is typically a momentary push-button (or a capacitive touch button in some light switches). By default a button toggles the corresponding power state. Every time the button gets pressed a relay or light changes its <code>Power</code> state (ON or OFF). Besides toggling  the <code>Power</code> state, a button is also used to activate multi press button functions, to do long press (HOLD) actions, or send messages to different MQTT topics.</p> <p> Depending if you are using a push-to-make button or push-to-break button, as well as connecting the button between GPIO and GND or GPIO and VCC, different configurations are possible. The diagram beside (click to enlarge) present the various options:</p> <p>To ignore default button behaviour of controlling power outputs you can:</p> <ol> <li>use <code>SetOption73 1</code></li> <li>use <code>ButtonTopic</code></li> <li>define a rule which triggers on <code>Button&lt;x&gt;#State</code>. Take note: If the rule trigger only certain states, default behaviour is suppressed only for those states.</li> </ol> <p>Make Button1 publish its value to <code>stat/custom-topic/BUTTON</code> and not control Power1</p> <p><pre><code>Backlog ButtonTopic 0\n</code></pre> <pre><code>Rule1 on Button1#state do Publish stat/custom-topic/BUTTON %value% endon\nRule1 1\n</code></pre></p>"},{"location":"Buttons-and-Switches/#multi-press-functions","title":"Multi-Press Functions","text":"<p>Multipress functions for 2 and more presses cannot be changed using SetOptions or rules.</p> <p>Danger</p> <p>If you have changed ButtonTopic, SetOption1, SetOption11 or SetOption13 some of the listed functionality will be changed or removed.</p> <p>Note</p> <p><code>Button1</code> can directly control up to five relays. The number of the activated relay corresponds to the number of button presses and this feature is not present in the other buttons. When ButtonTopic is set to default <code>0</code> a button will always send its state for rules. In the below, you can enable <code>SetOption4</code> to replace the \"RESULT\" part of the topic.</p> <code>1 short press</code> Toggles the power state. This will blink the LED once and send an MQTT status message like <code>stat/tasmota/POWER = ON</code> or another one like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"SINGLE\"}}</code> when SetOption73 is enabled. The button state for rules is <code>2</code> (<code>10</code> if <code>Setoption73</code> is enabled). <code>2 short presses</code> When using Button1 toggles the second power state (if available on the device). This will blink the LED twice and send an MQTT status message like <code>stat/tasmota/POWER2 = ON</code> or another one like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"DOUBLE\"}}</code> when SetOption73 is enabled. The button state for rules is <code>11</code>. <code>3 short presses</code> When using Button1 toggles the third power state (if available on the device). This will blink the LED three times and send an MQTT status message like <code>stat/tasmota/POWER3 = ON</code> or another one like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"TRIPLE\"}}</code> when SetOption73 is enabled. The button state for rules is <code>12</code>. <code>4 short presses</code> When using Button1 toggles the fourth power state (if available on the device). This will blink the LED for times and send an MQTT status message like <code>stat/tasmota/POWER4 = ON</code> or another one like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"QUAD\"}}</code> when SetOption73 is enabled. The button state for rules is <code>13</code>. <code>5 short presses</code> When using Button1 toggles the fifth power state (if available on the device). This will blink the LED five times and send an MQTT status message like <code>stat/tasmota/POWER5 = ON</code> or another one like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"PENTA\"}}</code> when SetOption73 is enabled. The button state for rules is <code>14</code>. <code>6 short presses</code> Set <code>WifiConfig 2</code> (start Wi-Fi Manager). Can be disabled using <code>SetOption1 1</code>. For security reasons, you should change back <code>WifiConfig</code> after that."},{"location":"Buttons-and-Switches/#long-press","title":"<code>Long press</code>","text":"<p>There are two separate functions associated with a button long press based on how long it is held:</p> <ol> <li>When held continuously for 40 seconds (Configurable with SetOption32, value is 10x the configured hold time) Tasmota will reset to firmware defaults and restart.</li> <li>If enabled, button pressed for 4 seconds (Configurable with SetOption32) creates a HOLD action and send an MQTT status message like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"HOLD\"}}</code> when SetOption73 is enabled. The button state for rules is <code>3</code>. With SetOption73 enabled, when the button is released you'll also get MQTT messages like <code>stat/tasmota/RESULT = {\"Button&lt;x&gt;\":{\"Action\":\"CLEAR\"}}</code> and button state <code>15</code>.</li> </ol> <p>If ButtonRetain has been enabled the MQTT message will also contain the MQTT retain flag.</p> <p>Danger</p> <p>When a button is configured as inverted or with a Switchmode that keeps it as ON while depressed it activates the reset to firmware defaults function. Change the Button configuration or SwitchMode to avoid repeated reset to defaults or use <code>Setoption1 1</code> to disable that function.</p> <p>Warning</p> <p>If you define a button with a number higher than available power outputs it will default to controlling <code>Power1</code>. Example: Button4 on a device with Power1 and Power2 will control <code>Power1</code>.</p>"},{"location":"Buttons-and-Switches/#buttontopic","title":"ButtonTopic","text":"<code>ButtonTopic 0</code> <p>Default option</p> <p>By default a button controls the corresponding power state and doesn't send any MQTT messages itself.</p> <p>No MQTT message will be published on account of the new button state. The message you see in console is the new power state that is controlled and not the button state.</p> <code>ButtonTopic 1</code> <p>Sets MQTT button topic to device %topic%.</p> <p>When changing the state of the button an MQTT message is sent to the device topic with the payload according to <code>SwitchMode</code> set.</p> <p>Example</p> <p>Device topic tasmota with <code>SwitchMode 3</code> yields the following message: <code>MQT: cmnd/tasmota/POWER = ON</code></p> <p>Notice the cmnd instead of the stat at the beginning.</p> <p>This is the same as sending an MQTT command to this device, the device power state will be set to the defined state.</p> <code>ButtonTopic &lt;value&gt;</code> <p>Set button topic to a custom topic (32 characters max).</p> <p>This will send an MQTT message to a custom defined topic similarly to option 1.</p> <p>Example</p> <p>For example, we set the topic to tasmota02 with <code>ButtonTopic tasmota02</code>. With <code>SwitchMode 1</code> the device yields the following message: <code>MQT: cmnd/tasmota02/POWER = TOGGLE</code></p> <p>If you have another device with the topic tasmota02 this action will toggle its power state while not affecting anything on the tasmota device.</p>"},{"location":"Buttons-and-Switches/#buttontopic-summary","title":"ButtonTopic Summary","text":"<p><code>ButtonTopic 0</code> controls the power state directly. <code>ButtonTopic 1</code> sends an MQTT message to the device topic. This sets the state of the devices power state accordingly. <code>ButtonTopic &lt;value&gt;</code> sends an MQTT message command to the custom topic. This does not change the state of the devices power state.</p> <p>When a Button is set to a different topic than <code>0</code> is not possible to use <code>Button&lt;x&gt;#State</code> as a trigger for rules.</p>"},{"location":"Buttons-and-Switches/#changing-default-functionality","title":"Changing Default Functionality","text":"<p>If a <code>ButtonTopic</code> (and if <code>SetOption1 1</code>) or <code>SwitchTopic 1</code> is defined (and <code>SwitchMode</code> is set to <code>5</code> or <code>6</code>) and a button is pressed longer than defined Key Hold Time (<code>SetOption32</code> default 4 seconds) an MQTT message like <code>cmnd/%topic%/POWER HOLD</code> will be sent. <code>HOLD</code> can be changed with <code>StateText4</code>.</p> <p>Command <code>SetOption11</code> allows for swapping the functionality between the SINGLE and DOUBLE press of the push button.</p> <p>These changes result in the following:</p> <p></p>"},{"location":"Buttons-and-Switches/#example","title":"Example","text":"<p>You can control a ceiling fan from a Sonoff Touch: If your standard topic of Sonoff Touch is <code>light</code> and the ceiling fan topic is <code>ceilingfan</code> issue these commands on the Sonoff Touch to activate the double press feature. <pre><code>ButtonTopic ceilingfan\nSetOption11 1\n</code></pre> All of the above is easier accomplished using Rules!</p>"},{"location":"Buttons-and-Switches/#ac-frequency-detection-switch","title":"AC Frequency Detection Switch","text":"<p>Some devices, such as BlitzWolf BW-SS5 or Moes MS-104B, use mains frequency detection on their switch inputs. Whenever the connected switch or button is pressed there are 50/60 Hz pulses on the switch input. Inside the switch there's a frequency detection circuit which is connected to a GPIO of the ESP8266 chip which counts those pulses. Prior to Tasmota 8.4 this kind of switching was handled using Counter sensors and scripting which is now simplified.</p> <p>You can imagine this algorithm as a leaking bucket. Every pulse adds water to the bucket (little more than leaking out in a cycle), but the water is dripping countinously. If the bucket is full, we will treat the switch on. If there's no pulses, the bucket will be empty, and the we will turn off the switch. The size of the bucket is the debouncing time which controls the sensitivity of the algorithm. If the mains frequency is 50 Hz, a whole AC wave is 20 msec long (for 60 Hz it's about 17 msec; 1000 / frequency if we want the result in milliseconds). The exact frequency is not really important, because we add more water for every pulse.</p> <p>After you have assigned a Switch&lt;x&gt; to the GPIO connected to the AC frequency detection circuit use the 'SwitchDebounce' command to set the number of pulses required for the switch to be recognized as on or off. For example: <code>SwitchDebounce 69</code> will turn the switch on after three pulses and turn it off after three missing ones (3 * 20 msec is 60 and the last digit must be 9 to activate the AC detection). You will probably have to experiment with the values depending on your AC frequency and the devices frequency detection implementation.</p> <p>Once the feature is enabled you can use this switch as any regular switch!</p>"},{"location":"Buttons-and-Switches/#detach-switches-with","title":"Detach Switches with...","text":""},{"location":"Buttons-and-Switches/#setoption114","title":"SetOption114","text":"<p>When <code>SetOption114 1</code> all switches are detached from their respective relays and will send MQTT messages instead in the form of <code>{\"Switch&lt;x&gt;\":{\"Action\":\"&lt;state&gt;\"}}</code>.</p> <p>Example</p> <p>When switch one is toggle to \"ON\":<code>{\"Switch1\":{\"Action\":\"ON\"}}</code></p>"},{"location":"Buttons-and-Switches/#switchmode-15","title":"SwitchMode 15","text":"<p>With command <code>SwitchMode&lt;x&gt; 15</code> you can decouple Switch&lt;x&gt; from its power output and it will instead send MQTT messages in the following format:</p> <p><pre><code>MQT: tele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"OFF\"}\nMQT: tele/tasmota/SENSOR = {\"Time\":\"2021-01-01T00:00:01\",\"Switch1\":\"ON\"}\n</code></pre> You can globally change the status text with <code>StateText</code> command.</p> <p>You can change the default \"Switch1\" text using <code>SwitchText&lt;x&gt;</code> command.  For example: <code>SwitchText1 Garage_Door_State</code></p> <p>When <code>Setoption114 1</code> is used together with <code>SwitchMode&lt;x&gt; 15</code>, Tasmota Integration in Home Assistant will create a binary sensor in HA using the Default text \"String1\" or the text mentioned in the <code>SwitchText</code> command.</p>"},{"location":"Buttons-and-Switches/#rules","title":"Rules","text":"<p>Use rules to send messages to different MQTT topics or send commands to other Tasmota devices when switch state (defined by SwitchMode) changes.</p> <p>To ignore the default behaviour define a rule which triggers on <code>Switch&lt;x&gt;</code> for all state changes or on <code>Switch&lt;x&gt;#State</code> for specific state changes. If a rule matches only certain states, default switch behaviour is suppressed only for those states.</p> <p>Example</p> <p>Make Switch1 publish any value change to <code>stat/custom-topic/SWITCH1</code> and not control Power1</p> <p><pre><code>Backlog SwitchMode 1; SwitchTopic 0\n</code></pre> <pre><code>Backlog Rule1 on Switch1#state do Publish stat/custom-topic/SWITCH1 %value% endon; Rule1 1\n</code></pre></p>"},{"location":"Buttons-and-Switches/#switchtopic","title":"SwitchTopic","text":"<p>Warning</p> <p>When using <code>SwitchTopic 1</code> or <code>2</code> (or <code>ButtonTopic 1</code> or <code>2</code>)  and your MQTT broker becomes unavailable, Tasmota falls back to default <code>SwitchTopic 0</code> (or <code>ButtonTopic 0</code>), which is not optimal.To avoid this, we recommend using first two options instead.</p> <p>If you still need to use SwitchTopic read on!</p> <code>SwitchTopic 0</code> <p>Default mode</p> <p>By default a switch controls the corresponding power state and doesn't send any MQTT messages itself.</p> <p>No MQTT message will be published on account of the new switch state. The message you see in console is the new power state that is controlled and not the switch state.</p> <code>SwitchTopic 1</code> <p>Sets MQTT switch topic to device %topic%</p> <p>When changing the state of the switch an MQTT message is sent to the device topic with the payload according to <code>SwitchMode</code> set.</p> <p>Example</p> <p>Device topic tasmota with <code>SwitchMode 3</code> yields the following message: <code>MQT: cmnd/tasmota/POWER = TOGGLE</code></p> <p>Notice the cmnd instead of the stat at the beginning.</p> <p>This is the same as sending an MQTT commands to this device, the device power state will be set to the defined state.</p> <code>SwitchTopic &lt;value&gt;</code> <p>Set switch topic to a custom topic (32 characters max)</p> <p>This will send an MQTT message to a custom defined topic similarly to option 1.</p> <p>In the following example, we set the topic to <code>tasmota02</code> with <code>SwitchTopic tasmota02</code>.</p> <p>Example</p> <p>Device topic tasmota with <code>SwitchMode 1</code> and custom topic tasmota02 yields the following message: <code>MQT: cmnd/tasmota02/POWER = ON</code></p> <p>If you have another device with the topic tasmota02 this action will turn on its power while not affecting anything on the tasmota device.</p>"},{"location":"Buttons-and-Switches/#switchtopic-summary","title":"SwitchTopic Summary","text":"<p><code>SwitchTopic 0</code> controls the power state directly. <code>SwitchTopic 1</code> sends an MQTT message to the device topic. This sets the state of the devices power accordingly. <code>SwitchTopic &lt;value&gt;</code> sends an MQTT message command to the custom topic. This does not change the state of the devices power.</p> <p>For a practical application of everything mentioned in this article read about this excellent LEGO nightstand switch project.</p>"},{"location":"Buttons-schematics/","title":"Buttons schematics","text":""},{"location":"Buzzer/","title":"Buzzer","text":"<p>Tasmota gives you the option to control the sound pattern of a buzzer. </p> <p>Note</p> <p>A device LED can be assigned as a <code>Buzzer</code> component to display a blink pattern.</p>"},{"location":"Buzzer/#buzzer-command","title":"Buzzer command","text":"<p>Parameters for the <code>Buzzer</code> command can be</p> <p><code>&lt;count&gt;,&lt;beep&gt;,&lt;silence&gt;,&lt;tune&gt;</code>  all parameters are optional. (default is <code>1,1,1</code> (one 100 millisecond beep)).</p> <p><code>&lt;count&gt;</code>  number of beeps <code>-1</code> for infinite, <code>-2</code> to follow state of LED1;\u00bb v8.1.0.6</p> <p><code>&lt;beep&gt;</code>  duration of one beep in 100 millisecond steps</p> <p><code>&lt;silence&gt;</code>  duration of silence between beeps 100 millisecond steps</p> <p><code>&lt;tune&gt;</code>  is a 32-bit bitmask where a <code>1</code> bit beeps and a <code>0</code> bit is silence according to <code>&lt;beep&gt;</code> and <code>&lt;silence&gt;</code>, respectively. The tune is played from most significant bit (MSB) to least significant bit (LSB). Leading and trailing <code>0</code> bits are ignored. If <code>&lt;tune&gt;</code> is specified, <code>&lt;count&gt;</code> is ignored (<code>&lt;count&gt;</code> for <code>&lt;tune&gt;</code> supported in \u00bb v8.1.0.6). If <code>&lt;tune&gt;</code> is <code>0</code>, it is ignored.</p> <p>Examples: <code>3</code> - Beep three times with 100 milliseconds duration and 100 milliseconds pause <code>2,3</code> - Beep twice with 300 milliseconds duration and 100 milliseconds pause<code>2,3,4</code> - Beep twice with 300 milliseconds duration and 400 milliseconds pause<code>1,2,3,0xF54</code> (0000 0000 0000 0000 0000 1111 0101 0100). Each <code>1</code> bit beeps for 200 milliseconds and each bounded <code>0</code> bit pauses for 300 milliseconds</p> <p><code>0</code> = stop active buzzer cycle \u2003\u00bb v6.6.0.18</p>"},{"location":"CC2530/","title":"CC253x Zigbee module","text":"<p>CC2530, CC2531, and CC2538 are Texas Instruments system-on-chips (SoCs) for Zigbee communication</p> <p>Any Texas Instruments CC253x series based module can serve as a coordinator if it has Z-Stack firmware flashed. See list of supported modules with their pinouts and flashing instructions since they are different for each device.</p> <p>Info</p> <p>Z-Stack Home 1.2 is fully supported in Tasmota allow  the use of CC2530, CC2531, and CC2538 Zigbee MCU chips/SoCs/modules. There is also preliminary support for Z-Stack 3.x as of Tasmota v9.2.0.4 which allow the use of more powerful Zigbee MCU chips/SoCs/modules from Texas Instruments CC26x2 and CC13x2 series (example CC2652P, CC2652R, CC2652RB, CC1352P and CC1352R).</p> <p>Info</p> <p>You cannot use a Zigbee adapter in USB mode! Flash it with Z-Stack firmware and it will work in serial mode. You will have to wire the Zigbee MCU chips/SoC/modules for serial communication using TX and RX pins or solder-pads. USB port cannot be used for communicating with a Zigbee MCU chip/module.</p>"},{"location":"CC2530/#wi-fi-adapter","title":"Wi-Fi Adapter","text":"<p>Using an ESP82xx device such as a Wemos D1 Mini or a NodeMCU to flash the CC2530 is a lower cost alternative than using a single purpose CC_DEBUGGER. </p> <p>In normal operation two free GPIOs are needed for the serial communication with the CC2530.  </p>"},{"location":"CC2530/#custom-pcbs","title":"Custom PCBs","text":"<p>These PCBs make all the connections required to flash the CC2530 and to run Z2T:</p>"},{"location":"CC2530/#superhousetv","title":"SuperHouse.tv","text":"<p>Jon Oxer created a custom PCB to connect a Wemos D1 Mini and a CC2530 board (with or without CC2591).  </p> <p>Complete module </p>"},{"location":"CC2530/#charles-aka-hallard","title":"Charles (aka hallard)","text":"<p>Mainly based on Jon Oxer PCB, Charles created a new one with multi connect option for CC2538 + CC2592 to connect a Wemos D1 Mini/Raspberry PI or even with USB a CC2538 with CC2592 module. This works with awesome support of ZStack V3 by @s-hadinger</p> <p>Complete module </p> <p>Check the dedicated github repo for detailed information</p>"},{"location":"CC2530/#h4nc","title":"H4NC","text":"<p>User h4nc created a custom PCB to connect a NodeMCU and a CC2530 board.  </p> <p>You can also get a complete Z2T module with case, pre-flashed and ready to configure and deploy. </p>"},{"location":"CC2530/#configuration","title":"Configuration","text":""},{"location":"CC2530/#flash-zigbee-adapter","title":"Flash Zigbee Adapter","text":"<p>Zigbee2Tasmota requires a TI CC2530 based module flashed with Z-Stack CC2530 firmware file from Koen Kanters. </p> <p>Due to memory constraints of the CC2530, you can only pair 16 devices to a coordinator (See details). </p> <p>Note</p> <p>There is an alternative firmware allowing for Zigbee routers to create a mesh network and go beyond 16 devices. This is currently not tested nor supported by Zigbee2Tasmota. It may be added later.</p> <p>Flashing options:</p> <ul> <li>Flashing with CCLoader and ESP8266 (recommended)</li> <li>Flashing with CCLib and ESP8266</li> <li>Flash with a dedicated CC Debugger and PC </li> </ul>"},{"location":"CC2530/#flash-tasmota","title":"Flash Tasmota","text":"<p>Once the flashing process completes, you can re-use the ESP82xx and flash Tasmota with Zigbee2Tasmota enabled <code>tasmota-zigbee.bin</code> binary. Otherwise, you can use any ESP82xx device.  </p>"},{"location":"CC2530/#optional","title":"Optional","text":"<p>Run the ESP at 160MHz instead of 80MHz which ensures higher reliability in serial communication with CC2530.</p> <p>In <code>platformio_override.ini</code> uncomment line 51:</p> <p><code>board_build.f_cpu = 160000000L</code></p> <p>If you find that your Zigbee2Tasmota operation is unstable, you may have an ESP82xx device that cannot operate reliably at the higher frequency. If you are using hardware serial (see below) and you still have unreliability, try compiling for 80MHz (reverse the options above) and flash the ESP82xx device again to see if operating at a lower frequency improves stability. Running at 80MHz will impact software serial communications so hardware serial is highly recommended if running the ESP82xx at 80MHz.</p> <p>Flash the newly compiled binary using the normal flashing process.</p>"},{"location":"CC2530/#connect-cc2530-to-tasmota","title":"Connect CC2530 to Tasmota","text":"<p>If you are using your ESP82xx device to flash the Zigbee adapter as described in tutorials you may want to leave these connections in place in case you ever need to update Zigbee firmware. If not, any of the free GPIOs can be used.</p> <p>It is recommended that hardware serial pins be used (GPIO1/GPIO3 or GPIO13[Rx]/GPIO15[Tx])</p> <p>Due to ESP82xx GPIO pin constraints, GPIO15 can only be used as serial Tx.  </p> <p>The interface between the ESP82xx Wi-Fi device and the Zigbee module uses high speed serial. </p> <p>Tip</p> <p>Tasmota also provides serial communications emulation through software (i.e., software serial). This allows any GPIO to be used. TasmotaSerial version 2.4.x (PR #6377) has improved the reliability of software serial making it feasible for use in this application. However, if you have an option to use hardware serial, choose that.</p> <p>Z2T uses software serial by default to allow for serial logging on GPIO1/GPIO3</p> <p>Use <code>SerialLog 0</code> to enable hardware serial on GPIO13[Rx]/GPIO15[Tx].</p> <p>Recommended wiring:  </p> ESPDevice Tasmota Zigbee Module GPIO13 Zigbee RX (166) CC_TXD(A.K.A. P0_3) GPIO15 Zigbee TX (165) CC_RXD(A.K.A. P0_2) 3V3 VCC GND GND"},{"location":"CC2530/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIO13 to <code>Zigbee RX</code> </li> <li>GPIO15 to <code>Zigbee TX</code></li> </ul> <p></p> <p>You can quickly configure Tasmota using a custom template instead. </p> <p>Use this one for the recommended wiring scheme:</p> <pre><code>{\"NAME\":\"Zigbee\",\"GPIO\":[0,0,0,0,0,0,0,0,0,166,0,165,0],\"FLAG\":0,\"BASE\":18}\n</code></pre>"},{"location":"CC2530/#first-run","title":"First Run","text":"<p>When the Tasmota device boots, Zigbee2Tasmota will wait for 15 seconds before initializing the CC2530. This time allows for Wi-Fi and MQTT to connect (hopefully).</p> <p>First boot: <pre><code>MQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":1,\"Message\":\"CC2530 booted\",\"RestartReason\":\"Watchdog\",\"MajorRel\":2,\"MinorRel\":6}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":50,\"MajorRel\":2,\"MinorRel\":6,\"MaintRel\":3,\"Revision\":20190608}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":2,\"Message\":\"Resetting configuration\"}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":3,\"Message\":\"Configured, starting coordinator\"}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":51,\"IEEEAddr\":\"0x00124B00199DF06F\",\"ShortAddr\":\"0x0000\",\"DeviceType\":7,\"DeviceState\":9,\"NumAssocDevices\":0}}\nMQT: tele/tasmota/Zigbee_home/RESULT = {\"ZbState\":{\"Status\":0,\"Message\":\"Started\"}}\nZIG: Zigbee started\nZIG: No zigbee devices data in Flash\n</code></pre></p> <p>Zigbee will automatically boot the CC2530 device, configure the device and wait for Zigbee messages.</p> <p>Normal boot looks like: <pre><code>MQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":1,\"Message\":\"CC2530 booted\",\"RestartReason\":\"Watchdog\",\"MajorRel\":2,\"MinorRel\":6}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":50,\"MajorRel\":2,\"MinorRel\":6,\"MaintRel\":3,\"Revision\":20190608}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":3,\"Message\":\"Configured, starting coordinator\"}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":51,\"IEEEAddr\":\"0x00124B00199DF06F\",\"ShortAddr\":\"0x0000\",\"DeviceType\":7,\"DeviceState\":9,\"NumAssocDevices\":0}}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":0,\"Message\":\"Started\"}}\nZIG: Zigbee started\nZIG: Zigbee devices data in Flash (516 bytes)\n</code></pre></p> <p>You can force a factory reset of your CC2530 with <code>ZigbeeReset 1</code> and reboot</p>"},{"location":"CCLoader/","title":"CCLoader","text":"<p>development version feature</p> <p>This is a port of the CCLoader utility from RedBearLab in form of a driver for Tasmota. The main difference is, that now only one ESP8266 is needed to do all the tasks. As a result OTA-upgrades are possible too.  </p> <p>The driver is tested for a CC2531, but should work on every CC25xx-device, that is supported by the original CCLoader.  </p> <p>The wiring to the debug pins (= programming pins) of the CC25xx boards stays the same. It is possible to leave all wires connected (VCC,GND,RX,TX).  </p> <p>In the current version of the Tasmota driver the pins are hardcoded and could be changed easily in the code:  </p> <pre><code>int CCL_RESET = 14; //GPIO14=D5 on NodeMCU/WeMos D1 Mini  \nint CCL_DD = 4; //GPIO4=D2 on NodeMCU/WeMos D1 Mini  \nint CCL_DC = 5; //GPIO5=D1 on NodeMCU/WeMos D1 Mini  \n</code></pre> <p>The driver must be enabled manually for a self compiled Tasmota binary. <code>#define USE_CCLOADER</code> </p> <p>After reboot the connected CC25xx chip will be reported in the console and the WebUI.  </p> <p></p> <p>Then chose Firmware Upgrade in the WebUI.  </p> <p></p> <p>Now download the correct firmware as a .bin-file, if you haven't done already. Do not use a .hex-file. These can be found for various chips here: https://github.com/arendst/Tasmota/tree/development/tools</p> <p>Select Upgrade by file upload, like you would do for a OTA upgrade of the Tasmota firmware. If a CC25xx chip was successfully detected and the selected file passes a (very minimalistic) check, this will trigger the upload to the CC25xx.</p> <p></p> <p>This will start the upgrade, which will take several seconds. The progress will be printed to the console and after the finish, the device gets rebooted.  A power cycle is recommended. That\u2019s it.  </p> <p>Now it might be a good time to upload a Zigbee- or HM1x-firmware to your ESP8266.  </p>"},{"location":"Codes-for-IR-Remotes/","title":"Codes for IR Remotes","text":"<p>The IR Codes can be used with any device with an IR sender.</p> <p>The codes will also fit other devices from same manufacturer or series. Please try out...</p> <p>Feel free to contribute this list.</p>"},{"location":"Codes-for-IR-Remotes/#tvs","title":"TV's","text":""},{"location":"Codes-for-IR-Remotes/#samsung-aa59-tv-remote-controller","title":"Samsung AA59 TV remote controller","text":"<p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E09966\"}</code></p> button code TOGGLE ON/OFF {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E040BF\"} ON {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E09966\"} OFF {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E019E6\"} SOURCE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0807F\"} 1 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E020DF\"} 2 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0A05F\"} 3 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0609F\"} 4 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E010EF\"} 5 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0906F\"} 6 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E050AF\"} 7 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E030CF\"} 8 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0B04F\"} 9 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0708F\"} 0 {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E08877\"} TTX/MIX {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E034CB\"} PRE-CHN {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0C837\"} VOL+ {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0E01F\"} VOL- {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0D02F\"} CH LIST {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0D629\"} MUTE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0F00F\"} PROG+ {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E048B7\"} PROG- {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E008F7\"} MENU {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E058A7\"} SMARTHUB {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E09E61\"} GUIDE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0F20D\"} TOOLS {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0D22D\"} INFO {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0F807\"} UP {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E006F9\"} DOWN {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E08679\"} LEFT {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0A659\"} RIGHT {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E046B9\"} MIDDLE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E016E9\"} RETURN {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E01AE5\"} EXIT {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0B44B\"} A_RED {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E036C9\"} B_GREEN {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E028D7\"} C_YELLOW {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0A857\"} D_BLUE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E06897\"} E-MANUAL {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0FC03\"} 3D {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0F906\"} AD/SUBT {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0A45B\"} STOP {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0629D\"} PREV {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0A25D\"} PLAY {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E0E21D\"} PAUSE {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E052AD\"} NEXT {\"Protocol\":\"SAMSUNG\",\"Bits\":32,\"Data\":\"0xE0E012ED\"}"},{"location":"Codes-for-IR-Remotes/#tcl-55p715-tv","title":"TCL 55P715 TV","text":"<p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"NIKAI\",\"Bits\":48,\"Data\":0x0x0D5F2A}</code></p> button code Power 0x0D5F2A Vol+ 0x0D0F2F Vol- 0x0D1F2E Mute 0x0C0F3F info 0x0C3F3C P+= 0x0D2F2D P- 0x0D3F2C Settings 0x030FCF EPG 0x0E5F1A Home 0x0F7F08 UP 0x0A6F59 Down 0x0A7F58 LEFT 0x0A9F56 Right 0x0A8F57 Enter 0x00BFF4 Menu 0x013FEC Back 0x0D8F27 NetFlix 0x010FEF Source 0x05CFA3"},{"location":"Codes-for-IR-Remotes/#panasonic-tx65fxw784-tv","title":"Panasonic TX65FXW784 TV","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"PANASONIC\",\"Bits\":48,\"Data\":\"0x100BCBD\"}}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"PANASONIC\",\"Bits\":48,\"Data\":0x100BCBD}</code></p> button code ON/OFF 0x40040100BCBD Mute 0x400401004C4D Vol+ 0x400401000405 Vol- 0x400401008485 P+ 0x400401002C2D P- 0x40040100ACAD Left 0x400401007273 Right 0x40040100F2F3 Up 0x400401005253 Down 0x40040100D2D3 OK 0x400401009293 Menu 0x400401004A4B Red 0x400401000E0F Yellow 0x400401004E4F Green 0x400401008E8F Blue 0x40040100CECF Last View 0x40040100ECED My App 0x400401206D4C Netflix 0x400401904FDE Apps 0x40040190F160 Play 0x400401900392 Pause 0x400401908312 Stop 0x4004019043D2 Forward 0x40040190C352 Back 0x4004019023B2 Key 1 0x400401000809 Key 2 0x400401008889 Key 3 0x400401004849 Key 4 0x40040100C8C9 Key 5 0x400401002829 Key 6 0x40040100A8A9 Key 7 0x400401006869 Key 8 0x40040100E8E9 Key 9 0x400401001819 Key 0 0x400401009899 Title forward 0x40040190BB2A Title back 0x400401903BAA Record 0x40040190A332 Guide 0x40040190E170 Exit 0x40040100CBCA Back 0x400401002B2A Option 0x40040190E574 Info 0x400401009C9D TV 0x400401400C4D AV 0x40040100A0A1 Text 0x40040180C041 STTL 0x40040180A021 Picture 0x400401000A0B Help 0x400401003534"},{"location":"Codes-for-IR-Remotes/#sony-kdl-ex540-tv","title":"Sony KDL-EX540 TV","text":"<p>Common buttons should work across multiple models</p> button code Input {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xA50\"} Power On {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x750\"} Power Off {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xF50\"} Power Toggle {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xA90\"} Vol + {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x490\"} Vol - {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xC90\"} Mute {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x290\"} Ch + {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x090\"} Ch - {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x890\"} Theatre Mode {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x03EE\"} Play/Pause {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x2CE9\"} Stop {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x0CE9\"} Rew {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x6CE9\"} Fwd {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x1CE9\"} Sync Menu {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x0D58\"} Prev {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x1EE9\"} Next {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x5EE9\"} i-Manual {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x6F58\"} Scene {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x0F58\"} Aspect {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x5E25\"} Digital/Analog {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x58EE\"} PIP {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x7725\"} Internet Video {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x4F58\"} Favourite {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x37EE\"} Guide {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x6D25\"} Info {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x5D0\"} Return {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x62E9\"} Options {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x36E9\"} Home {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x070\"} Up {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x2F0\"} Down {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xAF0\"} Left {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x2D0\"} Right {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xCD0\"} Enter {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xA70\"} Red {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x52E9\"} Green {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x32E9\"} Yellow {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x72E9\"} Blue {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x12E9\"} 1 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x010\"} 2 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x810\"} 3 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x410\"} 4 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xC10\"} 5 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x210\"} 6 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xA10\"} 7 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x610\"} 8 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xE10\"} 9 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x110\"} Text {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xFD0\"} 0 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x110\"} Subtitles {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x0AE9\"} Audio Track {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xE90\"} HDMI 1 {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x2D58\"} HDMI 2 {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x6D58\"} HDMI 3 {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x1D58\"} HDMI 4 {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x5D58\"} Video 1 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x030\"} Video 2 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x830\"} Video 3/Component 1 {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x430\"} PC {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xC30\"} Digital TV {\"Protocol\":\"SONY\",\"Bits\":15,\"Data\":\"0x25EE\"}"},{"location":"Codes-for-IR-Remotes/#lg-55uh8509-tv","title":"LG 55UH8509 TV","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x20DF10EF\"}}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x20DF10EF}</code></p> <p>or with mosquitto_pub:</p> <p><code>mosquitto_pub -q 2 -t cmnd/sonoffIRBridge_1/IRSend -m '{\"protocol\": \"NEC\",\"bits\": 32, \"data\": 0x20DF10EF}'</code></p> button code ON/OFF 0x20DF10EF TV 0x20DF0FF0 Ratio 0x20DF9E61 Input 0x20DFD02F Energy 0x20DFA956 Key 1 0x20DF8877 Key 2 0x20DF48B7 Key 3 0x20DFC837 Key 4 0x20DF28D7 Key 5 0x20DFA857 Key 6 0x20DF6897 Key 7 0x20DFE817 Key 8 0x20DF18E7 Key 9 0x20DF9867 List 0x20DFCA35 Key 0 0x20DF08F7 Q.View 0x20DF58A7 Vol+ 0x20DF40BF Vol- 0x20DFC03F Vol- 0x20DFCE31 Fav 0x20DF7887 3D 0x20DF3BC4 Mute 0x20DF906F P+ 0x20DF00FF P- 0x20DF807F Settings 0x20DFC23D Info 0x20DF55AA Q.Menu 0x20DFA25D Left 0x20DFE01F Right 0x20DF609F Up 0x20DF02FD Down 0x20DF827D OK 0x20DF22DD Back 0x20DF14EB Guide 0x20DFD52A Exit 0x20DFDA25 Red 0x20DF4EB1 Green 0x20DF8E71 Yellow 0x20DFC639 Blue 0x20DF8679 Text 0x20DF04FB T.Opt 0x20DF847B Subtitle 0x20DF9C63 Stop 0x20DF8D72 Play 0x20DF0DF2 Pause 0x20DF5DA2 Backward 0x20DFF10E Forward 0x20DF718E Simplink 0x20DF7E81 AD 0x20DF8976 AV Mode 0x20DF0CF3 Live TV 0x20DF3EC1 Live TV 0x20DF42BD Status 0x20DF35CA Audio Language 0x20DF50AF Shortmenu 0x20DF57A8 AV 0x20DF5AA5 online manual 0x20DF5EA1 Volume to 50 0x20DF619E Volume to 80 0x20DF21DE Volume to 100 0x20DFE11E Radio/TV 0x20DF6B94 doze function 0x20DF708F Display off 0x20DFA35C Standby 0x20DFD728 Power on 0x20DF23DC Settings of remote 0x20DFB44B Program guide 0x20DF956A Radio/TV 0x20DFF00F HDMI 1 0x20DF738C HDMI 2 0x20DF33CC HDMI 3 0x20DF9768 Component 0x20DFFD02 Live Zoom 0x20DFF50A Input info 0x20DFF20D Picture mode 0x20DFB24D Recordings 0x20DF09F6 Audio mode 0x20DF4AB5 Register magic remote 0x20DF7B84 directly register magic remote 0x20DFAE51 Subtitles 0x20DF1CE3 Presentation in shop 0x20DFCC33 Start recording 0x20DFBD42 LG TV Plus 0x20DFAD52 Sports mode 0x20DFDD22 Search 0x20DF1EE1 Warning: instart 0x20DFDF20 Warning: Poweronly 0x20DF7F80 Warning: Easy adjust 0x20DFFF00 Warning: instop 0x20DF5FA0 Enter Password 0x20DF5FA0 Warning: Reset to factory 0x20DF3FC0"},{"location":"Codes-for-IR-Remotes/#generic-veon-tv-eg-model-sro322016","title":"Generic VEON TV (eg model SRO322016)","text":"button code On/Off {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEA857\"} Mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE6897\"} Sleep {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE38C7\"} Source {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE48B7\"} Info {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE28D7\"} EPG {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEAA55\"} Vol+ {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FED827\"} Vol- {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE58A7\"} Chan+ {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE9867\"} Chan- {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE18E7\"} Play/Pause {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE52AD\"} Stop {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FED22D\"} Rwd {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEE21D\"} FFd {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE629D\"} Back {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEA25D\"} Skip {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE22DD\"} 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE807F\"} 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE40BF\"} 3 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEC03F\"} 4 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE20DF\"} 5 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEA05F\"} 6 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE609F\"} 7 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEE01F\"} 8 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE10EF\"} 9 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE906F\"} 0 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE00FF\"} Menu {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE8877\"} Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE30CF\"} Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEB04F\"} Left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEF00F\"} Right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE708F\"} OK {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FE08F7\"} Exit {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FEC837\"}"},{"location":"Codes-for-IR-Remotes/#set-top-boxes","title":"Set-top Boxes","text":""},{"location":"Codes-for-IR-Remotes/#vu-duo2","title":"VU+ Duo2","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"RC6\",\"Bits\":36,\"Data\":\"0x8052900C\"}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"RC6\",\"Bits\":36,\"Data\":0x8052900C}</code></p> button code ON/OFF 0xC8052900C Mute 0xC8052100D Vol+ 0xC80529010 Vol- 0xC80521011 P+ 0xC80529020 P+ 0xC80529021 Left 0xC8052105A Right 0xC8052905B Up 0xC80529058 Down 0xC80529059 OK 0xC8052905C Men 0xC80529054 Red 0xC8052906D Yellow 0xC8052906F Green 0xC8052906E Blue 0xC80529070 Play/Pause 0xC8052902D Stop 0xC80529031 Forward 0xC80529028 Back 0xC80529029 Key 1 0xC80529001 Key 2 0xC80529002 Key 3 0xC80529003 Key 4 0xC80529004 Key 5 0xC80529005 Key 6 0xC80529006 Key 7 0xC80529007 Key 8 0xC80529008 Key 9 0xC80529009 Key 0 0xC80529000 Key &lt; 0xC805290BB Key &gt; 0xC805290BC Record 0xC80529037 EPG 0xC805290CC Exit 0xC80529055 Audio 0xC805290E5 Radio 0xC805290F2 TV 0xC805290E4 Context 0xC80521049 Help 0xC80529081"},{"location":"Codes-for-IR-Remotes/#appletv-gen4","title":"AppleTV Gen4","text":"button code Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E15080\"} Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E13080\"} Left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E19080\"} Right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E16080\"} Ok {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E13A80\"} Menu {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E1C080\"} Play/Pause {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x77E1FA80\"} Home {\"Protocol\":\"NEC\",\"Bits\":0,\"Data\":\"0xFFFFFFFFFFFFFFFF\"}"},{"location":"Codes-for-IR-Remotes/#humax-hms-1000t-dvb-t2-dvr-pal-4-tune","title":"Humax HMS-1000T DVB-T2 DVR PAL 4-Tune","text":"button code Power {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000800FF\"} TV Apps {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008D22D\"} Text {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00087689\"} Wide {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008728D\"} Play {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000816E9\"} Pause {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000846B9\"} Rew {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008A659\"} Fwd {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000826D9\"} Stop {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008C639\"} Record {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00088679\"} Search {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008E21D\"} Plus {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000842BD\"} Exit {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00086897\"} Back {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008827D\"} Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00088877\"} Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008A857\"} Left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000848B7\"} Right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000828D7\"} Enter {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008C837\"} Vol + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008F807\"} Vol - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000802FD\"} Mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000818E7\"} Home {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008708F\"} Guide {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008D827\"} Ch + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000808F7\"} Ch - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008F00F\"} Red {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000838C7\"} Green {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008B847\"} Yellow {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000858A7\"} Blue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00087887\"} 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008C03F\"} 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000820DF\"} 3 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008A05F\"} 4 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008609F\"} 5 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008E01F\"} 6 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000810EF\"} 7 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008906F\"} 8 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000850AF\"} 9 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008D02F\"} 0 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x000830CF\"} TV/Radio {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x0008B04F\"}"},{"location":"Codes-for-IR-Remotes/#fetchtv-mini-hybroad-h626t","title":"FetchTV Mini (Hybroad H626T)","text":"button code Power Toggle {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662BA45\"} Keyboard Select {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26624CB3\"} Ch + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26627B84\"} Ch - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662DB24\"} TV Guide {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266207F8\"} Red {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662738C\"} Green {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662936C\"} Yellow {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662E31C\"} Blue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266213EC\"} Info {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26628B74\"} Search {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26622CD3\"} Apps {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662CC33\"} Menu {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26629B64\"} Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26629B64\"} Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266223DC\"} Left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662837C\"} Right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662C33C\"} Enter {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26621CE3\"} Back {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662AB54\"} Exit {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266227D8\"} Rew {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662BB44\"} Play/Pause {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26625BA4\"} Fwd {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26625BA4\"} Stop {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662B34C\"} Record {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x26624BB4\"} 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266240BF\"} 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662C03F\"} 3 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266220DF\"} 4 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662A05F\"} 5 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662609F\"} 6 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662E01F\"} 7 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266210EF\"} 8 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662906F\"} 9 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x266250AF\"} 0 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x2662D02F\"}"},{"location":"Codes-for-IR-Remotes/#smart-reveiver-vxcx","title":"Smart Reveiver VX/CX","text":"button code on/off {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF30CF\",\"DataLSB\":\"0x00FF0CF3\",\"Repeat\":0} mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFB04F\",\"DataLSB\":\"0x00FF0DF2\",\"Repeat\":0} FORMAT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF1CE3\",\"DataLSB\":\"0x00FF38C7\",\"Repeat\":0} 16:9 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFC13E\",\"DataLSB\":\"0x00FF837C\",\"Repeat\":0} AUDIO {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFFA05\",\"DataLSB\":\"0x00FF5FA0\",\"Repeat\":0} 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF807F\",\"DataLSB\":\"0x00FF01FE\",\"Repeat\":0} 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF40BF\",\"DataLSB\":\"0x00FF02FD\",\"Repeat\":0} 3 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFC03F\",\"DataLSB\":\"0x00FF03FC\",\"Repeat\":0} 4 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF20DF\",\"DataLSB\":\"0x00FF04FB\",\"Repeat\":0} 5 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFA05F\",\"DataLSB\":\"0x00FF05FA\",\"Repeat\":0} 6 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF609F\",\"DataLSB\":\"0x00FF06F9\",\"Repeat\":0} 7 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFE01F\",\"DataLSB\":\"0x00FF07F8\",\"Repeat\":0} 8 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF10EF\",\"DataLSB\":\"0x00FF08F7\",\"Repeat\":0} 9 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF906F\",\"DataLSB\":\"0x00FF09F6\",\"Repeat\":0} TV/R {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFA25D\",\"DataLSB\":\"0x00FF45BA\",\"Repeat\":0} 0 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF00FF\",\"DataLSB\":\"0x00FF00FF\",\"Repeat\":0} RECALL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF19E6\",\"DataLSB\":\"0x00FF9867\",\"Repeat\":0} volume + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF5AA5\",\"DataLSB\":\"0x00FF5AA5\",\"Repeat\":0} volume - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFDA25\",\"DataLSB\":\"0x00FF5BA4\",\"Repeat\":0} P - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFBA45\",\"DataLSB\":\"0x00FF5DA2\",\"Repeat\":0} P + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF3AC5\",\"DataLSB\":\"0x00FF5CA3\",\"Repeat\":0} red {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFEC13\",\"DataLSB\":\"0x00FF37C8\",\"Repeat\":0} green {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF6C93\",\"DataLSB\":\"0x00FF36C9\",\"Repeat\":0} yellow {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF4CB3\",\"DataLSB\":\"0x00FF32CD\",\"Repeat\":0} blue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF2CD3\",\"DataLSB\":\"0x00FF34CB\",\"Repeat\":0} MENU {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF4AB5\",\"DataLSB\":\"0x00FF52AD\",\"Repeat\":0} BACK {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF44BB\",\"DataLSB\":\"0x00FF22DD\",\"Repeat\":0} EXIT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFB44B\",\"DataLSB\":\"0x00FF2DD2\",\"Repeat\":0} up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF04FB\",\"DataLSB\":\"0x00FF20DF\",\"Repeat\":0} left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF8877\",\"DataLSB\":\"0x00FF11EE\",\"Repeat\":0} OK {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFEA15\",\"DataLSB\":\"0x00FF57A8\",\"Repeat\":0} right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF08F7\",\"DataLSB\":\"0x00FF10EF\",\"Repeat\":0} down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF847B\",\"DataLSB\":\"0x00FF21DE\",\"Repeat\":0} INFO {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF34CB\",\"DataLSB\":\"0x00FF2CD3\",\"Repeat\":0} FAV {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF8679\",\"DataLSB\":\"0x00FF619E\",\"Repeat\":0} TXT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF7A85\",\"DataLSB\":\"0x00FF5EA1\",\"Repeat\":0} EPG {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF06F9\",\"DataLSB\":\"0x00FF609F\",\"Repeat\":0} FR {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF8976\",\"DataLSB\":\"0x00FF916E\",\"Repeat\":0} REC {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF619E\",\"DataLSB\":\"0x00FF8679\",\"Repeat\":0} FF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF29D6\",\"DataLSB\":\"0x00FF946B\",\"Repeat\":0} PREV {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF09F6\",\"DataLSB\":\"0x00FF906F\",\"Repeat\":0} Play/Pause {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFE916\",\"DataLSB\":\"0x00FF9768\",\"Repeat\":0} NEXT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFC936\",\"DataLSB\":\"0x00FF936C\",\"Repeat\":0} (none left) {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF4BB4\",\"DataLSB\":\"0x00FFD22D\",\"Repeat\":0} STOP {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF718E\",\"DataLSB\":\"0x00FF8E71\",\"Repeat\":0} (none right) {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF8976\",\"DataLSB\":\"0x00FF916E\",\"Repeat\":0} USB {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFFB04\",\"DataLSB\":\"0x00FFDF20\",\"Repeat\":0} HELP {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF54AB\",\"DataLSB\":\"0x00FF2AD5\",\"Repeat\":0} DVD {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFDB24\",\"DataLSB\":\"0x00FFDB24\",\"Repeat\":0}"},{"location":"Codes-for-IR-Remotes/#bddvd-players","title":"BD/DVD players","text":""},{"location":"Codes-for-IR-Remotes/#sony-bd-s1500","title":"Sony BD-S1500","text":"<p>Common buttons should work across multiple models</p> button code Eject {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x68B47\"} Power {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xA8B47\"} Red {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xE6B47\"} Green {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x16B47\"} Yellow {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x96B47\"} Bue {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x66B47\"} Top Menu {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x34B47\"} Popup/Menu {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x94B47\"} Return {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xC2B47\"} Options {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xFCB47\"} Home {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x42B47\"} Up {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x9CB47\"} Down {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x5CB47\"} Left {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xDCB47\"} Right {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x3CB47\"} Enter {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xBCB47\"} Favourites {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xBCB47\"} Netflix {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xD2B47\"} Play {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x58B47\"} Pause {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x98B47\"} Rew {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xD8B47\"} Fwd {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x38B47\"} Prev {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xEAB47\"} Next {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x6AB47\"} Stop {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x18B47\"} Subtitles {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0xC6B47\"} Audio Track {\"Protocol\":\"SONY\",\"Bits\":20,\"Data\":\"0x26B47\"} Vol + {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x490\"} Vol - {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0xC90\"} Mute {\"Protocol\":\"SONY\",\"Bits\":12,\"Data\":\"0x290\"}"},{"location":"Codes-for-IR-Remotes/#projectors","title":"Projectors","text":""},{"location":"Codes-for-IR-Remotes/#acer-k132","title":"Acer K132","text":"<p>IR Remote Codes for Acer K132 projector and possibly other models using a remote with model number M1820.</p> button code ON/OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8E11E\"} Freeze {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8718E\"} Hide {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8F10E\"} Ratio {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C806F9\"} Zoom {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8D12E\"} Mode {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C801FE\"} Source {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C831CE\"} Back {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C832CD\"} Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C841BE\"} Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8A15E\"} Left {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8C13E\"} Right {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8817E\"} Enter {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8B24D\"} Menu {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C821DE\"} Vol+ {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8C639\"} Vol- {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C826D9\"} Sound {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C8AD52\"} Mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10C88679\"}"},{"location":"Codes-for-IR-Remotes/#sanyo-plv-z4","title":"Sanyo PLV-Z4","text":"<p>Selected IR Remote Codes for the Sanyo PLV-Z4 with Sanyo CXTS remote.</p> <p>In the absence of a separate \"Power On\" and \"Power Off\" IR command, you will probably want to disable the \"Power Off Confirmation\" in the projector settings menu to simplify automation.</p> button code ON/OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC0000FF\",\"DataLSB\":\"0x330000FF\",\"Repeat\":0} Video {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC00BC43\",\"DataLSB\":\"0x33003DC2\",\"Repeat\":0} SVideo {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC007C83\",\"DataLSB\":\"0x33003EC1\",\"Repeat\":0} C1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC00C13E\",\"DataLSB\":\"0x3300837C\",\"Repeat\":0} C2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC00817E\",\"DataLSB\":\"0x3300817E\",\"Repeat\":0} HDMI {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC00EC13\",\"DataLSB\":\"0x330037C8\",\"Repeat\":0} PC {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xCC001CE3\",\"DataLSB\":\"0x330038C7\",\"Repeat\":0}"},{"location":"Codes-for-IR-Remotes/#soundbars","title":"Soundbars","text":""},{"location":"Codes-for-IR-Remotes/#panasonic-scall70t-soundbar","title":"Panasonic SCALL70T Soundbar","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"PANASONIC\",\"Bits\":48,\"Data\":\"0x40040500BCB9\"}}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"PANASONIC\",\"Bits\":48,\"Data\":0x40040500BCB9}</code></p> button code ON/OFF 0x40040500BCB9 Mute 0x400405004C49 Vol+ 0x400405000401 Vol- 0x400405008481 OK 0x40040538DFE2 Up 0x400405383F02 Down 0x40040538BF82 Setup 0x40040538AD90 Sound 0x400405280D20 Bluetooth 0x400405380538 Input 0x400405006164"},{"location":"Codes-for-IR-Remotes/#soundcore-infini-pro","title":"Soundcore Infini Pro","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xFD256897\"}}</code></p> <p>Example IRsend Command:</p> <p><code>{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xFD256897\"}</code></p> button code ON/OFF 0xFD2502FD Mute 0xFD2518E7 Input 0xFD2508F7 Bluetooth 0xFD259867 TV 0xFD2548B7 Vol+ 0xFD256897 Vol- 0xFD2558A7 Previous 0xFD258A75 Next 0xFD250AF5 Play/Pause 0xFD25C837 Movie 0xFD2554AB Music 0xFD255CA3 Voice 0xFD2552AD Bass- 0xFD2532CD Bass+ 0xFD258877 Surround 0xFD2538C7"},{"location":"Codes-for-IR-Remotes/#ir-codes-goodmans-gdsbt1000p","title":"IR Codes Goodmans GDSBT1000P","text":"<p>Example received Code:</p> <p><code>RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x4FBD02F\",\"DataLSB\":\"0x20DF0BF4\",\"Repeat\":0}}</code></p> <p>Example IRsend Command:</p> <p><code>{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x4FB30CF\"}</code></p> button code ON/OFF 0x4FB30CF Mute 0x20DF08F7 Mode Bluetooth 0x20DF0FF0 Mode Optical 0x20DF0AF5 Mode Coaxial 0x20DF16E9 Mode Line in 0x20DF07F8 Mode AUX 0x20DF09F6 Bluetooth Pairing 0x20DF06F9 Music 0x20DF10EF Movie 0x20DF0BF4 Voice 0x20DF14EB Treble + 0x20DF00FF Treble - 0x20DF03FC Bass + 0x20DF01FE Bass - 0x20DF04FB Volume + 0x20DF02FD Volume - 0x20DF05FA Previous 0x20DF11EE Play/Pause 0x20DF12ED Next 0x20DF13EC"},{"location":"Codes-for-IR-Remotes/#hi-fi-amplifiers-receivers","title":"Hi-Fi Amplifiers &amp; Receivers","text":""},{"location":"Codes-for-IR-Remotes/#jbl-on-air-24g-control","title":"JBL On Air 2.4G Control","text":"button code Change Input {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x538522DD\"} Volume Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x538521DE\"} Volume Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x538520DF\"} Mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x538523DC\"}"},{"location":"Codes-for-IR-Remotes/#nad-d-3020-v1","title":"NAD D-3020 v1","text":"button code Power On {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13EA45B\"} Power Off {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E13EC\"} Source Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E58A7\"} Source Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13EB847\"} Volume Up {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E11EE\"} Volume Down {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E31CE\"} Mute {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13EBB44\"} Skip Back {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E8B74\"} Skip Forward {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E4BB4\"} Optical 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E916E\"} Optical 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13EB14E\"} Coax {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13EA15E\"} Computer {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E8976\"} Aux 1 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13ED926\"} Aux 2 {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E03FC\"} Bluetooth {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xE13E43BC\"}"},{"location":"Codes-for-IR-Remotes/#yamaha-rx-v1900","title":"Yamaha RX-V1900","text":"<p>Selected codes for the Yamaha RX-V1900 AV Reciever with RAV385 Remote. Only codes relevant to remote operation included.</p> button code Power On {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x7E817E81\",\"DataLSB\":\"0x7E817E81\",\"Repeat\":0} Power Off {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x7E81FE01\",\"DataLSB\":\"0x7E817F80\",\"Repeat\":0} Multi {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1E11E\",\"DataLSB\":\"0x7A858778\",\"Repeat\":0} V-Aux {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1AA55\",\"DataLSB\":\"0x7A8555AA\",\"Repeat\":0} Phono {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA128D7\",\"DataLSB\":\"0x7A8514EB\",\"Repeat\":0} Dock {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xFE8052AD\",\"DataLSB\":\"0x7F014AB5\",\"Repeat\":0} BD HD DVD {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA113EC\",\"DataLSB\":\"0x7A85C837\",\"Repeat\":0} DVD {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1837C\",\"DataLSB\":\"0x7A85C13E\",\"Repeat\":0} CD {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1A857\",\"DataLSB\":\"0x7A8515EA\",\"Repeat\":0} MD CD-R {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA19867\",\"DataLSB\":\"0x6AE5F81F\",\"Repeat\":0} CBL SAT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA103FC\",\"DataLSB\":\"0x7A85C03F\",\"Repeat\":0} TV {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA12AD5\",\"DataLSB\":\"0x7A8554AB\",\"Repeat\":0} DVR {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1C837\",\"DataLSB\":\"0x7A8513EC\",\"Repeat\":0} VCR {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1F00F\",\"DataLSB\":\"0x7A850FF0\",\"Repeat\":0} Tuner {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA16897\",\"DataLSB\":\"0x7A8516E9\",\"Repeat\":0} USB {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0xFE80FC03\",\"DataLSB\":\"0x7F013FC0\",\"Repeat\":0} Sur Decode {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA1B14E\",\"DataLSB\":\"0x7A858D72\",\"Repeat\":0} Stereo {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA131CE\",\"DataLSB\":\"0x7A858D72\",\"Repeat\":0} Enhancer {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x5EA129D6\",\"DataLSB\":\"0x7A85946B\",\"Repeat\":0}"},{"location":"Codes-for-IR-Remotes/#vacuum-cleaners","title":"Vacuum Cleaners","text":""},{"location":"Codes-for-IR-Remotes/#ecovacs-deebot-slim2-vacuum-cleaner","title":"Ecovacs Deebot Slim2 Vacuum Cleaner","text":"<p>Example received Code:</p> <p><code>tele/sonoffIRBridge_1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFD02F\"}}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x00FFD02F}</code></p> button code Automatic Mode/Pause 0x00FFD02F Edge Cleaning 0x00FF609F Spot Cleaning 0x00FF40BF Back to Charging Base 0x00FF708F Forward 0x00FFC837 Left 0x00FFE01F Right 0x00FFF00F Back/Turn around 0x00FFC03F"},{"location":"Codes-for-IR-Remotes/#ventilation","title":"Ventilation","text":""},{"location":"Codes-for-IR-Remotes/#prana-150-energy-recovery-ventilation","title":"Prana 150 energy recovery ventilation","text":"<p>See device https://prana.org.ua/models/prana_150 (Ukrainian)</p> <p>Example received Code:</p> <p><code>MQT: tele/sonoffir/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF00FF\"}}</code></p> <p>Example IRsend Command:</p> <p><code>IRsend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF00FF\"}</code></p> button code Power {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF00FF\"} Screen/LED Brightness {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF807F\"} Heat OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF30CF\"} Heat ON {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF906F\"} Fan {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF50AF\"} Anti freeze {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFA857\"} Night Mode {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFB04F\"} Fan - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF708F\"} Fan + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF28D7\"} Night Mode Fan - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF609F\"} Night Mode Fan + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF10EF\"} <p></p>"},{"location":"Codes-for-IR-Remotes/#christmas-candle-weihnachtsbeleuchtung","title":"Christmas candle - Weihnachtsbeleuchtung","text":""},{"location":"Codes-for-IR-Remotes/#krinner-lumix-ir-remote","title":"Krinner Lumix IR Remote","text":"<p>Remote control has two buttons and three channels.</p> <p>Button 1 is to switch on</p> <p>Button 0 is to switch off</p> <p>Double click on button 1 is flicker mode</p> <p>No usable protocol found yet, but raw mode does it.</p> <p>Example for HttpGetRequest and irsend</p> <p><code>sendHttpGetRequest(\"http://192.168.1.234/cm?cmnd=irsend5%200,2000,1000,%20400,1000,%20400,%20400,1000,1000,%20400,1000,%20400,%20400,1000,%20400,1000,%20400,1000,%20400,2000,5600\")</code></p> <ul> <li>off channel A     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1000, 400,1000, 400,2000,5600</code></li> <li>on channel A     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,2000,5600</code></li> <li> <p>flicker channel A     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400, 400,1000, 400,1100,1000, 400, 400,2000,5600</code></p> </li> <li> <p>off channel B     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1000, 400,1000, 400,2000,5600</code></p> </li> <li>on channel B     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400,1000, 400,1000, 400, 400,2000,5600</code></li> <li> <p>flicker channel B     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,1100,1000, 400, 400,2000,5600</code></p> </li> <li> <p>off channel C     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1000, 400,1000, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1000, 400,1000, 400,2000,5600</code></p> </li> <li>on channel C     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400,1000, 400,1000, 400, 400,2000,5600</code></li> <li>flicker channel C     <code>irsend 0,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1100,1000, 400, 400,2000,5600,2000,1000, 400,1000, 400, 400,1000,1000, 400, 400,1000,1000, 400, 400,1100,1000, 400, 400,2000,5600</code></li> </ul>"},{"location":"Codes-for-IR-Remotes/#vinkor-flameless-flickering-candles-and-clones-probably","title":"Vinkor Flameless Flickering Candles (and clones probably)","text":"button code on {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED00FF\",\"Repeat\":0} off {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED40BF\",\"Repeat\":0} dim {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED08F7\",\"Repeat\":0} bright {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED48B7\",\"Repeat\":0} candle {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED30CF\",\"Repeat\":0} light {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED708F\",\"Repeat\":0} 2H {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED20DF\",\"Repeat\":0} 4H {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED609F\",\"Repeat\":0} 6H {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED10EF\",\"Repeat\":0} 8H {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x10ED50AF\",\"Repeat\":0}"},{"location":"Codes-for-IR-Remotes/#led-candles-led-kerzen","title":"LED Candles / LED Kerzen","text":""},{"location":"Codes-for-IR-Remotes/#duni-warm-white-led-candle-duni-warmwei-led-kerzen","title":"Duni Warm White LED Candle / Duni Warmwei\u00df LED Kerzen","text":"button code ON {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF00FF\"} OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF807F\"} 4h {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF40BF\"} 8h {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFC03F\"} ModeCandle {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF20DF\"} ModeLight {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFA05F\"} ModeDark {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF906F\"} ModeBright {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FFE01F\"} ModeMoon {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF10EF\"} ModeNightLight {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF609F\"}"},{"location":"Codes-for-IR-Remotes/#duni-multicoloured-led-candle-duni-mehrfarbige-led-kerzen","title":"Duni Multicoloured LED Candle / Duni Mehrfarbige LED Kerzen","text":"button code ON_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F48B7\",\"DataLSB\":\"0x01FE12ED\"} OFF_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F807F\",\"DataLSB\":\"0x01FE01FE\"} ModeSmooth_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F58A7\",\"DataLSB\":\"0x01FE1AE5\"} ModeNightLight_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F7887\",\"DataLSB\":\"0x01FE1EE1\"} ModeCandle_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F40BF\",\"DataLSB\":\"0x01FE02FD\"} ModeLight_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FC03F\",\"DataLSB\":\"0x01FE03FC\"} ModeTimer_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F20DF\",\"DataLSB\":\"0x01FE04FB\"} ModeDark_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FA05F\",\"DataLSB\":\"0x01FE05FA\"} ModeBright_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F609F\",\"DataLSB\":\"0x01FE06F9\"} ColorRed_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FE01F\",\"DataLSB\":\"0x01FE07F8\"} ColorGreen_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F10EF\",\"DataLSB\":\"0x01FE08F7\"} ColorBlue_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F906F\",\"DataLSB\":\"0x01FE09F6\"} ColorOrange_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F50AF\",\"DataLSB\":\"0x01FE0AF5\"} ColorLightGreen_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FD827\",\"DataLSB\":\"0x01FE1BE4\"} ColorLightBlue_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FF807\",\"DataLSB\":\"0x01FE1FE0\"} ColorViolet_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F30CF\",\"DataLSB\":\"0x01FE0CF3\"} ColorYellow_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FB04F\",\"DataLSB\":\"0x01FE0DF2\"} ColorBlueWhite_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F708F\",\"DataLSB\":\"0x01FE0EF1\"} ColorPink_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F00FF\",\"DataLSB\":\"0x01FE00FF\"} ColorYellowWhite_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807FF00F\",\"DataLSB\":\"0x01FE0FF0\"} ColorWhite_COL {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x807F9867\",\"DataLSB\":\"0x01FE19E6\"}"},{"location":"Codes-for-IR-Remotes/#fishtec-bougie-generic-multicolored-led-candle-generische-mehrfarbige-led-kerzen","title":"Fishtec Bougie / Generic Multicolored Led Candle / Generische mehrfarbige LED Kerzen","text":"button code ON {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE48B7\"} OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE58A7\"} ColorBlue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE609F\"} ColorRed {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE20DF\"} ColorGreen {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FEA05F\"} ColorWhite {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE30CF\"} ColorTurkis {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE10EF\"} ColorOrange {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE50AF\"} ColorPink {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE708F\"} ColorPurple {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FEF807\"} ColorLightPurple {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE906F\"} ColorLightBlue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FED827\"} ColorOceanBlue {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FEB04F\"} ModeMultiColor {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FEC03F\"} ModeSwitch {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x1FE7887\"}"},{"location":"Codes-for-IR-Remotes/#edifier-r1850db-ir-remote","title":"Edifier R1850DB IR remote","text":"button code MUTE {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7827D\",\"DataLSB\":\"0x10E741BE\",\"Repeat\":0} + {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7609F\",\"DataLSB\":\"0x10E706F9\",\"Repeat\":0} - {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7E21D\",\"DataLSB\":\"0x10E747B8\",\"Repeat\":0} ON/OFF {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7629D\",\"DataLSB\":\"0x10E746B9\",\"Repeat\":0} PC {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7E01F\",\"DataLSB\":\"0x10E707F8\",\"Repeat\":0} AUX {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7906F\",\"DataLSB\":\"0x10E709F6\",\"Repeat\":0} OPT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7A25D\",\"DataLSB\":\"0x10E745BA\",\"Repeat\":0} COX {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E7C03F\",\"DataLSB\":\"0x10E703FC\",\"Repeat\":0} BT {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E73AC5\",\"DataLSB\":\"0x10E75CA3\",\"Repeat\":0} \\&lt;\\&lt; {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E77887\",\"DataLSB\":\"0x10E71EE1\",\"Repeat\":0} &gt;|| {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E77A85\",\"DataLSB\":\"0x10E75EA1\",\"Repeat\":0} &gt;&gt; {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x8E740BF\",\"DataLSB\":\"0x10E702FD\",\"Repeat\":0}"},{"location":"Commands/","title":"Commands","text":"<p>Tasmota provides a powerful control interface using commands</p> <p>Commands can be issued using MQTT, web requests, webUI console and serial</p>"},{"location":"Commands/#how-to-use-commands","title":"How to use commands","text":"<p>Every command used without a parameter (payload) returns the current setting.</p> <p><code>Power</code> returns the status of first defined power output (usually Relay1)</p> <p>Instead of <code>0</code> you can use <code>off</code> or <code>false</code> and instead of <code>1</code> you can use <code>on</code> or <code>true</code>.</p> <p><code>Power ON</code> turns first defined power output (usually Relay1) on</p> <p><code>Power1 1</code> also turns first defined power output (usually Relay1) on</p> <p><code>Power1 True</code> also turns first defined power output (usually Relay1) on</p> <p>Replace <code>&lt;x&gt;</code> in a command with the appropriate index number. Leave it empty to use the first available.</p> <p><code>Power1</code> and <code>Power</code> both control first defined power output (usually Relay1)</p> <p>In commands with <code>x..y</code> value parameters use a number from <code>x</code> to <code>y</code> range.</p> <p>When a command mentions resetting to \"firmware default\" it means the setting will revert to the one in the flashed binary file. If you used <code>user_config_override.h</code> at compile time it will revert to those.</p> <p>If a command name is prefixed with <code>_</code> (underscore), the command result will neither be logged nor published via MQTT. However, output from the <code>Status</code> command will not be suppressed, as it does not count as \"result\". This is also the case where command output is only asynchroneously generated after some time, like the <code>Ping</code> command.</p> <p>Note</p> <p>All commands are standard in the form: <code>COMMAND</code>&lt;<code>INDEX</code>&gt; <code>DATA</code> It has only one <code>SPACE</code> between <code>INDEX</code> and <code>DATA</code>. (There is no command in Tasmota that allows the <code>=</code> sign)</p> <p>Example</p> <p>Set networking IP (XXX.XXX.XXX.XXX) addresses using the command <code>IPAddress&lt;x&gt;</code>: <code>IPAddress1 192.168.1.123</code></p> <p>The <code>=</code> sign (It can be understood as the sign <code>:</code>) is used only for meaning explanation reference: <code>IPAddress1 = set device IP address</code></p> <p>Note</p> <p>Beside results initiated by a command (synchronous) you can get asynchronous results initiated by rule trigger, telemetry event, commands from other source or changed device values. Simply put, other messages may precede messages published as a result of your commands.</p> <p>Example</p> <p>A <code>tele/%topic%/STATUS</code> message (sent every 300 seconds by default) may appear exactly after you issue <code>Power off</code> command and before you receive <code>stat/%topic%/RESULT = {\"POWER\":\"OFF\"}</code> message.</p>"},{"location":"Commands/#with-mqtt","title":"with MQTT","text":"<p>To send commands and view responses you'll need an MQTT client.</p> <p>Commands over MQTT are issued by using topic <code>cmnd/%topic%/&lt;command&gt;</code> and payload <code>&lt;parameter&gt;</code> where <code>%topic%</code> is the topic of the device you're sending the command to. If there is no <code>&lt;parameter&gt;</code> (an empty MQTT message/payload), a query is sent for current status of the <code>&lt;command&gt;</code>.</p> <p>See MQTT article to find out more.</p>"},{"location":"Commands/#with-web-requests","title":"with Web Requests","text":"<p>Commands can be executed via web (HTTP) requests, for example: <pre><code>http://&lt;ip&gt;/cm?cmnd=Power%20TOGGLE\nhttp://&lt;ip&gt;/cm?cmnd=Power%20On\nhttp://&lt;ip&gt;/cm?cmnd=Power%20off\nhttp://&lt;ip&gt;/cm?user=admin&amp;password=joker&amp;cmnd=Power%20Toggle\n</code></pre></p> <p>Any spaces or special characters must be replaced with their ASCII hex codes.</p> <p>You must precede each hex code with <code>%</code>. Most used codes are: <code>space</code> = <code>%20</code> and <code>;</code> = <code>%3B</code>.</p> <p>Tip</p> <p>Use URLencoder.org to easily convert your commands.</p> <p>If you have set a password for web user interface access, this must be included (in plaintext) in the URL of the HTTP request, like so: <pre><code>http://&lt;ip&gt;/cm?user=&lt;username&gt;&amp;password=&lt;password&gt;&amp;cmnd=Power%20On\n</code></pre></p>"},{"location":"Commands/#in-console-in-the-web-ui","title":"in Console in the Web UI","text":"<p>Console menu in the web UI is a convenient place to send commands and it behaves similar to a terminal connection via serial bridge.</p> <p>Warning</p> <p>The GUI controls do not and can not have all the features and commands implemented. For precise and complete control use Console commands!</p>"},{"location":"Commands/#over-serial-bridge","title":"over Serial Bridge","text":"<p>If you flashed the device via serial method you can connect to it with a terminal application (e.g. Termite or Arduino IDE Serial Monitor) to issue commands and follow responses. This is a practical way to do a <code>Backlog</code> setup of your new device.</p> <p>Serial interface is set to 115200 bps except for devices that require a different baud rate</p>"},{"location":"Commands/#the-power-of-backlog","title":"the Power of Backlog","text":"<p><code>Backlog</code> command allows executing up to 30 consecutive commands with a single command line. Each command is separated by a semicolon (\";\"). <code>Backlog</code> is a useful feature to avoid numerous restarts when setting up a new device. You can use it to:</p> <p>Set up both Wi-Fi AP's <pre><code>Backlog SSID1 &lt;myssid&gt;; Password1 &lt;mypassword&gt;; SSID2 &lt;myssid2&gt;; Password2 &lt;mypassword2&gt;\n</code></pre> Configure MQTT broker address, MQTT credentials, device topic and activate a few custom options <pre><code>Backlog MqttHost &lt;yourhost&gt;; MqttUser &lt;user&gt;; MqttPassword &lt;password&gt;; Topic &lt;customtopic&gt;; SetOption53 1; PowerRetain on\n</code></pre> For specific power control, using backlog like a script <pre><code>Backlog Status 1; Power2 on; Delay 20; Power2 off; Status 4\n</code></pre> When using web requests (Don't forget to encode \"space\" as '%20' and \";\" as '%3B') <pre><code>http://&lt;ip&gt;/cm?user=admin&amp;password=joker&amp;cmnd=Backlog%20Power%20Toggle%3BPower1%20off\n</code></pre></p> <p>A <code>Backlog</code> command without an argument clears a possible existing <code>Backlog</code> queue.</p> <p>Example</p> <p>in case of command <code>Backlog Power1 OFF; Delay 600; Power1 ON</code> the usage of an additional <code>Backlog</code> command without any argument within the delay time of 1 minute will delete the whole queue <code>Power1 OFF; Delay 600; Power1 ON</code>. Therefore <code>Power1 ON</code> command will not be executed and the power would remain off.</p>"},{"location":"Commands/#commands-list","title":"Commands List","text":"<p>Warning</p> <p>If you're using Tasmota versions earlier current release some of the commands might not work. Availability of some features and their associated commands depend on the firmware build. Please consult the builds table for a reference of which features are available for each firmware variant.</p> <p>Note</p> <p>Almost all settings using string parameters (except <code>Rule</code> and <code>MqttFingerprint</code>) share a common area with max 698 chars, i.e. the total length of all these parameters is limited to this size (you will be noted if this limit is exceeded).</p>"},{"location":"Commands/#control","title":"Control","text":"Command Parameters Backlog List of commands to be executed in sequence separated by  <code>;</code> See Using Backlog for examples. Backlog0 List of commands to be executed without any delay in sequence separated by  <code>;</code> See Using Backlog for examples. Backlog2 Like <code>Backlog0</code>, but without result published, same as prefixing all the commands with <code>_</code> Backlog3 Like <code>Backlog</code>, but without result published, same as prefixing all the commands with <code>_</code> BlinkCount Number of relay toggles (blinks) (does not control the status LED) <code>0</code> = blink many times before restoring power state  <code>1..32000</code> = set number of blinks (default = <code>10</code>) BlinkTime <code>2..3600</code> set duration, in 0.1 second increments, to blink aka toggle Power (does not control the status LED) Br Run Berry code from the consoleExample to download a file from a remote server into filesystem:<code>br def urlfetch(url,file); if file==nil; import string; file=string.split(url,'/').pop(); end; var wc=webclient(); wc.begin(url); var st=wc.GET(); if st!=200 raise 'connection_error','status: '+str(st) end; st='Fetched '+str(wc.write_file(file)); print(url,st); wc.close(); return st; end; urlfetch('https://raw.githubusercontent.com/arendst/Tasmota/development/tasmota/zigbee/giex_water.zb')</code> BrRestart Restart the Berry VM. read more... ButtonDebounce User control over button debounce timing <code>40..1000</code> = set button debounce time in milliseconds (default = <code>50</code>) Buzzer <code>0</code> = stop active buzzer cycle<code>&lt;count&gt;,&lt;beep&gt;,&lt;silence&gt;,&lt;tune&gt;</code> = read more...<code>2,3</code> = Beep twice with 300 milliseconds duration and 100 milliseconds pause<code>2,3,4</code> = Beep twice with 300 milliseconds duration and 400 milliseconds pause<code>1,2,3,0xF54</code> (0000 0000 0000 0000 0000 1111 0101 0100). Each <code>1</code> bit beeps for 200 milliseconds and each bounded <code>0</code> bit pauses for 300 milliseconds<code>-1</code> = infinite mode<code>-2</code> = follow LED mode BuzzerActiveSetOption67 iFan03 Buzzer control<code>0</code> = disable Sonoff iFan03 buzzer (default)<code>1</code> = enable Sonoff iFan03 buzzer BuzzerPwmSetOption111 <code>0</code> = (default)<code>1</code> = use frequency output for buzzer pin instead of on/off signal, for piezo buzzers DevGroupName&lt;x&gt; <code>0</code> = clear device group &lt;x&gt; name and restart<code>&lt;value&gt;</code> = set device group  name and restart.\\If a device group name is not set for a group, the MQTT group topic (<code>GroupTopic</code>) is used (with the device group number appended for device group numbers &gt; 1). DevGroupSend&lt;x&gt; <code>&lt;item&gt; = &lt;value&gt;[ ...]</code> = send an update to device group &lt;x&gt;. The device group name must have been previously set with DevGroupName&lt;x&gt;. Multiple item/value pairs can be specified separated by a space. Spaces in <code>&lt;value&gt;</code> must be escaped with a backslash (\\). The message sent is also processed on the local device as if it had been received from the network.For items with numeric values, <code>&lt;value&gt;</code> can be specified as @&lt;operator&gt;[&lt;operand&gt;] to send a value after performing an operation on the current value. &lt;operator&gt; can be + (add), - (subtract), ^ (invert), &amp; (bitwise AND) or | (bitwise OR). If &lt;operand&gt; is not specified, it defaults to 0xffffffff for the invert operator and 1 for other operators.To indicate that an item should not be shared with the group until changed again, prefix the value with N.<code>3</code> = Light fade (0 = Off, 1 = On)<code>4</code> = Light speed (1..40)<code>5</code> = Light brightness (0..255)<code>6</code> = Light <code>Scheme</code><code>7</code> = Light fixed color (0 = white (using CT channels), other values according to <code>Color</code>)<code>8</code> = PWM dimmer low preset (0..255)<code>9</code> = PWM dimmer high preset (0..255)<code>10</code> = PWM dimmer power-on brightness (0..255)<code>128</code> = Relay Power - bitmask with bits set for relays to be powered on. The number of relays can be specified in bits 24 - 31. If the number of relays is not specified, only relay 1 is set<code>129</code> = No Status Share - DevGroupShare bitmask indicating which items should not be shared until changed.<code>192</code> = Event - event name and arguments<code>193</code> = Command - command and arguments<code>224</code> = Light channels - comma separated list of brightness levels (0..255) for channels 1 - 5 (e.g. 255,128,0,0,0  will turn the red channel on at 100% and the green channel on at 50% on an RGB light) or hex color value (#RRGGBB, #RRGGBBWW, etc.)Examples:<code>DevGroupSend 5=90 128=1</code> - send an update to set the light brightness to 90 and turn relay 1 on.<code>DevGroupSend 193=Buzzer\\ 2,3</code> - send the Buzzer 2,3 command.<code>DevGroupSend 6=@+ 5=@-10</code> - set the next fixed color and decrease the brightness by 10.<code>DevGroupSend 128=^</code> - toggle all the relays.<code>DevGroupSend 224=NFF0000</code> - set the color to red locally and inform the group that light channel information is not to be shared until changed.<code>DevGroupSend 129=@\\|18</code> - do not share light brightness or channel status until changed. DevGroupShare <code>&lt;in&gt;,&lt;out&gt;</code> = set incoming and outgoing shared items (default = <code>0xffffffff,0xffffffff</code>) &lt;in&gt; and &lt;out&gt; are bit masks where each mask is the sum of the values for the categories (listed below) to be shared. For example, to receive only power (1), light brightness (2) and light color (16) and send only power (1), enter the command DevGroupShare 19,1.<code>1</code> = Power<code>2</code> = Light brightness<code>4</code> = Light fade/speed<code>8</code> = Light scheme<code>16</code> = Light color<code>32</code> = Dimmer settings (presets)<code>64</code> = Event DevGroupStatus&lt;x&gt; Show the status of device group &lt;x&gt; including a list of the currently known members. DevGroupTie&lt;x&gt; <code>&lt;relay&gt;</code> = Tie the relay to the device group &lt;x&gt;. Only applies when option 88 is enabled. FanSpeed Fan speed control (iFan02/iFan03 only)<code>0</code> = turn fan OFF<code>1..3</code> = set fan speed<code>+</code> = increase fan speed <code>-</code> = decrease fan speed Interlock Relay interlock mode and group selection.<code>0</code> = disable relay interlock for all relays (i.e., each relay is self-locking) (default) <code>1</code> = set interlock mode for selected relaysAdd up to 8 relays in 1 to 4 interlock groups, each separated by a space. For example <code>1,2 3,4</code> = Group Relay1 and Relay2 in group 1 and Relay3 and Relay4 in group 2 (note the space between the two groups)  <code>1,2,3</code> = group Relay1, Relay2 and Relay3 in a single interlock group <code>1 3 2,4</code> = Relay1 is in group 1, Relay3 in group 2, Relay2 and Relay4 in group 3 Json Input any command as valid JSON<code>{&lt;Tasmota commands&gt;}</code>example: <code>cmnd/tasmota/json {\"HSBColor\":\"360,100,100\",\"Scheme\": 1,\"Dimmer\": 10,\"CT\": 220}</code> LedMask Set a  bitmask specifying which relays control the LED indicator. Read more... <code>&lt;bitmask&gt;</code> = bitwise value representing each relay. Values may be entered as either hexadecimal or decimal values (e.g., 0xFFFF = 65535).<code>0xFFFF</code> (= 1111 1111 1111 1111) All relays control the power LED (default)LedState must be enabled (i.e., <code>!= 0</code>) in order for <code>LedMask</code> to take effect. LedPower LED power state as on or off  <code>0</code> = turn LED OFF and set <code>LedState 0</code> <code>1</code> = turn LED ON and set <code>LedState 8</code> <code>2</code> = toggle LED and set <code>LedState 0</code> (Use <code>Backlog LedPower 0; SetOption31 1</code> to disable LED even when Wi-Fi or MQTT is not connected) LedPower&lt;x&gt; LED&lt;x&gt; power state control. Enabled only when LedLink(i) is configured<code>0</code> = turn LED OFF and set <code>LedState 0</code> <code>1</code> = turn LED ON and set <code>LedState 0</code> <code>2</code> = toggle LED and set <code>LedState 0</code> LedState Manage LED state <code>0</code> = disable use of LED as much as possible  <code>1</code> = show power state on LED (LED on when power on) (default) (inverted for Sonoff Touch/T1) <code>2</code> = show MQTT subscriptions as a LED blink <code>3</code> = show power state and MQTT subscriptions as a LED blink <code>4</code> = show MQTT publications as a LED blink <code>5</code> = show power state and MQTT publications as a LED blink <code>6</code> = show all MQTT messages as a LED blink <code>7</code> = show power state and MQTT messages as a LED blink<code>8</code> = LED on when Wi-Fi and MQTT are connected.Cannot be issued directly and is only activated when <code>LedPower</code> is switched from <code>0</code> to <code>1</code> due to a software function NoDelay Delay defined by <code>SetOption34</code> is omitted for any command in a backlog sequence following immediately after <code>NoDelay</code>This must be used with care, and only for simple commands. Example Power0 Control the power state simultaneously for all power outputs on the device <code>0</code> / <code>off</code> = turn OFF  <code>1</code> / <code>on</code> = turn ON  <code>2</code> / <code>toggle</code> = if relay is <code>ON</code> switch to <code>OFF</code> and vice versa Power&lt;x&gt; Control the corresponding power state (also restarts PulseTime)&lt;x&gt; <code>0</code> / <code>off</code> / <code>false</code> = turn OFF  <code>1</code> / <code>on</code> / <code>true</code> = turn ON  <code>2</code> / <code>toggle</code> = if power state is <code>ON</code> switch to <code>OFF</code> and vice versa <code>3</code> / <code>blink</code> = toggle power for BlinkCount times each BlinkTime duration (at the end of <code>blink</code>, power state is returned to pre-blink state) <code>4</code> / <code>blinkoff</code> = stop blink sequence and return power state to pre-blink state TimedPower&lt;x&gt; Executes <code>Power&lt;x&gt; [ON\\|1\\|OFF\\|0\\|TOGGLE\\|2\\|BLINK\\|3]</code> and after <code>&lt;value&gt;</code> milliseconds executes inverted action <code>Power&lt;x&gt; [OFF\\|ON\\|TOGGLE\\|BLINK_OFF]</code><code>&lt;value&gt;</code> should stick to 50ms granularity<code>TimedPower</code> to show remaining timers<code>TimedPower&lt;x&gt;</code> to clear timer for corresponding <code>&lt;x&gt;</code> relay PowerLock&lt;x&gt; Control to lock the current power state of a device and prevent further changes. Only <code>PowerOnState</code> and <code>Interlock</code> may change a device in locked state. '0' = unlocked (default)  '1' = locked. Setting 'PowerLock0' locks/unlocks ALL devices PowerOnState Control power state when the device is powered up. More information <code>0</code> / <code>OFF</code> = keep power(s) OFF after power up  <code>1</code> / <code>ON</code> = turn power(s) ON after power up  <code>2</code> / <code>TOGGLE</code> = toggle power(s) from last saved state  <code>3</code> = switch power(s) to their last saved state (default) <code>4</code> = turn power(s) ON and disable further power control  <code>5</code> = after a <code>PulseTime</code> period turn power(s) ON (acts as inverted <code>PulseTime</code> mode) PulseTime&lt;x&gt; Display the amount of <code>PulseTime</code> remaining on the corresponding Relay&lt;x&gt;(x = <code>1..32</code>)<code>&lt;value&gt;</code> Set the duration to keep Relay&lt;x&gt; <code>ON</code> when <code>Power&lt;x&gt; ON</code> command is issued. After this amount of time, the power will be turned <code>OFF</code>.<code>0</code> / <code>OFF</code> = disable use of PulseTime for Relay&lt;x&gt;<code>1..111</code> = set PulseTime for Relay&lt;x&gt; in 0.1 second increments<code>112..64900</code> = set PulseTime for Relay&lt;x&gt;, offset by 100, in 1 second increments. Add 100 to desired interval in seconds, e.g., <code>PulseTime 113</code> = 13 seconds and <code>PulseTime 460</code> = 6 minutes (i.e., 360 seconds) SwitchDebounce User control over switch debounce timing and method<code>40..1000</code> = set switch debounce time in milliseconds (default = <code>50</code>). The granularity is 10 milliseconds, so the normally unnecessary last digit is used by the debouncing code to flag special handling:  <code>0</code> = no special handling  <code>1</code> = force_high: only a debounce time long LOW pulse could turn the switch off  <code>2</code> = force_low: only a debounce time long HIGH pulse could turn the switch on  <code>3</code> = force_high + force_low  <code>4..8</code> = unused  <code>9</code> = AC detection for switches / relays similar to MOES MS-104B / BlitzWolf SS5 etc. If the AC frequency is 50 Hz, <code>SwitchDebounce 69</code> will turn on the switch after three pulses and off after three missing one. SwitchMode&lt;x&gt; Switch mode. Index <code>0</code> applies to all switches. <code>0</code> = toggle (default) <code>1</code> = follow (0 = off, 1 = on)  <code>2</code> = inverted follow (0 = on, 1 = off)  <code>3</code> = pushbutton (default 1, 0 = toggle)  <code>4</code> = inverted pushbutton (default 0, 1 = toggle)  <code>5</code> = pushbutton with hold (default 1, 0 = toggle, Hold = hold)  <code>6</code> = inverted pushbutton with hold (default 0, 1 = toggle, hold = hold)  <code>7</code> = pushbutton toggle (0 = toggle, 1 = toggle) <code>8</code> = multi change toggle (0 = toggle, 1 = toggle, 2x change = hold) <code>9</code> = multi change follow (0 = off, 1 = on, 2x change = hold) <code>10</code> = inverted multi change follow (0 = on, 1 = off, 2x change = hold) <code>11</code> = pushbutton with dimmer mode  <code>12</code> = inverted pushbutton with dimmer mode  <code>13</code> = pushon mode (1 = on, switch off must come from something else, e.g., <code>PulseTime</code>, MQTT etc) <code>14</code> = inverted pushon mode (0 = on,  switch off must come from something else, e.g., <code>PulseTime</code>, MQTT etc) <code>15</code> = send only an MQTT message on switch change (<code>tele/tasmota/SENSOR</code> with payload <code>{\"Time\":\"2021-01-01T00:00:00\",\"Switch1\":\"OFF\"}</code>) <code>16</code> = inverted send only an MQTT message on switch change SwitchText&lt;x&gt; Show current JSON label of <code>Switch&lt;x&gt;</code> (<code>1..8</code>). Only <code>SwitchText</code> shows value for all 8 switches<code>&lt;text&gt;</code> - replace default <code>Switch&lt;x&gt;</code> label in JSON messages with a custom text WebButton&lt;x&gt; Change the name of the toggle buttons of the WEB UI. This command accepts spaces in the name WebQuery&lt;x&gt; Command for GET, POST, PUT, and PATCH HTTP queries, complete with Request Headers and request body (when applicable).<code>&lt;url&gt; GET|POST|PUT|PATCH [&lt;headers&gt;] &lt;body&gt;</code>Note: If a response is needed you must compile your own bin with <code>#define USE_WEBSEND_RESPONSE</code>.<code>https:</code> is only supported on ESP32sMore information... See also <code>SetOption1</code> - Set button multipress mode<code>SetOption11</code> - Swap pushbutton single and double press functionality<code>SetOption13</code> - Allow immediate action on single button press<code>SetOption26</code> - Use indexes even when only one relay is present<code>SetOption31</code> - Disable Wi-Fi LED status blinking<code>SetOption32</code> - Set hold interval before sending <code>HOLD</code> action<code>SetOption40</code> - Stop detecting any input change on button GPIO<code>SetOption67</code> - Enable/Disable Buzzer<code>SetOption73</code> - Decouple buttons from controlling power outputs"},{"location":"Commands/#management","title":"Management","text":"Command Parameters Delay <code>2..3600</code> = set a delay between two backlog commands with 0.1 second increment<code>-1</code> = increments to the next second tick<code>1</code> = increments with default intercommand delay of 200ms (changeable with SetOption34) Not recommended for precision timing! DeepSleepTime Time to enter deep sleep mode<code>0</code> = disable deep sleep mode (default)<code>11..86400</code> = set deep sleep mode time period in seconds DeviceName Device name displayed in the webUI and used for HA autodiscovery.<code>&lt;value&gt;</code> = set device name (default = <code>FriendlyName1</code> value) DspLine&lt;1|2&gt; For POWR3 Elite and THR3 Elite<code>&lt;index&gt;,&lt;unit&gt;,&lt;index&gt;,&lt;unit&gt;,...</code> = select message(s) on display DspSpeed For POWR3 Elite and THR3 Elite<code>2..127</code> = control message rotation speed on display Emulation <code>0</code> = disable emulation (default)<code>1</code> = enable Belkin WeMo emulation for Alexa<code>2</code> = enable Hue Bridge emulation for Alexa FileLog Enable logging to filesystem using up to 16 rotating log files of 100kB (<code>#define FILE_LOG_SIZE 100</code>)<code>0</code> = disable file logging (default) <code>1</code> = show only error messages <code>2</code> = show error and info messages<code>3</code> = show error, info and debug messages<code>4</code> = show error, info and more debug messages<code>11..14</code> same, but non-rotating log files.<code>10</code> disable file logging and delete files. FriendlyName&lt;x&gt; <code>1</code> = Reset friendly name to firmware default<code>&lt;value&gt;</code> = set friendly name (32 char limit) GPIOs Show list of available components by name and index<code>255</code> / <code>All</code> Show list of all components by name and index GPIO Show current component assignments of the Module's configurable GPIO<code>255</code> / <code>All</code> Show component assignments for all the devices available GPIO GPIO&lt;x&gt; <code>&lt;component&gt;</code> = assign a component to <code>Gpio&lt;x&gt;</code> GPIORead&lt;x&gt; Perform a digitalRead on each configured GPIO to show input state I2CScan0 ESP32 only Scan both I<sup>2</sup>C busses and show addresses for found devices I2CScan Scan I<sup>2</sup>C bus and show addresses for found devices I2CDriver Enable / Disable I<sup>2</sup>C sensor drivers. Read more... LogHost <code>1</code> = reset syslog host to firmware default (<code>SYS_LOG_HOST</code>)<code>&lt;value&gt;</code> = set syslog host LogPort <code>1</code> = reset syslog port to firmware default (<code>SYS_LOG_PORT</code>)<code>2..32766</code> = set syslog port Modules Show available modules by name and index Module Displays active module by name and index<code>&lt;value&gt;</code> = switch to module &lt;value&gt; and restart<code>0</code> = switch to defined template and restart Module2 Displays active fast reboot fallback module by name and index<code>&lt;value&gt;</code> = set fast reboot fallback module to &lt;value&gt;<code>0</code> = set fast reboot fallback module to defined template MqttLog <code>0</code> =  disable logging via MQTT (default) <code>1</code> = show only error messages <code>2</code> = show error and info messages<code>3</code> = show error, info and debug messages<code>4</code> = show error, info and more debug messages NtpServer&lt;x&gt; NTP server setup (x= <code>1..3</code>)<code>0</code> = clear NtpServer&lt;x&gt; settings<code>1</code> = reset NtpServer&lt;x&gt; settings to firmware defaults<code>&lt;value&gt;</code> = set NtpServer&lt;x&gt; host or IP address (32 char limit) OtaUrl Display current OTA URL <code>1</code> = Reset OtaUrl to firmware default <code>url</code> = set address for OTA (100 char limit) PWM&lt;x&gt; <code>0..1023</code> = set PWM value for channel (NOTE see <code>SetOption15</code>) PWMFrequency <code>&lt;frequency&gt; [, &lt;channel&gt;]</code><code>1</code> = reset PWM frequency to 223Hz<code>40..4000 or 2..50000</code> = set PWM frequency (40Hz to 4kHz on ESP 82xx / 2Hz to 50kHz on ESP32)PWM channel can only be selected on ESP32As of v8.3.0 the default frequency changed to 977Hz PWMRange <code>1</code> = reset maximum PWM range to 1023<code>255..1023</code> = set maximum PWM range Reset <code>1</code> = reset device settings to firmware defaults and restart (see warning below)<code>2</code> = erase flash, reset device settings to firmware defaults and restart <code>3</code> = erase System Parameter Area in flash (Wi-Fi calibration and related data) and restart (see warning below)<code>4</code> = reset device settings to firmware defaults but retain Wi-Fi credentials and restart <code>5</code> = erase all flash and reset parameters to firmware defaults but keep Wi-Fi settings and restart<code>6</code> = erase all flash and reset parameters to firmware defaults but keep Wi-Fi and MQTT settings and restart(Erase of flash can take a few seconds to complete and there is no output during the erase process on the serial or web console)<code>99</code> = reset device bootcount to zero For <code>reset 3</code>and <code>reset 1</code>, device must be power-cycled in order to load new Wifi System parameters. Restart <code>1</code> = restart device with configuration saved to flash<code>2</code> = halt system (needs hardware reset or power cycle to restart)<code>3</code> = (ESP32 only) restart device into safeboot with configuration saved<code>9</code> = save all changes and go into deepsleep waiting for a reset<code>99</code> = force restart device without configuration saveFor debug and testing stack trace dumps only:<code>-1</code> = force an Exception (28) crash<code>-2</code> = force a Soft WDT reset (after a freeze of 2 seconds)<code>-3</code> = force an OS watchdog reset (after a freeze of 120 seconds, caution!) RtcNtpServer&lt;x&gt; Use Tasmota NTP server when enabled by define <code>RTC_NTP_SERVER</code><code>0</code> = disabled<code>1</code> = enabled SaveData <code>0</code> = save parameter changes only manually, e.g. with <code>Restart 1</code><code>1</code> = save parameter changes every second (default)<code>2..3600</code> = save parameter changes every x second SerialLog Disable hardware serial bridge and<code>0</code> =  disable serial logging <code>1</code> = show only error messages <code>2</code> = show error and info messages (default)<code>3</code> = show error, info and debug messages<code>4</code> = show error, info and more debug messages<code>SerialLog</code> will be disabled automatically 10 minutes after the device reboots. SetSensor&lt;x&gt; Enable / Disable individual sensor driver(x= <code>1..127</code>) Sleep <code>0</code> = turn sleep off<code>1..250</code> = set sleep duration in milliseconds to enable energy saving (default = <code>50</code>) State Display current device state and publish to <code>%prefix%/%topic%/RESULT</code> topic\u2003 Status <code></code> = show abbreviated status information<code>0</code> = show all status information (1 - 11)<code>1</code> = show device parameters information<code>2</code> = show firmware information<code>3</code> = show logging and telemetry information<code>4</code> = show memory information<code>5</code> = show network information<code>6</code> = show MQTT information<code>7</code> = show time information<code>8</code> = show connected sensor information (retained for backwards compatibility)<code>9</code> = show power thresholds (only on modules with power monitoring)<code>10</code> = show connected sensor information (replaces 'Status 8')<code>11</code> = show information equal to <code>TelePeriod</code> state message<code>12</code> = in case of crash to dump the call stack saved in RT memory<code>13</code> = show shutter configuration Status0 <code>0</code> = show all status information in a single line SysLog <code>0</code> = disable syslog logging (default) <code>1</code> = show only error messages <code>2</code> = show error and info messages<code>3</code> = show error, info and debug messages<code>4</code> = show error, info and more debug messages Sunrise <code>0</code> = normal, the moment the sun becomes visible/disappears at the horizon (default) <code>1</code> = civil, when it begins to be and stops being possible to work outside without artificial light <code>2</code> = nautic, when it begins to be and stops being possible to navigate a ship at sea<code>3</code> = astronomic, when it stops being / starts being possible to see all of the stars Template Show current Template<code>0</code> = create template from active module<code>x</code> = create template from a supported module<code>255</code> = merge current module and template settings into new template<code>{ ... }</code> = store template in a JSON payloadDoes not activate the template. To activate use <code>Module 0</code>. Time <code>0</code> = enable NTP (default)<code>1</code> = format JSON message timestamp in ISO format<code>2</code> = format JSON message timestamp in both ISO and Epoch format<code>3</code> = format JSON message timestamp in Epoch format<code>4</code> = format JSON message timestamp in milliseconds<code>&lt;value&gt;</code> = disable NTP and set UTC time as epoch value if greater than <code>1451602800</code> (January 1, 2016) TimeStdTimeDst Set policies for the beginning of daylight saving time (DST) and return back to standard time (STD)\u2003 Use the Tasmota timezone table to find the commands for your time zone.<code>0</code> = reset parameters to firmware defaults<code>H</code>,<code>W</code>,<code>M</code>,<code>D</code>,<code>h</code>,<code>T</code> <code>H</code> = hemisphere (<code>0</code> = northern hemisphere / <code>1</code> = southern hemisphere) <code>W</code> = week (<code>0</code> = last week of month, <code>1..4</code> = first .. fourth) <code>M</code> = month (<code>1..12</code>) <code>D</code> = day of week (<code>1..7</code> <code>1</code> = Sunday <code>7</code> = Saturday) <code>h</code> = hour (<code>0..23</code>) in local time <code>T</code> = time zone (<code>-780..780</code>) (offset from UTC in MINUTES - 780min / 60min=13hrs)Example: <code>TIMEDST 1,1,10,1,2,660</code>_If time zone is NOT 99, DST is not used (even if displayed) see Timezone <code>-13..+13</code> = set time zone offset from UTC in hours<code>-13:00..+13:00</code> = set time zone offset from UTC in hours and minutes<code>99</code> = use time zone configured with <code>TimeDst</code> and <code>TimeStd</code>Use the Tasmota time zone command helper to find the commands for your time zone and correctly set sunrise and sunset times. Ufs Universal File System commands read more... UfsDelete Delete SD card or Flash FS file if only of them available UfsDelete2 Delete only Flash FS file if available UfsFree Filesystem free size in kb UfsRename Rename SD card or Flash FS file if only of them available UfsRename2 Rename only Flash FS file if availableExample: <code>UfsRename2 old,new</code> UfsRun Run file UfsSize Filesystem size in kb UfsType Get filesystem type<code>0</code> = none<code>1</code> = SD card<code>2</code> = Flash file<code>3</code> = LittleFS Upgrade <code>1</code> = download firmware from <code>OtaUrl</code> and restart<code>2</code> = (ESP32 only) download safeboot firmware based on <code>OtaUrl</code> and restart into safeboot<code>&lt;value&gt;</code> = download firmware from <code>OtaUrl</code> if &lt;value&gt; is higher than device version Upload <code>1</code> = download firmware from <code>OtaUrl</code> and restart<code>2</code> = (ESP32 only) download safeboot firmware based on <code>OtaUrl</code> and restart into safeboot<code>&lt;value&gt;</code> = download firmware from <code>OtaUrl</code> if &lt;value&gt; is higher than device version UrlFetch <code>&lt;address&gt;</code> = download file to filesystem WebGetConfig <code>&lt;url&gt;</code> = pull a configuration <code>.dmp</code>  file from a HTTP URLMore information... WebLog <code>0</code> = disable web logging <code>1</code> = show only error messages <code>2</code> = show error and info messages (default)<code>3</code> = show error, info and debug messages<code>4</code> = show error, info and more debug messages WebTime <code>&lt;start_pos&gt;,&lt;end_pos&gt;</code> = show part of date and/or time in WebUI based on \"2017-03-07T11:08:02-07:00\" See also <code>SetOption68</code> - PWM Channel control<code>SetOption76</code> - DeepSleep disable bootcount incrementing"},{"location":"Commands/#wi-fi","title":"Wi-Fi","text":"Command Parameters Ap <code>0</code> = switch to other Wi-Fi Access Point<code>1</code>= select Wi-Fi Access Point 1<code>2</code>= select Wi-Fi Access Point 2 Hostname <code>1</code> = reset hostname to <code>MQTT_TOPIC-&lt;4digits&gt;</code> and restart<code>&lt;value&gt;</code> = set hostname (32 char limit) and restart. If hostname contains <code>%</code> it will be reset to the default instead. See FAQ for allowed characters.If using MQTT to issue this command, if it is used with the device <code>GroupTopic</code>, the command will not be executed. IPAddress&lt;x&gt; Set networking IP (<code>XXX.XXX.XXX.XXX</code>) addresses<code>IPAddress1</code> to set device IP address<li><code>0.0.0.0</code> to use dynamic IP address (DHCP)</li><li><code>XXX.XXX.XXX.XXX</code> to set static IP address</li><code>IPAddress2</code> to set gateway IP address<code>IPAddress3</code> to set subnet mask<code>IPAddress4</code> to set DNS server IP address<code>IPAddress5</code> to set Secondary DNS server IP addressfollow IPAddress commands with <code>restart 1</code> to apply changes Password&lt;x&gt; <code>&lt;x&gt;</code> = <code>1..2</code><code>&lt;value&gt;</code> = set AP&lt;x&gt; Wi-Fi password and restart<code>1</code> = reset AP&lt;x&gt; Wi-Fi password to firmware default (<code>STA_PASS1</code> or <code>STA_PASS2</code>) and restartPasswords are limited to 64 characters. Do not use special characters or white spaces in the password.Note that <code>Password</code> and <code>Password1</code> are equivalent commands. Ping&lt;x&gt; &lt;addr&gt; <code>&lt;x&gt;</code> = <code>0..8</code> = the number of ICMP packets to send, <code>0</code> uses the default (4)<code>&lt;addr&gt;</code> = address to send Ping, either in numerical format <code>192.168.1.200</code> or domain name <code>tasmota.com</code>(requires <code>#define USE_PING</code>)Example <code>Ping4 192.168.1.203</code>: <code>RSL: tele/tasmota_xxx/RESULT = {\"Ping\":{\"192.168.1.203\":{\"Reachable\":true,\"Success\":4,\"Timeout\":0,\"MinTime\":59,\"MaxTime\":167,\"AvgTime\":116}}}</code> SSId&lt;x&gt; <code>&lt;x&gt;</code> = <code>1..2</code><code>&lt;value&gt;</code> = set AP&lt;x&gt; Wi-Fi SSID and restart<code>1</code> = reset AP&lt;x&gt; Wi-Fi SSID to firmware default (<code>STA_SSID1</code> or <code>STA_SSID2</code>) and restart<code>0</code> = Clear AP&lt;x&gt; Wi-Fi SSID to empty and restartSSID are limited to 32 characters. Do not use special characters or white spaces in the SSID TCPBaudrate Requires GPIOs <code>TCP Tx</code> and <code>TCP Rx</code> and can work with hardware or software serial.<code>1200..115200</code> = set the baudrate for serial (only 8N1 mode) TCPConnect ,<code>&lt;port&gt;</code> = Port used for connection  = IP address to connect to TCPConfig <code>&lt;value&gt;</code> = standard 3 characters mode such as 8N1, 7E1, etc ... TCPStart Requires GPIOs <code>TCP Tx</code> and <code>TCP Rx</code> and can work with hardware or software serial. Also works with ModBus Bridge<code>&lt;port&gt;, [&lt;ipaddress&gt;]</code> = Start listening to port. If <code>&lt;ipaddress&gt;</code> is defined only allows connections from the provided IPv4 address <code>0</code> = Shut down TCP server and disconnect any existing connection Supports 2 parallel TCP connections, which can be useful if you need a terminal + a specific protocol (like XMODEM). The 3rd connection will disconnect a previous connection. The number of parallel connections is a compile-time option. UrlFetch <code>&lt;url&gt;</code>Download a url (http or https) and store the content in the filesystemESP32 only WebCanvas&lt;x&gt; Configure Web GUI canvas (background) using using a color, \"url\" or \"gradient\" CSS elements. Example: <code>WebCanvas linear-gradient(#F02 7%,#F93,#FF4,#082,#00F,#708 93%)</code> WebColor&lt;x&gt; Configure Web GUI colors (x = <code>1..19</code>)<code>#RRGGBB</code> = Set color for <code>WebColor&lt;x&gt;</code><code>1</code> = Global text (Black)<code>2</code> = Global background (White)<code>3</code> = Form background (Greyish)<code>4</code> = Input text (Black)<code>5</code> = Input background (White)<code>6</code> = Console text (Black)<code>7</code> = Console background (White)<code>8</code> = Warning text (Red)<code>9</code> = Success text (Green)<code>10</code> = Button text (White)<code>11</code> = Button (Blueish)<code>12</code> = Button hovered over (Darker blue-ish)<code>13</code> = Restart/Reset/Delete button (Red-ish)<code>14</code> = Restart/Reset/Delete button hover (Darker red-ish)<code>15</code> = Save button (Green-ish)<code>16</code> = Save button hover (Darker greenish)<code>17</code> = Config timer tab text (White)<code>18</code> = Config timer tab background (Light grey)<code>19</code> = Module title and FriendlyName text (Whiteish)<code>20</code> = Button color when off (Darkest blueish)User themes WebPassword Show current web server password<code>0</code> = disable use of password for web UI<code>1</code> = reset password to firmware default (<code>WEB_PASSWORD</code>)<code>&lt;value&gt;</code> = set web UI password (32 char limit) for user <code>WEB_USERNAME</code> (Default WEB_USERNAME = <code>admin</code>) WebQuery Send HTTP GET, POST, PUT, and PATCH Requests<code>&lt;url&gt; &lt;method&gt; [&lt;header1Name:header1Value|header2Name:header2Value...&gt;]&lt;body&gt;</code><code>&lt;url&gt;</code> = HTTP URL to query<code>&lt;method&gt;</code> = HTTP Request method. Must be <code>GET</code>, <code>POST</code>, <code>PUT</code>, or <code>PATCH</code><code>[&lt;header1Name:header1Value|header2Name:header2Value...&gt;]</code> (optional) =  HTTP Request Headers.<code>&lt;body&gt;</code> (optional) = HTTP Request Body. Ignored for GET requestsExamples<code>WebQuery http://www.mysite.com/api/status GET</code>: Simple HTTP GET Request<code>WebQuery http://www.mysite.com/api/update POST [Authorization:Bearer xyz|Content-Type:application/json]{\"message\":\"body\"}</code>: Sends POST data with an authorization header and Content-Type<code>WebQuery http://www.mysite.com/api/set PUT {\"message\":\"body\"}</code>: Sends PUT request with a body, but no headers WebRefresh Web page refresh<code>1000..10000</code> = set refresh time in milliseconds (default = <code>2345</code>) WebSend Send a command to Tasmota host over http. If a command starts with a <code>/</code> it will be used as a link.<code>[&lt;host&gt;:&lt;port&gt;,&lt;user&gt;:&lt;password&gt;] &lt;command&gt;</code><code>&lt;host&gt;</code> = hostname or IP address.<code>&lt;port&gt;</code> = port for the device if not the default <code>80</code><code>&lt;user&gt;</code> = enter username of the device you're sending the command to<code>&lt;password&gt;</code> = enter password of the device you're sending the command to<code>&lt;command&gt;</code> = command and payloadexample 1: <code>[&lt;ip&gt;] POWER1 ON</code> sends <code>http://&lt;ip&gt;/cm?cmnd=POWER1 ON</code>example 2: <code>WebSend [myserver.com] /fancy/data.php?log=1234</code> sends <code>http://myserver.com/fancy/data.php?log=1234</code> WebGetConfig <code>&lt;url&gt;</code>Download a configuration (*.dmp) from an http URL. The URL can include <code>%id%</code> which will be substituted by the device's MAC address without the dots. A possible usage for ones that compile their own binary is to include the command in USER_BACKLOG for automatic reconfiguration after a <code>reset 1</code>command. WebSensor&lt;x&gt; Control display of sensor telemetry in the web UI<code>0</code> = Do not display sensor's telemetry<code>1</code> = Display sensor's telemetry (default)<code>&lt;x&gt;</code> = number corresponding to the sensor - listed in the <code>sns</code> section of the supported sensor spreadsheet<code>&lt;x&gt;</code> = <code>3</code> Energy telemetryIssue a <code>Status 4</code> to obtain a list of sensor types enabled in the firmware loaded on the device. Webserver <code>0</code> = stop web server<code>1</code> = start web server in user mode<code>2</code> = start web server in admin mode Wifi <code>0</code> = disable Wi-Fi<code>1</code> = enable Wi-Fi (default) ESP8266 only:<code>2</code> = Wi-Fi mode 802.11b<code>3</code> = Wi-Fi mode 802.11b/g<code>4</code> = Wi-Fi mode 802.11b/g/n When wifi is Off it is always returned On after a restart except for a wake-up from deepsleep. WifiConfig <code>0</code> = disable Wi-Fi Manager and reboot (used with alternate AP)<code>2</code> = set Wi-Fi Manager as the current configuration tool and start Wi-Fi Manager (web server at 192.168.4.1) for 3 minutes, then reboot and try to connect Wi-Fi network<code>4</code> = retry other AP without rebooting (default)<code>5</code> = wait until selected AP is available again without rebooting<code>6</code> = Wi-Fi parameters can only be entered via commands in the serial console<code>7</code> = set Wi-Fi Manager (web server at 192.168.4.1) as the current configuration tool restricted to reset settings only. This setting is recommended for devices without an external control/reset button. No longer supported <code>1</code> = set SmartConfig (Android/iOS) for 3 minutes<code>3</code> = set WPS for 3 minutes WifiPower set Wi-Fi transmit power level in decibel-milliwatts (dBm) (default = <code>17</code>)<code>0</code> = enable dynamic Wi-Fi power based on RSSI<code>1</code> = restore default Wi-Fi power WiFiScan <code>1</code> = start a network scan. Results will be sent as a JSON payload. Read more... WiFiTest&lt;x&gt; Only available in AP mode. Test whether the Wi-Fi SSId and Password are correct and Tasmota can connect to the network. <code>&lt;x&gt;</code> = <code>0..3</code> <code>0</code> = test credentials, if successful save them in SSID slot 1, restart Tasmota <code>1</code> = test credentials, if successful save them in SSID slot 1 without restart <code>2</code> = test credentials, if successful save them in SSID slot 2 without restart <code>3</code> = test credentials without storing anything persistently and without restart<code>ssid+password</code> = credentials used for testing, <code>+</code> symbol is the separator since it is not allowed in an SSId name.* Read more... See also <code>SetOption55</code> - mDNS service control<code>SetOption56</code> - Wi-Fi network scan to select strongest signal on restart<code>SetOption57</code> - Wi-Fi network re-scan, alternate AP"},{"location":"Commands/#ftp-server","title":"FTP Server","text":"<p>Simple FTP Server for ESP8266 and ESP32 with filesystem. Define as per below and specify credentials you want: <pre><code>#define USE_FTP\n#define USER_FTP \"user\"\n#define PW_FTP \"pass\"\n</code></pre></p> Command Parameters UFSFTP <code>0</code> = FTP off<code>1</code> = FTP on SD card (when no SD card defaults to FFS)<code>2</code> = FTP on Flash file System <p>Note</p> <p>It works very stable, but a little slow, about 70 kb per second Enabled by default for the following config (<code>tasmota_configurations.h</code>): NOT(ESP8266_1M) AND NOT(FIRMWARE_MINIMAL) AND ESP8266_4M</p>"},{"location":"Commands/#mqtt","title":"MQTT","text":"Command Parameters ButtonRetain <code>0</code> = disable use of MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on button press ButtonTopic <code>&lt;value&gt;</code> = set MQTT button topic<code>0</code> = disable use of MQTT button topic<code>1</code> = set MQTT button topic to device <code>%topic%</code><code>2</code> = reset MQTT button topic to firmware default (<code>MQTT_BUTTON_TOPIC</code>) (default = <code>0</code>)If using MQTT to issue this command, if it is published to the device <code>GroupTopic</code>, the command will not be executed. FullTopic <code>1</code> = reset MQTT fulltopic to firmware default (<code>MQTT_FULLTOPIC</code>) and restart<code>&lt;value&gt;</code> = set MQTT fulltopic and restart. Use of optional %prefix%, %topic%, %hostname%, and %id% substitution tokens is allowed.If using MQTT to issue this command, if it is published to the device <code>GroupTopic</code>, you must ensure uniqueness of the resulting fulltopic on each destination device by using one or more of these substitution tokens. GroupTopic&lt;x&gt; <code>1</code> = reset MQTT group &lt;x&gt; topic to firmware default (<code>MQTT_GRPTOPIC</code>) and restart<code>&lt;value&gt;</code> = set MQTT group &lt;x&gt; topic and restart InfoRetain <code>0</code> = disable use of info MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on message <code>tele/%topic%/INFO&lt;x&gt;</code> MqttClient <code>1</code> = reset MQTT client to firmware config (<code>MQTT_CLIENT_ID</code>) and restart<code>&lt;value&gt;</code> = set MQTT client and restart.You can use the <code>%06X</code> substitution token to replace with last six characters of MAC address.If using MQTT to issue this command, if it is used with the device <code>GroupTopic</code>, the command will not be executed. MqttFingerprint TLS needs to be enabled in firmware for this command <code>&lt;value&gt;</code> =  set current fingerprint as 20 space separated bytes (59 chars max) MqttHost <code>0</code> = clear MQTT host field and allow mDNS to find MQTT host<code>1</code> = reset MQTT host to firmware default (<code>MQTT_HOST</code>) and restart<code>&lt;value&gt;</code> = set MQTT host and restart (do NOT use <code>.local</code>) MqttKeepAlive <code>1..100</code> = set MQTT Keep Alive timer (default = <code>30</code>) MqttPassword <code>0</code> = clear MQTT password<code>1</code> = reset MQTT password to firmware default (<code>MQTT_PASS</code>) and restart<code>&lt;value&gt;</code> = set MQTT password and restart (min 5 chars) MqttPort <code>1</code> = reset MQTT port to firmware default (<code>MQTT_PORT</code>) and restart<code>&lt;value&gt;</code> = set MQTT port between 2 and 32766 and restart MqttRetry <code>10..32000</code> = set MQTT connection retry timer in seconds (default = <code>10</code>) MqttTimeout <code>1..100</code> = set MQTT socket timeout (default = <code>4</code>) MqttUser <code>0</code> = clear MQTT user name<code>1</code> = reset MQTT user name to firmware default (<code>MQTT_USER</code>) and restart<code>&lt;value&gt;</code> = set MQTT user name and restart MqttWifiTimeout <code>100..20000</code> = set MQTT Wi-Fi connection timeout in milliseconds (default = <code>200</code>) PowerRetain MQTT power retain state <code>0</code> / <code>off</code> = disable MQTT power retain on status update (default) <code>1</code> / <code>on</code> = enable MQTT power retain on status update  Prefix1 <code>1</code> = reset MQTT command subscription prefix to firmware default (<code>SUB_PREFIX</code>) and restart<code>&lt;value&gt;</code> = set MQTT command subscription prefix and restart Prefix2 <code>1</code> = reset MQTT status prefix to firmware default (<code>PUB_PREFIX</code>) and restart<code>&lt;value&gt;</code> = set MQTT status prefix and restart Prefix3 <code>1</code> = Reset MQTT telemetry prefix to firmware default (<code>PUB_PREFIX2</code>) and restart<code>&lt;value&gt;</code> = set MQTT telemetry prefix and restart Publish <code>&lt;topic&gt; &lt;payload&gt;</code> = MQTT publish any topic and optional payload\u2003 Publish2 <code>&lt;topic&gt; &lt;payload&gt;</code> = MQTT publish any topic and optional payload with retain flag Publish3 <code>&lt;topic&gt; &lt;payload&gt;</code> = MQTT publish any topic and optional binary payload encoded in Hex (disabled in MINIMAL and SAFEBOOT) SensorRetain <code>0</code> = disable use of sensor MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on message <code>tele/%topic%/SENSOR</code> StateRetain <code>0</code> = disable use of state MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on message <code>tele/%topic%/STATE</code> StatusRetain <code>0</code> = disable use of status MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on message <code>tele/%topic%/STATUS</code> StateText&lt;x&gt; <code>&lt;value&gt;</code> = set state text  (<code>&lt;x&gt;</code> = <code>1..4</code>)1 = <code>OFF</code> state text2 = <code>ON</code> state text3 = <code>TOGGLE</code> state text4 = <code>HOLD</code> state text StatusRetain <code>0</code> = disable use of status MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on status messages <code>tele/%topic%/STATUS[n]</code> SwitchRetain <code>0</code> = disable use of MQTT retain flag (default)<code>1</code> = enable MQTT retain flag on switch press Subscribe Subscribes to an MQTT topic, append <code>/#</code> if not already present, and assigns an Event name to it.<code>&lt;eventName&gt;, &lt;mqttTopic&gt; [, &lt;key&gt;]</code> = Read more...<code></code> = list all topics currently subscribed Subscribe2 Subscribes to an MQTT topic and assigns an Event name to it.<code>&lt;eventName&gt;, &lt;mqttTopic&gt; [, &lt;key&gt;]</code> = Read more...<code></code> = list all topics currently subscribed SwitchTopic <code>&lt;value&gt;</code> = set MQTT switch topic<code>0</code> = disable use of MQTT switch topic<code>1</code> = set MQTT switch topic to device <code>%topic%</code><code>2</code> = reset MQTT switch topic to firmware default (<code>MQTT_SWITCH_TOPIC</code>) (default = <code>0</code>)Read more about this.If using MQTT to issue this command, if it is used with the device <code>GroupTopic</code>, the command will not be executed. TelePeriod See current value and force publish STATE and SENSOR message<code>0</code> = disable telemetry messages<code>1</code> = reset telemetry period to firmware default (<code>TELE_PERIOD</code>)<code>10..3600</code> = set telemetry period in seconds (default = <code>300</code>) Topic <code>1</code> = reset MQTT topic to firmware default (<code>MQTT_TOPIC</code>) and restart<code>&lt;value&gt;</code> = set MQTT topic and <code>ButtonTopic</code> and restart.When using MQTT to issue this command, if it is used with the device <code>GroupTopic</code>, the command will not be executed. Topic can not be identical to <code>MqttClient</code> Unsubscribe Unsubscribe from topics subscribed to with <code>Subscribe</code> <code></code> = unsubscribe all topics<code>&lt;eventName&gt;</code> = unsubscribe from a specific MQTT topic See also <code>SetOption3</code> - Disable//Enable MQTT<code>SetOption4</code> - Return MQTT response as <code>RESULT</code> or <code>%COMMAND%</code> topic<code>SetOption10</code> - Main topic change behavior<code>SetOption104</code> - Disable MQTT retained messages (some brokers don't support them)<code>SetOption140</code> - open clean or persistent MQTT session"},{"location":"Commands/#rules","title":"Rules","text":"Command Parameters Add&lt;x&gt; <code>&lt;value&gt;</code> = add value to Var&lt;x&gt; (example) CalcRes Current calculation resolution<code>0..7</code> = set number of decimal places to be used for arithmetic expressions in rules, and the <code>Add</code>, <code>Sub</code>, <code>Mult</code> and <code>Scale</code> commands. Event Execute an event to trigger a rule as documented Mem&lt;x&gt; Manage up to 16 variables stored on flash (x = <code>1..16</code>)<code>Mem</code> returns all current values. <code>Mem&lt;x&gt;</code> returns the variable's current value.<code>&lt;value&gt;</code> = store a string value in a variable<code>\"</code> = clear stored value in Mem&lt;x&gt; Mult&lt;x&gt; <code>&lt;value&gt;</code> = multiply value to Var&lt;x&gt; (example) Rule&lt;x&gt; Rules. Read more...<code>0</code> = disable Rule&lt;x&gt;<code>1</code> = enable Rule&lt;x&gt;<code>2</code> = toggle Rule&lt;x&gt;<code>4</code> = disable one-shot detection (perform commands as long as trigger is met)<code>5</code> = enable one-shot (e.g., sometimes used for slow changing sensors like temperature) detection<code>6</code> = toggle one-shot detection<code>8</code> = disable stop-on-error after exception restart<code>9</code> = enable stop-on-error after exception restart<code>10</code> = toggle stop-on-error after exception restart<code>&lt;value&gt;</code> = define Rule&lt;x&gt;<code>+&lt;value&gt;</code> = append to Rule&lt;x&gt;<code>\"</code> = clear Rule&lt;x&gt;Rule set one-shot: Each rule within the rule set will trigger only once until the trigger condition returns to a false condition. For example, <code>ON Energy#Power&lt;3</code>: Without one-shot enabled, it will trigger anytime <code>Energy#Power</code> gets an update (i.e., the <code>Power</code> telemetry value changes) and the value is <code>&lt;3</code>. This can potentially trigger that rule multiple times. With one-shot enabled, the rule will trigger only the on the first transition to <code>&lt;3</code> and not again until the trigger value goes <code>&gt;=3</code>. In other words, the rule will trigger again, but it has to cross the conditional \"boundary\" before it will trigger again. Rule0 Same functionality as Rule&lt;x&gt; but affects all rulesets at once RuleTimer&lt;x&gt; Up to eight timers to be used as countdown event (x = <code>1..8</code>)\u2003 <code>0..65535</code> = set countdown rule timer in seconds<code>RuleTimer0 0</code> = stops and clear all timer simultaneously Scale&lt;x&gt; Scale value from a low and high limit to another low and high limits and save in Var&lt;x&gt; (example)<code>v</code> = value: the number to scale<code>fl</code> = fromLow: the lower bound of the value\u2019s current range<code>fh</code> = fromHigh: the upper bound of the value\u2019s current range<code>tl</code> = toLow: the lower bound of the value\u2019s target range<code>th</code> = toHigh: the upper bound of the value\u2019s target range Sub&lt;x&gt; <code>&lt;value&gt;</code> = subtract value to Var&lt;x&gt; (example) Var&lt;x&gt; Manage up to 16 variables stored in memory (x = <code>1..16</code>)<code>Var</code> returns all current values. <code>Var&lt;x&gt;</code> returns the variable's current value.<code>&lt;string&gt;</code> = store a string value in a variable<code>\"</code> = clear stored value in Var&lt;x&gt;"},{"location":"Commands/#timers","title":"Timers","text":"Command Parameters Latitude <code>&lt;value&gt;</code> = set latitude in decimal degrees format, e.g. -33.893681 Longitude <code>&lt;value&gt;</code> = set longitude in decimal degrees format, e.g. 18.619954 Sunrise Sunrise/Sunset type<code>0</code> = Normal (default)<code>1</code> = Civil<code>2</code> = Nautical<code>3</code> = Astronomicalintroduced in version 12.1.1.5 Timers Timers control<code>0</code> = disable all timers<code>1</code> = enable all timers<code>2</code> = toggle all timers Timer&lt;x&gt; Parameters for Timer&lt;x&gt; where x = <code>1..16</code><code>0</code> = clear parameters for Timer&lt;x&gt;<code>1..16</code> = copy Timer&lt;y&gt; parameters to Timer&lt;x&gt;<code>{ \"name\":value ; .. }</code> = set all or individual parameters using JSON payload with names and values of data pairs from the table <p>Information on sensors documented below is transmitted in the Tasmota telemetry message</p>"},{"location":"Commands/#sensors","title":"Sensors","text":"Command Parameters AdcGpio&lt;x&gt; ADC analog input tuning parameters, x is the gpio number and following 4 parameters are configration values for the type of sensor.<code>&lt;param1&gt;, &lt;param2&gt;, &lt;param3&gt;,  &lt;param4&gt;</code>See the ADC docs ADC docs for details. AdcParam&lt;x&gt; ADC deprecated old command for setting analog input tuning parameters. On ESP32 x is channel <code>1..8</code><code>&lt;sensor&gt;, &lt;param1&gt;, &lt;param2&gt;, &lt;param3&gt;,  &lt;param4&gt;</code>complete <code>&lt;sensor&gt;</code> values listed here... Altitude <code>-30000..30000</code> = altitude in meters AmpRes Current sensor resolution<code>0..3</code> = maximum number of decimal places Bh1750Resolution&lt;x&gt; BH1750 resolution mode. <code>x</code> = BH1750 sensor number (<code>1..2</code>) <code>0..2</code> = choose sensor resolution (<code>0</code> = high (default), <code>1</code> = high2, <code>2</code> = low) Bh1750MTime&lt;x&gt; BH1750 Measurement Time value. <code>x</code> = BH1750 sensor number (<code>1..2</code>) <code>30..255</code> = set Measurement Time value. Not persistent after reboot. (default = <code>69</code>) Counter&lt;x&gt; <code>0</code> = reset Counter&lt;x&gt; <code>1..4294967295</code> = preset Counter&lt;x&gt;<code>-1..-2147483647</code> = subtracts value from Counter&lt;x&gt;<code>+1..+2147483647</code> = add value to Counter&lt;x&gt;In order to define and use a Counter, you must configure one of the free device GPIO as <code>Counter&lt;x&gt;</code>. Counter &lt;x&gt; module configuration is using internal pull-up resistor while Counter_n &lt;x&gt; does not. **_.A counter event is triggered on the falling edge. By setting <code>SetOption159</code> to <code>1</code>, the counter reacts to both falling and rising edges. CounterDebounce <code>0</code> = turn off counter debounce <code>1..32000</code> = set counter debounce time in milliseconds. CounterDebounceLow <code>0</code> = turn off counter debounce low <code>1..32000</code> = set additonal debounce time for falling edge in milliseconds. CounterDebounceLow is independent of CounterDebounce and is also checked before CounterDebounce. As an example you can set <code>CounterDebounceLow 50</code> to allow a valid minimum distance between a falling and rising edge equal to 50ms while having a final CounterDebounce 500 check between to successive valid falling edges equal to 500ms. CounterDebounceHigh <code>0</code> = turn off counter debounce high <code>1..32000</code> = set additonal debounce time for rising edge in milliseconds. CounterDebounceHigh is independent of CounterDebounce and is also checked before CounterDebounce. As an example you can set <code>CounterDebounceHigh 100</code> to allow a valid minimum distance between a rising and falling edge equal to 100ms while having a final CounterDebounce 500 check between to successive valid falling edges equal to 500ms. CounterType&lt;x&gt; <code>0</code> = set Counter&lt;x&gt; as pulse Counter<code>1</code> = set Counter&lt;x&gt; as pulse Timer DhtDelay&lt;x&gt; <code>&lt;low_delay&gt;,&lt;high_delay&gt;</code> = set delay for sensor &lt;x&gt;<code>1</code> = reset sensor &lt;x&gt; to default Driver15&lt;x&gt; [TBC] for PCA9685 Driver44&lt;x&gt; [TBC] for Wemos motors <code>&lt;command&gt;,&lt;motor&gt;,&lt;direction&gt;{,&lt;duty&gt;}</code> Driver64&lt;x&gt; [TBC] for PCA9632 DS18Alias List DS18x20 sensors with full IDs<code>&lt;sensor ID&gt;,&lt;n&gt;</code> = set sensor alias (number)<code>&lt;sensor ID&gt;,0</code> = remove alias GlobalHum <code>0.0..100.0</code> = Set global Humidity for some Sensors that uses global Humidity. GlobalHum2 <code>1..250</code> = select Global Humidity source indexed from teleperiod occurrence data. GlobalPress2 <code>1..250</code> = select Global Pressure source indexed from teleperiod occurrence data. GlobalTemp <code>-50.0..100.0</code> = Set global Temperature for some Sensors that uses global temperature. GlobalTemp2 <code>1..250</code> = select Global Temperature source indexed from teleperiod occurrence data. HumOffset <code>-10.0..10.0</code> = Set calibration offset value for reported humidity telemetryThis setting affects all humidity sensors on the device. HumRes Humidity sensor resolution<code>0..3</code> = maximum number of decimal places PressRes Pressure sensor resolution<code>0..3</code> = maximum number of decimal places Sensor12 ADS1115 mode selection (default <code>S0</code>). Note that Vdd (2.0-5.5v) must be &gt;= analog voltage inputs.<code>D0 .. D5</code> = differential modes<code>S0 .. S5</code> = single-ended modes<code>0</code> = +/- 6.144v<code>1</code> = +/- 4.096v<code>2</code> = +/- 2.048v<code>3</code> = +/- 1.024v<code>4</code> = +/- 0.512v<code>5</code> = +/- 0.256v Sensor13 INA219 and ISL28022 low voltage current sensor configurationThere are 3 ways of configuring the INA219s1) Standard 0.1 ohm resistor (same setting applies to all INA219s):<code>0</code>,<code>1</code>,<code>2</code> = set INA219 calibration to max 32V and 2AIn all cases, ISL28022 is set to 60V mode2) Custom shunt resistor (legacy, same setting applies to all INA219)<code>10</code>..<code>255</code>: Define custom shunt resistor encoded as a decimal number <code>RRM</code> such that <code>Rshunt = RR * 10^M</code> milliohmDo not forget to choose a resistor adapted for the correct power dissipation and apply a 50% security margin !Examples:<code>11</code> = 1 * 10^1 = 10 milliohm (Imax=32A =&gt; Pres=15W)<code>21</code> = 2 * 10^1 = 20 milliohm (Imax=16A =&gt; Pres=7W)<code>12</code> = 1 * 10^2 = 100 milliohm (default, Imax=3.2A =&gt; Pres=2W)<code>13</code> = 1 * 10^3 = 1000 milliohm = 1 ohm (Imax=0.320A =&gt; Pres=0,2W)3) Fully flexible custom shunt (any value, independant setting per INA219)<code>0, rshunt1, rhunt2, rshunt3, rshunt4</code> = set each INA219 with it's own shunt resistor in Ohm (floating point). Exemple:<code>Sensor13 0, 0.1, 0.0005, 1.0, 0.0001</code> configure 1st INA219 with 0.1 Ohm, 2nd with 0.5 mOhm, 3rd with 1 Ohm, 4th with 0.1 mOhmIMPORTANT: This configuration mode is NOT saved to flash and requires a boot-rule to initialize the driver at each boot:<code>Rule1 on system#init do Sensor13 Sensor13 0, 0.1, 0.0005, 1.0, 0.0001 endon</code>Note: The driver seamlessly detect INA219/ISL28022 and adapt configuration and readings accordingly. The component label in Web GUI and SENSOR message will automatically match the detected part.It is possible to mix INA219 and ISL28022 as far as addresses do not conflicts.Shunt resistor setting applies to all INA219/ISL28022. Sensor15 Automatic Baseline Correction for MH-Z19B CO<sub>2</sub> sensor<code>0</code> = disable<code>1</code> = enable (default)<code>2</code> = start manual calibration from 400 ppm of CO<sub>2</sub><code>9</code> = reset sensor to factory defaults<code>1000</code> = sets measurement range to 1000ppm CO<sub>2</sub><code>2000</code> = sets measurement range to 2000ppm CO<sub>2</sub><code>3000</code> = sets measurement range to 3000ppm CO<sub>2</sub><code>5000</code> = sets measurement range to 5000ppm CO<sub>2</sub><code>10000</code> = sets measurement range to 10000ppm CO<sub>2</sub> Sensor18 PMSx003 particle dust sensor control polling interval to extend lifetime<code>0..59</code> = active mode (continuous sensor readings)<code>60..65535</code> - passive mode (read sensor every x seconds) Sensor20 Nova Fitness SDS011 dust sensor.<code>1..255</code> = number of seconds before TelePeriod to poll the sensor Sensor27 APDS-9960 sensor commands<code>0</code> = enable light level and proximity sensor / disable gestures (default) <code>1</code> = enable gesture mode/ disable light level and proximity sensor <code>2</code> = enable gestures with half gain / disable light and proximity sensor<code>3..255</code> = Set ATIME register for different integration times Sensor29 MCP23008 / MCP23017 I<sup>2</sup>C GPIO Expander configuration.  Read more...<code>Reset&lt;x&gt;</code> = reset all pinsx = <code>1..6</code><code>1</code> = INPUT mode, no reporting, no pull-up<code>2</code> = INPUT mode, report on CHANGE, pull-up enabled<code>3</code> = INPUT mode, report on LOW, pull-up enabled<code>4</code> = INPUT mode, report on HIGH, pull-up enabled<code>5</code> = OUTPUT mode (if enabled by <code>#define USE_MCP230xx_OUTPUT</code>)<code>6</code> = inverted OUTPUT mode (if enabled by <code>#define USE_MCP230xx_OUTPUT</code>)<code>pin,pinmode{,intpullup|outstate{,repmode}}</code>Continue reading... Sensor34 HX711 load cell sensor calibration. Note that without setting WeightRes the default resolution is to the nearest 1kg. Set <code>WeightRes 3</code> to read fractions of a kilogram. This applies to the JSON payload too.<code>1</code> = reset display to 0<code>2</code> = start calibration<code>2</code> <code>&lt;value&gt;</code> = set reference weight in grams and start calibration<code>3</code> = show reference weight in grams<code>3</code> <code>&lt;value&gt;</code> = set reference weight in grams<code>4</code> = show calibrated scale value<code>4</code> <code>&lt;value&gt;</code> = set calibrated scale value<code>5</code> = show max weight in gram<code>5</code> <code>&lt;value&gt;</code> = set max weight in grams<code>6</code> = show single item weight in grams<code>6</code> <code>&lt;value&gt;</code> = set single item weight in grams. Once the item weight is set, when items are added to the scale, the telemetry message will report <code>Count</code> as the number of items on the scale<code>7</code> = save current weight to be used as start weight on restart (deprecated since v11.0.0.7)<code>8</code> <code>0/1</code> <code>0</code> = disable JSON message on weight change over 4 grams <code>1</code> = enable JSON message on weight change (see below)<code>9</code> <code>&lt;value&gt;</code> = set minimum delta to trigger JSON message (see above).  <code>0</code> = 4 grams (old default) <code>1..100</code> = set delta to 0-99 grams <code>101-255</code> = set delta to 110-1650 grams (10g increments) Sensor36 See MGC3130 Sensor40 See PN532 Sensor44 See SPS30 Sensor50 PAJ7620 gesture sensor<code>0</code> = sensor muted, no readings in Tasmota<code>1</code>= gesture mode<code>2</code> = proximity mode<code>3</code> = corner mode<code>4</code> = PIN mode<code>5</code> = cursor mode Sensor52 iBeacon driver with HM10 or HM17/HM16<code>1</code> and <code>2</code> = required only once to initialize the module  <code>u&lt;x&gt;</code> = sets update interval in seconds (scan tags every &lt;x&gt; seconds) (default = 10)<code>t&lt;x&gt;</code> = set timeout interval in seconds (send RSSI=0 if tag is not detected after &lt;x&gt; seconds) (default = 30)<code>d1</code> = enable debug mode (shows all serial traffic in console)<code>d0</code> = disable debug mode_(default = 30)_<code>c</code> = clears iBeacon list<code>s AT+&lt;command&gt;</code>  = send native AT commands Sensor53 Smart Meter Interface<code>r</code> = reset the driver with a new descriptor specified with the Tasmota Scripting language.<code>c&lt;x&gt; &lt;value&gt;</code> = preset counter (x = <code>1..5</code>) to <code>value</code> when the driver is set to counter mode<code>d&lt;x&gt;</code> = disable data decoding and dump meter (x = <code>1..5</code>) data to the Console. This is used to decipher the meter's data format to define the variable encoding in the meter's descriptor.<code>d0</code> = disable data dump mode and revert to decoding mode.<code>l&lt;x&gt;</code> = monitor the serial activity at a GPIO with a connected LED. x = GPIO of the LED.<code>l255</code> = disable monitoring (default)<code>m&lt;x&gt;</code> = serial meter number (x = <code>1..5</code>) to be monitored<code>m0</code> = monitor all serial meters (default) Sensor54 INA226 Current Sensor<code>1</code> = rescan for devices and return the number found, when full scale current has been per channel.<code>2</code> = save the configuration and restart<code>10</code> = return channel 1 shunt resistance, full scale current and full scale voltage<code>11 &lt;resistance&gt;</code> = set INA226 channel 1 shunt  in ohms, floating point<code>12 &lt;current&gt;</code> = set INA226 channel 1 full scale  in amperes, floating point<code>13 &lt;voltage&gt;</code> = set INA226 channel 1 full scale  in volts, floating point (defaults to 40.96v, not persistent, must be set at boot)<code>20</code> = return channel 2 shunt resistance and full scale current<code>21 &lt;resistance&gt;</code> = set INA226 channel 2 shunt  in ohms, floating point<code>22 &lt;current&gt;</code> = set INA226 channel 2 full scale  in amperes, floating point<code>23 &lt;voltage&gt;</code> = set INA226 channel 2 full scale  in volts, floating point (defaults to 40.96v, not persistent, must be set at boot)<code>30</code> = return channel 3 shunt resistance and full scale current<code>31 &lt;resistance&gt;</code> = set INA226 channel 1 shunt  in ohms, floating point<code>32 &lt;current&gt;</code> = set INA226 channel 3 full scale  in amperes, floating point<code>33 &lt;voltage&gt;</code> = set INA226 channel 3 full scale  in volts, floating point (defaults to 40.96v, not persistent, must be set at boot)<code>40</code> = return channel 4 shunt resistance and full scale current<code>41 &lt;resistance&gt;</code> = set INA226 channel 1 shunt  in ohms, floating point<code>42 &lt;current&gt;</code> = set INA226 channel 4 full scale  in amperes, floating point<code>43 &lt;voltage&gt;</code> = set INA226 channel 4 full scale  in volts, floating point (defaults to 40.96v, not persistent, must be set at boot) Sensor60 GPS<code>0</code> = write to all available sectors, then restart and overwrite the older ones<code>1</code> = write to all available sectors, then restart and overwrite the older ones<code>2</code> = filter out horizontal drift noise<code>3</code> = turn off noise filter<code>4</code> = start recording, new data will be appended<code>5</code> = start new recording, old data will lost<code>6</code> = stop recording, download link will be visible in webUI<code>7</code> = send mqtt on new position + TELE (consider to set TELE to a very high value)<code>8</code> = only TELE message<code>9</code> = start NTP server<code>10</code> = deactivate NTP server<code>11</code> = force update of Tasmota-system-UTC with every new GPS-time-message<code>12</code> = do not update of Tasmota-system-UTC with every new GPS-time-message<code>13</code> = set latitude and longitude in settings<code>14</code> = open virtual serial port over TCP, usable for u-center<code>15</code> = pause virtual serial port over TCP Sensor68 WindMeter sensor - Analog (pulse count) anemometer<code>1, &lt;value&gt;</code> = set radius length in millimeters (measured from center to the edge of one of the cups) <code>0..65535</code> (default = <code>61</code>mm)<code>2, &lt;value&gt;</code> = set number of pulses for a complete turn <code>1..255</code> (default = <code>1</code>)<code>3, &lt;value&gt;</code> = set pulse counter debounce time in milliseconds <code>1..32000</code> (default = <code>10</code>)<code>4, &lt;value&gt;</code> = set speed compensation factor, a multiplication coefficient to adjust resulting speed <code>-32.768..32.767</code> three decimal places (default = <code>1.180</code>)<code>5, &lt;value&gt;</code> = set minimum percentage change between current and last reported speed trigger a new tele message <code>0..100</code>, <code>255</code> = off (default = <code>255</code>) Sensor78 EZO sensors - commandsAscii commands are sent directly to the sensor as-is.  See your specific EZO device datasheet for the list of commands available.By default, the specific command is sent to all EZO devices that are found.  If using multiple EZO sensors, and the command should be issued to a single device, the index can be specified as part of the command: Sensor78-# where <code>#</code> represent the index of the device (ex: Sensor78-1 i).  For more details please see Tasmota's support for EZO devices. Sensor80 Set antenna gain for MFRC522 RFID Reader.Sensor80 1 &lt;0..7&gt;0 18dB1 23dB2 18dB3 23dB4 33dB5 38dB6 43dB7 48dB Sensor90 Send commands to Hydreon RG-15 Rain Sensor<code>A</code> Reads accumulation data<code>R</code> Read all available data<code>K</code> Restart the rain sensor<code>P</code> Set to polling only mode (not supported)<code>C</code> Set to continuous mode, where data is sent when accumulation changes (default)<code>H</code> Force high resolution<code>L</code> Force low resolution<code>I</code> Force imperial (not supported)<code>M</code> Force metric (default)<code>S</code> Revert to jumper configured values<code>O</code> Reset the accumulation counter Sensor95 CM110x automatic baseline correction, 1=enable (default), 0=disable Sensor96 USE_FLOWRATEMETER settings Sensor100 INA3221 3-channel Voltage and Current Sensor<code>&lt;deviceId&gt;</code>: with <code>&lt;deviceId&gt;</code>=1..4 : display current shunt resistor values in ohm for the given device index (up to 4x INA3221 devices)<code>&lt;device&gt;, &lt;shuntChan1&gt;, &lt;shuntChan2&gt;, &lt;shuntChan3&gt;</code>: set the shunt resistor values in ohm for the 3 channels of the given device index. A value of 0 means the channel is disabled and won't be displayed in the UI. A disabled channel is reported with value<code>null</code> in the SENSOR JSONExemple:<code>Sensor100 1, 0.1, 0.1, 0.1</code> set all 3 shunts to the value 0.1 ohms and enable all 3 channels on the 1st INA3221 device.WARNING: Shunt values are NOT saved in flash settings. They must be re-configured at boot using <code>autoexec.bat</code> (if there is a filesystem) or a boot rule such as:<code>Rule1 on system#init do Sensor100 1, 0.1, 0.1, 0.1 endon</code>By defining <code>INA3221_CALC_CHARGE_AH / INA3221_CALC_ENERGY_WH</code> the driver adds a estimation of charge/energy in Ah and Wh to the output, To reset the energie calculation disable the according INA3221 chanel by setting the shunt to 0.0 and enable it again  For example : <code>sensor100 1,0,0.1,0.2</code> (or <code>sensor100 1,,,</code>) and <code>sensor100 1,0.1,0.1,0.2</code> will reset channel 1 of device 1By defining <code>INA3221_SUPPLY_SIDE</code> the driver adds the measured shunt-voltage to the bus-voltage for the cannel with a negativ shunt-value (shunt &lt;0) thus showing the values of the supply side (IN+) otherwise (shunt &gt;0) the load-side (IN-) is shown.    e.g. <code>sensor100 1,-0.1,0.1,-0.2</code> shows the supply-voltage of channel 1 and 3. additionaly the bits set (bit 0,1,2) enable the scanning of the voltage in the according channel thus you influence the scanning of the INA3221 chip (bus voltage, shunt-voltage or both)    e.g. <code>INA3221_SUPPLY_SIDE  0x0005</code> enables voltage-measurment of channel 1 and 3 for the device 1 SpeedUnit TX20/TX23 and WindMeter anemometer speed unit<code>1</code> = m/s<code>2</code>= km/h<code>3</code> = kn<code>4</code> = mph<code>5</code> = ft/s<code>6</code> = yd/s TempRes Temperature sensor resolution<code>0..3</code> = maximum number of decimal places TempOffset <code>-12.6..12.6</code> = Set calibration offset value for reported temperature telemetryThis setting affects all temperature sensors on the device. VoltRes Voltage sensor resolution<code>0..3</code> = maximum number of decimal places WattRes Power sensor resolution<code>0..3</code> = maximum number of decimal places WeightRes Load cell sensor resolution<code>0..3</code> = maximum number of decimal places (the default is 0) Wiper DS3502 contains a single potentiometer whose wiper position is controlled by the value in the Wiper Register (WR) represented by x = <code>0..3</code><code>POTI 0..127</code> = set POTI for wiper x<code>STATUS</code> = get wiper position for wiper x<code>RESET</code> = reset settings for wiper x See also <code>SetOption8</code>  - Show temperature in Celsius (default) or Fahrenheit<code>SetOption18</code> - Set status of signal light paired with CO<sub>2</sub> sensor<code>SetOption24</code> - Set pressure units<code>SetOption159</code> - Enable counting for Counter on both rising and falling edge"},{"location":"Commands/#power-monitoring","title":"Power Monitoring","text":"Command Parameters AmpRes Current sensor resolution<code>0..3</code> = maximum number of decimal places BatteryPercentage <code>0..101</code> (default = <code>101</code>= disabled)Set the current battery level as a percentage reported by STATE and STATUS11. This can be used to monitor e.g. in `Home Automation\" the battery lifetime.The intended use-case is to generate a rule that calculates the percentage based on e.g. A0 value or something else. CurrentCal <code>1000..32000</code> (default = <code>3500</code>)Set calibration offset ryAllows finer calibration for energy monitoring devices CurrentHigh <code>0</code> = disable current high threshold (default)<code>&lt;value&gt;</code> = set current high threshold value in milliamps CurrentLow <code>0</code> = disable current low threshold (default)<code>&lt;value&gt;</code> = set current low threshold value in milliamps CurrentSet&lt;x&gt; <code>&lt;value&gt;</code> = calibrate current to target value in mAx = <code>1</code> or <code>2</code> indicating phase EnergyExport&lt;x&gt; Export energy values<code>&lt;x&gt;</code> = meter number (default is <code>1</code>) EnergyExportActive&lt;x&gt; ADE7880 only! Set/reset energy active values<code>&lt;x&gt;</code> = meter number (default is <code>1</code>) EnergyReset&lt;x&gt; x = <code>1..5</code><code>1</code> <code>&lt;value&gt;{,&lt;time&gt;}</code> = ((p)re)set values<code>2</code> <code>&lt;value&gt;{,&lt;time&gt;}</code> = ((p)re)set values for Yesterday<code>3</code> <code>&lt;value&gt;{,&lt;time&gt;}</code> = ((p)re)set values for Total<code>&lt;value&gt;</code> = <code>0..42949672</code> in watt-hours (Wh)<code>&lt;time&gt;</code> = <code>0..4294967295</code> set StartTotalTime time as epoch value<code>4</code> <code>&lt;standard&gt;</code>{,<code>&lt;off-peak&gt;</code>} = ((p)re)set tariff period values for Totals<code>5</code> <code>&lt;standard&gt;</code>{,<code>&lt;off-peak&gt;</code>} = ((p)re)set tariff period values for ExportedWarning: After v10, this command is removed. As a replacement use <code>EnergyToday 0</code>, <code>EnergyTotal 0</code> and <code>EnergyYesterday 0</code> EnergyRes Energy sensor resolution<code>0..5</code> = maximum number of decimal places EnergyToday&lt;x&gt; Get or set Energy Today values, parameters:<code>&lt;x&gt;</code> = meter number (default is <code>1</code>)<code>&lt;value&gt;</code> = set new value in Wh, <code>0</code> for reset<code>&lt;time&gt;</code> = <code>0..4294967295</code> set StartTotalTime time as epoch value (optional 2nd parameter) EnergyTotal&lt;x&gt; Get or set Energy Total values, parameters:<code>&lt;x&gt;</code> = meter number (default is <code>1</code>)<code>&lt;value&gt;</code> = set new value in Wh, <code>0</code> for reset<code>&lt;time&gt;</code> = <code>0..4294967295</code> set StartTotalTime time as epoch value (optional 2nd parameter)The new value represents start of day, and output for total includes the today value. EnergyUsage Set energy usage values, parameters:<code>&lt;value&gt;</code> = set energy usage value, <code>0</code> for reset EnergyYesterday&lt;x&gt; Get or set Energy Yesterday values, parameters:<code>&lt;x&gt;</code> = meter number (default is <code>1</code>)<code>&lt;value&gt;</code> = set new value in Wh, <code>0</code> for reset<code>&lt;time&gt;</code> = <code>0..4294967295</code> set StartTotalTime time as epoch value (optional 2nd parameter) FreqRes Frequency sensor resolution<code>0..3</code> = maximum number of decimal places FrequencySet <code>&lt;value&gt;</code> = calibrate frequency to a target value in Hz MaxPower <code>0</code> = disable use maximum power monitoring<code>&lt;value&gt;</code> = set maximum allowed power in watts MaxPowerHold <code>1</code> = set default time to 10 seconds to stay over MaxPower before power off<code>&lt;value&gt;</code> = set time in seconds to stay over MaxPower before power off MaxPowerWindow <code>1</code> = set default time to 30 seconds to stay power off before re-applying power up to 5 times<code>&lt;value&gt;</code> = set time in seconds to stay power off before re-applying power up to 5 times ModuleAddress Set the address of a PZEM module<code>1..3</code> = the last octet of the PZEM-004T serial address<code>&lt;address&gt;</code> = the last octet of the address on MODBUS PZEM energy monitoring modulesPrior to setting the module address, the PZEM must be connected to both RX and TX, and AC voltage.Connect one PZEM at a time and issue this command. Repeat for each PZEM to be connected for multi-phase monitoring.The command without an argument cannot be used to read the address of the connected PZEM. PowerCal <code>1000..32000</code> (default = <code>12530</code>)Set calibration offset value for reported <code>Power</code> telemetry readingAllows finer calibration for energy monitoring devices PowerDelta&lt;x&gt; Set maximum delta of phase a in energy monitoring devices to report on active power load change while the power is ON. <code>PowerDelta</code> will not report when the power turns off.\u2003 <code>0</code> = disable reporting on power change<code>1..100</code> = set reporting on percentage power change to send an MQTT telemetry message<code>101..32000</code> = set reporting on absolute power change to send an MQTT telemetry message (offset by 100, e.g., <code>101</code>=1W, <code>207</code>=107W) PowerHigh <code>0</code> = disable power high threshold (default)<code>&lt;value&gt;</code> = set power high threshold value in watts to send an MQTT telemetry message PowerLow <code>0</code> = disable power low threshold (default)<code>&lt;value&gt;</code> = set power low threshold value in watts to send an MQTT telemetry message PowerSet&lt;x&gt; x = <code>1</code> or <code>2</code> indicating phase<code>&lt;value&gt;</code> = calibrate power to a target value in watts<code>&lt;value&gt;,&lt;voltage&gt;</code> = calibrate both power AND current to a target value in watts and a current based on voltage over load Status <code>8</code> = show power usage<code>9</code> = show power thresholds Tariff&lt;x&gt; P1 Smart Meter tariff configurationx = <code>1, 2, 9</code><code>1</code> <code>STD,DST</code> Start times for off-peak tariff<code>2</code> <code>STD,DST</code> End times for off-peak tariff<code>9</code> <code>0/1</code> <code>0</code> = use Start/End times also on weekends. <code>1</code> = use off-peak tariff all weekend.<code>STD</code> and <code>DST</code> may be specified as: <code>&lt;hour&gt;</code> = <code>0..23</code> or <code>&lt;time&gt;</code> = <code>00:00..23:59</code> or <code>&lt;minutes&gt;</code> = <code>0..1439</code> (since midnight)If both <code>Tariff1</code> STD and <code>Tariff2</code> STD are equal, all tariffs are disabled. VoltageCal Set calibration offset value for reported <code>Voltage</code> telemetry reading <code>1000..32000</code> (default = <code>1950</code>)Allows finer calibration for energy monitoring devices VoltageHigh <code>0</code> = disable voltage high threshold (default)<code>&lt;value&gt;</code> = set voltage high threshold value in V VoltageLow <code>0</code> = disable voltage low threshold (default)<code>&lt;value&gt;</code> = set voltage low threshold value in V VoltageSet&lt;x&gt; <code>&lt;value&gt;</code> = calibrate voltage to a target value in Vx = <code>1</code> or <code>2</code> indicating phase VoltRes Voltage sensor resolution<code>0..3</code> = maximum number of decimal places WattRes Power sensor resolution<code>0..3</code> = maximum number of decimal places See Also <code>SetOption21</code> - Energy monitoring when power is off<code>SetOption33</code> - Configure power monitoring Max_Power_Retry count number<code>SetOption39</code> - Control handling of invalid power measurements<code>SetOption72</code> - Set reference used for total energy<code>SetOption129</code> - Enable separate energy meters"},{"location":"Commands/#light","title":"Light","text":"Command Parameters AlexaCTRangeSetOption82 Reduce the CT range from <code>153..500</code> to <code>200..380</code> to accommodate with Alexa range<code>0</code> = CT ranges from 153 to 500 (default)<code>1</code> = CT ranges from 200 to 380 (although you can still set in from 153 to 500) Channel&lt;x&gt; <code>0..100</code> = set PWM channel dimmer value from 0 to 100%\u2003 <code>+</code> = increase by 10<code>-</code> = decrease by 10When <code>SetOption68</code> is set to <code>1</code> <code>Channel&lt;x&gt;</code> will follow <code>Power&lt;x&gt;</code> numbering with Relays first then PWM.Example:2 Relays and 3 PWM: Relay1 = <code>Power1</code>; Relay2 = <code>Power2</code>; PWM1 = <code>Power3</code> and <code>Channel3</code>; PWM2 = <code>Power4</code> and <code>Channel4</code>; PWM3 = <code>Power5</code> and <code>Channel5</code> ChannelRemapSetOption37 Color remapping for led channels, also provides an option for allowing independent handling of RGB and white channels. Setting changes require a device reboot.<code>0</code> = disable<code>1..119</code> = according to this table<code>120..127</code> = invalid (results in same as <code>0</code>)<code>128..255</code> = same as <code>0..127</code> but with independent channel handling enabled Color&lt;x&gt; x = <code>1..6</code> <code>1</code> = Set color <code>2</code> = Set color adjusted to current <code>Dimmer</code> value <code>3</code> = Set clock seconds hand color (Scheme <code>5</code> only) <code>4</code> = Set clock minutes hand color (Scheme <code>5</code> only) <code>5</code> = Set clock hour hand color (Scheme <code>5</code> only) <code>6</code> = Set clock hour marker color<code>&lt;value&gt;</code><code>r,g,b</code> = set color by decimal value (<code>0..255</code>)<code>#CWWW</code> = set hex color value for CT lights <code>#RRGGBB</code> = set hex color value for RGB lights<code>#RRGGBBWW</code> = set hex color value for RGBW lights<code>#RRGGBBCWWW</code> = set hex color value for RGBCCT lights (5 PWM channels)Note:Just append an <code>=</code> instead of the remaining color codes, this way they wont get changed. For example a command like <code>Color #00ff=</code> would update the RGB part to disable red and enable green, but would omit to update blue or any white channel. Set color to <code>1</code> = red<code>2</code> = green<code>3</code> = blue<code>4</code> = orange<code>5</code> = light green<code>6</code> = light blue<code>7</code> = amber<code>8</code> = cyan<code>9</code> = purple<code>10</code> = yellow<code>11</code> = pink<code>12</code> = white (using RGB channels)<code>+</code> = next color<code>-</code> = previous color CT <code>153..500</code> = set color temperature from 153 (cold) to 500 (warm) for CT lights<code>+</code> = increase CT value by 34<code>-</code> = decrease CT value by 34 CTRange Specify CT range of the bulb. The slider will still allow to set CT from 153 to 500, but the rendering will be done within the new range.<code>&lt;ct_min&gt;,&lt;ct_max&gt;</code> = set color temperature from 153 (cold) to 500 (warm) for CT lights default = <code>153,500</code>This settings is not persisted in flash Dimmer <code>0..100</code> = set dimmer value from 0 to 100%<code>+</code> = increase by <code>DimmerStep</code> value (default = <code>10</code>)<code>+step</code> = increase by <code>step</code> value<code>-</code> = decrease by <code>DimmerStep</code> value (default =<code>10</code>)<code>-step</code> = decrease by <code>step</code>Use of these parameters with <code>Fade</code> on enables dimmer level \"move down,\" \"move up,\" and \"stop\" commands (#11269)<code>&lt;</code> = decrease to 1<code>&gt;</code> = increase to 100<code>!</code> = stop any dimmer fade in progress at current dimmer level Dimmer&lt;x&gt; Commands available only when <code>SetOption37 &gt;= 128</code> (#6819)<code>&lt;value&gt;</code> same as in <code>Dimmer</code><code>Dimmer0 &lt;value&gt;</code> = set dimming for all channels<code>Dimmer1 &lt;value&gt;</code> = set dimming for RGB channels<code>Dimmer2 &lt;value&gt;</code> = set dimming for white channels<code>Dimmer4 &lt;value&gt;</code> = allow retaining brightness ratio between white and color channels when setting dimmer for linked lights DimmerRange Change dimming range. <code>&lt;dimmerMin&gt;,&lt;dimmerMax&gt;</code> = set the internal dimming range from minimum to maximum value (0..255, 0..255)Does not change <code>Dimmer</code> command behavior DimmerStep <code>1..50</code> - set <code>Dimmer +/-</code> step value. (default =<code>10</code>) Fade <code>0</code> = do not use fade (default) <code>1</code> = use fadeSee also <code>SetOption91</code> HSBColor <code>&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;</code> = set color by hue, saturation and brightness HSBColor1 <code>0..360</code> = set hue HSBColor2 <code>0..100</code> = set saturation HSBColor3 <code>0..100</code> = set brightness L1MusicSync Only for Sonoff L1 (Lite) and Spider Z LED controllers<code>&lt;power,sensitivity,speed&gt;</code> <code>power</code> = <code>0</code> - off, <code>1</code> - on, <code>2</code> - toggle <code>sensitivity</code> = <code>1..10</code> (default: <code>5</code>) <code>speed</code> = <code>1..100</code>  (default: <code>50</code>)Can be used with only <code>power</code> argument Led&lt;x&gt; <code>#RRGGBB</code> = set hex color value where <code>&lt;x&gt;</code> is the pixel number of the LED. A blank-delimited list of colors sets multiple successive pixels. (applies only to addressable LEDs) LedPwmMode&lt;x&gt; Control status LED light mode (x = <code>0..4</code>)<code>0</code> = digital on/off mode (default)<code>1</code> = PWM mode<code>2</code> = toggle between modes LedPwmOff <code>0..255</code> = set LED brightness when OFF LedPwmOn <code>0..255</code> = set LED brightness when ON LedTable <code>0</code> = do not use LED gamma correction (default \u00ab6.5.0.9)<code>1</code> = use gamma correction (default \u00bb6.5.0.9) MultiPWMSetOption68 Multi-channel PWM instead of a single light<code>0</code> = Treat PWM as a single light (default)<code>1</code> = Treat PWM as separate channels. In this mode, use <code>Power&lt;x&gt;</code> to turn lights on and off, and <code>Channel&lt;x&gt;</code> to change the value of each channel.<code>Color</code> still works to set all channels at once.Requires restart after change Palette <code>0</code> = Clear color palette<code>[ ...]</code> = Set list of colors used by <code>Color&lt;1,2&gt;</code> and <code>Scheme &lt;2,3,4&gt;</code> commands with each color separated by a space. The palette setting is not saved to flash. Use a boot-time rule such as ON System#Boot DO Palette xxxxx ENDON to set it back at each restart. Pixels <code>1..512</code> = set the number of pixels in strip or ring and reset <code>Rotation</code> (applies only to addressable LEDs)ESP32 only<code>&lt;pixels&gt;[,&lt;reverse&gt;,&lt;height&gt;,&lt;alternate&gt;]</code><code>pixels</code> (<code>1..512</code>) set the number of pixels in strip or ring (backwards compatible with ESP8266)<code>&lt;reverse&gt;</code> (opt, <code>0..1</code>) <code>1</code>= the leds are in reverse order (not yet implemented)<code>&lt;height&gt;</code> (opt, default <code>1</code>) number of lines in a leds matrix<code>&lt;alternate&gt;</code> (opt, <code>0..1</code>) <code>1</code>= lines in the matrix are in alternate order (zig-zag)Returns a JSON with current valuesExample: <code>Pixels 256,0,8,1</code> returns<code>{\"Pixels\":256,\"PixelsReverse\":0,\"PixelsHeight\":8,\"PixelsAlternate\":1}</code> PixelType (ESP32 only) Set the number of channels per led in the strip, and the color order<code>0</code> = use compile-time options, like on ESP8266 (default)<code>1</code> = <code>GRB</code> (typical for WS2812)<code>2</code> = <code>RGB</code><code>3</code> = <code>RBG</code><code>4</code> = <code>BRG</code><code>5</code> = <code>BGR</code><code>6</code> = <code>GBR</code>add <code>8</code> = 4 channels strip (RGBW), default 3 channelsadd <code>16</code> = if <code>W</code> is sent first, default <code>W</code> is sent lastExamples:<code>1</code> = <code>GRB</code><code>9</code> = <code>GRBW</code><code>25</code> = <code>WGRB</code> PowerOnFadeSetOption91 Enable <code>Fade</code> at boot and power on. By default fading is not enabled at boot because of stuttering caused by wi-fi connection<code>0</code> = don't Fade at startup (default) <code>1</code> = Fade at startup PWMCTSetOption92 Alternative to <code>Module 38</code>: for Cold/Warm white bulbs, enable the second PWM as CT (Color Temp) instead of Warm White, as required for Philips-Xiaomi bulbs.<code>0</code> = normal Cold/Warm PWM (default) <code>1</code> = Brightness/CT PWMSee PWM CT in Lights RGBWWTable Control light intensity of unbalanced PWM channels<code>PWM1,PWM2,PWM3,PWM4,PWM5</code> = channel range with values <code>0..255</code> (default =<code>255,255,255,255,255</code>)Range adjustment is computed after Gamma correction. Rotation <code>&lt;value&gt;</code> = set amount of pixels to rotate (up to <code>Pixels</code> value) (applies only to addressable LEDs) Scheme Light effects<code>+</code> = next scheme<code>-</code> = previous scheme<code>0</code> = single color for LED light (default)<code>1</code> = start wake up sequence (same as <code>Wakeup</code>)<code>2</code> = cycle up through colors using Speed option<code>3</code> = cycle down through colors using Speed option<code>4</code> = random cycle through colors using Speed and FadeUse <code>&lt;value&gt;, &lt;startcolor&gt;</code> if you want to set the starting color of selected schemeNote: If using ESP32, or any build with the DDP feature (<code>USE_NETWORK_LIGHT_SCHEMES</code>), enabling DDP is <code>Scheme 5</code> for plain RGB and <code>Scheme 16</code> for addressable leds. Then the normal neopixel scheme numbers become 6-15 instead of 5-14: Following schemes are usable only with addressable LEDs, e.g. WS281X, Neopixel <code>5</code> = clock mode (example)<code>6</code> = candlelight pattern<code>7</code> = RGB pattern<code>8</code> = Christmas pattern<code>9</code> = Hanukkah pattern<code>10</code> = Kwanzaa pattern<code>11</code> = rainbow pattern<code>12</code> = fire pattern<code>13</code> = stairs pattern<code>14</code> = clear (used to control from Berry) Speed <code>1..40</code> = set fade speed from fast <code>1</code> to very slow <code>40</code><code>+</code> = increase speed<code>-</code> = decrease speedThe <code>Speed</code> value represents the time in 0.5s to fade from 0 to 100% (or the reverse). Example: <code>Speed 4</code> takes 2.0s to fade from full brightness to black, or 0.5s to move from 75% to 100%. Speed2 Same as <code>Speed</code> but settings aren't stored. <code>!</code> = can be used to cancel the use of a preceding <code>Speed2</code> command. Use example... StepPixels (Scheme <code>5</code> only)<code>&lt;value&gt;</code> = define the number of LEDs in each step VirtualCT Precisely specify color rendering of the bulb for Color Temperature. Needs <code>SetOption106 1</code> and works for 3, 4 or 5 channel lights<code>{\"&lt;minct&gt;\":\"&lt;color1&gt;\",\"midct\":\"&lt;color2&gt;\",\"maxct\":\"&lt;color3\"}</code>Example: <code>VirtualCT {\"200\":\"FFFFFF0000\",\"400\":\"000000FF00\"}</code>The first and last CT values indicate the min and max CT and are equivalent to <code>CTRange</code>. Read more...This settings is not persisted in flash Wakeup Start wake up sequence from OFF to stored <code>Dimmer</code> value<code>0..100</code> = Start wake up sequence from OFF to provided <code>Dimmer</code> value WakeUpDuration <code>1..3000</code> = set wake up duration in seconds White <code>1..100</code> = set white channel brightness in single white channel lights (single W or RGBW lights) WhiteBlendSetOption105 White Blend Mode<code>0</code> = disable (default) <code>1</code> = enable Width&lt;x&gt; x = <code>1..4</code><code>1</code> = <code>0..4</code> = LED group width (Scheme <code>6..12</code> only)<code>2</code> = <code>0..32</code> = seconds hand width (Scheme <code>5</code> only)<code>3</code> = <code>0..32</code> = minutes hand width (Scheme <code>5</code> only)<code>4</code> = <code>0..32</code> = hour hand width (Scheme <code>5</code> only) See also <code>SetOption15</code>, <code>SetOption16</code>, <code>SetOption17</code>, <code>SetOption20</code>, <code>SetOption37</code>, <code>SetOption68</code> and <code>SetOption107</code> <p>ArtNet specific commands:</p> Command Description ArtNetConfig &lt;json&gt; Example <code>ArtNetConfig {\"Rows\":5, \"Cols\":5, \"Offset\":0, \"Alternate\":false, \"Universe\":0}</code>There are two modes for ArtNet configuration: simple light or adressable leds.In simple Light mode, <code>\"cols\"</code> is zero. Only <code>\"Universe\"</code> needs to be specified.Example: <code>ArtNetConfig {\"Cols\":0, \"Universe\":0}</code>In Adressable Light mode, all parameters can be specified.<code>Rows</code>: number of rows of display, <code>1</code> for light mode or single strip<code>Cols</code>: number of columns of the display, or length of the strip, or <code>0</code> for single light<code>\"Offset\"</code>: number of adressable leds to skip<code>Alternate</code>: (true/false) indicates that every other line is reversed (common in large matrix)<code>Universe</code>: starting DMX Universe number for the first line (0 based so you may need to substract 1 from software) ArtNet <code>Start</code>, <code>On</code>, or <code>1</code>: Start ArtNet mode, listen to UDP port 6454 and force <code>SetOption148 1</code> for autorun at restart<code>Stop</code>, <code>Off</code> or <code>0</code>: Stop ArtNet mode, close UDP port and force <code>SetOption148 0</code> to disable ArtNet mode at restart See also <code>SetOption148</code>"},{"location":"Commands/#device-groups","title":"Device Groups","text":"Command Parameters DevGroupName&lt;x&gt; <code>0</code> = clear device group &lt;x&gt; name and restart<code>&lt;value&gt;</code> = set device group &lt;x&gt; name and restart.Prior to 8.2.0.3, <code>GroupTopic</code> was used to specify the device group name. DevGroupSend&lt;x&gt; <code>&lt;item&gt;</code>=<code>&lt;value&gt;[ ...]</code> = send an update to device group &lt;x&gt;. The device group name must have been previously set with DevGroupName&lt;x&gt;. Multiple item/value pairs can be specified separated by a space. Spaces in <code>&lt;value&gt;</code> must be escaped with a backslash (\\). The message sent is also processed on the local device as if it had been received from the network.For items with numeric values, <code>&lt;value&gt;</code> can be specified as @&lt;operator&gt;[&lt;operand&gt;] to send a value after performing an operation on the current value. &lt;operator&gt; can be + (add), - (subtract) or ^ (invert). If &lt;operand&gt; is not specified, it defaults to 0xffffffff for the invert operator and 1 for other operators.Examples:<code>DevGroupSend 4=90 128=1</code> - send an update to set the light brightness to 90 and turn relay 1 on.<code>DevGroupSend 193=Buzzer\\\\ 2,3</code> - send the Buzzer 2,3 command.<code>DevGroupSend 6=@+ 4=@-10</code> - set the next fixed color and decrease the brightness by 10.<code>DevGroupSend 128=^</code> - toggle all the relays.<code>2</code> = Light fade (0 = Off, 1 = On)<code>3</code> = Light speed (1..40)<code>4</code> = Light brightness (0..255)<code>5</code> = Light <code>Scheme</code><code>6</code> = Light fixed color (0 = white (using CT channels), other values according to <code>Color</code>)<code>7</code> = PWM dimmer low preset (0..255)<code>8</code> = PWM dimmer high preset (0..255)<code>9</code> = PWM dimmer power-on brightness (0..255)<code>128</code> = Relay Power - bitmask with bits set for relays to be powered on. The number of relays can be specified in bits 24 - 31. If the number of relays is not specified, only relay 1 is set<code>192</code> = Event - event name and arguments<code>193</code> = Command - command and arguments<code>224</code> = Light channels - comma separated list of brightness levels (0..255) for channels 1 - 5 (e.g. 255,128,0,0,0  will turn the red channel on at 100% and the green channel on at 50% on an RGB light) DevGroupShare <code>&lt;in&gt;,&lt;out&gt;</code> = set incoming and outgoing shared items (default = <code>0xffffffff,0xffffffff</code>) &lt;in&gt; and &lt;out&gt; are bit masks where each mask is the sum of the values for the categories (listed below) to be shared. For example, to receive only power (1), light brightness (2) and light color (16) and send only power (1), enter the command DevGroupShare 19,1.<code>1</code> = Power<code>2</code> = Light brightness<code>4</code> = Light fade/speed<code>8</code> = Light scheme<code>16</code> = Light color<code>32</code> = Dimmer settings (presets)<code>64</code> = Event DevGroupStatus&lt;x&gt; Show the status of device group &lt;x&gt; including a list of the currently known members. See also <code>SetOption85</code> - to enable Device Groups"},{"location":"Commands/#setoptions","title":"SetOptions","text":"<p>Tip</p> <p>Instead of typing <code>SetOption</code> you can use shorter form of <code>SO</code>. so instead of <code>SetOption19 1</code> you can use <code>SO19 1</code></p> Command Parameters SetOption0 Save power state and use after restart (=SaveState) <code>0</code> = disable (see note below) <code>1</code> = enable (default)Note: Power state means on/off state of eg. relays or lights. Other parameters like color, color temperature, brightness, dimmer, etc. are still saved when changed. To disable saving other parameters see <code>SaveData</code>. SetOption1 Set button multipress mode to <code>0</code> = allow all button actions (default) <code>1</code> = restrict to single to penta press and hold actions (i.e., disable inadvertent reset due to long press) SetOption2 Set display of global temperature/humidity/pressure info to JSON sensor message <code>0</code> = disable (default) <code>1</code> = enable SetOption3 MQTT <code>0</code> = disable MQTT <code>1</code> = enable MQTT (default) SetOption4 Return MQTT response as <code>0</code> = RESULT topic (default) <code>1</code> = %COMMAND% topic SetOption8 Show temperature in <code>0</code>= Celsius (default) <code>1</code> = Fahrenheit SetOption10 When the device MQTT topic changes  <code>0</code> = remove retained message on old topic LWT (default) <code>1</code> = send \"Offline\" to old topic LWT SetOption11 Swap button single and double press functionality <code>0</code> = disable (default) <code>1</code> = enable SetOption12 Configuration saving to flash option<code>0</code> = allow dynamic flash save slot rotation (default)<code>1</code> = use fixed eeprom flash slot SetOption13 Allow immediate action on single button press<code>0</code> = single, multi-press and hold button actions (default) <code>1</code> = only single press action for immediate response (i.e., disable multipress detection). Disable by holding for 4 x button hold time (see <code>SetOption32</code>). SetOption15 Set PWM control for LED lights<code>0</code> = basic PWM control<code>1</code> = control with <code>Color</code> or <code>Dimmer</code> commands (default) SetOption16 Set addressable LED Clock scheme parameter <code>0</code> = clock-wise mode (default) <code>1</code> = counter-clock-wise mode SetOption17 Show <code>Color</code> string as <code>0</code> = hex string (default) <code>1</code> = comma-separated decimal string SetOption18 Set status of signal light paired with CO<sub>2</sub> sensor <code>0</code> = disable light (default)<code>1</code> = enable lightThe light will be green below <code>CO2_LOW</code> and red above <code>CO2_HIGH</code> (transition yellow/orange between).  The default levels are: 800ppm for low and 1200ppm for high but these can be set in <code>user_config_override.h</code>. SetOption19 Tasmota discovery protocol used in Home Assistant Tasmota integration <code>0</code> = enable Tasmota discovery (default) <code>1</code> = use deprecated MQTT discovery (only with <code>#define USE_HOME_ASSISTANT</code>, does not exist in release binaries) SetOption20 Update of Dimmer/Color/CT without turning power on<code>0</code> = disable (default)<code>1</code> = enable SetOption21 Energy monitoring when power is off<code>0</code> = disable (default)<code>1</code> = enable SetOption24 Set pressure units  <code>0</code> = hPa (default) <code>1</code> = mmHg SetOption26 Use indexes even when only one relay is present <code>0</code> = messages use POWER (default) <code>1</code> = messages use POWER1 SetOption28 RF received data format <code>0</code> = hex (default) <code>1</code> = decimal SetOption29 IR received data format <code>0</code> = hex (default) <code>1</code> = decimal SetOption30 Enforce Home Assistant auto-discovery as light <code>0</code> = relays are announced as a switch and PWM as a light (default) <code>1</code> = both relays and PWM are announced as light SetOption31 Set status LED  blinking during Wi-Fi and MQTT connection problems. <code>LedPower</code> must be set to <code>0</code> for this feature to work<code>0</code> = Enabled (default) <code>1</code> = Disabled SetOption32 Number of 0.1 seconds to hold button before sending <code>HOLD</code> action message. <code>1..100</code> to set button hold time (default = <code>40</code>). This option also affects the time required to perform a firmware defaults reset (10x <code>HOLD</code> action time). There is no firmware reset on using the HOLD action with shutterbuttons. SetOption33 Number of times to retry applying power after the power has been switched off because of exceeding the maximum power limit <code>1..250</code> = set number of retries (default = <code>5</code>) SetOption34 <code>0..255</code> = set Backlog inter-command delay in milliseconds (default = <code>200</code>) SetOption35 <code>0..255</code> = skip number of received messages in Serial Bridge (default = <code>0</code>) SetOption36 Boot loop defaults restoration control.<code>0</code> = disable boot loop control <code>1..200</code> = set number of boot loops (a restart caused by any exception or watchdog timer within less than <code>BOOT_LOOP_TIME</code> (default 10 seconds) before beginning to restore settings  (default = <code>1</code>). Once this number is reached, subsequent restarts will:<ul><li>1<sup>st</sup> restart: disable ESP8285 generic GPIOs interfering with flash SPI</li><li>2<sup>nd</sup> restart: disable rules causing boot loop</li><li>3<sup>rd</sup> restart: disable all rules, disable shutters <code>setoption80 0</code> (and <code>autoexec.bat</code>)</li><li>4<sup>th</sup> restart: reset user defined GPIOs to disable any attached peripherals</li><li>5<sup>th</sup> restart: reset module to Sonoff Basic (1)</li></ul> SetOption38 <code>6..255</code> = set IRReceive protocol detection sensitivity minimizing UNKNOWN protocols SetOption39 Control handling of invalid power measurements. Read more...<code>0</code> = reset to default on next restart<code>1..255</code> = number of invalid power readings before reporting no load (default =<code>128</code>). SetOption40 Stop detecting input change on the button GPIO. Solves #5449Active only when <code>SetOption1 1</code> and <code>SetOption13 0</code>. This disables all long press functionality.<code>0..250</code> = button hold time in 0.1 seconds after which button functionality is disabled.(default =<code>1</code>) Example: <code>Backlog SetOption1 1; SetOption13 0; SetOption40 10</code> = discard any button press over 1 second SetOption41 <code>0</code> = Disable ARP<code>&lt;x&gt;</code> = Force sending gratuitous ARP (Wi-Fi keep alive) every <code>&lt;x&gt;</code> seconds (default = <code>60</code>)If <code>&lt;x&gt;</code> is below <code>100</code> it is the number of seconds, if <code>&lt;x&gt;</code> is above <code>100</code>, it is the number of minutes after subtracting 100. Ex: <code>105</code> is every 5 minutes, while <code>90</code> is every 90 seconds. SetOption42 <code>0..255</code> = set over-temperature (Celsius only) threshold resulting in power off on all energy monitoring devices (default = <code>90</code>) SetOption43 <code>0..255</code> = to control Rotary step. Details #10407 SetOption44 <code>1..100</code> = set base tolerance percentage for matching incoming IR messages (default = <code>25</code>) SetOption45 <code>1..250</code> = change bi-stable latching relay pulse length in milliseconds (default = <code>40</code>) SetOption46 <code>0..255</code> = power on delay before initializing, in 10 millisecond units, up to 2.55 seconds. SetOption47 <code>3..255</code> = delay power on relay state in seconds to reduce power surge<code>1</code> = delays until network connected<code>2</code> = delays until MQTT connected SetOption48 Support energy dummy relays SetOption51 Enable GPIO9 and GPIO10 component selections in Module Configuration WARNING Do not use on ESP8266 devices! <code>0</code> = disable (default)<code>1</code> = enable SetOption52 Control display of optional time offset from UTC in JSON payloads<code>0</code> = disable (default) <code>1</code> = enable SetOption53 Display hostname and IP address in GUI<code>0</code> = disable (default) <code>1</code> = enable SetOption54 Apply <code>SetOption20</code> settings to commands from Tuya device<code>0</code> = disable (default) <code>1</code> = enable SetOption55 mDNS service<code>0</code> = disable (default) <code>1</code> = enable SetOption56 Wi-Fi network scan to select strongest signal on restart (network has to be visible)<code>0</code> = disable (default) <code>1</code> = enable SetOption57 Wi-Fi network re-scan every 44 minutes with alternate to +10dB stronger signal if detected (only visible networks)<code>0</code> = disable <code>1</code> = enable (default) SetOption58 IR Raw data in JSON payload<code>0</code> = disable (default) <code>1</code> = enable SetOption59 Send <code>tele/%topic%/STATE</code> in addition to <code>stat/%topic%/RESULT</code> for commands: <code>State</code>, <code>Power</code> and any command causing a light to be turned on.<code>0</code> = disable (default) <code>1</code> = enable SetOption60 Set sleep mode <code>0</code> = dynamic sleep (default) <code>1</code> = normal sleep SetOption61 Force local operation when <code>ButtonTopic</code> or <code>SwitchTopic</code> is set.<code>0</code> = disable (default) <code>1</code> = enable SetOption62 Set retain on Button or Switch hold messages<code>0</code> = disable (default) <code>1</code> = don't use retain flag on <code>HOLD</code> messages SetOption63 Set relay state feedback scan at restart (#5594, #5663)<code>0</code> = Scan power state at restart (default) <code>1</code> = Disable power state scanning at restart SetOption64 Switch between <code>-</code> or <code>_</code> as sensor name separator<code>0</code> = sensor name index separator is <code>-</code> (hyphen) (default) <code>1</code> = sensor name index separator is <code>_</code> (underscore)Affects DS18X20, DHT, BMP and SHT3X sensor names in tele messages SetOption65 Device recovery using fast power cycle detection<code>0</code> = enabled (default)<code>1</code> = disabled SetOption66 Set publishing TuyaReceived to MQTT<code>0</code> = disable publishing <code>TuyaReceived</code> over MQTT (default)<code>1</code> = enable publishing <code>TuyaReceived</code> over MQTT SetOption68 See Light-&gt;MultiPWM SetOption69 Invert Serial receive on SerialBridgeIn older versions: Deprecated in favor of DimmerRange By default Tuya dimmers won't dim below 10% because some don't function very well that way.<code>0</code> = disable Tuya dimmer 10% lower limit<code>1</code> = enable Tuya dimmer 10% lower limit (default) SetOption71 Set DDS238 Modbus register for active energy<code>0</code> = set primary register (default)<code>1</code> = set alternate register SetOption72 Set reference used for total energy <code>0</code> = use firmware counter (default)<code>1</code> = use energy monitor (e.g., PZEM-0xx, SDM120, SDM630, DDS238, DDSU666) hardware counter SetOption73 Detach buttons from relays and send multi-press and hold MQTT messages instead<code>0</code> = disable (default)<code>1</code> = enable Example message: <code>{\"Button1\":{\"Action\":\"SINGLE\"}}</code> SetOption74 Enable internal pullup for single DS18x20 sensor <code>0</code> = disable (default)<code>1</code> = internal pullup enabled This only affects ESP8266 ESP32 always needs external pullup SetOption75 Set grouptopic behaviour (#6779)<code>0</code> = GroupTopic using FullTopic replacing %topic% (default)<code>1</code> =  GroupTopic is <code>cmnd/%grouptopic%/</code> SetOption76 Boot count incrementing when DeepSleep is enabled (#6930)<code>0</code> = disable boot count incrementing (default)<code>1</code> = enable boot count incrementing SetOption77 Do not power off if a slider is moved to far left<code>0</code> = disable (default)<code>1</code> = enable SetOption78 OTA compatibility check<code>0</code> = enabled (default)<code>1</code> = disabled SetOption79 Reset counters at TelePeriod time<code>0</code> = disable (default)<code>1</code> = enable SetOption80 Blinds and shutters support<code>0</code> = disable blinds and shutters support (default)<code>1</code> = enable blinds and shutters support SetOption81 Set PCF8574 component behavior for all ports<code>0</code> = set as regular state (default)<code>1</code> = set as inverted state SetOption82 Reduce the CT range from 153..500 to 200.380 to accommodate with Alexa range<code>0</code> = CT ranges from 153 to 500 (default)<code>1</code> = CT ranges from 200 to 380 (although you can still set in from 153 to 500) SetOption83 Uses Zigbee device friendly name instead of 16 bits short addresses as JSON key when reporting values and commands<code>0</code> = JSON key as short address<code>1</code> = JSON key as friendly nameSee <code>ZbName &lt;device&gt;,&lt;name&gt;</code> SetOption84 (Experimental) When using AWS IoT, sends a device shadow update (alternative to retained)<code>0</code> = don't update device shadow (default)<code>1</code> = update device shadowNote: if the <code>Topic</code> contains <code>'/'</code> they are replaced with <code>'_'</code> SetOption85 Device group support<code>0</code> = disable (default)<code>1</code> = enable SetOption86 PWM Dimmer only! Turn brightness LED's off 5 seconds after last change<code>0</code> = disable (default)<code>1</code> = enable SetOption87 PWM Dimmer only! Turn red LED on when powered off<code>0</code> = disable (default)<code>1</code> = enable SetOption88 Make each relay part of a separate device group. Relay 1 updates are sent to/received from device group 1, relay 2 updates are sent to/received from device group 2, etc. For the PWM Dimmer module, make each button be associated with a different device group.<code>0</code> = disable (default)<code>1</code> = enable SetOption90 Disable sending MQTT with non-JSON messages<code>0</code> = send all MQTT (default) <code>1</code> = send only MQTT messages with JSON payloads SetOption93 Control caching of compressed rules<code>0</code> = Disable memory caching of uncompressed rules <code>1</code> = Keep uncompressed rules in memory to avoid CPU load of uncompressing at each tick (default) SetOption94 Select MAX31855 or MAX6675 thermocouple support<code>0</code> = Use MAX31855 protocol (default) <code>1</code> = Use simpler MAX6675 protocol instead of MAX31855 SetOption97 Set TuyaMCU serial baudrate<code>0</code> = 9600 bps (default) <code>1</code> = 115200 bps SetOption98 Provide rotary dimmer rule triggers<code>0</code> = disable (default) <code>1</code> = enable SetOption99 Enable zero-cross capable AC dimmer<code>0</code> = no zero-cross AC dimmer connected (default) <code>1</code> = zero-cross AC dimmer attached. Focus on raising edge and sync frequency SetOption101 Add Zigbee source endpoint as suffix to attributes<code>0</code> = disable (default) <code>1</code> = enablee.g. <code>Power3</code> instead of <code>Power</code> if sent from endpoint <code>3</code>. SetOption103 Set TLS mode<code>0</code> = disable TLS<code>1</code> = enable TLS SetOption104 Disable MQTT retained messages (some brokers don't support them)<code>0</code> = retained messages enabled (default) <code>1</code> = retained messages disabled SetOption107 Set virtual CT channel light type (experimental feature)<code>0</code> = Warm White <code>1</code> = Cold White SetOption108 <code>0</code> = Teleinfo telemetry only sent into Energy MQTT JSON (default)<code>1</code> = Each Teleinfo received frame is also sent by MQTT (mainly to be able to display real time data) SetOption109 <code>0</code> = (default)<code>1</code> = force gen1 Alexa mode, for Echo Dot 2nd gen devices only SetOption113 works only with rotary dial button<code>0</code> = (default)<code>1</code> = set dimmer low on rotary dial after power off SetOption114 Detach switches from relays and send MQTT messages instead<code>0</code> = disable (default)<code>1</code> = enable Example result: <code>{\"Switch1\":{\"Action\":\"ON\"}}</code> SetOption115 ESP32 MI32 BLE<code>0</code> = disable  (default)<code>1</code> = enable SetOption116 Zigbee Auto-query of lights and devices shortly after a light command is sent.<code>1</code> = disableDelay is 200ms for On/Off, 1050ms (1s) for lights levels, 10s for shutters. SetOption117 Run fade at fixed duration instead of fixed slew rate<code>1</code> = enable SetOption123 Wiegand tag number output in hex format<code>1</code> = enable SetOption124 Wiegand key pad stroke format<code>0</code> = one tag (ending char # or ) *(default)<code>1</code> = one key SetOption125 ZbBridge only Hide bridge topic from zigbee topic (use with <code>SetOption89</code>)<code>1</code> = enable SetOption126 Enable arithmetic mean over teleperiod for JSON temperature for DS18x20 sensors<code>1</code> = enable SetOption127 Force Wi-Fi in no-sleep mode even if Sleep 0 is not enabled<code>1</code> = enable SetOption128 Web referrer check for HTTP API commands<code>0</code> = disabled<code>1</code> = enabled (default) SetOption129 Enable split total energy results #13030<code>1</code> = enable SetOption130 Add heap size (and ESP32 fragmentation) to logging timestamp for debugging<code>1</code> = enable SetOption131 (Tuya) Allow save dimmer = 0 received by MCU<code>1</code> = enable SetOption132 When MQTT TLS is enabled, forces fingerprint validation of server identity instead of checking the identify against a certificate authority (CA)<code>1</code> = Fingerprint, <code>0</code> = CA SetOption133 Invert outputs of 74x595 shift register, <code>0</code> = don't invert SetOption134 PWM force phases to be synced (ESP32 only).On ESP32, PWM phases are by default distributed one after the other to minimize effect on power supply. This is also mandatory for H-Bridge devices.<code>0</code> = phases are automatically aligned one after the other, <code>1</code> = phases all start at the same time (default behavior for ESP8266). SetOption135 Disables Display Splash screen (for all drivers, universal &amp; LVGL)<code>1</code> = Splash screen disabled, <code>0</code> = Splash screen displayed SetOption136 <code>1</code> = Disable single sensor reports from Tuya devices while keeping teleperiod reports<code>0</code> = Publish an immediate <code>tele/%topic%/SENSOR</code> TuyaSNS message at each reception of individual value (default) SetOption137 <code>1</code> = following Tuya responses will not be forwarded to MQTT when SetOption66 is enabled\u00a0\u00a0- heartbeat every 10 seconds, <code>TUYA_CMD_HEARTBEAT</code>\u00a0\u00a0- the WiFi state during start-up and Wi-Fi events, <code>TUYA_CMD_WIFI_STATE</code>\u00a0\u00a0- the local time info query of the MCU every minute, <code>TUYA_CMD_SET_TIME</code>\u00a0\u00a0- the received update package info from MCU during firmware update of Tuya MCU, <code>TUYA_CMD_UPGRADE_PACKAGE</code> SetOption138 Align GUI energy multicolumn layout in webUI<code>0</code> = left/center (default)<code>1</code> = right SetOption139 When <code>SetOption24 1</code> switch pressure unit to:<code>0</code> = mmHg (default)<code>1</code> = inHg SetOption140 <code>0</code> = open clean MQTT session (default)<code>1</code> = open persistent MQTT session SetOption141 <code>1</code> = disable display of model name in webUI header SetOption142 <code>1</code> = wait 1 second for WiFi connection solving some FRITZ!Box modem issues SetOption143 <code>1</code> = disables ZigBee auto-probing and configure back attribute reporting SetOption144 <code>1</code> = include a timestamp in <code>ZbReceived</code> messages SetOption146 <code>1</code> = enable display of ESP32 internal temperature SetOption147 <code>1</code> = disable publish of SSerialReceived/IrReceived MQTT messages, you must use event trigger rules instead SetOption148 <code>1</code> = enable autorun of ArtNet mode at start. If for any reason listening to UDP port fails, this mode is disabled SetOption149 <code>1</code> = DNS try to resolved the address as IPv6 first and IPv4 if none is found. Default behavior is to look for IPv4 address first. See IPv6 SetOption150 <code>1</code> = Force no voltage/frequency common in Energy driver (to be detailed) SetOption151 <code>1</code> = Matter support enabled, <code>0</code> = Matter support disabled which frees so memory SetOption152 <code>1</code> = Switch between two (0) or one (1) pin bistable relay control (Power, to be detailed) SetOption153 <code>1</code> = Disable running (Berry) autoexec.be on restart SetOption154 <code>1</code> = Handle Berry led using RMT0 as additional WS2812 scheme SetOption155 <code>1</code> = (ZCDimmer) Enable rare falling Edge dimmer instead of leading edge SetOption156 <code>1</code> = (Sen5x) Run in passive mode when there is another I2C master SetOption157 <code>0</code> = hide NeoPool sensitive data (default)<code>1</code> = show NeoPool sensitive data SetOption158 <code>0</code> = Disable publish ModbusReceived MQTT messages (<code>1</code>), in this case you must use event trigger rules instead SetOption159 Set counting for Counter on falling edge or rising and falling edge<code>0</code> = Counter only reacts on falling edge (default)<code>1</code> = Counter reacts on falling and rising edge SetOption160 <code>1</code> = Disable generate moving event by sensor report - use LD2410 out pin for events SetOption161 Disable display of state text SetOption162 Do not add export energy to energy today SetOption163 Disable display of GUI device name SetOption164 Enable WiZ Smart Remote support SetOption165 Allow TLS ECDSA certificates<code>0</code> = allow only RSA certificates<code>1</code> = allow both RSA and ECDSA certificatesBecause letsencrypt nod defaults to ECDSA certificates, in case of TLS error 296 (unsupported cipher), <code>SetOption165 1</code> is automatically enabled."},{"location":"Commands/#tuyamcu","title":"TuyaMCU","text":"Command Parameters TuyaEnum&lt;x&gt; Send value to an Enum (fnId 61, 62, 63 and 64) where<code>&lt;x&gt;</code> = number of Enum <code>&lt;value&gt;</code> = must be from a range set in <code>TuyaEnumList</code> TuyaEnumList Declare the range an Enum (fnId 61, 62, 63 and 64) must respect (0 is always the first item in range)<code>&lt;enum&gt;,&lt;range&gt;</code> = <code>&lt;enum&gt;</code> is <code>Enum&lt;x&gt;</code> declared using TuyaMCU and <code>&lt;range&gt;</code> can be <code>0..31</code>Without payload returns the configuration of all the Enums TuyaMCU Used to map functions in TuyaMCU <code>&lt;fnId&gt;,&lt;dpId&gt;</code> = read more...<code>&lt;fnId&gt;,0</code> = remove setting for fnId TuyaRGB Set correct format of color reporting by tuyaMCU <code>0</code> - Type 1, 12 characters uppercase. Example: <code>00DF00DC0244</code> (default)<code>1</code> - Type 1, 12 characters lowercase. Example: <code>008003e8037a</code><code>2</code> - Type 2, 14 characters uppercase. Example: <code>00FF00FFFF6464</code><code>3</code> - Type 2, 14 characters lowercase. Example: <code>00e420ffff6464</code> TuyaSend&lt;x&gt; Send data to MCU with TuyaMCUx = <code>0..4,8</code><code>TuyaSend0</code> = send a query command to the MCU<code>TuyaSend1 &lt;dpId&gt;,&lt;boolean&gt;</code> = send boolean (<code>0</code>/<code>1</code>) data type to dpId (1 byte max length)<code>TuyaSend2 &lt;dpId&gt;,&lt;int&gt;</code> = send integer data to dpId (4 bytes max length)<code>TuyaSend2 &lt;dpId&gt;,&lt;0xAABBCCDD&gt;</code> = send 4 byte data to dpId (4 bytes max length)<code>TuyaSend3 &lt;dpId&gt;,&lt;value&gt;</code> = send an ASCII string to dpId (unknown max length)<code>TuyaSend4 &lt;dpId&gt;,&lt;enum&gt;</code> = send enumerated (<code>0</code>/<code>1</code>/<code>2</code>/<code>3</code>/<code>4</code>/<code>5</code>) data type to dpId (1 byte max length)<code>TuyaSend5 &lt;dpId&gt;,&lt;value&gt;</code> = send an HEX string to dpId - <code>0x</code> prefix NOT needed - (unknown max length)<code>TuyaSend6 &lt;dpId&gt;,&lt;value&gt;</code> = send an HEX raw value to dpId - <code>0x</code> prefix NOT needed, but will be processed correctly - (unknown max length)<code>TuyaSend8</code> = request dpId states if supported TuyaTempSetRes Set resolution only for Tuya Set Temperature sensor (fnId 72). <code>0..3</code> = maximum number of decimals shown See also <code>SetOption8</code> - change temperature display unit<code>SetOption66</code> - publish TuyaReceived output to MQTT<code>DimmerRange</code> - to adjust dimmer rangeTempRes - set number of decimals shown for temperature sensors"},{"location":"Commands/#serial-bridge","title":"Serial Bridge","text":"<p>Hardware Serial Bridge uses <code>GPIO1 (Tx)</code> and <code>GPIO3 (Rx)</code> or <code>GPIO15 (Tx)</code> and <code>GPIO13 (Rx)</code> pins of your device. Software Serial Bridge can use any other GPIO to be configured as components <code>Serial Tx</code> and <code>Serial Rx</code> (or <code>SerBr Tx</code> and <code>SerBr Rx</code>). If <code>Tx</code> and <code>Rx</code> components are not assigned in the Template or Module, <code>GPIO1</code> and <code>GPIO3</code> will be used. Note that changing serial logging (<code>SerialLog</code> 0) will disable the hardware Serial Bridge.</p> <p>Information received by Tasmota over the serial bridge is captured automatically. Before data will be received, a properly formatted <code>SerialSend&lt;x&gt;</code> or <code>SSerialSend&lt;x&gt;</code> command must be executed. This must be done any time the device restarts (e.g., via a <code>System#Boot</code> triggered rule). This command is required in order to set how the expected serial data will be formatted and interpreted (i.e., which  option). A <code>{\"SSerialReceived\":{\"Data\":\"&lt;string&gt;\"}}</code> message will be posted. You can use a rule to process the string which will be contained in <code>SSerialReceived#Data</code>. <p>Hardware Serial Buffer can be configured by <code>SerialBuffer</code>command, software serial buffer is fixed to 256 bytes long.</p> <p>You could activate <code>SetOption147</code> to disable publishing <code>SSerialReceived</code> MQTT messages. If disabled, you must use event trigger rules instead (<code>SSerialReceived#Data=&lt;string&gt;</code>) to control what, when and how is being published to your MQTT broker or whatever you want.</p> <p>Expect possible communication errors when additional sensors are configured.</p> Command Parameters Baudrate <code>1</code> = set hardware serial bridge to default baud rate of 115200 bps<code>&lt;value&gt;</code> = set baud rate. The set rate will be a multiple of 300. The maximum baud rate possible is 19,660,500. SBaudrate <code>1</code> = set software serial bridge to default baud rate of 9600 bps<code>&lt;value&gt;</code> = set baud rate. The set rate will be a multiple of 300. The maximum baud rate possible is 19,660,500. SerialBuffer <code>256..520</code> = set the serial buffer size. This option will not be persisted, use a rule with a trigger like <code>Power1#Boot</code> when you want this to survive a reboot. Sometimes, serial buffer overruns can be mitigated by setting this to a large value such as <code>520</code>. SSerialBuffer <code>256..SERIAL_BRIDGE_BUFFER_SIZE</code> = set the serial bridge buffer size. This option will not be persisted, use a rule with a trigger like <code>Power1#Boot</code> when you want this to survive a reboot SerialConfig <code>value</code> = set serial protocol using data/parity/stop conventional notation (example: <code>8N1</code> or <code>702</code>)<code>0..23</code> = set serial protocol (<code>3</code> equals <code>8N1</code>) SerialDelimiter <code>&lt;value&gt;</code> = set serial delimiter to escape character code or ASCII character<code>1..127</code> = set serial delimiter to decimal ASCII<code>128</code> = only allow ASCII characters 32 to 127 in response text<code>254</code> = disable serial delimiter &amp; post HEX string<code>129..253</code> or <code>255</code> = disable serial delimiter (default = 255) SerialSend&lt;x&gt; <code>&lt;string&gt;</code>Disable serial logging and send using hardware serialx = <code>1..5</code><code>1</code> = send appending <code>\\n</code> (newline) ()<code>2</code> = send<code>3</code> = replace escape characters and send <code>4</code> = send as binary. Data in serial response messages is encoded as binary strings <code>5</code> = send as hex. Data in serial response messages is encoded as hex strings<code>6</code> = send as comma-delimited string of decimal numbers SSerialConfig <code>value</code> = set serial protocol using data/parity/stop conventional notation (example: <code>8N1</code> or <code>702</code>)<code>0..23</code> = set serial protocol (<code>3</code> equals <code>8N1</code>) SSerialSend&lt;x&gt; <code>&lt;string&gt;</code>Send using software serial protocolx = <code>1..5</code><code>1</code> = send appending <code>\\n</code> (newline) ()<code>2</code> = send<code>3</code> = replace escape characters and send <code>4</code> = send as binary data. Data in serial response messages is encoded as binary strings<code>5</code> = send as hex. Data in serial response messages is encoded as hex strings<code>6</code> = send as comma-delimited string of decimal numbers<code>9</code> = enable Serial Bridge console Tee for debugging purposes (payload <code>1</code> to enable) See also <code>SetOption147</code> - To enable/disable MQTT publish of incoming SSerialReceived messages."},{"location":"Commands/#rf-bridge","title":"RF Bridge","text":"Command Parameters RfCode Show last sent 24-bit user code<code>1..8388607</code> = send 24-bit user code<code>#1..#7FFFFF</code> = send 24-bit hexadecimal user code using RfSync, RfLow and RfHigh timing RfHigh <code>1</code> = reset high pulse time to 840 microseconds<code>2..32767</code> = set high pulse time in microseconds<code>#2..#7FFF</code> = set high pulse time in hexadecimal microseconds RfHost Show 16-bit host part of user code<code>1</code> = reset 16-bit host part of user code to 11802 (#2E1A)<code>2..32767</code> = set 16-bit host part of user code<code>#2..7FFF</code> = set 16-bit host part of user code in hexadecimal RfKey&lt;x&gt; Send learned or default RF data for RfKey&lt;x&gt; (x = <code>1 \u2013 16</code>)<code>1</code> = send default RF data for RfKey&lt;x&gt; using RfSync, RfLow, RfHigh and RfHost parameters<code>2</code> = learn RF data for RfKey&lt;x&gt;<code>3</code> = unlearn RF data for RfKey&lt;x&gt;<code>4</code> = save RF data using RfSync, RfLow, RfHigh and last RfCode parameters<code>5</code> = show default or learned RF data<code>6</code> = send learned RF data RfLow <code>1</code> = reset low pulse time to 270 microseconds<code>2..32767</code> = set low pulse time in microseconds<code>#2..#7FFF</code> = set low pulse time in hexadecimal microseconds RfRaw This command only works when the firmware has been updated with Portisch firmware. Refer to the Portisch wiki for details.Learning and Decoding RF Codes with Portisch Firmware<code>0</code> = Set iTead default firmware support and messages (default on restart) <code>1</code> = set Portisch firmware support and messages <code>166</code> or <code>AAA655</code> = start sniffing/reading RF signals disabling iTead default RF handling <code>167</code> or <code>AAA755</code> = stop sniffing/reading RF signals enabling iTead default RF handling <code>168</code> or <code>AAA855</code> = transmitting iTead default RF protocols <code>169</code> or <code>AAA955</code> = start sniffing and learning predefined protocols <code>176</code> or <code>AAB055</code> = bucket Transmitting using command 0xB0 <code>177</code> or <code>AAB155</code> = start Bucket sniffing using command 0xB1 <code>192</code> or <code>AAC000C055</code> = beep (<code>00C0</code> is the length of the sound) <code>255</code> or <code>AAFF55</code> = show Rf firmware version (result AA02FF means Version 02) <code>&lt;value&gt;</code> = hexadecimal data to be sent to RF chip. This must be immediately followed by the <code>RfRaw 0</code> command (e.g., <code>Backlog RfRaw &lt;value&gt;; RfRaw 0</code> RfSync <code>1</code> = reset start sync pulse time to 8470 microseconds<code>2..32767</code> = set start sync pulse time in microseconds<code>#2..#7FFF</code> = set start sync pulse time in hexadecimal microseconds RfTimeOut change timeout in <code>RfReceive</code> <code>100..60000</code> = disable duplicate RfReceive (default = <code>1000</code>) See also <code>SetOption28</code> - Set RF received data format"},{"location":"Commands/#rf-transceiver","title":"RF Transceiver","text":"Command Parameters RfSend <code>&lt;value&gt;</code> = code decimal or JSON. Data value is required and can be decimal or hexadecimal (using the 0x prefix), other values are optional.JSON<code>{\"Data\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Protocol\":&lt;value&gt;,\"Pulse\":&lt;value&gt;}</code><code>\"Data\":\"&lt;value&gt;\"</code> = hexadecimal code<code>\"Bits\":&lt;value&gt;</code> = required number of data bits (default = <code>24</code>)<code>\"Protocol\":&lt;value&gt;</code> = protocol number (default = <code>1</code>)<code>\"Repeat\":&lt;value&gt;</code> = repeat value (default = <code>10</code>)<code>\"Pulse\":&lt;value&gt;</code> = pulse value (<code>350</code> = default for protocol 1)\u2003e.g., <code>RfSend {\"Data\":\"0x7028DC\",\"Bits\":24,\"Protocol\":1,\"Pulse\":238}</code>Decimal<code>data, bits, protocol, repeat, pulse</code> \u2003e.g., <code>RfSend 7350492, 24, 1, 10, 238</code> or <code>RfSend 0x7028DC, 24, 1, 10, 238</code>"},{"location":"Commands/#ir-remote","title":"IR Remote","text":"<p>The standard Tasmota builds have reduced support for IR protocols: <code>RC5</code>, <code>RC6</code> and <code>NEC</code>. Use Tasmota-IR to have access to full protocols.</p> <p>See Codes for IR Remotes.</p> Command Parameters IRSend<code>&lt;x&gt;</code> Send an IR remote control code as a decimal or hexadecimal string in a JSON payload. In order to send IR data, you must configure at least one of the free device GPIOs as <code>IRSend (8)</code>. GPIO01 nor GPIO03 can be used.<code>&lt;x&gt;</code> [optional] = number of times the IR message is sent. If not specified or <code>0..1</code>, the message is sent only once (i.e., not repeated) (default)<code>&gt;1</code> = emulate a long-press on the remote control, sending the message <code>&lt;x&gt;</code> times, or sending a repeat message for specific protocols (like NEC)<code>{\"Protocol\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Data\":&lt;value&gt;, \"Channel\":&lt;value&gt;}</code><code>\"Protocol\"</code> (select one of the following):<ul><li><code>\"NEC\"</code></li><li><code>\"RC5\"</code></li><li><code>\"RC6\"</code></li></ul><code>\"Bits\":1..32</code> = required number of data bits\u00a0\u00a0\u00a0\u00a0for PANASONIC protocol this parameter is the the address, not the number of bits<code>\"Data\":1..(2^32)-1</code> = data frame as 32 bit decimal.\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":2170978686}</code>or<code>\"Data\":0x1..0xFFFFFFFF</code> = data frame as 32 bit hexadecimal.\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x8166817E}</code><code>\"Channel\":1..16</code> = IRSend GPIO to be used to send the message.Alternatively, you can send IR remote control codes using RAW command encoding.Read more... <p>Tasmota-IR enabled with all protocols</p> Command Parameters IRSend<code>&lt;x&gt;</code> <code>&lt;x&gt;</code> [optional] = number of times the IR message is sent. If not specified or <code>0..1</code>, the message is sent only once (i.e., not repeated) (default)<code>&gt;1</code> = emulate a long-press on the remote control, sending the message <code>&lt;x&gt;</code> times, or sending a repeat message for specific protocols (like NEC)<code>{\"Protocol\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Data\":&lt;value&gt;,\"DataLSB\":&lt;value&gt;,\"Repeat\":&lt;value&gt;}</code><code>\"Protocol\"</code> or <code>\"Vendor\"</code> (select one of the following): <code>RC5, RC6, NEC, SONY, PANASONIC, JVC, SAMSUNG, WHYNTER, AIWA_RC_T501, LG, MITSUBISHI, DISH, SHARP, DENON, SHERWOOD, RCMM, SANYO_LC7461, RC5X, NEC (non-strict), NIKAI, MAGIQUEST, LASERTAG, CARRIER_AC, MITSUBISHI2, HITACHI_AC1, HITACHI_AC2, GICABLE, LUTRON, PIONEER, LG2, SAMSUNG36, LEGOPF, INAX, DAIKIN152</code><code>\"Bits\":1..64</code> = required number of data bits\u00a0\u00a0\u00a0\u00a0for PANASONIC protocol this parameter is the the address, not the number of bits<code>\"Data\":0x1..0xFFFFFFFFFFFFFFFF</code> = data frame as 64 bit hexadecimal.\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x8166817E}</code>Or<code>\"DataLSB\":0x1..0xFFFFFFFFFFFFFFFF</code> = data frame as 64 bit hexadecimal with LSB (each byte with bits reversed).\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x8166817E}</code><code>DataLSB</code> comes handy with LSB-first (Least Significant Bit First) protocols like NEC, and makes decoding/encoding easier.<code>\"Repeat\":0..&lt;x&gt;</code> if <code>0</code> send the frame once, if <code>&gt;0</code> simulates a long press; Note: <code>\"Repeat\":1</code> sends the message twice.Alternatively, you can send IR remote control codes using RAW command encoding. See also <code>SetOption29</code>  - Set IR received data format<code>SetOption38</code>  - Set IR received protocol sensitivity<code>SetOption44</code> - Set IR incoming base tolerance<code>SetOption58</code> - IR Raw data in JSON payload<code>SetOption147</code> - To enable/disable MQTT publish of incoming IrReceived messages. IRHVAC Send HVAC IR remote control code as JSON payload<code>IRHVAC {\"Vendor\":\"Mitsubishi_Heavy_152\", \"Power\":\"On\",\"Mode\":\"Hot\",\"FanSpeed\":3,\"Temp\":22.5}</code><code>\"Protocol\"</code> or <code>\"Vendor\"</code> (select one of the following): <code>COOLIX, DAIKIN, KELVINATOR, MITSUBISHI_AC, GREE, ARGO, TROTEC, TOSHIBA_AC, FUJITSU_AC, MIDEA, HAIER_AC, HITACHI_AC, HAIER_AC_YRW02, WHIRLPOOL_AC, SAMSUNG_AC, ELECTRA_AC, PANASONIC_AC, DAIKIN2, VESTEL_AC, TECO, TCL112AC, MITSUBISHI_HEAVY_88, MITSUBISHI_HEAVY_152, DAIKIN216, SHARP_AC, GOODWEATHER, DAIKIN160, NEOCLIMA, DAIKIN176, DAIKIN128</code><code>\"Model\":</code> Some HVAC have variants in protocols, this field allows to specify the variant, see detailed list.<ul><li><code>Fujitsu_AC</code>: <code>ARRAH2E|ARDB1</code></li><li><code>Panasonic_AC</code>: <code>LKE|NKE|DKE|JKE|CKP|RKR</code></li><li><code>Whirlpool_AC</code>: <code>DG11J13A|DG11J104|DG11J1-04|DG11J191</code></li></ul><code>\"Power\"</code>:<ul><li><code>On, Yes, True, 1</code></li><li><code>Off, No, False, 0</code></li></ul><code>\"Mode\"</code>:<ul><li><code>Off, Stop</code></li><li><code>Auto, Automatic</code></li><li><code>Cool, Cooling</code></li><li><code>Heat, Heating</code></li><li><code>Dry, Drying, Dehumidify</code></li><li><code>Fan, Fanonly, Fan_Only</code></li></ul><code>\"FanSpeed\"</code>:<ul><li><code>Auto, Automatic</code></li><li><code>Min, Minimum, Lowest, 1</code></li><li><code>Low, 2</code></li><li><code>Med, Medium, Mid, 3</code></li><li><code>High, Hi, 4</code></li><li><code>Max, Maximum, Highest, 5</code></li></ul><code>\"SwingV\"</code>: vertical swing of Fan<ul><li><code>Auto, Automatic, On, Swing</code></li><li><code>Off, Stop</code></li><li><code>Min, Minimum, Lowest, Bottom, Down</code></li><li><code>Low</code></li><li><code>Mid, Middle, Med, Medium, Centre, Center</code></li><li><code>High, Hi</code></li><li><code>Highest, Max, Maximum, Top, Up</code></li></ul><code>\"SwingH\"</code>: horizontal swing of Fan<ul><li><code>Auto, Automatic, On, Swing</code></li><li><code>Off, Stop</code></li><li><code>LeftMax, Left Max, MaxLeft, Max Left, FarLeft, Far Left</code></li><li><code>Left</code></li><li><code>Mid, Middle, Med, Medium, Centre, Center</code></li><li><code>Right</code></li><li><code>RightMax, Right Max, MaxRight, Max Right, FarRight, Far Right</code></li><li><code>Wide</code></li></ul><code>\"Celsius\"</code>: temperature is in Celsius (<code>\"On\"</code>) or Fahrenheit (<code>\"Off\"</code>)<code>\"Temp\"</code>: Temperature, can be float if supported by protocol<code>\"Quiet\"</code>: Quiet mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Turbo\"</code>: Turbo mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Econo\"</code>: Econo mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Light\"</code>: Light (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Filter\"</code>: Filter active (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Clean\"</code>: Clean mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Beep\"</code>: Beep active (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Sleep\"</code>: Timer in seconds<code>\"StateMode\"</code>:<ul><li><code>SendOnly</code> (default)</li><li><code>StoreOnly</code></li><li><code>SendStore</code></li></ul> See also <code>SetOption29</code>  - Set IR received data format<code>SetOption38</code>  - Set IR received protocol sensitivity<code>SetOption44</code> - Set IR incoming base tolerance<code>SetOption58</code> - IR Raw data in JSON payload"},{"location":"Commands/#displays","title":"Displays","text":"Command Parameters Display Show current display setting as a JSON payload DisplayAddress <code>0..255</code> Set display module address DisplayDimmer <code>0</code> = Turn the display off<code>1..100</code> = Set display luminosity (only on 8x8 Dot-Matrix displays)<code>13..100</code> maps to <code>1..7</code> levels of brightness for TM1637, TM1638 and MAX7219 or TM1650 seven-segment display modules DisplayInvert <code>1</code> - Invert display where implemented. More info... DisplayMode <code>0..5</code> Set to display predefined content according to display type<code>0..3</code> for TM1637, TM1638 and MAX7219 or TM1650 seven-segment display modules DisplayModel Set display model:<code>1</code> = I<sup>2</sup>C LCD Display (default addresses <code>0x27</code>, <code>0x3F</code>)<code>2</code> = SSD1306 OLED 128x32/128x64/68x48 (default I<sup>2</sup>C addresses <code>0x3C</code>, <code>0x3D</code>)<code>3</code> = HT16K33 8x8 Dot-Matrix<code>4</code> = ILI9341 TFT LCD<code>5</code> = 2.9 inch E-Paper Display 296x128 (software 3-wire SPI)<code>6</code> = 4.2 inch E-Paper Display 400x300 (software 3-wire SPI)<code>7</code> = SH1106 OLED 128x64 (default I<sup>2</sup>C address <code>0x3c</code>)<code>8</code> = ILI9488 TFT 480x320 (capacitive touch, hardware 3-wire SPI)<code>9</code> = SSD1351 color OLED 128x128 (hardware 3-wire SPI)<code>10</code> = RA8867 TFT LCD 1024x600 (capacitive touch, hardware 4-wire SPI)<code>15</code> = TM1637 7-segment, 4-,6- and 8-digit displays (TM1637, TM1638 and MAX7219 or TM1650), hardware 2- and 3-wire I2C-like interface<code>16</code> = LilyGO T5-4.7 E-Paper display board<code>17</code> = Universal Display Driver powered displays <code>18</code> = Interface to virtual display driver with Berry<code>19</code> = MAX7219 Dot Matrix<code>20</code> =  TM1650 7-segment 4-digit displays, I<sup>2</sup>C DisplayRefresh <code>1..7</code> Set time in seconds to update predefined content when using <code>DisplayMode</code> \u2260 <code>0</code> DisplaySize <code>1..4</code> Set display scale-up size (SSD1306  and ILI9341 only) DisplayRotate Set rotation angle <code>0</code> = 0\u00b0 <code>1</code> = 90\u00b0 <code>2</code> = 180\u00b0 <code>3</code> = 270\u00b0 DisplayText <code>&lt;value&gt;</code> = See DisplayText useFor TM1637, TM1638 and MAX7219 or TM1650, see below DisplayText(TM1637, TM1638 and MAX7219 or TM1650) <code>text</code>[, <code>position</code>[, <code>length</code>]] Clears and then displays basic text on the 7-segment display.  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> ,  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most)   A caret(<code>^</code>) symbol in the text input is displayed as the degrees(<code>\u00b0</code>) symbol. This is useful for displaying Temperature (or angle)! See TM163x or TM1650 for details. DisplayTextNC(TM1637, TM1638 and MAX7219 or TM1650) <code>text</code>[, <code>position</code>[, <code>length</code>]] Clears first, then displays text. Usage is same as above. See TM163x or TM1650 for details. DisplayType Select display sub-modules. More info...For usage of this command with TM163x or TM1650, see TM163x or TM1650 for details. DisplayCols <code>1..44</code> Set number of display columns (for display modes&gt;0) DisplayRows  <code>1..32</code> Set number of display rows (for display modes&gt;0) DisplayFont Specify the current font<code>0</code> use classic GFX font<code>1</code> = 12<code>2</code> = 24<code>3</code> = 8 (opt)<code>7</code> use RA8876 internal font DisplayWidth Specify the display width in pixels (SSD1306 only) -or-Specify number of digits in TM163x seven-segment display module DisplayHeight Specify the display height in pixels (SSD1306 only) DisplayClear(TM1637, TM1638 and MAX7219 or TM1650) Clears the display. See TM163x or TM1650 for details. DisplayNumber (TM1637, TM1638 and MAX7219 or TM1650) <code>num</code> [, <code>position</code>[, <code>leading_zeros</code>[, <code>length</code>]]] Clears and then displays number <code>num</code> without decimal. <code>leading zeros</code> can be <code>1</code> or <code>0</code> (default), <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6),  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS</code> (right-most). See TM163x or TM1650 for details. DisplayNumberNC (TM1637, TM1638 and MAX7219 or TM1650) <code>num</code> [, <code>position</code>[, <code>leading_zeros</code>[, <code>length</code>]]] Display integer number as above, but without clearing first. Usage is same as above. See TM163x or TM1650 for details. DisplayFloat (TM1637, TM1638 and MAX7219 or TM1650) <code>num</code>[, <code>position</code>[, <code>precision</code>[, <code>length</code>[, <code>alignment</code>]]]] Clears and then displays float (with decimal point). <code>precision</code> can be <code>0</code> to <code>NUM_DIGITS</code> (default),  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6),  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS</code> (right-most). <code>alignment</code> can be 0 for left and 1 for right (0 is default)See TM163x or TM1650 for details. DisplayFloatNC (TM1637, TM1638 and MAX7219 or TM1650) <code>num</code>[, <code>position</code>[, <code>precision</code>[, <code>length</code>[, <code>alignment</code>]]]] Displays float (with decimal point) as above, but without clearing first. Usage same as above. See TM163x or TM1650 for details. DisplayRaw (TM1637, TM1638 and MAX7219 or TM1650) <code>position</code>, <code>length</code>,  <code>num1</code> [, <code>num2</code>[, <code>num3</code>[, <code>num4</code>[, ...upto <code>NUM_DIGITS</code> numbers]]...] Takes upto <code>NUM_DIGITS</code> comma-separated integers (0-255) and displays raw segments.  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6),  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS</code> (right-most). <code>num1</code>, <code>num2</code>, ...  are numbers representing a 7-segment digit. Each number represents all segments of one digit.  Segment a=1, b=2, c=4, d=8, e=16, f=32, g=64 and h (decimal point)=128. To turn on all segments, the number would be 1+2+4+8+16+32+64+128 = 255. See TM163x or TM1650 for details. DisplayScrollText(TM1637, TM1638 and MAX7219 or TM1650) <code>text</code> [, <code>num_iterations</code>] Displays scrolling text, upto 50 characters. If <code>num_iterations</code> is not specified, it scrolls indefinitely, until another Display- command is issued. Optionally, specifying <code>num_iterations</code> causes the scrolling to stop after the specified number of iterations.See TM163x or TM1650 for details. DisplayScrollDelay(TM1637, TM1638 and MAX7219 or TM1650) <code>0..15</code> Sets the speed of text scroll. Smaller delay implies faster scrolling.  See TM163x or TM1650 for details. DisplayLevel(TM1637, TM1638 and MAX7219 or TM1650) <code>0..100</code> Display a horizontal bar graph. See TM163x or TM1650 for details. DisplayClock(TM1637, TM1638 and MAX7219 or TM1650) Displays a clock.  <code>1</code> = displays a clock in 12-hour format.  <code>2</code> = displays a clock in 24-hour format.  <code>0</code> = turns off the clock and clears the display  See TM163x or TM1650 for details."},{"location":"Commands/#shutters","title":"Shutters","text":"Command Parameters ESP8266:(x = <code>0..4</code>), ESP32(x = <code>0..16</code>) (0=set value to all defined shutters) ShutterMode <code>1..7</code> (default = <code>1</code>)Defines the mode the shutter will operates the relays, steppers and/or servos. 6=autodetect based on INTERLOCK and GPIO defined. STATUS 13 show the mode.<code>1</code> = normal two relay up/off down/off<code>2</code> = two relay on/off up/down. Must be set manually<code>3</code> = one relay garage mode<code>4</code> = one relay plus stepper motor<code>5</code> = one relay and position servo<code>6</code> = one relay and PWM servo speed controlled by PWM. Position time based<code>7</code> = autodetect (once) based on existance of GPIO definition. ShutterButton&lt;x&gt; <code>&lt;button&gt; &lt;func&gt; &lt;mqtt&gt;</code>Assign a button to control the shutter. For more details please refer to Blinds and Shutters support. Here you can define exact positions (and tilt positions ;ESP32 only) on the events single/double/tripple press<code>&lt;button&gt;</code> <code>0</code>: disable buttons for this shutter\u2003ESP8266:<code>1..4</code>, ESP32:<code>1..32</code>: Button number<code>&lt;func&gt;</code> <code>up</code>/<code>down</code>/<code>updown</code>/<code>toggle</code>: function to assign to the button<code>&lt;mqtt&gt;</code> <code>1</code>/<code>0</code>: enable/disable MQTT publish for button hold actionFor example:<li>To control shutter #1 by two buttons: <code>Backlog ShutterButton1 1 up 1; ShutterButton1 2 down 1</code> assigns button #1 to act as an \"up\" button (1x press open, 2x press 50% position, 3x press 74% position) and button #2 to act as a \"down\" button (1x press close, 2x press 50% position, 3x press 24% position) for shutter #1 including MQTT publish.</li><li>To control shutter #1 by a single button: <code>ShutterButton1 1 updown 0</code> assigns button #1 to act as an \"up and down\" button (1x press up, 2x press down).</li><li>To control shutter #1 by a single button: <code>ShutterButton1 1 toggle 0</code> assigns button #1 to act as a \"toggle\" button (1x press toggle, 2x press 50% position).</li> ShutterCalibration&lt;x&gt; Granular shutter position calibration. The measured opening position of the shutter at the 30, 50, 70, 90, and 100 percent opened locations. For example: <code>ShutterCalibration&lt;x&gt; 23 38 56 74 82</code> ShutterChange&lt;x&gt; <code>-100..100</code> Moves the shutter from the current position relatively in %. If the resulting position is below 0 or above 100 it will be capped. Command can also be executed during movement and will change the target position. ShutterCloseDuration&lt;x&gt; <code>1.0 ..240.0</code> (default = <code>10.0</code>)time, in seconds, it takes to fully close the shutter. A fraction of a second can be specified (e.g. <code>45.7</code>). ShutterClose&lt;x&gt; Engage the relay to close the shutter. This action can be requested at any time. Number of shutter can be the index or the argument ShutterFrequency&lt;x&gt; <code>0..10,000</code>Hz (default = <code>1000</code>)the maximum frequency at which the stepper motor can operate reliably. Typically this is up to 2,000Hz with a 12V power supply and up to 5,000Hz with a 24V power supply. ShutterEnableEndStopTime&lt;x&gt; <code>0</code> = no additional shutter end stop time (default)<code>1</code> = 1 s additional shutter end stop time ShutterInvert&lt;x&gt; <code>0</code> = use default shutter positioning (<code>0</code> = Closed, <code>100</code> = Open)<code>1</code> = invert shutter positioning (<code>100</code> = Closed, <code>0</code> = Open) (e.g., if used with KNX) ShutterInvertWebButtons&lt;x&gt; <code>0</code> = use default button icons (\u25b2 for open, \u25bc for close)<code>1</code> = invert button icons (\u25bc for open, \u25b2 for close) (e.g., if used with horizontal awning: where open means rolling-down fabric material and close rolling-up in a protect position) ShutterLock&lt;x&gt; <code>0</code> = unlock shutter positioning (default)<code>1</code> = lock shutter positioning ShutterMotorDelay&lt;x&gt; <code>-12.75 .. 12.75</code> (default = <code>0</code>)time, in seconds, it takes the motor to start moving once power is turned on; i.e., motor lag time. You can use negative numbers if your motor stops to late after power OFFWhen used with stepper motors, this setting defines the  ramp up/down speed (i.e., acceleration/deceleration) before the motor reaches its target speed for gradual starting and stopping. In this case only positive numbers are allowed. ShutterMotorStop <code>0 .. 64000</code> (default = <code>500</code>)time in milliseconds, one relay must be off before the other one can start. This control the OFF time on TOGGLE and POSITION change commands that require a TOGGLE. Also in GarageMode this sets the wait time between two commands. Equal for all shutters. ShutterOpenDuration&lt;x&gt; <code>1.0 ..240.0</code> (default = <code>10.0</code>)time, in seconds, it takes to fully open the shutter. A fraction of a second can be specified (e.g. <code>45.7</code>). ShutterOpen&lt;x&gt; Engage the relay to open the shutter. This action can be requested at any time. Number of shutter can be index or the argument ShutterPosition&lt;x&gt; <code>0..100</code> <code>,-90..90</code>, <code>UP</code>, <code>OPEN</code>, <code>DOWN</code>, <code>CLOSE</code>, <code>STOP</code>, <code>TOGGLE</code>, <code>TOGGLEDIR</code>, <code>STOPOPEN</code>, <code>STOPCLOSE</code>,A shutter position change can be requested at any time. The shutter will stop and revert or update to the requested position. The shutter's actual position will be saved after the movement is completed. In this case, the position will be restored during reboot. An interruption during shutter movement (e.g., a device restart) will lose the current position. Optional the position can be enhances with the position of the tilt. This only works with numerical positions. The seperator is a comma <code>,</code>. ShutterPWMRange&lt;x&gt; <code>0..1023,0..1023</code>For servo motors the min and max position is defined by the length of the duty cycle signal. Because every servo is different the min and max PWM value must be set for each servo type. The value is also dependant on the <code>PWMfrequency</code>. Servos normally use <code>50..200</code> as <code>PWMfrequency</code>. ShutterRelay&lt;x&gt; <code>&lt;value&gt;</code><code>0</code> = disable this and all higher numbered shutters<code>Relay&lt;value&gt;</code> component used to open the shutter. This relay's mate, the next higher numbered relay, closes the shutter. Depending on the shutter mode, the relays may need to be interlocked using the <code>Interlock</code> command.The <code>ShutterRelay</code> command must be executed first before any other shutter commands for <code>Shutter&lt;x&gt;</code> can be executed. ShutterSetClose&lt;x&gt; shutter closed position. <code>ShutterPosition</code> will be reset to fully closed value (e.g., <code>0</code> when <code>ShutterInvert = 0</code>, <code>100</code> otherwise). This does not work with Servos. min and max of servos are always defined through <code>ShutterPWMRange</code>. ShutterSetOpen&lt;x&gt; shutter opened position. <code>ShutterPosition</code> will be reset to fully opened value (e.g., <code>100</code> when <code>ShutterInvert = 0</code>, <code>0</code> otherwise). This does not work with Servos. min and max of servos are always defined through <code>ShutterPWMRange</code>. ShutterSetHalfway&lt;x&gt; <code>0..100</code> (default = <code>50</code>)Define shutter half open position (in percent) ShutterStop&lt;x&gt; Disengage the relays to stop the shutter. Number of shutter can be the index or the argument ShutterStopClose&lt;x&gt; Stop the shutter when currently moving, close it otherwise ShutterStopOpen&lt;x&gt; Stop the shutter when currently moving, open it otherwise ShutterStopPosition&lt;x&gt; Stop the shutter when currently moving, set it to position <code>0..100</code>, <code>UP</code>, <code>DOWN</code>, <code>STOP</code>, <code>TOGGLE</code> otherwise ShutterStopRelay&lt;x&gt; <code>0</code> = only for pulse relay the STOP will be send on the last triggered relay (default)<code>1</code> = STOP will be send to a THIRD relay (e.g. RELAY3) ShutterStopToggle&lt;x&gt; Stop the shutter when currently moving, do <code>ShutterToggle</code> otherwise ShutterStopToggleDir&lt;x&gt; Stop the shutter when currently moving, do <code>ShutterToggleDir</code> otherwise ShutterToggle&lt;x&gt; Toggle the shutter - close the shutter when its position is &gt;50, open it otherwise ShutterToggleDir&lt;x&gt; Toggle the shutter - close the shutter when it previously moved to open, open it otherwise ShutterTiltConfig&lt;x&gt; <code>&lt;min&gt; &lt;max&gt; &lt;Tiltduration&gt; &lt;openposition&gt; &lt;closeposition&gt;</code> (default = <code>0 0 0 0 0</code>)Configure the tilt for venetian blinds. Min/man values must be in the range of -90\u00b0 to 90\u00b0. Open and Close position must be part of the defined range between min and max. Tiltduration defines the time the shutter needs to change the tilt from min to max value. This time has to been multiplied by 20. E.g. 1.2sec = 1.2 x 20 = 24. Example defines tilt on shutter 2: <code>shuttertiltconfig2 -90 90 24 0 90</code> ShutterTilt&lt;x&gt; Set the tilt position <code>&lt;value&gt;</code> (between min and max), <code>OPEN</code>, <code>CLOSE</code>. Definition please see <code>shuttertiltconfig</code> ShutterTiltChange&lt;x&gt; <code>-100..100</code> Moves the shuttertilt from the current position relatively in %. If the resulting tilt is below min or above max it will be capped. Command can also be executed during movement and will change the tilt at target position. See also <code>SetOption80</code> - Enable shutter support"},{"location":"Commands/#zigbee","title":"Zigbee","text":"<p>See Zigbee article for more information</p> Command Parameters <code>&lt;device&gt;</code> As <code>&lt;device&gt;</code> in following commands you can use interchangeably:<code>&lt;shortaddr&gt;</code> = short address of the Zigbee device on the network, example: <code>0x1234</code><code>&lt;longaddr&gt;</code> = permanent IEEE address of the Zigbee device (64 bits), example: <code>0x00158D00041160C5</code><code>&lt;index&gt;</code> = number of the device in the internal list (starts at 1), ideal for enumerating devices, example: <code>3</code> for third device in the list<code>&lt;name&gt;</code> = friendly name. Only when previously set with <code>ZbName</code> ZbBind Binds one Zigbee device to another device or to a group. This allows one device to directly send commands (e.g., a remote to a bulb) without any action on the coordinator.Command structure: <code>{\"Device\":\"&lt;device&gt;\", \"Endpoint\":&lt;endpoint&gt;, \"Cluster\":&lt;cluster&gt;, \"ToDevice\":\"&lt;to_device&gt;\", \"ToEndpoint\":&lt;to_endpoint&gt;, \"ToGroup\":&lt;to_group&gt; }</code><code>&lt;device&gt;</code> = device sending messages (mandatory)<code>&lt;endpoint&gt;</code> = source endpoint (mandatory)<code>&lt;cluster&gt;</code> = source cluster id (mandatory)<code>&lt;to_device&gt;</code> = target device (optional)<code>&lt;to_endpoint&gt;</code> = target endpoint\u2003(optional if it can be inferred from <code>ZbStatus3</code>)<code>&lt;to_group&gt;</code> = target group id (optional) You must specify either <code>\"ToDevice\"</code> or <code>\"ToGroup\"</code> but not both Zigbee2Tasmota must know the IEEE address of target device, see <code>ZbStatus2</code> to verify and <code>ZbProbe</code> to have Zigbee2Tasmota query the address(EZSP ZBBridge only) If you bind devices to groups you should also use ZbListen to that group, otherwise MQTT messages will not be published ZbBindState Asks the device for its internal binding states<code>&lt;device&gt;</code> the device to query<code>&lt;n&gt;</code> the start index for the request, <code>1</code> is the default. This is used to scan through all bindings. ZbCIE Configure on the ZigBee device the CIE address using the IEEE address of the ZigBee Bridge. The ZigBee Bridge will act as the CIE device for the ZigBee Network. See IAS Cluster in the ZigBee specification for more information.<code>Usage: ZbCIE &lt;device&gt;,&lt;endpoint&gt;</code><code>&lt;device&gt;</code> is the ZigBee device to configure<code>&lt;endpoint&gt;</code> is the endpoint in the ZigBee device where the IAS Cluster is.<code>Example: ZbCIE 1,44</code> ZbEnroll Enroll the the ZigBee device to the ZigBee Bridge for reporting security sensors data, panels, etc. The ZigBee Bridge will act as the CIE device for the ZigBee Network.<code>Usage: ZbEnroll &lt;device&gt;,&lt;endpoint&gt;</code><code>&lt;device&gt;</code> is the ZigBee device to configure<code>&lt;endpoint&gt;</code> is the endpoint in the ZigBee device where the IAS Cluster is.<code>Example: ZbEnroll 1,44</code> ZbConfig display the current Zigbee configurationExample or result: <code>{\"ZbConfig\":{\"Channel\":11,\"PanID\":\"0x1A63\",\"ExtPanID\":\"0xCCCCCCCCCCCCCCCC\",\"KeyL\":\"0x0F0D0B0907050301\",\"KeyH\":\"0x0D0C0A0806040200\"}}</code> ZbConfig &lt;json&gt; change the configuration and restart if any change was applied. Warning: change in configuration causes a reset of the CC2530/ZBBridge and requires devices to be re-paired.<code>\"Channel\":&lt;channel&gt;</code>: Zigbee radio channel (11-26)<code>\"PanID\":&lt;panid&gt;</code>: identifier of the Zigbee Network<code>\"ExtPanID\":&lt;extpanid&gt;</code>: unique identifier of the Zigbee Network (ExtPanID features are not supported in Z2T but this parameter needs to be set)<code>\"KeyL\":&lt;key_l&gt;,\"KeyH\":&lt;key_h&gt;</code>: 128 bits encryption key, split into 2 64 bits values (Low and High)<code>\"TXRadio\":&lt;txradio&gt;</code>: radio power in dBm (1-20) only for ZBBridgeAll parameters are optional and only the ones specified are changed. The command always displays the complete configuration after the changeExample of command: <code>ZbConfig {\"Channel\":22,\"PanID\":\"0x1A69\",\"ExtPanID\":\"0xDDCCCCCCCCCCCCCC\",\"KeyL\":\"0xFF0D0B0907050301\",\"KeyH\":\"0xED0C0A0806040200\"}</code>The following command creates a highly secure Network key based on a hardware random generator:<code>ZbConfig {\"KeyL\":\"\",\"KeyH\":\"\"}</code> ZbData feature in development ZbDeviceTopicSetOption89 Configure MQTT topic for Zigbee devices (also see <code>SensorRetain</code>)<code>0</code> = single <code>tele/%topic%/SENSOR</code> topic (default) <code>1</code> = unique device topic based on Zigbee device ShortAddrExample: <code>tele/Zigbee/5ADF/SENSOR = {\"ZbReceived\":{\"0x5ADF\":{\"Dimmer\":254,\"Endpoint\":1,\"LinkQuality\":70}}}</code> ZbEndpointSuffixSetOption101 Add Zigbee source endpoint as suffix to attributes<code>0</code> = disable (default) <code>1</code> = enablee.g. <code>Power3</code> instead of <code>Power</code> if sent from endpoint <code>3</code>. ZbEndpointTopicSetOption120 Add the Zigbee endpoint as suffix in topic when using <code>SetOption89 1</code><code>0</code> = disable (default)<code>1</code> = enable ZbForget Used for devices that are unused but still visible in <code>ZbStatus</code><code>&lt;device&gt;</code> = Remove a device from the Tasmota flash memory. It does not un-pair the device nor deleting the device information in the CC2530/ZBBridge. ZbLight Sets or reads the light type to be emulated in Zigbee Hue Emulation with Alexa.<code>&lt;device&gt;,&lt;light_type&gt;</code> sets the light type using an integer <code>0..5</code> corresponding to the number of channels (from one channel (on/off) to 5 channel (RGBCCT) lights)<code>&lt;device&gt;,&lt;light_type&gt;,&lt;ep&gt;</code> sets the light type of a specific endpoint of a device. This is useful for a device (eg. a multi-gang switch) that has multiple endpoints.<code>&lt;device&gt;,-1</code> removes the device from Philips Hue emulation<code>&lt;device&gt;</code> displays the current status of the Light (Zigbee2Tasmota tracks all changes to the light) ZbListen (EZSP ZBBridge only)Listens to a multicast group address. By default EZSP will not report group messages unless you subscribe to the group.<code>&lt;x&gt;</code>: slot in the array of group addresses, 1..15<code>&lt;group&gt;</code>: group address to listen to, 0..0xFFFFAt start-up, Z2T automatically listens to group 0 in slot 0.CC2530 does not need this command and always report all group messages. ZbLeave <code>&lt;device&gt;</code> = request a device to leave the network.If the device is offline or sleeping, this will have no effect. It is not 100% guaranteed that the device will never connect again ZbLoad <code>&lt;file&gt;.zb</code> = load Zigbee definition file ZbLoadDump <code>&lt;file&gt;.zb</code> = dump Zigbee definition file contents to console ZbInfo <code>&lt;device&gt;</code> = display all information known about a device, equivalent to <code>ZbStatus3</code> with a simpler JSON output ZbMap Asks the device for its view of the Zigbee topology<code>&lt;device&gt;</code> the device to query<code>&lt;n&gt;</code> the start index for the request, <code>1</code> is the default. This is used to scan through all values since devices usually return only 3 values per request. ZbName Sets or reads the Zigbee device friendly name (up to 32 characters).<code>&lt;device&gt;,&lt;name&gt;</code> sets the new friendly name<code>&lt;device&gt;,&lt;friendlyname&gt;,&lt;ep&gt;</code> sets a friendly name (up to 32 characters) on a specific endpoint of a device.<code>&lt;device&gt;,</code> (empty name) clears the friendly name of a device<code>&lt;device&gt;,,&lt;ep&gt;</code> (empty name) clears the friendly name of the specified endpoint<code>&lt;device&gt;</code> displays the current friendly nameAlso see <code>SetOption83 1</code> to enable friendly names as JSON keys instead of ShortAddr. ZbNameKeySetOption83 Uses Zigbee device friendly name instead of 16 bits short addresses as JSON key when reporting values and commands<code>0</code> = JSON key as short address<code>1</code> = JSON key as friendly nameSee <code>ZbName &lt;device&gt;,&lt;name&gt;</code> ZbNameTopicSetOption112 <code>0</code> = (default)<code>1</code> = use friendly name in Zigbee topic (use with <code>ZbDeviceTopic</code>) ZbNoAutoBindSetOption110 <code>0</code> = (default)<code>1</code> = disable Zigbee auto-binding and auto-attribute reporting when pairing a new device. Use only if you want to manually configure devices ZbNoAutoQuerySetOption116 Zigbee Auto-query of lights and devices shortly after a light command is sent.<code>1</code> = disableDelay is 200ms for On/Off, 1050ms (1s) for lights levels, 10s for shutters. ZbNoPrefixSetOption100 remove Zigbee <code>ZbReceived</code> value from <code>{\"ZbReceived\":{xxx:yyy}}</code> JSON message<code>0</code> = disable (default) <code>1</code> = enable ZbOccupancy Configure the time-out after <code>\"Occupancy\":1</code> to send a synthetic <code>\"Occupancy\":0</code> for Zigbee motion sensors<code>&lt;device&gt;,&lt;x&gt;</code> - set occupancy timeout for <code>&lt;device&gt;</code>Possible values for <code>&lt;x&gt;</code><code>0</code>: no time-out, the device actually generates \"Occupancy\":0<code>n</code>: the number of seconds. The possible values are 15, 30, 45, 60, 75, 90, 105, 120. If the number is different, it is rounded up<code>-1</code>: apply the default of 90 seconds ZbOmitDeviceSetOption119 Remove device addr from JSON payload<code>0</code> = disable (default)<code>1</code> = enable ZbPermitJoin Sets pairing mode for new device discovery<code>0</code> = disable pairing mode<code>1</code> = enable pairing mode for 60 seconds<code>99</code> = enable pairing until device reboots (CC2530 only) Leaving Zigbee network open to join will allow any Zigbee device to connect and retrieve your network encryption key. This can lead to a compromise of your Zigbee network. ZbPing <code>&lt;device&gt;</code> = test availability of Zigbee device. If the device is connected and not sleeping, you should receive a <code>ZbPing</code> message within the next second.Example: <code>ZbPing 0x5ADF</code> responds with: <code>{\"ZbPing\":{\"Device\":\"0x5ADF\",\"IEEEAddr\":\"0x90FD9FFFFE03B051\"}}</code> ZbReceivedTopicSetOption118 Move ZbReceived from JSON message into the subtopic replacing \"SENSOR\" default<code>0</code> = disable (default)<code>1</code> = enable ZbSend Command structure: <code>{\"Device\":\"&lt;shortaddr&gt;\", \"Endpoint\":\"&lt;endpoint&gt;\", \"Manuf\":&lt;manuf&gt;, \"Send\":{\"&lt;sendcmd&gt;\":&lt;sendparam&gt;}}</code><code>&lt;shortaddr&gt;</code> = short address of the Zigbee device on the network<code>&lt;endpoint&gt;</code> = target endpoint on the device (understanding endpoints)<code>&lt;manuf&gt;</code> = (optional) forces a specific ManufacturerId in the ZCL frame (required by some Xiaomi devices)<code>\"&lt;sendcmd&gt;\":&lt;sendparam&gt;</code> = command and parameters to send (Zigbee Device Commands) _Use <code>ZbZNPSend</code> to send a raw form low-level message on CC253x gateways _Example: <code>ZbSend { \"Device\":\"0x1234\", \"Endpoint\":\"0x03\", \"Send\":{\"Power\":\"on\"} }</code> ZbScan Do an energy scan on each radio channel ZbStatus&lt;x&gt; Display Zigbee devices seen on the network since boot<code>&lt;device&gt;</code> (optional)<code></code> = all devicesThis command provides three levels of increasing detail according to <code>&lt;x&gt;</code><code>ZbStatus1</code> Display Short Address, and Friendly Name<code>ZbStatus2</code> Also include Manufacturer ID and Model ID<code>ZbStatus3</code> Also include a list of endpoints and the clusterIds supported by each endpointExample: <code>ZbStatus3 1</code> requests all details for device number 1 Requested information may exceed maximum result size allowed by Tasmota. In this case, the output will be truncated. To get all of the desired information, request results for a specific device individually. ZbUnbind Unbinds one Zigbee device from another or from a group. <code>{\"Device\":\"&lt;device&gt;\", \"Endpoint\":&lt;endpoint&gt;, \"Cluster\":&lt;cluster&gt;, \"ToDevice\":\"&lt;to_device&gt;\", \"ToEndpoint\":&lt;to_endpoint&gt;, \"ToGroup\":&lt;to_group&gt; }</code><code>&lt;device&gt;</code> = the device sending the messages (mandatory)<code>&lt;endpoint&gt;</code> = the source endpoint (mandatory)<code>&lt;cluster&gt;</code> = the source cluster id (mandatory)<code>&lt;to_device&gt;</code> = the target device (optional)<code>&lt;to_endpoint&gt;</code> = the target endpoint (optional if it can be inferred from <code>ZbStatus3</code>)<code>&lt;to_group&gt;</code> = the target group id (optional) You must specify either <code>\"ToDevice\"</code> or <code>\"ToGroup\"</code> but not both Zigbee2Tasmota must know the IEEE address of the target device, use <code>ZbStatus2</code> to verify and <code>ZbProbe</code> to query the address. ZbUnload <code>&lt;file&gt;.zb</code> = unload Zigbee definition file See also <code>SetOption83</code>, <code>SetOption89</code>, <code>SetOption100</code>, <code>SetOption101</code>"},{"location":"Commands/#zigbee-debug-functions","title":"Zigbee Debug Functions","text":"<p> Do not use unless you know exactly what you are doing. </p> Command Parameters ZbModelId Manually force the <code>ModelId</code> field of a Zigbee device. This is used to simulate devices not physically present on the network, for debugging only.<code>&lt;device&gt;,&lt;modelid&gt;</code> = set new ModelId<code>&lt;device&gt;,</code> = (empty ModelId) clear ModelId<code>&lt;device&gt;</code> = display current ModelId (also displayed in <code>ZbStatus2</code>) ZbProbe <code>&lt;device&gt;</code>= probe a Zigbee device to get additional information including its IEEEaddress, vendor and model names, endpoints, and supported clusters per endpoint.Device probe is performed automatically when a new Zigbee device connects.Battery powered Zigbee devices can not be probed in general because they are usually in sleep mode. ZbRead Removed in favor of <code>ZbSend</code> with \"Read\" attribute. ZbReset <code>1</code> = perform a factory reset and reconfiguration of the CC2530 chip. You will need to re-pair all Zigbee devices ZbRestore Restores a device configuration previously dumped with <code>ZbStatus2</code>. This command does not pair a device, but lets you get back device configuration like ModelId or IEEEAddress.<code>&lt;json&gt;</code> = json contains the fields dumped with <code>ZbStatus2</code>. <code>&lt;json&gt;</code> can contain multiple devices (if they fit). ZbSave  Forces saving the Zigbee device information to Flash. Auto-saving happens 10 seconds after a new Device parameter was changed, this command is normally not useful ZbZNPSend  (CC2530 only) Send a raw ZCL message to a Zigbee device. This is a low-level command, and requires to manually build the ZCL parameters. Most common usage will be provided as high-level functions. ZbZNPReceive  (CC2530 only) Simulates a received message<code>&lt;hex&gt;</code> = hex string of the simulated message, same format as <code>ZbZNPReceived</code> debug logs ZbEZSPSend (EZSP only) Send a raw EZSP message. This is a low-level command, and requires to manually build the ZCL parameters. Most common usage will be provided as high-level functions.<code>&lt;x&gt;</code>: <code>1</code>=high-level EZSP command, <code>2</code>=low-level EZSP frame, <code>3</code>=low-level EZSP/ASH frame<code>&lt;hex&gt;</code> = hex string of the message ZbEZSPReceive (EZSP only) Simulates a received message<code>&lt;x&gt;</code>: <code>1</code>=high-level EZSP command, <code>2</code>=low-level EZSP frame, <code>3</code>=low-level EZSP/ASH frame<code>&lt;hex&gt;</code> = hex string of the simulated message, same format as <code>ZbZNPReceived</code> debug logs"},{"location":"Commands/#bluetooth","title":"Bluetooth","text":"Command Parameters HM10Scan Start a new device discovery scan HM10Period Show interval in seconds between sensor read cycles. Set to TelePeriod value at boot. HM10Baud Show ESP8266 serial interface baudrate (Not HM-10 baudrate)<code>&lt;value&gt;</code> = set baudrate HM10AT <code>&lt;command&gt;</code> = send AT commands to HM-10. See list HM10Time  <code>&lt;n&gt;</code> = set time time of a LYWSD02 only sensor to Tasmota UTC time and time zone. <code>&lt;n&gt;</code> is the sensor number in order of discovery starting with 0 (topmost sensor in the webUI list). HM10Auto  <code>&lt;value&gt;</code> = start an automatic discovery scan with an interval of  <code>&lt;value&gt;</code> seconds to receive data in BLE advertisements periodically.This is an active scan and it should be used only if necessary. At the moment that is the case just with MJ_HT_V1. This can change if a future HM-10 firmware starts supporting passive scan. NRFBeacon Set a BLE device as a beacon using the (fixed) MAC-address<code>&lt;value&gt;</code> (1-3 digits) = use beacon from scan list<code>&lt;value&gt;</code> (12 characters) = use beacon given the MAC interpreted as an uppercase string <code>AABBCCDDEEFF</code> NRFIgnore <code>0</code> = all known sensor types active_(default)_<code>&lt;value&gt;</code> =  ignore certain sensor type (<code>1</code> = Flora, <code>2</code> = MJ_HT_V1, <code>3</code> = LYWSD02, <code>4</code> = LYWSD03, <code>5</code> = CGG1, <code>6</code> = CGD1 NRFKey Set a \"bind_key\" for a MAC-address to decrypt (LYWSD03MMC &amp; MHO-C401). The argument is a 44 uppercase characters long string, which is the concatenation of the bind_key and the corresponding MAC.<code>&lt;00112233445566778899AABBCCDDEEFF&gt;</code> (32 characters) = bind_key<code>&lt;112233445566&gt;</code> (12 characters) = MAC of the sensor<code>&lt;00112233445566778899AABBCCDDEEFF112233445566&gt;</code> (44 characters)= final string NRFMjyd2s Set a \"bind_key\" for a MAC-address to decrypt sensor data of the MJYD2S. The argument is a 44 characters long string, which is the concatenation of the bind_key and the corresponding MAC.<code>&lt;00112233445566778899AABBCCDDEEFF&gt;</code> (32 characters) = bind_key<code>&lt;112233445566&gt;</code> (12 characters) = MAC of the sensor<code>&lt;00112233445566778899AABBCCDDEEFF112233445566&gt;</code> (44 characters)= final string NRFNlight Set the MAC of an NLIGHT<code>&lt;value&gt;</code> (12 characters) =  MAC interpreted as an uppercase string <code>AABBCCDDEEFF</code> NRFPage Show the maximum number of sensors shown per page in the webUI list.<code>&lt;value&gt;</code> = set number of sensors (default = 4) NRFScan Scan for regular BLE-advertisements and show a list in the console<code>0</code> = start a new scan list<code>1</code> = append to the scan list<code>2</code> = stop running scan"},{"location":"Commands/#stepper-motors","title":"Stepper Motors","text":"Command Parameters MotorMIS <code>1,2,4,8,16</code> Set micro stepping increment - 1/1 (full steps) to 1/16 (default = <code>1</code>) MotorSPR <code>integer</code> Set the number of steps the given motor needs for one revolution (default = <code>200</code>)This is dependent on the type of motor and micro stepping. Most common motors are 1.8\u00b0 per step. MotorRPM <code>1..300</code> Set revolutions per minute (default = <code>30</code>) MotorMove <code>integer</code> Move the motor the given number of steps (positive values: clockwise, negative values: counterclockwise) MotorRotate <code>integer</code> Rotate the motor the given number of degrees (positive values: clockwise, negative values: counterclockwise) MotorTurn <code>float</code> Spin the motor the given number of turns (positive values: clockwise, negative values: counterclockwise)"},{"location":"Commands/#mp3-player","title":"MP3 Player","text":"<p>The MP3 Player driver is based on the one from DFRobot. They named it DFPlayer mini. All MP3 Players with the identical Serial Control Command structure can be used.</p> <p>Note</p> <p>Player module pin RX should be connected to a GPIO defined as \"MP3 Player\" from the drop-down list. The driver uses a Software Serial and do not requires usage of hardware TX/RX pins.</p> Command Parameters MP3DAC <code>0</code> = DAC on (default)<code>1</code> = DAC off MP3Device Specify playback device<code>1</code> = USB<code>2</code> = SD Card (default (also defaults on reset or power cycle)) MP3EQ Set equalizer mode:<code>0</code> = normal<code>1</code> = pop<code>2</code> = rock<code>3</code> = jazz<code>4</code> = classic<code>5</code> = bass) MP3Pause Pause MP3Play Play, works as a normal play on a real MP3 Player, starts at first MP3 file MP3Reset Reset the MP3 player to defaults MP3Stop Stop MP3Track <code>x</code> = play track &lt;x&gt; MP3Volume <code>0..100</code> = set Volume"},{"location":"Commands/#thermostat","title":"Thermostat","text":"Command Parameters ThermostatModeSet&lt;x&gt; Sets the thermostat mode <code>0</code> = Thermostat Off (controller inactive, default) <code>1</code> = Thermostat in automatic mode (controller active) <code>2</code> = Thermostat in manual mode (output switch follows the input switch, used to follow an existing wall thermostat) ClimateModeSet&lt;x&gt; Sets the climate mode <code>0</code> = Heating mode (default) <code>1</code> = Cooling mode ControllerModeSet&lt;x&gt; Sets the controller mode (used for thermostat in automatic mode) <code>0</code> = Hybrid controller (Predictive ramp-up controller and PI, default) <code>1</code> = PI controller <code>2</code> = Predictive ramp-up controller TempFrostProtectSet&lt;x&gt; Sets the frost protection temperature. The controller, if in automatic mode, will never allow the temperature to sink below this value <code>&lt;0..12&gt;</code> = Temperature value in degrees Celsius/Fahrenheit (default 4.0\u00b0 Celsius)  InputSwitchSet&lt;x&gt; Sets the number of the input used in case in manual control <code>&lt;1..4&gt;</code> = Number of the input (default 1) InputSwitchUse&lt;x&gt; Switch to decide if the input shall be used to automatically switch to manual mode and assign it to the output (useful if using a serially connected wall thermostat) <code>0</code> = Input not used (default) <code>1</code> = Input used SensorInputSet&lt;x&gt; Sets the temperature sensor to be used <code>0</code> = MQTT (default) <code>1</code> = Local sensor (can be changed by define, default DS18B20) OutputRelaySet&lt;x&gt; Sets the output switch to be used for the thermostat <code>&lt;1..8&gt;</code> = Number of the output (default 1) EnableOutputSet&lt;x&gt; Enables or disables the physical output <code>0</code> = Output disabled <code>1</code> = Output enabled (default) TimeAllowRampupSet&lt;x&gt; Sets the minimum time in minutes since the last control action to be able to switch to the predictive ramp-up controller phase (applicable just in case of Hybrid controller, used normally in case of big deltas between the setpoint and the room temperature) <code>&lt;value&gt;</code> = Minutes (default 300 minutes)  TempFormatSet&lt;x&gt; Sets the temperature format <code>0</code> = Degrees Celsius (default) <code>1</code> = Degrees Fahrenheit TempMeasuredSet&lt;x&gt; Sets the temperature measured by the sensor (for MQTT sensor mode) <code>&lt;TempFrostProtectSet..100&gt;</code> = Temperature (default 18.0\u00b0 Celsius)  TempTargetSet&lt;x&gt; Sets the target temperature for the controller (setpoint) <code>&lt;TempFrostProtectSet..100&gt;</code> = Temperature (default 18.0\u00b0 Celsius)  TempMeasuredGrdRead&lt;x&gt; Returns the calculated temperature gradient <code>&lt;value&gt;</code> = Temperature gradient in degrees Celsius/Fahrenheit  StateEmergencySet&lt;x&gt; Sets the thermostat emergency flag <code>0</code> = Emergency flag off (default) <code>1</code> = Emergency flag on (thermostat switches to off state) TimeManualToAutoSet&lt;x&gt; Sets the time in manual mode after the last active input  action (e.g., last action from serial connected wall thermostat) to switch to automatic mode <code>0..1440</code> = time in minutes (default 60 minutes) PropBandSet&lt;x&gt; Sets the value of the proportional band of the PI controller <code>0..20</code> = value in degrees Celsius (default 4 degrees Celsius) TimeResetSet&lt;x&gt; Sets the value of the reset time of the PI controller <code>0..86400</code> = value in seconds (default 12000 seconds) TimePiProportRead&lt;x&gt; Returns the proportional part of the PI controller calculation in seconds <code>value</code> = value in seconds TimePiIntegrRead&lt;x&gt; Returns the integral part of the PI controller calculation in seconds <code>value</code> = value in seconds TimePiCycleSet&lt;x&gt; Sets the value of the cycle for the PI controller <code>0..1440</code> = value in minutes (default 30 minutes) TempAntiWindupResetSet&lt;x&gt; Sets the value of the delta between controlled temperature and setpoint above which the integral part of the PI controller will be set to 0, in degrees Celsius/Fahrenheit <code>0..10</code> = value in degrees (default 0.8\u00b0 Celsius) TempHystSet&lt;x&gt; Sets the value of the temperature hysteresis for the PI controller, in degrees Celsius/Fahrenheit <code>-10..10</code> = value in degrees (default 0.1\u00b0 Celsius) TimeMaxActionSet&lt;x&gt; Sets the maximum duty cycle of the PI controller in minutes <code>0..1440</code> = value in minutes (default 20 minutes) TimeMinActionSet&lt;x&gt; Sets the minimum duty cycle of the PI controller in minutes <code>0..1440</code> = value in minutes (default 4 minutes) TimeSensLostSet&lt;x&gt; Sets the maximum time without a temperature sensor update to mark it as lost in minutes <code>0..1440</code> = value in minutes (default 30 minutes) TimeMinTurnoffActionSet&lt;x&gt; Sets the minimum time in minutes within a cycle for the PI controller to switch off the output, below it, it will stay on <code>0..1440</code> = value in minutes (default 3 minutes) TempRupDeltInSet&lt;x&gt; Sets the minimum delta between controlled temperature and setpoint for the controller to switch to ramp-up controller phase (applicable just in Hybrid controller mode) <code>0..10</code> = value in degrees Celsius/Fahrenheit (default 0.4\u00b0 Celsius) TempRupDeltOutSet&lt;x&gt; Sets the maximum delta between controlled temperature and setpoint for the controller to switch to the PI controller phase (applicable just in Hybrid controller mode) <code>0..10</code> = value in degrees Celsius/Fahrenheit (default 0.2\u00b0 Celsius) TimeRampupMaxSet&lt;x&gt; Sets the maximum time in minutes for the controller to stay in the ramp-up phase (applicable just in Hybrid controller mode <code>0..1440</code> = value in minutes (default 960 minutes) TimeRampupCycleSet&lt;x&gt; Sets the value of the cycle for the ramp-up controller <code>0..1440</code> = value in minutes (default 30 minutes) TempRampupPiAccErrSet&lt;x&gt; Sets the initial accumulated error when switching from ramp-up to the PI controller phase if the target temperature has not been reached (applicable just in Hybrid controller mode) <code>0..25</code> = value in degrees Celsius/Fahrenheit (default 2\u00b0 Celsius) CtrDutyCycleRead&lt;x&gt; Returns the duty cycle of the controller <code>0..100</code> = value in % DiagnosticModeSet&lt;x&gt; Enables/disables the diagnostics flag <code>0</code> = Diagnostics disabled <code>1</code> = Diagnostics enabled (default)"},{"location":"Commands/#domoticz","title":"Domoticz","text":"Command Parameters DzIdx&lt;x&gt; Show Domoticz Relay idx &lt;x&gt; (x = <code>1..4</code>)<code>0</code> = disable use of Relay idx &lt;x&gt; (default)<code>&lt;value&gt;</code> = Show Relay idx &lt;x&gt; DzKeyIdx&lt;x&gt; Show Domoticz Key idx &lt;x&gt; (x = <code>1..4</code>)<code>0</code> = disable use of Key idx &lt;x&gt; (default)<code>&lt;value&gt;</code> = Show Key idx &lt;x&gt; (to use enable ButtonTopic) DzSend&lt;type&gt; send values or state to Domoticz<code>&lt;index&gt;,&lt;value1(;value2)|state&gt;</code> DzSensorIdx&lt;x&gt; Show Domoticz Sensor idx &lt;x&gt; (x = <code>1..5</code>)<code>0</code> = disable use of Sensor idx &lt;x&gt; (default)<code>&lt;value&gt;</code> = Show Sensor idx &lt;x&gt; DzSwitchIdx&lt;x&gt; Show Domoticz Switch idx &lt;x&gt; (x = <code>1..4</code>)<code>0</code> = disable use of Switch idx &lt;x&gt; (default)<code>&lt;value&gt;</code> = Show Switch idx &lt;x&gt; (to use enable SwitchTopic) DzUpdateTimer Show current update timer value in seconds<code>0</code> = disable sending interim Domoticz status (default)<code>1..3600</code> = send status to Domoticz in defined intervals See also Domoticz"},{"location":"Commands/#influxdb","title":"InfluxDB","text":"Command Parameters Ifx InfluxDB state<code>0</code> = off <code>1</code> = on IfxHost <code>hostname</code> or <code>ip.address</code> =  set Influxdb host name or IP address (default to http access)<code>https://hostname</code> or <code>https://ip.address</code> = set https access (requires to set <code>IfxPort 443</code>) IfxPort <code>&lt;value&gt;</code> =  set Influxdb port (default to 8086).For <code>https</code>, port must be set to 443. IfxDatabase <code>&lt;value&gt;</code> =  set Influxdb V1 and database name IfxUser <code>&lt;value&gt;</code> =  set Influxdb V1 and userid IfxPassword <code>&lt;value&gt;</code> =  set Influxdb V1 and password IfxBucket <code>&lt;value&gt;</code> =  set Influxdb V2 and bucket name IfxOrg <code>&lt;value&gt;</code> =  set Influxdb V2 and organization IfxSensor Set Influxdb sensor logging <code>0</code> =  off<code>1</code> =  on IfxToken <code>&lt;value&gt;</code> =  set Influxdb V2 and token IfxPeriod <code>&lt;value&gt;</code>= <code>0</code> = use <code>Teleperiod</code> value as publication interval (default)<code>10</code>..<code>3600</code> = set a different publication intervalEven when <code>IfxPeriod 0</code> is used, publication is not necessarily performed at the same time as the telemetry message. IfxRP <code>&lt;value&gt;</code> = set Influxdb retention policy (optional) If blank, default is used as defined by the InfluxDB service. Retention policy must exist in InfluxDB, otherwise http post will fail."},{"location":"Commands/#knx","title":"KNX","text":"Command Parameters KnxTx_Cmnd&lt;x&gt; <code>0</code> or <code>1</code> = send 1 bit command using slot &lt;x&gt; set in KNX Menu at KNX_TX KnxTx_Double&lt;x&gt; <code>&lt;value&gt;</code> = send 32 bits float value (DPT 14) using slot &lt;x&gt; set in KNX Menu at KNX_TX KnxTx_Val&lt;x&gt; <code>&lt;value&gt;</code> = Alias for KnxTx_Double, send 32 float value (DPT 14) using slot &lt;x&gt; set in KNX Menu at KNX_TX KnxTx_Float&lt;x&gt; <code>&lt;value&gt;</code> = send 16 bits float value (DPT 9) using slot &lt;x&gt; set in KNX Menu at KNX_TX KnxTx_Byte&lt;x&gt; <code>&lt;value&gt;</code> = send 8 bits unsigned integer value (DPT 5) using slot &lt;x&gt; set in KNX Menu at KNX_TX KnxTx_Scene <code>&lt;value&gt;</code> = send scene number to the GA set in KNX Menu Knx_Enabled Status of KNX Communications<code>0</code> = set to Disable<code>1</code> = set to Enable Knx_Enhanced Status of Enhanced mode for KNX Communications<code>0</code> = set to Disable<code>1</code> = set to Enable Knx_PA KNX Physical Address<code>0.0.0</code> = address not set<code>x.x.x</code> = set the device address (example <code>1.1.0</code>) Knx_GA Return the amount of Group Address to Send Data/Commands configured Knx_GA&lt;x&gt; Setup Group Address to Send Data/Commands (&lt;x&gt; = KNX Group Address number)<code>1</code> = return configuration of GA&lt;x&gt;<code>&lt;option&gt;, &lt;area&gt;, &lt;line&gt;, &lt;member&gt;</code> to set configuration of GA&lt;x&gt; <code>&lt;option&gt;</code> = see table below for OPTION list <code>&lt;area&gt;, &lt;line&gt;, &lt;member&gt;</code> = KNX Address to Send Data/Commands Knx_CB Return the amount of Group Address to Receive Data/Commands configured Knx_CB&lt;x&gt; Setup Group Address to Receive Data/Commands <code>1</code> = return configuration of CB&lt;x&gt;<code>&lt;option&gt;, &lt;area&gt;, &lt;line&gt;, &lt;member&gt;</code> to set configuration of CB&lt;x&gt; <code>&lt;option&gt;</code> = see table below for OPTION list <code>&lt;area&gt;, &lt;line&gt;, &lt;member&gt;</code> = KNX Address to Receive Data/Commands OPTION OPTIONValue OPTION OPTIONValue 1 Relay 1 17 TEMPERATURE 2 Relay 2 18 HUMIDITY 3 Relay 3 19 ENERGY_VOLTAGE 4 Relay 4 20 ENERGY_CURRENT 5 Relay 5 21 ENERGY_POWER 6 Relay 6 22 ENERGY_POWERFACTOR 7 Relay 7 23 ENERGY_DAILY 8 Relay 8 24 ENERGY_START 9 Button 1 25 ENERGY_TOTAL 10 Button 2 26 KNX_SLOT1 11 Button 3 27 KNX_SLOT2 12 Button 4 28 KNX_SLOT3 13 Button 5 29 KNX_SLOT4 14 Button 6 30 KNX_SLOT5 15 Button 7 255 EMPTY 16 Button 8"},{"location":"Commands/#range-extender","title":"Range Extender","text":"Command Parameters RgxClients List range extender clients RgxPort <code>tcp|udp, gateway_port, client_mac, client_port</code> =  range extender port forwarding"},{"location":"Commands/#neopool","title":"NeoPool","text":"<p>See Sugar Valley NeoPool Controller for more information.</p> Command Parameters NPFiltration <code>&lt;state&gt;( &lt;speed&gt;)</code>Set manual filtration (state = <code>0</code> or <code>1</code>, speed = <code>1..3</code>):<ul><li><code>0</code> - manual turn filtration pump off</li><li><code>1</code> - manual turn filtration pump on</li></ul>Optional set filtration <code>&lt;speed&gt;</code> (only available if filtration speed control is configured):<ul><li><code>1</code> - slow</li><li><code>2</code> - medium</li><li><code>3</code> - fast</li></ul> NPFiltrationmode <code>&lt;mode&gt;</code>Set filtration mode (mode = <code>0..4</code> or <code>13</code>):<ul><li><code>0</code> - MANUALallows to turn the filtration (and all other systems that depend on it) on and off</li><li><code>1</code> - AUTOallows filtering to be turned on and off according to the settings of the MBF_PAR_TIMER_BLOCK_FILT_INT timers.</li><li><code>2</code> - HEATINGsimilar to the AUTO mode, but includes setting the temperature for the heating function. This mode is activated only if the BF_PAR_HEATING_MODE register is at 1 and there is a heating relay assigned.</li><li><code>3</code> - SMARTadjusts the pump operating times depending on the temperature. This mode is activated only if the MBF_PAR_TEMPERATURE_ACTIVE register is at 1.</li><li><code>4</code> - INTELLIGENTperforms an intelligent filtration process in combination with the heating function. This mode is activated only if the MBF_PAR_HEATING_MODE register is at 1 and there is a heating relay assigned.</li><li><code>13</code> - BACKWASHstarted when the backwash operation is activated. NPFiltrationspeed <code>&lt;speed&gt;</code>Set manual filtration speed (speed = <code>1..3</code>):<ul><li><code>1</code> - Low</li><li><code>2</code> - Mid</li><li><code>3</code> - High</li></ul>Note: The command is only available if filtration speed control is configured. NPBoost <code>&lt;mode&gt;</code>Set hydrolysis/electrolysis boost mode (mode = <code>0..2</code> or <code>OFF</code>, <code>ON</code>, <code>REDOX</code>):<ul><li><code>0</code> or <code>OFF</code> - Boost offdisables the boost mode</li><li><code>1</code> or <code>ON</code> - Boost onenables the boost mode independent of the redox value</li><li><code>2</code> or <code>REDOX</code> - Boost on with Redox controlsimilar to ON, but with consideration of the current redox settings.</li></ul>Note: The boost function always switches the filtering on. NPTime <code>&lt;time&gt;</code>Set device time:<ul><li><code>0</code> - sync with Tasmota local time</li><li><code>1</code> - sync with Tasmota utc time</li><li><code>2..4294967295</code> - set time as epoch</li></ul> NPLight <code>&lt;state&gt;( &lt;delay&gt;)</code>Set light (state = <code>0..4</code>, delay = <code>5..100</code> in 1/10 sec):<ul><li><code>0</code> - manual turn light off</li><li><code>1</code> - manual turn light on</li><li><code>2</code> - manual toggle light</li><li><code>3</code> - switch light into auto mode according MBF_PAR_TIMER_BLOCK_LIGHT_INT settings</li><li><code>4</code> - select light RGB LED to next program. This is normally done by power the light on (if currently off), then power off the light for <code>&lt;delay&gt;</code> time and power on again. <code>&lt;delay&gt;</code> must be specified in 1/10 seconds, default is 15 (=1.5 sec). NPpHMin <code>&lt;ph&gt;</code>Set pH lower limit (ph = <code>0..14</code>)Note: The command is only available if the pH module is installed. NPpHMax <code>&lt;ph&gt;</code>Set pH upper limit (ph = <code>0..14</code>)Note: The command is only available if the pH module is installed. NPpH <code>&lt;ph&gt;</code>Set pH upper limit (ph = <code>0..14</code>) - alias for NPpHMaxNote: The command is only available if the pH module is installed. NPRedox <code>&lt;setpoint&gt;</code>Set redox set point in mV (setpoint = <code>0..1000</code>)Note: The command is only available if the redox module is installed. NPHydrolysis <code>&lt;level&gt;( %)</code>Set hydrolysis/electrolysis level:<ul><li><code>0..100</code> in % for systems configured to %</li><li><code>0..&lt;max&gt;</code> in g/h for systems configured to g/h (<code>&lt;max&gt;</code> depends on the value of the MBF_PAR_HIDRO_NOM register of the device)</li></ul><code>&lt;level&gt;</code> can specified in % on all systems by appending the % sign to the valueNote: The command is only available if the hydrolysis/electrolysis control is present. NPIonization <code>&lt;level&gt;</code>Set ionization target production level (level = <code>0..&lt;max&gt;</code>, the upper limit <code>&lt;max&gt;</code> may vary depending on the MBF_PAR_ION_NOM register)Note: The command is only available if the hydrolysis/electrolysis control is present. NPChlorine <code>&lt;setpoint&gt;</code>Set chlorine set point in ppm (setpoint = <code>0..10</code>)Note: The command is only available if the free chlorine probe detector is installed. NPControl Show information about system controls. NPTelePeriod <code>&lt;time&gt;</code>Enables/disables auto telemetry message when NeoPool values change (time = <code>0</code> or <code>5..3600</code>):<ul><li><code>0</code> - disable this function off (default), telemetry message are only reported depending on TelePeriod setting</li><li><code>5..3600</code> - set the minimum of seconds between two telemetry messages for NeoPool measured values (status changes for relays and settings trigger the SENSOR messages immediately, regardless of the time set)</li></ul>Hint: To get immediate telemetry messages only for status changes (relays, settings) set <code>&lt;time&gt;</code> higher than TelePeriod. In this case, measured sensors are reported only by TelePeriod setting, status changes are reported immediately. NPOnError <code>&lt;repeat&gt;</code>Set the number of retries for Modbus read/write commands errors (repeat = <code>0..10</code>):<ul><li><code>0</code> - disable auto-repeat on read/write error</li><li><code>1..10</code> - repeat commands n times until ok</li></ul> NPResult <code>&lt;format&gt;</code>Set addr/data result format for read/write commands (format = <code>0|1</code>):<ul><li><code>0</code> - output decimal numbers</li><li><code>1</code> - output hexadecimal strings, this is the default</li></ul> NPPHRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for PH value (resolution = <code>0..3</code>). NPCLRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for CL value (resolution = <code>0..3</code>). NPIONRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for ION value (resolution = <code>0..3</code>). NPSetOption0 Sensor data min/max validation and correction (ESP32 only)<code>0</code> = disable correction <code>1</code> = enable correction (default). NPSetOption1 NeoPool Modbus connection statistics (ESP32 only)<code>0</code> = disable statistics <code>1</code> = enable statistics (default). NPRead <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadLSB <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device LSB of 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadMSB <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device MSB of 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadL <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device 32-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..15</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPWrite <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFFFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteLSB <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device LSB 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteMSB <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device MSB 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteL <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device 32-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFFFFFFFF</code>). Use of <code>&lt;data&gt;</code> max 10 times NPBit <code>&lt;addr&gt; &lt;bit&gt;( &lt;data&gt;)</code>Read/Write a single bit from device 16-bit register (addr = <code>0..0x06FF</code>, bit = <code>0..15</code>, data = <code>0|1</code>). Read if <code>&lt;data&gt;</code> is omitted, otherwise set single bit NPBitL <code>&lt;addr&gt; &lt;bit&gt;( &lt;data&gt;)</code>Read/Write a single bit from device 32-bit register (addr = <code>0..0x06FF</code>, bit = <code>0..31</code>, data = <code>0|1</code>). Read if <code>&lt;data&gt;</code> is omitted, otherwise set single bit NPEscape Clears possible errors (like pump exceeded time etc.) NPExec Take over changes without writing to EEPROM. This command is necessary e. g. on changes in Installer page (addr 0x0400..0x04EE). NPSave Write data permanently into EEPROM.During the EEPROM write procedure the NeoPool device may be unresponsive to MODBUS requests, this process always takes less than 1 second.Since this process is limited by the number of EEPROM write cycles, it is recommend to write all necessary changes to the registers and only then execute EEPROM write process using this command.Note: The number of EEPROM writes for Sugar Valley NeoPool devices is guaranteed 100,000 cycles. As soon as this number is exceeded, further storage of information can no longer be guaranteed. See also <code>SetOption157</code> - Hide/Show sensitive data"},{"location":"Commands/#esp32","title":"ESP32","text":""},{"location":"Commands/#ble-esp32","title":"BLE ESP32","text":"<p>Tasmota keeps track of iBeacon devices in a list with up to 32 slots where each device is uniquely identified by these attributes:</p> <ul> <li><code>UUID</code></li> <li><code>Major</code></li> <li><code>Minor</code></li> </ul> <p>Once all 32 slots are used up, additional devices will not be added until at least one slot is freed up again.</p> <p>Devices are added to the list as soon as BLE iBeacon advertisements are received from a yet unknown beacon. Any additional advertisements override the device's entry until a reporting period (see IBeaconPeriod) has passed and an MQTT message is sent based on the last advertisement's data.</p> <p>Device entries expire automatically if no iBeacon advertisements were received within a certain timeframe (see IBeaconTimeout). Upon expiry, Tasmota creates an MQTT message with the <code>RSSI</code> value set to <code>0000</code>. </p> Command Parameters BLEAddrFilter Set BLE Address type filter.<code>BLEAddrFilter</code> = show filter level<code>BLEAddrFilter n</code> = set BLE address type filter 0..3 - default 3.  Ignores BLE address types &gt; filter value.  Set 0 to ONLY see public addresses. BLEAlias Set Alias names for devices.  A device may be referred to by its alias in subsequent commands<code>BLEAlias mac=alias mac=alias ...</code> = set one or more aliases from devices.<code>BLEAlias2</code> = clear all aliases. BLEDebug Set BLE debug level.<code>BLEDebug</code> = show extra debug information<code>BLEDebug0</code> = suppress extra debug BLEDetails Display details about received adverts<code>BLEDetails0</code> = disable showing of details.<code>BLEDetails1 mac/alias</code> = show the next advert from device mac/alias<code>BLEDetails2 mac/alias</code> = show all advert from device mac/alias (some may be lost).<code>BLEDetails3</code> = show all adverts from all devices (some will be lost).<code>BLEDetails4</code> = show all adverts from aliased devices. BLEDevices Cause a list of known devices to be sent on MQTT, or Empty the list of known devices.<code>BLEDevices0</code> = clear the known devices list.<code>BLEDevices</code> = Cause the known devices list to be published on stat/TASName/BLE. BLEMaxAge Set the timeout for device adverts.<code>BLEMaxAge n</code> = set the devices timeout to n seconds.<code>BLEMaxAge</code> = display the device timeout. BLEMode Change the operational mode of the BLE driver.<code>BLEMode0</code> = disable regular BLE scans.<code>BLEMode1</code> = BLE scan on command only.<code>BLEMode2</code> = regular BLE scanning (default). BLEName Read or write the name of a BLE device.<code>BLEName mac|alias</code> = read the name of a device using 1800/2A00.<code>BLEName mac|alias</code> = write the name of a device using 1800/2A00 - many devices are read only. BLEOp Perform a simple active BLE operation (read/write/notify).see separate description in source code BLEPeriod Set the period for publish of BLE data<code>&lt;value&gt;</code> = set interval in seconds BLEScan Cause/Configure BLE a scan<code>BLEScan0 0..1</code> = enable or disable Active scanning. (an active scan will gather extra data from devices, including name)<code>BLEScan</code> = Trigger a 20s scan now if in BLEMode1<code>BLEScan n</code> = Trigger a scan now for n seconds if in BLEMode1 IBeacon Enable or disable the iBeacon driver<code>IBeacon</code> = Get current state<code>IBeacon 0</code> = Disable<code>IBeacon 1</code> = Enable IBeaconClear Clears the list of iBeacon devices IBeaconOnlyAliased Shows or sets OnlyAliased for the iBeacon driver<code>IBeaconOnlyAliased</code> = Get current state<code>IBeaconOnlyAliased 0</code> = enable iBeacon to hear ALL BLE devices<code>IBeaconOnlyAliased 1</code> = enable iBeacon to hear ONLY devices with valid BLEAlias<code>IBeaconOnlyAliased 2</code> = enable iBeacon to hear ONLY devices with valid BLEAlias starting <code>iB</code> IBeaconPeriod Displays or sets the period at which iBeacon data will be published.<code>IBeaconPeriod</code> = Get current interval (defaults to <code>10</code>)<code>IBeaconPeriod &lt;sec&gt;</code> = Interval in seconds IBeaconTimeout Displays or sets the timeout after which iBeacon devices are automatically expunged from the iBeacon device list.<code>IBeaconTimeout</code> = Get current timeout (defaults to <code>30</code>)<code>IBeaconTimeout &lt;sec&gt;</code> = Timeout in seconds"},{"location":"Commands/#ble-mi-sensors","title":"BLE MI Sensors","text":"Command Parameters MI32Battery Trigger an active read of battery values.<code>MI32Battery</code> = request the driver read the battery from all sensors which have active battery read requirements. MI32Block Block or unblock a sensor device.<code>MI32Block</code> = list blocked devices by mac.<code>MI32Block &lt;mac or blealias&gt;</code> = Block one mac/alias. MI32Key Add a decryption key.<code>MI32Key hexkey</code> = add a 44 character decryption key to the keys list. MI32Keys Add one or more decryption keys by mac or alias.<code>MI32Keys</code> = list keys.<code>MI32Keys &lt;mac or blealias&gt;=&lt;bind_key&gt; &lt;mac or blealias&gt;=&lt;bind_key&gt; ...</code> = add keys for MAC or ble_alias.<code>MI32Keys &lt;mac or blealias&gt;=</code> - remove keys for one mac MI32Option&lt;x&gt; n Set driver options at runtime<code>x=0</code> - 0 -&gt; sends only recently received sensor data, 1 -&gt; aggregates all recent sensors data types<code>x=1</code> - 0 -&gt; shows full sensor data at TELEPERIOD, 1 -&gt; disable sensor data at TELEPERIOD<code>x=2</code> - 0 -&gt; sensor data only at TELEPERIOD (default and \"usual\" Tasmota style), 1 -&gt; direct bridging of BLE-data to mqtt-messages<code>x=4</code> - 0 -&gt; always display battery info, 1 -&gt; disable \"bogus\" battery info from LYWSD03MMC and MHOC401<code>x=5</code> - 0 -&gt; show all relevant BLE sensors, 1 -&gt; show only sensors with a BLEAlias<code>x=6</code> - 0 -&gt; normal sensor message, 1 -&gt; publish on <code>tele/&lt;mi32topic&gt;/&lt;name&gt;</code> 1 sensor on flat JSON (see Mi32Topic), 2 -&gt; same as 1 with sensor name key MI32Page Display/Set the sensors per page in the web view.<code>MI32page</code> = show sensors per page.<code>MI32page n</code> = Set sensors per page to n. MI32Period Display/Set the active scan and tele period for the MI32 driver.<code>MI32Period</code> = display the period in seconds.<code>MI32Period n</code> = Set the MI driver active read and tele period to n seconds. MI32Time <code>&lt;x&gt;</code> = set the time on the device in slot <code>x</code>. MI32Topic Topic to be used with Mi32Option6 &gt; 0 (default to <code>tasmota_ble</code>) MI32Unit <code>&lt;x&gt;</code> = set the current Tasmota temperature unit as the temp unit for sensor in slot <code>x</code>."},{"location":"Commands/#camera","title":"Camera","text":"Command Parameters Wc Query all camera settings WcAEC <code>1</code> = enable auto exposure control (sensor), <code>0</code> = disable (default) WcAECDSP <code>1</code> = enable auto exposure control (DSP), <code>0</code> = disable (default) WcAECValue <code>0..1024</code> = setauto exposure control value WcAELevel <code>-2..+2</code> = set auto exposure control level WcAGC <code>1</code> = enable auto gain control, <code>0</code> = disable (default) WcAGCGain <code>0..30</code> = set auto gain control gain value WcAWB <code>1</code> = enable Auto White Balance, <code>0</code> = disable (default) WcAWBGain <code>1</code> = enable Auto White Balance Gain, <code>0</code> = disable (default) WcBPC <code>1</code> = enable Black Pixel Correct, <code>0</code> = disable (default) WcBrightness <code>-2..+2</code> = set picture brightness WcClock <code>10..200</code> = set clock speed in MHz (default = 20) WcColorbar <code>1</code> = show colorbar, <code>0</code> = hide colorbar (default) WcContrast <code>-2..+2</code> = set picture contrast WcDCW <code>1</code> = enable downscale, <code>0</code> = disable (default) WcFeature Extended features. Only boards with PSRAM should be used.<code>0</code> = off, <code>1</code> = reduce FPS and increase exposure time for better low light performance, <code>2</code> = nightmode, increase exposure time and lower the Framerate depending on available light WcFlip <code>1</code> = enable flip camera image,<code>0</code> = disable (default) WcGainCeiling <code>0 .. 6</code> = set gain ceiling (<code>0</code> = x2, <code>1</code> = x4, <code>2</code> = x8, <code>3</code> = x16, <code>4</code> = x32, <code>5</code> = x64, <code>6</code> = x128) WcGammaCorrect <code>1</code> = enable auto gamma correct, <code>0</code> = disable (default) WcInit Initialize camera WcLensCorrect<code>1</code> = enable auto lens correct, <code>0</code> = disable (default) WcMirror <code>1</code> = enable mirror camera image, <code>0</code> = disable (default) WcResolution Set camera resolution.<code>0</code> = 96x96 (96x96)<code>1</code> = QQVGA2 (128x160)<code>2</code> = QCIF (176x144)<code>3</code> = HQVGA (240x176)<code>4</code> = QVGA (320x240)<code>5</code> = CIF (400x296)<code>6</code> = VGA (640x480)<code>7</code> = SVGA (800x600)<code>8</code> = XGA (1024x768)<code>9</code> = SXGA (1280x1024)<code>10</code> = UXGA (1600x1200) WcRtsp (Requires defined <code>ENABLE_RTSPSERVER</code>)<code>1</code> = start RTSP server (forces restart) , <code>0</code> = stop server WcSaturation <code>-2..+2</code> = set picture saturation WcSpecialEffect Set picture effect: <code>0</code> = off, <code>1</code> = Negative, <code>2</code> = Grayscale, <code>3</code> = Red Tint, <code>4</code> = Green Tint, <code>5</code> = Blue Tint, <code>6</code> = Sepia WcStats show statistics WcStream <code>1</code> = start webcam stream at http://&lt;device_ip&gt;:81/stream or http://&lt;device_ip&gt;:81/cam.mjpeg<code>0</code> = stop stream WcWBMode White Balance Mode<code>0</code> = auto, <code>1</code> = Sunny, <code>2</code> = Cloudy, <code>3</code> = Office, <code>4</code> = Home WcWPC <code>1</code> = enable White Pixel Correct, <code>0</code> = disable (default) WcAuth <code>1</code> = enable basic Authentication for stream and screenshot urls, <code>0</code> = disable (default)"},{"location":"Commands/#ethernet","title":"Ethernet","text":"Command Parameters Ethernet Only for ESP32 boards with additional LAN chip<code>0</code> = disable Ethernet<code>1</code> = enable Ethernet (default) EthAddress <code>0..31</code> = PHYxx address EthClockMode Ethernet clock mode.<code>0</code> = ETH_CLOCK_GPIO0_IN <code>1</code> = ETH_CLOCK_GPIO0_OUT <code>2</code> = ETH_CLOCK_GPIO16_OUT<code>3</code> = ETH_CLOCK_GPIO17_OUT (default) EthType Ethernet type.<code>0</code> = ETH_PHY_LAN8720 (default)<code>1</code> = ETH_PHY_TLK110 <code>2</code> = ETH_PHY_RTL8201<code>3</code> = ETH_PHY_DP83848<code>4</code> = ETH_PHY_DM9051 (SPI)<code>5</code> = ETH_PHY_KSZ8081<code>6</code>= ETH_PHY_KSZ8041<code>7</code> = ETH_PHY_JL1101<code>8</code> = ETH_PHY_W5500 (SPI)<code>9</code> = ETH_PHY_KSZ8851 (SPI) EthIPAddress Set device Ethernet IP address (for Wi-Fi, see IpAddress)<li><code>0.0.0.0</code> = use dynamic IP address (DHCP)</li><li><code>XXX.XXX.XXX.XXX</code> = set static IP address</li>Follow any IP configuration commands with <code>restart 1</code> to apply changes EthGateway Set gateway IP address EthSubnetmask Set subnet mask EthDNSServer1EthDNSServer2 Set DNS servers IP addressesDue to a limitation of the underlying LwIP library, only 2 DNS servers are supported. These are shared among all interfaces, including WiFi/Ethernet, IPv4/IPv6. See Also <code>wifi</code> - Enable/Disable Wi-Fi"},{"location":"Commands/#hosted-mcu","title":"Hosted MCU","text":"<p>Handling embedded MCU's like the ESP32-C6 on some ESP32-P4 boards.  </p> Command Parameters HostedOTA <code>http://url/firmware_name.bin</code> = download <code>firmware_name.bin</code> from <code>http://url</code>, flash to hosted MCU and restart."},{"location":"Compile-your-build/","title":"Compiling","text":"<p>Flash and memory space on an ESP82XX chip is limited and very valuable. Because of that our precompiled binaries include the most popular features of Tasmota but no build can include all of them.</p> <p>To include a feature you need (or build completely customized Tasmota) you will have to configure and compile your own version.</p> <p>First you will need Tasmota's source code (either development or master branch) and a compiling tool.</p>"},{"location":"Compile-your-build/#compiling-tools","title":"Compiling Tools","text":"<p>If you want to modify the code or default settings you can use:</p> <ul> <li>PlatformIO -  setup and configure PlatformIO for Tasmota compilation and upload</li> <li>PlatformIO CLI - how to flash Tasmota using the PlatformIO command line interface on Linux</li> <li>PlatformIO-Core - automate firmware builds using PlatformIO-Core and flash with esptool</li> <li>Visual Studio Code -  setup and configure Visual Studio Code with PlatformIO for Tasmota</li> </ul> <p>Once you have set up the development environment, unzip the source code into a folder.</p> <ul> <li>Docker Tasmota - compile from a Docker container using PlatformIO</li> <li>TasmoCompiler - simple web GUI to compile Tasmota via Docker with your own settings</li> </ul>"},{"location":"Compile-your-build/#customize-your-build","title":"Customize Your Build","text":"<p>There are mainly 2 type of possible customization:</p> <ol> <li> <p>Changing default settings that will be used by Tasmota when running for the first time on a blank device (no previous existing configutrion in flash or flash erased). This can be done on any variant as it doesn't change the code base, memory footprint or required libraries. Such customization include: default Wi-Fi settings, default MQTT settings, default values for a setting including <code>SetOption&lt;x&gt;</code>.</p> </li> <li> <p>Adding or removing features. This is essentially supported only on the base tasmota/tasmota32 environment). Other variants have been fine tuned and trying to add/remove features to them is most likely to fail and Tasmota development team will provide no support. The typical failure is trying to add sensors to <code>tasmota-display</code> or adding displays to <code>tasmota-sensors</code>. The proper way is to add both sensors and displays to <code>tasmota</code>.</p> </li> </ol> <p>Do not try to add or remove features to a variant, only to tasmota or tasmota32</p>"},{"location":"Compile-your-build/#general-customization-principle","title":"General Customization Principle","text":"<p>Create a new file in <code>/tasmota</code> folder called <code>user_config_override.h</code>. You can copy the sample file <code>user_config_override_sample.h</code> that is already there and which include some sample definition for coding your own Wifi SSID and password inside the Tasmota firmware.</p> <p>Open the file in chosen development environment for editing.</p> <p>Do not modify my_user_config.h</p> <p>It is strongly recommended to NOT customize your build by making changes in <code>my_user_config.h</code> because the changes you made there will be overwritten if you download/clone a newer version of Tasmota code-base. At least this would make any merge complicated. Add your custom configurations ONLY in <code>user_config_override.h</code>. The file <code>my_user_config.h</code> is a great reference for available settings and features.  </p> <p>A good way to avoid dealing with the source code files is to pass defines as a flag in platformio_tasmota_cenv.ini. This needs a special stringification with escape double quotes (\" -&gt; \\\\\") in the constant value and wrapping a line in single quotes. <pre><code>build_flags                 = ${env:tasmota32_base.build_flags}\n                              -DOTA_URL='\"\"'\n                              '-DUSER_BACKLOG=\"so11 1; br load(\\\\\"setup.be\\\\\")\"'\n</code></pre></p>"},{"location":"Compile-your-build/#changing-default-settings","title":"Changing Default Settings","text":"<p>Most default settings are defined in <code>my_user_config.h</code> along with an explanation and the command used to change it dynamically. For example: <pre><code>#define WIFI_CONFIG_TOOL       WIFI_RETRY        // [WifiConfig] Default tool if Wi-Fi fails to connect (default option: 4 - WIFI_RETRY)\n                                                 // (WIFI_RESTART, WIFI_MANAGER, WIFI_RETRY, WIFI_WAIT, WIFI_SERIAL, WIFI_MANAGER_RESET_ONLY)\n                                                 // The configuration can be changed after first setup using WifiConfig 0, 2, 4, 5, 6 and 7.\n#define WIFI_SCAN_AT_RESTART   false             // [SetOption56] Scan Wi-Fi network at restart for configured AP's\n</code></pre> The first line shows that <code>WIFI_CONFIG_TOOL</code> is the macro matching the command <code>WifiConfig</code>. The default value, as stated in <code>WifiConfig</code>'s documentation is <code>WIFI_RETRY</code> (value <code>4</code>).</p> <p>The other line shows the default value for <code>SetOption56</code> which is by default <code>false</code> (<code>OFF</code>or <code>0</code>).</p> <p>If you want to override any of these in your own binary, add the following in <code>user_config_override.h</code>:  <pre><code>#ifdef %identifier%\n#undef %identifier%\n#endif\n#define %identifier%   %the_new_value%\n</code></pre> Example: <pre><code>#ifdef WIFI_CONFIG_TOOL\n#undef WIFI_CONFIG_TOOL\n#endif\n#define WIFI_CONFIG_TOOL  WIFI_WAIT   // Change WifiConfig to wait (5)\n</code></pre></p>"},{"location":"Compile-your-build/#enabling-a-feature-in-tasmota","title":"Enabling a Feature in <code>tasmota</code>","text":"<p>A feature can be enabled by #defining the matching <code>USE_featurename</code> macro. It can be disabled by #undefining the same macro. All features and their identifier can be found in <code>my_user_config.h</code>.</p> <p>Best practice to enable a feature is to use:</p> <pre><code>#ifndef %identifier%\n#define %identifier%\n#endif\n</code></pre> <p>Best practice to disable a feature is to use:</p> <pre><code>#ifdef %identifier%\n#undef %identifier%\n#endif\n</code></pre> <p>If the feature you want to customize have a value like for example: <code>#define WIFI_CONFIG_TOOL  WIFI_WAIT</code>, the best practice to modify it is to use:</p> <pre><code>#ifdef %identifier%\n#undef %identifier%\n#endif\n#define %identifier% %value%\n</code></pre> Directives Description <code>#define %identifier%</code> enables the feature <code>#undef %identifier%</code> disables the feature <code>#ifdef %identifier%</code> checks if the feature is defined in code <code>#ifndef %identifier%</code> checks if the feature is not defined <code>#endif</code> closes #if statement <p>Enable blinds and shutters support</p> <pre><code>#ifndef USE_SHUTTER\n#define USE_SHUTTER             // Add Shutter support for up to 4 shutter with different motortypes (+6k code)\n#endif\n</code></pre> <p>identifier = <code>USE_SHUTTER</code></p> <ol> <li>check whether USE_SHUTTER is already defined and proceed if it is not</li> <li>this line copied from <code>my_user_config.h</code> then uncommented, tells the compiler to include (#define) shutter support</li> <li>close the IF statement from line 1</li> </ol> <p>Disable Domoticz support</p> <pre><code>#ifdef USE_DOMOTICZ\n#undef USE_DOMOTICZ                              \n#endif \n</code></pre> <p>identifier = <code>USE_DOMOTICZ</code></p> <ol> <li>check whether <code>USE_DOMOTICZ</code> is already defined and proceed if it is</li> <li>tell the compiler to remove (#undef) Domoticz support</li> <li>close the IF statement from line 1</li> </ol> <p>It is not recommended to change <code>my_user_config.h</code>, use it only for reference</p> <p>Save file, compile the custom binary and flash it</p> <p>Note</p> <p>There are limits to how many features can be included! If you go overboard code might not compile due to features conflicting or might not be able to be flashed if it exceeds ESP8266 limits.</p>"},{"location":"Compile-your-build/#advanced-customization","title":"Advanced Customization","text":""},{"location":"Compile-your-build/#user_backlog","title":"USER_BACKLOG","text":"<p><code>USER_BACKLOG</code> allows a set of commands to be automatically executed when the binary is ran for the first time on blank device (no settings in flash) or after a settings reset using <code>reset 1</code>/<code>reset 2</code>. It should be defined as a list of commands separated by a <code>;</code>. No <code>Backlog</code> command is required. It can be used for example for settings which do not have a changeable default. An interesting usage is to automatically reconfigure a device from a saved configuration file right after a <code>reset 1</code>/<code>reset 2</code>. </p> <p>Automatically load a configuration backup (*.dmp) file based on the MAC address of the device</p> <pre><code>#define USER_BACKLOG \"WebGetConfig http://myserver/tasmota/conf/%id%.dmp\"\n</code></pre>"},{"location":"Compile-your-build/#user_rule","title":"USER_RULE","text":"<p>If you need some rules to be automatically populated in your binary, you can define <code>USER_RULE&lt;x&gt;</code>.</p> <pre><code>#define USER_RULE1 \"On Switch1#state DO publish cmnd/otherdevice/POWER %value% ENDON\"\n</code></pre>"},{"location":"Compile-your-build/#defining-multiple-custom-firmwares","title":"Defining Multiple Custom Firmwares","text":"<p>You may want to generate multiple custom firmwares such as one for switches/relays, one for sensors, in a similar way as Tasmota provides different binaries. This can be achieved very simply.</p> <ol> <li>Open the file <code>platformio_tasmota_cenv.ini</code>. You can define your own binaries here. <code>cenv</code> stands for Custom ENVironment where an environment is a specific binary to generate.</li> <li>In your <code>user_config_override.h</code> you can create sections with specific settings for each type of firmware. SSID and MQTT can be outside of the section so they apply to every binary.</li> </ol>"},{"location":"Compile-your-build/#sample-platformio_tasmota_cenvini","title":"Sample <code>platformio_tasmota_cenv.ini</code>","text":"<pre><code>; *********************************************************************\n[platformio]\n; For best Gitpod performance remove the \";\" in the next line. Needed \n; Platformio files are cached and installed at first run\n;core_dir = .platformio\n\n; *** Build/upload environment\ndefault_envs =\n; *** Uncomment the line(s) below to select version(s) that will be build\n;     by default. Commented versions can still be build individually from\n;     VSCode or command line\n                tasmota-foo\n                tasmota-bar\n                tasmota32-foo\n                tasmota32-grizzly\n\n; *********************************************************************\n; Common section can override global parameters for all builds\n[common]\n\n; *** Upload Serial reset method for Wemos and NodeMCU\nupload_port               = COM4\n\n; *********************************************************************\n; This section show how to create 2 alternative binaries : tasmota-foo.bin\n; and tasmota-bar.bin. Those binaries are derived form tasmota.bin and \n; customization is defined in user_config_override.h \n; Those binaries are for ESP8266\n; The name after the env: tag will give its name to the binary\n[env:tasmota-foo]\nbuild_flags = ${env.build_flags} -DFIRMWARE_FOO\n\n[env:tasmota-bar]\nbuild_flags = ${env.build_flags} -DFIRMWARE_BAR\n\n; *********************************************************************\n; Similar example for ESP32\n; Note that you must explicitly state that they derive from `tasmota32`\n[env:tasmota32-foo]\nextends = env:tasmota32_base\nbuild_flags             = ${env:tasmota32_base.build_flags} -DFIRMWARE_FOO\n\n[env:tasmota32-grizzly]\nextends = env:tasmota32_base\nbuild_flags             = ${env:tasmota32_base.build_flags} -DFIRMWARE_GRIZZLY\n</code></pre>"},{"location":"Compile-your-build/#sample-user_config_overrideh","title":"Sample <code>user_config_override.h</code>","text":"<pre><code>#ifndef _USER_CONFIG_OVERRIDE_H_\n#define _USER_CONFIG_OVERRIDE_H_\n\n// force the compiler to show a warning to confirm that this file is included\n#warning **** user_config_override.h: Using Settings from this File ****\n\n// ***********************************************\n// ** Global settings for all binaries ***********\n\n// -- Setup your own Wifi settings  ---------------\n#undef  STA_SSID1\n#define STA_SSID1         \"YourSSID\"             // [Ssid1] Wifi SSID\n#undef  STA_PASS1\n#define STA_PASS1         \"YourWifiPassword\"     // [Password1] Wifi password\n\n// You can also define your IP settings or your MQTT settings\n\n// ***********************************************\n// ** Firmware specific settings *****************\n\n// -- Options for firmware tasmota-foo and tasmota32-foo ------\n#ifdef FIRMWARE_FOO\n    // This line will issue a warning during the build (yellow in \n    // VSCode) so you see which section is used\n    #warning **** Build: FOO ****\n    // -- CODE_IMAGE_STR is the name shown between brackets on the \n    //    Information page or in INFO MQTT messages\n    #undef CODE_IMAGE_STR\n    #define CODE_IMAGE_STR \"foo\"\n\n    // Put here your override for firmware tasmota-foo\n    #define USE_I2C\n    #define USE_SENSOR_FOO  // Beware this doesn't exist !!!\n\n#endif\n\n// -- Options for firmware tasmota-bar ------\n#ifdef FIRMWARE_BAR\n    #warning **** Build: BAR ****\n    #undef CODE_IMAGE_STR\n    #define CODE_IMAGE_STR \"bar\"\n\n    // Put here your override for firmware tasmota-bar\n\n#endif\n\n// -- Options for firmware tasmota32-grizzly ------\n#ifdef FIRMWARE_GRIZZLY\n\n    // If these settings are only for ESP32, you can check these\n    // are used only when building for ESP32\n    #ifndef ESP32\n    #error *** This setup of for tasmota32 only ***\n    #endif\n\n    #warning **** Build: GRIZZLY ****\n    #undef CODE_IMAGE_STR\n    #define CODE_IMAGE_STR \"grizzly\"\n\n    // Put here your override for firmware tasmota32-grizzly\n\n#endif\n\n#endif  // _USER_CONFIG_OVERRIDE_H_\n</code></pre>"},{"location":"Components-old/","title":"Components old","text":"<p>Component is anything wired to the ESP8266/ESP8255 chip to be controlled by or send data to it.</p> <p></p> <p>Components can be: buttons, switches, relays, LEDs, sensors, displays, MCU units, etc. Every component is assigned in the device template to the GPIO it is wired (connected) to.</p> <p>Every Tasmota device has some components configured by default. Most often there is a relay, a button and a LED configured as is the case for a Sonoff Basic in the following image.</p> <p>Bug</p> <p>Tasmota 9.1 completely redesigned GPIO mapping to allow for future expansion. Read more about the GPIO Conversion </p>"},{"location":"Components-old/#assigning-components","title":"Assigning Components","text":"<p> If you wish to expand a device with a peripheral component, after properly wiring everything, you need to assign it to a free GPIO in Configure Module page or use command <code>GPIO&lt;x&gt;</code>.</p> <p>Read more about peripherals.</p> <p>Tip</p> <p>GPIOs configured as User (1) are the GPIOs that can be assigned to components in the Configure Module page. </p>"},{"location":"Components-old/#gpio-conversion","title":"GPIO Conversion","text":"Old GPIO New GPIO Name Description 255 1 User User 0 0 None Not used 1 1184 DHT11 DHT11 sensor 2 1216 AM2301 AM230X, DHT21 and DHT22 sensor 3 1248 SI7021 Only for Sonoff Si7021, not the i2c version 4 1312 DS18x20 Dallas Semiconductor DS18b20 1-Wire temperature sensor 5 608 I2C SCL I2C serial clock pin, used with any I2C component (sensors, displays, ...) 6 640 I2C SDA I2C serial data pin, used with any I2C component (sensors, displays, ...) 7 1376 WS2812 Addressable LEDs such as WS281X or Neopixel 8 1056 IRsend IR Transmitter LED 9 160 Switch 1 Switch 10 161 Switch 2 Switch 11 162 Switch 3 Switch 12 163 Switch 4 Switch 13 164 Switch 5 Switch 14 165 Switch 6 Switch 15 166 Switch 7 Switch 16 167 Switch 8 Switch 17 32 Button 1 Button active low, internal pull-up resistor 18 33 Button 2 Button active low, internal pull-up resistor 19 34 Button 3 Button active low, internal pull-up resistor 20 35 Button 4 Button active low, internal pull-up resistor 21 224 Relay 1 Relay 22 225 Relay 2 Relay 23 226 Relay 3 Relay 24 227 Relay 4 Relay 25 228 Relay 5 Relay 26 229 Relay 6 Relay 27 230 Relay 7 Relay 28 231 Relay 8 Relay 29 256 Relay_i 1 Relay inverted 30 257 Relay_i 2 Relay inverted 31 258 Relay_i 3 Relay inverted 32 259 Relay_i 4 Relay inverted 33 260 Relay_i 5 Relay inverted 34 261 Relay_i 6 Relay inverted 35 262 Relay_i 7 Relay inverted 36 263 Relay_i 8 Relay inverted 37 416 PWM 1 Pulse Width Modulated Output 38 417 PWM 2 Pulse Width Modulated Output 39 418 PWM 3 Pulse Width Modulated Output 40 419 PWM 4 Pulse Width Modulated Output 41 420 PWM 5 Pulse Width Modulated Output 42 352 Counter 1 Counter Input 43 353 Counter 2 Counter Input 44 354 Counter 3 Counter Input 45 355 Counter 4 Counter Input 46 448 PWM_i 1 Pulse Width Modulated inverted Output 47 449 PWM_i 2 Pulse Width Modulated inverted Output 48 450 PWM_i 3 Pulse Width Modulated inverted Output 49 451 PWM_i 4 Pulse Width Modulated inverted Output 50 452 PWM_i 5 Pulse Width Modulated inverted Output 51 1088 IRrecv IR Receiver Input (for example TSOP1838) 52 288 Led 1 LED 53 289 Led 2 LED 54 290 Led 3 LED 55 291 Led 4 LED 56 320 Led_i 1 Inverted LED - default state ON 57 321 Led_i 2 Inverted LED - default state ON 58 322 Led_i 3 Inverted LED - default state ON 59 323 Led_i 4 Inverted LED - default state ON 60 1408 MHZ Rx MHZ 19 CO2 Sensor 61 1440 MHZ Tx MHZ 19 CO2 Sensor 62 1472 PZEM0XX Tx Peacefair Pzem-0XX Power Meter Tx pin 63 1504 PZEM004 Rx Peacefair Pzem-004 Power Meter Rx pin 64 1600 SAir Rx Sensor Senseair 65 1632 SAir Tx Sensor Senseair 66 768 SPI CS SPI Interface (ePaper Display) 67 800 SPI DC SPI Interface (ePaper Display) 68 992 BkLight Backlight (Display) 69 1696 PMS5003 PMS5003 Air Quality Sensor 70 1760 SDS0X1 Rx Nova Fitness SDS011 Laser Dust Sensor Rx pin 71 1792 SerBr Rx Serial Bridge Receive 72 1824 SerBr Tx Serial Bridge Transmit 73 1856 SR04 Tri Ultrasonic Sensor HC-SR04 Trigger pin 74 1888 SR04 Ech Ultrasonic Sensor HC-SR04 Echo pin 75 1920 SDMx20 Tx SDMx20-Modbus Multifunction Power Analyser Tx pin 76 1952 SDMx20 Rx SDMx20-Modbus Multifunction Power Analyser Rx pin 77 1984 SDM630 Tx SDM630-Modbus Multifunction Power Analyser Tx pin 78 2016 SDM630 Rx SDM630-Modbus Multifunction Power Analyser Rx pin 79 2048 TM16 CLK TM1638 Switch Module 80 2080 TM16 DIO TM1638 Switch Module 81 2112 TM16 STB TM1638 Switch Module 82 192 Switch_n 1 Switch, no pull-up resistor 83 193 Switch_n 2 Switch, no pull-up resistor 84 194 Switch_n 3 Switch, no pull-up resistor 85 195 Switch_n 4 Switch, no pull-up resistor 86 196 Switch_n 5 Switch, no pull-up resistor 87 197 Switch_n 6 Switch, no pull-up resistor 88 198 Switch_n 7 Switch, no pull-up resistor 89 199 Switch_n 8 Switch, no pull-up resistor 90 64 Button_n 1 Button, active low, no internal pull-up resistor 91 65 Button_n 2 Button, active low, no internal pull-up resistor 92 66 Button_n 3 Button, active low, no internal pull-up resistor 93 67 Button_n 4 Button, active low, no internal pull-up resistor 94 384 Counter_n 1 Counter sensor, no pull-up resistor 95 385 Counter_n 2 Counter sensor, no pull-up resistor 96 386 Counter_n 3 Counter sensor, no pull-up resistor 97 387 Counter_n 4 Counter sensor, no pull-up resistor 98 1536 PZEM016 Rx Peacefair Pzem-016 Power Meter Rx pin 99 1568 PZEM017 Rx Peacefair Pzem-017 Power Meter Rx pin 100 2144 MP3 Player DF MP3 Player mini (Input) 101 1728 SDS0X1 Tx Nova Fitness SDS011 Laser Dust Sensor Tx pin 102 2176 HX711 SCK HX711 weight sensor serial clock input 103 2208 HX711 DAT HX711 weight sensor data output 104 2240 TX20 TX20 Wind Sensor Input (Tx from sensor) 105 1120 RFSend RF Emitter (433Mhz module needed; Requires self-compile with RF_SENSOR and USE_RC_SWITCH) 106 1152 RFrecv RF Receiver (433Mhz module needed; Requires self-compile with RF_SENSOR and USE_RC_SWITCH) 107 2272 Tuya Tx Tuya Transfer pin 108 2304 Tuya Rx Tuya Receive pin 109 2336 MGC3130 Xfr MGC3130 E-field Xfr pin 110 2368 MGC3130 Rst MGC3130 E-field Reset pin 111 832 SSPI MISO Software SPI MISO (Display) 112 864 SSPI MOSI Software SPI MOSI (Display) 113 896 SSPI SCLK Software SPI SCLK (Display) 114 928 SSPI CS Software SPI CS (Display) 115 960 SSPI DC Software SPI DC (Display) 116 2400 RF Sensor Theo Arendst RF433 Sensor 117 2432 AZ Rx AZ 7798 CO2 datalogger 118 2464 AZ Tx AZ 7798 CO2 datalogger 119 2496 MX31855 CS MAX31855 Thermocouple Sensor Chip Select pin 120 2528 MX31855 CLK MAX31855 Thermocouple Sensor Serial Clock pin 121 2560 MX31855 DO MAX31855 Thermocouple Sensor Digital Output pin 122 96 Button_i 1 Button inverted, active high with internal pull-up resistor 123 97 Button_i 2 Button inverted, active high with internal pull-up resistor 124 98 Button_i 3 Button inverted, active high with internal pull-up resistor 125 99 Button_i 4 Button inverted, active high with internal pull-up resistor 126 128 Button_in 1 Button inverted, active high no internal pull-up resistor 127 129 Button_in 2 Button inverted, active high no internal pull-up resistor 128 130 Button_in 3 Button inverted, active high no internal pull-up resistor 129 131 Button_in 4 Button inverted, active high no internal pull-up resistor 130 2592 HLWBL SEL Energy Monitoring (for example Pow) 131 2624 HLWBL SELi Energy Monitoring (for example Pow) 132 2656 HLWBL CF1 Energy Monitoring (for example Pow) 133 2688 HLW8012 CF HLW8012 Single Phase Energy Monitor Chip CF pin 134 2720 BL0937 CF BL0937 Single Phase Energy Monitor Chip CF pin 135 2752 MCP39F5 Tx Energy Monitoring (for example Shelly2) 136 2784 MCP39F5 Rx Energy Monitoring (for example Shelly2) 137 2816 MCP39F5 Rst Energy Monitoring (for example Shelly2) 138 2848 PN532 Tx PN532 RFID/NFC Reader Tx pin 139 2880 PN532 Rx PN532 RFID/NFC Reader Rx pin 140 2912 SM16716 CLK SM16716 Pixel LED Serial Clock pin 141 2944 SM16716 DAT SM16716 Pixel LED Data pin 142 2976 SM16716 PWR SM16716 Pixel LED Power pin 143 3008 MY92x1 DI Light Bulb with MY92x controller 144 3040 MY92x1 DCKI Light Bulb with MY92x controller 145 3072 CSE7766 Tx CSE7766 Single Phase Energy Monitor Chip Tx pin 146 3104 CSE7766 Rx CSE7766 Single Phase Energy Monitor Chip Rx pin 147 3136 ALux IrRcv AriLux RGB Controller IR receive (Input) 148 3200 Serial Tx Serial Transfer pin 149 3232 Serial Rx Serial Receive pin 150 3264 Rotary A 1 Rotary Encoder (Mi Desk Lamp) 151 3296 Rotary B 1 Rotary Encoder (Mi Desk Lamp) 152 3265 Rotary A 2 Rotary Encoder (Mi Desk Lamp) 153 3297 Rotary B 2 Rotary Encoder (Mi Desk Lamp) 154 3392 HRE CLOCK Clock/Power line for HR-E Water Meter 155 3424 HRE DATA Data line for HR-E Water Meter 156 3456 ADE7953_IRQ ADE7953 IRQ 157 544 LedLink Device Status LED 158 576 LedLinki Device Status LED, inverted 159 3168 ALux IrSel For AriLux devices - switches between IR/RF mode 160 480 Buzzer Sonoff iFan03 Buzzer 161 512 Buzzeri Sonoff iFan03 Buzzer inverted 162 1024 OLED Reset OLED Display Reset 163 3488 SolaxX1 Tx Solax Inverter Tx pin 164 3520 SolaxX1 Rx Solax Inverter Rx pin 165 3552 Zigbee Tx Zigbee Serial interface Tx 166 3584 Zigbee Rx Zigbee Serial interface Rx 167 3616 RDM6300 Rx RDM6300 RX 168 3648 iBeacon Tx HM17 iBeacon Tx 169 3680 iBeacon Rx HM17 iBeacon Rx 170 3712 A4988 DIR A4988 Motor Direction 171 3744 A4988 STP A4988 Step motor 172 3776 A4988 ENA A4988 Enable motor 173 3808 A4988 MS1 A4988 Microstep increment select pin1 174 3809 A4988 MS2 A4988 Microstep increment select pin2 175 3810 A4988 MS3 A4988 Microstep increment select pin3 176 3904 DDS238-2 Tx DDS2382 Serial interface Tx 177 3936 DDS238-2 Rx DDS2382 Serial interface Rx 178 3968 DDSU666 Tx DDSU666 Serial interface Tx 179 4000 DDSU666 Rx DDSU666 Serial interface Rx 180 4032 SM2135 CLK SM2135 Clk 181 4064 SM2135 DAT SM2135 Dat 182 4096 DeepSleep DeepSleep wake switch 183 4128 EXS Enable EXS Dimmer MCU Enable 184 4160 Client TX TasmotaClient TX 185 4192 Client RX TasmotaClient RX 186 4224 Client RST TasmotaClient Reset Pin 187 4256 Client RSTi TasmotaClient Reset Inverted 188 4288 HPMA RX Honeywell HPMA115S0 Serial Rx 189 4320 HPMA TX Honeywell HPMA115S0 Serial Tx 190 4352 GPS RX GPS Serial Tx 191 4384 GPS TX GPS Serial Tx 192 1344 DSB OUT Pseudo Single wire DS18B20 or DS18S20 193 1280 DHT11 OUT Pseudo Single wire DHT11, DHT21, DHT22, AM2301, AM2302, AM2321 194 4416 HM10 RX HM10-BLE-Mijia-bridge Serial 195 4448 HM10 TX HM10-BLE-Mijia-bridge Serial 196 4480 LE01MR RX F&amp;F LE-01MR Energy Meter Serial 197 4512 LE01MR TX F&amp;F LE-01MR Energy Meter Serial 198 4544 CC1101 GDO0 CC1101 RX Pin 199 4576 CC1101 GDO2 CC1101 TX Pin 200 4608 HRXL RX Data from MaxBotix HRXL sonar range sensor 201 4640 MOODL TX ElectriQ iQ-wifiMOODL Serial TX 202 4672 AS3935 Lightning Detector Interrupt Pin 203 1664 PMS5003 TX Plantower PMS5003 Serial interface 204 4928 Boiler OT Rx OpenTherm Boiler RX pin 205 4960 Boiler OT Tx OpenTherm Boiler TX pin 206 4992 Windmeter Speed WindMeter speed counter pin 207 5056 BL0940 RX BL0940 serial interface 208 5088 TCP TX TCP Serial bridge 209 5120 TCP RX TCP Serial bridge 210 5152 TELEINFO RX Teleinfo serial interface 211 5184 TELEINFO Enable Teleinfo Enable PIN 212 5216 LMT01 LMT01 input counting pin 213 5248 IEM3000 TX IEM3000 Serial interface 214 5280 IEM3000 RX IEM3000 Serial interface 215 5312 Zigbee RST Zigbee reset 216 5344 DYP Rx DYP-ME007 Rx pin 5728 Option a 1 Enable PWM2 high impedance if powered off as used by Wyze bulbs 5729 Option a 2 Enable dummy energy monitor 5730 Option a 3 Enable UDisplay universal display driver Rotary A_n Rotary Encoder Rotary B_n Rotary Encoder Button_d 1 Button, active low with internal pull-down resistor Button_d 2 Button, active low with internal pull-down resistor Button_d 3 Button, active low with internal pull-down resistor Button_d 4 Button, active low with internal pull-down resistor Button_id 1 Button inverted, active high with internal pull-down resistor Button_id 2 Button inverted, active high with internal pull-down resistor Button_id 3 Button inverted, active high with internal pull-down resistor Button_id 4 Button inverted, active high with internal pull-down resistor Switch_d 1 Switch, with pull-down resistor Switch_d 2 Switch, with pull-down resistor Switch_d 3 Switch, with pull-down resistor Switch_d 4 Switch, with pull-down resistor Switch_d 5 Switch, with pull-down resistor Switch_d 6 Switch, with pull-down resistor Switch_d 7 Switch, with pull-down resistor Switch_d 8 Switch, with pull-down resistor"},{"location":"Components-old/#adc-conversion","title":"ADC Conversion","text":"Old ADC New ADC Option WebUI display MQTT message 0 0 None none none 1 4704 Analog Analog0 %value% {\"A0\":%value%} 2 4736 Temperature Temperature %value% \u00b0C (\u00b0F) {\"Temperature\":%value%},\"TempUnit\":\"C\"} 3 4768 Light Illuminance %value% lux {\"Illuminance\":%value%} 4 4800 Button none none 5 4832 Buttoni none none 6 4864 Range Range %value% {\"Range\":%value%} 7 4896 CT Power Voltage 230 V Current %value A Power %value W Energy Total %value kWh {\"Energy\":%value,\"Power\":%value,\"Voltage\":230,\"Current\":%value} 8 3328 Joystick none {\"ANALOG\":{\"Joy1\":%value%}"},{"location":"Components/","title":"Components","text":"<p>Component is anything wired to the ESP8266/ESP8285 chip to be controlled by or send data to it.</p> <p></p> <p>Components can be: buttons, switches, relays, LEDs, sensors, displays, MCU units, etc. Every component is assigned in the device template to the GPIO it is wired (connected) to.</p> <p>Every Tasmota device has some components configured by default. Most often there is a relay, a button and a LED configured as is the case for a Sonoff Basic in the following image.</p> <p>If you use multiple items of the same type (like buttons or switches), number them in order without skipping any numbers (button1, button2, button3...). Don't leave gaps in the numbering sequence. For example, don't use button1 and button3 without having a button2. This numbering rule applies separately for each type of component. When adding a new component, start numbering from 1 for that type. So if you already have Relay1 and want to add a button, call it button1, not button2.</p> <p>Bug</p> <p>Tasmota 9.1 completely redesigned GPIO mapping to allow for future expansion. Read more about the GPIO Conversion</p>"},{"location":"Components/#assigning-components","title":"Assigning Components","text":"<p> If you wish to expand a device with a peripheral component, after properly wiring everything, you need to assign it to a free GPIO in Configure Module page or use command <code>GPIO&lt;x&gt;</code>.</p> <p>Read more about peripherals.</p> <p>Tip</p> <p>GPIOs configured as User (1) are the GPIOs that can be assigned to components in the Configure Module page.</p>"},{"location":"Components/#gpio-overview","title":"GPIO Overview","text":""},{"location":"Components/#tasmota","title":"Tasmota","text":"# UI Label Comment 0 None Not used 32 Button1 Button active low, internal pull-up resistor 33 Button2 Button active low, internal pull-up resistor 34 Button3 Button active low, internal pull-up resistor 35 Button4 Button active low, internal pull-up resistor 36 Button5 Button active low, internal pull-up resistor 37 Button6 Button active low, internal pull-up resistor 38 Button7 Button active low, internal pull-up resistor 39 Button8 Button active low, internal pull-up resistor 64 Button_n1 Button active low, no internal pull-up resistor 65 Button_n2 Button active low, no internal pull-up resistor 66 Button_n3 Button active low, no internal pull-up resistor 67 Button_n4 Button active low, no internal pull-up resistor 68 Button_n5 Button active low, no internal pull-up resistor 69 Button_n6 Button active low, no internal pull-up resistor 70 Button_n7 Button active low, no internal pull-up resistor 71 Button_n8 Button active low, no internal pull-up resistor 96 Button_i1 Button inverted, active high with internal pull-up resistor 97 Button_i2 Button inverted, active high with internal pull-up resistor 98 Button_i3 Button inverted, active high with internal pull-up resistor 99 Button_i4 Button inverted, active high with internal pull-up resistor 100 Button_i5 Button inverted, active high with internal pull-up resistor 101 Button_i6 Button inverted, active high with internal pull-up resistor 102 Button_i7 Button inverted, active high with internal pull-up resistor 103 Button_i8 Button inverted, active high with internal pull-up resistor 128 Button_in1 Button inverted, active high no internal pull-up resistor 129 Button_in2 Button inverted, active high no internal pull-up resistor 130 Button_in3 Button inverted, active high no internal pull-up resistor 131 Button_in4 Button inverted, active high no internal pull-up resistor 132 Button_in5 Button inverted, active high no internal pull-up resistor 133 Button_in6 Button inverted, active high no internal pull-up resistor 134 Button_in7 Button inverted, active high no internal pull-up resistor 135 Button_in8 Button inverted, active high no internal pull-up resistor 160 Switch1 Switch, internal pull-up resistor 161 Switch2 Switch, internal pull-up resistor 162 Switch3 Switch, internal pull-up resistor 163 Switch4 Switch, internal pull-up resistor 164 Switch5 Switch, internal pull-up resistor 165 Switch6 Switch, internal pull-up resistor 166 Switch7 Switch, internal pull-up resistor 167 Switch8 Switch, internal pull-up resistor 192 Switch_n1 Switch, no pull-up resistor 193 Switch_n2 Switch, no pull-up resistor 194 Switch_n3 Switch, no pull-up resistor 195 Switch_n4 Switch, no pull-up resistor 196 Switch_n5 Switch, no pull-up resistor 197 Switch_n6 Switch, no pull-up resistor 198 Switch_n7 Switch, no pull-up resistor 199 Switch_n8 Switch, no pull-up resistor 224 Relay1 Relay 225 Relay2 Relay 226 Relay3 Relay 227 Relay4 Relay 228 Relay5 Relay 229 Relay6 Relay 230 Relay7 Relay 231 Relay8 Relay 255 User User pin 256 Relay_i1 Relay inverted 257 Relay_i2 Relay inverted 258 Relay_i3 Relay inverted 259 Relay_i4 Relay inverted 260 Relay_i5 Relay inverted 261 Relay_i6 Relay inverted 262 Relay_i7 Relay inverted 263 Relay_i8 Relay inverted 288 Led1 4 x Leds 289 Led2 4 x Leds 290 Led3 4 x Leds 291 Led4 4 x Leds 320 Led_i1 4 x Leds 321 Led_i2 4 x Leds 322 Led_i3 4 x Leds 323 Led_i4 4 x Leds 352 Counter1 4 x Counter 353 Counter2 4 x Counter 354 Counter3 4 x Counter 355 Counter4 4 x Counter 384 Counter_n1 4 x Counter 385 Counter_n2 4 x Counter 386 Counter_n3 4 x Counter 387 Counter_n4 4 x Counter 416 PWM1 5 x PWM 417 PWM2 5 x PWM 418 PWM3 5 x PWM 419 PWM4 5 x PWM 420 PWM5 5 x PWM 448 PWM_i1 5 x PWM 449 PWM_i2 5 x PWM 450 PWM_i3 5 x PWM 451 PWM_i4 5 x PWM 452 PWM_i5 5 x PWM 480 Buzzer Buzzer 512 Buzzer_i Buzzer 544 LedLink Link led 576 LedLink_i Link led 608 I2C SCL1 Software I2C 640 I2C SDA1 Software I2C 672 SPI MISO1 Hardware SPI 704 SPI MOSI1 Hardware SPI 736 SPI CLK1 Hardware SPI 768 SPI CS1 Hardware SPI 800 SPI DC1 Hardware SPI 832 SSPI MISO Software SPI 864 SSPI MOSI Software SPI 896 SSPI SCLK Software SPI 928 SSPI CS Software SPI 960 SSPI DC Software SPI 992 Backlight Display backlight control 1024 Display Rst OLED Display Reset 1056 IRsend IR interface 1088 IRrecv IR interface 1120 RFSend RF interface 1152 RFrecv RF interface 1184 DHT11 DHT11 1216 AM2301 DHT21 DHT22 AM2301 AM2302 AM2321 1248 SI7021 SI7021 1280 DHT11_o DHT11 1312 DS18x20 DS18B20 or DS18S20 1344 DS18x20_o DS18B20 or DS18S20 1376 WS2812 WS2812 Led string 1408 MHZ Tx MH-Z19 Serial interface 1440 MHZ Rx MH-Z19 Serial interface 1472 PZEM0XX Tx PZEM Serial Modbus interface 1504 PZEM004 Rx PZEM Serial Modbus interface 1536 PZEM016 Rx PZEM Serial Modbus interface 1568 PZEM017 Rx PZEM Serial Modbus interface 1600 SAir Tx SenseAir Serial interface 1632 SAir Rx SenseAir Serial interface 1664 PMS5003 Tx Plantower PMS5003 Serial interface 1696 PMS5003 Rx Plantower PMS5003 Serial interface 1728 SDS0X1 Tx Nova Fitness SDS011 Serial interface 1760 SDS0X1 Rx Nova Fitness SDS011 Serial interface 1792 SerBr Tx Serial Bridge Serial interface 1824 SerBr Rx Serial Bridge Serial interface 1856 SR04 Tri/TX SR04 interface 1888 SR04 Ech/RX SR04 interface 1920 SDMx20 Tx SDM120 Serial interface 1952 SDMx20 Rx SDM120 Serial interface 1984 SDM630 Tx SDM630 Serial interface 2016 SDM630 Rx SDM630 Serial interface 2048 TM1638 CLK TM1638 interface 2080 TM1638 DIO TM1638 interface 2112 TM1638 STB TM1638 interface 2144 MP3 Player RB-DFR-562 DFPlayer Mini MP3 Player 2176 HX711 SCK HX711 Load Cell interface 2208 HX711 DAT HX711 Load Cell interface 2240 TX2x TX20/TX23 Transmission Pin 2272 Tuya Tx Tuya Serial interface 2304 Tuya Rx Tuya Serial interface 2336 MGC3130 Xfr MGC3130 interface 2368 MGC3130 Rst MGC3130 interface 2400 RF Sensor Rf receiver with sensor decoding 2432 AZ Tx AZ-Instrument 7798 Serial interface 2464 AZ Rx AZ-Instrument 7798 Serial interface 2496 MX31855 CS MAX31855 Serial interface 2528 MX31855 CLK MAX31855 Serial interface 2560 MX31855 DO MAX31855 Serial interface 2592 HLWBL SEL HLW8012/HJL-01/BL0937 energy monitoring 2624 HLWBL SEL_i HLW8012/HJL-01/BL0937 energy monitoring 2656 HLWBL CF1 HLW8012/HJL-01/BL0937 energy monitoring 2688 HLW8012 CF HLW8012/HJL-01/BL0937 energy monitoring 2720 BL0937 CF HLW8012/HJL-01/BL0937 energy monitoring 2752 MCP39F5 Tx MCP39F501 Energy monitoring (Shelly2) 2784 MCP39F5 Rx MCP39F501 Energy monitoring (Shelly2) 2816 MCP39F5 Rst MCP39F501 Energy monitoring (Shelly2) 2848 PN532 Tx PN532 NFC Serial interface 2880 PN532 Rx PN532 NFC Serial interface 2912 SM16716 CLK SM16716 SELECT 2944 SM16716 DAT SM16716 SELECT 2976 SM16716 PWR SM16716 SELECT 3008 MY92x1 DI my92x1 PWM controller 3040 MY92x1 DCKI my92x1 PWM controller 3072 CSE7766 Tx CSE7766 Serial interface (S31 and Pow R2) 3104 CSE7766 Rx CSE7766 Serial interface (S31 and Pow R2) 3136 ALux IrRcv Arilux RF Receive input 3168 ALux IrSel Arilux RF Receive input 3200 Serial Tx Serial interface 3232 Serial Rx Serial interface 3264 RotaryA1 Rotary switch 3265 RotaryA2 Rotary switch 3296 RotaryB1 Rotary switch 3297 RotaryB2 Rotary switch 3328 ADC Joystick Analog joystick 3360 MX31865 CS1 MAX31865 Chip Select 3361 MX31865 CS2 MAX31865 Chip Select 3362 MX31865 CS3 MAX31865 Chip Select 3363 MX31865 CS4 MAX31865 Chip Select 3364 MX31865 CS5 MAX31865 Chip Select 3365 MX31865 CS6 MAX31865 Chip Select 3392 HRE Clock HR-E Water Meter 3424 HRE Data HR-E Water Meter 3456 ADE7953 IRQ1 ADE7953 IRQ 3457 ADE7953 IRQ2 ADE7953 IRQ 3488 SolaxX1 Tx Solax Inverter Serial interface 3520 SolaxX1 Rx Solax Inverter Serial interface 3552 Zigbee Tx Zigbee Serial interface 3584 Zigbee Rx Zigbee Serial interface 3616 RDM6300 RX RDM6300 RX 3648 iBeacon TX HM17 IBEACON Serial interface 3680 iBeacon RX HM17 IBEACON Serial interface 3712 A4988 DIR A4988 interface 3744 A4988 STP A4988 interface 3776 A4988 ENA A4988 interface 3808 A4988 MS11 A4988 interface 3809 A4988 MS12 A4988 interface 3810 A4988 MS13 A4988 interface 3840 Output Hi Fixed output state 3872 Output Lo Fixed output state 3904 DDS238-2 Tx DDS2382 Serial interface 3936 DDS238-2 Rx DDS2382 Serial interface 3968 DDSU666 Tx DDSU666 Serial interface 4000 DDSU666 Rx DDSU666 Serial interface 4032 SM2135 Clk SM2135 PWM controller 4064 SM2135 Dat1 SM2135 PWM controller 4065 SM2135 Dat2 SM2135 PWM controller 4066 SM2135 Dat3 SM2135 PWM controller 4067 SM2135 Dat4 SM2135 PWM controller 4068 SM2135 Dat5 SM2135 PWM controller 4069 SM2135 Dat6 SM2135 PWM controller 4070 SM2135 Dat7 SM2135 PWM controller 4096 DeepSleep Kill switch for deepsleep 4128 EXS Enable EXS MCU Enable 4160 Client TX Client Serial interface 4192 Client RX Client Serial interface 4224 Client RST Client Reset 4256 Client RST_i Client Reset 4288 HPMA Rx Honeywell HPMA115S0 Serial interface 4320 HPMA Tx Honeywell HPMA115S0 Serial interface 4352 GPS RX GPS Serial interface 4384 GPS TX GPS Serial interface 4416 HM10 RX HM10-BLE-Mijia-bridge Serial interface 4448 HM10 TX HM10-BLE-Mijia-bridge Serial interface 4480 LE-01MR Rx F&amp;F LE-01MR energy meter 4512 LE-01MR Tx F&amp;F LE-01MR energy meter 4544 CC1101 GDO0 CC1101 Serial interface 4576 CC1101 GDO2 CC1101 Serial interface 4608 HRXL Rx Data from MaxBotix HRXL sonar range sensor 4640 MOODL Tx ElectriQ iQ-wifiMOODL Serial TX 4672 AS3935 Franklin Lightning Sensor 4704 ADC Input Analog input 4736 ADC Temp Analog Thermistor 4768 ADC Light Analog Light sensor 4800 ADC Button Analog Button 4832 ADC Button_i Analog Button 4864 ADC Range Analog Range 4896 ADC CT Power ANalog Current 4928 OpenTherm RX OpenTherm Boiler TX pin 4960 OpenTherm TX OpenTherm Boiler TX pin 4992 WindMeter Spd WindMeter speed counter pin 5024 Button_tc Touch pin as button 5056 BL0940 Rx BL0940 serial interface 5088 TCP Tx TCP to serial bridge 5120 TCP Rx TCP to serial bridge 5152 TInfo Rx Teleinfo telemetry data receive pin 5184 TInfo EN Teleinfo Enable Receive Pin 5216 LMT01 Pulse LMT01 input counting pin 5248 iEM3000 TX IEM3000 Serial interface 5280 iEM3000 RX IEM3000 Serial interface 5312 Zigbee Rst1 Zigbee reset 5313 Zigbee Rst2 Zigbee reset 5344 DYP Rx 5376 MiEl HVAC Tx Mitsubishi Electric HVAC 5408 MiEl HVAC Rx Mitsubishi Electric HVAC 5440 WE517 Tx ORNO WE517 Serial interface 5472 WE517 Rx ORNO WE517 Serial interface 5504 AS608 Tx Serial interface AS608 / R503 5536 AS608 Rx Serial interface AS608 / R503 5568 SHD Boot 0 5600 SHD Reset 5632 RC522 Rst RC522 reset 5664 P9813 Clk P9813 Clock and Data 5696 P9813 Dat P9813 Clock and Data 5728 OptionA1 Specific device options to be served in code 5729 OptionA2 Specific device options to be served in code 5730 OptionA3 Specific device options to be served in code 5731 OptionA4 Specific device options to be served in code 5732 OptionA5 Specific device options to be served in code 5733 OptionA6 Specific device options to be served in code 5760 FTC532 FTC532 touch ctrlr serial input 5792 RC522 CS 5824 NRF24 CS 5856 NRF24 DC 5888 ILI9341 CS 5920 ILI9341 DC 5952 ILI9488 CS 5984 EPaper29 CS 6016 EPaper42 CS 6048 SSD1351 CS 6080 RA8876 CS 6112 ST7789 CS 6144 ST7789 DC 6176 SSD1331 CS 6208 SSD1331 DC 6240 SDCard CS 6272 RotaryA_n1 Rotary switch 6273 RotaryA_n2 Rotary switch 6304 RotaryB_n1 Rotary switch 6305 RotaryB_n2 Rotary switch 6336 ADC pH Analog PH Sensor 6368 BS814 CLK Holtek BS814A2 touch ctrlr 6400 BS814 DAT Holtek BS814A2 touch ctrlr 6432 Wiegand D0 Wiegand Data lines 6464 Wiegand D1 Wiegand Data lines 6496 NeoPool Tx Sugar Valley RS485 interface 6528 NeoPool Rx Sugar Valley RS485 interface 6560 SDM72 Tx SDM72 Serial interface 6592 SDM72 Rx SDM72 Serial interface 6624 TM1637 CLK TM1637 interface 6656 TM1637 DIO TM1637 interface 6688 DLP Tx LCD/DLP Projector Serial Control 6720 DLP Rx LCD/DLP Projector Serial Control 6752 SSD1351 DC 6784 XPT2046 CS XPT2046 SPI Chip Select 6816 CSE7761 Tx CSE7761 Serial interface (Dual R3) 6848 CSE7761 Rx CSE7761 Serial interface (Dual R3) 6880 VL53LXX XSHUT1 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6881 VL53LXX XSHUT2 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6882 VL53LXX XSHUT3 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6883 VL53LXX XSHUT4 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6884 VL53LXX XSHUT5 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6885 VL53LXX XSHUT6 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6886 VL53LXX XSHUT7 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6887 VL53LXX XSHUT8 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 6912 MAX7219 CLK MAX7219 interface 6944 MAX7219 DIN MAX7219 interface 6976 MAX7219 CS MAX7219 interface 7008 TFmini+ TX TFmini Plus ToF sensor 7040 TFmini+ RX TFmini Plus ToF sensor 7072 ZC Pulse 7104 Input1 7105 Input2 7106 Input3 7107 Input4 7108 Input5 7109 Input6 7110 Input7 7111 Input8 7136 I2S Out Data1 7168 I2S Out Clk1 7200 I2S Out Slct1 7232 I2S In Data1 7264 I2S In Clk1 7296 I2S In Slct1 7328 Interrupt1 7329 Interrupt2 7330 Interrupt3 7331 Interrupt4 7332 Interrupt5 7333 Interrupt6 7334 Interrupt7 7335 Interrupt8 7360 MCP2515 CS MCP2515 Chip Select 7392 HRG15 Tx Hydreon RG-15 rain sensor serial interface 7424 HRG15 Rx Hydreon RG-15 rain sensor serial interface 7456 VINDRIKTNING IKEA VINDRIKTNING Serial interface 7488 BL0939 Rx BL0939 Serial interface (Dual R3 v2) 7520 BL0942 Rx BL0942 Serial interface 7552 HM330X SET HM330X SET pin (sleep when low) 7584 Heartbeat 7616 Heartbeat_i 7648 74x595 SRCLK 74x595 Shift register 7680 74x595 RCLK 74x595 Shift register 7712 74x595 OE 74x595 Shift register 7744 74x595 SER 74x595 Shift register 7776 SolaxX1 RTS Solax Inverter Serial interface 7808 OptionE Emulated module 7840 SDM230 Tx SDM230 Serial interface 7872 SDM230 Rx SDM230 Serial interface 7904 ADC MQ Analog MQ Sensor 7936 CM110x TX CM11 Serial interface 7968 CM110x RX CM11 Serial interface 8000 BL6523 Tx BL6523 based Watt meter Serial interface 8032 BL6523 Rx BL6523 based Watt meter Serial interface 8064 ADE7880 IRQ1 ADE7880 IRQ 8065 ADE7880 IRQ2 ADE7880 IRQ 8096 Reset Generic reset 8128 MS01 Sonoff MS01 Moisture Sensor 1wire interface 8160 SDIO CMD SD Card SDIO interface including 1-bit and 4-bit modes 8192 SDIO CLK SD Card SDIO interface including 1-bit and 4-bit modes 8224 SDIO D0 SD Card SDIO interface including 1-bit and 4-bit modes 8256 SDIO D1 SD Card SDIO interface including 1-bit and 4-bit modes 8288 SDIO D2 SD Card SDIO interface including 1-bit and 4-bit modes 8320 SDIO D3 SD Card SDIO interface including 1-bit and 4-bit modes"},{"location":"Components/#tasmota32","title":"Tasmota32","text":"# UI Label Comment 0 None Not used 1 User User pin 32 Button1 4 x Button 33 Button2 4 x Button 34 Button3 4 x Button 35 Button4 4 x Button 36 Button5 4 x Button 37 Button6 4 x Button 38 Button7 4 x Button 39 Button8 4 x Button 64 Button_n1 4 x Button 65 Button_n2 4 x Button 66 Button_n3 4 x Button 67 Button_n4 4 x Button 68 Button_n5 4 x Button 69 Button_n6 4 x Button 70 Button_n7 4 x Button 71 Button_n8 4 x Button 96 Button_i1 4 x Button 97 Button_i2 4 x Button 98 Button_i3 4 x Button 99 Button_i4 4 x Button 100 Button_i5 4 x Button 101 Button_i6 4 x Button 102 Button_i7 4 x Button 103 Button_i8 4 x Button 128 Button_in1 4 x Button 129 Button_in2 4 x Button 130 Button_in3 4 x Button 131 Button_in4 4 x Button 132 Button_in5 4 x Button 133 Button_in6 4 x Button 134 Button_in7 4 x Button 135 Button_in8 4 x Button 160 Switch1 8 x User connected external switches 161 Switch2 8 x User connected external switches 162 Switch3 8 x User connected external switches 163 Switch4 8 x User connected external switches 164 Switch5 8 x User connected external switches 165 Switch6 8 x User connected external switches 166 Switch7 8 x User connected external switches 167 Switch8 8 x User connected external switches 168 Switch9 8 x User connected external switches 169 Switch10 8 x User connected external switches 170 Switch11 8 x User connected external switches 171 Switch12 8 x User connected external switches 172 Switch13 8 x User connected external switches 173 Switch14 8 x User connected external switches 174 Switch15 8 x User connected external switches 175 Switch16 8 x User connected external switches 176 Switch17 8 x User connected external switches 177 Switch18 8 x User connected external switches 178 Switch19 8 x User connected external switches 179 Switch20 8 x User connected external switches 180 Switch21 8 x User connected external switches 181 Switch22 8 x User connected external switches 182 Switch23 8 x User connected external switches 183 Switch24 8 x User connected external switches 184 Switch25 8 x User connected external switches 185 Switch26 8 x User connected external switches 186 Switch27 8 x User connected external switches 187 Switch28 8 x User connected external switches 192 Switch_n1 8 x User connected external switches 193 Switch_n2 8 x User connected external switches 194 Switch_n3 8 x User connected external switches 195 Switch_n4 8 x User connected external switches 196 Switch_n5 8 x User connected external switches 197 Switch_n6 8 x User connected external switches 198 Switch_n7 8 x User connected external switches 199 Switch_n8 8 x User connected external switches 200 Switch_n9 8 x User connected external switches 201 Switch_n10 8 x User connected external switches 202 Switch_n11 8 x User connected external switches 203 Switch_n12 8 x User connected external switches 204 Switch_n13 8 x User connected external switches 205 Switch_n14 8 x User connected external switches 206 Switch_n15 8 x User connected external switches 207 Switch_n16 8 x User connected external switches 208 Switch_n17 8 x User connected external switches 209 Switch_n18 8 x User connected external switches 210 Switch_n19 8 x User connected external switches 211 Switch_n20 8 x User connected external switches 212 Switch_n21 8 x User connected external switches 213 Switch_n22 8 x User connected external switches 214 Switch_n23 8 x User connected external switches 215 Switch_n24 8 x User connected external switches 216 Switch_n25 8 x User connected external switches 217 Switch_n26 8 x User connected external switches 218 Switch_n27 8 x User connected external switches 219 Switch_n28 8 x User connected external switches 224 Relay1 8 x Relays 225 Relay2 8 x Relays 226 Relay3 8 x Relays 227 Relay4 8 x Relays 228 Relay5 8 x Relays 229 Relay6 8 x Relays 230 Relay7 8 x Relays 231 Relay8 8 x Relays 232 Relay9 8 x Relays 233 Relay10 8 x Relays 234 Relay11 8 x Relays 235 Relay12 8 x Relays 236 Relay13 8 x Relays 237 Relay14 8 x Relays 238 Relay15 8 x Relays 239 Relay16 8 x Relays 240 Relay17 8 x Relays 241 Relay18 8 x Relays 242 Relay19 8 x Relays 243 Relay20 8 x Relays 244 Relay21 8 x Relays 245 Relay22 8 x Relays 246 Relay23 8 x Relays 247 Relay24 8 x Relays 248 Relay25 8 x Relays 249 Relay26 8 x Relays 250 Relay27 8 x Relays 251 Relay28 8 x Relays 256 Relay_i1 8 x Relays 257 Relay_i2 8 x Relays 258 Relay_i3 8 x Relays 259 Relay_i4 8 x Relays 260 Relay_i5 8 x Relays 261 Relay_i6 8 x Relays 262 Relay_i7 8 x Relays 263 Relay_i8 8 x Relays 264 Relay_i9 8 x Relays 265 Relay_i10 8 x Relays 266 Relay_i11 8 x Relays 267 Relay_i12 8 x Relays 268 Relay_i13 8 x Relays 269 Relay_i14 8 x Relays 270 Relay_i15 8 x Relays 271 Relay_i16 8 x Relays 272 Relay_i17 8 x Relays 273 Relay_i18 8 x Relays 274 Relay_i19 8 x Relays 275 Relay_i20 8 x Relays 276 Relay_i21 8 x Relays 277 Relay_i22 8 x Relays 278 Relay_i23 8 x Relays 279 Relay_i24 8 x Relays 280 Relay_i25 8 x Relays 281 Relay_i26 8 x Relays 282 Relay_i27 8 x Relays 283 Relay_i28 8 x Relays 288 Led1 4 x Leds 289 Led2 4 x Leds 290 Led3 4 x Leds 291 Led4 4 x Leds 320 Led_i1 4 x Leds 321 Led_i2 4 x Leds 322 Led_i3 4 x Leds 323 Led_i4 4 x Leds 352 Counter1 4 x Counter 353 Counter2 4 x Counter 354 Counter3 4 x Counter 355 Counter4 4 x Counter 384 Counter_n1 4 x Counter 385 Counter_n2 4 x Counter 386 Counter_n3 4 x Counter 387 Counter_n4 4 x Counter 416 PWM1 5 x PWM 417 PWM2 5 x PWM 418 PWM3 5 x PWM 419 PWM4 5 x PWM 420 PWM5 5 x PWM 448 PWM_i1 5 x PWM 449 PWM_i2 5 x PWM 450 PWM_i3 5 x PWM 451 PWM_i4 5 x PWM 452 PWM_i5 5 x PWM 480 Buzzer Buzzer 512 Buzzer_i Buzzer 544 LedLink Link led 576 LedLink_i Link led 608 I2C SCL1 Software I2C 609 I2C SCL2 Software I2C 640 I2C SDA1 Software I2C 641 I2C SDA2 Software I2C 672 SPI MISO1 Hardware SPI 673 SPI MISO2 Hardware SPI 704 SPI MOSI1 Hardware SPI 705 SPI MOSI2 Hardware SPI 736 SPI CLK1 Hardware SPI 737 SPI CLK2 Hardware SPI 768 SPI CS1 Hardware SPI 769 SPI CS2 Hardware SPI 800 SPI DC1 Hardware SPI 801 SPI DC2 Hardware SPI 832 SSPI MISO Software SPI 864 SSPI MOSI Software SPI 896 SSPI SCLK Software SPI 928 SSPI CS Software SPI 960 SSPI DC Software SPI 992 Backlight Display backlight control 1024 Display Rst OLED Display Reset 1056 IRsend IR interface 1088 IRrecv IR interface 1120 RFSend RF interface 1152 RFrecv RF interface 1184 DHT11 DHT11 DHT21 DHT22 AM2301 AM2302 AM2321 1216 AM2301 DHT11 DHT21 DHT22 AM2301 AM2302 AM2321 1248 SI7021 DHT11 DHT21 DHT22 AM2301 AM2302 AM2321 1280 DHT11_o DHT11 DHT21 DHT22 AM2301 AM2302 AM2321 1312 DS18x20 DS18B20 or DS18S20 1344 DS18x20_o DS18B20 or DS18S20 1376 WS2812 WS2812 Led string 1408 MHZ Tx MH-Z19 Serial interface 1440 MHZ Rx MH-Z19 Serial interface 1472 PZEM0XX Tx PZEM Serial Modbus interface 1504 PZEM004 Rx PZEM Serial Modbus interface 1536 PZEM016 Rx PZEM Serial Modbus interface 1568 PZEM017 Rx PZEM Serial Modbus interface 1600 SAir Tx SenseAir Serial interface 1632 SAir Rx SenseAir Serial interface 1664 PMS5003 Tx Plantower PMS5003 Serial interface 1696 PMS5003 Rx Plantower PMS5003 Serial interface 1728 SDS0X1 Tx Nova Fitness SDS011 Serial interface 1760 SDS0X1 Rx Nova Fitness SDS011 Serial interface 1792 SerBr Tx Serial Bridge Serial interface 1824 SerBr Rx Serial Bridge Serial interface 1856 SR04 Tri/TX SR04 interface 1888 SR04 Ech/RX SR04 interface 1920 SDMx20 Tx SDM120 Serial interface 1952 SDMx20 Rx SDM120 Serial interface 1984 SDM630 Tx SDM630 Serial interface 2016 SDM630 Rx SDM630 Serial interface 2048 TM1638 CLK TM1638 interface 2080 TM1638 DIO TM1638 interface 2112 TM1638 STB TM1638 interface 2144 MP3 Player RB-DFR-562 DFPlayer Mini MP3 Player 2176 HX711 SCK HX711 Load Cell interface 2208 HX711 DAT HX711 Load Cell interface 2240 TX2x TX20/TX23 Transmission Pin 2272 Tuya Tx Tuya Serial interface 2304 Tuya Rx Tuya Serial interface 2336 MGC3130 Xfr MGC3130 interface 2368 MGC3130 Rst MGC3130 interface 2400 RF Sensor Rf receiver with sensor decoding 2432 AZ Tx AZ-Instrument 7798 Serial interface 2464 AZ Rx AZ-Instrument 7798 Serial interface 2496 MX31855 CS MAX31855 Serial interface 2528 MX31855 CLK MAX31855 Serial interface 2560 MX31855 DO MAX31855 Serial interface 2592 HLWBL SEL HLW8012/HJL-01/BL0937 energy monitoring 2624 HLWBL SEL_i HLW8012/HJL-01/BL0937 energy monitoring 2656 HLWBL CF1 HLW8012/HJL-01/BL0937 energy monitoring 2688 HLW8012 CF HLW8012/HJL-01/BL0937 energy monitoring 2720 BL0937 CF HLW8012/HJL-01/BL0937 energy monitoring 2752 MCP39F5 Tx MCP39F501 Energy monitoring (Shelly2) 2784 MCP39F5 Rx MCP39F501 Energy monitoring (Shelly2) 2816 MCP39F5 Rst MCP39F501 Energy monitoring (Shelly2) 2848 PN532 Tx PN532 NFC Serial interface 2880 PN532 Rx PN532 NFC Serial interface 2912 SM16716 CLK SM16716 SELECT 2944 SM16716 DAT SM16716 SELECT 2976 SM16716 PWR SM16716 SELECT 3008 MY92x1 DI my92x1 PWM controller 3040 MY92x1 DCKI my92x1 PWM controller 3072 CSE7766 Tx CSE7766 Serial interface (S31 and Pow R2) 3104 CSE7766 Rx CSE7766 Serial interface (S31 and Pow R2) 3136 ALux IrRcv Arilux RF Receive input 3168 ALux IrSel Arilux RF Receive input 3200 Serial Tx Serial interface 3232 Serial Rx Serial interface 3264 RotaryA1 Rotary switch 3265 RotaryA2 Rotary switch 3296 RotaryB1 Rotary switch 3297 RotaryB2 Rotary switch 3328 ADC Joystick1 Analog joystick 3329 ADC Joystick2 Analog joystick 3330 ADC Joystick3 Analog joystick 3331 ADC Joystick4 Analog joystick 3332 ADC Joystick5 Analog joystick 3333 ADC Joystick6 Analog joystick 3334 ADC Joystick7 Analog joystick 3335 ADC Joystick8 Analog joystick 3360 MX31865 CS1 MAX31865 Chip Select 3361 MX31865 CS2 MAX31865 Chip Select 3362 MX31865 CS3 MAX31865 Chip Select 3363 MX31865 CS4 MAX31865 Chip Select 3364 MX31865 CS5 MAX31865 Chip Select 3365 MX31865 CS6 MAX31865 Chip Select 3392 HRE Clock HR-E Water Meter 3424 HRE Data HR-E Water Meter 3456 ADE7953 IRQ1 ADE7953 IRQ 3457 ADE7953 IRQ2 ADE7953 IRQ 3488 SolaxX1 Tx Solax Inverter Serial interface 3520 SolaxX1 Rx Solax Inverter Serial interface 3552 Zigbee Tx Zigbee Serial interface 3584 Zigbee Rx Zigbee Serial interface 3616 RDM6300 RX RDM6300 RX 3648 iBeacon TX HM17 IBEACON Serial interface 3680 iBeacon RX HM17 IBEACON Serial interface 3712 A4988 DIR A4988 interface 3744 A4988 STP A4988 interface 3776 A4988 ENA A4988 interface 3808 A4988 MS11 A4988 interface 3809 A4988 MS12 A4988 interface 3810 A4988 MS13 A4988 interface 3840 Output Hi Fixed output state 3872 Output Lo Fixed output state 3904 DDS238-2 Tx DDS2382 Serial interface 3936 DDS238-2 Rx DDS2382 Serial interface 3968 DDSU666 Tx DDSU666 Serial interface 4000 DDSU666 Rx DDSU666 Serial interface 4032 SM2135 Clk SM2135 PWM controller 4064 SM2135 Dat1 SM2135 PWM controller 4065 SM2135 Dat2 SM2135 PWM controller 4066 SM2135 Dat3 SM2135 PWM controller 4067 SM2135 Dat4 SM2135 PWM controller 4068 SM2135 Dat5 SM2135 PWM controller 4069 SM2135 Dat6 SM2135 PWM controller 4070 SM2135 Dat7 SM2135 PWM controller 4096 DeepSleep Kill switch for deepsleep 4128 EXS Enable EXS MCU Enable 4160 Client TX Client Serial interface 4192 Client RX Client Serial interface 4224 Client RST Client Reset 4256 Client RST_i Client Reset 4288 HPMA Rx Honeywell HPMA115S0 Serial interface 4320 HPMA Tx Honeywell HPMA115S0 Serial interface 4352 GPS RX GPS Serial interface 4384 GPS TX GPS Serial interface 4416 HM10 RX HM10-BLE-Mijia-bridge Serial interface 4448 HM10 TX HM10-BLE-Mijia-bridge Serial interface 4480 LE-01MR Rx F&amp;F LE-01MR energy meter 4512 LE-01MR Tx F&amp;F LE-01MR energy meter 4544 CC1101 GDO0 CC1101 Serial interface 4576 CC1101 GDO2 CC1101 Serial interface 4608 HRXL Rx Data from MaxBotix HRXL sonar range sensor 4640 MOODL Tx ElectriQ iQ-wifiMOODL Serial TX 4672 AS3935 Franklin Lightning Sensor 4704 ADC Input1 Analog input 4705 ADC Input2 Analog input 4706 ADC Input3 Analog input 4707 ADC Input4 Analog input 4708 ADC Input5 Analog input 4709 ADC Input6 Analog input 4710 ADC Input7 Analog input 4711 ADC Input8 Analog input 4736 ADC Temp1 Analog Thermistor 4737 ADC Temp2 Analog Thermistor 4738 ADC Temp3 Analog Thermistor 4739 ADC Temp4 Analog Thermistor 4740 ADC Temp5 Analog Thermistor 4741 ADC Temp6 Analog Thermistor 4742 ADC Temp7 Analog Thermistor 4743 ADC Temp8 Analog Thermistor 4768 ADC Light1 Analog Light sensor 4769 ADC Light2 Analog Light sensor 4770 ADC Light3 Analog Light sensor 4771 ADC Light4 Analog Light sensor 4772 ADC Light5 Analog Light sensor 4773 ADC Light6 Analog Light sensor 4774 ADC Light7 Analog Light sensor 4775 ADC Light8 Analog Light sensor 4800 ADC Button1 Analog Button 4801 ADC Button2 Analog Button 4802 ADC Button3 Analog Button 4803 ADC Button4 Analog Button 4804 ADC Button5 Analog Button 4805 ADC Button6 Analog Button 4806 ADC Button7 Analog Button 4807 ADC Button8 Analog Button 4832 ADC Button_i1 Analog Button 4833 ADC Button_i2 Analog Button 4834 ADC Button_i3 Analog Button 4835 ADC Button_i4 Analog Button 4836 ADC Button_i5 Analog Button 4837 ADC Button_i6 Analog Button 4838 ADC Button_i7 Analog Button 4839 ADC Button_i8 Analog Button 4864 ADC Range1 Analog Range 4865 ADC Range2 Analog Range 4866 ADC Range3 Analog Range 4867 ADC Range4 Analog Range 4868 ADC Range5 Analog Range 4869 ADC Range6 Analog Range 4870 ADC Range7 Analog Range 4871 ADC Range8 Analog Range 4896 ADC CT Power1 ANalog Current 4897 ADC CT Power2 ANalog Current 4898 ADC CT Power3 ANalog Current 4899 ADC CT Power4 ANalog Current 4900 ADC CT Power5 ANalog Current 4901 ADC CT Power6 ANalog Current 4902 ADC CT Power7 ANalog Current 4903 ADC CT Power8 ANalog Current 4928 CAM_PWDN Webcam 4960 CAM_RESET Webcam 4992 CAM_XCLK Webcam 5024 CAM_SIOD Webcam I2C 5056 CAM_SIOC Webcam I2C 5088 CAM_DATA1 5089 CAM_DATA2 5090 CAM_DATA3 5091 CAM_DATA4 5092 CAM_DATA5 5093 CAM_DATA6 5094 CAM_DATA7 5095 CAM_DATA8 5120 CAM_VSYNC 5152 CAM_HREF 5184 CAM_PCLK 5216 CAM_PSCLK 5248 CAM_HSD1 5249 CAM_HSD2 5250 CAM_HSD3 5280 CAM_PSRCS 5312 OpenTherm RX OpenTherm Boiler TX pin 5344 OpenTherm TX OpenTherm Boiler TX pin 5376 WindMeter Spd WindMeter speed counter pin 5408 Button_tc1 Touch pin as button 5409 Button_tc2 Touch pin as button 5410 Button_tc3 Touch pin as button 5411 Button_tc4 Touch pin as button 5412 Button_tc5 Touch pin as button 5413 Button_tc6 Touch pin as button 5414 Button_tc7 Touch pin as button 5415 Button_tc8 Touch pin as button 5440 BL0940 Rx BL0940 serial interface 5472 TCP Tx TCP to serial bridge 5504 TCP Rx TCP to serial bridge 5536 ETH POWER Ethernet 5568 ETH MDC Ethernet 5600 ETH MDIO Ethernet 5632 TInfo Rx Teleinfo telemetry data receive pin 5664 TInfo EN Teleinfo Enable Receive Pin 5696 LMT01 Pulse LMT01 input counting pin 5728 iEM3000 TX IEM3000 Serial interface 5760 iEM3000 RX IEM3000 Serial interface 5792 Zigbee Rst1 Zigbee reset 5793 Zigbee Rst2 Zigbee reset 5824 DYP Rx 5856 MiEl HVAC Tx Mitsubishi Electric HVAC 5888 MiEl HVAC Rx Mitsubishi Electric HVAC 5920 WE517 Tx ORNO WE517 Serial interface 5952 WE517 Rx ORNO WE517 Serial interface 5984 AS608 Tx Serial interface AS608 / R503 6016 AS608 Rx Serial interface AS608 / R503 6048 SHD Boot 0 6080 SHD Reset 6112 RC522 Rst RC522 reset 6144 P9813 Clk P9813 Clock and Data 6176 P9813 Dat P9813 Clock and Data 6208 OptionA1 Specific device options to be served in code 6209 OptionA2 Specific device options to be served in code 6210 OptionA3 Specific device options to be served in code 6211 OptionA4 Specific device options to be served in code 6212 OptionA5 Specific device options to be served in code 6213 OptionA6 Specific device options to be served in code 6240 FTC532 FTC532 touch ctrlr serial input 6272 RC522 CS 6304 NRF24 CS 6336 NRF24 DC 6368 ILI9341 CS 6400 ILI9341 DC 6432 ILI9488 CS 6464 EPaper29 CS 6496 EPaper42 CS 6528 SSD1351 CS 6560 RA8876 CS 6592 ST7789 CS 6624 ST7789 DC 6656 SSD1331 CS 6688 SSD1331 DC 6720 SDCard CS 6752 RotaryA_n1 Rotary switch 6753 RotaryA_n2 Rotary switch 6784 RotaryB_n1 Rotary switch 6785 RotaryB_n2 Rotary switch 6816 ADC pH1 Analog PH Sensor 6817 ADC pH2 Analog PH Sensor 6818 ADC pH3 Analog PH Sensor 6819 ADC pH4 Analog PH Sensor 6820 ADC pH5 Analog PH Sensor 6821 ADC pH6 Analog PH Sensor 6822 ADC pH7 Analog PH Sensor 6823 ADC pH8 Analog PH Sensor 6848 BS814 CLK Holtek BS814A2 touch ctrlr 6880 BS814 DAT Holtek BS814A2 touch ctrlr 6912 Wiegand D0 Wiegand Data lines 6944 Wiegand D1 Wiegand Data lines 6976 NeoPool Tx Sugar Valley RS485 interface 7008 NeoPool Rx Sugar Valley RS485 interface 7040 SDM72 Tx SDM72 Serial interface 7072 SDM72 Rx SDM72 Serial interface 7104 TM1637 CLK TM1637 interface 7136 TM1637 DIO TM1637 interface 7168 DLP Tx LCD/DLP Projector Serial Control 7200 DLP Rx LCD/DLP Projector Serial Control 7232 SSD1351 DC 7264 XPT2046 CS XPT2046 SPI Chip Select 7296 CSE7761 Tx CSE7761 Serial interface (Dual R3) 7328 CSE7761 Rx CSE7761 Serial interface (Dual R3) 7360 VL53LXX XSHUT1 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7361 VL53LXX XSHUT2 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7362 VL53LXX XSHUT3 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7363 VL53LXX XSHUT4 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7364 VL53LXX XSHUT5 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7365 VL53LXX XSHUT6 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7366 VL53LXX XSHUT7 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7367 VL53LXX XSHUT8 VL53LXX_XSHUT (the max number of sensors is VL53LXX_MAX_SENSORS)- Used when connecting multiple VL53LXX 7392 MAX7219 CLK MAX7219 interface 7424 MAX7219 DIN MAX7219 interface 7456 MAX7219 CS MAX7219 interface 7488 TFmini+ TX TFmini Plus ToF sensor 7520 TFmini+ RX TFmini Plus ToF sensor 7552 ZC Pulse 7584 HallEffect1 7585 HallEffect2 7616 EPD Data Base connection EPD driver 7648 Input1 7649 Input2 7650 Input3 7651 Input4 7652 Input5 7653 Input6 7654 Input7 7655 Input8 7656 Input9 7657 Input10 7658 Input11 7659 Input12 7660 Input13 7661 Input14 7662 Input15 7663 Input16 7664 Input17 7665 Input18 7666 Input19 7667 Input20 7668 Input21 7669 Input22 7670 Input23 7671 Input24 7672 Input25 7673 Input26 7674 Input27 7675 Input28 7680 Button_d1 7681 Button_d2 7682 Button_d3 7683 Button_d4 7684 Button_d5 7685 Button_d6 7686 Button_d7 7687 Button_d8 7712 Button_id1 7713 Button_id2 7714 Button_id3 7715 Button_id4 7716 Button_id5 7717 Button_id6 7718 Button_id7 7719 Button_id8 7744 Switch_d1 7745 Switch_d2 7746 Switch_d3 7747 Switch_d4 7748 Switch_d5 7749 Switch_d6 7750 Switch_d7 7751 Switch_d8 7752 Switch_d9 7753 Switch_d10 7754 Switch_d11 7755 Switch_d12 7756 Switch_d13 7757 Switch_d14 7758 Switch_d15 7759 Switch_d16 7760 Switch_d17 7761 Switch_d18 7762 Switch_d19 7763 Switch_d20 7764 Switch_d21 7765 Switch_d22 7766 Switch_d23 7767 Switch_d24 7768 Switch_d25 7769 Switch_d26 7770 Switch_d27 7771 Switch_d28 7776 I2S Out Data1 7777 I2S Out Data2 7808 I2S Out Clk1 7809 I2S Out Clk2 7840 I2S Out Slct1 7841 I2S Out Slct2 7872 I2S In Data1 7873 I2S In Data2 7904 I2S In Clk1 7905 I2S In Clk2 7936 I2S In Slct1 7937 I2S In Slct2 7968 Interrupt1 7969 Interrupt2 7970 Interrupt3 7971 Interrupt4 7972 Interrupt5 7973 Interrupt6 7974 Interrupt7 7975 Interrupt8 7976 Interrupt9 7977 Interrupt10 7978 Interrupt11 7979 Interrupt12 7980 Interrupt13 7981 Interrupt14 7982 Interrupt15 7983 Interrupt16 7984 Interrupt17 7985 Interrupt18 7986 Interrupt19 7987 Interrupt20 7988 Interrupt21 7989 Interrupt22 7990 Interrupt23 7991 Interrupt24 7992 Interrupt25 7993 Interrupt26 7994 Interrupt27 7995 Interrupt28 8000 MCP2515 CS MCP2515 Chip Select 8032 HRG15 Tx Hydreon RG-15 rain sensor serial interface 8064 HRG15 Rx Hydreon RG-15 rain sensor serial interface 8096 VINDRIKTNING IKEA VINDRIKTNING Serial interface 8128 BL0939 Rx BL0939 Serial interface (Dual R3 v2) 8160 BL0942 Rx BL0942 Serial interface 8192 HM330X SET HM330X SET pin (sleep when low) 8224 Heartbeat 8256 Heartbeat_i 8288 74x595 SRCLK 74x595 Shift register 8320 74x595 RCLK 74x595 Shift register 8352 74x595 OE 74x595 Shift register 8384 74x595 SER 74x595 Shift register 8416 SolaxX1 RTS Solax Inverter Serial interface 8448 OptionE1 Emulated module 8480 SDM230 Tx SDM230 Serial interface 8512 SDM230 Rx SDM230 Serial interface 8544 ADC MQ1 Analog MQ Sensor 8545 ADC MQ2 Analog MQ Sensor 8546 ADC MQ3 Analog MQ Sensor 8547 ADC MQ4 Analog MQ Sensor 8548 ADC MQ5 Analog MQ Sensor 8549 ADC MQ6 Analog MQ Sensor 8550 ADC MQ7 Analog MQ Sensor 8551 ADC MQ8 Analog MQ Sensor 8576 CM110x TX CM11 Serial interface 8608 CM110x RX CM11 Serial interface 8640 BL6523 Tx BL6523 based Watt meter Serial interface 8672 BL6523 Rx BL6523 based Watt meter Serial interface 8704 ADE7880 IRQ1 ADE7880 IRQ 8705 ADE7880 IRQ2 ADE7880 IRQ 8736 Reset Generic reset 8768 MS01 Sonoff MS01 Moisture Sensor 1wire interface 8800 SDIO CMD SD Card SDIO interface including 1-bit and 4-bit modes 8832 SDIO CLK SD Card SDIO interface including 1-bit and 4-bit modes 8864 SDIO D0 SD Card SDIO interface including 1-bit and 4-bit modes 8896 SDIO D1 SD Card SDIO interface including 1-bit and 4-bit modes 8928 SDIO D2 SD Card SDIO interface including 1-bit and 4-bit modes 8960 SDIO D3 SD Card SDIO interface including 1-bit and 4-bit modes"},{"location":"Configuration-Procedure-for-New-Devices/","title":"Configuration procedure for new devices","text":"<p>If your device is not a built-in module listed in the module configuration menu, a user contributed device template (explanation) may be available. Otherwise, follow this procedure for configuring the ESP chip pins used by your device.</p> <p>Some smart devices have additional functionality which may be handled by codes sent to a separate MCU in the device. Devices with functions offloaded to a separate MCU require additional coding in the software or via rules. Certain supported Tasmota BASE devices have built-in code to handle MCU controlled devices. Using a template with an appropriate BASE device may have the programming logic required to manage the MCU commands for your device. If an existing BASE device with the logic for your device is not available, a modified device driver will be required. This case is outside of the scope of this article.</p> <p>If your device is similar to the existing built-in module (e.g., a particular MCU or power monitoring algorithm) it is best to use that as a starting point. When you are not sure which module is suitable for your device, use <code>Generic module (18)</code>.  </p> ESP8266ESP32"},{"location":"Configuration-Procedure-for-New-Devices/#finding-relays-and-lights","title":"Finding Relays and Lights","text":""},{"location":"Configuration-Procedure-for-New-Devices/#step-1","title":"Step 1.","text":"<p>Begin this procedure by disabling power state saves. Some improper GPIO assignments can cause device reboots. Disabling this setting avoids repeated flash writes. Also, it is best to allow Tasmota to return to a fail safe state in case of a bad configuration. Ensure that boot loop control is not disabled. <pre><code>Backlog SetOption0 0; SetOption36 1\n</code></pre></p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2","title":"Step 2.","text":"<p>Assign every available GPIO to successive <code>Relay&lt;x&gt;</code> components. For the initial GPIO probe, exclude \"dedicated\" GPIO such as GPIO0/GPIO2 and Tx/Rx, etc. You can use a Template to easily perform these assignments:  </p> <pre><code>{\"NAME\":\"ID Relays\",\"GPIO\":[0,0,0,0,224,225,0,0,226,227,228,229,230,0],\"FLAG\":0,\"BASE\":18}\n</code></pre> <p>Save the configuration. Once the device reboots, use the virtual buttons on the web UI to find which of the assigned GPIO actually control the physical relays and LEDs on the device. Make note of which GPIO act on which device peripheral.    </p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2a","title":"Step 2a.","text":"<p>If you are unable to control some of the relays or LEDs on the device, they may be attached to the \"dedicated\" GPIO skipped in the initial probe. Now assign those GPIOs and repeat step 2a:          </p> <pre><code>{\"NAME\":\"ID Relays 2\",\"GPIO\":[224,225,226,227,0,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}\n</code></pre> <p>If your device is based on the ESP8285 and you are still unable to control some of the relays or LEDs on the device, they may be attached to GPIO9 or GPIO10. Now assign those remaining GPIO and repeat step 2a: <pre><code>{\"NAME\":\"ID Relays 3\",\"GPIO\":[0,0,0,0,0,0,224,225,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}\n</code></pre></p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2b","title":"Step 2b.","text":"<p>Once you have found which GPIOs control the relays and LEDs, set these \"active\" GPIO to associate them with the corresponding <code>Relay&lt;x&gt;</code>, <code>LED&lt;x&gt;</code>, or <code>LEDLink</code> or <code>PWM&lt;x&gt;</code> (Some may require the use of inverted (i.e., <code>Relay&lt;x&gt;i</code>/<code>LED&lt;x&gt;i</code>/<code>LEDLinki</code>) component). Bulbs have mainly <code>PWM</code>.  </p> <p>For proper operation, in the final device configuration, assignment of like components must begin from <code>1</code> and be assigned sequentially! Regular and inverted components can be intermixed (e.g., <code>Relay1</code>, then <code>Relay2</code>; <code>Led1</code>, then <code>Led2i</code> and so on).</p>"},{"location":"Configuration-Procedure-for-New-Devices/#buttons-switches-nonpwm-lights-or-power-monitoring","title":"Buttons, Switches, nonPWM Lights or Power Monitoring","text":""},{"location":"Configuration-Procedure-for-New-Devices/#step-1_1","title":"Step 1.","text":"<p>Now assign every remaining GPIO (excluding, once again, remaining \"dedicated\" GPIO like GPIO0/GPIO2 and Tx/Rx, etc.) to successive <code>Switch1</code>..<code>Switch8</code> components (<code>9</code>..<code>16</code>). (If you have remaining GPIOs assign them as <code>Counter</code>) </p> <pre><code>{\"NAME\":\"ID Other\",\"GPIO\":[160,352,353,354,161,163,0,0,163,164,165,166,167,0],\"FLAG\":0,\"BASE\":18}\n</code></pre>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2_1","title":"Step 2.","text":"<p>Save the configuration. Once the device reboots, use the web UI Console to run the Status 8 (sensors) command. This will display the current state of each GPIO. If you have a bulb, GPIOs which are in state <code>ON</code> will probably be SM16716 CLK or SM16716 DAT component.   </p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-3","title":"Step 3.","text":"<p>Run <code>SetOption114 1</code> to show switch activations in console.</p> <p>If you have a power monitoring device, when under load the power monitoring chip should trigger switches or counters. Then it's just a matter of finding the right power monitoring components and their combination.</p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-4","title":"Step 4.","text":"<p>Once you have found which GPIO are connected to each input, change the GPIO setting in the configuration to your input component or use case (e.g., <code>Button&lt;x&gt;</code> or <code>Switch&lt;x&gt;</code>). Proper operation may dictate the use of regular or inverted (i.e., <code>Switch&lt;x&gt;i</code>/<code>Button&lt;x&gt;i</code>) settings. For buttons, you may need to determine whether the internal pull-up is used or not. If so, select <code>Button&lt;x&gt;</code>n, where n indicates no pull-up.</p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-1_2","title":"Step 1.","text":"<p>Begin this procedure by disabling power state saves. Some improper GPIO assignments can cause device reboots. Disabling this setting avoids repeated flash writes. Also, it is best to allow Tasmota to return to a fail safe state in case of a bad configuration. Ensure that boot loop control is not disabled. <pre><code>Backlog SetOption0 0; SetOption36 1\n</code></pre></p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2_2","title":"Step 2.","text":"<p>Assign every available GPIO to successive <code>Relay&lt;x&gt;</code> components. For the initial GPIO probe, exclude \"dedicated\" GPIO such as Tx/Rx, etc. You can use a Template to easily perform these assignments:  </p> <pre><code>{\"NAME\":\"Find Relays\",\"GPIO\":[224,0,225,0,226,227,1,1,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,0,0,0,0,244,245,246,247,248,249,250,251],\"FLAG\":0,\"BASE\":1}\n</code></pre> <p>Save the configuration. Once the device reboots, use the virtual buttons on the web UI to find which of the assigned GPIO actually control the physical relays and LEDs on the device. Make note of which GPIO act on which device peripheral.    </p>"},{"location":"Configuration-Procedure-for-New-Devices/#buttons-switches-nonpwm-lights-or-power-monitoring_1","title":"Buttons, Switches, nonPWM Lights or Power Monitoring","text":""},{"location":"Configuration-Procedure-for-New-Devices/#step-1_3","title":"Step 1.","text":"<p>Now assign every remaining available GPIO to successive <code>Switch&lt;x&gt;</code> components. For the initial GPIO probe, exclude \"dedicated\" GPIO such as Tx/Rx, etc. You can use a Template to easily perform these assignments:  </p> <pre><code>{\"NAME\":\"Find Switches\",\"GPIO\":[160,0,161,0,162,163,1,1,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,0,0,0,0,180,181,182,183,184,185,186,187],\"FLAG\":0,\"BASE\":1,\"CMND\":\"SO114 1 | SO65 0;\"}\n</code></pre> <p>If you have a power monitoring device, when under load the power monitoring chip should trigger switches which will display in the console. Then its just a matter of finding the right power monitoring components and their combination.</p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-4_1","title":"Step 4.","text":"<p>Once you have found which GPIO are connected to each input, change the GPIO setting in the configuration to your input component or use case (e.g., <code>Button&lt;x&gt;</code> or <code>Switch&lt;x&gt;</code>). Proper operation may dictate the use of regular, inverted or no pulldown settings. For buttons, you may need to determine whether the internal pull-up or pull-down is used or not. </p>"},{"location":"Configuration-Procedure-for-New-Devices/#finishing-configuration","title":"Finishing Configuration","text":""},{"location":"Configuration-Procedure-for-New-Devices/#step-1_4","title":"Step 1","text":"<p>Once you have determined which GPIO your device uses, set any remaining GPIOs to <code>None (0)</code>.</p> <p>Save the configuration.</p> <p>Once the device reboots, set the options change back to defaults with: <pre><code>Backlog SetOption0 1; SetOption114 0\n</code></pre></p>"},{"location":"Configuration-Procedure-for-New-Devices/#step-2_3","title":"Step 2.","text":"<p>Submit the new configuration: Since you have now configured a device not previously known to the Tasmota user base, you can export the template and submit it to the Tasmota Supported Devices Repository.  </p>"},{"location":"Configuration-Procedure-for-New-Devices/#devices-with-tuyamcu","title":"Devices with TuyaMCU","text":"<p>In case your device is a Tuya device with an MCU which controls everything see TuyaMCU for instructions on how to configure it.</p> <p>Video for a tutorial on this procedure.  </p>"},{"location":"Contributing/","title":"Contributing","text":"<p>Any contribution helps our team and makes Tasmota better for the entire community!</p> <p>You can contribute by:</p> <ul> <li>providing Pull Requests (Features, Proof of Concepts, Language files or Fixes)</li> <li>testing new released features and report issues</li> <li>donating to acquire hardware for testing and implementing or out of gratitude</li> <li>contributing documentation for features and devices</li> <li>submitting new device templates </li> <li>fixing spelling mistakes, broken links and other errors in the documentation</li> <li>writing guides on wiring and using sensors or your DIY projects featuring Tasmota</li> </ul>"},{"location":"Contributing/#editing-articles","title":"Editing articles","text":"<p>You need a GitHub user account to be able to edit</p> <p>If you spot an error in an article, use the pencil icon link (see image below) at the top of the related documentation GitHub repository page to correct it.</p> <p>This version of documentation uses strict markdown syntax with some enhancements. See Markdown Cheatsheet for all features.</p> <p>You'll be taken to the GitHub repository page of that article file, after a \"fork\" (copy) of the docs is made into your own GitHub account.</p> <p></p> <p>Click on the edit button (pencil icon). Edit/Add the text you wanted. When finished find the Propose changes button at the bottom and click it.</p> <p></p> <p>Next you need to click Create pull request which is GitHub speak for propose changes. </p> <p>In the PR window add a small description of what you did and click Create pull request </p> <p>Now you wait for one of the Tasmota admins to approve your PR (or deny , no guarantees!) </p> <p>Congratulations! </p> <p>You've made a contribution to the Tasmota project making it a better experience for all future users. Thank you!</p>"},{"location":"Contributing/#adding-articles","title":"Adding articles","text":"<p>You need a GitHub user account to be able to edit</p> <p>If you want to add a new article, go to the documentation GitHub repository, click Add File and name the file with an .md extension.</p> <p>This version of documentation uses strict markdown syntax with some enhancements. See Markdown Cheatsheet for all features.</p> <p>You'll be taken to the GitHub repository page of that new article file, after a \"fork\" (copy) of the docs is made into your own GitHub account.</p> <p>Don't forget to add links to other article pages in the appropriate place that refer to the new article so that the new article can also be found.</p>"},{"location":"Contributing/#adding-device-templates-to-the-documentation","title":"Adding device templates to the documentation","text":"<p>If you want to add a new device templates go to https://templates.blakadder.com/new.html (or its GitHub repository).</p>"},{"location":"Control-a-Sonoff-using-a-remote-button/","title":"Control a Sonoff using a remote button","text":""},{"location":"Control-a-Sonoff-using-a-remote-button/#remote-button","title":"REMOTE BUTTON","text":"<p>IMPORTANT: The ESP8266 needs GPIO0 and GPIO2 to be high (not connected to anything, or connected to 3.3V) during boot. GPIO0 and GPIO2 are the pins D3 and D4 on the Wemos D1 mini. D3 and D4 should only be used to connect push buttons (which are only low when pressed), not toggle switches.</p> <p>I have a cabin that is remote from my house, and I'm using a Sonoff to turn on/off the heaters remotely, so the place can be warm when I get there. The Sonoff(heater control) is located near the fuse box, and it controls a relay which switches the 120V/30A to the heaters.</p> <p>It's awkward to get at the Sonoff(heater control) to physically press the toggle button, so when I'm using it, I use MQTT commands to control the heaters. But I have some family members that are not comfortable with MQTT usage and certainly don't want to open the fuse box.</p> <p>So I built a small ESP-01 and a DHT22 and a push button, and used this project code to drive it (&gt;rev 1.0.30). I use the <code>cmnd/my_DHT/buttontopic</code> to set the mqtt command to control the heaters. Yes, you can program a sonoff so that the button sends out any arbitrary command. In this case, I'm using the button to control the other sonoff. This ESP+DHT device is in the common area of the cabin, so my family members can simply push the button to toggle the heater.</p> <p>In other words, I'm using one trivial (DHT+button) wifi device to control the other (sonoff+heater relay). This technique uses Theo's flexible design, since buttontopic can be made different from topic.</p>"},{"location":"Control-a-Sonoff-using-a-remote-button/#schematic","title":"Schematic","text":"<p> NOTE: with this schematic, the DHT sensor is on GPIO2. You'll have to change the<code>#define DHT_PIN</code> in this project's source code from 14 to 2. Also, make sure you use the <code>black</code> ESP01 with 1MB of flash; most 2016 purchases should be ok. Of course you can use an ESP12 if you wish.</p> <p>The optional block shown attaches an LED to the DHT data line, so you can watch when the data is being fetched from the DHT device.</p> <p>Power regulator, 5V to 3.3V: search eBay for <code>5v/3.3v power 1117</code> ESP: search eBay for <code>esp-01</code> and pick a black one DHT22: search eBay for <code>dht22</code> ; any AM2302, DHT11 or DHT12 will do in its place; or you can omit the DHT and just use the button Cost (2016-09-05) USB-5V-adapter: CAD$1 + DC5V-&gt;3.3V: CAD$1 + ESP01: CAD$2.62 + DHT12: CAD$1.50 = CAD$6.12 = EUR 4.25</p> <p>This little device has two inputs (DHT &amp; button), and no output. You can use either the Sonoff or the ElectroDragon version of this project, but because this has no output, the following commands don't make any sense: <code>power, light, ledstate</code>. You may also want to change the <code>#define APP_NAME</code> and <code>#define PROJECT</code> to reflect that this isn't a real Sonoff.</p> <p>Pat B</p>"},{"location":"Control-a-Sonoff-using-a-remote-button/#update","title":"Update","text":""},{"location":"Control-a-Sonoff-using-a-remote-button/#2017-11-12","title":"2017-11-12","text":"<p>This design still works with version 5.5.2 of the firmware. There's no need anymore to create a special build; the new design allows you to customize the code at runtime.</p> <p>For the above schematic, go into the Config Module menu and set - Module: 18 WeMos D1 mini - GPIO0: 09 Switch1 - GPIO2: 03 DHT22</p> <p>and set switchtopic1 to the topic for the device you want to control, and switchmode1 to 3 (toggle). That's all you need to do :)</p> <p>I also discovered that the button must be a momentary pushbutton; don't use a switch, because both GPIO0 and GPIO2 must be floating at boot time.</p>"},{"location":"Control-a-Sonoff-using-a-remote-button/#another-update","title":"Another Update","text":""},{"location":"Control-a-Sonoff-using-a-remote-button/#2017-09-22","title":"2017-09-22","text":"<p>I have installed the above device at my cabin in the woods, and I'm using a cellular modem to connect to the internet for data. If I set the Tasmota-Sonoff software with a teleperiod=3600 (once per hour), the MQTT traffic is about 6kB/hour, which is about 4.2MB/month. That includes the TCP keep-alives and the telemetry messages. So two devices (the main sonoff power switch and the esp-01 button device) takes 8.4MB/month, just below my economy 10MB/month sim card. </p> <p>Just FYI, I also have tried using a Raspberry PI at the cabin, and instructing it to SSH to my public-facing server, and creating a reverse tunnel back so that I can access my cabin from my public-facing server. The keep-alives on that connection is about 7.6MB/month. [The cellular phone company is probably using NAT, so I have to connect from cabin-&gt;server and not the other way around]</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/","title":"Create your own Firmware Build without IDE","text":"<p>PlatformIO is not just an IDE. In fact, all its features are accessible from the command line, and the IDE is a convenience wrapper layer around it.</p> <p>Thus, we can build Tasmota using only this PlatformIO-Core, which may come handy for automated builds, or for those who feel more comfortable with the command line than with the IDE.</p> <p>The steps are surprisingly simple and straightforward:</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#provision-a-linux-vm","title":"Provision a Linux VM","text":"<p>At least if you want to work in a cloud environment, but you may also choose to work on your physical machine as well.</p> <p>PlatformIO is based on python, so if we use <code>python-virtualenv</code>, then all the dependent packages will be confined to a separate folder, so it won't even taint the OS installation.</p> <p>As all of <code>python</code>, <code>python-virtualenv</code> and <code>python-pip</code> are available in most of the recent distros, you may pick your favourite one.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#install-python-and-tools","title":"Install python and tools","text":"<p>Install <code>python</code> and <code>python-virtualenv</code>, and <code>python-pip</code>, because we don't want to mess up the python ecosystem of the distro.</p> <p>Update pip by <code>pip install --upgrade pip</code>, and this was the last step done as root, the rest goes as a plain user.</p> <p>I used CentOS here, so if you prefer Debian-based distros, just substitute <code>apt-get install -y ...</code> for <code>yum install -y ...</code>.</p> <p><pre><code>[tasmota_builder@jtest ~]$ sudo yum install -y python python-virtualenv python-pip\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n...\nComplete!\n</code></pre> You may update <code>pip</code> in the host environment, but we'll do it in the virtualenv as well, so it's optional: <pre><code>[tasmota_builder@jtest ~]$ sudo pip install --upgrade pip\nCollecting pip\n...\nSuccessfully installed pip-18.1\n</code></pre></p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#prepare-a-platformio-core-environment-contained-in-a-folder","title":"Prepare a PlatformIO-Core environment contained in a folder","text":"<p><code>virtualenv</code> creates a folder and prepares a whole self-contained python subsystem there.</p> <p>To activate it, so that all python-related things refer to this environment and not to the system global, you need to source the file <code>bin/activate</code> within it.</p> <p>NOTE: Not just execute in a subshell, but include it into the current one, so please note the <code>.</code> before <code>bin/activate</code> below:</p> <pre><code>[tasmota_builder@jtest ~]$ virtualenv platformio-core\nNew python executable in /home/tasmota_builder/platformio-core/bin/python\nInstalling setuptools, pip, wheel...done.\n[tasmota_builder@jtest ~]$ cd platformio-core\n[tasmota_builder@jtest platformio-core]$ . bin/activate\n\n(platformio-core) [tasmota_builder@jtest platformio-core]$\n</code></pre> <p>Now we are ready to install PlatformIO-Core into this small virtual environment:</p> <p><pre><code>(platformio-core) [tasmota_builder@jtest platformio-core]$ pip install -U platformio\nCollecting platformio\n  Downloading https://files.pythonhosted.org/packages/95/4a/3ccce45ba750dd9a8d48dcbe9b9080011ac2a5a248312b19552bbaec6b7d/platformio-3.6.3-py27-none-any.whl (160kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 163kB 4.5MB/s \nCollecting semantic-version&lt;3,&gt;=2.5.0 (from platformio)\n  Downloading https://files.pythonhosted.org/packages/72/83/f76958017f3094b072d8e3a72d25c3ed65f754cc607fdb6a7b33d84ab1d5/semantic_version-2.6.0.tar.gz\nCollecting click&lt;6,&gt;=5 (from platformio)\n  Downloading https://files.pythonhosted.org/packages/8f/98/14966b6d772fd5fba1eb3bb34a62a7f736d609572493397cdc5715c14514/click-5.1-py2.py3-none-any.whl (65kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 8.1MB/s \nCollecting colorama (from platformio)\n  Downloading https://files.pythonhosted.org/packages/4f/a6/728666f39bfff1719fc94c481890b2106837da9318031f71a8424b662e12/colorama-0.4.1-py2.py3-none-any.whl\nCollecting requests&lt;3,&gt;=2.4.0 (from platformio)\n  Downloading https://files.pythonhosted.org/packages/7d/e3/20f3d364d6c8e5d2353c72a67778eb189176f08e873c9900e10c0287b84b/requests-2.21.0-py2.py3-none-any.whl (57kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 61kB 7.9MB/s \nCollecting pyserial!=3.3,&lt;4,&gt;=3 (from platformio)\n  Downloading https://files.pythonhosted.org/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl (193kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 194kB 4.7MB/s \nCollecting bottle&lt;0.13 (from platformio)\n  Downloading https://files.pythonhosted.org/packages/32/4e/ed046324d5ec980c252987c1dca191e001b9f06ceffaebf037eef469937c/bottle-0.12.16.tar.gz (72kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 81kB 8.8MB/s \nCollecting urllib3&lt;1.25,&gt;=1.21.1 (from requests&lt;3,&gt;=2.4.0-&gt;platformio)\n  Downloading https://files.pythonhosted.org/packages/62/00/ee1d7de624db8ba7090d1226aebefab96a2c71cd5cfa7629d6ad3f61b79e/urllib3-1.24.1-py2.py3-none-any.whl (118kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 122kB 7.5MB/s \nCollecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests&lt;3,&gt;=2.4.0-&gt;platformio)\n  Downloading https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl (133kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 143kB 6.8MB/s \nCollecting idna&lt;2.9,&gt;=2.5 (from requests&lt;3,&gt;=2.4.0-&gt;platformio)\n  Downloading https://files.pythonhosted.org/packages/14/2c/cd551d81dbe15200be1cf41cd03869a46fe7226e7450af7a6545bfc474c9/idna-2.8-py2.py3-none-any.whl (58kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 61kB 7.8MB/s \nCollecting certifi&gt;=2017.4.17 (from requests&lt;3,&gt;=2.4.0-&gt;platformio)\n  Downloading https://files.pythonhosted.org/packages/9f/e0/accfc1b56b57e9750eba272e24c4dddeac86852c2bebd1236674d7887e8a/certifi-2018.11.29-py2.py3-none-any.whl (154kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 163kB 5.9MB/s \nBuilding wheels for collected packages: semantic-version, bottle\n  Running setup.py bdist_wheel for semantic-version ... done\n  Stored in directory: /home/tasmota_builder/.cache/pip/wheels/60/bb/50/215d669d31f992767f5dd8d3c974e79261707ee7f898f0dc10\n  Running setup.py bdist_wheel for bottle ... done\n  Stored in directory: /home/tasmota_builder/.cache/pip/wheels/0c/68/ac/1546dcb27101ca6c4e50c5b5da92dbd3307f07cda5d88e81c7\nSuccessfully built semantic-version bottle\nInstalling collected packages: semantic-version, click, colorama, urllib3, chardet, idna, certifi, requests, pyserial, bottle, platformio\nSuccessfully installed bottle-0.12.16 certifi-2018.11.29 chardet-3.0.4 click-5.1 colorama-0.4.1 idna-2.8 platformio-3.6.3 pyserial-3.4 requests-2.21.0 semantic-version&gt;\nYou are using pip version 9.0.1, however version 18.1 is available.\n</code></pre> As it would prefer a recent <code>pip</code> instead of the one set up by <code>virtualenv</code>, so let's upgrade it:</p> <pre><code>(platformio-core) [tasmota_builder@jtest platformio-core]$ pip install --upgrade pip\nCollecting pip\n  Downloading https://files.pythonhosted.org/packages/c2/d7/90f34cb0d83a6c5631cf71dfe64cc1054598c843a92b400e55675cc2ac37/pip-18.1-py2.py3-none-any.whl (1.3MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.3MB 793kB/s \nInstalling collected packages: pip\n  Found existing installation: pip 9.0.1\n    Uninstalling pip-9.0.1:\n      Successfully uninstalled pip-9.0.1\nSuccessfully installed pip-18.1\n</code></pre>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#fetch-the-tasmota-sources","title":"Fetch the Tasmota sources","text":"<p>If you want only to build, then the original repo will do, but if you want to contribute as well, then fork an own copy of the repo and clone out that one.</p> <pre><code>(platformio-core) [tasmota_builder@jtest platformio-core]$ git clone https://github.com/arendst/Tasmota.git\nCloning into 'Tasmota'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 16930 (delta 1), reused 3 (delta 1), pack-reused 16924\nReceiving objects: 100% (16930/16930), 23.75 MiB | 12.94 MiB/s, done.\nResolving deltas: 100% (11426/11426), done.\n</code></pre> <p>After changing to the working copy, we are ready to go:</p> <pre><code>(platformio-core) [tasmota_builder@jtest platformio-core]$ cd Tasmota/\n(platformio-core) [tasmota_builder@jtest Tasmota]$\n</code></pre>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#configure-the-sources","title":"Configure the sources","text":"<p>Now you may want to configure the sources for your needs.</p> <p>Actually, the sources do build fine right out-of-the box, only it'll be a full build, including all the language localisation and all the build flavours as well, while you are usually interested only in one language and one build flavour only.</p> <p>In <code>tasmota/user_config_override.h</code> fine tune the default values for the module, the wifi, the MQTT server, and so on.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#build-the-firmware","title":"Build the firmware","text":"<p>The build command itself is <code>pio run</code>, but as it emits quite a lot of messages (including errors if you're developing), so you may want to redirect a copy of the standard output and error to a file, so it'll be <code>pio run 2&gt;&amp;1 | tee build.log</code>.</p> <pre><code>(platformio-core) [tasmota_builder@jtest Tasmota]$ time pio run 2&gt;&amp;1 | tee build.log\n************************************************************************************************************************************************************************\nIf you like PlatformIO, please:\n- follow us on Twitter to stay up-to-date on the latest project news &gt; https://twitter.com/PlatformIO_Org\n- star it on GitHub &gt; https://github.com/platformio/platformio\n- try PlatformIO IDE for IoT development &gt; https://platformio.org/platformio-ide\n- support us with PlatformIO Plus &gt; https://pioplus.com\n************************************************************************************************************************************************************************\n\nProcessing tasmota (framework: arduino; platform: espressif8266@1.8.0; board: esp01_1m)\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nPlatformManager: Installing espressif8266 @ 1.8.0\nDownloading\n...\nEnvironment tasmota-TW           [SUCCESS]\nEnvironment tasmota-UK           [SUCCESS]\n==================================================================== [SUCCESS] Took 797.56 seconds ====================================================================\n</code></pre> <p>That's all, really :D !</p> <p>PlatformIO seems to handle the rebuilds and dependencies well, but if you want a clean build, the say <code>pio run -t clean</code> first, and then the <code>pio run</code>.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#collect-the-results","title":"Collect the results","text":"<p>The results will be here: <code>build_output</code></p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#about-build-times","title":"About build times","text":"<p>The recent versions of PlatformIO-Core seem to parallelise quite well.</p> <p>When you've changed only a few files, not everything needs to be recompiled (though the image must still be re-packed), so that minute-like build time is the maximum, usually it'll be less.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#prepare-the-local-installer-tool","title":"Prepare the local installer tool","text":"<p>You may rebuild the firmware on a remote machine, but you must have the installer tool on the local machine where the module is connected to.</p> <p>Fortunately, it's also python-based, so we can again employ <code>virtualenv</code> here.</p> <p>If you built the firmware also on your localhost, then there is no need for a separate environment, you may quite well install <code>esptool</code> into that one.</p> <p>Otherwise, create a virtual environment the usual way:</p> <pre><code>[tasmota_installer@lantash ~]$ virtualenv esptool\nNew python executable in /home/tasmota_installer/esptool/bin/python2.7\nAlso creating executable in /home/tasmota_installer/esptool/bin/python\nInstalling setuptools, pip, wheel...done.\n\n[tasmota_installer@lantash ~]$ cd esptool/\n\n[tasmota_installer@lantash ~/esptool]$ . bin/activate\n\n(esptool) [tasmota_installer@lantash ~/esptool]$ pip install --upgrade pip\nRequirement already up-to-date: pip in ./lib/python2.7/site-packages (18.1)\n</code></pre> <p>Now let's install <code>esptool</code>:</p> <pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ pip install esptool\nCollecting esptool\n  Downloading https://files.pythonhosted.org/packages/5c/85/5654e7b9019739d3d89af0adf528c9ae57a9a26682e3aa012e1e30f20674/esptool-2.6.tar.gz (80kB)\n    100% |################################| 81kB 222kB/s \nCollecting pyserial&gt;=3.0 (from esptool)\n  Downloading https://files.pythonhosted.org/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl (193kB)\n    100% |################################| 194kB 491kB/s \nCollecting pyaes (from esptool)\n  Downloading https://files.pythonhosted.org/packages/44/66/2c17bae31c906613795711fc78045c285048168919ace2220daa372c7d72/pyaes-1.6.1.tar.gz\nCollecting ecdsa (from esptool)\n  Downloading https://files.pythonhosted.org/packages/63/f4/73669d51825516ce8c43b816c0a6b64cd6eb71d08b99820c00792cb42222/ecdsa-0.13-py2.py3-none-any.whl (86kB)\n    100% |################################| 92kB 382kB/s \nBuilding wheels for collected packages: esptool, pyaes\n  Running setup.py bdist_wheel for esptool ... done\n  Stored in directory: /home/tasmota_installer/.cache/pip/wheels/cf/1f/62/7ad4e47843affd4f5b7032a39f1ef8a153c6d27533614d21aa\n  Running setup.py bdist_wheel for pyaes ... done\n  Stored in directory: /home/tasmota_installer/.cache/pip/wheels/bd/cf/7b/ced9e8f28c50ed666728e8ab178ffedeb9d06f6a10f85d6432\nSuccessfully built esptool pyaes\nInstalling collected packages: pyserial, pyaes, ecdsa, esptool\nSuccessfully installed ecdsa-0.13 esptool-2.6 pyaes-1.6.1 pyserial-3.4\n</code></pre> <p>If you've built the firmware on a remote machine, now it's time to download it into this installer environment (e.g. via <code>scp</code> or <code>sftp</code>).</p> <p>IMPORTANT: For the subsequent steps your user must have the permission to write the serial port.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#back-up-the-current-firmware-optional","title":"Back up the current firmware (optional)","text":"<p>First of all, disconnect the bulb from the mains and wire up the serial connection and a button on GPIO0.</p> <p>If this GPIO0 is connected to GND when the module gets power, it starts in a firmware-update mode, and you can then read/write its flash storage.</p> <p>Switch off the power of the board, this will be the reference 'steady state' of the system.</p> <pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ esptool.py read_flash 0x00000 0x100000 fcmila_bulb_orig.bin\nesptool.py v2.6\nFound 1 serial ports\nSerial port /dev/cuaU0\nConnecting......\n</code></pre> <p>Now, it'll wait for the module to appear connected, so</p> <ul> <li>press the button (GPIO0 to GND), keep it pressed</li> <li>switch on the power of the board</li> <li>now you may release the button</li> </ul> <pre><code>...\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: bc:dd:c2:e0:2a:f2\nUploading stub...\nRunning stub...\nStub running...\n1048576 (100 %)\nRead 1048576 bytes at 0x0 in 95.0 seconds (88.3 kbit/s)...\nHard resetting via RTS pin...\n</code></pre> <p>If all is well, the flash is being dumped, it may take a minute or so.</p> <p>If done, then power the module off, as this management mode is not restartable!</p> <p>If it's not well, then you may try some queries:</p> <pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ esptool.py -p /dev/ttyU0 chip_id\n...\nChip ID: 0x00e02af2\n...\n(esptool) [tasmota_installer@lantash ~/esptool]$ esptool.py -p /dev/ttyU0 flash_id\n...\nManufacturer: c8\nDevice: 4014\nDetected flash size: 1MB\n...\n</code></pre> <p>If they don't work, then check your cabling and your serial adapter. Until you can't get this step working, don't proceed to the next one, it won't work either.</p>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#erase-the-flash","title":"Erase the flash","text":"<p>(With the usual button-pressed-power-on rain dance, and don't forget to power the module off afterwards.)</p> <pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ esptool.py erase_flash\n...\nErasing flash (this may take a while)...\nChip erase completed successfully in 1.6s\n</code></pre>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#install-the-firmware-to-your-module","title":"Install the firmware to your module","text":"<pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ esptool.py write_flash --flash_size 1MB --flash_mode dout 0x00000 firmware.bin\nConfiguring flash size...\nCompressed 535424 bytes to 367679...\nWrote 535424 bytes (367679 compressed) at 0x00000000 in 33.8 seconds (effective 126.6 kbit/s)...\nHash of data verified.\n\nLeaving...\n</code></pre>"},{"location":"Create-your-own-Firmware-Build-without-IDE/#power-on-for-normal-operation","title":"Power on for normal operation","text":"<p>No button-pressing, power on, and see what you achieved :).</p> <p>The module sends its logs on the serial line at 115200 baud 8N1, so to check the logs:</p> <pre><code>(esptool) [tasmota_installer@lantash ~/esptool]$ cu -s 115200 -l /dev/ttyU0 | tee -a my_sonoff.log\nConnected\n&lt;some initial binary data&gt;\n00:00:00 CFG: Use defaults\n00:00:00 SM16716: ModuleSelected; clk_pin=4, dat_pin=14)\n00:00:00 SRC: Restart\n00:00:00 SM16716: Entry; function=FUNC_SET_DEVICE_POWER, index=00, payload=02\n00:00:00 SM16716: Update; pwr=00, rgb=000000\n00:00:00 Project sonoff Sonoff Version 6.4.1.9(sonoff)-2_4_2\n00:00:00 SM16716: Entry; function=FUNC_INIT\n00:00:00 SM16716: ModuleSelected; clk_pin=4, dat_pin=14)\n00:00:00 WIF: Attempting connection...\n...\n</code></pre> <p>(Assuming that you're using FreeBSD. On Linux you set the speed via <code>setserial</code> or <code>stty</code>, and then do the dump with <code>dd</code>. Or just <code>minicom</code>, if you prefer.)</p> <p>Now you have a complete build path from source to device, and a log feedback as well, so you've got everything needed for being able to implement your ideas :D !</p>"},{"location":"DALI/","title":"DALI","text":"This feature is included in tasmota32 binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_DALI\n#define USE_DALI        // Add support for DALI gateway (+5k code)\n#endif\n</code></pre></p>"},{"location":"DALI/#what-is-dali","title":"What is DALI?","text":"<p>Digital Addressable Lighting Interface (DALI) is a trademark for network-based products that control lighting.</p> <p>A DALI network consists of at least one application controller and bus power supply (which may be built into any of the products) as well as input devices (e.g. sensors and push-buttons), control gear (e.g., electrical ballasts, LED drivers and dimmers) with DALI interfaces.</p> <p>Application controllers can control, configure or query each device by means of a bi-directional data exchange. Unlike DMX, multiple controllers can co-exist on the bus.</p> <p>The DALI protocol permits addressing devices individually, in groups or via broadcast.</p> <p>Scenes can be stored in the devices, for recall on an individual, group or broadcast basis. Groups and scenes are used to ensure simultaneous execution of level changes, since each packet requires about 25 ms - or 1.5 seconds if all 64 addresses were to change level.</p>"},{"location":"DALI/#implemented-features","title":"Implemented Features","text":"<p>Tasmota DALI gateway is an application controller. It defaults to supporting Device Type 6 (DT6) or Part207 single color LED lighting controller using standard Tasmota light controls.</p>"},{"location":"DALI/#hardware","title":"Hardware","text":"<p>The driver is supported on both ESP8266 and ESP32. A possible DALI interface could look like this as used on the DALI 2 Click.  On the left side is the connection, TB1, to the DALI bus which should provide a voltage between 16V to 22.5V DC. On the right side is the connection to an ESP device where wires are connected according to the table:</p> DALI interface ESP device VCC 3V3 DALI_TX DALI TX_i DALI_RX DALI RX_i GND GND"},{"location":"DALI/#mikroe-dali-click","title":"MikroE DALI Click","text":"<p>Initial implementation has been performed using DALI Click with GPIO settings <code>DALI TX</code> and <code>DALI RX</code> and a Busch-Jaeger Rotary dimmer acting as a DALI bus power supply.</p>"},{"location":"DALI/#mikroe-dali-2-click","title":"MikroE DALI 2 Click","text":"<p>A redesigned version called DALI 2 Click also works fine whith GPIO settings <code>DALI TX_i</code> and <code>DALI RX_i</code>.</p>"},{"location":"DALI/#shelly-dali-dimmer-gen3","title":"Shelly DALI Dimmer Gen3","text":"<p>  The ESP32-C3 based Shelly DALI Dimmer Gen3 is supported using template  <pre><code>{\"NAME\":\"Shelly DALI Dimmer Gen3\",\"GPIO\":[34,4736,0,3840,11360,11392,128,129,0,1,576,0,0,0,0,0,0,0,0,1,1,1],\"FLAG\":0,\"BASE\":1}\n</code></pre> and additional commands  <pre><code>Backlog AdcGpio1 10000,10000,4000; ButtonTopic 0; SetOption1 1; SetOption11 0; SetOption32 20; DimmerStep 5; LedTable 0\n</code></pre> The following rule <pre><code>rule1 on button1#state=2 do dimmer + endon on button2#state=2 do dimmer - endon on button1#state=3 do power 2 endon on button2#state=3 do power 2 endon\n</code></pre> allows dimmer control using two buttons.</p> <p>Notice that the Shelly DALI dimmer uses inverted DALI GPIO's <code>DALI TX_i</code> and <code>DALI_RX_i</code> and provides a limited DALI bus power supply of 10mA, enough for 5 DALI control gear.</p> <p>To add Shelly DALI Dimmer to a bus powered environment it's best to disable the internal Shelly power supply. In that case use template (changed GPIO3) <pre><code>{\"NAME\":\"Shelly DALI Dimmer Gen3 (No power)\",\"GPIO\":[34,4736,0,3872,11360,11392,128,129,0,1,576,0,0,0,0,0,0,0,0,1,1,1],\"FLAG\":0,\"BASE\":1}\n</code></pre> In addition you can easily remove the Shelly power supply assembly from the main board.</p>"},{"location":"DALI/#commands","title":"Commands","text":"Command Parameters DaliSend Low level DALI control.<code>&lt;byte1&gt;,&lt;byte2&gt;</code> = Execute DALI code and do not expect a DALI backward frame.<code>&lt;0xA3&gt;,&lt;byte2&gt;,&lt;byte3&gt;,&lt;byte4&gt;</code> = Set DALI parameter using DTR0 and do not expect a DALI backward frame. DaliQuery Low level DALI control with expected response.<code>&lt;byte1&gt;,&lt;byte2&gt;</code> = Execute DALI code and report result (DALI backward frame). DaliScan Sequential address assignment using commissioning protocol. This resets  parameters stored on the control gear.<code>1</code> = Reset and commission new device addresses.<code>2</code> = Reset and commission additional device addresses. DaliGear To reduce DaliGroup response time set the max commissionned control gear address.Display current max address.<code>1..64</code> = Set max address (default = <code>64</code>). DaliGroup&lt;x&gt; Add or remove control gear to/from up to 16 groups.Display current group contents.<code>[+]&lt;device&gt;,&lt;device&gt;...</code> = Add devices to group.<code>-&lt;device&gt;,&lt;device&gt;...</code> = Remove devices from group.&lt;x&gt; = 1 to 16. DaliGroupSliders Add or remove group sliders from the GUI when in <code>DaliLight 0</code> mode.Display current groupsliders amount.<code>1..16</code> = Number of groupsliders to display. DaliPower&lt;x&gt; Control power to broadcast or any control gear or group.Display current power state.<code>0</code> = Turn power off.<code>1</code> = Restore power to last dimmer value.<code>2</code> = Toggle power.<code>3</code> to <code>254</code> = Set absolute brightness.&lt;x&gt; = 0 for broadcast, 1 to 64 for individual gear or 101 to 116 for group. DaliDimmer&lt;x&gt; Control dimmer to broadcast or any control gear or group.Display current dimmer state.<code>0</code> = Turn power off.<code>1</code> to <code>100</code> = Percentage of brightness.&lt;x&gt; = 0 for broadcast, 1 to 64 for individual gear or 101 to 116 for group. DaliLight Switch between DALI or Tasmota Light control. The latter allows for the DALI lighting to be controlled as a local light by any Tasmota protocol like Matter, Alexa, Hue and KNX.Display current state.<code>0</code> = Disable Tasmota light control for DaliTarget device.<code>1</code> = Enable Tasmota light control for DaliTarget device (default). DaliTarget Select DALI target to be used when DaliLight is enabled.Display current target.<code>0</code> = Broadcast (default).<code>1</code> to <code>64</code> = Individual gear.<code>101</code> to <code>116</code> = group."},{"location":"DFR0299/","title":"DFRobot DFPlayer Mini MP3 Player","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MP3_PLAYER \n#define USE_MP3_PLAYER                  // Use of the DFPlayer Mini MP3 Player RB-DFR-562 commands: play, pause, stop, track, volume and reset\n    #define MP3_VOLUME           30     // Set the startup volume on init, the range can be 0..100(max)\n#endif\n</code></pre></p> <p>Small and low price MP3 module with a simplified output directly to the speaker</p> <p>See manufacturer site for more information.</p>"},{"location":"DFR0299/#configuration","title":"Configuration","text":""},{"location":"DFR0299/#wiring","title":"Wiring","text":"DFPlayer ESP GND GND 5V 5V RX GPIO"},{"location":"DFR0299/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign: 1. GPIO RX to <code>MP3 Player</code></p> <p>Available commands</p> <p> </p>"},{"location":"DHT11-Wiring---Sonoff-Basic/","title":"DHT11 Wiring   Sonoff Basic","text":"<p>To wire a DHT11 up to a Sonoff Basic, I first soldered a pin header to the main pin header row. For the location see [[Pinouts]].</p> <p>I decided to use regular 2.54mm connectors (often referred to as Dupont connectors), so that I can switch sensors if I have to. In order to fit the dupont cables within the enclosure, I had to bend the 2.54mm pin headers by about 45\u00b0.</p> <p>As the DHT11 requires a pullup (depending on the cable length), and I didn't want to design a PCB just to connect 3 wires and a resistor, I came up with the solution described below.</p> <p></p> <p>First, I slipped ferrules over the DHT11 pins and inserted the wires. This makes it a lot easier to hold the cables and the DHT11 pins in place.</p> <p>I left a bit more wire exposed so that I have a place to apply solder without burning the wire insulation. I applied heat to the ferrule, not the wire, and applied solder directly at the end of the ferrule.</p> <p>Solder will then flow into the ferrule.</p> <p></p> <p>I also added a small solder blob (visible on the top ferrule) so that I can solder an 0805 resistor in place. Thanks to the ferrule, the wires won't become detached when heated again. Keep in mind that the ferrule has quite some heat capacity, so wait for the solder to cool down prior moving the wires or the sensor.</p> <p></p> <p>I then did shrink the 2:1 green heatshrink tubes so that the contacts don't touch each other.</p> <p>Also, it is so very handy to have 4:1 shrinking tube. An 8mm 4:1 tube fits perfectly over the pins, and fully encloses the 3 wires.</p> <p>Get 4:1 heatshrink tube. It's so worth it.</p> <p>Here's how the finished project looks like:</p> <p></p>"},{"location":"DHT11/","title":"DHT11 temperature and humidity sensor","text":"This feature is included in <code>tasmota</code>, <code>tasmota32</code>, <code>tasmota-knx</code> and <code>tasmota-display</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_DHT\n#define USE_DHT     // Add support for DHT11, AM2301 (DHT21, DHT22, AM2302, AM2321) and SI7021 Temperature and Humidity sensor (1k6 code)\n#endif\n</code></pre></p> <p>DHT11 is a basic, ultra low-cost digital temperature and humidity sensor. It is very inaccurate and surpassed by others (AM2301, BME280, ...) thus not recommended by the Tasmota team.</p>"},{"location":"DHT11/#configuration","title":"Configuration","text":""},{"location":"DHT11/#wiring","title":"Wiring","text":"DHT11 ESP - GND OUT GPIOx + 3.3V"},{"location":"DHT11/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>DHT11</code> </li> </ul> <p>After reboot of the device the temperature and humidity are displayed.</p>"},{"location":"DHT11/#commands","title":"Commands","text":"<p><code>TempOffset</code> can be used for calibrating the measured temperature. This setting affects all temperature sensors on the device.</p>"},{"location":"DHT11/#wemos-dht11-shield","title":"Wemos DHT11 Shield","text":"<p>Note: this is ONLY for v1.0.0 of the DHT11 shield, since v2.0.0 uses I<sup>2</sup>C and pinned differently.</p> <p></p> <p>From the Wemos DHT11 shield specs the DATA OUT pin is connected to D4 of the Wemos.</p> <p></p> <p></p> <p>Note: Having the shield compact on top of the processor increases the temperature. In normal Mode this can be up to 6\u00b0C. So you should add sleep mode. Adding normal \"Sleep 100\" and putting the sensor vertically reduces the temperature difference to 2\u00b0C</p>"},{"location":"DHT11/#sonoff-basic-specific","title":"Sonoff Basic specific","text":"<p>To wire a DHT11 up to a Sonoff Basic, I first soldered a pin header to the main pin header row. For the location see GPIO Locations.</p> <p>I decided to use regular 2.54mm connectors (often referred to as Dupont connectors), so that I can switch sensors if I have to. In order to fit the dupont cables within the enclosure, I had to bend the 2.54mm pin headers by about 45\u00b0.</p> <p>As the DHT11 requires a pullup (depending on the cable length), and I didn't want to design a PCB just to connect 3 wires and a resistor, I came up with the solution described below.</p> <p></p> <p>First, I slipped ferrules over the DHT11 pins and inserted the wires. This makes it a lot easier to hold the cables and the DHT11 pins in place.</p> <p>I left a bit more wire exposed so that I have a place to apply solder without burning the wire insulation. I applied heat to the ferrule, not the wire, and applied solder directly at the end of the ferrule.</p> <p>Solder will then flow into the ferrule.</p> <p></p> <p>I also added a small solder blob (visible on the top ferrule) so that I can solder an 0805 resistor in place. Thanks to the ferrule, the wires won't become detached when heated again. Keep in mind that the ferrule has quite some heat capacity, so wait for the solder to cool down prior moving the wires or the sensor.</p> <p></p> <p>I then did shrink the 2:1 green heatshrink tubes so that the contacts don't touch each other.</p> <p>Also, it is so very handy to have 4:1 shrinking tube. An 8mm 4:1 tube fits perfectly over the pins, and fully encloses the 3 wires.</p> <p>Get 4:1 heatshrink tube. It's so worth it.</p> <p>Here's how the finished project looks like:</p> <p></p>"},{"location":"DHT11/#openhab","title":"OpenHab","text":"<p>sonoff.items: <pre><code> // DHT-6\n Number DHT6_Temp \"Bathroom DHT-6 [%.1f \u00b0C]\"\n            &lt;temperature&gt;          (gTemperature,gTemperatureRoom)\n            { mqtt=\"&lt;[broker:tele/sonoff-dht-6/SENSOR:state:JSONPATH($.DHT11.Temperature)]\" }\n Number DHT6_Humidity \"Bathroom DHT-6 [%.1f %%]\"\n            &lt;humidity&gt;             (gHumidity)       \n            { mqtt=\"&lt;[broker:tele/sonoff-dht-6/SENSOR:state:JSONPATH($.DHT11.Humidity)]\" }\n Switch DHT6_Reachable \"DHT-6 reachable\"\n            &lt;contact&gt;              (gReachable)      \n            { mqtt=\"&lt;[broker:tele/sonoff-dht-6/LWT:state:MAP(reachable.map)]\" }\n Number DHT6_RSSI \"DHT-6 RSSI [%d %%]\"\n            &lt;qualityofservice&gt;     (gRSSI)\n            { mqtt=\"&lt;[broker:tele/sonoff-dht-6/STATE:state:JSONPATH($.Wifi.RSSI)]\" }\n</code></pre></p> <p>sonoff.sitemap <pre><code> Frame {\n              Text item=DHT6_Temp  labelcolor=[DHT6_Reachable == \"ON\" = \"green\",DHT6_Reachable == \"OFF\" = \"red\"] {\n                   Text item=DHT6_Temp\n                   Text item=DHT6_Humidity\n                   Text item=DHT6_Reachable\n                   Text item=DHT6_RSSI\n                   }\n        }\n</code></pre></p>"},{"location":"DHT11/#printable-housing","title":"Printable Housing","text":"<p>https://www.thingiverse.com/thing:2814909 </p>"},{"location":"DS18x20/","title":"DS18x20 temperature sensor","text":"This feature is included in <code>tasmota</code>, <code>tasmota32</code>, <code>tasmota-knx</code>, <code>tasmota-display</code> and <code>tasmota32-bluetooth</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_DS18x20\n#define USE_DS18x20               // Add support for DS18x20 sensors with id sort, single scan and read retry (+2k6 code)\n//  #define W1_PARASITE_POWER     // Optimize for parasite powered sensors\n#endif\n</code></pre> <p>DS18x20 driver supports DS18B20, DS18S20, DS1822 and MAX31850 1-Wire digital temperature sensors.</p>"},{"location":"DS18x20/#configuration","title":"Configuration","text":""},{"location":"DS18x20/#wiring","title":"Wiring","text":"DS18b20 ESP 1 GND GND 2 Data GPIOx 3 VCC 3.3v <p>Warning: DS18x20 will not work on GPIO16</p> <p>You need to connect a 4.7K pullup resistor from data to 3.3V.  </p>"},{"location":"DS18x20/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <p>GPIOx to <code>DS18x20</code></p> <p>After a reboot the driver will display Temperature.</p>"},{"location":"DS18x20/#shelly-1-temperature-addon","title":"Shelly 1 Temperature Addon","text":"<p>Shelly dual pin mode is supported by an additional pin assignment:</p> <ul> <li>GPIOy to <code>DS18x20-o</code> </li> </ul>"},{"location":"DS18x20/#commands","title":"Commands","text":"<p><code>SetOption74</code> may be used to enable/disable internal pullup when using a single DS18x20 sensor (for multiple sensors, you have to use an external pullup resistor). This only works on ESP8266, ESP32 always needs external pullup</p> <p><code>SetOption126</code> Enable arithmetic mean over teleperiod for JSON temperature for DS18x20 sensors.</p> <p><code>TempRes</code> Temperature sensor resolution: 0..3 = maximum number of decimal places.</p> <p><code>TempOffset</code> can be used to add/sub an offset to the measured temperature. This setting affects all temperature sensors on the device.</p>"},{"location":"DS18x20/#multiple-sensors","title":"Multiple Sensors","text":"<p>Tasmota supports multiple DS18x20 sensors connected to a single ESP8266/ESP32 chip using a single or multiple (up to 4) GPIOs. The default maximum is set to 8 sensors (driver code). It is possible to override this number in <code>user_config_override.h</code> by adding a line with <code>#define DS18X20_MAX_SENSORS &lt;new-value&gt;</code> (ESP8266/ESP32 only). However one should take into account that:</p> <ul> <li>Display on the console is limited and SENSOR log will be truncated above 11 DS18x20.</li> <li>MQTT buffer length is limited and SENSOR message will be truncated above 18 DS18x20.</li> <li>Even less if other sensors are attached to the ESP device and present in the SENSOR message.</li> <li>1-wire has been designed to be a board-bus, not to run through long distances across a whole house. At minimum, use a shielded cable.</li> </ul> <p>Note</p> <p>If you increase the value above default, you are on your own. No support will be provided.</p> <p></p> <p>Every sensors will get a unique ID used in webUI and MQTT telemetry.</p> <pre><code>{\"Time\":\"2021-01-02T09:09:44\",\"DS18B20-1\":{\"Id\":\"00000566CC39\",\"Temperature\":13.3},\"DS18B20-2\":{\"Id\":\"0000059352D4\",\"Temperature\":1.2},\"DS18B20-3\":{\"Id\":\"000005937C90\",\"Temperature\":22.5},\"TempUnit\":\"C\"}\n</code></pre>"},{"location":"DS18x20/#sensor-aliases","title":"Sensor Aliases","text":"<p>By default, sensors are named using the <code>&lt;sensor model&gt;-&lt;n&gt;</code> scheme (e.g. <code>DS18B20-1</code>), where the number is practically random (based on the sensor's address). This means when you add or remove a sensor, the numbers of the sensors may change.</p> <p>To assign a static alias to a certain ID, you can use <code>DS18Alias</code> command. This must be enabled by setting <code>#define DS18x20_USE_ID_ALIAS</code> in <code>user_config_override.h</code> and then compile your own binary.</p> <p>To display the full IDs of all connected sensors, run the command <code>DS18Alias</code> without any parameters. To set a static index, use the <code>DS18Alias &lt;sensor ID&gt;,&lt;n&gt;</code> command. For example <code>DS18Alias 113C01F096174528,2</code>. This will rename the sensor to the scheme <code>DS18Sens-&lt;n&gt;</code> and it leads to the following output of the command <code>DS18Alias</code>:</p> <pre><code>{\"DS18Sens-2\":{\"Id\":\"113C01F096174528\"},\"DS18Sens-1\":{\"Id\":\"783C01F096F2BB28\"},\"DS18Sens-3\":{\"Id\":\"8B0316C310F3FF28\"}}\n</code></pre> <p>When you set <code>&lt;n&gt;</code> to an alphanumeric value (not starting with a number), the whole name is replaced with the given value. E.g. <code>DS18Alias 113C01F096174528,Outdoor</code> </p> <p>As this settings are not persistent across reboots, you should add a <code>System#Boot</code> rule (or an entry in <code>autoexec.bat</code>). This will set your aliases again after each boot. For example:</p> <pre><code>Rule1 ON System#Boot DO\nBacklog DS18Alias 783C01F096F2BB28,1;\nDS18Alias 113C01F096174528,2;\nDS18Alias 8B0316C310F3FF28,3\nENDON\n</code></pre> <p>To remove the alias and return to the default naming scheme, use 0 as the number index: <code>DS18Alias &lt;sensor ID&gt;,0</code> For example: <code>DS18Alias 113C01F096174528,0</code></p>"},{"location":"DS18x20/#compile-options","title":"Compile Options","text":"<p>There are some compile options (driver code):</p> <p><code>USE_DS18x20_RECONFIGURE</code>:  When sensor is lost keep retrying or re-configure <code>DS18x20_USE_ID_AS_NAME</code>:   Use last 3 bytes for naming of sensors <code>DS18x20_USE_ID_ALIAS</code>:     Enable <code>DS18Alias</code> command (see above)</p>"},{"location":"DS18x20/#sensor-versions","title":"Sensor Versions","text":"<p>Pinout when looking at the flat side of the TO-92 package sensor: GND, Signal, VDD. Pinout of the wired sensor: black: GND; yellow or white: Signal, red: VDD </p>"},{"location":"DS18x20/#thr316dthr320d-wiring-notes","title":"THR316D/THR320D Wiring Notes","text":"4P4C RJ9/RJ10/RJ22 ESP DS18b20 1 (Yellow on image) 3V3 GPIO27 providing 3V3 Red on wired sensor 2 (Green on image) GPIO25 data Yellow or White on wired sensor 3 (Red on image) NC 4 (Black on image) GND Black on wired sensor <p>You do not need to add a pull-up resistor (The THR316D/THR320D has it built in.)</p>"},{"location":"DS18x20/#esp-01-wiring-notes","title":"ESP-01 Wiring Notes","text":"<p>Danger</p> <p>BEWARE OF MANY VISUALLY SIMILAR BOARDS TO THIS RELAY BOARD but different schematics</p> <p> </p> <p>Some modules have culprits: * \"CH_PD\" is not set to HI (3.3V) as actually required. Usually this is done with a 10K resistor or directly to 3.3V, I have connected directly to the 3.3V * A resistor (R2 10k) which is connected between the terminal GPIO0 to ground. This ensures that the GPIO0 is always pulled to ground, which actually places the ESP-01 in program mode (flashing). To make the module working it is necessary to remove (solder out).</p> <p>Connect DS18B20 to the GPIO2 (see diagram below - soldering not necessary, it is possible to put the wires and the resistor directly in to the female part of the connector together with ESP 01S module pins)</p> <p>After flashing, set up Tasmota (see images below): * \"Generic module\" * GPIO0 as Relay 1 * GPIO2 as DS18x20 </p>"},{"location":"DS18x20/#rule-triggers","title":"Rule Triggers","text":"<p>The following trigger events are supported for use in Rules:</p> <p>Single sensor attached: <pre><code>  ON DS1820#Temperature DO &lt;command&gt; ENDON\n</code></pre> Multiple sensors attached: <pre><code>  ON DS1820_1#Temperature DO &lt;command&gt; ENDON\n  ON DS1820_2#Temperature DO &lt;command&gt; ENDON\n  ON DS1820_3#Temperature DO &lt;command&gt; ENDON\n  ON DS1820_..#Temperature DO &lt;command&gt; ENDON\n</code></pre> Example: <pre><code> ON DS1820_1#Temperature!=%Var1% DO backlog publish espTempertature/sensor/DS1820_1/data %value%; Var1 %value% ENDON\n</code></pre></p>"},{"location":"DS3231/","title":"DS3231 Real Time Clock","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_RTC_CHIPS \n#define USE_RTC_CHIPS               // Enable RTC chip support and NTP server\n#endif\n#ifndef USE_DS3231\n#define USE_DS3231                  // [I2cDriver26] Enable DS3231 RTC (I2C address 0x68) (+1k2 code)\n#endif\n</code></pre> If you use a DS3231 with a different I<sup>2</sup>C address, uncomment and change your address with: <pre><code>#define USE_RTC_ADDR    0x68                  \n</code></pre></p> <p>Tasmota requires that its system time is set in order to use timers. Usually, when the device boots, it gets the time and date from an an NTP (Network Time Protocol) server located somewhere on the Internet. When there is no Internet connection, Tasmota is not able to request the current date and time. The DS3231 is an external Real Time Clock (RTC) component used for keeping the time and date set in the device when it cannot establish an Internet connection.</p> <p>Optionally, the <code>Time</code> command is available to manually set date and time for the real time clock. The DS3231 will evaluate this time and sync to it if date is later than Jan 1, 2016. Note that the <code>Time</code> command will disable NTP sync, and the real time clock will drift based on the accuracy of the DS3231 module.</p> <p>The RTC driver optionally includes a simple NTP server enabled by <code>#define RTC_NTP_SERVER</code>. It will respond to NTP requests on the standard port 123 as a stratum 1 server. This is useful as a backup time source for network devices if internet access is unavailable. NTP server can be activated with the command <code>RtcNtpServer 1</code> and deactivated with <code>RtcNtpServer 0</code></p>"},{"location":"DS3231/#configuration","title":"Configuration","text":""},{"location":"DS3231/#wiring","title":"Wiring","text":"DS3231 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"DS3231/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol>"},{"location":"DS3231/#wiring-on-d1-mini","title":"Wiring on D1 mini","text":""},{"location":"DS3231/#tasmota-settings_1","title":"Tasmota Settings","text":"<p>Any time your device has an NTP connection, the DS3231 internal clock will be set automatically. The first time RTC is used, you must have an Internet connection. From that point forward, the time is stored in the RTC and the device time will be restored from the RTC when there is no Internet connection.</p> <p>You can use your mobile phone hotspot for your device in a location where it can't get a Wi-Fi connection</p> <p>Check that the time is set correctly by inspecting the log in the Console. You should see messages that Tasmota read or wrote the time from and to the DS3231.  Make sure that the time is set correctly even when you do not have Internet connection.</p>"},{"location":"DY-SV17F/","title":"DY-SV17F MP3 Player module","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_DY_SV17F\n#define USE_DY_SV17F                   // Use of DY-SV17F MP3 Player commands: play, stop, track and volume\n    #define MP3_VOLUME           30    // Set the startup volume on init, the range can be 0..100(max)\n#endif\n</code></pre></p> <p>The DY-SV17F MP3 Player module has 4MBytes of internal flash storage for audio files you can upload via USB. An onboard 5W amplifier can power 4, 3-5W speakers     </p>"},{"location":"DY-SV17F/#configuration","title":"Configuration","text":""},{"location":"DY-SV17F/#wiring","title":"Wiring","text":"DY-SV17F ESP GND GND 5V 5V RX GPIO"},{"location":"DY-SV17F/#commands","title":"Commands","text":"Command Parameters MP3Play Play, works as a normal play on a real MP3 Player, starts at first MP3 file MP3Stop Stop MP3Track <code>x</code> = play track &lt;x&gt; MP3Volume <code>0..100</code> = set Volume <p>Datasheet</p>"},{"location":"DeepSleep/","title":"DeepSleep","text":"<p>DeepSleep support for up to 10 years (i.e., 86,400 seconds = 1 day) (e.g., if used with KNX). During DeepSleep, the device is effectively off and, as such, it is not possible to modify DeepSleepTime without exiting DeepSleep. </p> <p></p> <p>In order for the device to wake itself to perform its function during the DeepSleep cycle, the RST pin must be connected to the D0/GPIO16 pin. This is the only pin which can perform this function as the wake-up signal is sent from the RTC through D0/GPIO16 to RST. When connected to RST for DeepSleep purpose, GPIO16 may not be used for other functions. As such, it is recommended to leave it configured as <code>None (0)</code>. On the diagram, black denotes existing parts and connections on a standard ESP board (mini-D1, NodeMCU, ...). Red denotes what is added to the DeepSleep feature.</p> <p></p>"},{"location":"DeepSleep/#deepsleep-modes-regular-time-based","title":"DeepSleep modes (regular, time based)","text":"<p>There are TWO general methods to work with deepsleep. Method ONE wakes up the device on a regular interval, wait for TELEPERIOD and immediate go to deepsleep again. This is mostly to make regular measurements and send them to a MQTT broker. Method TWO is more complex and use TIMER events to wakeup the device. The way and when the device go to deepsleep again depends on the configuration. See explanation below.</p>"},{"location":"DeepSleep/#repeating-regular-deepsleep-based-on-interval","title":"Repeating regular deepsleep based on interval","text":"<p>(<code>DeepSleepTime</code>) <code>DeepSleepTime</code> sets the time the device remains in DeepSleep before it returns to full operating mode. Once the command is issued, the DeepSleep cycle commences. </p> <p>Example</p> <p>With <code>DeepSleepTime 3600</code>, the device will wake up exactly every hour (e.g., 8:00am, 9:00am, ...). If you define <code>DeepSleepTime 86400</code> (i.e., 60*60*24), it will wake-up exactly at 0:00 local time. There is no option to shift the wakeup time; except changing the timezone. If you define <code>DeepSleepTime 600</code>, it will wake-up every 10 minutes (e.g., 8:00, 8:10, 8:20, ...).</p> <p>Note</p> <p>The next wake time will always be an even number of <code>DeepSleepTime</code> cycles since the epoch (Midnight 1970-01-01).  This may matter if the sleep time isn't an even number of minutes/hours (ex: 3660), such as when trying to wake at a specific time of day.</p>"},{"location":"DeepSleep/#deepsleep-wakeup-based-on-timer-events","title":"DeepSleep wakeup based on TIMER events","text":"<p>With Version 13.2 there is a new functionality to use TIMERS for the wakeup process on deepsleep. In this case the deepsleeptime will be dynamically calculated through the TIMERS. To enable TIMERS on deepsleep there must be a <code>rule1 Wakeup</code></p> rule1 state Behavior <code>Wakeup</code> ON/1 Device will do a TELEPERIOD and go to deepsleep asap, similar to deepsleep with interval <code>Wakeup</code> OFF/0 Device will stay ON until send to deepsleep with Restart 9 (deepsleep) <code>Wakeup</code> ONCE/5 Device will do a TELEPERIOD and go to deepsleep asap, with the next wakeup the device will stay ON <p>Now every TIMER that has RULE as an action will wakeup the device at the proposed time. You can define multiple timers and multiple wakeups also defined on sunset or sunrise. The process will always select the NEXT wakeup it finds. As soon as all conditions meet a 60 second timer countdown starts to send the device to deepsleep. To prevent this it is recommended to disbale ALL timers on the UI during definition. If you tag the rule1 with ONCE the device will stay awake after the deepsleep. To send the device to deepsleep e.g. at sunset another rule can be used to do this:</p> <pre><code>Rule2\n  on time#minute==%sunset% do rule1 5 endon\n\nRule2 ON\n</code></pre> <p>Be aware that <code>rule1 Wakeup</code> will DISABLE the capability to use deepsleeptime. You have to clean rule1 if you want to use the regular wakeups through deepsleeptime window.</p> <p>Also be aware that <code>restart 9</code> does not trigger the deepsleep timing. It just send the device into deepsleep and you have to wake up the device externally.</p> <p></p> <p>Current timer will wakeup the device every day 1h after sunrise. The Time will be dynamically calculated.</p>"},{"location":"DeepSleep/#methods-to-temporarily-disable-deepsleep-mode","title":"Methods to (temporarily) disable DeepSleep mode","text":""},{"location":"DeepSleep/#using-a-switch","title":"Using a switch","text":"<p>Select another GPIO (let's call it \"GPIOn\") and connect it GND. This can be performed through a switch per the schematic below. Flipping the switch to \"ON\" will prevent Tasmota to enter DeepSleep again after next wake-up until the switch is flipped back OFF. On the diagram, blue denotes additional parts and connections to be able to disable DeepSleep. GPIOn should be defined as <code>DeepSleep (182)</code> in the configuration as shown below:</p> <p></p> <p>The following GPIOs CANNOT be used for the purpose of temporarily disabling DeepSleep as described above: - GPIO16 (because it is connected to RST), - GPIO15 (because of an existing on-board pull-down resistor), - GPIO0 (because pulling it down at wake up will enter serial bootload mode).</p> <p>All others GPIO should be acceptable.</p> <p>An interesting use-case is to disable DeepSleep when external power (USB, PSU, solar panel...) is applied to the device using a transistor.</p> <p></p> <p>If the device is not (easily) accessible, methods can be used to disable the DeepSleep loop without physical access.</p>"},{"location":"DeepSleep/#using-mqtt","title":"Using MQTT","text":"<p>Send a retained <code>DeepSleepTime 0</code> command to your device. As the message is retained in the MQTT broker, the device will receive it as soon as it connects to the MQTT broker.</p> <p>Example: Sending from another Tasmota</p> <p>In another Tasmota console you can type the following command: <code>Publish2 cmnd/%topic%/DeepSleepTime 0</code> To clear the retained message, once your device is out of DeepSleep, use: <code>Publish2 cmnd/%topic%/DeepSleepTime</code></p> <p>Example: Sending using mosquitto utilities</p> <p>Command to send a retained message: <code>mosquitto_pub -t \"cmnd/myDeviceTopic/DeepsleepTime\" -r -m \"0\"</code> Remove retained message <code>mosquitto_pub -t \"cmnd/myDeviceTopic/DeepsleepTime\" -r -n</code></p> <p>You can also send retained message or clear them with other MQTT tools: MQTT Explorer, ....</p> <p>Once you have made your configuration change, you will need to re-enable DeepSleep mode using <code>DeepSleepTime</code> command.</p>"},{"location":"DeepSleep/#using-smart-home-automation","title":"Using smart home automation","text":"<p>Configure a settable flag in your home automation hub (e.g., Node-Red, openHAB, Home Assistant). The flag should subscribe to the <code>tele/%topic%/LWT</code> topic for the payload <code>Online</code>. Alternatively, if testing the payload value is not easy, subscribe to the topic <code>tele/%topic%/STATE</code> which is the 2nd topic on which the device publish right after waking-up.</p> <p>The moment a message is received on this topic, the automation can publish a message to topic <code>cmnd/%topic%/DeepSleepTime</code> with payload <code>0</code>. This will cause the device to disable DeepSleep and allow maintenance such as firmware updates to be performed without having an unexpected DeepSleep event. Send the <code>DeepSleepTime 0</code> command only once.</p> <p>Once device maintenance is completed, place it back into DeepSleep mode using original configuration.</p>"},{"location":"DeepSleep/#rules","title":"Rules","text":"<p>Example</p> <p>An example of a ruleset which deepsleeps a device with a RTC module attached during a certain portion of the day (i.e. at night). Mem1 is set to wakeup time in the morning (i.e. 540) and Mem2 to sleep time (i.e. 1080). For network attached devices with no RTC module, <code>time#initialized</code> trigger is better than <code>system#init</code>. Might be smart to have a DeepSleep gpio assigned if you need to access the device outside of normal awake hours. <pre><code>rule1 \non system#init do backlog event timecheck=%time%; ruletimer1 1 endon\non time#minute do event timecheck=%time%; ruletimer1 1 endon\non event#timecheck&lt;%mem1% do Var1 3600 endon\non event#timecheck&gt;%mem1% do Var1 0 endon\non event#timecheck&gt;%mem2% do Var1 3600 endon\non rules#timer=1 do deepsleeptime %var1% endon\n</code></pre></p> <p>The following triggers can be used to execute commands upon wake-up or right before entering DeepSleep: - <code>Power1#Boot</code> : is the earliest trigger. But valid only if you have a <code>Relay</code> output defined. - <code>Switch1#Boot</code> : is the next trigger, also occur very early in the boot process. But valid only if you have <code>Switch</code> input defined. - <code>System#Boot</code> : is occurring later in the Tasmota boot process but is always available. - <code>System#Save</code> : is occurring right before a restart or before entering DeepSleep.</p> <p>For example the ruleset below turn on power right after Tasmota started, and turn it off just before entering DeepSleep  <pre><code>Rule1 ON Power1#Boot DO Power on ENDON ON System#Save DO Power off ENDON\n</code></pre> Any rule apply AFTER the Init() procedures of all sensors/drivers. This does mean that a POWER OFF on the GPIO may prevent sensors from being initialized correctly during start-up (e.g. DS18B20) and do not show up in teleperiod message. To ensure the GPIO is HIGH during restart you should define in the <code>Configure</code> --&gt; <code>Configure module</code> --&gt; <code>GPIO x</code> to <code>Output Hi</code> instead of <code>RELAY 1</code> and avoid using any rules. To ensure the GPIO goes LOW after deepsleep you need to solder a 4.7K resistor between GND and the GPIO.</p> <p>Sequence is then as follow (only key lines are shown): <pre><code>00:00:00.085 CFG: Loaded from File, Count 122\n00:00:00.095 Project tasmota demo-sensor Version 9.5.0(tasmota-sensors)\n00:00:00.105 RUL: POWER1#BOOT performs \"Power ON\"\n00:00:00.109 RSL: POWER = {\"POWER\":\"ON\"}\n00:00:00.111 RSL: POWER = ON\n00:00:04.454 WIF: Connecting to AP1 DEMOAP Channel 1 BSSId XX:XX:XX:XX:XX:XX in mode 11n as demo-sensor...\n00:00:05.756 WIF: Connected\n00:00:06.008 HTP: Web server active on dev-4119 with IP address 192.168.168.199\n15:03:40.010 MQT: Attempting connection...\n15:03:40.024 MQT: Connected\n15:03:40.028 MQT: tele/demo-sensor/LWT = Online (retained)\n15:03:40.032 MQT: cmnd/demo-sensor/POWER = \n15:03:40.047 MQT: stat/demo-sensor/POWER = {\"POWER\":\"ON\"}\n15:03:40.050 MQT: stat/demo-sensor/POWER = ON (retained)\n15:03:44.472 MQT: tele/demo-sensor/STATE = {\"Time\":\"2021-06-27T15:03:44+02:00\",\"Uptime\":\"0T00:00:13\",\"UptimeSec\":13,\"Heap\":28,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":1,\"POWER\":\"ON\",\"Wifi\":{\"AP\":1,\"SSId\":\"DEMOAP\",\"BSSId\":\"XX:XX:XX:XX:XX:XX\",\"Channel\":1,\"Mode\":\"11n\",\"RSSI\":86,\"Signal\":-57,\"LinkCount\":1,\"Downtime\":\"0T00:00:07\"}}\n15:03:44.500 MQT: tele/demo-sensor/SENSOR = {\"Time\":\"2021-06-27T15:03:44+02:00\",\"Switch1\":\"OFF\",\"Switch2\":\"ON\"} (retained)\n15:03:44.515 RUL: SYSTEM#SAVE performs \"Power OFF\"\n15:03:44.524 MQT: stat/demo-sensor/POWER = {\"POWER\":\"OFF\"}\n15:03:44.527 MQT: stat/demo-sensor/POWER = OFF (retained)\n15:03:44.539 MQT: stat/demo-sensor/DEEPSLEEP = {\"DeepSleep\":{\"Time\":\"2021-06-27T15:04:00\",\"Epoch\":1624799040}}\n15:03:47.433 APP: Sleeping\n</code></pre></p>"},{"location":"DeepSleep/#driver-writer-executing-commands-before-entering-deepsleep","title":"Driver writer: Executing commands before entering DeepSleep","text":"<p>When writing a driver for a sensor, if the sensor supports a low power mode, it is a good practice to set the sensor in such low power mode in the FUNC_SAVE_BEFORE_RESTART handler. When Tasmota will restart at next wake-up, sensor will be automatically re-initialized. </p> <p>Example from <code>xsns_09_bmp.ino</code>: <pre><code>#ifdef USE_DEEPSLEEP\n      case FUNC_SAVE_BEFORE_RESTART:\n        BMP_EnterSleep();\n        break;\n#endif // USE_DEEPSLEEP \n</code></pre></p> <p>In general you can also execute any command or special script BEFORE device goes into DeepSleep using handler FUNC_SAVE_BEFORE_RESTART as a predefined hook to implement your own procedure. This requires you to code your own function and self-compile custom firmware.</p>"},{"location":"DeepSleep/#overcome-network-issues","title":"Overcome network issues","text":"<p>If the device is not able to make a WIFI connection and get an IP during the first 15 seconds after boot it will go again without any further actions into deepsleep for another cycle. If you compile your own firmware you can change the timeout (e.g. 30 seconds) by setting <code>#define DEEPSLEEP_NETWORK_TIMEOUT 30</code> in <code>user_config.override</code> or disable completely (device stay online until network connected) with <code>#define DEEPSLEEP_NETWORK_TIMEOUT 0</code>. If MQTT or NTP does not work the TELEPERIOD will execute anyhow and send the device to deepsleep afterwards. A wrong NTP will result in wrong timestamp send to MQTT. A missing MQTT connection will avoid any send.</p> <p>Another method to send the device into deepsleep after start is creating a rule like the one below. In this case the timeout can be configured online and changed. <pre><code>Rule1\n  ON Dimmer#Boot DO RuleTimer1 30 ENDON\n  ON Rules#Timer=1 DO DeepSleepTime 3600 ENDON\n\nRule1 ON\n</code></pre></p>"},{"location":"DeepSleep/#deepsleep-algorithm-general-timing","title":"DeepSleep Algorithm General Timing","text":"<p>Let's assume you have set <code>DeepSleepTime 3600</code> (one hour) and <code>TelePeriod 60</code> (one minute). The device will first wake at 8:00 am. The device will boot and connect Wi-Fi. Next, the correct time must be synchronized from one of the NTP servers and initial telemetry is sent.</p> <p>DeepSleep is then triggered after the next TelePeriod event. In this example, it will occur after one minute. Telemetry will be collected and sent (e.g., via MQTT) and DeepSleep can happen. First, <code>Offline</code> is published to the LWT topic on MQTT. It then calculates the new sleeping time to wake-up at 9:00 am (3600 seconds after the last wake-up). At 9:00 am this same sequence of events happens again.</p> <p>If you want to minimize the time that the device is in operation, two special values for TelePeriod exist: 10 seconds and 300 seconds.  Using either of these two exact values will prevent waiting for the next telemetry.  DeepSleep will be triggered within a few second of the time being synchronized rather than waiting for the TelePeriod.</p>"},{"location":"DeepSleep/#esp8266-deepsleep-side-effects","title":"ESP8266 DeepSleep Side-effects","text":"<p>Not all GPIO behave the same during DeepSleep. Some GPIO go HIGH, some LOW, some FOLLOW the relay but work only on FET transistors. As soon as current flows they go LOW. I use one GPIO to trigger a BC337 transistor to switch OFF all connected devices during DeepSleep.</p> <p>Findings:</p> Pin GPIO Behavior D0 16 Excluded due to use as wake-up pin D1 5 KEEP STATE, go LOW if resistance to ground &lt; infinite D2 4 KEEP STATE, go LOW if resistance to ground &lt; infinite D3 0 HIGH D4 2 HIGH D5 14 HIGH, go LOW if resistance to ground &lt; infinite D6 12 HIGH, go LOW if resistance to ground &lt; infinite D7 13 HIGH, go LOW if resistance to ground &lt; infinite D8 15 LOW"},{"location":"DeepSleep/#log-output-explanation","title":"Log Output Explanation","text":"<p>(logging level <code>4</code>)</p> <p>When MQTT connects at <code>13:08:38</code>, this sets the system to READY. <pre><code>13:08:43 MQT: tele/tasmota/INFO3 = {\"RestartReason\":\"Deep-Sleep Wake\"}\n13:08:44 APP: Boot Count 3\n13:08:44 CFG: Saved to flash at F4, Count 96, Bytes 3824\n</code></pre></p> <p>In the context of DeepSleep, maintaining a device boot count is not relevant. When DeepSleep is enabled, boot count will not be incremented. This avoids excessive flash writes which will deteriorate the flash memory chip and eventually cause the device to fail. Boot count incrementing can be enabled using <code>SetOption76</code>.</p> <p>In this example, TelePeriod is 10. Therefore when it is reached, telemetry reporting occurs. <pre><code>13:08:48 MQT: tele/tasmota/STATE = {\"Time\":\"2019-09-04T13:08:48\",\"Epoch\":1567595328,\"Uptime\":\"0T00:00:14\",\"UptimeSec\":14,\"Heap\":24,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":20,\"MqttCount\":1,\"Wifi\":{\"AP\":1,\"SSId\":\"MyWLAN\",\"BSSId\":\"AA:FF:AA:AA:AA:AA\",\"Channel\":11,\"RSSI\":100,\"LinkCount\":1,\"Downtime\":\"0T00:00:08\",\"DeepSleep\":300,\"Heap\":25160}}\n13:08:48 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-09-04T13:08:48\",\"Epoch\":1567595328,\"ANALOG\":{\"A0\":8}}\n</code></pre></p> <p>Date and time is set, status and telemetry sent. Now start shutdown procedure.</p> <p>First, send MQTT offline. <code>13:08:48 MQT: state/sonoff/LWT = Offline</code></p> <p>DeepSleep is 300 seconds. Therefore +-30 sec is allowed as deviation between proposed wake-up time and real wake-up time. Reporting in 0.1sec. In this case wake-up was one second late. <code>13:08:48 Timeslip 0.1 sec:? -300 &lt; -10 &lt; 300</code></p> <p>If the error is in the range, this is tagged as a normal wake up where drift can be recalculated <code>13:08:48 Normal deepsleep? 1</code></p> <p>Recalculate a new drift that is a multiplier for the next wake-up in 1/10000. In this case, the multiplier is 1.0257 <code>13:08:48 % RTC new drift 10257</code></p> <p>And for information: New target wake-up time <code>13:08:48 Next wakeup 2019-09-04T13:10:00</code></p> <p>Based on run time and the error in the last loop, a new sleeping time will be calculated. This will be multiplied by the <code>deepsleep_slip</code> and, ideally, the device will wake up at the time above. <code>13:08:48 Sleeptime 285 sec, deepsleep_slip 10257</code></p> <p>The effectiveness of the compensation can be seen here. Instead of typically 160-200 seconds, most times it is better than 10 seconds in a one hour DeepSleep cycle.</p> <p></p>"},{"location":"DeepSleep/#rules-to-adapt-deepsleep-period-to-battery-level","title":"Rules to adapt DeepSleep period to battery level.","text":"<p>In some applications, it is interesting to adjust the DeepSleep period to the level of the battery. For this, we consider that:</p> <ul> <li>the battery level is measured by the ESP ADC with the appropriate voltage divider,</li> <li>the Tasmota ADC mode is set to Range mode,</li> <li><code>AdcParams 6</code> has been used so the range value represent the battery voltage in millivolts</li> <li>There is a <code>BatteryPercentage</code> feature that can be feeded by a rule and used here to drive DeepSleep behavior</li> </ul> <p>The below graph represent the adaptation paths we want to follow to adjust DeepSleepTime: one path while the level is dropping, another path while the level is rising.</p> <p></p> <p>To implement this in Tasmota we can use Rules. As Rules do not provide an AND operator, we also need the optional <code>IF</code> feature. This requires to compile a customized firmware with the following items in <code>user_config_override.h</code>:</p> <pre><code>#define USE_RULES\n#define SUPPORT_IF_STATEMENT\n</code></pre> <p>First, we need to know the current value of DeepSleepTime. Values for internal settings are not available as %variable% but they can generally be obtained by sending the command and capturing  the result with a rule. To get the current value of DeepSleepTime, we need a trigger early in the  boot process. For example <code>Wifi#Connected</code>.</p> <p>Our first rules to get the current DeepSleepTime into %var1% would be:</p> <pre><code>ON Wifi#Connected DO Backlog DeepSleepTime ENDON\nON DeepSleepTime#Data DO var1 %value% ENDON\n</code></pre> <p>The best moment to compare the battery level and decide if it is necessary to change the DeepSleepTime is right after the TelePeriod SENSOR message has been sent, which is just before Tasmota calculate the next wake-up time. So we can use <code>tele-ANALOG#Range</code> as a trigger for our rules. Using BREAK allows to compare the trigger only to the upper value of the segment and stop further rules evaluations if the comparison is met. In the rule statement for a given battery level, we compare the current value of DeepSleepTime (which is %var1%) with the value we vant (given by the graph). If the current value is lower than the value we want, we are on the decreasing path and we can apply the new value. If the current value is greater than the value we want, we are on the rising path and we can apply the new value.</p> <p></p> <p>All above can be set into Rule1. As it is a long command, it may be necessary to enter the rule  in 2 parts (note the usage of the <code>+</code>) :</p> <pre><code>Rule1 on Wifi#Connected do backlog deepsleeptime endon on deepsleeptime#data do var1 %value% endon on tele-Analog#Range&lt;3450 do if (%var1%&lt;3600) deepsleeptime 3600 endif break on tele-Analog#Range&lt;3650 do if (%var1%&lt;1800) deepsleeptime 1800 endif break \nRule1 +on tele-Analog#Range&lt;3800 do if (%var1%&lt;900) deepsleeptime 900 elseif (%var1%&gt;1800) deepsleeptime 1800 endif break on tele-Analog#Range&lt;4000 do if (%var1%&gt;900)deepsleeptime 900 endif break on tele-Analog#Range&gt;=4000 do if (%var1%&gt; 600) deepsleeptime 600 endif endon\n</code></pre> <p>Don't forget to enable using <code>Rule1 1</code></p>"},{"location":"DeepSleep/#deepsleep-power-saving","title":"DeepSleep Power Saving","text":"<p>The amount of power saved during deep sleep depends significantly on the type of ESP module used.  For example, an ESP-M3 module drops to 20-25 uA at 2.5-3.3 V when in deep sleep.  Other devices, with onboard regulators, USB chips etc. like the WEMOS D1 Mini, may still require 18 mA at 5 V when in deep sleep (i.e.: greater than 1000 times more power).</p>"},{"location":"Device-Groups/","title":"Device Groups","text":"<p>Allow devices to share values and control entire groups of devices</p> <p>A framework to allow multiple devices to be in a group with values such as power, light color, color temperature, brightness, PWM values, sensor values and more, all shared with other devices in the group. For example, with multiple lights in a device group, light settings can be changed on one light and the settings will automatically be changed on  other lights. Dimmer switches could be in a device group with lights and that dimmer switch could control the power, brightness and colors of all the lights in the group. Multiple dimmer switches could be in a device group to form a 3-way/4-way dimmer switch.</p> <p>UDP multicasts, followed by UDP unicasts if necessary, are used to send updates to all devices so updates are fast. There is no need for an MQTT server but all the devices in a group must be on the same multicast network. The multicast address and port are specified at compile time with the <code>DEVICE_GROUPS_ADDRESS</code> (default = 239.255.250.250) and <code>DEVICE_GROUPS_PORT</code> (default = 4447) macros respectively.</p> <p>To enable device groups, execute command:  <code>SetOption85 1</code>. All devices in a group must be running firmware with device group support and have device groups enabled.</p>"},{"location":"Device-Groups/#operation","title":"Operation","text":"<p>The device group name is set with the <code>DevGroupName</code> command (<code>GroupTopic</code> prior to v8.2.0.3). If a device group name is not set for a group, the MQTT group topic is used (with the device group number appended for device group numbers &gt; 1). All devices in the same multicast network with the same device group name are in the same group. Some modules may define additional device groups. For example, if Remote Device Mode is enabled, the PWM Dimmer module defines three devices groups.</p> <p>The items sent and received from the group are selected with the <code>DevGroupShare</code> command. By default all items are sent and received. An example of when the <code>DevGroupShare</code> command would be used is when you have a group of lights that you control with a dimmer switch and home automation software. You want the dimmer switch to be able to control all items. The home automation software controls each light individually. When it controls the whole group, it actually sends command to each light in the group. If you use the home automation software to turn an individual light on or off or change it's brightness, color or scheme, you do not want the change to be replicated to the other lights. In this case, you would set the incoming and outgoing item masks to <code>0xffffffff</code> (all items) on the dimmer switch (<code>DevGroupShare 0xffffffff,0xffffffff</code>) and set the incoming item mask to 0xffffffff and outgoing item mask to 0 on all the lights (<code>DevGroupShare 0xffffffff,0</code>).</p> <p>By default, the state of all relays, light settings, etc, are sent to and received from device group 1. To enable each relay (or light channels if option 68 is enabled) to be in a separate device group, enable option 88 (<code>SetOption88 1</code>). When option 88 is enabled, the <code>DevGroupTie</code> sets which relay each device group is tied to. Each device group can only be tied to a single relay. By default, relay 1 is tied to device group 1 (relay 1 updates are sent to/received from device group 1), device 2 is tied to device group 2, device 3 is tied to device group 3 and device 4 is tied to device group 4. If a device group is only to be used by DevGroupSend to send updates to a device group, tie it to device 0.</p> <p>To implement a device group with lights that change color in sequence (colors move progressively from light to light), use the <code>SequenceOffset</code> command to specify the offset of each light from the master. If your devices have friendly names or MQTT topics that end in the number of the light, <code>SequenceOffset1</code> can automatically set the offset based on the friendly name/MQTT topic. Once the sequence offset is set, each light will delay light channel changes by the specified number of updates. For example, if you have three lights with friendly names Light1, Light2 and Light3, you can use the <code>SequenceOffset1</code> command to set the sequence offsets. When you set the color on Light1 to red, then to green and then to blue, the color on Light2 will be green and the color on Light3 will be red. When you set the color on Light1 back to red, the color on Light2 will change to blue and the color on Light3 will change to green.</p> <p>When a device reboots or loses network connectivity, it requests the current status from device group members when it reconnects. There are times when devices in a device group may be set to a mix of power states, colors, brightnesses, etc. via automation software. For example, you may have a scene that sets the lights in the group to different colors. In this case, the devices in the group should not send light channel information until the color is changed on one of the dimmer switches/masters. To indicate that devices in a device group currently have one or more items that should not be kept in sync, publish/execute the <code>DevGroupSend</code> command with the item value prefixed with N on one of the devices that includes the item in its outgoing share mask. For example, the command DevGroupSend 224=NFF0000 executed on a dimmer switch in the group would set the color to red on the dimmer switch and inform the group that light channel information is not to be shared. You can then set the colors on the lights in the group to assorted colors and the dimmer switch will not change them. Once you set the color on the dimmer switch again (either with the <code>Color</code> command or with DevGroupSend without the N prefix), the syncing will resume and the colors on the lights will be changed to the that color. You can directly control which items are not shared until they are changed using the <code>DevGroupSend</code> command No Status Share (129) item.</p>"},{"location":"Device-Groups/#troubleshooting","title":"Troubleshooting","text":"<p>If no values seem to be shared between devices, perform the following checks:</p> <ul> <li>Enter the command<code>SetOption85</code> on all devices in the group and make sure the result is ON on all devices.</li> <li>Enter the command <code>DevGroupName</code> on all devices in the group and make sure the result for device group 1 is the exact same (case-sensitive) name on all devices.</li> <li>Enter the command <code>DevGroupShare -1,-1</code> on all devices in the group to enable sharing of all items.</li> <li>Enter the command <code>DevGroupSend 128=1</code> on one device in the group. If the power turns on on the other devices, the device groups feature is working.</li> <li>Enter the command <code>DevGroupStatus</code> on all devices in the group. If you do not see all the other devices in the group listed as members, multicast packets are not being received by the devices. Check the network infrastructure that connects the devices together to make sure multicasts are enabled are not being filtered.</li> </ul>"},{"location":"Device-Groups/#commands","title":"Commands","text":"Command Parameters DevGroupName&lt;x&gt; <code>0</code> = clear device group &lt;x&gt; name and restart<code>&lt;value&gt;</code> = set device group  name and restart.\\If a device group name is not set for a group, the MQTT group topic (<code>GroupTopic</code>) is used (with the device group number appended for device group numbers &gt; 1). DevGroupSend&lt;x&gt; <code>&lt;item&gt; = &lt;value&gt;[ ...]</code> = send an update to device group &lt;x&gt;. The device group name must have been previously set with DevGroupName&lt;x&gt;. Multiple item/value pairs can be specified separated by a space. Spaces in <code>&lt;value&gt;</code> must be escaped with a backslash (\\). The message sent is also processed on the local device as if it had been received from the network.For items with numeric values, <code>&lt;value&gt;</code> can be specified as @&lt;operator&gt;[&lt;operand&gt;] to send a value after performing an operation on the current value. &lt;operator&gt; can be + (add), - (subtract), ^ (invert), &amp; (bitwise AND) or | (bitwise OR). If &lt;operand&gt; is not specified, it defaults to 0xffffffff for the invert operator and 1 for other operators.To indicate that an item should not be shared with the group until changed again, prefix the value with N.<code>1</code> = Send the current value of all items. This will bring all the devices in sync  after devices in a group have been set to different values (such as different colors on lights in a group). If N is not specified for the value, the list of items previously sent with an N prefix is cleared.<code>3</code> = Light fade (0 = Off, 1 = On)<code>4</code> = Light speed (1..40)<code>5</code> = Light brightness (0..255)<code>6</code> = Light <code>Scheme</code><code>7</code> = Light fixed color (0 = white (using CT channels), other values according to <code>Color</code>)<code>8</code> = PWM dimmer low preset (0..255)<code>9</code> = PWM dimmer high preset (0..255)<code>10</code> = PWM dimmer power-on brightness (0..255)<code>128</code> = Relay Power - bitmask with bits set for relays to be powered on. The number of relays can be specified in bits 24 - 31. If the number of relays is not specified, only relay 1 is set<code>129</code> = No Status Share - DevGroupShare bitmask indicating which items should not be shared until changed.<code>192</code> = Event - event name and arguments<code>193</code> = Command - command and arguments<code>224</code> = Light channels - comma separated list of brightness levels (0..255) for channels 1 - 5 (e.g. 255,128,0,0,0  will turn the red channel on at 100% and the green channel on at 50% on an RGB light) or hex color value (#RRGGBB, #RRGGBBWW, etc.)Examples:<code>DevGroupSend 5=90 128=1</code> - send an update to set the light brightness to 90 and turn relay 1 on.<code>DevGroupSend 193=Buzzer\\ 2,3</code> - send the Buzzer 2,3 command.<code>DevGroupSend 6=@+ 4=@-10</code> - set the next fixed color and decrease the brightness by 10.<code>DevGroupSend 128=@^</code> - toggle all the relays.<code>DevGroupSend 224=NFF0000</code> - set the color to red locally and inform the group that light channel information is not to be shared until changed.<code>DevGroupSend 129=@\\|18</code> - do not share light brightness or channel status until changed. DevGroupShare <code>&lt;in&gt;,&lt;out&gt;</code> = set incoming and outgoing shared items (default = <code>0xffffffff,0xffffffff</code>) &lt;in&gt; and &lt;out&gt; are bit masks where each mask is the sum of the values for the categories (listed below) to be shared. For example, to receive only power (1), light brightness (2) and light color (16) and send only power (1), enter the command DevGroupShare 19,1.<code>1</code> = Power<code>2</code> = Light brightness<code>4</code> = Light fade/speed<code>8</code> = Light scheme<code>16</code> = Light color<code>32</code> = Dimmer settings (presets)<code>64</code> = Event DevGroupStatus&lt;x&gt; Show the status of device group &lt;x&gt; including a list of the currently known members. DevGroupTie&lt;x&gt; <code>&lt;relay&gt;</code> = Tie the relay to the device group &lt;x&gt;. Only applies when option 88 is enabled. SequenceOffset&lt;x&gt; <code>0..255</code> = set device group color sequence offset. Color updates received from device group will be delayed by the specified number of updates.x = <code>0..2</code><code>0</code> = set offset to &lt;value&gt;<code>1</code> = set offset to friendly name 1 ending digits + &lt;value&gt; [default -1]<code>2</code> = set offset to MQTT topic ending digits + &lt;value&gt; [default -1]Example.: For friendly name of Light4, SequenceOffset1 will set sequence offset to 3; SequenceOffset1 2 will set offset to 6."},{"location":"Device-Recovery/","title":"Device Recovery","text":"<p>Configuration problems can cause boot loops, erratic behavior, devices which will not appear (i.e., no <code>tasmota-xxxx</code> AP) or connect to Wi-Fi, etc. In cases such as these when there is no proper operation a recovery process is required.</p> <p>By default, the firmware tries to preserve the existing configuration (to support automated updates via OTA upgrades). However, various things can happen that cause the existing configuration to become problematic, e.g., when upgrading from old releases without following the migration path.</p> <p>When code updates change the values or the way settings are used, those code changes don't directly write the settings on the running device when you load the new firmware. What happens is that when it boots up, the firmware looks to see if it has a valid configuration (if it's an upgrade from an older Tasmota version) and if the CFG_HOLDER value is in the right place it assumes that the existing configuration is valid.</p> <p>If it doesn't find the right value it assumes that this is not a \"simple\" upgrade and takes the compiled-in configuration settings and writes them out to the configuration area.</p>"},{"location":"Device-Recovery/#recovery-techniques","title":"Recovery Techniques","text":"<p>Listed below are a few ways to reset the device to what is set in the firmware binary (<code>my_user_config.h</code> and <code>user_config_override.h</code>) aka firmware defaults, in order to recover a device:</p> <ul> <li>Hold the button (<code>Button1</code>) down, if available, for 40 seconds. After that the device should reset and reboot. Fully cycle power after that is done to make sure everything is starting from scratch.</li> <li>Issue <code>Reset 1</code> command via the console, MQTT or HTTP. After the device reboots fully cycle power.  </li> <li>use Fast Power Cycle Device Recovery procedure</li> </ul>"},{"location":"Device-Recovery/#fast-power-cycle-device-recovery","title":"Fast Power Cycle Device Recovery","text":"<p>Implemented for situations where a device cannot be reset to firmware defaults by other means (no serial access, no button). It resets ALL Tasmota settings (equal to <code>Reset 1</code>) after 7 power cycles.</p> <p><code>SetOption65</code> must be set to <code>0</code> (default) in order for this feature to be enabled.</p> <p>Warning</p> <p>If you have a weak power grid or frequent power brownouts it's best to disable this feature with <code>SetOption65 1</code> immediately or you'll end up with firmware default devices after a brownout event.</p>"},{"location":"Device-Recovery/#procedure","title":"Procedure","text":"<ol> <li>Cut power from the device completely for 30 seconds</li> <li>Power the device on and off six times with intervals lower than 10 seconds and leave it on after seventh time. While it may work being quick, a pace of 2 seconds for both the on and off steps recommended.</li> <li>Fast power cycle device recovery should activate and the device should be reset to firmware defaults</li> </ol> <p>If you flashed a precompiled binary you can reconfigure the device using the web UI after the reset. </p>"},{"location":"Device-Recovery/#after-recovery","title":"After Recovery","text":"<p>Once recovered, the device should be observed that it operates without instabilities before attempting to configure the device in any way. If the device still does not, follow these steps if you are able to configure its Wi-Fi and connect:</p> <ol> <li>Configure the device as <code>Generic (18)</code></li> <li>Perform an OTA upgrade specifically to <code>tasmota-minimal.bin</code>. Taking this intermediate step ensures that the firmware will be reloaded. Since Tasmota performs a version comparison before performing the OTA update, explicitly changing the firmware that is on the device will ensure that the firmware is indeed replaced in the next step.</li> <li>Perform an OTA upgrade to the desired firmware variant.</li> </ol> <p>Once the device operates reliably, begin the configuration to set the GPIO configuration (via a Template or Module). Take any further configuration steps one at a time to ensure that after each setting is applied, the device continues to operate reliably.  </p> <p>If the device exhibits defective behavior immediately after a particular individual setting is changed, then be aware that there may be a problem in the firmware. Please report this behavior via the Tasmota Discord Chat.  </p>"},{"location":"Device-Recovery/#that-didnt-work-what-now","title":"That Didn't Work, What Now?","text":"<p>If none of these methods result in a working and reliable device, the only remaining option is to connect the device to the serial programming interface, erase the flash memory and flash a different precompiled firmware binary.</p>"},{"location":"Displays/","title":"Displays","text":"<p>This feature is included only in <code>-displays.bin</code></p>"},{"location":"Displays/#supported-displays","title":"Supported Displays","text":"DisplayModel Name Interface 1 LCD display I<sup>2</sup>C 2 SSD1306 OLED display I<sup>2</sup>C 3 8x8 MATRIX display GPIO 4 ILI934x TFT display<code>DisplayIliMode 1</code> for ILI9341 or <code>DisplayIliMode 3</code> for ILI9342When second SPI bus on ESP32 is used, SSPI must be defined instead of SPI SPI 5 Waveshare E-Paper 2.9\" display (black/white, partial update) SPI 6 Waveshare E-Paper 4.2\" display (black/white, full update) SPI 7 SH1106 OLED display I<sup>2</sup>C 8 ILI9488 TFT display SPI 9 SSD1351 OLED color display SPI 10 RA8876 TFT display SPI 11 7 segment common anode display I<sup>2</sup>C 12 ST7789 TFT display SPI 14 SD1331 TFT display SPI 15 TM1637, TM1638 and MAX7219 7-segment displays GPIO 16 LilyGO T5 4.7\" E-Paper display ESP32 device 17 Universal Display Driver SPI or I<sup>2</sup>C 18 Interface to virtual display driver with Berry 19 MAX7219 Dot Matrix Interface GPIO 20 TM1650 7-segment displays I<sup>2</sup>C"},{"location":"Displays/#display-commands","title":"Display Commands","text":"<p>See commands page for full list of available Display Commands </p>"},{"location":"Displays/#displaymode","title":"DisplayMode","text":"<p>The display driver is able to display predefined setups of text or user defined text. To display text using <code>DisplayText</code> set <code>DisplayMode</code> to <code>0</code>, or set <code>DisplayMode</code> to <code>1</code> for the HT16K33 dot-matrix display.  </p> <p>To use the seven-segment-specific TM1637, TM1638 and MAX7219 or TM1650 Display- commands, set <code>DisplayMode</code> to <code>0</code>.</p> Parameter LCD Display OLED Display TFT Display 7-segment Display (TM163x, MAX7219 and TM1650) 0 DisplayText DisplayText DisplayText All TM163x / TM1650 Display- functions 1 Time/Date Time/Date Time/Date Time 2 Local sensors Local sensors Local sensors Date 3 MQTT and Time/Date Local sensors and Time/Date Local sensors and Time/Date Time/Date 4 Local sensors MQTT and local sensors MQTT and local sensors NA 5 MQTT and Time/Date MQTT, local sensors and Time/Date MQTT, local sensors and Time/Date NA"},{"location":"Displays/#displaytext","title":"DisplayText","text":"<p>The <code>DisplayText</code> command is used to display text as well as graphics and graphs on LCD, OLED and e-Paper displays (EPD). The command argument is a string that is printed on the display at the current position. The string can be prefixed by embedded control commands enclosed in brackets <code>[]</code>.</p> <p>In order to use the <code>DisplayText</code> command the <code>DisplayMode</code> must be set to <code>0</code> (or optional <code>1</code> on LCD displays) or other modes must be disabled before compilation with <code>#undef USE_DISPLAY_MODES1TO5</code>.  </p> <p>The <code>DisplayText</code> command is customised for the TM1637, TM1638 and MAX7219 or TM1650 seven-segment display modules. This is documented here and here.  </p>"},{"location":"Displays/#displaytext-parameters","title":"DisplayText Parameters","text":"<p>In the list below <code>p</code> stands for parameter and may be a number from 1 to n digits. On monochrome graphic displays things are drawn into a local frame buffer and sent to the display either via the <code>d</code> command or automatically at the end of the command.</p> <p>Co-ordinates are mapped from 0,0 (x,y) at the top left of the logical display, where x is the horizontal axis incrementing right and y is the vertical axes incrementing down. How the logical display is physically displayed (rotated) on screen can be adjusted on some displays using the <code>DisplayRotate</code> command.</p>"},{"location":"Displays/#positioning","title":"Positioning","text":"<p><code>lp</code> = sets a character line to print at (on LCD display <code>p</code> = {0\u2026}, on TFT display <code>p</code> = {1\u2026}) <code>cp</code> = sets a character column to print at (on LCD display <code>p</code> = {0\u2026}, on TFT display <code>p</code> = {1\u2026}) <code>xp</code> = sets the x position for consecutive prints <code>yp</code> = sets the y position for consecutive prints  </p> <p>Text is printed at the last provided position, either l or y for the vertical position, and either x or x for the horizontal position. Neither x nor y are advanced/updated after printing text.</p>"},{"location":"Displays/#line-primitives","title":"Line Primitives","text":"<p><code>hp</code> = draws a horizontal line with length <code>p</code> (x is advanced) <code>vp</code> = draws a vertical line with length <code>p</code> (y is advanced) <code>Lp:p</code> = draws a line to destination <code>p:p</code> (x,y are advanced) <code>kp</code> = draws a circle with radius <code>p</code> <code>Kp</code> = draws a filled circle with radius <code>p</code> <code>rp:p</code> = draws a rectangle with <code>p</code> width and <code>p</code> height <code>Rp:p</code> = draws a filled rectangle with <code>p</code> width and <code>p</code> height <code>up:p:p</code> = draws a rounded rectangle with <code>p</code> width, <code>p</code> height and <code>p</code> radius v <code>Up:p:p</code> = draws a filled rounded rectangle with <code>p</code> width, <code>p</code> height and <code>p</code> radius  </p>"},{"location":"Displays/#miscellaneous","title":"Miscellaneous","text":"<p><code>z</code> = clear the display <code>i</code> = (re)init the display (in e-Paper mode with partial update) <code>I</code> = (re)init the display (in e-Paper mode with full update) <code>d</code> = update the display <code>Dp</code> = switch display drawing options:   bit 0: auto updates =&gt; 1 auto draw on each displaytext cmd, 0 display must be updated manually with <code>d</code>   ( only valid for bw oled and epaper displays, color displays draw always immediately)   bit 1: character drawing =&gt; 0 opaque character drawing, 1 transparent character drawing <code>o</code> = switch display off <code>O</code> = switch display on <code>ap</code> =  <code>p</code> (0..3) set rotation angle <code>t</code> = display Tasmota time in HH:MM <code>tS</code> = display Tasmota time in HH:MM:SS <code>T</code> = display Tasmota date in DD.MM.YY <code>pp</code> = pad text with spaces, positive values align left, negative values align right   <code>sp</code> = set text scaling for all fonts (scaling factor 1...N) <code>fp</code> = set font (1=12, 2=24,(opt 3=8)) if font==0 the classic GFX font is used, if font==7 RA8876 internal font is used, if font==4  special 7 segment 24 pixel number font is used, a ram based font is selected if font==5 <code>Cp</code> = set foreground color (0,1) for black or white and RGB decimal code for color (see color codes) <code>Bp</code> = set background color (0,1) for black or white and RGB decimal code for color (see color codes)  <code>Cip</code> = set foreground index color (0..31) for color displays (see index color table below) <code>Bip</code> = set background index color (0..31) for color displays (see index color table below) <code>wp</code> = draws an analog watch with radius p  (#define USE_AWATCH)  <code>Pfilename:</code> = display an rgb 16-bit color (or jpg on ESP32) image when file system is present, Scripteditor contains a converter to convert jpg to special RGB16 pictures See ScriptEditor <code>Pfilename:C:ys:ys</code> displays a centered picture in frame xs, ys. if C &gt; 0 the picture gets a frame in this index color <code>Ffilename:</code> = load RAM font file when file system is present. the font is selected with font Nr. 5, these fonts are special binary versions of GFX fonts of any type. they end with .fnt. an initial collection is found in Folder BinFonts <code>SXfilename:</code> = load display descriptor for multiple display support (X = 1..3) for up to 3 displays. <code>SX:</code> = switch to display number (X = 1..3). <code>dcI:V</code> = define index color entry Index 19-31, V 16 bit color value (index 0-18 is fixed)  </p>"},{"location":"Displays/#touch-buttons-and-sliders","title":"Touch Buttons and Sliders","text":"<p>Requires <code>#define USE_TOUCH_BUTTONS</code></p> <p></p> <p>Draw up to 16 GFX buttons to switch real Tasmota devices such as relays or draw Sliders to dimm e.g. a lamp</p> <ul> <li>Button number + 256 - a virtual touch toggle button is created (MQTT =&gt; TBT)</li> <li>Button number + 512 - a virtual touch push button is created (MQTT =&gt; PBT)</li> </ul> <p><code>b#:xp:yp:xa:ys:oc:fc:tc:ts:text:</code> Parameters are separated by colons. </p> <ul> <li><code>b#</code> where # = define a button number 0-15  </li> <li><code>xp</code> = x position  </li> <li><code>yp</code> = y position  </li> <li><code>xa</code> = x size  </li> <li><code>ys</code> = y size  </li> <li><code>oc</code> = outline index color  </li> <li><code>fc</code> = fill index color  </li> <li><code>tc</code> = text index color  </li> <li><code>ts</code> = text size on buttons  </li> <li><code>text:</code> = button text (must end with a colon :) (max 9 chars)  </li> </ul> <p><code>b0:260:260:100:50:2:11:4:2:Rel 1:</code></p>"},{"location":"Displays/#picture-buttons","title":"Picture Buttons","text":"<p>To create picture touch buttons (jpg on ESP32 only) requires <code>#define JPEG_PICTS</code> and <code>#define USE_UFILESYS</code>. </p> <p>Upload pictures to the file system with a \".jpg\" extension, then give the path to the picture as button text omitting the .jpg extension.</p> <p>Create a picture button with a picture file named <code>wifi.jpg</code></p> <p><code>b0:260:260:100:50:2:11:4:2:/wifi:</code></p> <p>The size of the picture is not scaled and the dimensions of the button must fit the picture size. Clicked buttons will invert the colors of the picture.  </p> <p>You may specify a picture for selected and unselected button state. Picture filename ending with '1' is used for unselected state and ending '2' is for selected state.  </p>"},{"location":"Displays/#sliders","title":"Sliders","text":"<ul> <li><code>bs#</code> where # = is slider number <code>0..15</code> </li> <li><code>xp</code> = x position  </li> <li><code>yp</code> = y position  </li> <li><code>xa</code> = x size  </li> <li><code>ys</code> = y size  </li> <li><code>ne</code> = number of elements  </li> <li><code>bc</code> = background color  </li> <li><code>fc</code> = frame color  </li> <li><code>bc</code> = bar color  </li> </ul> <p>Set the state of a button or slider with:  </p> <ul> <li><code>b#sX</code> where # = is slider or button number <code>0..15</code></li> <li><code>X</code> = <code>0</code> or <code>1</code> for buttons, <code>0..100</code> for sliders</li> </ul> <p>Disbale button or slider with:  </p> <ul> <li><code>bd#</code> disbale where # = is slider or button number <code>0..15</code> </li> <li><code>be#</code> enable  where # = is slider or button number <code>0..15</code> </li> </ul>"},{"location":"Displays/#display-json-variables","title":"Display JSON variables","text":"<p>Requires <code>#define USE_DT_VARS</code></p> <p>Display variables that are exposed in JSON MQTT strings e.g. in TelePeriod messages.  </p> <p>The values are updated every second.</p> <p><code>dv#:xp:yp:gc:fc:fo:ts:tl:dp:ut:JSON:ut:</code> Parameters are separated by colons. </p> <ul> <li><code>dv#</code> where # = defines a variable number 0-7  (may be expanded by #define MAX_DT_VARS N)</li> <li><code>xp</code> = x position  </li> <li><code>yp</code> = y position  </li> <li><code>gc</code> = text background color (index color)  </li> <li><code>fc</code> = text foreground color (index color)  </li> <li><code>fo</code> = text font  </li> <li><code>ts</code> = text size (negative value denotes transparent text)</li> <li><code>tl</code> = text field length (if negative align right)  </li> <li><code>dp</code> = decimal precision (if &lt; 0 denotes a string) </li> <li><code>ut</code> = update time in seconds  (1...N)  </li> <li><code>jt</code> = JSON VARIABLE NAME (uppercase) if you specify a string in brackets here it is treated as displaytext cmd   </li> <li><code>ut</code> = unit string (max 5 chars and must end with a colon :)  </li> </ul> <p>example: <pre><code>;ILI9341 320x240 portrait mode\n[x0y0P/corona.rgb:]\n[dc19:31000]\n[x60y30f2Ci3D2]Tasmota\n; display text cmd displays time with seconds\n[dv0:50:70:19:3:2:1:11:1:1:[tS]::]\n; display text cmd displays analog watch\n[dv1:120:250:19:2:2:1:11:1:5:[w40]::]\n; displays Wifi SSID JSON\n[dv2:10:10:0:3:1:-1:10:-1:1:WIFI#SSID::]\n[x10y150f1s1Ci3Bi19]Counter:\n; displays a sensor JSON variable (here counter1)\n[dv3:80:150:0:7:1:1:11:0:1:COUNTER#C1:cnt:]\n[x10y300f1s1Ci3Bi19]memory free:\n; displays pre memory space JSON (heap)\n[dv4:100:300:0:7:1:1:-7:-1:1:HEAP:kb:]\n</code></pre></p>"},{"location":"Displays/#line-chart","title":"Line chart","text":"<p>(<code>#define USE_GRAPH</code> and <code>#define NUM_GRAPHS 4</code> - maximum of 16)  </p> <p>Up to 4 line charts may be defined.  </p> <p>Ticks may be defined by adding tick numbers to the <code>n</code> parameter.  </p> <p>Example</p> <p><code>n</code> = graph number (0..3) + x ticks (16*number of x ticks) + y ticks (1024*number of y ticks).  </p> <p><code>Gn:xp:yp:xs:ys:t:fmax:fmin</code> defines a line chart:  Parameters are separated by colons.</p> <ul> <li><code>n</code> = number up to 4 charts (0..3) + optional ticks  </li> <li><code>xp</code> = x position  </li> <li><code>yp</code> = y position  </li> <li><code>xs</code> = x size  (if xs&lt;0) graph is not reinitialized on second call (e.g., restart of scripter)  </li> <li><code>ys</code> = y size  </li> <li><code>t</code> = time in minutes for total chart  </li> <li><code>ymin</code> = float chart minimum y  </li> <li><code>ymax</code> = float chart maximum y  </li> <li><code>icol</code> = line color index (only for color graphs)  </li> </ul> <p><code>gn:v</code> adds a value to the chart buffer:</p> <ul> <li><code>n</code> = number up to 4 charts (0..3)  </li> <li><code>v</code> = float value to add  </li> </ul> <p><code>Gdn:m</code> sets graph n draw mode <code>0</code> = off, <code>1</code> = on. When on, redraw graph  </p> <ul> <li><code>Gsn:path:</code> = save graph <code>n</code> to path (if optional file system is present)  </li> <li><code>Grn:path:</code> = restore graph <code>n</code> from path (if optional file system is present)  </li> </ul>"},{"location":"Displays/#batch-files","title":"Batch files","text":"<p>When a file system is present you may define displaytext batch files. If a file named \"display.bat\" is present in the file system this batch file is executed. The file may contain any number of diplaytext cmds, one at a line. You may have comment lines beginning with a <code>;</code></p> <p>Example</p> <p><pre><code>; clr screen\n[z]\n; draw full screen picture\n[x0y0P/corona.rgb:]\n; define index color\n[dc19:31000]\n; draw transparent text with new index color over picture\n[x60y30f2Ci19D2]Tasmota\n</code></pre> A displaytext batch file may be executed from console by displaybatch /file  </p>"},{"location":"Displays/#color-codes","title":"Color Codes","text":"<p>While computers and web design are generally using a 24-bit RGB888 color code built from a byte-triplet such as (255, 136, 56) or #FF8038, small color panels often use a more compact code 16-bit RGB565 color code. This means that the R, G and B coefficient are coded on less number of bits:</p> <ul> <li>Red on 5 bits = <code>0..31</code></li> <li>Green on 6 bits = <code>0..63</code></li> <li>Blue on 5 bits = <code>0..31</code></li> </ul> <p>For <code>Cp</code> and <code>Bp</code>, <code>p</code> is calculated as <code>p = 2048 * Red + 64 * Green + Blue</code></p> <p>Example</p> <p>Red 50% + Green 20% + Blue 100% = 2048 * 16 + 64 * 12 + 31 = 33576 equivalent to web #8033FF</p> <p>Common colors table:</p> Color Code Color Code Color Code Black 0 White 65535 Red 63488 Green 2016 Blue 31 Cyan 2047 Magenta 63519 Yellow 65504 Navy 15 Dark green 992 Dark cyan 1007 Maroon 30720 Purple 30735 Olive 31712 Light grey 50712 Dark grey 31727 Orange 64800 Green yellow 45029 Pink 64536"},{"location":"Displays/#color-indices","title":"Color Indices","text":"<p>Selected with <code>Ci</code> and <code>Bi</code> in the ILI9488, SSD1351, RA8876 and ST7789 color panels  </p> Index Color Index Color Index Color 0 BLACK 1 WHITE 2 RED 3 GREEN 4 BLUE 5 CYAN 6 MAGENTA 7 YELLOW 8 NAVY 9 DARKGREEN 10 DARKCYAN 11 MAROON 12 PURPLE 13 OLIVE 14 LIGHTGREY 15 DARKGREY 16 ORANGE 17 GREENYELLOW 18 PINK <p>You may expand the index color table up from index 19 to 31. the cmd [dcI:V] defines the index color with index I (19-31) to the 16 bit color value V</p>"},{"location":"Displays/#note-on-e-paper-displays","title":"Note on e-Paper Displays","text":"<p>E-Paper displays have 2 operating modes: full update and partial update. While full update delivers a clean and sharp picture, it has the disadvantage of taking several seconds for the screen update and shows severe flickering during update. Partial update is quite fast (300 ms) with no flickering but there is the possibility that erased content is still slightly visible. It is therefore useful to perform a full update in regular intervals (e.g., each hour) to fully refresh the display.</p> <p>Compilation directives: <code>#define USE_SPI</code>, <code>#define USE_DISPLAY</code>, <code>#define USE_DISPLAY_EPAPER29</code>, or <code>#define USE_DISPLAY_EPAPER42</code></p> <p>Remark: the 4.2 e-Paper display requires about 15k of RAM. Therefore it only works with Core 2.42 and above.</p>"},{"location":"Displays/#oled-lifetime","title":"OLED Lifetime","text":"<p>The typical specifications for the lifetime of an OLED when permanently on is about 10000 hours (416 days). Dimming to 50% expands the lifetime to about 25000 hours.  </p>"},{"location":"Displays/#burn-in","title":"Burn-in","text":"<p>The data sheets of the TFT and OLED displays mention burn-in effects when a static display is shown for extended periods of time. You may want to consider turning on the display on demand only.</p>"},{"location":"Displays/#fonts","title":"Fonts","text":"<p>The EPD font contains 95 characters starting from code 32, while the classic GFX font contains 256 characters ranging from 0 to 255. Custom characters above 127 can be displayed. To display these characters, you must specify an escape sequence (standard octal escapes do not work). The <code>~</code>character followed by a hex byte can define any character code.  </p> <p>GFXFont: </p> <p>EPDFont: </p>"},{"location":"Displays/#hardware-connections","title":"Hardware Connections","text":"<p>I<sup>2</sup>C displays are connected in the usual manner and defined via the GPIO component selection.  </p> <p>The I<sup>2</sup>C address must be specified using <code>DisplayAddress XX</code>, e.g., <code>60</code>. The model must be specified with <code>DisplayModel</code>, e.g., <code>2</code> for SSD1306. In versions with Universal Display Driver the DisplayModel is always <code>17</code>. To permanently turn the display on set <code>DisplayDimmer 100</code>. Display rotation can be permanently set using <code>DisplayRotate X</code> (x = <code>0..3</code>).  On SPI the CS and DC pins when needed must use the pin definition with Display_ID + CS e.g. ST7789_CS</p> <p>E-Paper displays are connected via software 3-wire SPI <code>(CS, SCLK, MOSI)</code>. DC should be connected to GND , Reset to 3.3 V  and busy may be left unconnected. The jumper on the circuit board of the display must be set to 3-wire SPI.  </p> <p>The ILI9488 is connected via hardware 3-wire SPI <code>(SPI_MOSI=GPIO13, SPI_SCLK=GPIO14, CS=GPIO15)</code> and must also be connected to the backlight pin  The SSD1351 may be connected via hardware 3-wire SPI or 4-wire SPI with support for dimmer. The ILI9341 is connected via hardware 4-wire SPI, Backlight and OLEDRESET (dimmer supported on ESP32)  Wiring</p> <p>The RA8876 is connected via standard hardware 4-wire SPI <code>(SPI_MOSI=GPIO13, SPI_SCLK=GPIO14, RA_8876_CS=GPIO15, SSPI_MISO=GPIO12)</code>. No backlight pin is needed, dimmer supported, on ESP32 gpio pins may be freeley defined (below gpio 33).  </p> <p>The ST7789 is connected via 4 Wire software SPI ((ST7789_CS), SSPI_SCLK, SSPI_MOSI, ST7789_DC, OLEDRESET, Backlight )  </p>"},{"location":"Displays/#rule-examples","title":"Rule Examples","text":"<p>For scripting examples see Scripting Cookbook</p> <p>Print Text at size 1 on line 1, column 1: <code>DisplayText [s1l1c1]Hello how are you?</code></p> <p>Draw a rectangle and draw text inside with size 2 and 7 chars padded with spaces: <code>DisplayText [x85y95h130v30h-130v-30s2p7x90y100]37.25 C</code></p> <p>Refresh screen: <code>DisplayText [z]</code></p> <p>Draw rectangle from x,y with width and height: <code>DisplayText [x50y50r200:100]</code></p>"},{"location":"Displays/#display-local-sensors","title":"Display Local Sensors","text":"<p>(line breaks and indentation added to the rules for readability)</p> <p>Use Tasmota rules to display sensor values, time, and a separation line. Refresh the display every 60 minutes: <pre><code>rule1 on tele-SHT3X-0x44#Temperature do DisplayText [f1p7x0y5]%value% C endon\n      on tele-SHT3X-0x44#Humidity do DisplayText [f1p10x70y5]%value% %[x0y20h296x250y5t] endon\n      on tele-BMP280#Pressure do DisplayText [f1p10x140y5]%value% hPa endon\n      on Time#Minute|60 do DisplayText [Tt] endon\n</code></pre></p> <p>Show 4 analog channels: <pre><code>rule1 on tele-ADS1115#A0 do DisplayText [s1p21c1l01]Analog1: %value% adc endon\n      on tele-ADS1115#A1 do DisplayText [s1p21c1l3]Analog2: %value% adc endon\n      on tele-ADS1115#A2 do DisplayText [s1p21c1l5]Analog3: %value% adc endon\n      on tele-ADS1115#A3 do DisplayText [s1p21c1l7]Analog4: %value% adc endon\n</code></pre></p> <p>Show BME280 + SGP30: <pre><code>rule1 on tele-BME280#Temperature do DisplayText [s1p21x0y0]Temp: %value% C endon\n      on tele-BME280#Humidity do DisplayText [s1p21x0y10]Hum : %value% %% endon\n      on tele-BME280#Pressure do DisplayText [s1p21x0y20]Prss: %value% hPa endon\n      on tele-SGP30#TVOC do DisplayText [s1p21x0y30]TVOC: %value% ppb endon\n      on tele-SGP30#eCO2 do DisplayText [s1p21x0y40]eCO2: %value% ppm [s1p0x0y50]Time: [x35y50t] endon\n</code></pre></p>"},{"location":"Displays/#waveshare-display-drivers","title":"WaveShare Display Drivers","text":"<p>Waveshare has two kinds of display controllers: with partial update and without partial update. The 2.9 inch driver is for partial update and should also support other Waveshare partial update models with modified WIDTH and HEIGHT parameters. The 4.2 inch driver is a full update display.</p> <p>epaper displays should be connected via software SPI. most of them require a reset and a busy line. connect the busy line to SSPI_MISO.</p> <p>The drivers are subclasses of the Adafruit GFX library. The class hierarchy is <code>LOWLEVEL :: Paint :: Renderer :: GFX</code>, where:  </p> <ul> <li><code>GFX</code>: unmodified Adafruit library  </li> <li><code>Renderer</code>: the interface for Tasmota  </li> <li><code>Paint</code>: the modified pixel driver for e-paper  </li> <li>there are several virtual functions that can be subclassed down to <code>LOWLEVEL</code></li> </ul> <p>The display dispatcher only does the class initialization call. All other calls go to the <code>Renderer</code> class.</p> <p>In black and white displays, a local RAM buffer must be allocated before calling the driver. This must be set to zero on character or TFT color displays.</p> <p>The EPD fonts use about 9k space, which can be selected at compile time using #ifdef directives.</p> <ul> <li>SSD1306 - 1.15k</li> <li>EPD42   - 2.57k</li> <li>EPD29   - 2.1k</li> <li>Display and Render class - ~12k</li> </ul>"},{"location":"Displays/#universal-display-driver","title":"Universal Display Driver","text":"<p>Documentation for Universal Display Driver was moved to a specific page</p>"},{"location":"Displays/#universal-touch-driver","title":"Universal Touch Driver","text":"<p>Documentation for Universal Touch Driver was moved to a specific page</p>"},{"location":"Displays/#compiling","title":"Compiling","text":"<p>There are also many variants of each display available and not all variants may be supported.  </p> #define directive Description USE_DISPLAY Enable display support. Also requires at least one of the following compilation directives USE_DISPLAY_LCD Enable LCD display. Also requires <code>USE_I2C</code> USE_DISPLAY_SSD1306 Enable OLED SSD1306 display. Also requires <code>USE_I2C</code> / Now with Universal Display Driver USE_DISPLAY_MATRIX Enable MATRIX display USE_DISPLAY_ILI9341 Enable TFT ILI9341 display. Also requires <code>USE_SPI</code>if seconds SPI bus on ESP32 shall be used SSPI must be defined instead of SPIILI9342 also supported, select with cmd displayilimode 3, default is: displayilimode 1 (ILI9341) USE_DISPLAY_EPAPER_29 Enable Waveshare EPAPER_29 display.(black/white, partial update)Also requires <code>USE_SPI</code> USE_DISPLAY_EPAPER_42 Enable Waveshare EPAPER_42 display.(black/white, full update)Also requires <code>USE_SPI</code> USE_DISPLAY_SH1106 Enable OLED SH1106 display. Also requires <code>USE_I2C</code> USE_DISPLAY_ILI9488 Enable TFT ILI9488 display. Also requires <code>USE_SPI</code> USE_DISPLAY_SSD1351 Enable color OLED SSD1351 display. Also requires <code>USE_SPI</code> USE_DISPLAY_RA8876 Enable TFT RA8876 display. Also requires <code>USE_SPI</code> USE_DISPLAY_SEVENSEG Enable 7 segment display. Also requires <code>USE_I2C</code> USE_DISPLAY_ST7789 Enable TFT ST7789 display. Also requires <code>USE_SPI</code> USE_DISPLAY_ILI9342 Enable TFT ILI9342 display. Also requires <code>USE_SPI</code> USE_DISPLAY_SD1331 Enable TFT SD1331 display. Also requires <code>USE_SPI</code> USE_DISPLAY_TM1637 Enable 7-segment TM1637, TM1638 and MAX7219 display. USE_DISPLAY_TM1650 Enable 7-segment TM1650 display. Also requires <code>USE_I2C</code> USE_DISPLAY_SEVENSEG_COMMON_ANODE Common anode 7 segment displays. Also requires <code>USE_I2C</code> USE_LILYGO47 Enable LILGO 4.7 Epaper display ESP32 combo USE_UNIVERSAL_DISPLAY Enable universal display driver USE_LVGL Enable LVGL, currently only supported by berry scripting USE_TOUCH_BUTTONS Enable virtual touch button support with touch displays SHOW_SPLASH Enable initialization splash message on the display USE_RAMFONT Enable loadable Fonts USE_MULTI_DISPLAY Enable multiple display support (up to 3) USE_AWATCH Enables analog watch support USE_GRAPH Enable line charts. Also requires <code>NUM_GRAPHS</code>"},{"location":"Domoticz/","title":"Domoticz","text":"<p>  Tasmota supports Domoticz MQTT 'out of the box' for both relays and sensors.</p> <p>Find below the procedure to configure Domoticz and Tasmota.</p>"},{"location":"Domoticz/#prerequisites","title":"Prerequisites","text":"<p>The following servers should be made available:</p> <ul> <li>You have installed/access to a MQTT broker server and made contact with your Tasmota device</li> <li>You have installed Domoticz</li> </ul>"},{"location":"Domoticz/#mqtt-and-virtual-sensor","title":"MQTT and Virtual Sensor","text":"<p>If not already done configure Domoticz MQTT and Virtual Sensor hardware.</p> <ul> <li>On the hardware page add Type <code>MQTT Client Gateway with LAN interface</code><ol> <li>Give it a name</li> <li>Configure the interface with access to your MQTT server (<code>Remote Address</code>, <code>Port</code>, <code>Username</code> and <code>Password</code>)</li> <li>Set the <code>Publish Topic</code> preferably to <code>Index</code> although other options are also supported</li> <li>Set <code>Topic In Prefix</code> to <code>domoticz/in</code> and <code>Topic Out Prefix</code> to <code>domoticz/out</code> as default defined by Tasmota DOMOTICZ_IN_TOPIC and DOMOTICZ_OUT_TOPIC</li> </ol> </li> <li>On the hardware page add Type <code>Dummy (used for virtual switches)</code><ol> <li>Give it a name</li> </ol> </li> </ul>"},{"location":"Domoticz/#virtual-switch","title":"Virtual Switch","text":"<p>Make a new virtual switch and remember its Idx number.</p> <ol> <li>Make a new virtual switch to be used with Sonoff by clicking <code>Create Virtual Sensors</code><ol> <li>Give it a name</li> <li>Select <code>Sensor Type Switch</code></li> </ol> </li> <li>On the Devices page find the new switch by its name<ol> <li>Remember its Idx number</li> </ol> </li> </ol>"},{"location":"Domoticz/#tasmota-configuration","title":"Tasmota Configuration","text":"<p>  Tasmota provides different ways to configure Domoticz parameters. Choose the method you prefer:</p> <ul> <li>Use the webinterface and select Configuration - Configure Domoticz:<ol> <li>Configure <code>Idx 1</code> to the value read in step 2.i</li> </ol> </li> <li>Use MQTT and execute commands (if necessary, replace <code>tasmota</code> with unique topic you configured in Initital Configuration, see point 5 there):<ol> <li><code>cmnd/tasmota/DzIdx1</code> with payload value read in step 2.i</li> </ol> </li> <li>Use the serial interface and execute commands:<ol> <li><code>DzIdx1</code> with the value read in step 2.i</li> </ol> </li> </ul>"},{"location":"Domoticz/#usage","title":"Usage","text":"<p>That's it! You can now control your device from the Domoticz user interface.</p> <ul> <li>On the Switches page scroll down and find your Switch as configured in step 1<ul> <li>Toggle the light bulb; Tasmota should respond</li> </ul> </li> </ul>"},{"location":"Domoticz/#automatic-discovery","title":"Automatic Discovery","text":"<p>Tasmota supports automatic discovery by Domoticz through the Domoticz MQTT Discovery plugin.</p>"},{"location":"Domoticz/#prerequisites_1","title":"Prerequisites","text":"<p>The following services should be made available:</p> <ul> <li>You have installed/access to a MQTT broker server and made contact with your sonoff</li> <li>You have installed Domoticz</li> <li>You have installed the Domoticz MQTT Discovery plugin</li> </ul>"},{"location":"Domoticz/#mqtt-discovery-plugin","title":"MQTT Discovery Plugin","text":"<p>Configure Domoticz MQTT Discovery plugin.</p> <ul> <li>On the hardware page add Type <code>MQTT Discovery</code><ol> <li>Give it a name, e.g. <code>Tasmota</code></li> <li>Configure the interface with access to your MQTT server (<code>MQTT Server Address</code>, <code>Port</code>, <code>Username</code> and <code>Password</code>)</li> <li>Set the <code>Discovery topic</code> to <code>homeassistant</code> unless it has been changed in a custom Tasmota build</li> <li>Set the <code>Ignored device topic</code> to <code>/tasmota/</code> to avoid unconfigured Tasmota devices from being discovered</li> </ol> </li> </ul>"},{"location":"Domoticz/#tasmota-configuration_1","title":"Tasmota Configuration","text":""},{"location":"Domoticz/#precompiled-binary","title":"Precompiled Binary","text":"<ul> <li>Each Tasmota device must have its own topic, the easiest way is to set topic to <code>tasmota_%06X</code> (%06X will be replaced by MAC address). See here for how to set the topic.</li> <li>Use MQTT or Serial or Web console and execute commands (replace <code>%topic%</code> with the device's unique topic)<ol> <li><code>cmnd/%topic%/SetOption19</code> with payload <code>1</code> to enable MQTT discovery</li> </ol> </li> </ul>"},{"location":"Domoticz/#custom-binary","title":"Custom Binary","text":"<ul> <li>The above settings can be defined in user_config_override.h (TBD)</li> </ul>"},{"location":"Domoticz/#usage_1","title":"Usage","text":"<p>That's it! You will now find your Sonoff in the Domoticz user interface.</p> <ul> <li>On the Switches page scroll down and find your Switch as configured in step 1<ul> <li>Toggle the light bulb; Sonoff should respond</li> </ul> </li> </ul>"},{"location":"Domoticz/#including-sensors","title":"...including sensors","text":""},{"location":"Download/","title":"Download","text":"<p>Download binaries from:</p>"},{"location":"Download/#official-ota-server","title":"Official OTA Server:","text":"<ul> <li>Current release</li> <li>Development branch</li> <li>ESP32 Current release</li> <li>ESP32 Development branch</li> <li>Older release binaries: <ul> <li>v9.3.1</li> <li>v9.1.0</li> <li>v8.5.1</li> <li>v7.2.0</li> <li>v6.7.1</li> </ul> </li> </ul>"},{"location":"Dynamic-Sleep/","title":"Dynamic Sleep","text":""},{"location":"Dynamic-Sleep/#dynamic-sleep-cpu-main-loop-target-cpu-power-management","title":"Dynamic Sleep (CPU Main loop target / CPU Power Management)","text":"<p>SetOption60 may be used to configure your device to use Normal Sleep or Dynamic Sleep.</p> <p>Dynamic Sleep is enabled by default from Tasmota version 6.3.0.15 but may be reconfigured by setting the value of SetOption60 accordingly.</p> Command Description SetOption60 0 Dynamic Sleep is ENABLED (Default since 6.3.0.15) SetOption60 1 Normal Sleep is ENABLED <p>The term CPU is used loosely here for the sake of making it easier to understand - When the term CPU is used it is actually referring to the ESP8266 SoC Micro Controller.</p> <p>With the introduction of many new drivers, sensors and other functions as part of the Tasmota firmware, it has become more important to pay specific attention to the amount of microcontroller clock cycles shared with the underlying SDK/Arduino ESP8266 Core.</p> <p>The main application loop of the Tasmota firmware needs to visit each of the driver callbacks within the main loop to make sure all the required drivers and sensors receive the necessary processing time whilst ensuring that the main loop does not overwhelm the need for processing time by the SDK / Arduino ESP8266 core.</p> <p>The highest priority drivers/sensors need to be called once per 50ms to operate as designed but most of the normal run of the mill drivers and sensors do not necessarily require this amount of intense polling. The 50-millisecond mark would normally be considered to be an absolute minimum duty cycle for the main processing loop on ESP8266 boards whilst most Sonoff device derivatives will function perfectly well way above this default setting.</p> <p>To make this manageable from device to device a new setting has been introduced enabling the setting of the main loop target to a specific value in milliseconds.</p> <p>For default operation, this will be set to 50 milliseconds as there are generally no drivers or sensors that need to be polled at a rate higher than this.</p> <p>To allow for power usage flexibility this value may also be increased to a value of up to 250 milliseconds which is very useful to reduce power and processing demand on non-time critical devices such as switches (which is what most of Tasmota is used for.)</p> <p>The purpose of this setting is to allow you as a user to set the speed at which driver and sensors will be serviced and as a result also the amount of time given to the SDK / Arduino ESP8266 core to handle its background tasks (which are not under direct control of the Tasmota firmware.)</p>"},{"location":"Dynamic-Sleep/#example-use-case","title":"Example Use Case","text":"<p>Let's assume the default value of 50 for sleep and that a simple device such as a Sonoff Basic R1 or R2 is being used.</p> <p>In this case, the main firmware loop will iterate through all the drivers and sensors once per 50 milliseconds.</p> <p>Current tests suggest that a simple device such as a Sonoff Basic requires only about 9.5 milliseconds to complete one iteration of servicing all the drivers and sensors enabled in the standard tasmota.bin firmware.</p> <p>The time management functionality offered by dynamic sleep will compute this time requirement automatically and allow the SDK / Arduino ESP8266 Core to service background tasks such as maintaining WiFi connectivity for the remainder of the time not spent in the main firmware loop - i.e. in the case of sleep 50 this would mean 50 milliseconds - ~9.5 milliseconds = ~40.5 milliseconds spent outside of the main firmware loop servicing SDK / ESP8266 Core functions which automatically consume fewer clock cycles when there is nothing intense for the SDK / ESP8266 Core to maintain or perform.</p> <p>Normal Sleep was previously the only option for Tasmota powered devices wishing to take advantage of power saving but it does have the disadvantage that the sleep would be a constant setting insofar that the entire firmware codebase would run at a pre-determined speed causing some drivers to run slower than expected and decreasing the speed at which services such as the WebUI is rendered (This varies between the various underlying cores depending on which version is used.)</p> <p>Using Dynamic Sleep (SetOption60 = 0) instead of Normal Sleep (SetOption60 = 1) has the advantage that CPU time will be given to any particular driver or process (let's say the WebUI) on demand as and when needed whilst spending most of its time waiting for the next main loop iteration to occur.</p> <p>During this time of waiting the ESP8266's power demand can go from 80mA all the way down to 20mA which yields great benefits for power saving vs. firmware responsiveness compared to the traditional sleep setting.</p> <p>Normally the target main loop setting would be 50 milliseconds. The firmware will service all the driver and sensor callbacks up to a maximum of 20 times per second. In most cases, this is unnecessary as most normal sensors like temperature sensors only need polling once per second. So, whether you poll the temperature sensor 20 times per second (sleep 50) or 5 times per second (sleep 200) it has no impact on the functionality.</p> <p>Allowing the main loop to iterate 20 times per second vs. 5 times per second is obviously more time consuming and processor consuming leaving less time to idle (i.e., save power).</p> <p>For example, if you were using an MCP230xx with interrupts, and you need a high interrupt response then sleep 50 or lower would make sense since that specific driver can poll once per 50 milliseconds to check for interrupts. Most other sensor polling can be done in intervals longer than 50 milliseconds so you achieve more idle time, and therefore also more sleep time so it saves power.</p>"},{"location":"Dynamic-Sleep/#monitoring-performance","title":"Monitoring Performance","text":"<p>Given all the above it is an obvious conclusion that in order to manage something you would need to be able to measure it. For this reason two new variables have been added to the telemetry data namely LoopSet and LoadAvg and are represented in the telemetry JSON as follows: <pre><code>MQT: tele/sound1/STATE = {\"Time\":\"2018-11-26T17:41:27\",\"Uptime\":\"0T05:05:17\",\"Vcc\":3.504,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"POWER\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"Wireless\",\"BSSId\":\"DE:AD:00:00:BE:EF\",\"Channel\":3,\"RSSI\":100}}\n</code></pre></p> <p>The two values indicated for LoopSet and LoadAvg have the following relation:</p> Variable Value Description SleepMode Normal Normal Sleep mode is enabled (SetOption60 = 1) SleepMode Dynamic Dynamic Sleep mode is enabled (SetOption60 = 0) Sleep 50 Current setting for sleep LoadAvg 19 Reported % time of Sleep spent doing Tasmota main loop processing <p>In this example, 19% of 50 milliseconds would be 9.5 milliseconds (19/100*50), so we can see that there is sufficient headroom for the SDK / ESP8266 Arduino Core to do its background work.</p> <p>On some devices which have many sensors connected you may observe the LoadAvg value exceeding 100 - This means that you have not set the value of sleep high enough to accommodate all the sensors and drivers which need to be serviced.</p> <p>In the latter case, you have two options - either increase the value of sleep to a higher one to maintain a load average well below 100 or use multiple devices to spread the load across separate Tasmota powered devices/boards.</p> <p>For the most part, all Sonoff based products should perform well balanced with the default setting of 50 for sleep.</p>"},{"location":"Dynamic-Sleep/#how-to-use-dynamic-sleep","title":"How to use Dynamic Sleep","text":"<p>From serial console, or webui console enter command</p> <p><code>SetOption60 0</code> and <code>Sleep xx</code></p> <p>Where xx is the number of milliseconds you wish to target your main processing loop at ranging from 0 through to 250.</p> <p>Should you set a sleep value that is too low you will observe output on telemetry for the value of LoadAvg to be in excess of 100 - This is not ideal and should be avoided as it starves the Arduino Core / SDK of the needed processing time to take care of background tasks such as WiFi management.</p> <p>For optimal operation of the Tasmota firmware, it is recommended to keep your device running at a LoadAvg value of 75 or lower. If your device does not have any time critical drivers/sensors connected you are encouraged to increase the sleep value to a higher value to gain from the power saving benefits thereof.</p>"},{"location":"ENS161/","title":"ENS161 indoor air quality sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_ENS16x\n#define USE_ENS16x         \n#endif\n</code></pre></p> <p>The ENS161 indoor air quality sensor is a low-cost solution for detecting air quality. This module uses MEMS hotplate coated with metal oxide semiconductor (MOx) technology to detect a broad range of VOCs (volotile organic compounds). In addition an CO<sub>2</sub> equivalent value as well as a relative air quality index is reported.  Two versions are available ENS160 and ENS161. ENS161 is the latest release offering in addition a low power option and AQIS output. THe driver is able to work with both options.  </p>"},{"location":"ENS161/#configuration","title":"Configuration","text":""},{"location":"ENS161/#wiring","title":"Wiring","text":"<p>Follow datasheet for required pull-ups when connecting the bare sensor module directly to ESP8266. Wemos and NodeMCU board include the required pull-up. The component is operated with 3.3V and 1.8V.  The sensor component can be operated with two differnet I2C addresses. So in principle the use of two components on the same I2C interface is possible. </p>"},{"location":"ENS161/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After configuring the GPIO's the driver will check both possible I2C addresses and detect connected ENS161 sensors automatically.</p>"},{"location":"ENS161/#usage","title":"Usage","text":"<p>Typical sensor reading should be around 450 ppm eCO<sub>2</sub> and 125 ppb TVOC. The AQIS value is in the range of 0 to 500.  </p>"},{"location":"ENS161/#where-to-get-eg","title":"Where to get (e.g.)","text":"<ul> <li>Adafruit</li> <li>Sparkfun</li> <li>DFRobot</li> <li>DigiKey</li> </ul> <p>ENS161 Datasheet</p>"},{"location":"EQ3-TRV/","title":"EQ3 TRV","text":"<p>This driver allows the control of Eqiva TRV's (i.e. Thermostat Radiator Valve). Compatible models are:</p> <ul> <li>Eqiva eQ-3 Bluetooth Smart (141771E0/141771E0A)</li> <li>Eqiva eQ-3 Bluetooth Smart(UK Version) (142461D0)</li> </ul> <p>Other Eqiva EQ3 models should work as well, but make sure you select a Bluetooth model as there are also non-Bluetooth models.</p>"},{"location":"EQ3-TRV/#compiling-from-source","title":"Compiling from source","text":"<p>In order to have EQ3 valves working when compiling from source you need to add these define in <code>user_config_override.h</code>: <pre><code>#ifdef USE_EQ3_ESP32\n   #undef USE_EQ3_ESP32\n#endif\n#define USE_EQ3_ESP32\n</code></pre></p>"},{"location":"EQ3-TRV/#setup","title":"Setup","text":"<p>Before you can use the TRV you will need to enable Bluetooth on the TRV:</p> <ol> <li>Press the Mode/Menu button for at least 3 seconds.</li> <li>Select the menu item <code>bLE</code> with the control wheel and confirm by pressing the control wheel shortly.</li> <li>The display will show <code>OFF</code> to deactivate the function or <code>On</code> to activate the function.</li> <li>Confirm by pressing the control wheel shortly.</li> </ol> <p>Note: No need to pair the TRV</p> <p>Next you will need to make sure that BLE is enabled in Tasmota:</p> <ol> <li>Configuration</li> <li>Configure BLE</li> <li>Enable Bluetooth</li> </ol> <p>To determine the mac addresses of a TRV:</p> <ol> <li>Go to the BLE menu in Tasmota</li> <li>Enable active scan</li> <li>In to the tasmota console: TRV devlist</li> </ol> <p>This will give you the mac address of each valve.</p> <p>Note</p> <ul> <li>Enable 1 valve at a time as this makes it easier to identify</li> <li>You might need to wait a minute or so or repeat the \"TRV devlist\" command a few times before the devices have been properly identified</li> <li>Keep in mind that the TRV does NOT report the current temperature, only the requested, target, temperature. The Xiaomi Thermometer LYWSD03MMC makes a perfect combo for measuring the room temperature (~USD 4)</li> </ul> <p>After configuring, tasmota will poll the discovered valves and publish their state under <code>stat/EQ3/&lt;MAC Adress&gt;</code> (or <code>stat/EQ3/&lt;BLEAlias&gt;</code> if you have configured an alias for the MAC address of the valve using <code>BLEAlias</code>).</p> <p>The interval between polls can be configured using <code>TRVPeriod</code>. Tasmots needs to have an NTP or RTC time configured for this to work.</p>"},{"location":"EQ3-TRV/#operating-your-trv","title":"Operating your TRV","text":"<p>There are 2 ways to control your TRV:</p> <ul> <li>The Tasmota Console (convenient for setup)     syntax: <code>TRV &lt;MAC Address&gt; &lt;command&gt; [options]</code>     example: <code>TRV 001A2216A458 settemp 21.5</code></li> <li>MQTT:     syntax: <code>cmnd/&lt;tasmota_topic&gt;/EQ3/&lt;MAC Address&gt;/command [options]</code>     example: <code>cmnd/ble_esp32/EQ3/001A2216A458/settemp 22.5</code></li> </ul> <p>As you can see from the example the MQTT topic is made of:</p> <ul> <li>Standard Tasmota <code>%prefix%</code> : <code>cmnd</code>, <code>stat</code></li> <li><code>%topic%</code> of the BLE_ESP32 gateway device, here <code>ble_esp32</code></li> <li>An <code>EQ3</code> element to specify this command is specific to the EQ3 driver</li> <li>The MAC address or alias of the EQ3</li> <li>The command to the EQ3 or result from the EQ3</li> </ul> <p>The EQ3 TRV has 3 modes of operation:</p> Mode Description auto follows the week program. A temperature different from the week program can be set any time, but at the next programmed timeslot the TRV will switch back to the given temperature manual keeps the current requested temperature holiday keeps the temperature requested for the period of holiday and then switches back to the mode that was active before: auto or manual <p>These 3 modes can be set and configured using different commands described below. After submitting a command you will see one or more of the possible results.</p> Status Description queued Command has been accepted by the BLE driver DONENOTIFIED Command has been successfully processed by the TRV and the results are send in a json format ignoredbusy Currently we can only accept a single command in the queue, during the processing of a TRV command subsequent commands will be rejected. Please resubmit. FAILCONNECT After 3 automatic retries we were not able to contact the TRV and we give up. Please resubmit <p>Under normal circumstance you will get a JSON formatted response from the valve:</p> <pre><code>{\n  \"cmd\": \"settemp\",\n  \"result\": \"ok\",\n  \"MAC\": \"001A2216A458\",\n  \"tas\": \"ble-esp32-0936\",\n  \"RSSI\": -79,\n  \"stattime\": 1642328707,\n  \"temp\": 21.0,\n  \"posn\": 95,\n  \"mode\": \"auto\",\n  \"hassmode\": \"auto\",\n  \"boost\": \"inactive\",\n  \"dst\": \"set\",\n  \"window\": \"closed\",\n  \"state\": \"unlocked\",\n  \"battery\": \"GOOD\",\n  \"holidayend\": \"00-00-00 00:00\",\n  \"windowtemp\": 12.0,\n  \"windowdur\": 15,\n  \"day\": 21.0,\n  \"night\": 17.0,\n  \"offset\": 0.0\n}\n</code></pre> <p>If the mode is holiday, \"holidayend\" will show when the holiday period and mode is about to end:</p> <pre><code>{\n  \"mode\": \"holiday\",\n  \"holidayend\": \"22-01-19 17:00\"\n}\n</code></pre> <p>In the response for the command setprofile, \"profiledayset\" will be added:</p> <pre><code>{\n  \"cmd\": \"setprofile\",\n  \"profiledayset\": 4\n}\n</code></pre> <p>In the response for the command reqprofile, \"profiledayn\" (n=0\u20266) will be added:</p> <pre><code>{\n  \"cmd\": \"reqprofile\",\n  \"profileday4\": \"17.0-07:00,23.0-10:00,17.0-17:00,21.0-23:00,17.0-24:00\"\n}\n</code></pre> Field Description cmd recent command the response is given for MAC mac address. It is always the mac address even if an alias was used in the command. tas hostname of your tasmota RSSI BLE signal strength stattime seconds since Unix Epoch (January 1st, 1970) temp target temperature posn valve position (0=closed / 100=fully opened) mode manual / auto / holiday hassmode mode for Home Assistant usage: auto (=mode auto) / off (valve is set to frost protection = off) / heat (valve is open) / idle (valve is closed) boost boost mode (valve opened 80 % for 5 minutes): active / inactive dst daylight savings time: set / unset window status of the window open functionality (activated when the temperature suddenly drops): open / closed state child lock enabled (disables the buttons on the TRV): locked / unlocked battery battery status of the TRV: GOOD / LOW holidayend end of holiday mode windowtemp window open temperature windowdur window open duration day comfort temperature night reduction temperature offset offset temperature profiledayset day the profile was set for: (0 \u2026 9). Only included for command setprofile profiledayn profile for the day it just has been requested for. (n=0\u20266). Only included for command reqprofile"},{"location":"EQ3-TRV/#available-commands","title":"Available commands","text":""},{"location":"EQ3-TRV/#base-commands","title":"Base commands","text":"Command Description and parameters trvperiod Display/Set the EQ3 poll interval in seconds. In this interval to every TRV matching the following criteria a poll (=state) command will be sent automatically. trvonlyaliased Display/Set the EQ3 OnlyAliased parameterset to 1 for any aliased BLE devicesset to 2 for only aliases starting with <code>EQ3</code> trvMatchPrefix Display/Set the EQ3 MatchPrefix parameterset to 1 to not require active scan to identify EQ3 - identify from MAC (default)Set to 0 to disable this matching"},{"location":"EQ3-TRV/#trv-subcommands","title":"TRV subcommands","text":"Subcommand Description and parameters devlist Display all TRV's which have been found in BLE scan mode.No parameters. scan Alias of devlist.No parameters. state Current valve state without changing anything. (except the time on the valve)No parameters.Note: If your ESP32 tasmota is not synchronized with a valid date and time, this command will set the wrong time and date to the TRV. See settime. settemp Set the desired target temperature.temperature. valve Control the valve state.off\u00a0Enable frost protectionon\u00a0Open the valve completelyNote: If the current mode is auto or holiday: at the next programmed timeslot the valve will switch back to the given temperature. To set the valve permanently please use direct commands on or off. on Set mode to manual and enable frost protection.Note:Temperature will be reported as 30.0 C. off Set mode to manual and open the valve completely (saves potentially battery in summer while the central heating is not working).Note:Temperature will be reported as 4.5 C. mode Define the current operating mode.auto\u00a0same as auto, see belowmanual\u00a0same as manual, see below.on\u00a0same as on, see above.off\u00a0same as off, see above.heat\u00a0same as on, see above.cool\u00a0same as off, see above.Note: The 3rd mode holiday can only be set with the setholiday command auto Define auto as the current operating mode. Run the week program as stored in the TRV. Note: When setting a temperature, switch to day or night temperature: at the next programmed timeslot the TRV will switch back to the given temperature. manual Define manual as the current operating mode. Disable the week program and keep the temperature as selected with settemp / day / night day Set to comfort temperature night Set to reduction temperature setdaynight Change the comfort and reduction temperature.daytemp nighttemp. boost Activate boost mode (valve 80% open for 5 minutes).Note: boost mode will stop automatically after 5 minutes. unboost Deactivate boost mode lock Disable TRV buttons unlock Enable TRV buttons settime Synchronize current tasmota time to the TRV:No parameters.Send an alternate time to the TRV:yyMMddhhmmss(byte by byte conversion from decimal to hexadecimal).Note: If your ESP32 tasmota is not synchronized with a valid date and time, this command (with no parameters) will set the wrong time and date to the TRV. setprofile Set the temperature schedule for the given day. (0=Saturday, 1=Sunday, \u2026 6=Friday)Up to seven pairs of temperature-timeslot (e.g. 20.5-07:30) can be given.day temperature-timeslot, temperature-timeslotIt is also possible to set a couple of days with one command: use 7=weekend, 8=workday, 9=everyday for this purpose.Note: The last timeslot shall always be -24:00, otherwise a default temperature is used for this timeslot. reqprofile Read the temperature schedule for the given day. **(0=Saturday, 1=Sunday, \u2026 6=Friday)day** setholiday Define holiday as the current operating mode.end-date,end-time temperature.holiday mode will automatically terminate and resume the former mode and temperature when the end date and time are reached.Note: During this period it makes no sense to apply any commands for setting different temperatures. For manually ending holiday mode call auto or manual. Only then other commands will be accepted again. setwindowtempdur set window open temperature and duration in minutes.temperature minutes. offset set offset temperaturetemperature"},{"location":"EQ3-TRV/#examples","title":"Examples","text":"<p>Request the current status without changing anything: <pre><code>cmnd/tasmota/EQ3/001A2216A458/state\n</code></pre></p> <p>set a target temperature (21.5 C) <pre><code>cmnd/tasmota/EQ3/001A2216A458/settemp 21.5\n</code></pre></p> <p>Select TRV mode auto: run the week program as stored in the TRV <pre><code>cmnd/tasmota/EQ3/001A2216A458/auto\n</code></pre></p> <p>Select TRV mode manual: disable the week program and keep the temperature as selected (settemp/day/night) <pre><code>cmnd/tasmota/EQ3/001A2216A458/manual\n</code></pre></p> <p>Select TRV mode holiday: suspend the week program or manually applied temperature until 2022 - Jan - 19 - 17:00 and set the temperature to 18.5 C <pre><code>cmnd/tasmota/EQ3/001A2216A458/setholiday 22-01-19,17:00 18.5\n</code></pre></p> <p>Select TRV temperature day: Switch to comfort temperature <pre><code>cmnd/tasmota/EQ3/001A2216A458/day\n</code></pre></p> <p>Select TRV temperature night: Switch to reduction temperature</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/night\n</code></pre> <p>Note</p> <p>If auto is the current mode: When setting a temperature, switch to day or night temperature, the TRV will switch back to the temperature according the next programmed timeslot.</p> <p>Disable the TRV and enable frost protection.</p> <p>Until the next programmed timeslot</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/valve off\n</code></pre> <p>Permanently:</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/off\n</code></pre> <p>Disable the TRV and open the valve completely (saves potentially battery in summer while the central heating is not working):</p> <p>Until the next programmed timeslot</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/valve on\n</code></pre> <p>Permanently:</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/on\n</code></pre> <p>Change the comfort and reduction temperature to 22 C and 17.5 C</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/setdaynight 22 17.5\n</code></pre> <p>Enable boost mode (valve 80% open for 5 minutes)</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/boost\n</code></pre> <p>Disable TRV buttons</p> <pre><code>cmnd/tasmota/EQ3/001A2216A458/lock\n</code></pre> <p>Synchronize current tasmota time with the TRV <pre><code>cmnd/tasmota/EQ3/001A2216A458/settime\n</code></pre></p> <p>Set the time and date (byte by byte conversion from decimal to hexadecimal)</p> <ul> <li>Date:   2021 - jan - 04 - 13:00:00</li> <li>In hex:   15 - 01  - 04 - 0d:00:00  (yyMMddhhmmss)</li> <li>Concatenate: 1501040d0000 </li> </ul> <pre><code>cmnd/tasmota/EQ3/001A2216A458/settime 1501040d0000\n</code></pre> <p>Set the temperature schedule for day 3 (Tuesday) as</p> <ul> <li>20.5 C until 07:30</li> <li>17.0 C until 17:00</li> <li>22.5 C until 22:00</li> <li>18.0 C until 24:00</li> </ul> <pre><code>cmnd/tasmota/EQ3/001A2216A458/setprofile 3 20.5-07:30,17.0-17:00,22.5-22:00,18.0-24:00\n</code></pre>"},{"location":"ESP32-Devices/","title":"ESP32 Devices","text":""},{"location":"ESP32-Devices/#lilygo-ttgo-t-camera-ov2640_v05","title":"LilyGO TTGO T-Camera OV2640_V05","text":"<p>In <code>platformio_override.ini</code> uncomment the line with <code>tasmota32</code> and set the correct COM port. </p> <p>In <code>user_config_override.h</code> add:</p> <pre><code>#define USE_BMP\n#define USE_I2C\n#define USE_SPI\n#define USE_DISPLAY\n#define USE_DISPLAY_SSD1306\n#define SHOW_SPLASH\n#define USE_WEBCAM\n</code></pre> <p>Upload via USB, then apply the following Template:</p> <pre><code>{\"NAME\":\"TTGO_V05\",\"GPIO\":[1,1,1,1,5090,5088,1,1,5056,5024,5089,5091,1,1,5092,5184,0,640,608,5093,0,5152,4928,5120,0,0,0,0,4992,160,32,1,5094,0,0,5095],\"FLAG\":0,\"BASE\":2}\n</code></pre> <p>The PIR will turn ON/OFF the display and send over MQTT the POWER status. The display shows the sensor data. To make the device work nicely, change the following settings in the Console:</p> <p>Camera settings to correct orientation (USB on the bottom): <pre><code>WCFlip ON\nWCMirror ON\nWCResolution 6\nWCSaturation 0\nWCBrightness -1\nWCContrast 1\n</code></pre></p> <p>Display Settings (USB on the bottom): <pre><code>DisplayRotate 2\nDisplayCols 21\nDisplayRows 7\nDisplayMode 2\n</code></pre></p> <p>BME280 Settings (it is not very trustable): <pre><code>HumOffset 10\nTempOffset -15\n</code></pre></p> <p>PIR/Button Settings: <pre><code>SwitchMode1 1\nSetOption73 1\n</code></pre></p>"},{"location":"ESP32-Devices/#odroid-go","title":"ODROID-GO","text":"<p>is supported via build Tasmota32-lvgl. Upload firmware and configure via Menu <code>Auto-configuration</code></p> <p>To make the device work nicely, change the following settings in the Console: <pre><code>adcparam3 6,0,4095,0,6160\n</code></pre></p> <p>Rule for Joystick to dim the display: <pre><code>on analog#joy2=1 do dimmer - endon on analog#joy2=2 do dimmer + endon\n</code></pre></p>"},{"location":"ESP32-Devices/#aithinker-cam","title":"AITHINKER CAM","text":"<pre><code>{\"NAME\":\"AITHINKER CAM\",\"GPIO\":[4992,1,672,1,416,5088,1,1,1,6720,736,704,1,1,5089,5090,0,5091,5184,5152,0,5120,5024,5056,0,0,0,0,4928,576,5094,5095,5092,0,0,5093],\"FLAG\":0,\"BASE\":2}\n</code></pre>"},{"location":"ESP32-Devices/#wesp32","title":"wESP32","text":"<pre><code>{\"NAME\":\"wESP32\",\"GPIO\":[0,0,1,0,1,1,0,0,1,1,1,1,5568,5600,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#wt32-eth01","title":"WT32-ETH01","text":"<pre><code>{\"NAME\":\"WT32-ETH01\",\"GPIO\":[1,1,1,1,1,1,0,0,1,0,1,1,3840,576,5600,0,0,0,0,5568,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#denky-teleinfo","title":"Denky (Teleinfo)","text":"<pre><code>{\"NAME\":\"Denky (Teleinfo)\",\"GPIO\":[1,1,1,1,5664,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1376,1,1,0,0,0,0,1,5632,1,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#olimex-esp32-poe","title":"Olimex ESP32-PoE","text":"<pre><code>{\"NAME\":\"Olimex ESP32-PoE\",\"GPIO\":[1,1,1,1,1,1,0,0,5536,1,1,1,1,0,5600,0,0,0,0,5568,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#m5stack-atom","title":"M5Stack Atom","text":"<pre><code>{\"NAME\":\"M5Stack Atom\",\"GPIO\":[1,1,1,1,1,1,1,1,1056,1,1,1,1,1,1,1,0,609,1,1,0,641,640,1376,0,0,0,0,608,1,1,1,1,0,0,32],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#m5stack-atom-lite","title":"M5Stack Atom lite","text":"<pre><code>{\"NAME\":\"M5Stack Atom Lite\",\"GPIO\":[1,1,1,1,1,1,1,1,1056,1,1,1,1,1,1,1,0,1,1,1,0,1,640,1376,0,0,0,0,608,1,1,1,1,0,0,32],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#lilygo-ttgo-t-eth-poe","title":"LilyGO ttgo-t-eth-poe","text":"<pre><code>{\"NAME\":\"LilyGO ttgo-t-eth-poe\",\"GPIO\":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,5600,1,0,1,1,5568,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre> <p>For working Ethernet, change the following setting in the Console: <pre><code>EthClockMode 1\n</code></pre></p> <p>these 3 devices are also fully supported, more detailed info will be added later  </p>"},{"location":"ESP32-Devices/#ttgo-esp32-watch","title":"TTGO ESP32 watch","text":"<p>fully supported with all sensors  </p>"},{"location":"ESP32-Devices/#ttgo-t4","title":"TTGO T4","text":"<p>fully supported</p>"},{"location":"ESP32-Devices/#m5stack-core2","title":"m5stack CORE2","text":"<p>is fully supported with all sensors and SD card. Upload firmware Tasmota32-lvgl and configure via Menu <code>Auto-configuration</code></p>"},{"location":"ESP32-Devices/#heltec-wifi-kit-32","title":"Heltec WiFi Kit 32","text":"<p>OLED display needs the following template</p> <pre><code>{\"NAME\":\"WiFi Kit 32\",\"GPIO\":[1,1,1,1,640,1,1,1,1,1,1,608,3840,1,1,1,0,1,1,1,0,224,1,1,0,0,0,0,1,1,1,1,1,0,0,1],\"FLAG\":0,\"BASE\":1}\n</code></pre>"},{"location":"ESP32-Devices/#wemos-lolin-d32","title":"WEMOS / LOLIN D32","text":"<p>verified support for board plus I2C sensors</p> <p>to use I2C, set IO21 to SDA and IO22 to SCL</p>"},{"location":"ESP32-Devices/#displays-sensors-and-other-options","title":"Displays, sensors and other options","text":"<p>displays: (most probably all I2C displays will work)    </p> <pre><code>USE_DISPLAY_SH1106  \nUSE_DISPLAY_EPAPER_29  \nUSE_DISPLAY_EPAPER_42  \nUSE_DISPLAY_ILI9341  \nUSE_DISPLAY_ILI9488  \nUSE_DISPLAY_SSD1351  \nUSE_DISPLAY_RA8876  \nUSE_DISPLAY_ST7789  \nUSE_DISPLAY_ILI9341_2  \nUSE_DISPLAY_ILI9342  \n</code></pre> <p>sensors:  (most probably all I2C sensors will work)    </p> <pre><code>USE_SHT3X  \nUSE_BMP  \nUSE_VL53L0X  \nUSE_MLX90614  \nUSE_IBEACON  \nUSE_SML_M  \n</code></pre> <p>misc: <pre><code>USE_MP3_PLAYER  \nUSE_SCRIPT (scripting and all its options)  \nUSE_24C256  \nUSE_SENDMAIL\nUSE_ESP32MAIL\n</code></pre></p>"},{"location":"ESP32/","title":"ESP32","text":"<p>ESP32-S2/S3 support is in beta and not all functions or supported peripherals will work reliably.</p> <p>Due to the scope and activity of development there might be breaking changes and incompatibilities between major and minor versions of Tasmota32. In case of problems first erase flash and serial flash the latest development binary.</p>"},{"location":"ESP32/#esp32-differences","title":"ESP32 Differences","text":"<p>All ESP32 systems on a chip (SoC) are 32-bit MCUs with 2.4 GHz Wi-Fi &amp; Bluetooth/Bluetooth LE built in. There are distinct product lines which differ from each other in varying degrees. See ESP32 modules list for the full list.</p>"},{"location":"ESP32/#esp32_1","title":"ESP32","text":"<p>An ESP32 has two or one Xtensa\u00ae 32-bit LX6 microprocessor(s) with clock frequency ranging from 80 MHz to 240 MHz. Tasmota32 is initially developed and tested with the dual core ESP32-D0WD-V3 and later expanded to include single core or PSRAM versions. Only first 4MB of PSRAM are useable (and reported) even if a bigger chip is connected (see here for more information).</p> <p>Single core SoCs do not work with standard binaries, for those use only <code>tasmota32solo1.bin</code> or compile your own binary using the tasmota32solo1 environment.</p>"},{"location":"ESP32/#esp32-s2","title":"ESP32-S2","text":"<p>A more cost-efficient version of ESP32, cut down to a single core and several dedicated hardware security features (eFuse, flash encryption, secure boot, signature verification, integrated AES, SHA and RSA algorithms). It has 43 available GPIOs. Product page for ESP32-S2</p> <p>Use <code>tasmota32s2-</code> binaries for this line of chips.</p>"},{"location":"ESP32/#esp32-s3","title":"ESP32-S3","text":"<p>Keeping the security improvements the S3 line now again features the dual core SoC with Bluetooth upgraded to V5 . Product page for ESP32-S3.</p> <p>Use <code>tasmota32s3-</code> binaries for this line of chips.</p>"},{"location":"ESP32/#esp32-c3","title":"ESP32-C3","text":"<p>Unlike previous versions, C3 is a single-core Wi-Fi and Bluetooth 5 (LE) microcontroller SoC based on the open-source RISC-V architecture. It is available as ESP32-C3-MINI-1 and ESP32-C3-WROOM-02 modules. Product page for ESP32-C3</p> <p>Use <code>tasmota32c3-</code> binaries for this line of chips.  </p>"},{"location":"ESP32/#esp32-c6","title":"ESP32-C6","text":"<p>The ESP32-C6 series is based on the RISC-V architecture and offers both Wi-Fi  and Bluetooth (LE) support. Product page for ESP32-C6</p> <p>Use <code>tasmota32c6-</code> binaries for this line of chips.</p>"},{"location":"ESP32/#esp32-p4","title":"ESP32-P4","text":"<p>The ESP32-P4 series is designed for high-performance applications and features a dual-core RISC-V processor, extensive peripheral support and advanced security features. It is particularly suitable for demanding control and multimedia applications, although support in Tasmota is just beginning and many new features are not implemented yet. Product page for ESP32-P4</p> <p>Use <code>tasmota32p4-</code> binaries for this line of chips.</p>"},{"location":"ESP32/#flashing","title":"Flashing","text":"<p>Use Tasmota Web Installer to easily flash ESP32 devices.</p> <p>Other options include:</p> <p>ESP_Flasher for flashing an ESP32 or ESP82xx (Windows, MacOs or Linux (Ubuntu)).</p> <p>esptool.py - use the following command syntax:</p> <pre><code>esptool.py write_flash 0x0 tasmota32.factory.bin\n</code></pre> <p>Use a proper power supply!</p> <p>ESP32 is power hungry and there's a high chance it will not be able to boot properly off the serial-to-USB power. Power it from a separate power supply that can provide at least 500mA.</p> <p>You can download precompiled binaries:</p> <ul> <li>development branch from http://ota.tasmota.com/tasmota32/</li> <li>stable releases from http://ota.tasmota.com/tasmota32/release/</li> </ul> <p>OTA upgrade from older versions of tasmota32 might fail due to significant changes in partition tables.</p>"},{"location":"ESP32/#exclusive-features","title":"Exclusive Features","text":""},{"location":"ESP32/#autoconf","title":"Autoconf","text":"<p>As devices get more complex, it was useful to find a simpler way for users to configure a device in one click, including Template information, Ethernet configuration, SetOptions and Berry drivers.</p> <p>After flashing Tasmota, open the web UI of the device and navigate to Configuration -&gt; Auto-configuration. Select your device from the drop-down and click Apply Configuration.</p> <p>Configuration files are stored here: https://github.com/tasmota/autoconf</p> <p>To use it you need to have <code>#define USE_AUTOCONF</code>.</p>"},{"location":"ESP32/#berry-scripting","title":"Berry Scripting","text":"<p>ESP32 introduces Berry language as a more approachable scripting language. Berry is very powerful and you can even code an I2C driver using it.</p>"},{"location":"ESP32/#lvgl","title":"LVGL","text":"<p>Use LVGL in conjunction with Berry on devices with displays and touch displays to design your own UI.</p>"},{"location":"ESP32/#cpu-temperature-sensor","title":"CPU Temperature Sensor","text":"<p>Tasmota will create an internal temperature sensor and display the values in the webUI and MQTT. The accuracy of this sensor varies a lot depending on the ESP32 chip involved and should not be taken as a reliable metric.</p> <p>Enable display of ESP32 internal temperature with <code>SetOption146 1</code> </p> <p><pre><code>{\"Time\":\"2021-01-01T00:00:00\",\"ESP32\":{\"Temperature\":41.7},\"TempUnit\":\"C\"}\n</code></pre> You can deactivate sensor by using command <code>SetSensor127 0</code></p>"},{"location":"ESP32/#dac","title":"DAC","text":"<p>DAC GPIOs are supported through Berry <code>gpio</code> module.</p>"},{"location":"ESP32/#hall-sensor","title":"Hall Sensor","text":"<p>ESP32 has a built in hall effect sensor that detects changes in the magnetic field in its surroundings. It is located behind the metal lid of the module and connected to GPIO36 and GPIO39.</p> <p>To enable set in module configuration or template:</p> <ul> <li>GPIO36 as <code>HallEffect 1</code></li> <li>GPIO39 as <code>HallEffect 2</code></li> </ul>"},{"location":"ESP32/#i2s","title":"I2S","text":"<p>ESP32 contains two I2S peripherals. These peripherals can be configured to input and output sample data via the I2S driver. Read more...</p> <p>I2S is possible through I2S Audio or Berry <code>gpio</code> module.</p>"},{"location":"ESP32/#touch-pins","title":"Touch Pins","text":"<p>ESP32 has 10 capacitive touch GPIOs. More on configuring and using them....</p>"},{"location":"ESP32/#compiling","title":"Compiling","text":"<p>Uncomment the tasmota32xxx build you want to compile in <code>platformio_override.ini</code>. For example, uncommenting tasmota32 will build <code>tasmota32.bin</code> on the next Build task in Platformio.</p> <p></p> <p>All binaries use <code>user_config_override.h</code> if it exists.</p>"},{"location":"ESP32/#working-devices","title":"Working Devices","text":"<p>Tasmota Supported Devices Repository has a more extenstive list of ESP32 based devices.</p>"},{"location":"EZO/","title":"EZO sensors","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>//  #define USE_EZOPH         // [I2cDriver55] Enable support for EZO's pH sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOORP        // [I2cDriver55] Enable support for EZO's ORP sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZORTD        // [I2cDriver55] Enable support for EZO's RTD sensor (+0k2 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOHUM        // [I2cDriver55] Enable support for EZO's HUM sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOEC         // [I2cDriver55] Enable support for EZO's EC sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOCO2        // [I2cDriver55] Enable support for EZO's CO2 sensor (+0k2 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOO2         // [I2cDriver55] Enable support for EZO's O2 sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOPRS        // [I2cDriver55] Enable support for EZO's PRS sensor (+0k7 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOFLO        // [I2cDriver55] Enable support for EZO's FLO sensor (+0k4 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZODO         // [I2cDriver55] Enable support for EZO's DO sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZORGB        // [I2cDriver55] Enable support for EZO's RGB sensor (+0k5 code) - Shared EZO code required for any EZO device (+1k2 code)\n//  #define USE_EZOPMP        // [I2cDriver55] Enable support for EZO's PMP sensor (+0k3 code) - Shared EZO code required for any EZO device (+1k2 code)    \n</code></pre></p> <p>EZO is a series of chemical sensors provided by Atlas Scientific</p> <p>At this point in time, the following EZO sensors are supported:</p> build <code>#define</code> Sensor ID Sensor Name USE_EZODO EZO-D.O. Dissolved Oxygen USE_EZOORP EZO-ORP Oxygen Reduction Potential USE_EZOPH EZO-pH pH USE_EZOEC EZO-EC Electric Conductivity USE_EZORTD EZO-RTD Temperature USE_EZOFLO EZO-FLO Flow Meter USE_EZOCO2 EZO-CO2 Carbon Dioxyde (gas) USE_EZOPRS EZO-PRS Pressure USE_EZOO2 EZO-O2 Oxygen (gas) USE_EZOHUM EZO-HUM Humidity USE_EZORGB EZO-RGB Color"},{"location":"EZO/#configuration","title":"Configuration","text":"<p>All EZO devices must operate under the I<sup>2</sup>C mode to be compatible with Tasmota.  One of the easiest way to achieve this is to short SDA/Tx to PGND while powering the device through VCC &amp; GND.  For more details, see Instructables.</p> <p></p> <p>Tasmota will automatically detect any new device that has an I<sup>2</sup>C bus address between 0x61-0x70 (which covers the default address range of all EZO devices).  Tasmota supports any multiple of EZO devices (up to 16 of any kind).  When more than one device is detected, the devices will be indexed starting at index 1 (ex: EZO-1) and ordered by their I<sup>2</sup>C address.  If only one EZO device is connected, there will be no indexing of them.  You may change the address of your device by sending an I<sup>2</sup>C command to the device.  For example, to change the address of a single EZOpH sensor, the following command can be issued in the console: <code>Sensor78 I^2^C,100</code></p> <p>Specific details about the list of commands available for your EZO device can be found in the device-specific datasheet on the Atlas Scientific's website.  In order to individually address a single EZO sensor when more than one is detected, the index must be specified on the command by having \"-#\" before the other arguments: <code>Sensor78 -2 I2C,101</code></p>"},{"location":"EZO/#calibration","title":"Calibration","text":"<p>Many EZO devices require calibration in order to accurately report values.  Calibration can be easily achieved by issuing the appropriate commands and following the instructions in the EZO datasheets.  One easy way to achieve this is to put the sensor in the baseline environment and use the web interface to see when the value stabilizes.  Once it does, visit the console and issue the device-specific calibration command.</p>"},{"location":"EZO/#readings","title":"Readings","text":"<p>Currently, Tasmota samples the sensor information at the rate of 1Hz (1 sample/second) irrespective of the EZO device.</p> <p>Some EZO devices support reporting different units.  For example EZO-RTD supports reading the temperature in \u00b0C, \u00b0K, or \u00b0F.  In order to save memory, Tasmota will only be able reading the default format (ie: \u00b0C).  If you wish to see the value in another format, you can use Tasmota's ability to display Fahrenheit to do the conversion for you.  For conversions that are not supported by Tasmota, you may use OpenHab, Home Assistant or any other system in conjunction with MQTT to do the cnoversion.  In every case, there exists a simple formula that will allow you to convert from one format to another and the EZO device are merely utilizing that formula to return the value.  It's important to make sure that the default units are used.  If that's not the case, Tasmota will simply assume that the default units are used and the number will seem drastically wrong.</p> <p>Some device supports the output of multiple different sensors in one single EZO devices.  One example of this is the EZO-HUM which supports outputting the humidity as well as the temperature.  By default, only the humidity is enabled, but a command can be sent to enable the temperature as well.  In that case, Tasmota does support reading the additional sensor provided that the command enables its output.</p> <p>Some readings can be made more precise by specifying additional parameters.  The most common one is temperature.  For example, the EZO-pH sensor can return more accurate values if it compensates for the temperature.  At this point in time, Tasmota does not support reading sensor data which compensates with any other sensor's data.  That said, these are typically well-established equations that will allow you to convert the existing reading and adjust it based on the reading from the other sensor.  A simple Google search can be done to understand how to compensate in each case.</p> <p>Sleep mode for EZO devices is currently NOT supported by Tasmota.</p>"},{"location":"Energy-Saving/","title":"Energy Saving","text":"<p>Using the <code>Sleep</code> command you can instruct Tasmota to sleep for the set milliseconds in its main cycle. While sleeping your device will consume less power.</p> <p>Dynamic Sleep is enabled by default with a value of 50. To continue using Normal Sleep you may disable it by using the command:</p> <p><code>SetOption60 1</code></p> <p>Setting <code>Sleep</code> to lowest value <code>1</code> reduces power consumption already about ~30% in idle mode (relay off) and button presses are still noticed without any delay. Setting this around 50 ms reduces power consumption from ~1.1 W to ~0.6 W on an idling (relay off) device and button presses are still noticed correctly. With this setting you have to concentrate very hard to click the button so fast that it is not recognized by the device.</p> <p>If your device needs to do something continuously, this will be affected. E.g., device LED will flicker and Sonoff POW will not be able to correctly total the energy consumption. Spot readings of power, voltage, etc. will however remain correct.</p> <p>From the release notes: Expect overall button/key/switch misses and wrong values on Sonoff Pow</p> <p>Notes: - Starting with Tasmota 6.1.1.12 <code>Sleep</code> \u2260 <code>0</code> has no impact on real time related commands like <code>Delay</code>, <code>PulseTime</code>, <code>TelePeriod</code> and <code>Blinktime</code>. - As the WiFi Modem on an ESP8266 is the major consumer - using Sleep with WiFi AP mode enabled is more or less without effect.</p>"},{"location":"Energy-Saving/#device-power-consumption-and-measurement","title":"Device power consumption and measurement","text":"<p>Most low-price plug-in home energy meters like Sonoff devices are very imprecise for power consumption &lt; 10 W and become more and more imprecise for power consumption (&lt; 1.5 W). Furthermore, the results of such meters are very strongly dependant on the load type (capacitive/inductive) and are absolutely imprecise for non-ohmic load types having switch-mode power supplies.</p> <p>In addition, using <code>Sleep</code> - which periodically cycles the power of the device between 20% and 100% - on such meters makes their readings more or less useless.</p>"},{"location":"Energy-Saving/#example-of-power-consumption","title":"Example of power consumption","text":""},{"location":"Energy-Saving/#absolute-ac-line-measurement-using-calibrated-meter","title":"Absolute AC line measurement using calibrated meter","text":"<p>The following measurement was done directly on 230 V/AC line using a Sonoff Dual R2 and two different Sonoff S20 connected on different MID calibrated meter (Eastron SMD630 MID/saia-burgess ALE3).</p>"},{"location":"Energy-Saving/#device-power-consumption-using-sleep","title":"Device power consumption using Sleep","text":"Device Sleep 0 Sleep 1 Sleep 50 Sleep 200 Sonoff Dual R2 1.24 W 0.84 W 0.76 W 0.68 W Sonoff S20 1.11 W 0.77 W 0.59 W 0.51 W <p>All measurements were done with - WiFi STA mode, enabled and connected (70%) - MQTT enabled and connected - Syslog enabled and connected - <code>TelePeriod 60</code> for debugging - Relays off - Measurement period of 24-56 hours to reduce measurement discrepancies</p> <p>The first impression is that a higher sleep value reduces the consumption, but only slightly. The second result is that using <code>Sleep &lt;value&gt;</code> (<code>value</code> \u2260 0, e. g., 1) is good enough to reduce the power consumption anywhere between 1/3 and up to 45% (value=200).</p>"},{"location":"Energy-Saving/#quantity-measurement-of-esp-12-moduleesp8266-33v-line","title":"Quantity measurement of ESP-12 module/ESP8266 3.3V line","text":"<p>To find out why Sleep reduces the power consumption and how its value should be set, the current of the 3.3V DC ESP8266 of an ESP-12 module was measured using an oscilloscope and (for easy reading the oscilloscope diagram) a 1 \u03a9 shunt which results in a 1:1 interpretation between voltage and current.</p> <p>This measurement simplified the measure of a time based power consumption; no integration must be done. On the other side note that the quantity measurement does not respect the effectiveness of the complete device circuit.</p>"},{"location":"Energy-Saving/#sleep-0","title":"Sleep 0","text":"<p>Using <code>Sleep 0</code> there are no <code>delay()</code> calls in Tasmota main loop and therefore the power consumption is continuous at current ~80 mA: </p>"},{"location":"Energy-Saving/#sleep-1","title":"Sleep 1","text":"<p>Due to the fact that the Tasmota main loop now calls <code>delay()</code> (even with 1ms) it seems it results in periodically (100ms) enabling the WiFi Modem Sleep mode within the WiFi Manager library. It results in periodically lowering the current to 15-20 mA for ~90ms of each loop: </p>"},{"location":"Energy-Saving/#sleep-100","title":"Sleep 100","text":"<p>By increasing the sleep value, there are more and more ~90ms periods with additional lowering of the current to 8-10 mA - I really don't know where this comes from: </p>"},{"location":"Energy-Saving/#sleep-250","title":"Sleep 250","text":"<p>As already noticed with <code>Sleep 100</code> the number periods having 8-10 mA instead of 15-20 mA increase again: </p> <p>The quantity measurement confirms the suspicion that a <code>Sleep</code> value \u2260 0 results in reducing the power consumption about 1/3.</p>"},{"location":"Esptool/","title":"Esptool","text":"<p>How to setup and configure Esptool for Tasmota upload on an esp8266</p> <p>The information below is for the Python version of esptool - If you want to use the Windows/Linux/OSX(MAC) executable version of esptool (as would be included in Arduino ESP8266 cores) then please go to the esptool executable (Windows, MacOs and Linux) section at the bottom.</p>"},{"location":"Esptool/#download-esptool","title":"Download Esptool","text":"<p>If you do not have an installed copy of Python download and install it from https://www.python.org/.</p> <p>Download Esptool Source code from https://github.com/espressif/esptool/releases to a known folder.</p>"},{"location":"Esptool/#install-esptool","title":"Install Esptool","text":"<p>Go to the known folder and install Esptool with command <code>python setup.py install</code>.</p> <p>Packages for Esptool are maintained for Debian and Ubuntu and can be installed with <code>sudo apt install esptool</code>.</p>"},{"location":"Esptool/#download-tasmota","title":"Download Tasmota","text":"<p>Download the latest Tasmota release firmware file tasmota.bin to a known folder. </p>"},{"location":"Esptool/#upload-tasmota","title":"Upload Tasmota","text":""},{"location":"Esptool/#put-device-in-firmware-upload-mode","title":"Put device in firmware upload mode","text":"<p>When performing a firmware upload do not connect the device to AC but use the power supply provided by your (FTDI type) serial interface.</p> <p>Put the device in firmware upload mode by grounding pin GPIO00 while applying power.</p> <p>Grounding pin GPIO00 can often be achieved by pressing button 1 on the Sonoff device or using a wire between GPIO00 and Gnd if the button is not available. Deviations may apply.</p> <p>Connect the serial interface of your PC to the device while GPIO00 to Gnd.</p> <p>Esptool uses the serial interface to communicate with your device. On Windows these interfaces are named COM1, COM2 etc. On Linux these interfaces are called /dev/ttyUSB0, /dev/ttyUSB1 etc.</p> <p>Before using Esptool make sure you know to which serial interface name your device is connected to.</p> <p>In the following commands I use COM5 as an example.</p>"},{"location":"Esptool/#optional-backup-firmware","title":"Optional: Backup firmware","text":"<p>Ensure the device is in firmware upload mode.</p> <p>Backup the current firmware with the following command: <pre><code>esptool.py --port COM5 read_flash 0x00000 0x100000 image1M.bin\n</code></pre> NOTE: When the command completes the device is out of firmware upload mode!</p>"},{"location":"Esptool/#erase-firmware","title":"Erase firmware","text":"<p>Ensure the device is in firmware upload mode.</p> <p>Erase the complete flash memory holding the firmware with the following command: <pre><code>esptool.py --port COM5 erase_flash\n</code></pre> NOTE1: When the command completes the device is out of firmware upload mode!</p> <p>NOTE2: It only takes a few seconds to erase 1M of flash.</p>"},{"location":"Esptool/#upload-firmware","title":"Upload firmware","text":"<p>Ensure the device is in firmware upload mode.</p> <p>Load the downloaded Tasmota firmware file tasmota.bin with the following command:</p> <p><pre><code>esptool.py --port COM5 write_flash -fs 1MB -fm dout 0x0 tasmota.bin\n</code></pre> NOTE1: When the command completes the device is out of firmware upload mode!</p> <p>NOTE2: For a proper device initialization after first firmware upload power down and power up the device.</p>"},{"location":"Esptool/#esptool-executable-windows-macos-and-linux","title":"ESPTOOL Executable (Windows, MacOs and Linux)","text":"<p>The executable version of esptool can be downloaded from https://github.com/espressif/esptool/releases</p>"},{"location":"Esptool/#download-and-install","title":"Download and Install","text":"<p>For the purpose of simplicity only the Windows version will be explained here, but the command and parameters are the same for Windows, Linux and MAC/OSX.</p> <p>Download the latest release from https://github.com/espressif/esptool/releases and extract the compressed file to a known location.</p>"},{"location":"Esptool/#download-tasmota_1","title":"Download Tasmota","text":"<p>Download the latest Tasmota release firmware file tasmota.bin to a known folder (The same folder as where you have the esptool executable will work well for this process to be simpler)</p> <p>If you want features from the current development codebase which has not been included in the last release please download this tasmota.bin to a known folder (The same folder as where you have the esptool executable will work well for this process to be simpler)</p> <p>The information posted further up in this Wiki for placing the device into bootload / firmware upgrade mode may be followed as this process does not change irrespective whether you use the Python or executable version of esptool.</p> <p>Once the device is in firmware upload mode the following commands are recommended for completion of the firmware flashing.</p> <p>Erase the flash completely with the following command (substituting the COM port for the one which was used on your computer)</p> <p><code>esptool.exe --port COM5 erase_flash</code></p> <p>Once the erase is complete, reset your device back into programming mode and then upload the firmware using the following command</p> <p><code>esptool.exe --port COM5 write_flash -fs 1MB -fm dout 0x0 tasmota.bin</code></p>"},{"location":"Expanding-4CH/","title":"Expanding 4CH","text":"<p>Opening my Sonoff 4CH (https://www.itead.cc/sonoff-4ch.html) I realized that on PCB there is a predisposition for 2.5 mm jack (also confirmed by schematic on Itead wiki: https://www.itead.cc/wiki/File:Sonoff_4CH.SCHMATIC.pdf).</p> <p>I ordered on Aliexpress some 2.5 mm jacks and when I received it after some work...</p> <p> </p> <p>The schematic reports that 2.5 mm jack is configured as following (jack on right side, ESP8285 on the left side:</p> <p> </p> <p>3.3V and GND are very welcome for sensors expansions but GPIO7 and GPIO8 are not usable because they are used internally by ESP8285 for flash memory connection (sigh!)</p> <p>R35 and R36 resistors are not soldered on Sonoff 4CH PCB and it is possible to use their pads to \"manually route\" the jack contact on another ESP8285 pin (!). I selected R35 pad because my \"waterproof\" DS18B20 sensors provide signal line on TEM1 jack contact.  For ESP8285 pin I prefer IO2 that is already available on header programming pins...</p> <p>Then the route to do is: TEM1 -&gt; R35 pad -&gt; GPIO2:</p> <p>DS18B20 sensors need a 4.7Kohm pullup resistor between DATA pin and 3.3V and this is also useful to pullup GPIO2 in order to avoid ESP8285 reset.</p> <p>Final result in these photos:</p> <p>Tasmota is also configured with DS18x20 on GPIO2 and it works !</p> <p>*Note*: source file sonoff/sonoff_template.h  provides the configuration on Sonoff 4CH and it is also possible to use GPIO16 (as in the screenshot above) but be aware that no interrupts can be used on GPIO16 and you could have problems with some sensors.</p>"},{"location":"Expanding-Tasmota/","title":"Expanding Tasmota","text":"<p>You can wire peripherals (sensors, displays, switches, LED lights, ...) to available pins of the ESP8266 chip that controls these devices.</p> <p>To make a link between the different naming schemes the Pin Definition overview in the ESP8266 wiki is quite helpful.</p>"},{"location":"Expanding-Tasmota/#examples","title":"Examples","text":""},{"location":"Expanding-Tasmota/#connect-switch","title":"Connect switch","text":"<p>If you take a Sonoff Basic and connect a switch between pin4 (GND) and pin5 (GPIO14) of the 5 pin programming header you now have a second switch connected to the device. You can set this through the module config page as option <code>Switch1 (9)</code> or from the command line with <code>gpio14 9</code>.</p> <p>See Buttons and Switches for more information.</p>"},{"location":"Expanding-Tasmota/#connect-jack","title":"Connect jack","text":"<p>Instead of connecting a switch, you could connect a 4-pin 2.5mm jack, with the pins wired:  </p> Jack Pin ESP8266 tip 5 GPIO14 R1 no connection R2 1 GND R3 4 3.3V <p>You can then plug a sensor into the jack like you would to a Sonoff TH and define what sensor you have connected to GPIO14.</p>"},{"location":"Expanding-Tasmota/#restrictions","title":"Restrictions","text":"<p>Danger</p> <p>If you can avoid it, don't use GPIOs: 0, 1, 2, 6-11, 15 and 16. That leaves 4, 5, 12, 13, 14 as GPIOs without any               constraints. 3 being RX is also good to avoid (PWM is not working on this GPIO).</p> <p>Others can be used but you have to mind the constraints outlined in this document.</p>"},{"location":"Expanding-Tasmota/#voltage-and-current","title":"Voltage and Current","text":"<p>Danger</p> <p>The ESP8266 is a 3.3V microcontroller, so its I/O operates at 3.3V as well. The pins are not 5V tolerant, applying more than         3.6V on any pin will release the magic smoke (fry the chip).</p> <p>The maximum current that can be drawn from a single GPIO pin is 12mA.</p>"},{"location":"Expanding-Tasmota/#power-supply","title":"Power Supply","text":"<p>Danger</p> <p>The power supplied to the device is one of the most important             elements for stable device operation. Many devices on the market have barely adequate power supplies for normal operation.             Connected peripherals may strain the ability of the power supply on the device to deliver appropriate power to all the               components, both on-board as well as externally connected.</p> <p>Voltage regulation issues typically result in fatal exception fault code <code>1</code>. You must ensure that the device receives sufficient power (current and appropriate voltage level). Take into account the current that each wired component (e.g., sensor) will draw from the device itself. </p>"},{"location":"Expanding-Tasmota/#electrical-considerations","title":"Electrical Considerations","text":"<p>When you switch a GPIO pin to an input and hang a long wire off of it, that wire can pick up stray signals and cause the voltage on the GPIO pin to vary. This can cause the system to think the switch has changed.</p> <p>To fix this, there are several things you can do.</p> <ol> <li>add a pull-up resistor</li> <li>add a bypass capacitor</li> <li>shielding on the wire</li> <li>use twisted pair wiring</li> </ol> <p>A pull-up resistor is a resistor connected between the GPIO pin and 3.3v. The exact value of this is not critical, 4.7k is a common value to use, as is 10k. This ensures that when the switch it open, the GPIO pin will go high.</p> <p>A bypass capacitor is a small (pF range) capacitor that is connected between the GPIO and ground. This provides a path for any radio signals that are picked up by the wire to go to ground and not confuse the system.</p> <p>Shielding or using twisted pair wiring are other ways to reduce the effect of radio signals on the system.</p> <p>Example for 10K Resistor (issue#2708)</p>"},{"location":"Expanding-Tasmota/#the-esp8266-hardware","title":"The ESP8266 Hardware","text":"<p>Complete document available from https://tttapa.github.io/ESP8266/Chap04%20-%20Microcontroller.html</p>"},{"location":"Expanding-Tasmota/#digital-io","title":"Digital I/O","text":"<p>Just like a normal Arduino, the ESP8266 has digital input/output pins (I/O or GPIO, General Purpose Input/Output pins). As the name implies, they can be used as digital inputs to read a digital voltage, or as digital outputs to output either 0V (sink current) or 3.3V (source current).</p>"},{"location":"Expanding-Tasmota/#usable-pins","title":"Usable pins","text":"<p>The ESP8266 and ESP8255 have 17 GPIO pins (0-16) but several are reserved or have constraints. Do not use any of the reserved pins. If you do, you might crash your program. On the ESP8266, six pins (GPIO 6 - 11) are used to interface the flash memory (the small 8-legged chip usually right next to the ESP8266). The ESP8255 has its flash memory integrated into the chip which frees up GPIO 9 and 10.</p> <p>GPIO 1 and 3 are used as TX and RX of the hardware Serial port (UART), so in most cases, you can\u2019t use them as normal I/O while sending/receiving serial data.</p>"},{"location":"Expanding-Tasmota/#boot-modes","title":"Boot modes","text":"<p>Some I/O pins have a special function during boot: They select 1 of 3 boot modes:</p> GPIO15 GPIO0 GPIO2 Mode 0V 0V 3.3V Uart Bootloader 0V 3.3V 3.3V Boot sketch (SPI flash) 3.3V x x SDIO mode (not used for Arduino) <p>Note: you don\u2019t have to add an external pull-up resistor to GPIO2, the internal one is enabled at boot.</p> <p>We have to be sure that these conditions are met by adding external resistors, or the board manufacturer of your board has added them for you. This has some implications, however:</p> <p>GPIO15 is always pulled low, so you can\u2019t use the internal pull-up resistor. You have to keep this in mind when using GPIO15 as an input to read a switch or connect it to a device with an open-collector (or open-drain) output, like I\u00b2C. GPIO0 is pulled high during normal operation, so you can\u2019t use it as a Hi-Z input. GPIO2 can\u2019t be low at boot, so you can\u2019t connect a switch to it. Internal pull-up/-down resistors GPIO 0-15 all have a built-in pull-up resistor, just like in an Arduino. GPIO16 has a built-in pull-down resistor.</p>"},{"location":"Expanding-Tasmota/#pwm","title":"PWM","text":"<p>Unlike most Atmel chips (Arduino), the ESP8266 doesn\u2019t support hardware PWM, however, software PWM is supported on all digital pins. The default PWM range is 10-bits @ 1kHz, but this can be changed (up to &gt;14-bit@1kHz). Check Restrictions.</p>"},{"location":"Expanding-Tasmota/#analog-input","title":"Analog input","text":"<p>The ESP8266 has a single analog input, with an input range of 0 - 1.0V. If you supply 3.3V, for example, you will damage the chip. Some boards like the NodeMCU have an on-board resistive voltage divider, to get an easier 0 - 3.3V range. You could also just use a trimpot as a voltage divider.</p> <p>The ADC (analog to digital converter) has a resolution of 10 bits.</p>"},{"location":"Expanding-Tasmota/#communication","title":"Communication","text":""},{"location":"Expanding-Tasmota/#serial","title":"Serial","text":"<p>The ESP8266 has two hardware UARTS (Serial ports): UART0 on pins 1 and 3 (TX0 and RX0 resp.), and UART1 on pins 2 and 8 (TX1 and RX1 resp.), however, GPIO8 is used to connect the flash chip. This means that UART1 can only transmit data.</p> <p>UART0 also has hardware flow control on pins 15 and 13 (RTS0 and CTS0 resp.). These two pins can also be used as alternative TX0 and RX0 pins.</p>"},{"location":"Expanding-Tasmota/#i2c","title":"I\u00b2C","text":"<p>ESP8266 doesn\u2019t have a hardware TWI (Two Wire Interface) but it is implemented in software. This means that you can use pretty much any two digital pins. By default, the I\u00b2C library uses pin 4 as SDA and pin 5 as SCL. (The data sheet specifies GPIO2 as SDA and GPIO14 as SCL.) The maximum speed is approximately 450kHz.</p>"},{"location":"Expanding-Tasmota/#spi","title":"SPI","text":"<p>The ESP8266 has one SPI connection available to the user, referred to as HSPI. It uses GPIO14 as CLK, 12 as MISO, 13 as MOSI and 15 as Slave Select (SS). It can be used in both Slave and Master mode (in software).</p>"},{"location":"Expanding-Tasmota/#gpio-overview","title":"GPIO overview","text":"NodeMCU Labelled Pin GPIO# Function State Restrictions D3 0 Boot mode select 3.3V No Hi-Z D10 1 TX0 - Not usable during Serial transmission D4 2 Boot mode select TX1 3.3V (boot only) Don\u2019t connect to ground at boot time Sends debug data at boot time D9 3 RX0 - Not usable during Serial transmission D2 4 SDA (I\u00b2C) - - D1 5 SCL (I\u00b2C) - - x 6 - 8 Flash connection x Not usable, and not broken out x 9, 10 Flash connection * Only available on the ESP8285 x 11 Flash connection x Not usable, and not broken out D6 12 MISO (SPI) - - D7 13 MOSI (SPI) - - D5 14 SCK (SPI) - - D8 15 SS (SPI) 0V Pull-up resistor not usable (extern pull down resistor) D0 16 Wake up from sleep - No pull-up resistor, but pull-down instead Should be connected to RST to wake up"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#wi-fi","title":"Wi-Fi","text":""},{"location":"FAQ/#cannot-connect-to-wi-fi","title":"Cannot connect to Wi-Fi","text":"<p>If your device does not connect to your Wi-Fi and you've made sure the Wi-Fi credentials are correct, it is caused by using special chars or white spaces in your SSID or Password of your Wi-Fi. Remove them and try again. Other reason can be using an SSID longer than the allowed 32 characters.</p> <p>With some Wi-Fi routers (i.e. Linksys with DD-WRT), you may have conflicts with the 5GHz radio. Don't choose \"Mixed\" option. Select \"AC/N-Mixed\" instead. Moreover, you probably should disconnect 5GHz radio during the configuration process.</p> <p>DD-WRT also has Wi-Fi Multi-Media (WMM) enabled by default.  Disabling WMM can resolve connectivity issues.</p> <p>Some Tasmota devices also have issues with OFDMA (WiFi 6) enabled on the 2.4GHz band.  Disabling OFDMA can solve problems with WiFi failing to connect. </p> <p>Some Wi-Fi routers employ band steering. Band steering works by responding only to 5 GHz association requests and not the 2.4 GHz requests, which interferes with Tasmota devices which only support 2.4 GHz. Disabling band steering may resolve connectivity issues.</p>"},{"location":"FAQ/#i-entered-wrong-wi-fi-information","title":"I entered wrong Wi-Fi information","text":"<p>If you have a device with a button and the button is configured as a component in the Tasmota settings (e.g., GPIO0 - Button1), you can try pressing the button to force the device into Wi-Fi configuration mode with 4\u00a0short presses of the button. Note: Since version 8.3.0 this requires 6\u00a0short presses instead.</p> <p>If that didn't work reset your device using Fast power cycle device recovery</p> <p>If you are unsure what SSID you have entered, you can try to find that with special Wi-Fi sniffing tools. For example Nirsoft WifiChannelMonitor can show your mistakenly configured SSID name. Linux system example: <pre><code>apt install aircrack-ng wireshark\nairmon-ng check kill\nairmon-ng start (e.g. wlp58s0 or wlan0)\nwireshark\n</code></pre>   Select your Wi-Fi device from the list. Plug in the misconfigured device and immediately watch SSIDs. You should see your misconfigured SSID fairly soon.</p> <p>If these methods don't work, it may still be possible to save the device without opening it to perform a serial flash. Since Tasmota uses GET request for forms, the password may be in your browser history.  </p> <ol> <li>Search in your browser history for 192.168.4.1 (or whatever address you used for configuring it)</li> <li> <p>There should be an entry similar to this: <code>http://192.168.4.1/wi?s1=&lt;mySSID&gt;&amp;p1=&lt;myPassword&gt;-********&amp;s2=&amp;p2=********&amp;h=hostName&amp;save=</code> </p> <ul> <li><code>s1</code> is your first AP SSID</li> <li><code>p1</code> is the first AP password</li> <li><code>s2</code> and <code>p2</code> are the same parameters but for the second AP</li> <li><code>h</code> is the hostname given to the device by the Tasmota configuration</li> <li>After getting the incorrectly entered configuration from this URL, configure an access point with these settings as described above</li> <li>Access your device and set the correct Wi-Fi credentials</li> </ul> </li> </ol> <p>If you flashed a light bulb or any device without a built-in button and entered wrong Wi-Fi password you now have a device that won't connect to your Wi-Fi and you have no button to force it into Wi-Fi configuration mode.</p> <p>This tip takes advantage of a security risk present in Arduino Cores prior to 2.6.0. It will not work with Tasmota binaries compiled with 2.6.0 or later. </p> <p>To solve this you can try creating a new Wi-Fi AP with the same SSID and no (none) authentication. Use an old router, a mobile phone or, if you're desperate, change the settings on your main router (but remember to turn authentication back on when you're done). Depending on the router/phone it will ignore the wrong Wi-Fi password since authentication is set to none and let your Tasmota flashed device connect to it.  </p> <p>Now simply connect to the same AP and open the web UI, triple check your ssid and password, enter some simple info for <code>SSID2</code> which you can create as a hotspot on your phone and save.  </p>"},{"location":"FAQ/#device-disconnects-from-wi-fi-often","title":"Device disconnects from Wi-Fi often","text":"<p>First thing to try when having Wi-Fi issues: <code>Reset 3</code> which will erase wi-fi calibration data only and will keep configuration intact. Make sure to power cycle restart after that. If that doesn't help try rebooting the router as well</p> <p>As a last resort try : Erase all flash using esptool.py or esptool.exe and flash via serial (as explained here) using the latest precompiled binaries.</p> <p>This approach has solved many of the reported issues. Sometimes this is due to a bad flash, a bad OTA or invalid data that remains in the flash where the SDK memory is.</p> <p>If you still have issues, you should look into your Wi-Fi network:</p> <ul> <li>Some new routers have many modern features enabled with default which don't work well with the old ESP82xx chip. Disable any channel surfing, band changing and similar features.</li> <li>Check the Wi-Fi channel availability and noise with an Android app like Wi-Fi Analyzer. Disable Auto Channel in your Wi-Fi router and select any Wi-Fi channel that is not very congested in your area.</li> <li>Disable Wi-Fi Repeaters and Mesh Networks.</li> <li>Check Wi-Fi signal in your device.</li> </ul> <p>The same Mesh may be stable in one area and lead to unwanted Tasmota reconnects in other areas, presumably when the signals of access points overlap with similar strength. If disabling Mesh Networks is not an option, then keeping the network busy, e.g. by issuing a Ping from another host every 20 seconds has helped to avoid the reconnects.</p>"},{"location":"FAQ/#wi-fi-stops-working","title":"Wi-Fi Stops Working","text":"<p>There have been many reports of Wi-Fi no longer working after it was working for a while.</p> <p>Every time this has been reported, it's ended up being a hardware or signal interference problem.</p> <p>On the hardware side, we've seen reports of bad solder joints on the board that when touched up seem to solve the problem (capacitors being loose can cause this) or low quality/weak power supplies or voltage regulators that cannot cope with the power requirements of Tasmota or have degraded over time.</p> <p>We've also seen reports then when a specific LED light bulb was hooked up near one, the signal quality dropped to unusable.</p> <p>All you can really do is check the solder joints, move the device closer to your Access Point. If all else fails, replace the device.</p>"},{"location":"FAQ/#weaker-wi-fi-signal-after-upgrade","title":"Weaker Wi-Fi signal after upgrade","text":"<p>On an ESP82xx, Wi-Fi calibration is sensitive to the power supplied. If this changes substantially (e.g., you add a sensor, configure a new Tasmota feature, upgrade the firmware or Arduino Core, etc.), the device's Wi-Fi calibration may not be set properly any longer. The Wi-Fi signal strength (RSSI) can drop significantly and impact Wi-Fi performance. In such a case, the Wi-Fi calibration needs to be deleted to force the device to re-calibrate Wi-Fi after it restarts.  </p> <ol> <li>Run <code>Reset 3</code> in the Console.</li> <li>The device will restart</li> <li>Cycle the power on the device. Wi-Fi calibration will not be done unless the device performs a cold boot from power up.  </li> </ol>"},{"location":"FAQ/#webui-unavailable-but-device-can-be-controlled","title":"WebUI unavailable but device can be controlled","text":"<p>Some routers have issues with ARP implementation. To help with that use <code>SetOption41</code> to make your device send grauitous ARP in a desired interval (try 30 or 60 seconds for start).</p>"},{"location":"FAQ/#mqtt","title":"MQTT","text":""},{"location":"FAQ/#cannot-connect-to-my-mqtt-broker","title":"Cannot connect to my MQTT broker","text":"<p>Make sure you've configured MQTT correctly. If that didn't solve the issue check your MQTT broker logs.  Most likely problem is your broker doesn't allow logins for your Tasmota configure user and password or your ACL settings do not include your device.</p> <p>In some very specific cases the MQTT broker code clashes with the Arduino Core and doesn't allow a connection. In that case create a different user for your device, try another core binary or a different MQTT broker.</p>"},{"location":"FAQ/#frequent-mqtt-reconnects","title":"Frequent MQTT reconnects","text":"<p>Most MQTT reconnect messages are linked with Wi-Fi instability first. Resolve any Wi-Fi issue first!</p> <p>If the console shows repeated messages like: <pre><code>02:32:54 MQTT: tele/MYSONOFF/LWT = Online (retained)\n02:32:54 MQTT: cmnd/MYSONOFF/POWER = \n02:32:55 MQTT: Attempting connection...\n02:32:56 mDNS: Query done with 0 mqtt services found\n02:32:56 MQTT: Connected\n</code></pre> or your mosquitto broker log shows messages like this - <pre><code>1496455347: New client connected from IP_addr_1 as SONOFF (c1, k15, u'SONOFF_USER').\n1496455349: New connection from IP_addr_1 on port 1883.\n1496455349: Client SONOFF already connected, closing old connection.\n1496455349: Client SONOFF disconnected.\n1496455349: New client connected from IP_addr_2 as SONOFF (c1, k15, u'SONOFF_USER').\n1496455350: New connection from IP_addr_2 on port 1883.\n1496455350: Client SONOFF already connected, closing old connection.\n1496455350: Client SONOFF disconnected.\n</code></pre> You have more than one device connected with the same %topic% defined. It's important that each device has a unique %topic% instead of the default <code>sonoff</code>.</p> <p>If that is not the issue, erase all flash using esptool.py or esptool.exe and flash again by wire (as explained here) using the latest precompiled bins with core v2.7.1.</p>"},{"location":"FAQ/#device-is-often-unavailable-usually-30-seconds-every-minute","title":"Device is often unavailable, usually 30 seconds every minute","text":"<p>Due to a bug in the Arduino core that we are working on to solve, Tasmota devices require time to be correctly setup to work properly (see https://github.com/tasmota/docs/blob/master/docs/FAQ.md#timers-trigger-at-the-wrong-time for details and alternatives). If a Tasmota device cannot reach one of the NTP server after restarting, the device will be unavailable during 30 seconds every minute while trying to update the time.</p> <p>To confirm this issue, the command weblog can be set to 4 (typing \"weblog 4\" in the console), and log should indicate \"NTP: Sync time...\" followed by \"NTP: Unable to resolve IP address\" 30 seconds later, in the 30 seconds period the device is unavailable.</p>"},{"location":"FAQ/#configuration","title":"Configuration","text":""},{"location":"FAQ/#device-reset-to-defaults-on-its-own","title":"Device reset to defaults on its own","text":""},{"location":"FAQ/#bad-power-supply","title":"Bad power supply","text":"<p>Most common culprit is Power Cycle Recovery which can be activated if the device has a bad power supply or your power grid has fluctuations/brownouts. Disable the feature with <code>SetOption65 1</code></p>"},{"location":"FAQ/#button-in-on-state-when-depressed","title":"Button in ON state when depressed","text":"<p>If a button is configure to be in ON state when depressed it will activate \"Firmware Reset\" feature. Either change the button mode or use <code>SetOption1 1</code> to disable factory reset mode.</p>"},{"location":"FAQ/#frequent-rebootsbootloops","title":"Frequent reboots/bootloops","text":"<p>Your device may be in a boot loop - a restart caused by any exception or watchdog timer within less than <code>BOOT_LOOP_TIME</code> (default 10 seconds). The number of boot loops allowed before beginning to reset settings is determined by <code>SetOption36</code>. When Tasmota reaches this situation, it will begin restoring default settings as follows:</p> <ul> <li>1<sup>st</sup> restart: disable ESP8285 generic GPIOs interfering with flash SPI</li> <li>2<sup>nd</sup> restart: disable rules causing boot loop</li> <li>3<sup>rd</sup> restart: disable all rules</li> <li>4<sup>th</sup> restart: reset user defined GPIOs to disable any attached peripherals</li> <li>5<sup>th</sup> restart: reset module to Sonoff Basic (1)</li> </ul>"},{"location":"FAQ/#relay-clicks-and-led-flashes-at-1-second-intervals","title":"Relay clicks and LED flashes at 1 second intervals","text":"<p>This indicates that your device did not get flashed properly. In this case it will toggle all its pins at 1 sec intervals. A flash erase and a new flash is required.</p>"},{"location":"FAQ/#status-led-blinking","title":"Status LED blinking","text":"<p>Your device status LED blinks repeatedly when Wi-Fi and/or MQTT is not connected. If you're not using MQTT and did not configure it the status LED will still keep blinking.</p> <p>You can disable status LED blinking using: <code>Backlog LedPower 0; SetOption31 1</code></p>"},{"location":"FAQ/#my-device-randomly-switches-on-and-off-do-i-have-ghosts-in-my-house","title":"My device randomly switches on and off. Do I have ghosts in my house?","text":"<p>Most of the issues with random, or \"ghost\", switching are related to MQTT retain settings. In short, your MQTT broker is retaining a message with the POWER status of the device which gets applied on reboots. Solution here </p> <p>In some cases, adding a switch to a device causes ghost switching. In this case, you may need to add a low pass filter to dampen any spikes on the input. In the case of the Sonoff T1, a modification to change the filter capacitor on the PCB may be required.</p> <p>This short 10 minute video by TheHookUp nicely explains what it is and how to prevent it. </p> <p>Other cause can be of electrical nature. If you have connected an external switch using long wires they can pick up stray signals and cause the voltage on the GPIO to vary. Solution here </p>"},{"location":"FAQ/#cannot-find-my-device-in-modules","title":"Cannot find my device in Modules","text":"<p>If you flashed a device which is not listed in the Modules list, use Templates to configure your device. Try looking for it first in the Templates Repository.</p>"},{"location":"FAQ/#device-keeps-restarting-after-changing-config-over-mqtt","title":"Device keeps restarting after changing config over MQTT","text":"<p>If you changed configurations over MQTT, the command can fail due to a bug and the command is repeatedly sent, causing the device to restart.</p> <p>The restart is normal if you change something at the device configuration.</p> <p>You need to clear the retain messages of your HA/Broker/MQTT Server.</p> <p>Read also:</p> <ul> <li>#2140</li> <li>#2658 (comment)</li> <li>#2716</li> </ul>"},{"location":"FAQ/#tasmota-is-sending-many-status-updates-every-5-seconds","title":"Tasmota is sending many status updates every 5 seconds","text":"<p>Turn off TasmoAdmin! It is polling your device with <code>STATUS 0</code> command with a HTTP request every 5 seconds which causes the status updates and unnecessary stress load on the device. In some cases it might even interfere with normal device operation.</p>"},{"location":"FAQ/#web-interface-asks-for-password","title":"Web Interface Asks for Password","text":"<p>You modified the Web Admin password (<code>Configure Other</code>) and now you cannot access the web interface. You have set up a password for the web interface. You can login with the username <code>admin</code> and the password you entered. However, if you don't remember that password there are a few options you can try to gain access to the web interface again.</p> <ol> <li> <p>Reset the password using the <code>WebPassword</code> command.</p> </li> <li> <p>If you have serial connection to the device: Execute <code>WebPassword 0</code> using a serial terminal interface.</p> </li> <li> <p>If you have configured MQTT: Send <code>0</code> to <code>cmnd/&lt;device-topic&gt;/WebPassword</code>.  You can send it from any MQTT client. You can also use another Tasmota device using the <code>Publish</code> command - Execute <code>Publish cmnd/&lt;device-topic&gt;/WebPassword 0</code> from that device's Console.</p> </li> <li> <p>If the options above are not available:    Since Tasmota uses GET request for forms, the password may be in your browser history. Look there for entries with the name you configured for the device. For example, in the following link:</p> </li> </ol> <p><code>http://&lt;device-ip&gt;/co?t1={\"NAME\":\"Generic\"'\"GPIO\":[23'22'24'17'134'132'0'0'131'52'21'0'0]'\"FLAG\":0'\"BASE\":67}&amp;p1=SecretPassword&amp;b1=on&amp;a1=Sonoff&amp;a2=Sonoff2&amp;a3=Sonoff3&amp;a4=Sonoff4&amp;b2=0&amp;save=</code></p> <p>the <code>p1</code> parameter contains the password for the web interface (<code>SecretPassword</code> in this case).</p> <p>Note: special characters may appear as the characters' corresponding ASCII hexadecimal codes (e.g., \"{\" = '\\%7B', etc.)</p> <ol> <li> <p>If you had set up <code>WifiConfig 7</code> as your Wi-Fi fallback method (by previously executing <code>WiFiConfig</code> in the Console),  you can reset the device by booting it into Wi-Fi Manager mode. If the SSID configured in the device is not available (e.g., turn off the router), the device will fallback to that restricted Wi-Fi Manager Mode.</p> </li> <li> <p>If your device has a physical push-button, reset the firmware to the default settings as detailed here.</p> </li> <li> <p>If nothing helps, then you have to flash the firmware again using the serial interface. Be sure to erase the flash memory before uploading the binary.</p> </li> </ol>"},{"location":"FAQ/#power-monitoring-shows-wrong-values","title":"Power monitoring shows wrong values","text":"<p>If the values shown in the Web UI don't seem right and you're using a Supported Module you need to calibrate the power monitoring sensor.</p> <p>In case you're using a template you created yourself or found in our Templates Repository try the calibration method first. If the values are still wrong or unrealistic the power monitoring sensors' GPIOs are not configured correctly and you will need to find the correct GPIO assignments before proceeding.</p>"},{"location":"FAQ/#sensors-do-not-show-values","title":"Sensors do not show values","text":"<p>Make sure your sensor is properly wired and the GPIOs assigned.  Your vanilla <code>tasmota.bin</code> doesn't have complete sensor support. Make sure you've installed tasmota-sensors.bin that support the largest number of sensors. Some sensors require enabling in the code and compiling your own binary. See Firmware-Builds for a comprehensive list of supported components.</p>"},{"location":"FAQ/#timers-trigger-at-the-wrong-time","title":"Timers trigger at the wrong time","text":"<p>Tasmota devices must have a their time of day set properly in order for any timers to work properly. Check the log in the web UI Console to see if the device's time is set correctly. There are two elements to setting the time: 1. obtaining the UTC time, and, 2. local Daylight Saving Time policies.  </p> <p>There are three methods available to set the device time: 1. NTP, 2. An RTC peripheral, or 3. the <code>Time</code> command. The typical method Tasmota uses to set its time is to obtain the time from an Internet NTP server. It can also query an NTP server on its local network (e.g., a network router with an NTP service, a Raspberry Pi running the NTP daemon, the Chrony add-on in Home Assistant, etc.).  </p> <p>The time sync request is forced to <code>NTPSERVER1</code>. If can't connect, it tries <code>NTPSERVER2</code>. And finally <code>NTPSERVER3</code>. Ensure that these parameters are set appropriately and that the device can reach at least one of these time servers. You may want to consider setting up an NTP server locally. As long as the computer is able to set its time at some point from an Internet time server, this computer can serve as an NTP server for your Tasmota device(s). This can be the same computer that hosts your MQTT broker or home automation hub.  </p> <p>You must also set the <code>TimeZone</code> and Daylight Saving Time policies (<code>TimeDST</code>/<code>TimeSTD</code>).  </p> <p>If you have timers that use the sunset or sunrise times, you must set your latitude and longitude in order for these times to be calculated correctly for your location.</p>"},{"location":"FAQ/#auto-discovery-in-home-assistant-does-not-work","title":"Auto-discovery in Home Assistant does not work","text":"<p>The <code>tasmota-lite.bin</code> firmware binary (which comes packaged with Tuya-Convert) does not support auto-discovery. Please upgrade to <code>tasmota.bin</code> or a similar firmware variant that supports this feature.</p> <p>Make sure it's enabled in Tasmota it with <code>SetOption19 1</code> and you configured the  Home Assistant MQTT integration with Discovery enabled.</p>"},{"location":"FAQ/#why-is-my-changed-configuration-not-loaded","title":"Why is my changed configuration not loaded?","text":"<p>If you have flashed a precompiled binary, be aware that all the configuration made after the flash (Wi-Fi, MQTT, topics, names, rules, etc) will be lost in a factory firmware reset.</p> <p>In short: The CFG_HOLDER is the place where the config is stored on your device. The device checks if a config is saved in this CFG_HOLDER (value from the my_user_config.h) and always loads this if exists. =&gt; won't load new applied configs in your my_user_config.h</p> <p>To get the new config on your device, you need to change the CFG_HOLDER. BUT: You should always try to stay on the default CFG_HOLDER, to reach this, you need to flash two times</p> <ul> <li>change your config in the my_user_config.h or better user_config_override.h</li> <li>change the CFG_HOLDER number. +1 or -1 is enough (e.g. 0x20161208)</li> <li>flash</li> <li>change the CFG_HOLDER back to default ( 0x20161209 )</li> <li>flash again</li> </ul> <p>After this, your new config is saved in the default CFG_HOLDER on your device. </p> <p>This is necessary to avoid losing your config if you update to a new firmware by using the pre-build images or if you forget to change the CFG_HOLDER to your custom one if you build the firmware yourself.</p> <p>How CFG_HOLDER works: The config of your Tasmota is stored in an area of the flash memory (flash config area or FCA). Using a new device (where Tasmota firmware runs the first time) the FCA does not contain a Tasmota configuration so on the very first start of Tasmota it uses your settings from my_user_config.h or user_config_override.h and copy this into the FCA. To prevent the following Tasmota starts from overwriting your FCA settings again (e.g. because you changed some things using commands), the FCA will be marked by a header value indicating not to copy the values from my_user_config.h/user_config_override.h again. This header becomes the value from CFG_HOLDER.</p> <p>On every start the device compares the header of FCA with the CFG_HOLDER from your source code and only if this header value is not identical, Tasmotat will copy the data from my_user_config.h/user_config_override.h to flash settings area - this is normally only the case on a fresh device or if you has changed the CFG_HOLDER value.</p> <p>Summary: To force Tasmota to overwrite current (valid or invalid) settings in FCA with your settings from my_user_config.h/user_config_override.h you can</p> <ul> <li>change CFG_HOLDER value once, compile, reflash device (as described above). To avoid overwriting settings by new versions don't forget either</li> <li>repeat the step above using original CFG_HOLDER value</li> <li>or never forget to change CFG_HOLDER value for even all upcoming version to your value</li> <li>or use the command <code>Reset 1</code> or <code>Reset 2</code> after changes in your my_user_config.h/user_config_override.h without the need to double reflash your device and/or double change your CFG_HOLDER value:</li> <li>change values in my_user_config.h/user_config_override.h</li> <li>leave CFG_HOLDER as is</li> <li>start your device and issue command <code>Reset 1</code> or <code>Reset 2</code></li> </ul>"},{"location":"FAQ/#how-do-i-invert-the-output-of-the-green-led-on-the-sonoff-basic-so-the-led-is-on-when-the-relay-is-off","title":"How do I invert the output of the green LED on the Sonoff Basic so the LED is on when the relay is off?","text":"<p><code>LedState</code> default value is <code>1</code> (on) - Show power state on LED. The LED can be disabled completely with <code>LedState 0</code> (off).  However, there is no option to invert the output of the green LED on the Sonoff Basic.</p>"},{"location":"FAQ/#flashing","title":"Flashing","text":""},{"location":"FAQ/#cannot-enter-flash-mode","title":"Cannot enter flash mode","text":"<p>Be sure to press the button correctly, you must \"feel\" a click. If your on-device button doesn't allow you to enter flash mode or there is no GPIO0 broken out to the PCB, you can always bridge GND to GPIO0 pin directly on the chip. Search on the Internet for your chip's pinouts and use the tutorial. Be sure to keep GPIO0 grounded long enough (3-5 seconds) before disconnecting to ensure the chip has booted completely into programming mode. On devices that do not provide a GPIO0 connected button, it may be easier to leave the wired bridge in place throughout the entire flashing process (erase &amp; upload). Doing so will not create any problems for flashing the device. After the firmware is uploaded successfully, remove the bridge. This allows the device to boot normally.</p>"},{"location":"FAQ/#flashing-issues","title":"Flashing issues","text":"<ul> <li> <p>Double check if you wired the device the serial-to-USB adapter correctly. Almost every device needs RX and TX pins switched to TX and RX. See Hardware Preparation for more.</p> </li> <li> <p>Another common problem are the jumper cables used. Try another cable if you keep getting connection errors or check the cables for connectivity. Most of them are made cheaply and it happens quite often that those cables do not offer a good connection because of bad crimping or broken copper lines in them.</p> </li> <li> <p>Be sure to use a USB Data Cable and not a cheap loading cable for mobile phones for connecting the serial-to-USB adapter to your computer. If you are unsure, just try another USB cable. Data USB cables are often thicker than the normal loading cables (and more expensive).</p> </li> <li> <p>Another problem can be the difficulties in getting the ESP chip into programming mode when it boots. </p> </li> <li> <p>If the flash still fails or the progress interrupts, it could be that your computer or serial-to-USB adapter doesn't provide enough power to the device. Try another computer or use an external power supply (3.3V one). More infos about insufficient power</p> </li> <li> <p>Use the correct serial-to-USB adapter driver. Check the model of your adapter chip and get the correct driver.</p> </li> <li> <p>If the flash completes successfully, but you get a hash mismatch (esptool.py error message <code>A fatal error occurred: MD5 of file does not match data in flash!</code>) ensure that your 3.3v current is sufficient. Workarounds include using a dedicated bread board power supply or using the 3.3v output of an additional microcontroller. If using an additional power supply to power the device, be sure to use a common ground for the power supply, the device to be flashed and the serial-to-USB adapter.</p> </li> <li> <p>If esptool.py stops at \"Uploading stub...\", use --no-stub </p> </li> <li> <p>If the flash fails or the device does not operate as expected, try using the default ESP82xx boot ROM baud rate - <code>74880</code>. This is the baud rate the ESP82xx is set to by default when it boots into programming mode. It can be specified as a command line option in esptool.py (<code>-b</code>) and esptool.exe (<code>-cb</code>).</p> </li> </ul> <p>You may also want to select a serial monitor/terminal capable of setting this \"unusual\" baud rate. In Termite, type this value (<code>74880</code>) in the baud rate selection text box when configuring the port. Having the option to specify this unusual baud rate will allow you to view the ESP8266 boot ROM log while the device is booting.</p>"},{"location":"FAQ/#device-is-hot-to-the-touch","title":"Device is hot to the touch","text":"<p>Remember - NEVER EVER FLASH WITH 5V!?</p> <p>Better unpower your device and check if the wiring is correct and the voltage is on your FTDI is set to 3.3V.  If you've connected VCC to the wrong pin it might cause your device to overheat and destroy it.</p>"},{"location":"FAQ/#there-was-white-smoke-and-the-device-does-not-work-anymore","title":"There was white smoke and the device does not work anymore!","text":"<p>Yes, you've released the fabled \"white smoke\", the mysterious substance all electronic devices work on. </p> <p>In the immortal words of Doctor Bones: It's dead Jim!</p>"},{"location":"FAQ/#sonoff-4ch-v2-sonoff-dual-v2-will-not-flash","title":"Sonoff 4CH V2 / Sonoff Dual V2 will not flash","text":"<p>Testing with two different (fairly new) FTDI boards and two Sonoff 4CH v2.0 and the Sonoff Dual v2.0 boards I found that I was getting errors uploading sketches i.e. \"warning: espcomm_sync failed\" basically a lack of communication between the two devices.</p> <p>I found that the problem in both Sonoff's was that instead of the FTDI Sonoff cross-over TX-&gt;RX and RX-&gt;TX I had to do TX-&gt;TX RX-&gt;RX this then allowed me to upload the sketch.</p>"},{"location":"FAQ/#flashing-fails-on-macos-high-sierra","title":"Flashing fails on MacOS High Sierra","text":"<p>Related to issue #957.</p> <p>Solution:</p> <ol> <li>Install the VCP drivers for Mac from the FTDI website</li> <li>After install, reboot (it does not work if you do not reboot).</li> <li>After reboot, plug the FTDI USB/serial converter. Accept the security alert from MacOS.</li> <li>Restart the flash process. It works!</li> </ol>"},{"location":"FAQ/#miscellaneous","title":"Miscellaneous","text":""},{"location":"FAQ/#can-you-add-this-unsupported-sensor-to-tasmota","title":"Can you add this unsupported sensor to Tasmota","text":"<p>Short answer: NO!</p> <p>Long answer: There is not enough time in our coders lives to take requests, if you can code a driver for that sensor and submit a PR it will be considered, otherwise you can only wait for someone else to do it.</p>"},{"location":"FAQ/#available-characters-for-hostname","title":"Available Characters for HOSTNAME","text":"<ul> <li>24 chars max</li> <li>only a..z A..Z 0..9 '-'</li> <li>no '-' as last char</li> </ul> <p>Notice: Hostnames containing <code>%</code> will reset to <code>MQTT_TOPIC-&lt;4digits&gt;</code>. It is not intended to use internal Tasmota variables here.</p> <p>RFC952 ASSUMPTIONS  </p> <ol> <li>A \"name\" (Net, Host, Gateway, or Domain name) is a text string up    to 24 characters drawn from the alphabet (A-Z), digits (0-9), minus    sign (-), and period (.).  Note that periods are only allowed when    they serve to delimit components of \"domain style names\". (See    RFC-921, \"Domain Name System Implementation Schedule\", for    background).  No blank or space characters are permitted as part of a    name. No distinction is made between upper and lower case.  The first    character must be an alpha character.  The last character must not be    a minus sign or period.  A host which serves as a GATEWAY should have    \"-GATEWAY\" or \"-GW\" as part of its name.  Hosts which do not serve as    Internet gateways should not use \"-GATEWAY\" and \"-GW\" as part of    their names. A host which is a TAC should have \"-TAC\" as the last    part of its host name, if it is a DoD host.  Single character names    or nicknames are not allowed.  </li> </ol>"},{"location":"FAQ/#flash-memory-considerations","title":"Flash Memory Considerations","text":"<ul> <li> <p>To stop saving parameter changes to Flash or Spiffs use command <code>SaveData off</code>.</p> </li> <li> <p>To stop saving power changes only to Flash or Spiffs use command <code>SetOption0 off</code>. This will disable the relay from returning to the same state after power on UNLESS you use the MQTT retain flag in which case the MQTT broker will send the last known MQTT state on restart or power on. The command <code>ButtonRetain on</code> will configure the button to send a MQTT command with Topic and the MQTT retain flag set.</p> </li> </ul>"},{"location":"FAQ/#what-is-an-arduino-core","title":"What is an Arduino Core","text":"<p>Arduino Core (open source) are the core libraries for ESP8266/ESP8285 chips to make them Arduino Framework Compatible. This Core is programmed on top of the Espressif SDK (closed source). Tasmota is only using the core and does not maintain it or can help in solving issues with it.</p> <p>You can see the Arduino Core Version and the Espressif SDK Version on the Tasmota WebUI under the Information Menu entry.</p>"},{"location":"FAQ/#i-cannot-find-an-answer-here","title":"I Cannot Find An Answer Here!","text":"<p>Check the Troubleshooting section or join Discord, Matrix, Telegram, Reddit or Google Groups for assistance from other Tasmota users.</p>"},{"location":"Features/","title":"Introduction","text":"<p>Tasmota contains myriad features and supported peripherals (sensors, controllers and similar). Due to the flash size and memory constraints of ESP not all features can be included in precompiled release binaries.</p> <p>To enable some of the features you have to compile your own binary. Features with such requirement have a warning with instructions on how to enable them.</p>"},{"location":"Firmware-Builds/","title":"Firmware Builds","text":"<p>There are many available features programmed into Tasmota. Not all devices need all of the available features. ESP based devices have a limited amount of memory available. To ensure that there is enough memory available to flash the firmware, it is best to keep the total size as small as possible, and definitely under 625K total to ensure OTA updates are possible. For this reason, Tasmota makes available the ability to create different firmware binary files to suit each particular device's requirements (e.g., sensors) and each application's needs (e.g., Rules, Timers, etc.). Once features such as support for sensors, rules, timers, etc. is compiled into the firmware binary, the features themselves can be configured at run-time, or, for some features, configured at compile time as well.</p> <p>Many times one just needs to download a pre-compiled binary and perform the necessary run-time configuration. It is not necessary to compile your own binary if these pre-compiled builds meet your needs. These available files provide a simpler approach to get up and going with Tasmota quickly.</p> <p>Release binaries are from the official OTA server. Firmware built from development branch code is available from the development OTA server.</p> <p>Features that are not available in any official release build have to be enabled in source code and compiled yourself. Read more about compiling your own build.</p> <p>Tip</p> <p>You might find some of the features you need included in one of our unofficial experimental builds over at https://github.com/tasmota/install.</p>"},{"location":"Firmware-Builds/#firmware-variants","title":"Firmware Variants","text":"<ul> <li>tasmota.bin  supports most features. THIS IS THE RECOMMENDED BINARY tasmota-BG.bin to tasmota-TW.bin the same features as tasmota.bin with localized language support. (Note: tasmota-UK.bin is for the Ukrainian language)</li> <li>tasmota-sensors.bin enables many features as tasmota.bin - not all - and includes support for connectable sensors</li> <li>tasmota-lite.bin  has a stripped down feature set. This reduces the required CPU cycles in order to reduce power draw to allow devices with a weak power supply to run reliably.</li> </ul> <p>Note</p> <p>This is similar to the pre-compiled Tasmota binary that comes bundled with Tuya-Convert. If you used Tuya-Convert to flash your device, it is strongly recommended to update to <code>tasmota.bin</code>. Otherwise some crucial features (e.g., energy monitoring, auto-discovery, etc.) will not work.</p> <ul> <li>tasmota-minimal.bin is a specialised build to subsequently allow OTA uploads. This version should NOT be used for initial installation!</li> <li>tasmota-knx.bin includes KNX support but omits some features. If you need additional features, compile your own firmware (e.g., Gitpod  ).</li> <li>tasmota-display.bin  built for connecting displays but omits some features such as energy monitoring. If you need additional features, compile your own firmware (e.g., Gitpod  ).</li> <li>tasmota-ir.bin provides almost all <code>IRremoteESP8266</code> protocols. If you need additional features, compile your own firmware (e.g., Gitpod) to compile <code>ircustom</code>.</li> <li>tasmota-zbbridge.bin built specifically for Sonoff Zigbee Bridge device.</li> </ul>"},{"location":"Firmware-Builds/#available-features-and-sensors-for-each-build","title":"Available Features and Sensors for Each Build","text":""},{"location":"For-Developers/","title":"For Developers","text":""},{"location":"For-Developers/#information-for-tool-developers","title":"Information for tool developers:","text":"<ul> <li>API</li> <li>Sensor API</li> <li>JSON Status Responses </li> <li>Berry Scripting Language</li> </ul>"},{"location":"For-Developers/#tasmota-forks-with-added-features","title":"Tasmota forks with added features","text":"<ul> <li>Time Proportioned Output Fork </li> </ul>"},{"location":"GPIO-Conversion/","title":"GPIO Conversion","text":"<p>GPIO functions define the action being taken by a device connected to it's pin. The current GPIO function configuration supports 216 GPIO functions like Relay1 (21) or Inverted Button1 (122).</p> <p>The current implementation supports up to 250 functions as it is confined to 8-bits uint8_t arrays.</p> <p>As more devices need to be connected it would become impossible to have them addressed with this 8-bit scheme. Another problem is that the current implementation would need GUI drop down boxes with up to 250 items which is hard to use. Also user templates still need to be able to address all possible GPIO functions.</p> <p>To solve this issue Theo needed to change from 8-bit uint8_t to 16-bit uint16_t arrays. Without further action this would result in even more entries in the GUI drop down boxes and made adding more relays, buttons, switches, etc also very cumbersome. As the ESP32 would need to be supported too a challenge lay ahead.</p> <p>Theo decided for the following option where every GPIO function type (relays, buttons, switches) would have an id allowing for 32 devices. So every GPIO function would be offset by 32 (or 5-bits). These 5-bits can be used in the future to easily expand current max values like 4 buttons or 8 relays to max 32. How this works could have been seen in the ESP32 implementation. The GUI now contains two drop down boxes, one for the GPIO function (Relay) and one for the function index (1 to 8).</p> <p>For the ESP8266 the current maxed GPIO functions of 216 will be fixed an any new device will be using the GPIO addressing scheme. To make the transition transparent, a table is used to convert current 216 GPIO 8-bit function numbers to new 16-bit function numbers. As both are offset from 0 there will be some duplication in numbering so the only way to distinguish them by external programs like TDM is by checking the Tasmota version number: below 9.0 will be 8-bit GPIO and starting with development version 9.0.0.1 it will be 16-bit GPIO.</p> <p>See below how the numbers are being converted. The first number is 8-bit GPIO, the second the 16-bit GPIO.</p>"},{"location":"GPIO-Conversion/#gpio-conversion","title":"GPIO Conversion","text":"Old GPIO New GPIO Name Description 255 1 User User 0 0 None Not used 1 1184 DHT11 DHT11 sensor 2 1216 AM2301 AM230X, DHT21 and DHT22 sensor 3 1248 SI7021 Only for Sonoff Si7021, not the i2c version 4 1312 DS18x20 Dallas Semiconductor DS18b20 1-Wire temperature sensor 5 608 I2C SCL I2C serial clock pin, used with any I2C component (sensors, displays, ...) 6 640 I2C SDA I2C serial data pin, used with any I2C component (sensors, displays, ...) 7 1376 WS2812 Addressable LEDs such as WS281X or Neopixel 8 1056 IRsend IR Transmitter LED 9 160 Switch1 Switch 10 161 Switch2 Switch 11 162 Switch3 Switch 12 163 Switch4 Switch 13 164 Switch5 Switch 14 165 Switch6 Switch 15 166 Switch7 Switch 16 167 Switch8 Switch 17 32 Button1 Button 18 33 Button2 Button 19 34 Button3 Button 20 35 Button4 Button 21 224 Relay1 Relay 22 225 Relay2 Relay 23 226 Relay3 Relay 24 227 Relay4 Relay 25 228 Relay5 Relay 26 229 Relay6 Relay 27 230 Relay7 Relay 28 231 Relay8 Relay 29 256 Relay1i Relay inverted 30 257 Relay2i Relay inverted 31 258 Relay3i Relay inverted 32 259 Relay4i Relay inverted 33 260 Relay5i Relay inverted 34 261 Relay6i Relay inverted 35 262 Relay7i Relay inverted 36 263 Relay8i Relay inverted 37 416 PWM1 Pulse Width Modulated Output 38 417 PWM2 Pulse Width Modulated Output 39 418 PWM3 Pulse Width Modulated Output 40 419 PWM4 Pulse Width Modulated Output 41 420 PWM5 Pulse Width Modulated Output 42 352 Counter1 Counter Input 43 353 Counter2 Counter Input 44 354 Counter3 Counter Input 45 355 Counter4 Counter Input 46 448 PWM1i Pulse Width Modulated inverted Output 47 449 PWM2i Pulse Width Modulated inverted Output 48 450 PWM3i Pulse Width Modulated inverted Output 49 451 PWM4i Pulse Width Modulated inverted Output 50 452 PWM5i Pulse Width Modulated inverted Output 51 1088 IRrecv IR Receiver Input (for example TSOP1838) 52 288 Led1 LED 53 289 Led2 LED 54 290 Led3 LED 55 291 Led4 LED 56 320 Led1i Inverted LED - default state ON 57 321 Led2i Inverted LED - default state ON 58 322 Led3i Inverted LED - default state ON 59 323 Led4i Inverted LED - default state ON 60 1408 MHZ Rx MHZ 19 CO<sub>2</sub> Sensor 61 1440 MHZ Tx MHZ 19 CO<sub>2</sub> Sensor 62 1472 PZEM0XX Tx Peacefair Pzem-0XX Power Meter Tx pin 63 1504 PZEM004 Rx Peacefair Pzem-004 Power Meter Rx pin 64 1600 SAir Rx Sensor Senseair 65 1632 SAir Tx Sensor Senseair 66 768 SPI CS SPI Interface (ePaper Display) 67 800 SPI DC SPI Interface (ePaper Display) 68 992 BkLight Backlight (Display) 69 1696 PMS5003 PMS5003 Air Quality Sensor 70 1760 SDS0X1 Rx Nova Fitness SDS011 Laser Dust Sensor Rx pin 71 1792 SerBr Rx Serial Bridge Receive 72 1824 SerBr Tx Serial Bridge Transmit 73 1856 SR04 Tri Ultrasonic Sensor HC-SR04 Trigger pin 74 1888 SR04 Ech Ultrasonic Sensor HC-SR04 Echo pin 75 1920 SDMx20 Tx SDMx20-Modbus Multifunction Power Analyser Tx pin 76 1952 SDMx20 Rx SDMx20-Modbus Multifunction Power Analyser Rx pin 77 1984 SDM630 Tx SDM630-Modbus Multifunction Power Analyser Tx pin 78 2016 SDM630 Rx SDM630-Modbus Multifunction Power Analyser Rx pin 79 2048 TM16 CLK TM1638 Switch Module 80 2080 TM16 DIO TM1638 Switch Module 81 2112 TM16 STB TM1638 Switch Module 82 192 Switch1n Switch, no pullup resistor 83 193 Switch2n Switch, no pullup resistor 84 194 Switch3n Switch, no pullup resistor 85 195 Switch4n Switch, no pullup resistor 86 196 Switch5n Switch, no pullup resistor 87 197 Switch6n Switch, no pullup resistor 88 198 Switch7n Switch, no pullup resistor 89 199 Switch8n Switch, no pullup resistor 90 64 Button1n Button, no pullup resistor 91 65 Button2n Button, no pullup resistor 92 66 Button3n Button, no pullup resistor 93 67 Button4n Button, no pullup resistor 94 384 Counter1n Counter sensor, no pullup resistor 95 385 Counter2n Counter sensor, no pullup resistor 96 386 Counter3n Counter sensor, no pullup resistor 97 387 Counter4n Counter sensor, no pullup resistor 98 1536 PZEM016 Rx Peacefair Pzem-016 Power Meter Rx pin 99 1568 PZEM017 Rx Peacefair Pzem-017 Power Meter Rx pin 100 2144 MP3 Player DF MP3 Player mini (Input) 101 1728 SDS0X1 Tx Nova Fitness SDS011 Laser Dust Sensor Tx pin 102 2176 HX711 SCK HX711 weight sensor serial clock input 103 2208 HX711 DAT HX711 weight sensor data output 104 2240 TX20 TX20 Wind Sensor Input (Tx from sensor) 105 1120 RFSend RF Emitter (433Mhz module needed; Requires self-compile with RF_SENSOR and USE_RC_SWITCH) 106 1152 RFrecv RF Receiver (433Mhz module needed; Requires self-compile with RF_SENSOR and USE_RC_SWITCH) 107 2272 Tuya Tx Tuya Transfer pin 108 2304 Tuya Rx Tuya Receive pin 109 2336 MGC3130 Xfr MGC3130 E-field Xfr pin 110 2368 MGC3130 Rst MGC3130 E-field Reset pin 111 832 SSPI MISO Software SPI MISO (Display) 112 864 SSPI MOSI Software SPI MOSI (Display) 113 896 SSPI SCLK Software SPI SCLK (Display) 114 928 SSPI CS Software SPI CS (Display) 115 960 SSPI DC Software SPI DC (Display) 116 2400 RF Sensor Theo Arendst RF433 Sensor 117 2432 AZ Rx AZ 7798 CO<sub>2</sub> datalogger 118 2464 AZ Tx AZ 7798 CO<sub>2</sub> datalogger 119 2496 MX31855 CS MAX31855 Thermocouple Sensor Chip Select pin 120 2528 MX31855 CLK MAX31855 Thermocouple Sensor Serial Clock pin 121 2560 MX31855 DO MAX31855 Thermocouple Sensor Digital Output pin 122 96 Button1i Button inverted 123 97 Button2i Button inverted 124 98 Button3i Button inverted 125 99 Button4i Button inverted 126 128 Button1in Button inverted, no pullup resistor 127 129 Button2in Button inverted, no pullup resistor 128 130 Button3in Button inverted, no pullup resistor 129 131 Button4in Button inverted, no pullup resistor 130 2592 HLWBL SEL Energy Monitoring (for example Pow) 131 2624 HLWBL SELi Energy Monitoring (for example Pow) 132 2656 HLWBL CF1 Energy Monitoring (for example Pow) 133 2688 HLW8012 CF HLW8012 Single Phase Energy Monitor Chip CF pin 134 2720 BL0937 CF BL0937 Single Phase Energy Monitor Chip CF pin 135 2752 MCP39F5 Tx Energy Monitoring (for example Shelly2) 136 2784 MCP39F5 Rx Energy Monitoring (for example Shelly2) 137 2816 MCP39F5 Rst Energy Monitoring (for example Shelly2) 138 2848 PN532 Tx PN532 RFID/NFC Reader Tx pin 139 2880 PN532 Rx PN532 RFID/NFC Reader Rx pin 140 2912 SM16716 CLK SM16716 Pixel LED Serial Clock pin 141 2944 SM16716 DAT SM16716 Pixel LED Data pin 142 2976 SM16716 PWR SM16716 Pixel LED Power pin 143 3008 MY92x1 DI Light Bulb with MY92x controller 144 3040 MY92x1 DCKI Light Bulb with MY92x controller 145 3072 CSE7766 Tx CSE7766 Single Phase Energy Monitor Chip Tx pin 146 3104 CSE7766 Rx CSE7766 Single Phase Energy Monitor Chip Rx pin 147 3136 ALux IrRcv AriLux RGB Controller IR receive (Input) 148 3200 Serial Tx Serial Transfer pin 149 3232 Serial Rx Serial Receive pin 150 3264 Rotary1a Rotary Encoder (Mi Desk Lamp) 151 3296 Rotary1b Rotary Encoder (Mi Desk Lamp) 152 3265 Rotary2a Rotary Encoder (Mi Desk Lamp) 153 3297 Rotary2b Rotary Encoder (Mi Desk Lamp) 154 3392 HRE CLOCK Clock/Power line for HR-E Water Meter 155 3424 HRE DATA Data line for HR-E Water Meter 156 3456 ADE7953_IRQ ADE7953 IRQ 157 544 LedLink Device Status LED 158 576 LedLinki Device Status LED, inverted 159 3168 ALux IrSel For AriLux devices - switches between IR/RF mode 160 480 Buzzer Sonoff iFan03 Buzzer 161 512 Buzzeri Sonoff iFan03 Buzzer inverted 162 1024 OLED Reset OLED Display Reset 163 3488 SolaxX1 Tx Solax Inverter Tx pin 164 3520 SolaxX1 Rx Solax Inverter Rx pin 165 3552 Zigbee Tx Zigbee Serial interface Tx 166 3584 Zigbee Rx Zigbee Serial interface Rx 167 3616 RDM6300 Rx RDM6300 RX 168 3648 iBeacon Tx HM17 iBeacon Tx 169 3680 iBeacon Rx HM17 iBeacon Rx 170 3712 A4988 DIR A4988 Motor Direction 171 3744 A4988 STP A4988 Step motor 172 3776 A4988 ENA A4988 Enable motor 173 3808 A4988 MS1 A4988 Microstep increment select pin1 174 3809 A4988 MS2 A4988 Microstep increment select pin2 175 3810 A4988 MS3 A4988 Microstep increment select pin3 176 3904 DDS238-2 Tx DDS2382 Serial interface Tx 177 3936 DDS238-2 Rx DDS2382 Serial interface Rx 178 3968 DDSU666 Tx DDSU666 Serial interface Tx 179 4000 DDSU666 Rx DDSU666 Serial interface Rx 180 4032 SM2135 CLK SM2135 Clk 181 4064 SM2135 DAT SM2135 Dat 182 4096 DeepSleep DeepSleep wake switch 183 4128 EXS Enable EXS Dimmer MCU Enable 184 4160 Slave TX TasmotaClient TX 185 4192 Slave RX TasmotaClient RX 186 4224 Slave RST TasmotaClient Reset Pin 187 4256 Slave RSTi TasmotaClient Reset Inverted 188 4288 HPMA RX Honeywell HPMA115S0 Serial Rx 189 4320 HPMA TX Honeywell HPMA115S0 Serial Tx 190 4352 GPS RX GPS Serial Tx 191 4384 GPS TX GPS Serial Tx 192 1344 DSB OUT Pseudo Single wire DS18B20 or DS18S20 193 1280 DHT11 OUT Pseudo Single wire DHT11, DHT21, DHT22, AM2301, AM2302, AM2321 194 4416 HM10 RX HM10-BLE-Mijia-bridge Serial 195 4448 HM10 TX HM10-BLE-Mijia-bridge Serial 196 4480 LE01MR RX F&amp;F LE-01MR Energy Meter Serial 197 4512 LE01MR TX F&amp;F LE-01MR Energy Meter Serial 198 4544 CC1101 GDO0 CC1101 RX Pin 199 4576 CC1101 GDO2 CC1101 TX Pin 200 4608 HRXL RX Data from MaxBotix HRXL sonar range sensor 201 4640 MOODL TX ElectriQ iQ-wifiMOODL Serial TX 202 4672 AS3935 Lightning Detector Interrupt Pin 203 1664 PMS5003 TX Plantower PMS5003 Serial interface 204 4928 Boiler OT Rx OpenTherm Boiler RX pin 205 4960 Boiler OT Tx OpenTherm Boiler TX pin 206 4992 Windmeter Speed WindMeter speed counter pin 207 5056 BL0940 RX BL0940 serial interface 208 5088 TCP TX TCP Serial bridge 209 5120 TCP RX TCP Serial bridge 210 5152 TELEINFO RX Teleinfo serial interface 211 5184 TELEINFO Enable Teleinfo Enable PIN 212 5216 LMT01 LMT01 input counting pin 213 5248 IEM3000 TX IEM3000 Serial interface 214 5280 IEM3000 RX IEM3000 Serial interface 215 5312 Zigbee RST Zigbee reset 216 5344 DYP Rx DYP-ME007 Rx pin"},{"location":"GPIO-Conversion/#adc-conversion","title":"ADC Conversion","text":"Old ADC New ADC Option WebUI display MQTT message 0 0 None none none 1 4704 Analog Analog0 %value% {\"A0\":%value%} 2 4736 Temperature Temperature %value% \u00b0C (\u00b0F) {\"Temperature\":%value%},\"TempUnit\":\"C\"} 3 4768 Light Illuminance %value% lux {\"Illuminance\":%value%} 4 4800 Button none none 5 4832 Buttoni none none 6 4864 Range Range %value% {\"Range\":%value%} 7 4896 CT Power Voltage 230 V Current %value A Power %value W Energy Total %value kWh {\"Energy\":%value,\"Power\":%value,\"Voltage\":230,\"Current\":%value} 8 3328 Joystick none {\"ANALOG\":{\"Joy1\":%value%}"},{"location":"GPS-NTP-server/","title":"GPS-based NTP-server (Serial)","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_GPS\n#define USE_GPS                                  // Add support for GPS and NTP Server for becoming Stratus 1 Time Source (+3k1 code, +132 bytes RAM)\n  #define USE_FLOG                               // Add support for GPS logging in OTA's Flash (Experimental) (+2k9 code, +8 bytes RAM)\n#endif\n</code></pre></p> <p>The foremost reason for the inclusion of this driver was to have a network unrelated time source, but besides this location data is provided  too.  </p> <p>Only u-blox-devices are supported</p> <p>The UBX binary protocol was chosen, because it is very memory efficient and all the needed data can be read without further parsing.  The generic NMEA-standard is NOT supported!</p> <p>The driver is tested on a NEO-6m and a Beitian-220. Series 7 should work too. These modules are quite cheap, starting at about 3.50\u20ac for the NEO-6m.  </p>"},{"location":"GPS-NTP-server/#features","title":"Features:","text":"<ul> <li>simplified NTP-Server</li> <li>sets system time automatically and Settings.latitude and Settings.longitude via command</li> <li>get position and time data</li> <li>can log position data with timestamp to flash with a small memory footprint of only 12 Bytes per record (!!EXPERIMENTAL!!)</li> <li>constructs a GPX-file for download of this data</li> <li>Web-UI and console command interface</li> </ul>"},{"location":"GPS-NTP-server/#connecting-the-gps-device-to-a-wemos-d1-mini","title":"Connecting the GPS-device to a Wemos D1 mini","text":"Wemos D1 Mini GPS VCC +3.3V Vin GND GND TX Rx RX Tx"},{"location":"GPS-NTP-server/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page, select the following for Wemos D1 mini: 1. Module Type: 18 Generic 2. TX GPIO1 Serial Out: GPX_TX 3. RX GPIO3 Serial In: GPX_RX</p> <p>No further installation steps needed. To get more debug information compile it with option \"DEBUG_TASMOTA_SENSOR\". The driver expects the device to be configured for 9600 baud, which is the default for most of these sensors. If necessary the configuration can be changed with the freely available \"u-center\"-software, which is windows-only but is reported to run quite well with WINE and can be confirmed to work with CrossOver on macOs Catalina.  </p>"},{"location":"GPS-NTP-server/#ntp-server","title":"NTP-Server","text":"<p>Simply start the server with 'sensor60 9'.</p>"},{"location":"GPS-NTP-server/#flash-log","title":"Flash-Log","text":"<p>This is highly experimental feature, which uses the OTA-partition to log position data.  </p> <p>!! \u26a0\ufe0f FOR OBVIOUS REASONS THIS WILL SHORTEN THE LIFE OF THE FLASH MEMORY AND SHOULD BE USED WISELY \u26a0\ufe0f !!  </p> <p>After the first recording, a download-link will appear in the web interface. By clicking on it, a GPX-file will be created on-the fly for download. All recorded data is lost after each OTA-update.  </p>"},{"location":"GPS-NTP-server/#commands","title":"Commands","text":"Command Description Sensor60 0 write to all available sectors, then restart and overwrite the older ones Sensor60 1 write to all available sectors, then restart and overwrite the older ones Sensor60 2 filter out horizontal drift noise Sensor60 3 turn off noise filter Sensor60 4 start recording, new data will be appended Sensor60 5 start new recording, old data will lost Sensor60 6 stop recording, download link will be visible in Web-UI Sensor60 7 send mqtt on new position TELE -&gt; consider to set TELE to a very high value Sensor60 8 only TELE message Sensor60 9 start NTP-Server Sensor60 10 deactivate NTP-Server Sensor60 11 force update of Tasmota-system-UTC with every new GPS-time-message Sensor60 12 do NOT update of Tasmota-system-UTC with every new GPS-time-message Sensor60 13 set latitude and longitude in settings Sensor60 14 open virtual serial port over TCP, usable for u-centertcp://ip-address:port (default port 1234)\u26a0\ufe0f misconfiguration via u-center can virtually brick the device \u26a0\ufe0f Sensor60 15 pause virtual serial port over TCP  (connection stays active in the background)"},{"location":"Getting-Started/","title":"Getting Started","text":""},{"location":"Getting-Started/#prerequisites","title":"Prerequisites","text":""},{"location":"Getting-Started/#needed-hardware","title":"Needed Hardware","text":""},{"location":"Getting-Started/#esp-device","title":"ESP Device","text":"<p>Every Espressif ESP8266, ESP8285, ESP32, ESP32-S or ESP32-C3 chipset based device can be flashed with Tasmota. The term ESP refers to any of them.</p>"},{"location":"Getting-Started/#serial-programmer","title":"Serial Programmer","text":"<p>The power supplied to the device is one of the most important elements for both flashing the device and for stable operation. You must ensure that the device receives sufficient power (current AND appropriate voltage level) to properly flash the firmware on the device.</p> <ul> <li>RECOMMENDED CH340G is the most reliable and the cheapest one to boot (CH340G, Sparkfun, Soldered Connect, CH340N with AMS1117). </li> <li>RECOMMENDED VoltLink - USB to serial adapter board based on the popular CP2102N chip with built-in ESP auto-reset circuitry and a 500mA voltage regulator</li> <li>CP2102 or PL2303 - works with certain devices, but using an external 3.3V supply might be necessary. Not recommended for beginners!</li> <li>NodeMCU You can also use a NodeMCU (or similar) as a reliable serial programmer if you disable the onboard ESP by bridging GND to the RST or EN pin, and connect TX and RX straight to another ESP82xx instead of crossed.</li> </ul> <p>Don't forget to install drivers for your serial programmer.</p> <p>Danger</p> <p>Some adapters can be switched between 3.3V and 5V for the data pins, but still provide 5V on the power pin which will irreparably destroy your device.  You MUST make sure the data (RX and TX) and VCC pins are set for 3.3V. </p> <p>Many serial programmers do not have a voltage regulator on board like the pictured ones. The ESP requires at least 150mA, many 3.3V serial programmers cannot supply this much current as many serial programming tasks do not require a large amount of power.</p> <p>When using an external 3.3V supply, ensure the ground (GND) of both are connected together, this ensures a common ground. A PC power supply can be a source for 3.3V DC power.</p> <p>Devices with an USB upload port typically have a serial programmer built in, such as NodeMCU, D1 mini or M5Stack products.</p>"},{"location":"Getting-Started/#soldering-tools","title":"Soldering Tools","text":"<p>To solder you'll of course need a soldering iron, soldering tin and some flux. If you're new to soldering check out some soldering tutorial videos while you're at it.</p> <p>If you're intimidated by soldering there are 3D printed jigs available for different modules and devices. At worst, you could get away with holding the headers tightly with jumper wires in pin holes during flashing but it is not a foolproof process and flashing might fail.</p>"},{"location":"Getting-Started/#jumper-wires","title":"Jumper Wires","text":"<p>You could use any kind of wire but jumper wires (also called DuPont wires) are more practical than soldering and desoldering.</p>"},{"location":"Getting-Started/#pin-headers","title":"Pin Headers","text":"<p>Pin headers come in male or female version. Choose according to your jumper wire connectors.</p>"},{"location":"Getting-Started/#computer-with-linux-windows-or-macos","title":"Computer with Linux, Windows or MacOS","text":"<p>You need a computer with a USB port to upload the firmware to your device and configure it.</p>"},{"location":"Getting-Started/#smartphone","title":"Smartphone","text":"<p>Tasmota installed from a precompiled binary needs to be configured to work with your Wi-Fi network before you can access the Tasmota web UI. This is usually done by connecting to a Tasmota Wi-Fi Access Point with your smartphone (or tablet or computer with Wi-Fi). </p>"},{"location":"Getting-Started/#needed-software","title":"Needed Software","text":""},{"location":"Getting-Started/#tasmota-firmware-binary","title":"Tasmota Firmware Binary","text":"<p>Download a Tasmota firmware binary file (.bin). If you're not sure which binary is the right one for you just start with <code>tasmota.bin</code> or consult the builds table to see which features you need. </p> <p>Official release binaries can be downloaded from firmware server. </p> <p>Latest development branch binaries are available only from our OTA server. The latest merged development code is compiled hourly. </p>"},{"location":"Getting-Started/#flashing-tool","title":"Flashing Tool","text":"<ul> <li>Tasmota Web Installer - flash Tasmota using a Chrome based browser for ESP82XX and ESP32</li> <li>Tasmotizer - flashing and firmware download tool for ESP82XX only. (Windows, Linux or Mac) </li> <li>ESP-Flasher - GUI flasher for Tasmota based on esptool.py for ESP82XX and ESP32. (Windows, Linux or Mac)</li> <li>Esptool.py - the official flashing tool from Espressif for ESP82XX and ESP32.</li> </ul> Compiling Tools (optional) <p>If you want to modify the code or default settings and compile your own Tasmota firmware.</p>"},{"location":"Getting-Started/#mqtt-knowledge","title":"MQTT Knowledge","text":"<p>Tasmota is designed to be controlled and communicate via MQTT. To use it to its fullest potential you need an MQTT broker. </p> <p>Read our article on MQTT to learn why it is essential in Tasmota.</p>"},{"location":"Getting-Started/#hardware-preparation","title":"Hardware Preparation","text":"<p>We need to connect to the serial programming interface of the ESP chip. This is done by connecting our serial-to-USB converter TX and RX pins to the ESP RX and TX pins and powering the chip with the 3.3V and GND pins.</p> <p>In most cases those pins are available on the PCB in the form of pin holes or solder pads but pin headers or jumper wires need to be soldered or otherwise applied. In some cases you will need to solder wires directly on the chip's pins which requires some experience and good soldering equipment.</p> <p>DO NOT CONNECT DEVICES TO MAINS AC POWER WHILE THE COVER IS OPEN AND CIRCUIT BOARD IS EXPOSED!!!</p> <p></p> <p>NEVER TRY TO FLASH WHILE YOUR DEVICE IS CONNECTED TO MAINS POWER!!!</p> <p>YOU CAN BE ELECTROCUTED IF YOU DO NOT KNOW WHAT YOU ARE DOING!</p> <p>If you are not careful, your own health will be in danger. Shorting your serial interface with mains AC power will fry your device and serial adapter and will also harm or destroy your computer. It is important to always have all mains power cables disconnected from the device while being connected via serial or even while the case of the device is opened.</p>"},{"location":"Getting-Started/#serial-connection","title":"Serial Connection","text":"<p>Each device has its pins labelled differently. If the labelling isn't visible on the PCB please refer to the devices flashing guide or search the Internet for correct pin locations. Device specific instructions and restrictions are documented in the Tasmota Supported Devices Repository. Pinouts for commonly used Wi-Fi modules are found here</p> <p>When you have identified pins on your device, connect wires according to the table:</p> Serial adapter ESP device 3V3 3V3 or VCC TX RX RX TX GND GND <p>Note that TX from your adapter goes to RX on the ESP device and RX from adapter goes to TX on the device! </p>"},{"location":"Getting-Started/#programming-mode","title":"Programming Mode","text":"<p>ESP needs to be put into programming mode or flash mode before the firmware can be uploaded. This is done by connecting GPIO0 pin to GND while the chip is booting. </p> <p>On many devices the installed control button is connected to GPIO0 and GND, making entering Programming Mode easy. On others you will need to bridge the pins on the PCB or directly on the chip with a jumper wire. GPIO0 locations for popular modules can be found in Pinouts!</p> <p>Device specific instructions are documented in Tasmota Supported Devices Repository.</p> <p>To put the ESP into Programming Mode:</p> <ol> <li>Disconnect serial programmer and power</li> <li>Bridge GPIO0 and GND (by pressing the on-board button or connection with a wire)</li> <li>Connect the serial programmer to your computer</li> <li>After a few seconds disconnect GPIO0 from GND (release button or remove the wire connection). On devices that do not provide the GPIO0 connected button, it may be easier to leave the wired bridge in place throughout the entire flashing process (erase &amp; upload). Doing so will not create any problems. After the firmware is uploaded successfully, remove the bridge. This allows the device to boot normally.</li> </ol> esptool.py programming mode test <p>You can test whether your device is in Programming Mode by attempting to read information from the ESP82xx chip. This requires <code>esptool.py</code>. Instructions on installing and using <code>esptool</code> are provided below. For example (<code>COM5</code> will be your COM port):  </p> <ul> <li><code>esptool.py -p COM5 read_mac</code> (It should read the MAC address. It may fail afterwards during Uploading and running a \"stub\". This is normal.)</li> <li><code>esptool.py -p COM5 flash_id</code></li> </ul> <p>If everything went well, you are now in Programming Mode and ready to continue with flashing. If the flashing process is unable to start, disconnect the device and retry the steps.</p>"},{"location":"Getting-Started/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Wire connections and solder joints - Double check all connections and also check for solder overflow.</li> <li>Use a USB data cable - Some USB cables are for charging only and do not connect the data lines needed to load the firmware onto the device.</li> <li>Insufficient power delivered over the serial programmer. This leads to flashing failures or corrupted flash altogether. Supply more power with a separate 3.3V power supply or get an adapter with a better power supply. Be sure all DC voltages use the same GND line.</li> <li>Recheck your serial programmer so to ensure that it supplies 3.3V voltage and NOT 5V. 5V will damage the ESP chip!</li> <li>Releasing GPIO0 button/wire before booting is finished - It is safe to leave GPIO0 connected to GND during the entire programming process (erase &amp; upload). Just be sure to remove the GPIO0 to GND bridge before booting the device for regular operation.</li> <li>Make sure that the RX pin is connected to the TX pin between the serial adapter and your ESP device, and vice versa. Note: some devices can have the TX and RX pins labelled in reverse. In that case connect TX to TX and RX to RX pins of your adapter. </li> <li>Erase the flash first and power cycle before uploading the Tasmota firmware binary. Not erasing can leave behind remnants of the previous flash contents which can interfere with the new firmware operation.</li> </ul>"},{"location":"Getting-Started/#flashing","title":"Flashing","text":"<p>If you have followed Hardware preparation, your device should be in Programming Mode and ready for a Tasmota firmware binary to be installed.</p> <p>You may want to back up the device manufacturer's firmware on the one in a million chance you don't like Tasmota.</p> <p> <p>Choose an installation method:</p> Web Installer Tasmotizer!  esptool.py  OTA Conversion  <p>Flash Tasmota directly from your web browser.</p> <p>Tasmotizer! is specifically designed for use with Tasmota with an easy to use GUI and esptool.py under the hood.</p> for ESP82XX only <p>Download the latest release for your platform. In Windows just double click the downloaded file and it'll start, no installation required. For python follow the installation instructions. </p> <p>Note</p> <p>If you get an anti-virus infection warning don't fret, it is a known false positive. If you're still apprehensive you can always run the Python version. </p> <p>It is time to Tasmotize!</p> <p></p> <ol> <li>Connect your device to the serial programmer or plug in NodeMCU/D1 mini.</li> <li>Check whether the correct serial port (COM or tty port) is selected. Tasmotizer! will try its best to select the right one for you.</li> <li>Choose Tasmota firmware binary:<ul> <li>BIN file - browse to the Tasmota firmware binary you downloaded or compiled.</li> <li>Release - select from a list of available release binaries</li> <li>Development - select from a list of latest development binaries</li> </ul> </li> <li>optional Backup the original device firmware</li> <li>Erase flash</li> </ol> <p>Danger</p> <p>Leave Erase before flashing checked if it is the first time flashing Tasmota on the device or you're experiencing issues with the existing flash and need to do a full erase. If you're upgrading an already flashed Tasmota and wish to keep your settings, uncheck Erase before flashing.</p> <ol> <li>Click Tasmotize and wait until done.</li> </ol> <p></p> <p>If the flash was successful it will display: </p> <p></p> <p>Unplug your serial programming adapter or device and plug it back in or connect to another power source. </p> <p>Esptool is the official Espressif tool for flashing ESP chips. It requires Python, if you do not have an installed copy of Python 2.x or 3.x download and install it from https://www.python.org.</p> <p>Use Esptool packaged with your distro or install it yourself with command: <pre><code>pip install esptool\n</code></pre></p> Old esptool versions will not detect and will not flash newer chips (ESP32-C3, ESP32-S3, etc) <p>Make sure you followed the steps to put your device in Programming mode. Place your chosen firmware binary file in the current folder you run esptool.py from.</p> <p>Esptool uses the serial interface to communicate with your device. On Windows these interfaces are named COM1, COM2, etc. and on Linux they are named /dev/ttyUSB0, /dev/ttyUSB1, etc. Before using esptool, make sure you know which serial port your programming adapter is connected to.</p> <p>The following use <code>COM5</code> as an example. Change <code>COM5</code> with your serial port designation.</p> <p>Ensure the device is in programming mode before each step.</p> <p>Tasmota is NOT a developer of these tools. For help and troubleshooting you will need to get support from those projects.</p> <ul> <li>MgOS to Tasmota - OTA flash for Shelly devices</li> <li>MgOS32 to Tasmota32 - OTA flash for Shelly Plus and Pro (ESP32) devices</li> <li>Tuya-Convert - OTA flash for devices with Tuya chips. Does not work in 99% of cases</li> <li>Sonoff DIY - OTA flash for select Sonoff devices Does not work anymore</li> <li>esp2ino - OTA flash for select Wyze devices. Does not work anymore</li> </ul>"},{"location":"Getting-Started/#backup-firmware-optional-step","title":"Backup Firmware (optional step)","text":"<p>Backup the current firmware with the following command: <pre><code>esptool.py --port COM5 read_flash 0x00000 0x100000 fwbackup.bin\n</code></pre> When the command completes the device is not in programming mode anymore. Repeat the process of putting your device in programming mode.</p>"},{"location":"Getting-Started/#erase-flash-memory","title":"Erase Flash Memory","text":"<p>Erase the complete flash memory holding the firmware with the following command: <pre><code>esptool.py --port COM5 erase_flash\n</code></pre> It only takes a few seconds to erase 1M of flash.</p> <p>When the command completes the device is not in programming mode anymore. Repeat the process of putting your device in programming mode.</p>"},{"location":"Getting-Started/#upload-firmware","title":"Upload Firmware","text":"<p>Load the chosen Tasmota firmware file with the following command (e.g., <code>tasmota.bin</code> in this example):</p> <p><pre><code>esptool.py write_flash -fm dout 0x0 tasmota.bin\n</code></pre> or for ESP32:</p> <p>Note</p> <p>Factory binaries are used for inital flashing this time https://ota.tasmota.com/tasmota32/release/</p> <pre><code>esptool.py write_flash 0x0 tasmota32.factory.bin\n</code></pre> <p>Unplug your serial programming adapter or your device and plug it back in or connect to another power source. Your device is now ready for Initial configuration. </p> <p>For proper device initialization after the firmware upload completes, power down and power up the device.</p>"},{"location":"Getting-Started/#initial-configuration","title":"Initial Configuration","text":"Using Tasmota Web InstallerUsing Web UIUsing Serial Terminal <p> Once the installation is successful, click on NEXT. The installer will scan for Wi-Fi networks and select the strongest one. Use the dropdown to select between networks.</p> <p> Enter the Wi-Fi password.</p> <p> Wait until configuration completes and click CONTINUE  From here click on VISIT DEVICE to enter the WebUI for further configuration.</p> <p>Tasmota provides a wireless access point for easy Wi-Fi configuration. </p> <p>Connect your device to a power source and grab your smartphone (or tablet or laptop or any other web and Wi-Fi capable device). Search for a Wi-Fi AP named tasmota_XXXXXX-#### (where XXXXXX is a string derived from the device's MAC address and #### is a number) and connect to it. In this example the Wi-Fi AP is named tasmota_3D5E26-7718. </p> <p>When it connects to the network, you may get a warning that there is no Internet connection and be prompted to connect to a different network. Do not allow the mobile device to select a different network.</p> <p><p></p></p> <p>Warning</p> <p>Wi-Fi manager server is active for only 3 minutes. If you miss the window you might have to disconnect your device from power and reconnect.</p> <p> After you have connected to the Tasmota Wi-Fi AP, open <code>http://192.168.4.1</code> in a web browser on the smartphone (or whatever device you used).  Depending on the phone, it will take you to the Tasmota configuration page automatically, or you will get a prompt to sign in to Wi-Fi network or authorize. Tapping on the AP name should also open the configuration page.</p> <p>  At the top of the page you can select one of the discovered Wi-Fi networks or have Tasmota scan again. Enter your WiFi credentials:</p> <p>WiFi Network - your Wi-Fi network name (SSID Selecting the desired network name from the list will enter it automatically in this field. SSID's are case sensitive</p> <p>WiFi Password - password for your Wi-Fi network  Wi-Fi password has to be under 64 characters and without special characters (e.g. asterisks) or white spaces</p> <p>Click the checkbox if you want to see the password you enter to ensure that it is correct. Click on Save to apply the settings. The device will try to connect to the network entered. </p> <p> </p> <p>If it was successful, you will see this message:</p> <p> </p> <p>Some phones will redirect you to the new IP immediately, on others you need to click the link to open it in a browser.</p> <p>The tasmota_XXXXXX-#### network will no longer be present. Therefore your smartphone will automatically be disconnected and should connect back to its data network.</p> <p>Failure</p> <pre><code>&lt;img alt=\"Tasmota AP\" src=\"../_media/wificonfig6.jpg\" style=\"margin:5px;width:200px;float:right\"&gt;&lt;/img&gt;In case the network name or password were entered incorrectly, or it didn't manage to connect for some other reason, Tasmota will return to the \"Wi-Fi parameters\" screen with an error message.\n</code></pre> <p>If you don't know the IP of the newly flashed device look in your router settings or find it with an IP scanner:</p> <ul> <li>Fing - for Android or iOS</li> <li>Angry IP Scanner - open source for Linux, Windows and Mac. Requires Java.</li> <li>Super Scan - Windows only (free)</li> </ul> <p>Open the IP address with your web browser and you have full access to Tasmota.</p> <p>Now is the time to set up MQTT and the last remaining, but equally important, step:</p> <p>Set up your device's feature using a Template in Configuration - Configure Template or Module in Configuration - Configure Module.</p> <p>Configure Other (optional)</p> <p>Configure your device name which is displayed in webUI and used for Home Assistant discovery. </p> <p>Configure web admin password for the webUI. Default username is <code>admin</code>. This type of security is rudimentary since Tasmota doesn't use HTTPS, do not expose your device outside of your local network.</p> <p>If you flashed the device using serial programmer (or it is a NodeMCU/D1 mini) you can take advantage of the existing connection and configure your device over the serial connection using Commands.</p> <p>First you will need a serial terminal program that connects to Tasmota console over the serial connection you used to flash it.</p> <ul> <li>Termite - simple terminal for windows</li> <li>Termie - open source clone of Termite</li> <li>Putty - popular client available on every platform</li> <li>Minicom - one of many Linux terminals</li> </ul> <p>Tip</p> <p>Enable local echo so that you can see what is typed and transmitted to the device. Enable Append CR+LF since every request needs to end with <code>&lt;CR&gt;&lt;LF&gt;</code>. </p> <p>In this example Termite on Windows is used.</p> <p>Download Termite and extract the .exe file, no installation necessary. Connect your serial programmer or NodeMCU/D1 mini to the computer.</p> <p></p> <p>Open Termite and set it to the proper COM port (Termite selects the first available port by default).  Set Baud rate to 115200 and Forward to none. </p> <p></p> <p>Connect your device to the serial programmer. You should see the initial boot output in Termite. If your screen is empty type <code>status</code> in the bottom command bar and hit enter. If you get a return message from your device similar to the one displayed under purple <code>status</code> you're all set.</p> <p>To configure Tasmota you need to issue commands, some commands will reboot your device and to avoid that we will use the <code>Backlog</code> command feature.</p> <p>Configure your Wi-Fi network and a secondary Wi-Fi network</p> <p><pre><code>Backlog ssid1 &lt;yourssid&gt;; password1 &lt;your_password&gt;; ssid2 &lt;your_ssid2&gt;; password2 &lt;your_password&gt;\n</code></pre> </p> <p>Device will restart and connect to your network. It will display your devices newly assigned IP. Direct your web browser to that IP address to access the Web UI for further configuration and control.</p> <p>Configure MQTT broker address, MQTT credentials, unique device topic and OTA url to the latest official release <pre><code>Backlog mqtthost &lt;yourhost&gt;; mqttuser &lt;user&gt;; mqttpassword &lt;password&gt;; topic &lt;unique_topic&gt;; otaurl http://ota.tasmota.com/tasmota/release/tasmota.bin\n</code></pre></p> <p>Commands and Backlog are powerful and in time you can learn to configure almost everything (NTP servers, longitude and latitude, custom device options, etc) with a few copy and paste moves.</p> <p>Tip</p> <p>Keep your personal configuration in a text file and simply copy and paste the backlog commands to a newly flashed device.</p>"},{"location":"Getting-Started/#after-configuration","title":"After Configuration","text":"<p>Your device running Tasmota is now ready to be controlled.</p> <p>Check out all the Tasmota features and ways to integrate it with other platforms.</p> <p>Warning</p> <p>If you experience power fluctuations in your power grid it's best to immediately disable Power Cycle Recovery feature with command <code>SetOption65 1</code> immediately or you might end up with firmware defaults on your device.</p>"},{"location":"Gitpod/","title":"Gitpod","text":"<p>Even though Tasmota offers several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to enable or disable some features, or simply change some parameters, then you need to compile a firmware binary yourself.  </p> <p>If you are not experienced enough or don't want to install an IDE (Integrated Development Environment) like PlatformIO or ATOM on your computer, compiling your own firmware is a breeze using Gitpod.</p> <p>Gitpod is a web browser based online IDE. All you need to use it is to link your GitHub account (or make a new one here). Gitpod will take care of all the necessary software package dependencies for you.</p> <p></p> <p>After you successfully sign in, you can start your personal project. The fastest way to load Tasmota into Gitpod is with one of the following links:  </p> <ul> <li>Development Branch: <code>https://gitpod.io#https://github.com/arendst/Tasmota/tree/development</code></li> <li>Master Release: <code>https://gitpod.io#https://github.com/arendst/Tasmota/tree/master</code></li> <li>TasmoCompiler: <code>https://gitpod.io/#https://github.com/benzino77/tasmocompiler</code></li> </ul> <p>Browser Extension Gitpod has a browser extension (Chrome and Firefox) which is handy to directly load a GitHub project into your personal Gitpod work-space. </p> <p>More information on the Gitpod browser extension.</p>"},{"location":"Gitpod/#using-gitpod","title":"Using Gitpod","text":"<p>After Gitpod loads the project, you will be greeted by the main window. Gitpod will then automatically compile <code>tasmota.bin</code> and <code>tasmota.bin.gz</code>. Wait for the compilation to complete.</p> <p>The display consists of three panels:  </p> <ol> <li>Explorer</li> <li>Editor</li> <li>Terminal</li> </ol>"},{"location":"Gitpod/#customize-firmware-features-and-settings","title":"Customize Firmware Features and Settings","text":"<p>Warning</p> <p>The proper method of customizing firmware compilation options is to use the <code>user_config_override.h</code> file. You should not change the <code>my_user_config.h</code> file.</p> <p>To modify the stock configuration:  </p> <ol> <li>Select the <code>/tasmota</code> folder in the Explorer (1) pane</li> <li>Create a new file called <code>user_config_override.h</code></li> <li>In the Editor (2) pane, add, change, or remove anything you need in your configuration file to define your own settings. Refer to the <code>user_config_override_sample.h</code> file as well as <code>my_user_config.h</code> for <code>#define</code> options (sample). You can find a list of Tasmota features and settings listed here. Define the features you require in your configuration file.</li> <li>Click 'File' on the menu bar and 'Save' your edits.</li> </ol>"},{"location":"Gitpod/#prepare-the-ide-for-compilation","title":"Prepare the IDE for Compilation","text":"<ol> <li>Open the <code>platformio.ini</code> file located in the <code>/tasmota</code> root directory (scroll to the bottom of the file Explorer (1) pane). In this file, removing a leading semicolon <code>;</code> enables a statement.</li> <li>In the Editor (2) pane:</li> <li>If you are using your own <code>user_config_override.h</code>, you must tell the compiler to use it. Rename <code>platformio_override_sample.ini</code> to <code>platformio_override.ini</code>.</li> <li>Default Tasmota Arduino Core will be compiled. If you wish to use a different Core, find the <code>[core_active]</code> section in the file and enable the <code>platform</code> and <code>build_flags</code> lines for the desired Core. Then click 'File' on the menu bar and 'Save' your edits.</li> </ol>"},{"location":"Gitpod/#compile-your-firmware","title":"Compile Your Firmware","text":"<p>This action is done in the Terminal pane (3) with simple commands.  </p> <p>The simplest one is <code>platformio run -e tasmota</code>. With this command, Gitpod will compile the Tasmota firmware with the features you selected. If you need a different variant, you can specify this option on the command line: <code>platformio run -e &lt;variant-name&gt;</code> </p> <p>Examples:  </p> <ul> <li><code>platformio run -e tasmota-sensors</code> </li> <li><code>platformio run -e tasmota-DE</code></li> </ul> <p>Compilation normally takes only a couple of minutes. The time it takes is directly related to how many variants you build. When done, you will find the firmware file in the folder <code>/Tasmota/build_output/firmware/&lt;variant-name&gt;.bin</code> in the Explorer (1) pane.</p> <p>Download <code>&lt;variant-name&gt;.bin</code> to your computer by right-clicking on the file and selecting 'Download'. You are now ready to flash your device. </p> <p>Watch a livestream video by digiblurDIY of compiling Tasmota using Gitpod.</p>"},{"location":"Gitpod/#flash-your-device","title":"Flash Your Device","text":""},{"location":"Gitpod/#ota-flash","title":"OTA Flash","text":"<p>If you already have Tasmota flashed on your device, you can use the <code>File Upload</code> OTA method to load the new firmware binary file</p> <ol> <li>Download <code>tasmota-minimal.bin.gz</code></li> <li>Make a backup of the device configuration using the web UI <code>Configuration</code> menu option.</li> <li>Upload <code>tasmota-minimal.bin.gz</code> to your device using the web UI <code>Firmware Upgrade</code> selection. Choose <code>Upgrade by file upload</code>.</li> <li>After <code>tasmota-minimal.bin.gz</code> is successfully loaded, select <code>Firmware Upgrade</code> once again and upload the firmware file compiled using Gitpod.</li> </ol> <p>Step 1-3 only applies to ESP8266, where you should use the <code>.bin.gz</code> file for upgrades.</p>"},{"location":"Gitpod/#serial-flash","title":"Serial Flash","text":"<p>Follow the same procedure for flashing as you would any new device.</p>"},{"location":"Gitpod/#webserial-esptool","title":"Webserial ESPTool","text":"<p>Install your custom firmware with a web browser using Webserial ESPTool.</p> <p>Download the <code>tasmota-xxx.factory.bin</code> and flash it from offset 0x0.</p>"},{"location":"Gitpod/#video-guide","title":"Video Guide","text":""},{"location":"GladysAssistant/","title":"GladysAssistant","text":"<p> Tasmota supports Gladys Assistant MQTT for both relays and sensors. HTTP protocol incoming soon.</p> <p>Find below the procedure to configure Gladys Assistant and Tasmota.</p>"},{"location":"GladysAssistant/#prerequisites","title":"Prerequisites","text":"<p>The following servers should be made available:</p> <ul> <li>You have installed Gladys Assistant (embedded MQTT broker available)</li> <li>You have installed/access to a MQTT broker server and made contact with your Tasmota device</li> </ul>"},{"location":"GladysAssistant/#automatic-discovery","title":"Automatic Discovery","text":"<p>Gladys Assistant automatically discovers Tasmota devices (once all are connected on same MQTT broker).</p> <p>On Gladys Assistant application:</p> <ol> <li>Go to <code>Integration</code> page</li> <li>Look for <code>Tasmota</code> element, click on it</li> <li>Then, <code>MQTT discover</code></li> <li><code>Save</code> to add device</li> </ol> <p>Try on Gladys Assistant demonstration website.</p>"},{"location":"HASPmota/","title":"HASPmota","text":"<p>This feature is included in tasmota32-lvgl.bin</p> <p>Starting from v14.5.0.2, HASPmota automatically starts if a file <code>pages.jsonl</code> is present</p> <p>Tasmota happily supports the openHASP compatible format, known as HASPmota. This format allows you to describe rich graphics interfaces using simple JSON templates. The HASPmota support in Tasmota leverages the power of LVGL and the Berry language, but you don't need to code or learn the LVGL API to use it.</p> <p>This feature is heavily inspired from @fvanroie's openHASP project.</p>"},{"location":"HASPmota/#running-haspmota","title":"Running HASPmota","text":"<p>HASPmota, like OpenHASP, relies of describing the elements to be displayed in a simple JSONL file. JSONL (JSON Lines) is a file format where each line is a valid JSON value. The default file name is <code>pages.jsonl</code>.</p> <p>When a file <code>pages.jsonl</code> is present in the file system, HASPmota is automatically started without any additional code needed (since v14.5.0.2, previously you needed to start HASPmota in <code>autoexec.be</code>).</p> <p>HASPmota auto-start is triggered after <code>autoexec.be</code> is executed, so you have the opportunity to start HASPmota yourself, or initialize any sensor or components <code>autoexec.be</code> time. You can also use a different name than <code>pages.jsonl</code> and start HASPmota at any time of your convenience.</p>"},{"location":"HASPmota/#running-haspmota-manually","title":"Running HASPMota manually","text":"<p>If you need to start HASPmota manually, you can use the following code in <code>autoexec.be</code>:</p> <pre><code>import haspmota\nhaspmota.start()         # manually start HASPmota using default 'pages.jsonl' file\n</code></pre> <p>You can pass an additional parameter with the name of the template file:</p> <pre><code>import haspmota\nhaspmota.start(\"my_template.jsonl\")\n</code></pre>"},{"location":"HASPmota/#gallery-of-widgets","title":"Gallery of widgets","text":"<p>The <code>jsonl</code> file used to display the widgets can be found widget demo JSONL file</p>"},{"location":"HASPmota/#minimal-requirements","title":"Minimal requirements","text":"<p>Hardware: HASPmota is supported on all ESP32 variants, and requires a display configured with universal display (using <code>display.ini</code> or <code>autoconf</code>). When they are correctly configured, you should see a splash screen at startup.</p> <p>Currently PSRAM is strongly recommended to run HASPmota if you want to use images and external fonts. Boards without PSRAM can do basic HASPmota.</p> <p>Firmware: HASPmota is included in <code>tasmota32-lvgl</code> firmwares, you don't need any additional <code>.tapp</code> file.</p>"},{"location":"HASPmota/#quick-tour","title":"Quick tour","text":"<p>You can see HASPmota in action in a couple of minutes.</p> <p>Upload <code>tamota_demo.tapp</code> to your file system. The easy way is to use the following command in Tasmota console:</p> <ul> <li><code>UrlFetch https://raw.githubusercontent.com/arendst/Tasmota/development/tasmota/berry/haspmota/haspmota_demo.tapp</code></li> <li><code>Restart 1</code> to restart</li> <li>Enjoy</li> </ul> <p>You should see the following screen, and click on buttons to switch to the second screen:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"HASPmota/#understanding-the-template","title":"Understanding the template","text":"<p>HASPmota automatically loads the template from a file named <code>pages.jsonl</code>. This file contains JSON Lines, i.e. a single JSON document per line. Each line describes an element on the screen. Elements are grouped into pages.</p> <p>Page <code>0</code> contains objects that are displayed on all screens. They are typically used for headers and menus.</p> <p>The lines below define the header label (red background) and the clock and wifi widgets.</p> <pre><code>{\"page\":0,\"comment\":\"---------- Upper stat line ----------\"}\n\n{\"id\":11,\"obj\":\"label\",\"x\":0,\"y\":0,\"w\":320,\"pad_right\":90,\"h\":22,\"bg_color\":\"#D00000\",\"bg_opa\":255,\"radius\":0,\"border_side\":0,\"text\":\"Tasmota\",\"text_font\":\"montserrat-20\"}\n\n{\"id\":15,\"obj\":\"lv_wifi_arcs\",\"x\":291,\"y\":0,\"w\":29,\"h\":22,\"radius\":0,\"border_side\":0,\"bg_color\":\"#000000\",\"line_color\":\"#FFFFFF\"}\n{\"id\":16,\"obj\":\"lv_clock\",\"x\":232,\"y\":3,\"w\":55,\"h\":16,\"radius\":0,\"border_side\":0}\n</code></pre> <p>The lines below describe the 3 buttons at the bottom, and their respective actions.</p> <pre><code>{\"comment\":\"---------- Bottom buttons - prev/home/next ----------\"}\n{\"id\":101,\"obj\":\"btn\",\"x\":20,\"y\":210,\"w\":80,\"h\":25,\"action\":\"prev\",\"bg_color\":\"#1fa3ec\",\"radius\":10,\"border_side\":0,\"text\":\"\\uF053\",\"text_font\":\"montserrat-20\"}\n{\"id\":102,\"obj\":\"btn\",\"x\":120,\"y\":210,\"w\":80,\"h\":25,\"action\":\"back\",\"bg_color\":\"#1fa3ec\",\"radius\":10,\"border_side\":0,\"text\":\"\\uF015\",\"text_font\":\"montserrat-20\"}\n{\"id\":103,\"obj\":\"btn\",\"x\":220,\"y\":210,\"w\":80,\"h\":25,\"action\":\"next\",\"bg_color\":\"#1fa3ec\",\"radius\":10,\"border_side\":0,\"text\":\"\\uF054\",\"text_font\":\"montserrat-20\"}\n</code></pre> <p>Page <code>1</code> is the default page, and contains different widgets types: labels and arc. The values are changed at runtime via Tasmota's rule system, see below for details.</p> <pre><code>{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"id\":0,\"bg_color\":\"#0000A0\",\"bg_grad_color\":\"#000000\",\"bg_grad_dir\":1,\"text_color\":\"#FFFFFF\"}\n\n{\"id\":2,\"obj\":\"arc\",\"x\":20,\"y\":65,\"w\":80,\"h\":100,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":0,\"value_ofs_y\":-14,\"bg_opa\":0,\"text\":\"--.-\u00b0C\",\"min\":200,\"max\":800,\"val\":0,\"val_rule\":\"ESP32#Temperature\",\"val_rule_formula\":\"val * 10\",\"text_rule\":\"ESP32#Temperature\",\"text_rule_format\":\"%2.1f \u00b0C\"}\n\n{\"id\":5,\"obj\":\"label\",\"x\":2,\"y\":35,\"w\":120,\"text\":\"Temperature\",\"align\":1}\n\n{\"id\":10,\"obj\":\"label\",\"x\":172,\"y\":35,\"w\":140,\"text\":\"MPU\",\"align\":0}\n{\"id\":11,\"obj\":\"label\",\"x\":172,\"y\":55,\"w\":140,\"text\":\"x=\",\"align\":0,\"text_rule\":\"MPU9250#AX\",\"text_rule_format\":\"x=%6.3f\",\"text_rule_formula\":\"val / 1000\"}\n{\"id\":12,\"obj\":\"label\",\"x\":172,\"y\":75,\"w\":140,\"text\":\"y=\",\"align\":0,\"text_rule\":\"MPU9250#AY\",\"text_rule_format\":\"y=%6.3f\",\"text_rule_formula\":\"val / 1000\"}\n{\"id\":13,\"obj\":\"label\",\"x\":172,\"y\":95,\"w\":140,\"text\":\"z=\",\"align\":0,\"text_rule\":\"MPU9250#AZ\",\"text_rule_format\":\"z=%6.3f\",\"text_rule_formula\":\"val / 1000\"}\n</code></pre> <p>Page <code>2</code> contains custom widgets as Berry code. These widgets are imported within <code>haspmota_widgets.tapp</code></p> <pre><code>{\"page\":2,\"comment\":\"---------- Page 2 ----------\"}\n{\"id\":0,\"bg_color\":\"#0000A0\",\"bg_grad_color\":\"#000000\",\"bg_grad_dir\":1,\"text_color\":\"#FFFFFF\"}\n\n{\"comment\":\"---------- Wifi status ----------\"}\n{\"id\":20,\"obj\":\"lv_wifi_graph\",\"x\":257,\"y\":25,\"w\":60,\"h\":40,\"radius\":0}\n{\"id\":21,\"obj\":\"lv_tasmota_info\",\"x\":3,\"y\":25,\"w\":251,\"h\":40,\"radius\":0}\n{\"id\":22,\"obj\":\"lv_tasmota_log\",\"x\":3,\"y\":68,\"w\":314,\"h\":90,\"radius\":0,\"text_font\":12}\n</code></pre> <p>Finally, the following line allows to run arbitrary Berry code.</p> <pre><code>{\"comment\":\"--- Trigger sensors every 2 seconds ---\",\"berry_run\":\"tasmota.add_cron('*/2 * * * * *', def () var s = tasmota.read_sensors() if (s) tasmota.publish_rule(s) end end, 'hm_every_5_s')\"}\n</code></pre> <p>The code trigger a read of sensors every 2 seconds and publish the JSON result to be parsed by the rule engine.</p> <pre><code>tasmota.add_cron('*/2 * * * * *', def () var s = tasmota.read_sensors() if (s) tasmota.publish_rule(s) end end, 'hm_every_5_s')\n</code></pre>"},{"location":"HASPmota/#haspmota-reference","title":"HASPmota reference","text":""},{"location":"HASPmota/#integration-to-berry","title":"Integration to Berry","text":""},{"location":"HASPmota/#objects-as-pxby","title":"objects as <code>p&lt;x&gt;b&lt;y&gt;</code>","text":"<p>Each HASPmota widget is mapped to a global variable of name <code>p&lt;x&gt;b&lt;y&gt;</code>. Example:  <code>p1b10</code>. Such objects can be directly used via their attributes.</p> <p>Example:</p> <pre><code>p1b10.x += 10\np1b10.text = \"Hello\"\nprint(p1b10.w)\n</code></pre>"},{"location":"HASPmota/#pages-as-px","title":"pages as <code>p&lt;x&gt;</code>","text":"<p>Pages objects are mapped to a global variable of name <code>p&lt;x&gt;</code>.</p> <p>Changing pages can be done with <code>p2.show()</code></p>"},{"location":"HASPmota/#move-to-page-programmatically","title":"move to page programmatically","text":"<p>Use <code>haspmota.page_show(&lt;action&gt;)</code> with a parameter action taking one of the following: <code>next</code>, <code>prev</code>, <code>back</code>, <code>p&lt;n&gt;</code>.</p> <pre><code>haspmota.page_show('next')      # move to next page\nhaspmota.page_show('prev')      # move to previous page\nhaspmota.page_show('back')      # move to home page\nhaspmota.page_show('p3')        # move to page 3\n</code></pre>"},{"location":"HASPmota/#additional-parsing","title":"additional parsing","text":"<p>HASPmota parses all lines from the file <code>pages.jsonl</code>. You can dynamically add new objects as JSON with <code>haspmota.parse(&lt;json&gt;)</code>. This functions takes a single json line. It is highly recommended to specify the page id in the json, otherwise the object is added to the current page.</p>"},{"location":"HASPmota/#pages","title":"Pages","text":"<p>Pages object are identified by object if <code>0</code>. Example:</p> <pre><code>{\"page\":1,\"id\":0,\"bg_color\":\"#0000A0\",\"bg_grad_color\":\"#000000\",\"bg_grad_dir\":1,\"text_color\":\"#FFFFFF\"}\n</code></pre> <p>Internally HASPmota pages are implemented with LVGL screens, i.e. a parent object.</p> <p>Page <code>0</code> is a special page that is displays over every screens. It is the perfect place to put navigation menus. It is implement as <code>lv.layer_top()</code>.</p> <p>Page <code>1</code> is always present and the default page.</p> Attributes specific to page Details <code>prev</code> (int) target page number when pressing PREV button <code>next</code> (int) target page number when pressing NEXT button <code>home</code> (int) target page number when pressing HOME button And generally all object attributes"},{"location":"HASPmota/#classes-of-widgets","title":"Classes of widgets","text":"<p>Attribute <code>\"obj\"</code> can take the following values:</p> HASPmota Class Embedded LVGL class <code>obj</code> <code>lv.obj</code> <code>btn</code> <code>lv.btn</code> <code>switch</code> <code>lv.switch</code> <code>checkbox</code> <code>lv.checkbox</code> <code>label</code> <code>lv.label</code> <code>spinner</code> <code>lv.spinner</code> <code>line</code> <code>lv.line</code> <code>img</code> <code>lv.img</code> <code>dropdown</code> <code>lv.dropdown</code> <code>roller</code> <code>lv.roller</code> <code>btnmatrix</code> <code>lv.buttonmatrix</code> <code>bar</code> <code>lv.bar</code> <code>scale</code> <code>lv.scale</code> <code>slider</code> <code>lv.slider</code> <code>arc</code> <code>lv.arc</code> <code>textarea</code> <code>lv.textarea</code> <code>led</code> <code>lv.led</code> <code>chart</code> <code>lv.chart</code> <code>cpicker</code> <code>lv.colorwheel</code> (ported from LVGL8 to LVGL9) <code>spangroup</code> <code>lv.spangroup</code> <code>span</code> <code>lv.span</code> <code>msgbox</code> <code>lv.msgbox</code> <code>qrcode</code> <code>lv.qrcode</code> <code>tabview</code> <code>lv.tabview</code> <p>You can also import custom widget as long as they inherit from <code>lv.obj</code> and the class name matches the module name.</p> <p>Example: <code>\"obj\":\"lv_wifi_graph\"</code> will trigger the following: - <code>import lv_wifi_graph</code> - instantiation of <code>lv_wifi_graph(parent)</code> object - if successful, it can be used like a typical HASPmota object</p>"},{"location":"HASPmota/#attributes","title":"Attributes","text":"<p>New in Tasmota v13.4.0.4, sizes can be expressed in percentage of the screen.</p> <p>Values in pixels can be expressed in percentage instead of absolute value. Just suffix the attribute name with <code>%</code>. Example: <code>\"h%:100</code> instead of <code>\"h\":320</code>. Percentage values can only be set (written to); when you read back a size, it is always in pixels.</p> <p>When using Berry scripting, <code>h%</code> is not a valid attribute name so you need to use the special syntax:</p> <pre><code>p10b20.('h%') = 100\n</code></pre> <p>Below are the standard attributes:</p> Attribute name LVGL equivalent Details <code>comment</code> Ignored <code>meta</code> any Any data, can be retrieved from Berry code with <code>p&lt;x&gt;b&lt;y&gt;.meta</code> <code>page</code> 0 to 15Parent screen object Page id for the current object.If not present, takes the value of the current page <code>id</code> 0..255 Id number of the object. Id <code>0</code> means the entire page.A global berry object is created with name <code>p&lt;page&gt;b&lt;id&gt;</code> (ex: <code>p1b10</code>) <code>obj</code> widget class Class of the widget (see above).If not present, the entire JSON line is ignored <code>action</code> <code>\"next\"</code>, <code>\"prev\"</code>, <code>\"back\"</code> or <code>\"p&lt;x&gt;\"</code> Switch to page when the object is touched <code>x</code> <code>x</code> X coordinate of top left corner <code>y</code> <code>y</code> Y coordinate of top left corner (Y is pointing down) <code>h</code> <code>height</code> Height in pixels <code>w</code> <code>width</code> Width in pixels <code>hidden</code> flag <code>lv.OBJ_FLAG_HIDDEN</code> Object is hidden (bool) <code>enabled</code> flag <code>lv.OBJ_FLAG_CLICKABLE</code> Object is touch/clickable (bool) <code>click</code> flag <code>lv.OBJ_FLAG_CLICKABLE</code> Synonym of <code>enabled</code>. Object is touch/clickable (bool) <code>toggle</code> flag <code>lv.STATE_CHECKED</code> When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button.TODO check if bool or string <code>radius</code> <code>style_radius</code> Radius of rounded corners <code>bg_opa</code> <code>style_bg_opa</code> Opacity: <code>0</code> is transparent, <code>255</code> is opaque <code>bg_color</code> <code>style_bg_color</code> Color of background, format is <code>#RRGGBB</code> <code>bg_grad_color</code> <code>style_bg_grad_color</code> Color of background gradient <code>bg_grad_dir</code> <code>style_bg_grad_dir</code> Gradient direction<code>0</code>: none<code>1</code>: Vertical (top to bottom) gradient<code>2</code>: Horizontal (left to right) gradient <code>border_side</code> <code>style_border_side</code> Borders to be displayed (add all values)<code>0</code>: none<code>1</code>: bottom<code>2</code>: top<code>4</code>: left<code>8</code>: right<code>15</code>: full (all 4) <code>border_width</code> <code>style_border_width</code> Width of border in pixels <code>border_color</code> <code>style_border_color</code> <code>line_color</code> <code>style_line_color</code> Color of line <code>line_width</code> <code>style_line_width</code> <code>line_width1</code> <code>style_arc_width</code> Sets the line width of an <code>arc</code> indicator part <code>pad_left</code> <code>style_pad_left</code> Left padding in pixels <code>pad_right</code> <code>style_pad_right</code> Right padding in pixels <code>pad_top</code> <code>style_pad_top</code> Top padding in pixels <code>pad_bottom</code> <code>style_pad_bottom</code> Bottom padding in pixels <code>pad_all</code> <code>style_pad_all</code> Sets all 4 padding values at once (Write-only)"},{"location":"HASPmota/#attributes-related-to-text-content","title":"Attributes related to text content","text":"Attribute name LVGL equivalent Details <code>text</code> <code>text</code> Sets the inner text of the object.If the native LVGL object does not support text (like <code>lv.btn</code>), a <code>lv.label</code> sub-object is automatically created. <code>value_str</code> <code>text</code> Synonym of <code>text</code> <code>align</code> <code>style_text_align</code> Set alignment for text<code>0</code> or <code>\"left\"</code>: <code>lv.TEXT_ALIGN_LEFT</code><code>1</code> or <code>\"center\"</code>: <code>lv.TEXT_ALIGN_CENTER</code><code>2</code> or <code>\"right\"</code>: <code>lv.TEXT_ALIGN_RIGHT</code> <code>text_font</code> <code>style_text_font</code> Sets the font name and size for the text.If <code>int</code>, the default font is <code>robotocondensed_latin1</code> and the parameter sets the sizeIf <code>string</code>, the font is in the form <code>&lt;font_name&gt;-&lt;font_size&gt;</code>, example: <code>montserrat-20</code> or in the form <code>A:&lt;font_file&gt;</code> to load a binary font from the file-system. <code>value_font</code> <code>style_text_font</code> Synonym of <code>text_font</code> <code>text_color</code> <code>style_text_color</code> Sets the color of text <code>text_decor</code> <code>style_text_decor</code> Sets the text decorator, can be ORed<code>0</code>: none<code>1</code> underline<code>2</code>: strike-through <code>text_opa</code> <code>style_text_opa</code> Sets the text opacity<code>0</code>: transparent<code>255</code>: opaque <code>text_letter_space</code> <code>style_text_letter_space</code> Set the letter space in pixels <code>text_line_space</code> <code>style_text_line_space</code> Set the line space in pixels. <code>long_mode</code><code>label_mode</code> <code>set_long_mode</code> Usually the size of the label is automatically expanded to the text size. If the width or height are explicitly set, the following policies are applied:<code>\"expand\"</code>: expand to size<code>break</code> or <code>0</code>: (<code>lv.LABEL_LONG_WRAP</code>) Wrap too long lines<code>\"dots\"</code> or <code>1</code>: (<code>lv.LABEL_LONG_DOT</code>) Replaces the last 3 characters from bottom right corner of the label with dots<code>\"scroll\"</code> or <code>2</code>: (<code>lv.LABEL_LONG_SCROLL</code>) If the text is wider than the label scroll it horizontally back and forth. If it's higher, scroll vertically<code>\"loop\"</code> or <code>3</code>: (<code>lv.LABEL_LONG_SCROLL_CIRCULAR</code>) If the text is wider than the label scroll it horizontally continuously. If it's higher, scroll vertically.<code>\"crop\"</code> or <code>4</code>: (<code>lv.LABEL_LONG_CLIP</code>) Simply clip the parts of the text outside the label. <code>value_color</code> <code>style_text_color</code> Synonym of <code>text_color</code> <code>value_ofs_x</code> <code>x</code> of sub-label Sets the X offset in pixels within the object <code>value_ofs_y</code> <code>y</code> of sub-label Sets the Y offset in pixels within the object <code>text_rule</code> Link the text to a Tasmota rule, see below <code>text_rule_formula</code> Link the text to a Tasmota rule, see below <code>text_rule_format</code> Link the text to a Tasmota rule, see below"},{"location":"HASPmota/#attributes-related-to-values","title":"Attributes related to values","text":"Attribute name LVGL equivalent Details <code>min</code> <code>range</code> Set the minimum value of range (int) <code>max</code> <code>range</code> Set the maximum value of range (int) <code>val</code> <code>value</code> Set the value (int) <code>val_rule</code> Link a value to a Tasmota rule, see below <code>val_rule_formula</code> Link a value to a Tasmota rule, see below"},{"location":"HASPmota/#flex-flex-layout","title":"<code>flex</code> (flex layout)","text":"<p>HASPmota originally supported only absolute positions and sizes in pixels, which made it challenging to handle different screen sizes. LVGL, on the other hand, provides a flexbox layout. This layout can arrange items into rows or columns (tracks), handle wrapping, adjust the spacing between the items and tracks, and dynamically adjust the size of the items to fill the remaining space, while respecting their minimum and maximum width and height constraints. Flex layout in LVGL is a set of attributes that can be assigned to any object, such as <code>\"obj\"</code>. To make it easier to create transparent and invisible Flex containers, HASPmota has introduced the <code>flex</code> classes.</p> <p>Class <code>flex</code> defines a transparent object used as a container for LVGL flex layout. It is for example used to place buttons in the lower part of the screen in HASPmota demo.</p> <pre><code>{\"id\":100,\"obj\":\"flex\",\"x\":0,\"y%\":80,\"h%\":20,\"w%\":100,\"flex_main_place\":3}\n</code></pre> <p>Default values used for <code>flex</code>:</p> Default attribute Description <code>\"obj\":\"flex\"</code> <code>flex</code> is a subclass of <code>obj</code> <code>\"pad_all\":0</code> No padding <code>\"radius\":0</code> Rectangle object (no rounded corners) <code>\"border_width\":0</code> No border <code>\"margin_all\":0</code> No margin <code>\"bg_opa\":0</code> Background transparent <code>\"h%\":100</code> Default height of 100%, can be changed <code>\"w%\":100</code> Default width of 100%, can be changed <pre><code>{\"id\":100,\"obj\":\"flex\",\"x\":0,\"y\":188,\"h\":50,\"w%\":100,\"flex_main_place\":3}\n  # [sub-objects with \"parentid\":100]\n</code></pre> General flex attributes Description <code>flex_flow</code> Sets the layout flow<code>0</code>: (<code>lv.FLEX_FLOW_ROW</code>) Place the children in a row without wrapping<code>1</code>: (<code>lv.FLEX_FLOW_COLUMN</code>) Place the children in a column without wrapping<code>4</code>: (<code>lv.FLEX_FLOW_ROW_WRAP</code>) Place the children in a row with wrapping<code>5</code>: (<code>lv.FLEX_FLOW_COLUMN_WRAP</code>) Place the children in a column with wrapping<code>8</code>: (<code>lv.FLEX_FLOW_ROW_REVERSE</code>) Place the children in a row without wrapping but in reversed order<code>9</code>: (<code>lv.FLEX_FLOW_COLUMN_REVERSE</code>) Place the children in a column without wrapping but in reversed order<code>12</code>: (<code>lv.FLEX_FLOW_ROW_WRAP_REVERSE</code>) Place the children in a row with wrapping but in reversed order<code>13</code>: (<code>lv.FLEX_FLOW_COLUMN_WRAP_REVERSE</code>) Place the children in a column with wrapping but in reversed order <code>flex_main_place</code> Determines how to distribute the items in their track on the main axis.<code>0</code>: (<code>lv.FLEX_ALIGN_START</code>) means left on a horizontally and top vertically (default)<code>1</code>: (<code>lv.FLEX_ALIGN_END</code>) means right on a horizontally and bottom vertically<code>2</code>: (<code>lv.FLEX_ALIGN_CENTER</code>) simply center<code>3</code>: (<code>lv.FLEX_ALIGN_SPACE_EVENLY</code>) items are distributed so that the spacing between any two items (and the space to the edges) is equal (does not apply to <code>flex_track_place</code>) <code>flex_cross_place</code> Determines how to distribute the items in their track on the cross axis. E.g. if the items have different height place them to the bottom of the trackSame values as <code>flex_main_place</code> <code>flex_track_place</code> Determines how to distribute the tracksSame values as <code>flex_main_place</code> except <code>3</code>, <code>4</code> and <code>5</code> <code>flex_grow</code> (on child) Make one or more children fill the available space on the track. When more children have grow parameters, the available space will be distributed proportionally to the grow values. <code>pad_row</code> Sets the padding between the rows <code>pad_column</code> Sets the padding between the columns <p>Children object can also influence the flex layout with the folowing attributes:</p> Children flex attributes Description <code>flex_in_new_track</code> (bool) When <code>true</code> force item into a new line <code>flex_grow</code> Make one or more children fill the available space on the track. When more children have grow parameters, the available space will be distributed proportionally to the grow values. See LVGL documentation for more details."},{"location":"HASPmota/#fixed-fixed-layout","title":"<code>fixed</code> (fixed layout)","text":"<p>Fixed layout allows to create a transparent object in which you can place fixed position and fixed size object. This is equivalent to <code>obj</code> but fully transparent.</p> <p>It can be used as an alternative to <code>flex</code> above as a container used in flex layout.</p>"},{"location":"HASPmota/#label","title":"<code>label</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":10,\"obj\":\"label\",\"x\":0,\"y\":30,\"w\":240,\"h\":24,\"text\":\"[1. Instructions]\",\"text_font\":\"montserrat-20\"}\n</code></pre> <p>Attributes are all related to text content (see above).</p>"},{"location":"HASPmota/#btn","title":"<code>btn</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"btn\",\"x\":0,\"y\":60,\"w\":80,\"h\":30,\"bg_color\":\"#4f4f4f\",\"text_color\":\"#FFFF44\",\"radius\":10,\"text\":\"Disabled\",\"border_width\":3,\"border_side\":15,\"border_color\":\"#FFFF44\",\"border_opa\":210,\"enabled\":false}\n{\"id\":12,\"obj\":\"btn\",\"x\":100,\"y\":60,\"w\":80,\"h\":30,\"bg_color\":\"#4f4f4f\",\"text_color\":\"#FFFF44\",\"radius\":10,\"text\":\"Enabled\",\"border_width\":3,\"border_side\":15,\"border_color\":\"#FFFF44\",\"border_opa\":210}\n\n{\"id\":13,\"obj\":\"btn\",\"x\":0,\"y\":100,\"w\":80,\"h\":30,\"text_color\":\"#FFFF44\",\"radius\":0,\"text\":\"Disabled\",\"border_width\":3,\"border_side\":15,\"border_opa\":210,\"enabled\":false,\"bg_color\":\"#884488\",\"border_color\":\"#DD3300\"}\n{\"id\":14,\"obj\":\"btn\",\"x\":100,\"y\":100,\"w\":80,\"h\":30,\"text_color\":\"#FFFF44\",\"radius\":0,\"text\":\"Enabled\",\"border_width\":3,\"border_side\":15,\"bg_color\":\"#884488\",\"border_color\":\"#DD3300\"}\n</code></pre>"},{"location":"HASPmota/#switch","title":"<code>switch</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"switch\",\"x\":0,\"y\":60,\"w\":60,\"h\":30,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\"}\n{\"id\":12,\"obj\":\"switch\",\"x\":80,\"y\":60,\"w\":60,\"h\":30,\"toggle\":true,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\"}\n{\"id\":13,\"obj\":\"switch\",\"x\":160,\"y\":60,\"w\":60,\"h\":30,\"enabled\":false,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\"}\n{\"id\":14,\"obj\":\"switch\",\"x\":240,\"y\":60,\"w\":60,\"h\":30,\"toggle\":true,\"enabled\":false,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\"}\n\n{\"id\":21,\"obj\":\"switch\",\"x\":0,\"y\":100,\"w\":130,\"h\":30,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\",\"text\":\"On\",\"text_color\":\"#FFFF44\",\"text_color01\":\"#000000\"}\n{\"id\":22,\"obj\":\"switch\",\"x\":140,\"y\":100,\"w\":130,\"h\":30,\"toggle\":true,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\",\"text\":\"Off\",\"text_color\":\"#FFFF44\",\"text_color01\":\"#000000\"}\n</code></pre> Attribute name LVGL equivalent Details <code>toggle</code> <code>true</code> or <code>false</code>: read or change the value of the switch <code>bg_color</code> Color of the indicator when the switch is Off <code>bg_color11</code> Color of the indicator when the switch is On <code>bg_color20</code> Color of the knob <code>text_color</code> Color of the text when the switch if Off <code>text_color01</code> Color of the text when the switch if On <code>radius20</code> Radius of the knob."},{"location":"HASPmota/#checkbox","title":"<code>checkbox</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"checkbox\",\"x\":0,\"y\":60,\"w\":60,\"h\":30,\"text\":\"\",\"border_color10\":\"#FFFF88\",\"bg_color10\":\"#4F4F4F\",\"bg_color11\":\"#FF4400\"}\n{\"id\":12,\"obj\":\"checkbox\",\"x\":80,\"y\":60,\"w\":60,\"h\":30,\"toggle\":true,\"text\":\"\",\"border_color10\":\"#FFFF88\",\"bg_color10\":\"#4F4F4F\",\"bg_color11\":\"#FF4400\"}\n{\"id\":13,\"obj\":\"checkbox\",\"x\":160,\"y\":60,\"w\":60,\"h\":30,\"text\":\"\",\"enabled\":false,\"border_color10\":\"#FFFF88\",\"bg_color10\":\"#4F4F4F\",\"bg_color11\":\"#FF4400\"}\n{\"id\":14,\"obj\":\"checkbox\",\"x\":240,\"y\":60,\"w\":60,\"h\":30,\"text\":\"\",\"toggle\":true,\"enabled\":false,\"border_color10\":\"#FFFF88\",\"bg_color10\":\"#4F4F4F\",\"bg_color11\":\"#FF4400\"}\n</code></pre> Attribute name Details <code>toggle</code> <code>true</code> or <code>false</code>: read or change the value of the checkbox <code>bg_color</code> Color of the indicator when the checkbox is Off <code>bg_color11</code> Color of the indicator when the checkbox is On <code>text_color</code> Color of the text when the checkbox if Off <code>text_color01</code> Color of the text when the checkbox if On"},{"location":"HASPmota/#slider","title":"<code>slider</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"slider\",\"x\":0,\"y\":60,\"w\":100,\"h\":10,\"bg_color\":\"#FFFF88\",\"bg_color10\":\"#FFFF88\",\"bg_color20\":\"#FF4400\",\"val\":65}\n{\"id\":12,\"obj\":\"slider\",\"x\":0,\"y\":90,\"w\":180,\"h\":20,\"bg_color\":\"#4F4F4F\",\"bg_color10\":\"#00FF00\",\"bg_color20\":\"#FF4400\",\"val\":40,\"bg_opa\":255,\"border_color\":\"#FFFF88\",\"border_width\":2,\"pad_all\":6,\"radius\":6}\n{\"id\":13,\"obj\":\"slider\",\"x\":0,\"y\":120,\"w\":180,\"h\":15,\"bg_color\":\"#4F4F4F\",\"bg_opa\":255,\"bg_color10\":\"#4444FF\",\"bg_color20\":\"#FF4400\",\"val\":26,\"min\":-20,\"max\":30,\"bg_grad_color10\":\"#FF4400\",\"bg_grad_dir10\":2}\n</code></pre> Attribute name LVGL equivalent Details <code>bg_color</code> Color of the background (inactive) part of the slider, by default dimmed with <code>bg_opa</code> <code>bg_color10</code> Color of the active part of the slider <code>bg_color20</code> Color of the indicator <code>border_width</code> Width of the overall border, <code>0</code> by default <code>pad_all</code> Padding of the overall border, <code>0</code> by default <code>bg_grad_color10</code> End color of the active part of the slider when gradient is enabled <code>bg_grad_dir10</code> Gradient direction<code>0</code>: none<code>1</code>: Vertical (top to bottom) gradient<code>2</code>: Horizontal (left to right) gradient <code>min</code> (int) Minimum value <code>max</code> (int) Maximum value <code>val</code> (int) Current value"},{"location":"HASPmota/#bar","title":"<code>bar</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"bar\",\"x\":0,\"y\":60,\"w\":100,\"h\":10,\"bg_color\":\"#FFFF88\",\"bg_color10\":\"#FFFF88\",\"val\":65}\n{\"id\":12,\"obj\":\"bar\",\"x\":0,\"y\":90,\"w\":180,\"h\":20,\"bg_color\":\"#4F4F4F\",\"bg_color10\":\"#00FF00\",\"val\":40,\"bg_opa\":255,\"border_color\":\"#FFFF88\",\"border_width\":2,\"pad_all\":6,\"radius\":6}\n{\"id\":13,\"obj\":\"bar\",\"x\":0,\"y\":120,\"w\":180,\"h\":15,\"bg_color\":\"#4F4F4F\",\"bg_opa\":255,\"bg_color10\":\"#4444FF\",\"val\":26,\"min\":-20,\"max\":30,\"bg_grad_color10\":\"#FF4400\",\"bg_grad_dir10\":2}\n</code></pre> Attribute name LVGL equivalent Details <code>bg_color</code> Color of the background (inactive) part of the slider, by default dimmed with <code>bg_opa</code> <code>bg_color10</code> Color of the active part of the slider <code>border_width</code> Width of the overall border, <code>0</code> by default <code>pad_all</code> Padding of the overall border, <code>0</code> by default <code>bg_grad_color10</code> End color of the active part of the slider when gradient is enabled <code>bg_grad_dir10</code> Gradient direction<code>0</code>: none<code>1</code>: Vertical (top to bottom) gradient<code>2</code>: Horizontal (left to right) gradient <code>min</code> (int) Minimum value, inherited from parent <code>scale</code> if <code>parentid</code> refers to a <code>scale</code> <code>max</code> (int) Maximum value, inherited from parent <code>scale</code> if <code>parentid</code> refers to a <code>scale</code> <code>val</code> (int) Current value"},{"location":"HASPmota/#scale-scale_section-scale_line","title":"<code>scale</code>, <code>scale_section</code>, <code>scale_line</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"scale\",\"x\":10,\"y\":60,\"w\":200,\"h\":30,\"min\":10,\"max\":40,\"total_tick_count\":31,\"major_tick_every\":5,\"label_show\":true,\"line_color\":\"#FFFF88\",\"line_color10\":\"#00FF00\",\"line_color30\":\"#00FF00\",\"line_width\":2,\"line_width10\":2,\"line_width30\":2,\"length10\":10,\"length30\":5,\"pad_top\":10}\n  {\"id\":12,\"obj\":\"bar\",\"parentid\":11,\"y\":-8,\"w%\":100,\"h\":6,\"radius\":0,\"radius10\":0,\"bg_color\":\"#4F4F4F\",\"bg_color10\":\"#FFFF88\",\"val\":27}\n\n{\"id\":22,\"obj\":\"scale\",\"x\":240,\"y\":35,\"w\":74,\"h\":140,\"min\":0,\"max\":100,\"mode\":4,\"total_tick_count\":21,\"major_tick_every\":5,\"label_show\":true,\"line_color\":\"#4444FF\",\"line_color10\":\"#4444FF\",\"line_color30\":\"#AAAAFF\",\"line_width\":2,\"line_width10\":2,\"line_width30\":2,\"length10\":10,\"length30\":5,\"text_src\":[\"0 \u00b0C\", \"25 \u00b0C\", \"50 \u00b0C\", \"75 \u00b0C\", \"100 \u00b0C\"],\"bg_color\":\"#607D8B\",\"bg_opa\":127,\"pad_left\":16,\"radius\":8,\"pad_ver\":12}\n  {\"id\":23,\"obj\":\"scale_section\",\"parentid\":22,\"min\":75,\"max\":100,\"line_color\":\"#FF4400\",\"line_width\":3,\"line_color10\":\"#FF4400\",\"line_width10\":4,\"text_color10\":\"#FF4400\",\"line_color30\":\"#FF4400\",\"line_width30\":3}\n  {\"id\":24,\"obj\":\"bar\",\"parentid\":22,\"x\":-10,\"h%\":100,\"w\":6,\"radius\":0,\"radius10\":0,\"bg_color\":\"#4F4F4F\",\"bg_color10\":\"#AAAAFF\",\"val\":27}\n</code></pre> <p></p> <pre><code>{\"id\":21,\"obj\":\"scale\",\"x\":10,\"y\":60,\"w\":120,\"h\":120,\"min\":10,\"max\":40,\"mode\":8,\"bg_opa\":255,\"bg_color\":\"#662222\",\"radius\":32767,\"clip_corner\":true,\"label_show\":true,\"total_tick_count\":31,\"major_tick_every\":5,\"length10\":10,\"length30\":5,\"angle_range\":270,\"rotation\":135,\"arc_color\":\"#FFFF88\",\"line_color10\":\"#FFFF88\",\"line_color30\":\"#FFFF88\",\"arc_width\":2,\"line_width10\":2,\"line_width30\":2,\"length10\":10,\"length30\":5}\n  {\"id\":22,\"obj\":\"scale_line\",\"parentid\":21,\"line_color\":\"#00FF00\",\"line_width\":4,\"line_rounded\":true,\"needle_length\":50,\"val\":22}\n  {\"id\":23,\"obj\":\"scale_line\",\"parentid\":21,\"line_color\":\"#FF4400\",\"line_width\":6,\"line_rounded\":true,\"needle_length\":30,\"val\":33}\n\n{\"id\":31,\"obj\":\"scale\",\"x\":180,\"y\":80,\"w\":80,\"h\":80,\"min\":0,\"max\":100,\"mode\":16,\"bg_opa\":0,\"label_show\":true,\"total_tick_count\":21,\"major_tick_every\":5,\"text_src\":[\"0 \u00b0C\", \"25 \u00b0C\", \"50 \u00b0C\", \"75 \u00b0C\", \"100 \u00b0C\"],\"arc_color\":\"#4444FF\",\"line_color10\":\"#4444FF\",\"line_color30\":\"#AAAAFF\",\"text_color\":\"#AAAAFF\",\"arc_width\":2,\"line_width10\":2,\"line_width30\":2,\"length10\":10,\"length30\":5}\n  {\"id\":32,\"obj\":\"scale_section\",\"parentid\":31,\"min\":75,\"max\":100,\"arc_color\":\"#FF4400\",\"arc_width\":3,\"line_color10\":\"#FF4400\",\"line_width10\":4,\"text_color10\":\"#FF4400\",\"line_color30\":\"#FF4400\",\"line_width30\":3}\n  {\"id\":33,\"obj\":\"scale_line\",\"parentid\":31,\"line_color\":\"#AAAAFF\",\"line_width\":10,\"line_rounded\":true,\"needle_length\":30,\"val\":37}\n</code></pre> <p>Note: there is no current <code>val</code> on the scale object. It must be done with a second <code>bar</code> object for linear scale or with a <code>scale_meter</code> sub-object for circular scale.</p> <code>scale</code> attribute Details <code>mode</code> Set scale mode<code>0</code>: <code>lv.SCALE_MODE_HORIZONTAL_TOP</code><code>1</code>: <code>lv.SCALE_MODE_HORIZONTAL_BOTTOM</code><code>2</code>: <code>lv.SCALE_MODE_VERTICAL_LEFT</code><code>4</code>: <code>lv.SCALE_MODE_VERTICAL_RIGHT</code><code>8</code>: <code>lv.SCALE_MODE_ROUND_INNER</code><code>16</code>: <code>lv.SCALE_MODE_ROUND_OUTER</code> <code>min</code> (int) Minimum value <code>max</code> (int) Maximum value <code>total_tick_count</code> Set the number of total ticks <code>major_tick_every</code> Set a major tick being every Nth ticks <code>line_width</code> Set the line width of the scale line <code>arc_width</code> Set the line width of the scale line (for circular scale) <code>line_width10</code> Set the line width of the major ticks <code>line_width30</code> Set the line width of the minor ticks <code>line_color</code> Set the line color of the scale line <code>arc_color</code> Set the line color of the scale line (for circular scale) <code>line_color10</code> Set the line color of the major ticks <code>line_color30</code> Set the line color of the minor ticks <code>length10</code> Set the length of the major ticks <code>length30</code> Set the length of the minor ticks <code>label_show</code> (bool) Show or hide the labels <code>options</code> (array of string) Labels for major ticks. It is not necessary to end with an empty string. <code>angle_range</code> Set the angular range of a circular scale (in degrees 0..360) <code>rotation</code> Set the angular offset from the 3 o'clock position (clock-wise, in degrees 0..360) <p>You can define sub-scales to have a different rendering on the scale using a sub-object <code>scale_section</code></p> <pre><code>  {\"id\":13,\"obj\":\"scale_section\",\"parentid\":12,\"min\":75,\"max\":100,\"line_color\":\"#FF4400\",\"line_width\":3,\"line_color10\":\"#FF4400\",\"line_width10\":4,\"text_color10\":\"#FF4400\",\"line_color30\":\"#FF4400\",\"line_width30\":3}\n</code></pre> <code>scale_section</code> attribute Details <code>parentid</code> Set to the <code>id</code> of the <code>scale</code> it belongs to <code>min</code> (int) Minimum value of the sub-section <code>max</code> (int) Maximum value of the sub-section <code>line_width</code> Set the line width of the scale line <code>arc_width</code> Set the line width of the scale line (for circular scale) <code>line_width10</code> Set the line width of the major ticks <code>line_width30</code> Set the line width of the minor ticks <code>line_color</code> Set the line color of the scale line <code>arc_color</code> Set the line color of the scale line (for circular scale) <code>line_color10</code> Set the line color of the major ticks <code>line_color30</code> Set the line color of the minor ticks <code>length10</code> Set the length of the major ticks <code>length30</code> Set the length of the minor ticks <p>For circular scales, you can define zero or more line indicators with sub-objects <code>scale_line</code></p> <pre><code>  {\"id\":22,\"obj\":\"scale_line\",\"parentid\":21,\"line_color\":\"#00FF00\",\"line_width\":4,\"line_rounded\":true,\"needle_length\":50,\"val\":22}\n</code></pre> <code>scale_line</code> attribute Details <code>parentid</code> Set to the <code>id</code> of the <code>scale</code> it belongs to <code>val</code> (int) The value of the indicator line in the scale (between <code>min</code> and <code>max</code>) <code>line_width</code> Set the line width of the scale line <code>line_color</code> Set the line color of the scale line <code>line_rounded</code> (bool) Rounds both ends of the line <code>needle_length</code> Length of the line <p>For linear scales, you can just use a <code>bar</code> sub-object. It inherits <code>min</code> and <code>max</code> values from the parent <code>scale</code> object.</p>"},{"location":"HASPmota/#arc","title":"<code>arc</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"arc\",\"x\":10,\"y\":60,\"w\":100,\"h\":100,\"arc_color10\":\"#FFFF88\",\"bg_color20\":\"#FF4400\",\"min\":-20,\"max\":40,\"val\":26,\"text\":\"76%\",\"label_to_angle\":-20}\n{\"id\":12,\"obj\":\"arc\",\"x\":150,\"y\":60,\"w\":100,\"h\":120,\"arc_color10\":\"#00FF00\",\"bg_color20\":\"#FF4400\",\"val\":65,\"text\":\"Nominal\",\"angle\":-40,\"border_width20\":4,\"border_color20\":\"#FFFFFF\",\"end_angle\":310}\n</code></pre> Attribute name LVGL equivalent Details <code>start_angle</code> <code>bg_start_angle</code> Start angle of the arc background.Angles are in degrees in <code>0..360</code>] range.Zero degrees is at the middle right (3 o'clock) of the object and the degrees are increasing in clockwise direction. <code>end_angle</code> <code>bg_end_angle</code> End angle of the arc background. <code>start_angle1</code> <code>start_angle</code> Start angle of the arc indicator. <code>end_angle1</code> <code>end_angle</code> End angle of the arc indicator. <code>rotation</code> <code>rotation</code> Offset to the 0 degree position <code>type</code> <code>mode</code> Sets the arc mode<code>0</code>: <code>lv.ARC_MODE_NORMAL</code><code>1</code>: <code>lv.ARC_MODE_REVERSE</code><code>2</code>: <code>lv.ARC_MODE_SYMMETRICAL</code> <code>arc_color10</code> Sets the color of the arc indicator <code>border_width20</code> Border width of the indicator, <code>0</code> by default <code>border_color20</code> Border color of the indicator <code>bg_color20</code> Color of the indicator <code>text</code> Sets the text of the label, centered by default, can be turned with <code>label_to_angle</code> <code>label_to_angle</code> <code>rotate_obj_to_angle</code> Rotates the label to the current value, and sets an offset in pixels (positive is towards the outer, negative towards the inner) <code>pad_top2</code> <code>style_pad_top</code> Top padding for <code>lv.PART_KNOB</code> part <code>pad_bottom2</code> <code>style_pad_bottom</code> Bottom padding for <code>lv.PART_KNOB</code> part <code>pad_left2</code> <code>style_pad_left</code> Left padding for <code>lv.PART_KNOB</code> part <code>pad_right2</code> <code>style_pad_right</code> Right padding for <code>lv.PART_KNOB</code> part <code>pad_all2</code> <code>style_pad_all</code> Set all 4 padding for <code>lv.PART_KNOB</code> part (write-only) <code>radius2</code> <code>style_radius</code> Radius for <code>lv.PART_KNOB</code> part"},{"location":"HASPmota/#img","title":"<code>img</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"img\",\"x\":10,\"y\":60,\"raw\":\"iVBORw0KGgoAAAANSUhEUgAAADgAAABACAYAAABP97SyAAAACXBIWXMAAAeDAAAHgwGiB5NRAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAACLxJREFUaIHVmntwlNUZxn/vt7tZArmQAALBVoTaoEIoeKOmSgIK4gwJCSRltE4VlBS0M9bWsTNOq0yn/YMynakdRSiO2kq9ACEbqEBVSORmqwGHS7202mpF0USQ3ZDs9Xv7xzqTkOzlfLtbC89MZjLved7Lk3O+L+d7zxFV5XyFtFW7OVm8FOwlIJcCMdD9IKu13rcbQM5XgfLHucMYNqQFuCHBsKI8oAt9vz5/BTbXrgWWpaAoMPu8FCjNtcuAtWmJyvbzTqBsmj8by9oOeAzoX1j/64JyCdm04DrEasZMHADnjUDZVDMHS3cgFDlwO3zOCxREpLnmXizZCgx16LzmnH4GZWNjKa7QeqAuA+/N1Psa3DmvKgeQlSstKg59D5euBkY5D8A79ISXKKrn1AzKuiYPo040YvMThG9lFETxY3O1NvjeATgnZlCaa6aDLGAkS1HKkIxD9WKxSBfGxcFXLFC23+ylW0pwu8rBmgo6FeUGkK/nIHwvQq3W+V46K2cul6i01E1E7Rko00Amgl0GMgLwAiXAsJwlOxsJxUEOZrCpTSYh1m2HeyaUF8iEym57yJj4iEIWa80BTmBLoy5q2ZNoMOMZXNEmCxTuA67rb49h/aszWvzRW6GLvP8MXTg1huXNKIEZ9uGmUWt8HycjOBa4fLdUYrEK5dp0XIXAF3bh4SPBCe53QxdWRNWV7yhZqtDCI3SOuV+XrY2kIhoLbNomQ6WAVQIryGDtKQQ+i5W8+dqZy0Z9Eh0xyal/H+QoYt+jda3tRmwTgStekQp18TyQRWF9iOJ++0jwos6O4KTpUdtl+uIJoDzMCP8jWrU7aporrcDlu2QWFs1AsWlQU6hy8v3I2CN7z0yd0qt5pWnoO8mP1Oq8F0NOcqQUuLxNFiM8jZLnJKhTCJw5HhnZsat72qRuzb8gBXUnMW+dNrzQaxw7mcAftMt8UZr5KjcDQs8H4TFvvBKYPi2MuzAJazf5kXmmM5lYYOuwabbt2viJFTtxKC+me7zhSX7RkVmU7giqnDwavPjogeDkb9sqiT5u12m9r8kk1mCBW4pGIHQAF/Wzxvxiv9nujfb+ZUjoqmh8Z5IKnwJ7gA4RPsXmc1vII/4cXyIwg/hPyjgxrH/s7L7K/2F49BWDR/VOrW99Ik0dCQT6ip9FdXEyB4Wug57I0efyQxXdlvZ/MYQQNmPz2Jpq3ZcucdPLUmx5aER5AJiYgqpd0eH7tnXPuDxo55X0swdRnaYLW99OledsgVuKahFa0hUHoIL/b3mRg38aGro6ovpqzOaetbP0PRPf/mjqEI8VoAn4OSm+/RTp2tMz5b2/B8df08+8Q+t981LF7xO4TjxcUHgMuMS4OiF4Suy7Smq6nzH2SYIfviRlMQ/NCtek4nVFi9t9/sorI7jj/z9F52td67Zk/L6ezAUFd+JEHJwmJtW5EAfwuxv1416oAjak4o10n555R+mOzjJ317G4RVbLypVJe0vxgZVigfzIQT29KPOoP/2aA5+0eLJKg5938n0g6YwAWNjja4r2l1cPPdSOUs7lHYna919yAaYWzcXZ0rybOv8BY74DvNCgsbCHW4Cjaaju8iH/mdlYtHtfnit6RzJSXKDYtxpXoLRS63/SmJ8BnqjUgCUsIf5RmRKl7kDlbSUvTb5p56ixicYttosXlfmGuSOo5WQpZ4xHZ+rrwPMmXA/RyRPyuhJqsAgXXg3G3eLnqP/ifUNu1pAYD6LYJlwV5iSyW9hUmmfk98bcHOCx2fo+gumzPiOR0cKSqYYBPiMc2G/IzRkUs40HMO6uV2T0QKOF6jcMA+ynQWPmpeUIMV40pXpcXDzQZiFcaOYuR8yryh3GungXIWxEFr420GShJPvuOhtqf+qstNzgoSqNonSacNUerMUChpilkm5HleUQKpwx4iXQYgFBoyyWGv4hcg9R43PBQZNgAX4jV5tBb6ivAo0bxYX5EdrpgQYL+MzI1bIuNS8rdxheykTSdxAAUOHzgTYL5J1E5MHeer2z0nIDy0XKD9oBGPR1bwFvGTqX0Tx8uoNkOYGA6T75+Noq7RpotJDYXuNsLr3LmJsDLN8l4wDTlXMokdHi1Jm9iOGbVHUprcWmO5/sYfEwhndiFP6cOMTtGkR52TClB5tfGnKzwordUg7cbkhXsdmaaCD+wav6B/PU2oCvcJE53znuOyD5KmzAvKu+f80sPZ5oIC7wdPdWMNsOAYLyNC3DEzRjc4OeII8CxvFF+G2ysbjA+DL9jXkJMhTsVloLKsx9DLBRXJGWotUFiJOLPx+MVrYkG+xrt7m8jwKDXrMpUIZt7aOlcKEDn+TYPqIIT2GrB368uMf7pqmbwi8eqtKk54V9Ams6A8BPHZZVALIRX9E6WoeVOfTtQ8vwOYQiHcDNAFdGPFO8KiYb7I6x7aRsgA04mxChpfBV4DvOq9QeRB4h5nqc+lMfpKW3iZtThTcB9yFUDxx+1RtpfzY/ODNFhKglXPtlcyopBh++tJSMh9hB4vdaMoENvAG0gRxF7Q8RVzeibmKMxMU3Ua4BnQ0kPZKzlRP3lgZKI8kOX5UH1lTrqnTFJD4f9BXNR2nh/3yfdHN+aP/L3nCi2xzbHq+iRkl/wSCxgFr/VtB7si0wW8wN5Q26oCDw17CHW0zEQaoZWhBYg/BgFvVljQJbKsbFrL4jOeFwOMTNT1RqwDRG6iVY6/8V8Ra68bWNHEMW9Xg/iv/GrkiQ6vVz9aSTAOmfsVr/k1+29k13OjlFue2u8CqP2QXc5FQcOLnK1TqsDNt6CuRGp0myQBfo3SwIvJBpAOeX8XyF30VlNZj2UzNCDGU9Uf0ZDYGsVk5mtw2fkiGUFCxB5X5gfDYFDEAYZQM2q1joT3m5wBTZXYjdKC7cRTcieitQg/kpVX/ENwYizxG2n8l2xgYidzd+28TN6aIrsPV6hMuActBxIIXAcOL91x7gE+DfKMcQfR1lD3UBs85eBvgvt7U0RJwz7ZIAAAAASUVORK5CYII=\"}\n{\"id\":12,\"obj\":\"img\",\"x\":200,\"y\":60,\"scale\":350,\"src\":\"tasmota_logo\",\"image_recolor\":\"#FFFFFF\",\"image_recolor_opa\":255}\n</code></pre> <p>using the following image: </p> Attribute name LVGL equivalent Details <code>src</code> <code>src</code> Path to the image in the file-system<code>\"tasmota_logo\"</code> to use the embedded logo in Flash. Note that this logo is black, so it needs to be recolored to white on dark background <code>raw</code> You can embed directly a PNG image as a <code>base64</code> string, instead of a file <code>image_recolor</code> <code>style_image_recolor</code> Color used to recolor the image <code>image_recolor_opa</code> <code>style_image_recolor_opa</code> Opacity of image recoloring<code>0</code>: no recolor<code>255</code>: full recolor <code>scale</code><code>scale_x</code><code>scale_y</code> <code>scale</code> Zoom value, <code>256</code> (default) is no zoom, <code>128</code> is half size, <code>256</code> is double size<code>scale_x</code> and <code>scale_y</code> can be used to the scale independently horizontally and vertically (non-uniform scale) <code>angle</code> <code>angle</code> Angle of the image, in 1/10th of degrees. Range <code>0</code>..<code>3600</code> <code>antialias</code> <code>antialias</code> <code>true</code> (defaul) the transformations are higher quality but slower <p>Example of code to convert an image to <code>base64</code>:</p> <pre><code>f=open('logo-berry.png')\nraw=f.readbytes()\nf.close()\nf=open('logo-bery.b4','w')\nf.write(raw.tob64())\nf.close()\n</code></pre>"},{"location":"HASPmota/#roller","title":"<code>roller</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"roller\",\"x\":10,\"y\":55,\"options\":\"Option 1\\nOption 2\\nOption 3\\nOption 4\",\"val\":1,\"bg_color50\":\"#FF4400\",\"text_color\":\"#FFFF88\",\"text_color50\":\"#000000\",\"border_color\":\"#FFFF88\"}\n</code></pre> Attribute name LVGL equivalent Details <code>options</code> <code>options</code> (string) options separated by <code>\\n</code> <code>val</code> The number of the selected item, <code>0</code> (default) is the first item <code>bg_color50</code> Background color of the selected item <code>text_color</code> Text color of non-selected options <code>text_color50</code> Text color of the selected options <code>text</code> <code>selected_text</code> (read-only) Get the text of the currently selected item. The string is truncated to the first 256 bytes."},{"location":"HASPmota/#dropdown-and-dropdown_list","title":"<code>dropdown</code> and <code>dropdown_list</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"dropdown\",\"x\":10,\"y\":55,\"direction\":3,\"options\":\"Option 1\\nOption 2\\nOption 3\\nOption 4\",\"val\":1,\"bg_color50\":\"#FF4400\",\"text_color\":\"#FFFF88\",\"text_color50\":\"#FFFF88\",\"border_color\":\"#FFFF88\"}\n  {\"id\":12,\"obj\":\"dropdown_list\",\"parentid\":11,\"h\":90,\"text_color\":\"#EAEAEA\",\"bg_color51\":\"#FF4400\"}\n</code></pre> Attribute name Details <code>options</code> (string) options separated by <code>\\n</code> <code>val</code> The number of the selected item, <code>0</code> (default) is the first item <code>direction</code> Direction of the dropdown, the arrow symbol is automatically adjusted<code>0</code>: down<code>1</code>: up<code>2</code>: left<code>3</code>: right <code>bg_color50</code> Background color of the selected item <code>text_color</code> Text color of non-selected options <code>text_color50</code> Text color of the selected options <code>text</code> (read-only) Get the text of the currently selected item. The string is truncated to the first 256 bytes. <p>If you want to apply style to the <code>list</code> sub-object, you can define a <code>dropdown_list</code> with <code>parentid</code> referring to the <code>dropdown</code> object.</p> Attribute name Details <code>options</code> (string) options separated by <code>\\n</code> <code>bg_color51</code> Background color of the selected item <code>text_color</code> Text color of non-selected options"},{"location":"HASPmota/#spinner","title":"<code>spinner</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"spinner\",\"x\":10,\"y\":60,\"w\":100,\"h\":100,\"angle\":200,\"speed\":5000,\"arc_color\":\"#4F4F4F\",\"arc_color10\":\"#FFFF88\"}\n</code></pre> Attribute name LVGL equivalent Details <code>angle</code> The length of the spinning segment in degrees - can be changed after initial value since v12.1.1.1 <code>speed</code> The time for 1 turn in ms - can be changed after initial value since v12.1.1.1"},{"location":"HASPmota/#btnmatrix","title":"<code>btnmatrix</code>","text":"<p>Example:</p> <p></p> <p>Example from <code>pages.jsonl</code>:</p> <pre><code>{\"id\":11,\"obj\":\"btnmatrix\",\"x\":5,\"y\":60,\"w\":310,\"h\":125,\"bg_color\":\"#4F4F4F\",\"options\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"\\n\",\"6\",\"7\",\"8\",\"9\",\"0\",\"\\n\",\"Action1\",\"Action2\",\"\"],\"border_color30\":\"#FFFF88\",\"border_width30\":2,\"bg_color30\":\"#4F4F4F\",\"text_color30\":\"#FFFF88\",\"border_color\":\"#4F4F4F\"}\n</code></pre> Attribute name LVGL equivalent Details <code>options</code> (json array) Array of strings where each element is the label of a button. Use <code>\"\\n\"</code> for a new line of buttons, and end with an empty string <code>\"\"</code> <code>border_color</code> Color of the overall border <code>border_color30</code> Color of the border of each button <code>border_width30</code> Border width of each button <code>text_color30</code> Color of the inner text of each button <p>For <code>btnmatrix</code>, events generated contain an addtional suffix to indicate which button was pressed or released.</p> <p>Example: <code>p9b11_0</code> means page <code>9</code>, object id <code>11</code>, button <code>0</code></p> <pre><code>xx:xx:25.131 {'hasp': {'p9b11_0': {'event': 'changed'}}}\nxx:xx:25.134 {'hasp': {'p9b11_0': {'event': 'down'}}}\nxx:xx:25.520 {'hasp': {'p9b11_0': {'event': 'long'}}}\nxx:xx:25.670 {'hasp': {'p9b11_0': {'event': 'changed'}}}\nxx:xx:25.735 {'hasp': {'p9b11_0': {'event': 'release'}}}\nxx:xx:25.737 {'hasp': {'p9b11_0': {'event': 'up'}}}\n</code></pre>"},{"location":"HASPmota/#led","title":"<code>led</code>","text":"<p>Example:</p> <p></p> <p>Example from <code>pages.jsonl</code>:</p> <pre><code>{\"id\":11,\"obj\":\"led\",\"x\":10,\"y\":60,\"w\":20,\"h\":20,\"color\":\"#FF0000\"}\n{\"id\":12,\"obj\":\"led\",\"x\":60,\"y\":60,\"w\":20,\"h\":20,\"color\":\"#FF0000\",\"val\":200}\n{\"id\":13,\"obj\":\"led\",\"x\":110,\"y\":60,\"w\":20,\"h\":20,\"color\":\"#FF0000\",\"val\":0}\n\n{\"id\":21,\"obj\":\"led\",\"x\":10,\"y\":100,\"w\":20,\"h\":20,\"color\":\"#00FF00\"}\n{\"id\":22,\"obj\":\"led\",\"x\":60,\"y\":100,\"w\":20,\"h\":20,\"color\":\"#00FF00\",\"val\":200}\n{\"id\":23,\"obj\":\"led\",\"x\":110,\"y\":100,\"w\":20,\"h\":20,\"color\":\"#00FF00\",\"val\":0}\n\n{\"id\":31,\"obj\":\"led\",\"x\":10,\"y\":140,\"w\":20,\"h\":20,\"color\":\"#FFFF88\"}\n{\"id\":32,\"obj\":\"led\",\"x\":60,\"y\":140,\"w\":20,\"h\":20,\"color\":\"#FFFF88\",\"val\":200}\n{\"id\":33,\"obj\":\"led\",\"x\":110,\"y\":140,\"w\":20,\"h\":20,\"color\":\"#FFFF88\",\"val\":0}\n</code></pre> Attribute name LVGL equivalent Details <code>val</code><code>brightness</code> <code>set_brightness</code> The brightness from <code>0</code> (off) to <code>255</code> (on) <code>color</code> <code>set_color</code> The overall color of the led"},{"location":"HASPmota/#line","title":"<code>line</code>","text":"<p>Example:</p> <p></p> <p>Example from <code>pages.jsonl</code>:</p> <pre><code>{\"id\":11,\"obj\":\"line\",\"x\":0,\"y\":60,\"w\":100,\"h\":50,\"line_color\":\"#FFFF88\",\"line_width\":3,\"points\":[[0,0],[30,40],[65,15],[90,50]]}\n{\"id\":12,\"obj\":\"line\",\"x\":120,\"y\":60,\"w\":100,\"h\":50,\"line_color\":\"#00FF00\",\"line_width\":5,\"points\":[[0,0],[30,40],[65,15],[90,50]],\"y_invert\":true,\"line_rounded\":true}\n</code></pre> Attribute name LVGL equivalent Details <code>points</code> (JSON array) Array of 2-value arrays, each entry is a pointEx: <code>[[0,0],[30,40],[65,15],[90,50]]</code> <code>line_rounded</code> (bool) Make the end points of the lines rounded. <code>true</code>: rounded, <code>false</code>: perpendicular line ending <code>y_invert</code> (bool) <code>false</code>: y == 0 point is in the top of the object<code>true</code>: y == 0 will be the bottom of the object"},{"location":"HASPmota/#chart","title":"<code>chart</code>","text":"<p>This object is not part of OPENhasp.</p> <p>The <code>chart</code> object allows to track values over time and show them in a graph.</p> <p></p> <p>Example of <code>pages.jsonl</code>: <pre><code>{\"page\":10,\"id\":10,\"obj\":\"chart\",\"x\":10,\"y\":60,\"w\":230,\"h\":120,\"bg_color\":\"#440000\",\"border_color\":\"#FFFF44\",\"bg_opa\":100,\"border_color\":\"#0099EE\",\"border_width\":1,\"radius\":0,\"pad_all\":2,\"y_min\":0,\"y_max\":50,\"point_count\":50,\"height10\":0,\"width10\":0,\"v_div_line_count\":0,\"h_div_line_count\":5,\"line_color\":\"#555555\",\"line_width30\":3}\n\n{\"comment\":\"--- Add random values to chart every second ---\",\"berry_run\":\"tasmota.add_cron('*/1 * * * * *', def () import math var val = math.rand() % 50 global.p10b10.val = val val = math.rand() % 50 global.p10b10.val2 = val end, 'hm_every_1_s_chart')\"}\n</code></pre></p> <p>You can also add values programmatically:</p> <pre><code>global.p10b10.val = 10\nglobal.p10b10.val = 40\nglobal.p10b10.val = 30\nglobal.p10b10.val = 40\nglobal.p10b10.val = 20\n\nglobal.p10b10.val2 = 45\nglobal.p10b10.val2 = 35\nglobal.p10b10.val2 = 55\nglobal.p10b10.val2 = -5\nglobal.p10b10.val2 = 25\n</code></pre> Attribute name LVGL equivalent Details <code>x_min</code><code>x_max</code><code>y_min</code> or <code>y2_min</code><code>y_max</code> or <code>y2_max</code> <code>set_range</code> Set the minimum and maximum values for <code>x</code> or <code>y</code> scales. Default are 0..100 for both axis.<code>y2_min</code> and <code>y2_max</code> control the range for the second data series. <code>point_count</code> <code>point_count</code> Set the number of points to display in the chart. Default is <code>10</code>. Changing this value clears the content of the chart. <code>height10</code><code>width10</code> Set the height and width for dots for each value. Set to <code>0</code> to remove dots and live only lines. <code>v_div_line_count</code><code>h_div_line_count</code> <code>div_line_count</code> Set the number of division lines vertically and horizontally. Detault for <code>v_div_line_count</code> is <code>5</code>, for <code>h_div_line_count</code> is <code>3</code>.Change the division line color with <code>line_color</code>. <code>type</code> <code>chart_type</code> Change the chart type.<code>0</code>: Don't draw the series<code>1</code> (<code>LINE</code>): Connect the points with lines<code>2</code> (<code>BAR</code>): Draw columns.<code>3</code> (<code>SCATTER</code>): Draw points and lines in 2D (x,y coordinates). <code>series1_color</code><code>series2_color</code> <code>set_series_color</code> Sets the color for each series <code>val</code><code>val2</code> Add a value to the fist series with <code>val</code> and to second series with <code>val2</code>. <code>zoom_x</code><code>zoom_y</code> <code>zoom</code> Zoom into the chart in X or Y direction.<code>256</code> for no zoom, <code>512</code> double zoom. <code>update_mode</code> <code>update_mode</code> Set update mode of the chart object, default is <code>SHIFT</code>.<code>0</code>: (<code>SHIFT</code>) Shift old data to the left and add the new one the right<code>1</code>: (<code>CIRCULAR</code>) Add the new data in a circular way"},{"location":"HASPmota/#cpicker","title":"<code>cpicker</code>","text":"<p>The <code>cpicker</code> (color picker) object allows to select a color, encoded as <code>#RRGGBB</code> where RR/GG/BB are Hex values for Red/Green/Blue. Color Picker has 3 modes: \"hue\", \"saturation\", \"value\"; use long press to change mode.</p> <p></p> <p>Example of <code>pages.jsonl</code>: <pre><code>{\"id\":10,\"obj\":\"cpicker\",\"x\":20,\"y\":60,\"w\":120,\"h\":120,\"color\":\"#FFFF00\",\"mode\":\"hue\",\"scale_width\":20}\n</code></pre></p> Attribute name LVGL equivalent Details <code>color</code> <code>color_rgb</code> Set or read the current color as <code>#RRGGBB</code> string, where Red/Green/Blue are encoded as 2-digit hex. Example: <code>#FFFF00</code> is yellow. <code>mode</code> <code>mode</code> Set or read the current mode<code>hue</code> displays a hue ring<code>saturation</code> displays a saturation ring from 0 to white<code>value</code> displays a brightness ring from pure color to black <code>mode_fixed</code> <code>mode_fixed</code> (bool) Set or read the <code>mode_fixed</code> attribute. If <code>true</code>, there is no mode change on long-press. <code>scale_width</code> <code>arc_width</code> (int) Set or read the width of the ring <code>pad_inner</code> This attribute is ignored but present for OpenHASP compatibility. Since LVGL 8, there is no inner circle showing the color. There color is shown on the knob instead"},{"location":"HASPmota/#spangroup-styled-text","title":"<code>spangroup</code> (styled text)","text":"<p>Available (since Tasmota v13.4). This object is not part of OPENhasp.</p> <p>The <code>spangroup</code> object is equivalent to HTML <code>&lt;span&gt;</code> and allows to have a text area composed of multiple fragments, each fragment with its own style, size, font, color...</p> <p></p> <p>Example:</p> <pre><code>{\"id\":11,\"obj\":\"spangroup\",\"x\":0,\"y\":60,\"w\":300,\"h\":115,\"text_font\":\"robotocondensed-16\",\"bg_color\":\"#000088\",\"bg_opa\":255}\n  {\"id\":12,\"obj\":\"span\",\"parentid\":11,\"text\":\"This is \"}\n  {\"id\":13,\"obj\":\"span\",\"parentid\":11,\"text\":\"RED\",\"text_color\":\"#FF0000\",\"text_font\":\"montserrat-28\"}\n  {\"id\":14,\"obj\":\"span\",\"parentid\":11,\"text\":\" and this is \"}\n  {\"id\":15,\"obj\":\"span\",\"parentid\":11,\"text\":\"GREEN\",\"text_color\":\"#00FF00\",\"text_font\":\"montserrat-28\",\"text_decor\":1}\n  {\"id\":16,\"obj\":\"span\",\"parentid\":11,\"text\":\" underlined\"}\n  {\"id\":17,\"obj\":\"span\",\"parentid\":11,\"text\":\"\\nAnd this is almost transparent\",\"text_opa\":100,\"text_font\":\"montserrat-20\"}\n</code></pre> <p>You must first define a <code>spangroup</code> object, and add as many as <code>span</code> sub-objects. You need to define the <code>parentid</code> attribute to the <code>spangroup</code>.</p> <p>Note: span are parsed in the order in the jsonl file, not by id number. Text from span can be updated via rules, like normal HASPmota text.</p> Attribute name LVGL equivalent Details <code>parentid</code> Set to the <code>id</code> of the <code>spangroup</code> it belongs to <code>align</code> <code>set_align</code> Similar to <code>label</code> object<code>0</code>: (default) align auto<code>1</code>: align left<code>2</code>: align center<code>3</code>: align right <code>mode</code> <code>set_mode</code> Display modes:<code>0</code>: fixes the object size<code>1</code>: expand the object size to the text size but stay on a single line<code>2</code>: (default) keep width, break the too long lines and auto expand height <code>overflow</code> <code>set_overflow</code> Trucature modes:<code>0</code>: (default) truncates the text at the limit of the area<code>1</code>: will display an ellipsis <code>(...)</code> when text overflows the area <code>indent</code> <code>set_indent</code> Set the indent of the first line in pixels <code>max_lines</code> <code>set_max_lines</code> Set the maximum number of lines to be displayed in <code>mode</code>=<code>2</code>, negative values indicate no limit <p>Each <code>span</code> sub-object must have an explicit <code>parentid</code> to the <code>spangroup</code>, and accepts only the following attributes (mostly from <code>lv_style</code>):</p> Attribute name LVGL equivalent Details <code>text</code> <code>set_text</code> Sets the text of the <code>span</code> element, use <code>\\n</code> for a new line <code>text_color</code> <code>set_text_color</code> Sets the color of text <code>text_decor</code> <code>set_text_decor</code> Sets the text decorator, can be ORed<code>0</code>: none<code>1</code> underline<code>2</code>: strike-through <code>text_opa</code> <code>set_text_opa</code> Sets the text opacity<code>0</code>: transparent<code>255</code>: opaque <code>text_letter_space</code> <code>set_text_letter_space</code> Set the letter space in pixels <code>text_line_space</code> <code>set_text_line_space</code> Set the line space in pixels."},{"location":"HASPmota/#tabview","title":"<code>tabview</code>","text":"<p>Available (since Tasmota v14.4.2).</p> <p>The <code>tabview</code> can be used to organize content in tabs.</p> <p></p> <p>Example:</p> <pre><code>{\"id\":10,\"obj\":\"tabview\",\"x%\":5,\"y\":60,\"h%\":55,\"w%\":90,\"tab_bar_size\":40,\"btn_pos\":1,\"bg_color\":\"#222222\",\"border_width\":2,\"border_color\":\"#FFFF44\",\"val\":2}\n  {\"id\":51,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 1\",\"tab_bg_color\":\"#000000\",\"tab_bg_color01\":\"#FF4400\",\"tab_text_color\":\"#FFFF44\",\"tab_text_color01\":\"#FFFFFF\",\"tab_border_color\":\"#FFFF44\",\"tab_border_side\":1,\"tab_border_width\":0,\"tab_border_width01\":3}\n  {\"id\":52,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 2\",\"tab_bg_color\":\"#000000\",\"tab_bg_color01\":\"#FF4400\",\"tab_text_color\":\"#FFFF44\",\"tab_text_color01\":\"#FFFFFF\",\"tab_border_color\":\"#FFFF44\",\"tab_border_side\":1,\"tab_border_width\":0,\"tab_border_width01\":3}\n  {\"id\":53,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 3\",\"tab_bg_color\":\"#000000\",\"tab_bg_color01\":\"#FF4400\",\"tab_text_color\":\"#FFFF44\",\"tab_text_color01\":\"#FFFFFF\",\"tab_border_color\":\"#FFFF44\",\"tab_border_side\":1,\"tab_border_width\":0,\"tab_border_width01\":3}\n    {\"id\":61,\"obj\":\"switch\",\"x\":20,\"y\":10,\"w\":60,\"h\":30,\"parentid\":51,\"radius\":25,\"radius20\":25,\"bg_color\":\"#4f4f4f\",\"bg_color20\":\"#FFFF88\",\"bg_color11\":\"#FF4400\"}\n    {\"id\":71,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":52,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"bg_color50\":\"#FF4400\",\"text_color\":\"#FFFF88\",\"text_color50\":\"#FFFF88\",\"border_color\":\"#FFFF88\"}\n      {\"id\":72,\"obj\":\"dropdown_list\",\"parentid\":71,\"text_color\":\"#EAEAEA\",\"bg_color51\":\"#FF4400\"}\n    {\"id\":81,\"obj\":\"checkbox\",\"x\":15,\"y\":10,\"w\":120,\"h\":30,\"parentid\":53,\"text\":\" Nice tabview\",\"border_color10\":\"#FFFF88\",\"bg_color10\":\"#4F4F4F\",\"bg_color11\":\"#FF4400\",\"text_color\":\"#FFFF44\"}\n</code></pre> <p>You must first define a <code>tabview</code> object, and add as many as <code>tab</code> sub-objects. You need to define the <code>parentid</code> attribute to the <code>tabview</code>. Sub-objects are then placed within each <code>tab</code> as long as you define <code>parentid</code> to the <code>tab</code>.</p> <code>tabview</code> Attribute name LVGL equivalent Details <code>tab_bar_size</code> <code>tab_bar_size</code> (write-only) Set the vertical size of tab buttons. <code>bg_color</code> <code>bg_color</code> Set the background color for the content background of the sub-tabs <code>val</code> Set or read the index of the active tab (0..count-1). <code>count</code> (read-only) Read the number of tabs <code>text</code> (read-only) Read the label of the active tab <code>border_color</code> <code>border_color</code> Set the color of the overall border of tabview. <code>border_width</code> <code>border_width</code> Set the border size of the overall border of tabview. <code>tab</code> Attribute name LVGL equivalent Details <code>parentid</code> Set to the <code>id</code> of the <code>tabview</code> it belongs to. <code>text</code> Set the title of the tab button; cannot be changed once the tab is created. <code>tab_bg_color</code> Set the background color of the tab button when it is not selected. <code>tab_bg_color01</code> Set the background color of the tab button when it is selected. <code>tab_text_color</code> Set the text color of the tab button when it is not selected. <code>tab_text_color01</code> Set the text color of the tab button when it is selected. <code>tab_radius</code> Set the radius of the tab button. Set to <code>0</code> by default for rectangular tab buttons."},{"location":"HASPmota/#msgbox","title":"<code>msgbox</code>","text":"<p>The <code>msgbox</code> (message box) object allows to display a pop-up with a text content and one or multiple buttons. The pop-up can be made \"modal\" (not impemented yet).</p> <p></p> <p>Example of <code>pages.jsonl</code>: <pre><code>{\"id\":10,\"obj\":\"msgbox\",\"x\":0,\"y\":0,\"w%\":80,\"h\":100,\"text\":\"A message box with two buttons.\",\"border_color\":\"#FF4400\",\"bg_color\":\"#4f4f4f\",\"bg_opa\":200,\"buttons_bg_color\":\"#FF4400\",\"buttons_border_width\":3,\"buttons_border_color\":\"#FFFFFF\",\"text_color\":\"#FFFFFF\",\"options\":[\"Apply\",\"Close\"]}\n</code></pre></p> Attribute name LVGL equivalent Details <code>text</code> <code>content</code> Set the contect of the Message box. If you write a new value, it will add to the existing content (LVGL limitation) <code>options</code> (array of string, not empty) Labels for buttons <code>footer_&lt;X&gt;</code><code>header_&lt;X&gt;</code><code>title_&lt;X&gt;</code><code>content&lt;X&gt;</code><code>buttons_&lt;X&gt;</code> Prefix to set or read style attributes on sub-objects of the message box.Styles for <code>buttons_</code> cannot be read, and set the same style for all buttons. <code>border_color</code> Set the color of the border of the pop-up. <code>text_color</code> Set the text color of the content <code>bg_opa</code> Set the opacity of the pop-up, <code>255</code> (fully opaque) by default. <code>buttons_bg_color</code> Set the background color of all buttons. <code>buttons_border_width</code> Set the border width of all buttons. <code>buttons_border_color</code> Set the border color of all buttons."},{"location":"HASPmota/#qrcode","title":"<code>qrcode</code>","text":"<p>Example:</p> <p></p> <pre><code>{\"id\":11,\"obj\":\"qrcode\",\"qr_text\":\"https://tasmota.github.io/\",\"x\":85,\"y\":55,\"qr_size\":120,\"qr_light_color\":\"#FFFF88\",\"qr_dark_color\":\"#4F4F4F\"}\n</code></pre> Attribute name LVGL equivalent Details <code>qr_size</code> Size in pixels of the QRCode, always square (height = width). This cannot be changed once the object is created. <code>qr_dark_color</code> Color used for the dark pixels. This cannot be changed once the object is created. <code>qr_light_color</code> Color used for the light pixels. This cannot be changed once the object is created. <code>qr_text</code> (mandatory) String to encode as a QRCode, can be changed at any moment."},{"location":"HASPmota/#haspmota-styling","title":"HASPmota styling","text":"<p>Since v13.2.0.1, HASPmota includes styling extensions replicating OpenHASP Styling Properties.</p> <p>Styling attributes can include a 2-digit suffix to indicate which element and which state the styling attributes refers to:</p> <p>The part indexes are:</p> <ul> <li>00 = main part of the object (i.e. the background)</li> <li>10 = the indicator or needle, highlighting the the current value</li> <li>20 = the knob which can be used the change the value</li> <li>30 = the background of the items/buttons</li> <li>40 = the items/buttons (not implemented yet)</li> <li>50 = the selected item</li> <li>60 = major ticks of the gauge object</li> <li>70 = the text cursor</li> <li>80 = the scrollbar</li> <li>90 = other special part, not listed above</li> </ul> <p>The state indexes:</p> <ul> <li>00 = default styling</li> <li>01 = styling for toggled state</li> <li>02 = styling for pressed, not toggled state</li> <li>03 = styling for pressed and toggled state</li> <li>04 = styling for disabled not toggled state</li> <li>05 = styling for disabled and toggled state</li> </ul> <p>A <code>toggle</code> <code>btn</code> can be made to show <code>text</code> <code>yellow</code> when toggled ON with <code>\"text_color\":\"white\",\"text_color01\":\"yellow\"</code></p> <p>The following attributes accept styling suffix:</p> <ul> <li><code>radius</code></li> <li><code>border_side</code></li> <li><code>border_width</code></li> <li><code>border_color</code></li> <li><code>line_width</code></li> <li><code>bg_color</code></li> <li><code>bg_grad_color</code></li> <li><code>bg_grad_dir</code></li> <li><code>line_color</code></li> <li><code>pad_left</code></li> <li><code>pad_right</code></li> <li><code>pad_top</code></li> <li><code>pad_bottom</code></li> <li><code>pad_all</code></li> <li><code>text_color</code></li> </ul>"},{"location":"HASPmota/#tasmota-extensions","title":"Tasmota extensions","text":""},{"location":"HASPmota/#auto-dimming","title":"Auto-dimming","text":"<p>HASPmota has an auto-dimming features that triggers after a period of inactivity (i.e. no touch on the screen). The screen is first dimmed to lower brightness after <code>dimming_time</code> minutes and turned off after <code>dimming_duration</code> seconds. When dimmed or off, touch events are disabled, to prevent pressing on an invisible button and triggering unwanted behavior.</p> <p>Parameters are associated to <code>p0b0</code> (page <code>0</code> item <code>0</code>):</p> <pre><code>{\"page\":0,\"id\":0,\"dimming_time\":1,\"dimming_min\":35,\"dimming_duration\":30}\n</code></pre> <p>Parameters:</p> <ul> <li><code>dimming_time</code> number of minutes before changing from full brightness to 1/4 brightness. Default: <code>0</code> = off.</li> <li><code>dimming_duration</code> number of seconds before turning screen off. Default <code>30</code> seconds</li> <li><code>dimming_min</code> minimum visible value for DisplayDimmer that keeps the screen on. Default <code>1</code>. This used for screen that turn off the backlighting when <code>DisplayDimmer</code> is under a certain value.</li> </ul> <p>Events sent:</p> <ul> <li><code>{\"hasp\":{\"p0b0\":{\"idle\":\"short\"}}}</code> is sent when dimming is enabled</li> <li><code>{\"hasp\":{\"p0b0\":{\"idle\":\"long\"}}}</code> is sent when screen is turned off</li> <li><code>{\"hasp\":{\"p0b0\":{\"idle\":\"off\"}}}</code> is sent when screen is turned on again after a press on the screen</li> </ul>"},{"location":"HASPmota/#update-sensor-value-via-rules","title":"Update sensor value via rules","text":"<p>You can automatically adjust attributes <code>val</code> and <code>text</code> from sensor values via a simple rule engine.</p> attribute description val_rule Rule pattern to trigger an update of the <code>val</code> attribute.Example: <code>\"val_rule\":\"ESP32#Temperature\"</code> val_rule_formula Optional expression (using Berry) to transform the value extracted from the rule to the value pushed to <code>val</code>. This typically allows to adjust ranges of values.Input value is always converted to <code>float</code> not <code>int</code>. The input value is named <code>val</code>.Example: <code>\"val_rule_formula\":\"val / 1000\"</code> <p>Changing a <code>text</code> attribute from rules:</p> attribute description text_rule Rule pattern to trigger an update of the <code>text</code> attribute.Example: <code>\"text_rule\":\"ESP32#Temperature\"</code> text_rule_formula Optional expression (using Berry) to transform the value extracted from the rule to the value pushed to <code>val</code>. This typically allows to adjust ranges of values.Input value is always converted to <code>float</code> not <code>int</code>. The input value is named <code>val</code>.Example: <code>\"val_rule_formula\":\"val * 10\"</code> text_rule_format String format of the result string. The format uses Berry's <code>string.format()</code>, which is a subset of <code>printf</code> format.Example: <code>\"text_rule_format\":\"%2.1f \u00b0C\"</code>"},{"location":"HASPmota/#react-to-user-actions","title":"React to user actions","text":"<p>Every time the user touches an active element on the screen, HASPmota publishes internal events you can listen and react to. For example if you press a button <code>p1b10</code>, HASPmota publishes an event <code>{\"hasp\":{\"p1b10\":{\"event\":\"up\"}}</code> when the button is released. You can easily create a rule to react to this event.</p> <p>Example:</p> <pre><code>tasmota.add_rule(\"hasp#p1b10#event=up\", / -&gt; print(\"Button p1b10 pressed\"))\n</code></pre> <p>Events with value <code>changed</code> indicate that the value of the widgets has changed. Events are only fired if the change in value comes from a screen interaction. No event is fired when the value was changed programmatically. The new value is sent as <code>val</code> attribute, and for specific widgets (roller) a <code>text</code> attribute is sent for the label of the value. <code>{\"hasp\":{\"p1b1\":{\"val\":3,\"text\":\"A3\",\"event\":\"changed\"}}}</code></p> <p>Example:</p> <pre><code>tasmota.add_rule(\"hasp#p1b1#text\", / text-&gt; print(\"p1b1 text value=\", text))\n</code></pre>"},{"location":"HASPmota/#run-arbitrary-berry-code","title":"Run arbitrary Berry code","text":"<p>Inserting an attribute <code>berry_run</code> to any object will compile and run the embedded Berry code right after widget initialization. If you need the current widget object, it requires a special construct like: <code>\"berry_run\":\"return def (x) print(x) end\"</code></p> <p>One common use is to trigger sensors read every 2 seconds:</p> <pre><code>{\"comment\":\"--- Trigger sensors every 2 seconds ---\",\"berry_run\":\"tasmota.add_cron('*/2 * * * * *', def () tasmota.publish_rule(tasmota.read_sensors()) end, 'oh_every_5_s')\"}\n</code></pre>"},{"location":"HASPmota/#haspmota-fonts","title":"HASPmota fonts","text":"<p>HASPmota can use 3 types of LVGL fonts:</p> <ul> <li>embedded fonts, i.e. fonts included in Tasmota firmware</li> <li>binary bitmat fonts (extension <code>.lvfont</code>), stored in the Tasmota file-system using <code>lv_font_conv</code> tool. Tasmota includes various fonts pre-converted</li> <li>TrueType fonts (extension <code>.ttf</code>), stored in the Tasmota file-system. TrueType vector fonts can be scaled at any size and render well at high font-sizes, but require significant PSRAM memory. Bitmaps TrueType (BDF) are now supported since Tasmota v13.4</li> </ul>"},{"location":"HASPmota/#embedded-fonts","title":"Embedded fonts","text":"<p>Use attribute like <code>\"text_font\":\"&lt;font_name&gt;-&lt;font_size&gt;\"</code>. The default is <code>\"text_font\":\"robotocondensed-16\"</code></p> <p></p> Embedded font Details <code>robotocondensed-12</code><code>robotocondensed-16</code><code>robotocondensed-24</code> Default OpenHASP <code>montserrat-10</code><code>montserrat-14</code><code>montserrat-20</code><code>montserrat-28</code> Default LVGL normal font, including icons <code>unscii-8</code><code>unscii-16</code> Default LVGL, 8 px and 16 px pixel perfect font with only ASCII characters <code>seg7-8</code><code>seg7-10</code><code>seg7-12</code><code>seg7-14</code><code>seg7-16</code><code>seg7-18</code><code>seg7-20</code><code>seg7-24</code><code>seg7-28</code><code>seg7-36</code><code>seg7-48</code> 7 segments display, contains digits, space, ':' and '!' for a space of the size of ':'Sizes 8, 10, 12, 14, 16, 18 are pixel-perfect boldSizes 20, 24, 28, 36, 48 are dithered (2 bits per pixel) bold-italic"},{"location":"HASPmota/#embedded-symbols","title":"Embedded symbols","text":"<p>HASPmota combines icons from LVGL and from OpenHASP.</p> <p></p> <p>You can use the following icons fonts:</p> Embedded font Details <code>icons-10</code> Also contained in <code>montserrat-10</code> <code>icons-12</code> <code>icons-14</code> Also contained in <code>montserrat-14</code> <code>icons-18</code> <code>icons-20</code> Also contained in <code>montserrat-20</code> <code>icons-24</code> <code>icons-28</code> Also contained in <code>montserrat-28</code>"},{"location":"HASPmota/#embedded-special-fonts","title":"Embedded special fonts","text":"<p>The font <code>seg7</code> is used to look like 7-segment display. To improve readability, sizes up to 20 are straight, and sizes above 24 are slightly italic.</p> <p></p> Embedded font Details <code>seg7-8</code><code>seg7-10</code><code>seg7-12</code><code>seg7-14</code><code>seg7-16</code><code>seg7-18</code><code>seg7-20</code><code>seg7-24</code><code>seg7-28</code><code>seg7-36</code><code>seg7-48</code> 7 segments display, contains digits, space, ':' and '!' for a space of the size of ':'Sizes 8, 10, 12, 14, 16, 18 are pixel-perfect boldSizes 20, 24, 28, 36, 48 are dithered (2 bits per pixel) bold-italic"},{"location":"HASPmota/#binary-bitmap-fonts","title":"Binary bitmap fonts","text":"<p>Files of extension <code>.lvfont</code>, they are similar to embedded fonts but can be loaded dynamically from the file-system.</p> <p>Generally speaking, binary bitmap fonts are mostly used for low resolution font, or they take too much memory. For larger font, prefer TrueType fonts (see below).</p>"},{"location":"HASPmota/#pixel-perfect-fonts","title":"Pixel-perfect fonts","text":"<p>Pixel-perfect fonts don't use dithering and are specially designed for low resolution monochrome displays.</p> <p>example: </p> <p>Same image zoomed x2 </p> <p><code>unscii-8</code> (bottom font) is embedded by default.</p> <p>To use the other fonts, add the corresponding file to the Tasmota file system.</p> <p>Fonts below are from KreativeKorp</p> <ul> <li><code>Berkelium64.lvfont</code> Berkelium (BSW) GEOS System Font</li> <li><code>PrintChar21.lvfont</code> The Ultimate Apple II Font</li> <li><code>Shaston320.lvfont</code> Shaston GS/OS System Font</li> </ul> <p>Fonts below are from Daniel Linssen </p> <ul> <li><code>m5x7.lvfont</code> https://managore.itch.io/m5x7</li> <li><code>m3x6.lvfont</code> https://managore.itch.io/m3x6</li> </ul> <p>Here is the HASPmota template for the screen above:</p> <pre><code>{\"page\":0,\"comment\":\"---------- Upper stat line ----------\"}\n{\"id\":0,\"text_color\":\"#FFFFFF\"}\n{\"id\":11,\"obj\":\"label\",\"x\":0,\"y\":0,\"w\":320,\"pad_right\":90,\"h\":22,\"bg_color\":\"#D00000\",\"bg_opa\":255,\"radius\":0,\"border_side\":0,\"text\":\"Tasmota\",\"text_font\":\"montserrat-20\"}\n\n{\"id\":15,\"obj\":\"lv_wifi_arcs\",\"x\":291,\"y\":0,\"w\":29,\"h\":22,\"radius\":0,\"border_side\":0,\"bg_color\":\"#000000\",\"line_color\":\"#FFFFFF\"}\n{\"id\":16,\"obj\":\"lv_clock\",\"x\":232,\"y\":3,\"w\":55,\"h\":16,\"radius\":0,\"border_side\":0}\n\n{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"id\":5,\"obj\":\"label\",\"x\":2,\"y\":30,\"w\":316,\"text\":\"Berkelium 74192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"A:Berkelium64.lvfont\"}\n{\"id\":6,\"obj\":\"label\",\"x\":2,\"y\":55,\"w\":316,\"text\":\"PrintChar21 192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"A:PrintChar21.lvfont\"}\n{\"id\":7,\"obj\":\"label\",\"x\":2,\"y\":80,\"w\":316,\"text\":\"Shaston320 192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"A:Shaston320.lvfont\"}\n{\"id\":8,\"obj\":\"label\",\"x\":2,\"y\":105,\"w\":316,\"text\":\"m5x7 192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"A:m5x7.lvfont\"}\n{\"id\":9,\"obj\":\"label\",\"x\":2,\"y\":130,\"w\":316,\"text\":\"m3x6 192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"A:m3x6.lvfont\"}\n\n{\"id\":99,\"obj\":\"label\",\"x\":2,\"y\":170,\"w\":316,\"text\":\"unscii-8 192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"unscii-8\"}\n</code></pre>"},{"location":"HASPmota/#truetype-fonts","title":"TrueType fonts","text":"<p>Add support for TTF fonts in HASPmota. The attributes needs to specify the font name and the size <code>\"text_font\":\"sketchbook.ttf-32\"</code></p> <p>Example:</p> <p></p> <p>Related <code>pages.jsonl</code> file:</p> <pre><code>{\"page\":0,\"comment\":\"---------- Upper stat line ----------\"}\n{\"id\":0,\"text_color\":\"#FFFFFF\"}\n{\"id\":11,\"obj\":\"label\",\"x\":0,\"y\":0,\"w\":320,\"pad_right\":90,\"h\":22,\"bg_color\":\"#D00000\",\"bg_opa\":255,\"radius\":0,\"border_side\":0,\"text\":\"Tasmota\",\"text_font\":\"montserrat-20\"}\n\n{\"id\":15,\"obj\":\"lv_wifi_arcs\",\"x\":291,\"y\":0,\"w\":29,\"h\":22,\"radius\":0,\"border_side\":0,\"bg_color\":\"#000000\",\"line_color\":\"#FFFFFF\"}\n{\"id\":16,\"obj\":\"lv_clock\",\"x\":232,\"y\":3,\"w\":55,\"h\":16,\"radius\":0,\"border_side\":0}\n\n{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"id\":1,\"obj\":\"label\",\"x\":2,\"y\":40,\"w\":316,\"text\":\"sketchbook-32\\n192.168.x.x ABCDEF\\nThe quick brown fox jumps over the lazy dog\",\"text_font\":\"sketchbook.ttf-32\"}\n</code></pre>"},{"location":"HC-SR04/","title":"HC-SR04 ultrasonic ranging sensor","text":"This feature is included only in <code>tasmota-sensors</code> binary <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SR04\n#define USE_SR04                            // Add support for HC-SR04 ultrasonic devices (+1k code)\n    #define SR04_MAX_SENSOR_DISTANCE  500   // Set sensor max detection distance    #endif\n</code></pre></p> <p>HC-SR04 (HC-SR04P and JSN-SR04T) is an ultrasonic ranging sensor. Provides 2cm to 300cm of non-contact measurement functionality with a ranging accuracy that can reach up to 3mm. Each HC-SR04 module includes an ultrasonic transmitter, a receiver and a control circuit. See HC-SR04 Ultrasonic Sensor for more information.</p> <p>Buy example:  - AliExpress - Sparkfun</p> <p>The US-100 can also be use as a HC-SR04 if you remove the jumper at the back (check Adafruit documentation).</p>"},{"location":"HC-SR04/#configuration","title":"Configuration","text":""},{"location":"HC-SR04/#wiring","title":"Wiring","text":"HC-SR04 ESP Vcc 5V GND GND Trig GPIOx Echouse voltage divider! GPIOy <p>The HC-SR04 operates at 5V and therefore the echo signal will be 5V as well. Connecting the echo pin via a voltage divider (see schematic) will divide the 5V to 3.3V, which is the operating voltage of an ESP8266.</p> <p>There is a variant of the HC-SR04, called HC-SR04P. It mainly operates at 3.3V and then it doesn't need the voltage divider but you will notice a range drop of about 1 meter. </p>"},{"location":"HC-SR04/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>SR04 Tri (69)</code></li> <li>GPIOy to <code>SR04 Ech (70)</code></li> </ol> <p></p>"},{"location":"HC-SR04/#tasmota-main","title":"Tasmota Main","text":"<p>After a reboot webUI displays the HC-SR04 distance.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response: <pre><code>{\"Time\":\"2019-01-01T22:42:35\",\"SR04\":{\"Distance\":16.754}}\n</code></pre></p>"},{"location":"HDMI_CEC/","title":"HDMI CEC","text":"This feature is not included in standard Tasmota builds. <p>When compiling your build add the following flag to the build environment or <code>user_config_override.h</code>: <pre><code>#define USE_HDMI_CEC\n</code></pre></p> This feature relies on I2C support, and may not compile if this is not enabled. <p>If you encounter this issue, add the following flag to the build environment or <code>user_config_override.h</code>: <pre><code>#ifndef USE_I2C\n#define USE_I2C\n#endif\n</code></pre></p>"},{"location":"HDMI_CEC/#what-is-hdmi-cec","title":"What is HDMI CEC?","text":"<p>HDMI CEC is a feature of HDMI designed to control HDMI connected devices by using only one remote controller; so, individual CEC enabled devices can command and control each other without user intervention, for up to 15 devices.</p> <p>This feature enables a simple Tasmota device plugged to any HDMI port of your home equipment, to control the TV and other equipments, with a protocol more standard and robust than Infra-Red.</p>"},{"location":"HDMI_CEC/#hardware-needed","title":"Hardware needed","text":"<p>HDMI CEC needs only 3 GPIOs to be connected to an HDMI port. You can use a simple ESP8266 Wemos D1 Mini plugged with Dupont cables to an HDMI pass-through like these devices from Alix</p> <p>The GPIOs from ESP devices are electrically compatible with HDMI specifications (running at 3.3V logic levels, and the ESP is able to emulate an open-drain communication line by switching its pin input state), so you can simply connect GPIOs with no additional hardware components:</p> <p></p> ESP8266 Wemos D1 Mini Configuration HDMI GPIO 2 D4 HDMI CEC HDMI Pin 13On the Wemos D1 Mini (and possibly other dev boards), GPIO2 is connected to a blue LED which can act as a visual indicator of CEC traffic. GPIO 4 D2 I2C SDA HDMI Pin 16 GPIO 5 D1 I2C SCL HDMI Pin 15 Ground HDMI Pin 17 +5V HDMI Pin 18If another device is present on the same HDMI port by using a passthrough adapter such as the one linked above, the other device provides +5V with enough power for ESP8266. In such cases, you don't need an external power (tested with AppleTV). However, if you are using the Tasmota device in a standalone capacity (without a further device connected), you may need to supply 5V from the ESP's power source to cause the TV to detect the port as active, and listen to and broadcast commands. <p>Below is the template:</p> <p><code>Template {\"NAME\":\"HDMI CEC\",\"GPIO\":[1,1,9824,1,640,608,1,1,1,1,1,1,1,1],\"FLAG\":0,\"BASE\":18}</code></p>"},{"location":"HDMI_CEC/#quick-start-and-quick-tour","title":"Quick start and quick tour","text":"<p>HDMI CEC auto-detects all parameters and does not need specific configuration, although you may override the default configuration if needed. By default, Tasmota announces itself as a \"Playback Device\" on the HDMI bus.</p> <p>Logs during boot: <pre><code>00:00:00.002 HDW: ESP8266EX\n00:00:00.005 UFS: FlashFS mounted with 1992 kB free\n00:00:00.063 CFG: Loaded from File, Count 422\n00:00:00.118 QPC: Reset\n00:00:00.130 Project tasmota - Tasmota Version 13.1.0.2(tasmota-4M)-2_7_4_9(2023-09-01T20:20:26)\n00:00:00.247 CEC: HDMI CEC initialized on GPIO 2, Logical address 8, Physical address 0x1000\n</code></pre></p> <p>Extra logs when <code>Weblog 3</code>: <pre><code>00:00:00.001 HDW: ESP8266EX\n00:00:00.007 UFS: FlashFS mounted with 1992 kB free\n00:00:00.066 CFG: Loaded from File, Count 426\n00:00:00.072 QPC: Count 1\n00:00:00.074 CFG: CR 342/699, Busy 0\n00:00:00.082 SRC: Restart\n00:00:00.083 Project tasmota - Tasmota Version 13.1.0.2(tasmota-4M)-2_7_4_9(2023-09-01T20:20:26)\n00:00:00.084 CEC: trying to read physical address\n00:00:00.110 CEC: successfully read EDID 256 bytes, extensions count 1\nn00:00:00.111 CEC: physical address found: 0x1000\n00:00:00.152 CEC: Packet sent: 44 ACK\n00:00:00.199 CEC: Packet sent: 88 NAK\n00:00:00.200 CEC: HDMI CEC initialized on GPIO 2, Logical address 8, Physical address 0x1000\n00:00:00.678 CEC: Packet sent: 8F84100004 ACK\n</code></pre></p> <p>In the above example, the first part probes I2C to get EDID data and compute the physical address. Tasmota sends <code>44</code> message to check if Logical address <code>4</code> is in use. Since the message is <code>ACK</code>ed it is in use (here by an AppleTV plugged on the same HDMI port). It tries address <code>8</code> with packet <code>88</code>. <code>NAK</code> indicates that the address is free, so it is claimed by Tasmota. The message <code>8F84100004</code> indicates to the bus that logical device <code>8</code> has the physical address <code>0x1000</code>, i.e. connected the HDMI port 1 of TV.</p>"},{"location":"HDMI_CEC/#commands","title":"Commands","text":"Command Parameters HdmiType : set the CEC device type (0..15 as per CEC specs)The default value is <code>4</code> (Playback Device). Changes require a restart to renegotiate a new HDMI logical address.Possible values are:<code>0</code>: TV<code>1</code>: Recording Device<code>2</code>: Reserved<code>3</code>: Tuner<code>4</code>: Playback Device<code>5</code>: Audio System HdmiSend Send a payload to the TV or to any device<code>HdmiSend &lt;hex&gt;</code>: sends the <code>&lt;hex&gt;</code> payload to the TV<code>HdmiSend { [\"To\": &lt;to&gt;, ] \"Data\":\"&lt;hex&gt;\"}</code> gives more control about the target.<code>&lt;to&gt;</code> is the logical address of the target, default is <code>0</code> which is the TV.<code>&lt;hex&gt;</code> is the payload, being an encoded CEC command. Note that the byte which describes the requesting and target device does not need to be added; it will be calculated from the logical address which Tasmota has claimed.Examples:<code>HdmiSend 8F</code> or <code>HdmiSend {\"Data\":\"8F\"}</code> - ask the power status of the TV<code>HdmiSend {\"To\":4,\"Data\":\"8C\"}</code> - ask its vendor id to logical address <code>4</code>"},{"location":"HDMI_CEC/#receiving-and-parsing-payloads","title":"Receiving and parsing payloads","text":"<p>Currently, payloads are passed as HEX data without any encoding/decoding.</p> <p>Whenever a message is received on the CEC bus, a payload using the following syntax is triggered and can be matched with a Rule. Only messages addressed to Tasmota are published as payloads in MQTT; all messages not adressed to Tasmota are masked to avoid generating too much traffic. Note: the total traffic can be monitored with loglevel 3.</p> <p>Received payloads generate an Rule event as follows: <pre><code>{\"HdmiReceived\":{\"From\":&lt;from&gt;,\"To\":&lt;to&gt;,\"Data\":\"&lt;hex&gt;\"}}\n</code></pre></p> <p>Example: command <code>HdmiSend 8F</code> <pre><code>20:07:59.449 CMD: HdmiSend 8F\n20:07:59.454 RSL: RESULT = {\"HdmiSend\":\"Done\"}\n20:07:59.632 RSL: SENSOR = {\"HdmiReceived\":{\"From\":0,\"To\":8,\"Data\":\"9001\"}}\n</code></pre> In the above, Tasmota sends command <code>8F</code> (Give Device Power Status) to query the power status of the TV. The response <code>9001</code> (command <code>90</code>: Report Power Status) indicates that the TV is in Standby mode (the value of <code>01</code>).</p>"},{"location":"HDMI_CEC/#turning-the-tv-on","title":"Turning the TV on","text":"<p>Command: <code>HdmiSend 04</code></p>"},{"location":"HDMI_CEC/#turning-the-tv-off","title":"Turning the TV off","text":"<p>Command: <code>HdmiSend 36</code></p>"},{"location":"HDMI_CEC/#advanced-usage","title":"Advanced usage","text":"<p>When setting loglevel 3 (ex: <code>WebLog 3</code>), you see all messages being published in the CEC bus. They all generate an internal JSON event <code>HdmiReceived</code> that can be used by a rule.</p> <p>The following commands are for advanced users or specific use-cases:</p> Command Parameters HdmiSendRaw <code>&lt;hex&gt;</code>: send a raw payload to the HDMI CEC bus.This gives full control over messages and allows to impersonate another device. Note that if using this command, unlike <code>HdmiSend</code>, the address byte must be included.<code>HdmiSendRaw 408F</code> will issue a command that asks the TV for its power status, and report it to the device at logical address <code>4</code> (which may not be the Tasmota device that actually issued the command). HdmiAddr : set the default HDMI Physical Address in case it cannot be discovered.The default value is <code>0x1000</code> which is HDMI Port 1 on the TVThis value is only used if the I2C port is not connected or if the discovery failes.If no argument is provided, this command returns the current physical adress. <p>The CEC-O-MATIC tool is handy to decode and encode payloads. Note that it does take into account the addressing byte; you may need to remove it if you are sending commands.</p>"},{"location":"HLK-LD2410/","title":"HLK-LD2410 24GHz mmWave presence sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_LD2410\n#define USE_LD2410\n#endif\n</code></pre></p> <p>This feature is designed only to work with HLK-LD 2410, HLK-LD2410B and HLK-LD2410C modules. To work with the HLK-LD2410S module see here.</p> <p> </p>"},{"location":"HLK-LD2410/#configuration","title":"Configuration","text":""},{"location":"HLK-LD2410/#wiring","title":"Wiring","text":"HLK-LD2410(B,C) ESP GND GND VCC 5V TX GPIOx RX GPIOy OUT GPIOz <p>Warning: The power supply voltage of the module is 5V, and the power supply capacity of the input power supply is required to be greater than 200mA.The module IO output level is 3.3V!</p>"},{"location":"HLK-LD2410/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>LD2410 Tx</code></li> <li>GPIOy to <code>LD2410 Rx</code></li> <li>GPIOz to <code>Switch</code> or <code>Button</code></li> </ul> Settings example <p></p>"},{"location":"HLK-LD2410/#usage","title":"Usage","text":"<p>Tasmola is ready to read the status packet from the LD2410 module</p> <p></p> <p>Console output: <pre><code>12:52:46.234 RSL: SENSOR = {\"Time\":\"2024-11-09T12:52:46\",\"LD2410\":{\"Distance\":[200.0,181.0,144.0],\"Energy\":[13,100]}}\n</code></pre></p> <p>If an object is detected, a report will be sent every second. You can disable sending every second by setting <code>SetOption160</code> to <code>1</code></p>"},{"location":"HLK-LD2410/#commands","title":"Commands","text":"<p>Set factory default settings: <pre><code>LD2410Duration 0\n</code></pre></p> <p>Set no-one duration in seconds (default 5): <pre><code>LD2410Duration 1..65535\n</code></pre></p> <p>Set moving distance sensitivity for up to 9 gates (at 0.75 meter interval): <pre><code>LD2410MovingSens 50,50,40,30,20,15,15,15,15\n</code></pre></p> <p>Set static distance sensitivity for up to 9 gates (at 0.75 meter interval): <pre><code>LD2410StaticSens 0,0,40,40,30,30,20,20,20\n</code></pre></p>"},{"location":"HLK-LD2410/#engineering-mode","title":"Engineering mode","text":"<p>Start/stop engineering mode: <pre><code>LD2410EngineeringStart\nLD2410EngineeringEnd\n</code></pre></p> <p>Read last sensors received in engineering mode command and output: <pre><code>LD2410Get\n</code></pre> <pre><code>13:40:21.997 RSL: RESULT = {\"LD2410\":{\"Moving energy\":[13,12,10,9,9,8,1,4,4],\"Static energy\":[0,0,100,100,45,32,147,15,5],\"Light\":103,\"Out_pin\":1}}\n</code></pre></p> <p>In engineering mode, the main page additionally displays the obtained values for moving and static targets:</p> <p></p> <p>Light sensor available if installed on board</p>"},{"location":"HLK-LD2410/#rules","title":"Rules","text":"<p>You can use the LD2410 trigger to create rules, example: <pre><code>rule1 ON LD2410 DO state ENDON\n</code></pre></p> <p>If <code>SetOption160</code> is set to <code>1</code> rules wii be triggered only in log interval. Set <code>SetOption160</code> to <code>0</code> for trigger on detected piople</p>"},{"location":"HLK-LD2410S/","title":"HLK-LD2410S Low energy 24GHz mmWave presence sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_LD2410S\n#define USE_LD2410S\n#endif\n</code></pre></p> <p>This feature is designed only to work with HLK-LD 2410S module. To work with the HLK-LD2410(B,C) modules see here.</p> <p></p>"},{"location":"HLK-LD2410S/#configuration","title":"Configuration","text":""},{"location":"HLK-LD2410S/#wiring","title":"Wiring","text":"HLK-LD2410S ESP GND GND 3V3 3.3V OT1 GPIOx RX GPIOy OT2 GPIOz <p>Warning: The power supply voltage of the module is 3.3V</p>"},{"location":"HLK-LD2410S/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>LD2410S Rx</code></li> <li>GPIOy to <code>LD2410S Tx</code></li> <li>GPIOz to <code>Switch</code> or <code>Button</code></li> </ul> Settings example <p></p>"},{"location":"HLK-LD2410S/#usage","title":"Usage","text":"<p>Tasmola is ready to read the status packet from the LD2410S module</p> <p></p> <p>Console output: <pre><code>15:46:09.267 RSL: SENSOR = {\"Time\":\"2024-11-09T15:46:09\",\"LD2410S\":{\"Distance\":196.0, \"People\":2}}\n</code></pre> Where People values: 0/1 - not detected, 2/3 - detected</p>"},{"location":"HLK-LD2410S/#commands","title":"Commands","text":"<ul> <li>Reread common, trigger and hold parameters from device (use this command after change module settings or after <code>LD2410S_AutoUpdate</code> command): <pre><code>LD2410S_ReRead\n</code></pre></li> <li>Show previously received parameters on startup or after <code>LD2410S_ReRead</code> command: <pre><code>LD2410S_Parameters\n</code></pre> and result: <pre><code>15:55:56.399 RSL: RESULT = {\"LD2410S_Common\":{\"Near Door\": 0,\"Far Door\":16,\"Hold Time\":10,\"Status freq\":10,\"Distance freq\":10,\"Response speed\":5},\"Trigger values\":[47,46,37,35,31,30,31,32,31,30,29,31,30,29,27,29],\"Hold values\":[45,45,34,32,30,29,30,31,30,29,28,30,29,28,26,28]}\n</code></pre></li> <li>Set common parameters: near door, far door, hold_time, status_freq, distance_freq, response_speed (see manual): <pre><code>LD2410S_SetCommon 0-16,1-16,10-120,5-80,5-80,5/10\n</code></pre></li> <li>Set trigger values (the value at which the status changes to \"people\"): <pre><code>LD2410S_SetTrigger n,n1..n16\n</code></pre></li> <li>Set hold values (the value of holding the \"people\" status): <pre><code>LD2410S_SetHold n,n1..n16\n</code></pre></li> <li>Set device output mode <code>0</code>-short, <code>1</code>-normal: <pre><code>LD2410S_Out_Mode 0/1\n</code></pre> Console output in short mode: <pre><code>16:09:49.247 RSL: SENSOR = {\"Time\":\"2024-11-09T16:09:49\",\"LD2410S\":{\"Distance\":0.0, \"People\":0}}\n</code></pre> Console output in normal mode: <pre><code>16:22:59.255 RSL: SENSOR = {\"Time\":\"2024-11-09T16:22:59\",\"LD2410S\":{\"Distance\":187.0, \"People\":2, \"Energy\":[0,0,209,217,86,131,104,141,80,128,116,253,251,209,51,232]}}\n</code></pre></li> <li> <p>Start autoupdate trigger and hold thresholds/ Params: trigger_scale,retension_factor,scan_time: <pre><code>LD2410S_AutoUpdate 2,1,60\n</code></pre> Concole output: <pre><code>16:29:58.239 RSL: SENSOR = {\"Time\":\"2024-11-09T16:29:58\",\"LD2410S\":{\"Update threshold\":\"0%\"}}\n16:29:59.261 RSL: SENSOR = {\"Time\":\"2024-11-09T16:29:59\",\"LD2410S\":{\"Update threshold\":\"2%\"}}\n16:30:00.277 RSL: SENSOR = {\"Time\":\"2024-11-09T16:30:00\",\"LD2410S\":{\"Update threshold\":\"3%\"}}\n...\n16:31:01.230 RSL: SENSOR = {\"Time\":\"2024-11-09T16:31:01\",\"LD2410S\":{\"Update threshold\":\"100%\"}}\n</code></pre> And in main web page:</p> </li> <li> <p>Start reports every seconds (need for tuning in normal output mode): <pre><code>LD2410S_Follow 0/1\n</code></pre></p> </li> </ul>"},{"location":"HLK-LD2410S/#rules","title":"Rules","text":"<p>You can use the LD2410S trigger to create rules, example: <pre><code>rule1 ON LD2410S#Distance &gt;0 DO state ENDON\nrule2 ON LD2410S#People =2 DO state ENDON\n</code></pre></p>"},{"location":"HM-10/","title":"HM-10 Bluetooth module","text":"This feature is included only in <code>tasmota-sensors</code> <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_HM10\n#define USE_HM10          // Add support BLE sensor bridge (+5k1 code)\n#endif\n#ifndef USE_IBEACON\n#define USE_IBEACON          // Add support for bluetooth LE passive scan of ibeacon devices \n#endif\n</code></pre></p> <p>HM-10 is a Bluetooth BLE V4.0 module based on TI CC254x chip. Originally manufactured by Jinan Huamao but there are many clones in the market (MLT-BT05, CC41-A, JDY-08, AT-09, ...)</p> <p>While they look similar and utilize the same CC254x Bluetooth chip, the firmware on them is different. In order to get any type of module to work work Tasmota it is mandatory to flash the original firmware on it. Use the newest V710 firmware but at least V609 is required to work with the Tasmota driver.</p> <p>Tip</p> <p>It is possible to do this without soldering by directly sticking male jumper wire connectors through the plastic foil on some boards or using some removable adhesives (bluetack).  </p>"},{"location":"HM-10/#configuration","title":"Configuration","text":"<p>Check whether your module is communicating properly over its TX/RX pins and that it has the required firmware (preferably <code>HMSoft V707</code>). Only when you're sure everything is ok proceed with the configuration.</p>"},{"location":"HM-10/#wiring","title":"Wiring","text":"HM-10 ESP GND GND VCC 3.3V TX GPIOx RX GPIOy <p>You can use TX and RX pins for GPIOx, GPIOy.</p>"},{"location":"HM-10/#tasmota-settings-for-ble-sensors","title":"Tasmota Settings for BLE sensors","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>HM10 TX (195)</code></li> <li>GPIOy to <code>HM10 RX (194)</code></li> </ol> <p>If you have the proper firmware, webUI in the Main Menu should show (in this case V707 is the flashed firmware version): </p> <p>If you have supported Bluetooth devices in range, they will soon be discovered and start to populate the webUI with data as it is transmitted:</p> <p></p> <p>Warning</p> <p>Most of the self-flashed modules will still have their factory default settings with baud rate of 9600 but Tasmota requires 115200. To fix try commands from Tasmota console: <code>HM10Baud 9600</code> (sets 9600 baud rate on Tasmota side) then <code>HM10AT RENEW</code> (reset HM10 to factory settings which should use 115200 baud rate on newer firmware) and reboot Tasmota. If that doesn't solve it you will have to connect to the HM-10 with serial-to-USB adapter and set the baudrate in a terminal using commands <code>AT+RENEW</code> then <code>AT+BAUD?</code>. If the output is 4 baudrate is properly set to 115200, if not use <code>AT+BAUD4</code></p> <p>For a complete overview of supported devices, commands and features read the Bluetooth article</p>"},{"location":"HM-10/#tasmota-settings-for-ibeacon","title":"Tasmota Settings for iBeacon","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>iBeacon TX (168)</code></li> <li>GPIOy to <code>iBeacon RX (169)</code></li> </ol> <p>When first connected HM-10 is in peripheral mode. You have to change it to central mode using commands <code>Sensor52 1</code> and <code>Sensor52 2</code>.</p> <p>If you have supported iBeacon Bluetooth devices in range, they will be discovered and will start to populate the webUI with data:</p> <p></p> <p>For a complete overview of supported devices, commands and features read the Bluetooth article</p>"},{"location":"HM-10/#breakout-boards","title":"Breakout Boards","text":""},{"location":"HM-17/","title":"HM-17 Bluetooth module","text":"This feature is included only in <code>tasmota-sensors</code> <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_HM10\n#define USE_HM10          // Add support BLE sensor bridge (+5k1 code)\n#endif\n#ifndef USE_IBEACON\n#define USE_IBEACON          // Add support for bluetooth LE passive scan of ibeacon devices \n#endif\n</code></pre></p> <p>HM-17 and HM-16 are a Bluetooth BLE V4.1 module based on TI CC2640R2f chip. Manufactured by Jinan Huamao </p>"},{"location":"HM-17/#configuration","title":"Configuration","text":"<p>Check whether your module is communicating properly over its TX/RX pins and that it has the required firmware (firmware V120 or V110). Only when you're sure everything is ok proceed with the configuration.</p>"},{"location":"HM-17/#wiring","title":"Wiring","text":"HM-16/17 ESP GND GND VCC 3.3V TX GPIOx RX GPIOy"},{"location":"HM-17/#tasmota-settings-for-ibeacon","title":"Tasmota Settings for iBeacon","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>iBeacon TX (168)</code></li> <li>GPIOy to <code>iBeacon RX (169)</code></li> </ol> <p>When first connected HM-16/17 is in peripheral mode. You have to change it to central mode using commands <code>Sensor52 1</code> and <code>Sensor52 2</code>.</p> <p>If you have supported iBeacon Bluetooth devices in range, they will be discovered and will start to populate the webUI with data:</p> <p></p> <p>For a complete overview of supported devices, commands and features read the Bluetooth article</p>"},{"location":"HM-17/#breakout-boards","title":"Breakout Boards","text":""},{"location":"HRG15/","title":"Hydreon RG-15 Solid State Rain Sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_HRG15\n#define USE_HRG15    // Add support for Hydreon RG-15 Solid State Rain sensor (+1k5 code)\n#endif\n</code></pre></p> <p>The Hydreon RG-15 Solid State Tipping Bucket is a rainfall measuring device intended to replace conventional tipping buckets.</p> <p>The RG-15 uses beams of infrared light within a plastic lens about the size of a tennis ball. The round surface of the lens discourages collection of debris, and the RG-15 has no moving parts to stick, and no water-pathways to clog. The device features an open-collector output that emulates a conventional tipping bucket, as well as serial communications that provide more detailed data and allow for configuration of the device.</p> <p>Find out more on the manufacturer's website.</p>"},{"location":"HRG15/#configuration","title":"Configuration","text":""},{"location":"HRG15/#wiring","title":"Wiring","text":"HRG15 ESP GND (1) GND V+ 3.3V (8) 3.3V RS232 Out (4) GPIOx RS232 In (5) GPIOy"},{"location":"HRG15/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>HRG15 Rx</code> </li> <li>GPIOy to <code>HRG15 Tx</code></li> </ul>"},{"location":"HRG15/#commands","title":"Commands","text":"<p><code>Sensor90</code> can be used to configure the rain sensor</p>"},{"location":"HRG15/#tasmota-display","title":"Tasmota Display","text":"<p>After a reboot the driver will detect the sensor and show the sensor data. An example is given below:</p> Item Value RG-15 Active 0.01 mm RG-15 Event 0.13 mm RG-15 Total 26.8 mm RG-15 FlowRate 0.32 mm.h <p>This data is also part of the <code>tele/%topic%/SENSOR</code> payload:</p> <pre><code>{\n    \"Time\": \"2021-08-25T17:15:45\",\n    \"RG-15\": {\n        \"Active\": 0.01,\n        \"Event\": 0.13,\n        \"Total\": 26.80,\n        \"FlowRate\": 0.32\n    },\n    \"TempUnit\": \"C\"\n}\n</code></pre>"},{"location":"HRG15/#mqtt","title":"MQTT","text":"<p>The sensor data is made available over MQTT as per the configured <code>TelePeriod</code>. Additionally, instant telemetry messages are sent during active rainfall events. The sensor will report additional accumulation every 5-60 seconds. The driver resets the <code>Active</code> and <code>FlowRate</code> values to 0 if no additional accumuatlion is detected after 60 seconds.</p>"},{"location":"Home-Assistant/","title":"Home Assistant","text":"<p>Home Assistant is an open source home automation solution that puts local control and privacy first.</p> <p>Tasmota communicates with Home Assistant using MQTT. Before going any further, make sure MQTT is properly set up in Home Assistant and Tasmota. </p> <p>Home Assistant can add Tasmota devices using:</p> <ol> <li>Official Tasmota integration - preferred and automatic instant discovery of entities</li> <li>Manual configuration by editing configuration.yaml - recommended for marginal use cases, e.g., TuyaMCU fan devices</li> </ol>"},{"location":"Home-Assistant/#tasmota-integration","title":"Tasmota Integration","text":"<p>Once you configure the Home Assistant integration every new Tasmota device with <code>SetOption19 0</code> set will be discovered automatically. </p> <p>All Tasmota devices will be listed in their own Tasmota card in Configuration - Integrations menu in Home Assistant.</p> <p>Warning</p> <p>Do not change the FullTopic in order to use this feature. Leave it as default.</p> <p></p> <p>Tasmota uses <code>DeviceName</code> to name the device in Tasmota integration and <code>FriendlyName&lt;x&gt;</code> to name power outputs (switch or light entities in HA). </p> Use templates to change the Module name <p>Setting the template name will change the Module name as well which will be reflected in Home Assistant. This helps in identifying when dealing with a large number of devices. It's nicer than having 10 Sonoff S31's or a bunch of TuyaMCU's\" </p> <p>Bug</p> <p>If you are using Home Assistant OS MQTT add-on add the following to the ACL file (user section or general section): <code>topic write tasmota/discovery/#</code> to give Tasmota devices write access to the discovery topic.</p>"},{"location":"Home-Assistant/#supported-entities","title":"Supported Entities","text":"<ul> <li>Lights as <code>light</code> entities.   Single channel Dimmers, RGB lights, RGB lights with Color Temperature control and RGB lights with White control are supported.</li> <li>Relays as <code>switch</code> entities   With <code>SetOption30 1</code> all relays one the device will be added as light entities instead</li> <li>Sensors as <code>sensor</code> entities</li> <li>Switches as <code>binary_sensor</code> entities or <code>automation triggers</code> depending on <code>SwitchMode</code> used when <code>SetOption114 1</code></li> <li>Buttons as automation triggers when <code>SetOption73</code> is enabled</li> <li>Shutters as cover entities.    Currently only shutter modes 1 to 4 are supported. Shutter mode 5 and Tuya shutters are not supported.</li> <li>Devices configured as iFan02 or iFan03 as fan entities. TuyaMCU fans are not supported.</li> <li>Each discovered device will by default add 8 disabled sensors. Enable the ones you need. You cannot delete them, they will simply be re-added on a restart.</li> </ul> <p>Types of devices not listed above still require manual configuration. </p> <p>If you're running Tasmota on ESP32 you can use Home Assistant Controls in Berry to discover more complex entities (pull-down lists, number sliders, etc)</p> <p>Zigbee and Bluetooth devices paired in Tasmota will NOT be discovered in Home Assistant</p>"},{"location":"Home-Assistant/#removing-devices","title":"Removing devices","text":"<p>You cannot as long as Home Assistant support is enabled in your Tasmota binary. Disable the device in Home Assistant instead. </p> <p></p> <p>Deleting them from Home Assistant while Tasmota device is still active will eventually rediscover all the entities. </p>"},{"location":"Home-Assistant/#supplemental-custom-discovery-message","title":"Supplemental Custom Discovery Message","text":"<p>You can use MQTT Discovery in HA to add sensors and other entities that are not discovered through Tasmota integration and associate them with an already discovered device.</p> <p>When creating the MQTT discovery JSON add this device identifier <code>,\"device\":{\"connections\":[[\"mac\",\"%macaddr%\"]]}</code> where %macaddr% is the mac address of the device without <code>:</code>. When used in a rule variable <code>%macaddr%</code> will be replaced automatically.</p> <p>There are Home Assistant Blueprints for specific device types to create needed entities at out blueprints GitHub. Look for the icon in templates to one-click import the configuration automation.</p> <p></p> <p>Examples of creating custom discovery messages:</p> <ul> <li>RFID Tag</li> <li>PIR sensor</li> <li>TuyaMCU Air Fryer</li> <li>TuyaMCU Heater</li> </ul>"},{"location":"Home-Assistant/#editing-configurationyaml","title":"Editing configuration.yaml","text":"<p>Adding devices manually is done by editing the <code>configuration.yaml</code> file and adding appropriate blocks of yaml code to the corresponding section.</p> <p>After every change to the configuration.yaml file you'll need to restart the MANUALLY CONFIGURED MQTT ENTITIES in Server Controls to apply the changes.</p> <p>The advantage of manually configuring a device is that you maintain control of all aspects of the configuration.</p> <p>All the configurations are just examples.</p> <p>You need to be familiar with Home Assistant's configuration structure and procedures.    Straight copy paste of the given examples into configuration.yaml will probably not work for you. </p> <p>If you are using a localized (non-english) version be sure to check the correct spelling and cases for values:</p> <ul> <li>'payload_available' </li> <li>'payload_not_available'</li> <li>'payload_on'</li> <li>'payload_off'</li> </ul> <p>Tip</p> <p>If you want the power states to be persistent in Tasmota and Home Assistant set <code>PowerRetain 1</code> instead of using <code>retain: true</code> in Home Assistant</p> <p>When using <code>unique_id:</code> make sure it's unique to each entity</p> <p>When <code>unique_id</code> is set, Home Assistant will allow some entity customization from the UI such as changing the name or icon.</p>"},{"location":"Home-Assistant/#switches","title":"Switches","text":"<p>Add in Home Assistant using the MQTT Switch integration.</p> <p>Required Commands <code>SetOption59 1</code> - enables sending of tele/%topic%/STATE on POWER and light related commands for faster updates</p> <p>Single Switch</p> <p>If SetOption26 is enabled, use <code>POWER1</code> instead of <code>POWER</code></p> <pre><code>mqtt:\n  switch:\n    - unique_id: tasmota_switch\n      name: \"Tasmota Switch\"\n      state_topic: \"stat/tasmota/RESULT\"  \n      value_template: \"{{ value_json.POWER }}\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>Multiple Switches</p> <p>When a device has more than one POWER output (multiple relays or a mix of relays and lights) use corresponding <code>POWER&lt;x&gt;</code> (<code>POWER1</code>, <code>POWER2</code>, etc)</p> <pre><code>mqtt:\n  switch:\n  - unique_id: tas_switch_1\n    name: \"Tasmota Switch 1\"\n    state_topic: \"stat/tasmota/RESULT\"  \n    value_template: \"{{ value_json.POWER1 }}\"\n    command_topic: \"cmnd/tasmota/POWER1\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    availability_topic: \"tele/tasmota/LWT\"\n    payload_available: \"Online\"\n    payload_not_available: \"Offline\"\n  - unique_id: tas_switch_2\n    name: \"Tasmota Switch 2\"\n    state_topic: \"stat/tasmota/RESULT\"  \n    value_template: \"{{ value_json.POWER2 }}\"\n    command_topic: \"cmnd/tasmota/POWER2\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    availability_topic: \"tele/tasmota/LWT\"\n    payload_available: \"Online\"\n    payload_not_available: \"Offline\"\n  - unique_id: tas_switch_3\n    name: \"Tasmota Switch 3\"\n    state_topic: \"stat/tasmota/RESULT\"  \n    value_template: \"{{ value_json.POWER3 }}\"\n    command_topic: \"cmnd/tasmota/POWER3\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    availability_topic: \"tele/tasmota/LWT\"\n    payload_available: \"Online\"\n    payload_not_available: \"Offline\"\n</code></pre> <p>Tip</p> <p>If you are using a switch device to control a light you may want to use <code>MQTT Light</code> integration instead.   </p> <p>Simply replace <code>switch:</code> with <code>light:</code> in the configuration keeping everything else the same.</p>"},{"location":"Home-Assistant/#lights","title":"Lights","text":"<p>Add in Home Assistant using the MQTT Light integration.</p> <p>All configurations require <code>SetOption59 1</code> - enables sending of tele/%topic%/STATE on POWER and light related commands</p> <p>Optional Commands <code>Fade on</code> - makes transitions smoother  <code>Speed 5</code> - set transition speed</p> <p>Dimmer</p> <p>Used for dimmers and dimmable lights (single channel lights).</p> <pre><code>mqtt:\n  light:\n    - name: \"Dimmer\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      state_topic: \"tele/tasmota/STATE\"\n      state_value_template: \"{{value_json.POWER}}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      brightness_command_topic: \"cmnd/tasmota/Dimmer\"\n      brightness_state_topic: \"tele/tasmota/STATE\"\n      brightness_scale: 100\n      on_command_type: \"brightness\"\n      brightness_value_template: \"{{value_json.Dimmer}}\"\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>RGB Light</p> <p>Should also be used with lights using White Blend Mode</p> <p><code>SetOption17 1</code> - enables color status in decimals</p> <pre><code>mqtt:\n  light:\n    - name: \"RGB Light\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      state_topic: \"tele/tasmota/STATE\"\n      state_value_template: \"{{ value_json.POWER }}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      brightness_command_topic: \"cmnd/tasmota/Dimmer\"\n      brightness_state_topic: \"tele/tasmota/STATE\"\n      brightness_scale: 100\n      on_command_type: \"brightness\"\n      brightness_value_template: \"{{ value_json.Dimmer }}\"\n      rgb_command_topic: \"cmnd/tasmota/Color2\"\n      rgb_state_topic: \"tele/tasmota/STATE\"\n      rgb_value_template: \"{{ value_json.Color.split(',')[0:3]|join(',') }}\"\n      effect_command_topic: \"cmnd/tasmota/Scheme\"\n      effect_state_topic: \"tele/tasmota/STATE\"\n      effect_value_template: \"{{ value_json.Scheme }}\"\n      effect_list:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>RGB+W Light</p> <p>In this configuration RGB and white cannot be on at the same time. See Lights for options.</p> <p><code>SetOption17 1</code> - enables color status in decimals</p> <pre><code>mqtt:\n  light:\n    - name: \"RGB+W Light\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      state_topic: \"tele/tasmota/STATE\"\n      state_value_template: \"{{ value_json.POWER }}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      brightness_command_topic: \"cmnd/tasmota/Dimmer\"\n      brightness_state_topic: \"tele/tasmota/STATE\"\n      brightness_scale: 100\n      on_command_type: \"brightness\"\n      brightness_value_template: \"{{ value_json.Dimmer }}\"\n      white_value_state_topic: \"tele/tasmota/STATE\"\n      white_value_command_topic: \"cmnd/tasmota/White\"\n      white_value_scale: 100\n      white_value_template: \"{{ value_json.White }}\"\n      rgb_command_topic: \"cmnd/tasmota/Color2\"\n      rgb_state_topic: \"tele/tasmota/STATE\"\n      rgb_value_template: \"{{ value_json.Color.split(',')[0:3]|join(',') }}\"\n      effect_command_topic: \"cmnd/tasmota/Scheme\"\n      effect_state_topic: \"tele/tasmota/STATE\"\n      effect_value_template: \"{{value_json.Scheme}}\"\n      effect_list:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>RGB+CCT Light</p> <p>Also called RGBWW, RGBCW or 5 channel lights</p> <p><code>SetOption17 1</code> - enables color status in decimals</p> <pre><code>mqtt:\n  light:\n    - name: \"RGBCCT Light\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      state_topic: \"tele/tasmota/STATE\"\n      state_value_template: \"{{ value_json.POWER }}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      brightness_command_topic: \"cmnd/tasmota/Dimmer\"\n      brightness_state_topic: \"tele/tasmota/STATE\"\n      brightness_scale: 100\n      on_command_type: \"brightness\"\n      brightness_value_template: \"{{ value_json.Dimmer }}\"\n      color_temp_command_topic: \"cmnd/tasmota/CT\"\n      color_temp_state_topic: \"tele/tasmota/STATE\"\n      color_temp_value_template: \"{{ value_json.CT }}\"\n      rgb_command_topic: \"cmnd/tasmota/Color2\"\n      rgb_state_topic: \"tele/tasmota/STATE\"\n      rgb_value_template: \"{{ value_json.Color.split(',')[0:3]|join(',') }}\"\n      effect_command_topic: \"cmnd/tasmota/Scheme\"\n      effect_state_topic: \"tele/tasmota/STATE\"\n      effect_value_template: \"{{ value_json.Scheme }}\"\n      effect_list:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>Addressable LED</p> <p>Applies only to WS281x lights. </p> <pre><code>mqtt:\n  light:\n    - name: \"Addressable LED\"\n      command_topic: \"cmnd/tasmota/POWER\"\n      state_topic: \"stat/tasmota/STATE\"\n      state_value_template: \"{{ value_json.POWER }}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      brightness_command_topic: \"cmnd/tasmota/Dimmer\"\n      brightness_state_topic: \"stat/tasmota/STATE\"\n      brightness_scale: 100\n      on_command_type: \"brightness\"\n      brightness_value_template: \"{{ value_json.Dimmer }}\"\n      rgb_command_topic: \"cmnd/tasmota/Color2\"\n      rgb_state_topic: \"tele/tasmota/STATE\"\n      rgb_value_template: \"{{ value_json.Color.split(',')[0:3]|join(',') }}\"\n      effect_command_topic: \"cmnd/tasmota/Scheme\"\n      effect_state_topic: \"stat/tasmota/STATE\"\n      effect_value_template: \"{{ value_json.Scheme }}\"\n      effect_list:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n        - 10\n        - 11\n        - 12\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      qos: 1\n      retain: false\n</code></pre> <p>RGB with hex values</p> <p>If you don't want to use <code>SetOption17 1</code> with decimal values and use default hex values, change:</p> <p><pre><code>rgb_value_template: \"{{value_json.Color.split(',')[0:3]|join(',')}}\"\n</code></pre> to <pre><code>  rgb_command_template: \"{{ '%02X%02X%02X' | format(red, green, blue)}}\"\n  rgb_value_template: \"{{ (value_json.Color[0:2]|int(base=16),value_json.Color[2:4]|int(base=16),value_json.Color[4:6]|int(base=16)) | join(',')}}\"\n</code></pre></p> <p>Control RGB and White independently</p> <p>Using color picker will keep white light on. If you use the white slider RGB light will get turned off. White value and dimmer value are connected, to have more granular control you will have to split the lights.</p> <p>Replace </p> <p><pre><code>rgb_value_template: \"{{value_json.Color.split(',')[0:3]|join(',')}}\"\n</code></pre> to <pre><code>  rgb_command_template: \"{{ '%02X%02X%02X=' | format(red, green, blue)}}\"\n  rgb_value_template: \"{{ (value_json.Color[0:2]|int(base=16),value_json.Color[2:4]|int(base=16),value_json.Color[4:6]|int(base=16)) | join(',')}}\"\n</code></pre></p> <p>The key is the <code>=</code> after color string in hex. It will retain current white value while changing color. </p> <p>Using schema: template light</p> <p>Thorough explanation of template: schema lights and its features on blakadder.com</p>"},{"location":"Home-Assistant/#sensors","title":"Sensors","text":"<p>Add in Home Assistant using the MQTT Sensor integration.</p> <p>A sensor will send its data in set intervals defined by <code>TelePeriod</code> (default every 5 minutes).</p> <p>Temperature sensor</p> <p>Check your sensor name in Tasmota console and change accordingly. This example uses the DHT22 sensor.</p> <pre><code>mqtt:\n  sensor:\n    - name: \"Tasmota Temperature\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: \"{{ value_json['DHT22'].Temperature }}\"\n      unit_of_measurement: \"\u00b0C\"  # \"F\" if using Fahrenheit\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      device_class: temperature\n</code></pre> <p>Humidity sensor</p> <p>Check your sensor name in Tasmota and change accordingly. This example uses the DHT22 sensor.</p> <pre><code>mqtt:\n  sensor:\n    - ame: \"Tasmota Humidity\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: \"{{ value_json['DHT22'].Humidity }}\"\n      unit_of_measurement: \"%\"\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      device_class: humidity\n</code></pre> <p>Pressure sensor</p> <p>Check your sensor name in Tasmota and change accordingly. This example uses the BMP280 sensor.</p> <p><pre><code>mqtt:\n  sensor:\n    - name: \"Tasmota Pressure\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: \"{{ value_json.BMP280.Pressure }}\"\n      unit_of_measurement: \"hPa\"\n      device_class: pressure\n</code></pre> Change unit_of_measurement to <code>\"mmHg\"</code> if <code>SetOption24 1</code></p> <p>Wi-Fi Signal Quality</p> <p>Monitor the relative Wi-Fi signal quality of a device. </p> <pre><code>sensor:\n  - platform: mqtt\n    name: \"Tasmota Wi-Fi Quality\"\n    state_topic: \"tele/tasmota/STATE\"\n    unit_of_measurement: \"%\"\n    value_template: \"{{value_json['Wifi'].RSSI }}\"\n    availability_topic: \"tele/tasmota/LWT\"\n    payload_available: \"Online\"\n    payload_not_available: \"Offline\"\n    device_class: signal_strength\n    entity_category: diagnostic # moves the entity to the Diagnostic section on the Device Card\n</code></pre>"},{"location":"Home-Assistant/#power-monitoring","title":"Power Monitoring","text":"<p>Add in Home Assistant using the MQTT Sensor integration.</p> <p>Power monitoring sensors will send their data in set intervals defined by <code>TelePeriod</code> (default every 5 minutes).</p> <p>To get all the data in Home Assistant requires multiple sensors which you can later group to your liking in Lovelace UI</p> <p>Power Monitoring</p> <pre><code>mqtt:\n  sensor:\n    - name: \"Energy Today\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: '{{ value_json[\"ENERGY\"][\"Today\"] }}'\n      unit_of_measurement: \"kWh\"\n      device_class: energy\n      state_class: measurement \n    - name: \"Power\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: '{{ value_json[\"ENERGY\"][\"Power\"] }}'\n      unit_of_measurement: \"W\"\n      device_class: power\n      state_class: measurement \n    - name: \"Voltage\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: '{{ value_json[\"ENERGY\"][\"Voltage\"] }}'\n      unit_of_measurement: \"V\"\n      device_class: voltage\n      state_class: measurement \n    - name: \"Current\"\n      state_topic: \"tele/tasmota/SENSOR\"\n      value_template: '{{ value_json[\"ENERGY\"][\"Current\"] }}'\n      unit_of_measurement: \"A\"\n      device_class: current\n      state_class: measurement \n</code></pre> <p>Tip</p> <p>For additional sensors use \"Total\";\"Yesterday\";\"Period\",\"ApparentPower\",\"ReactivePower\";\"Factor\" in <code>value_template</code> string</p> <p>Video tutorial on a power monitoring plug setup by Digiblur</p>"},{"location":"Home-Assistant/#binary-sensors","title":"Binary Sensors","text":"<p>Add in Home Assistant using the MQTT Binary Sensor integration.</p> <p>PIR Sensor</p> <p>Used for a configured PIR Sensor and requires correct SwitchMode with ON/OFF states and this rule:</p> <p>Required Commands <pre><code>Rule1 on Switch1#State=1 do Publish stat/%topic%/MOTION ON endon on Switch1#State=0 do Publish stat/%topic%/MOTION OFF endon\nRule1 1\n</code></pre> <pre><code>mqtt:\n  binary_sensor:\n    - unique_id: motion_sensor\n      name: \"Tasmota Motion Sensor\"\n      state_topic: \"stat/tasmota/MOTION\"\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      device_class: motion\n</code></pre></p> <p>Door Sensor</p> <p>Requires a reed switch configured in Tasmota. Make sure correct SwitchMode is set</p> <p>Required Commands <pre><code>Rule1 on Switch1#State=1 do Publish stat/%topic%/DOOR ON endon on Switch1#State=0 do Publish stat/%topic%/DOOR OFF endon\nRule1 1\n</code></pre> <pre><code>mqtt:\n  binary_sensor:\n    - unique_id: door_sensor\n      name: \"Tasmota Door Sensor\"\n      state_topic: \"stat/tasmota/GARAGE\"\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      device_class: door   # also possible: window, garage_door or opening\n</code></pre></p> <p>RF Bridge</p> <p>An RF door sensor configured with an RF receiver in Tasmota. <pre><code>mqtt:\n  binary_sensor:\n    - platform: mqtt\n      name: \"RF bridge rfkey\"\n      payload_on: \"1\"\n      payload_off: \"0\"\n      device_class: opening\n      state_topic: \"tele/tasmota/RESULT\"\n      value_template: '{{ value_json.RfReceived.RfKey }}'\n</code></pre></p>"},{"location":"Home-Assistant/#fans","title":"Fans","text":"<p>Add in Home Assistant using the MQTT Fan integration.</p> <p>Fan</p> <p>Derived from #2839 by @kbickar and @finity69x2</p> <pre><code>mqtt:\n  fan:\n  - unique_id: tasmota_fan\n    name: \"Tasmota Fan\"\n    command_topic: \"cmnd/tasmota/FanSpeed\"\n    speed_command_topic: \"cmnd/tasmota/FanSpeed\"    \n    state_topic: \"stat/tasmota/RESULT\"\n    speed_state_topic: \"stat/tasmota/RESULT\"\n    state_value_template: &gt;\n      {% if value_json.FanSpeed is defined %}\n        {% if value_json.FanSpeed == 0 -%}0{%- elif value_json.FanSpeed &gt; 0 -%}4{%- endif %}\n      {% else %}\n        {% if states.fan.tasmota.state == 'off' -%}0{%- elif states.fan.tasmota.state == 'on' -%}4{%- endif %}\n      {% endif %}\n    speed_value_template: \"{{ value_json.FanSpeed }}\"\n    availability_topic: tele/tasmota/LWT\n    payload_off: \"0\"\n    payload_on: \"4\"\n    payload_low_speed: \"1\"\n    payload_medium_speed: \"2\"\n    payload_high_speed: \"3\"\n    payload_available: \"Online\"\n    payload_not_available: \"Offline\"\n    speeds:\n      - \"off\"\n      - \"low\"\n      - \"medium\"\n      - \"high\"\n</code></pre>"},{"location":"Home-Assistant/#covers","title":"Covers","text":"<p>Add in Home Assistant using the MQTT Cover integration.</p> <p>TuyaMCU Curtain/Shade Motor</p> <p>Requires <code>SetOption66 1</code>. In this example dpId1 is for open/close/stop of the motor, dpId2 sets position and dpId3 displays the current position.</p> <pre><code># Example configuration.yaml entry\nmqtt:\n  cover:\n    - unique_id: tuya_curtain\n      name: \"Tuya Curtain\"\n      command_topic: \"cmnd/tasmota/TuyaSend4\"\n      payload_open: \"1,0\"\n      payload_close: \"1,2\"\n      payload_stop: \"1,1\"\n      position_open: 0\n      position_closed: 100\n      position_topic: \"tele/tasmota/RESULT\"\n      position_template: &gt;-\n            {% if value_json.TuyaReceived.DpType2Id3 is defined %}\n            {{ value_json.TuyaReceived.DpType2Id3 }}\n            {% else %}  \n            {{ state_attr('cover.tuya_curtain','current_position') | int }}\n            {% endif %}  \n      set_position_topic: \"cmnd/tasmota/TuyaSend2\"\n      set_position_template: '2,{{ position }}'\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>If you change <code>name:</code> make sure to reflect that change in the value_template cover name!</p>"},{"location":"Home-Assistant/#climate","title":"Climate","text":"<p>Detailed guide when using MQTT Climate or Generic Thermostat in Home Assistant</p>"},{"location":"Home-Assistant/#device-specific","title":"Device Specific","text":"<p>Covers</p> <p>For shutter position to persist in Home Assistant through device reboots, execute <code>PowerRetain 1</code>.</p> <p>These sample configurations should allow the shutter work in Home Assistant. This is only an example and may need further modification to work in your environment.</p> <p>This example uses a new configuration for roller shutters with options for positioning. It assumes that <code>%prefix%/%topic%/</code> is configured in the Tasmota Full Topic MQTT parameter.  </p> <p><pre><code>mqtt:\n  cover:\n    - name: \"Balcony Blinds\"\n      availability_topic: \"tele/%topic%/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      position_topic: stat/%topic%/Shutter1\n      position_open: 100\n      position_closed: 0\n      set_position_topic: \"cmnd/%topic%/ShutterPosition1\"\n      command_topic: \"cmnd/%topic%/Backlog\"\n      payload_open: \"ShutterOpen1\"\n      payload_close: \"ShutterClose1\"\n      payload_stop: \"ShutterStop1\"\n      retain: false\n      optimistic: false\n      qos: 1\n</code></pre> Check Issue 130 for more information about this configuration.</p> <p>Another integration example: <pre><code>mqtt:\n  cover:\n    - name: \"Test\"\n      availability_topic: \"tele/%topic%/LWT\"\n      state_topic: \"stat/%topic%/RESULT\"\n      command_topic: \"cmnd/%topic%/Backlog\"\n      value_template: '{{ value | int }}'\n      qos: 1\n      retain: false\n      payload_open: \"ShutterOpen1\"\n      payload_close: \"ShutterClose1\"\n      payload_stop: \"ShutterStop1\"\n      state_open: \"ON\"\n      state_closed: \"OFF\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      optimistic: false\n      tilt_command_topic: 'cmnd/%topic%/ShutterPosition1'\n      tilt_status_topic: 'cmnd/%topic%/ShutterPosition1'\n      set_position_topic: 'cmnd/%topic%/ShutterPosition1'\n      position_topic: \"stat/%topic%/SHUTTER1\"\n      tilt_min: 0\n      tilt_max: 100\n      tilt_closed_value: 0\n      tilt_opened_value: 100\n</code></pre> Integration example with position updated during movement (Tasmota versions &gt;= v8.1.0.5):  </p> <pre><code>mqtt:\n  cover:\n    - name: \"Balcony Blinds\"\n      availability_topic: \"tele/%topic%/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      position_topic: \"stat/%topic%/RESULT\"\n      position_template: &gt;\n        {% if ('Shutter1' in value_json) and ('Position' in value_json.Shutter1) %}\n          {{ value_json.Shutter1.Position }}\n        {% else %}\n          {% if is_state('cover.balcony_blinds', 'unknown') %}\n            50\n          {% else %}\n            {{ state_attr('cover.balcony_blinds','current_position') }}\n          {% endif %}\n        {% endif %}    \n      position_open: 100\n      position_closed: 0\n      set_position_topic: \"cmnd/%topic%/ShutterPosition1\"\n      command_topic: \"cmnd/%topic%/Backlog\"\n      payload_open: \"ShutterOpen1\"\n      payload_close: \"ShutterClose1\"\n      payload_stop: \"ShutterStop1\"\n</code></pre> <p>In addition, add to your home assistant start up automation a query for the current shutter position: <pre><code>- alias: \"Power state on HA start-up\"\n  trigger:\n    platform: homeassistant\n    event: start\n  action:\n    - service: mqtt.publish\n      data:\n        topic: \"cmnd/%shutters grouptopic%/shutterposition\"\n        payload: \"\"       \n</code></pre></p>"},{"location":"Home-Assistant/#zigbee-devices","title":"Zigbee Devices","text":"<p>Warning</p> <p>The following Zigbee examples assume <code>SetOption83</code>, <code>SetOption89</code>, <code>SetOption100</code>, <code>SetOption112</code>, <code>SetOption118</code>, <code>SetOption119</code> are all set to <code>0</code>. Setting any of these to <code>1</code> will change topic and/or payload structure from that used in the examples.</p> <p>Dimmable Light</p> <p>This configuration is for a dimmable light reporting on <code>0xE1F9</code> using endpoint 1, cluster 8 for brightness. <code>ZbRead</code> part in the template is needed to always update the brightness values.</p> <pre><code># Example configuration.yaml entry\nmqtt:\n  light:\n    - schema: template\n      name: \"Fire Light\"\n      command_topic: \"cmnd/zigbee-gateway/Backlog\"\n      state_topic: \"tele/zigbee-gateway/SENSOR\"\n      command_on_template: &gt;\n          {%- if brightness is defined -%}\n          ZbSend { \"device\":\"0xE1F9\", \"send\":{\"Dimmer\":{{ brightness }} } }; ZbSend { \"device\":\"0xE1F9\", \"send\":{\"Power\":true} }; delay 20; ZbRead { \"device\":\"0xE1F9\", \"endpoint\":1, \"cluster\":8, \"read\":0 }\n          {%- else -%}\n          ZbSend { \"device\":\"0xE1F9\", \"send\":{\"Power\":true} }; delay 20; ZbRead { \"device\":\"0xE1F9\", \"endpoint\":1, \"cluster\":8, \"read\":0 }\n          {%- endif -%}\n      command_off_template: 'ZbSend { \"device\":\"0xE1F9\", \"send\":{\"Power\":false} }; delay 20; ZbRead { \"device\":\"0xE1F9\", \"endpoint\":1, \"cluster\":8, \"read\":0 }'\n      state_template: &gt;\n          {% if value_json.ZbReceived is defined and value_json.ZbReceived['0xE1F9'] is defined and value_json.ZbReceived['0xE1F9'].Power is defined %}\n          {% if value_json.ZbReceived['0xE1F9'].Power == true %}\n          on\n          {% else %}\n          off\n          {% endif %}\n          {% else %}\n          {{ states('light.fire_light') }}\n          {% endif %}\n      brightness_template: &gt;\n          {%- if value_json.ZbReceived is defined and value_json.ZbReceived['0xE1F9'] is defined and value_json.ZbReceived['0xE1F9'].Dimmer is defined -%}\n          {{ value_json['ZbReceived']['0xE1F9'].Dimmer | int }}\n          {%- else -%}\n          {{ state_attr('light.fire_light', 'brightness') | int }}\n          {%- endif -%}\n</code></pre> <p>Water Leak Sensor</p> <p>This specific configuration is for Xiaomi Aqara Water Leak sensor reporting on <code>0x099F</code>.</p> <pre><code># Example configuration.yaml entry\nmqtt:\n  binary_sensor:\n    - name: \"Water Leak\"\n      state_topic: \"tele/zigbee-gateway/SENSOR\"\n      value_template: &gt;\n        {%- if value_json.ZbReceived is defined and value_json.ZbReceived['0x099F'] is defined -%}\n        {%- if value_json.ZbReceived['0x099F']['0500!00'] == '010000FF0000' -%}\n        ON\n        {% else %}\n        OFF\n        {% endif %}\n        {% else %}\n        {{ states('binary_sensor.water_leak') }}\n        {% endif %}\n      availability_topic: \"tele/zigbee-gateway/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      device_class: moisture\n</code></pre> <p>Enable join button</p> <pre><code>mqtt:\n  button:\n    - unique_id: z2t_enable_join\n      name: \"Zigbee2Tasmota enable join\"\n      command_topic: \"cmnd/zigbee-gateway/ZbPermitJoin\" \n      payload_press: \"1\"\n      availability_topic: \"tele/zigbee-gateway/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n      entity_category: \"default\"\n      device_class: \"restart\"\n</code></pre>"},{"location":"Home-Assistant/#useful-automations","title":"Useful Automations","text":"<p>Extended device information</p> <p>Wi-Fi signal quality can be added as a parameter to any previous configuration by appending this section to the existing configuration yaml</p> <pre><code>    json_attributes_topic: \"tele/tasmota/STATE\"\n    json_attributes_template: \"{{ value_json.Wifi | tojson }}\"\n</code></pre> <p>Sync Power State</p> <p>When MQTT broker or Home Assistant is restarted, or there is a WiFi outage, Tasmota device states may not be synced with Home Assistant. Use this automation to keep your devices in sync, including power state, immediately after Home Assistant is started.</p> <pre><code>automation:\n  - id: Sync Tasmota states\n    alias: Sync Tasmota states\n    initial_state: true\n    trigger:\n      platform: homeassistant\n      event: start\n    action:\n    # sync state for devices with default fulltopics\n    - service: mqtt.publish\n      data:\n        topic: cmnd/tasmotas/state\n        payload: ''\n    # sync state for pre8.2 autodiscovery devices\n    - service: mqtt.publish\n      data:\n        topic: tasmotas/cmnd/state\n        payload: ''\n</code></pre> <p>To sync a single TuyaMCU device states add this block with your %topic% to the automation. !!! bug      You could use <code>tasmotas</code> but SerialSend might cause issues on other devices so proceed with caution.</p> <pre><code>    - service: mqtt.publish\n      data:\n        topic: cmnd/%topic%/serialsend5\n        payload: 55aa0001000000\n</code></pre> <p>Sync Zigbee device states. Add this block with your %topic% and your Zigbee device name, endpoint and cluster.</p> <p>Example for a dimmable light</p> <pre><code>    - service: mqtt.publish\n      data:\n        topic: cmnd/zigbee-gateway/Backlog\n        payload: ZbRead { \"device\":\"0xE1F9\", \"endpoint\":1, \"cluster\":6, \"read\":0 }; delay 5; ZbRead { \"device\":\"0xE1F9\", \"endpoint\":1, \"cluster\":8, \"read\":0 }\n</code></pre> <p>Report Firmware Version</p> <p>Add a sensor like below for each Tasmota device whose firmware version you want to track.</p> <pre><code>mqtt:\n  sensor:\n    - platform: mqtt\n      name: \"Tasmota\"\n      state_topic: \"stat/tasmota/STATUS2\"\n      value_template: \"{{value_json['StatusFWR'].Version }}\"\n      availability_topic: \"tele/tasmota/LWT\"\n      payload_available: \"Online\"\n      payload_not_available: \"Offline\"\n</code></pre> <p>Automation to have each device report firmware version on Home Assistant reboot.  You can manually trigger this automation from Home Assistant UI.</p> <pre><code>automation:\n  - alias: \"Tasmota Firmware Version Check\"\n    trigger:\n      platform: homeassistant\n      event: start\n    action:\n      - service: mqtt.publish\n        data:\n          topic: \"cmnd/tasmotas/STATUS\"\n          payload: \"2\"\n</code></pre> <p>Tip</p> <p>If you want all your devices to switch to autodiscovery method go through Developer tools - MQTT by publishing to grouptopic <code>cmnd/tasmotas/SetOption19</code> with payload <code>1</code></p> <p>Get most recent Tasmota firmware version number from github</p> <pre><code>mqtt:\n  sensor:\n    - platform: command_line\n      name: \"Tasmota (latest version)\"\n      command: 'curl -s https://api.github.com/repos/arendst/Tasmota/tags | grep \"name\" | sort --version-sort -r | head -n 1 | sed -E \"s/\\s*\\\"name\\\": \\\"(.*)\\\",*/\\1/g\"'\n      scan_interval: 86400 # check once every day\n</code></pre> <p></p>"},{"location":"Home-Assistant/#mqtt-discovery-removed","title":"MQTT Discovery REMOVED","text":"<p>Home Assistant MQTT Discovery is removed from all builds of Tasmota and development of this feature is halted!</p> <p>Home Assistant has a feature called MQTT discovery. With MQTT discovery no user interaction or configuration file editing is needed to add new devices in Home Assistant. Most of the changes will be updated in HA automatically.</p>"},{"location":"Home-Assistant/#enable-autodiscovery","title":"Enable Autodiscovery","text":"<p>Enable autodiscovery on a device with the command:</p> <pre><code>SetOption19 1\n</code></pre> <p>After the automatic discovery feature is enabled a retained MQTT message starting with topic \"homeassistant/\" is sent to the broker. That message contains your device configuration which will be picked up and used by Home Assistant to automatically add your device to MQTT integrations.    </p> <p>Tasmota uses <code>DeviceName</code> to identify the device in Home Assistant MQTT integration and <code>FriendlyName&lt;x&gt;</code> to identify power outputs (switch or light entities in HA).</p> <p>When changing some settings you might need a reboot or use <code>SetOption19 1</code> again to see the new changes under Home Assistant.</p> <p>Special settings for each device type:</p>"},{"location":"Home-Assistant/#finalising-setup","title":"Finalising Setup","text":"<p>All automatically discovered entities will show up under Configuration -&gt; Integrations -&gt; MQTT card.</p> <p>The entities are grouped under a device defined by DeviceName and identified by Tasmota as the \"manufacturer\": </p> <p>Overview of a Tasmota device in Home Assistant integration compared to Configuration -&gt; Configure Other:</p> <p></p> <p>For every device an informative sensor will be created automatically:</p> <p></p> <p>This sensor will update on <code>TelePeriod</code> which is 5 minutes by default</p> <p>It will show as \"Unavailable\" until the first TelePeriod MQTT message</p> <p>You can further customise your device in Home Assistant by clicking on the entity name.</p> <p>Enabling discovery will automatically change some SetOptions to suit the new configuration</p> <p><code>SetOption4</code> to <code>0</code>: Return MQTT response always as <code>RESULT</code> and not as %COMMAND% topic</p> <p><code>SetOption17</code> to <code>1</code>: Show Color as a comma-separated decimal string instead of hexadecimal</p> <p><code>SetOption59</code> to <code>1</code>: Send <code>tele/%topic%/STATE</code> in addition to <code>stat/%topic%/RESULT</code> for commands <code>State</code>, <code>Power</code> and any command causing a light to be turned on.</p>"},{"location":"Home-Assistant/#supported-entities_1","title":"Supported Entities","text":"ButtonsLightsRelaysSensorsSwitches <p>Announced to Home Assistant as Automation Trigger.</p> <p>To have buttons discovered <code>SetOption73</code> must be set to <code>1</code> and it will automatically start to listen and publish using <code>/stat/%topic%/BUTTON&lt;x&gt;T</code> topic.</p> <p>Discovery will follow all the possible combinations made using SetOption1, SetOption11 and Setoption13.</p> <p>Announced to Home Assistant as MQTT Light.</p> <p>Discovery supports single channel Dimmer as well as multi-channel RGB, RGBW, RGBCCT and CCT lights.</p> <p>To have multi-channel PWM instead of a single light entity under Home Assistant use <code>SetOption68 1</code>.</p> <p>If you have a light with 4 or 5 channels (RGB+W or RGB+CCT) you can split them into two separate lights, first one for RGB and second for White/CT.  </p> <p>Note</p> <p>Tasmota will no longer switch <code>%prefix%</code> and <code>%topic%</code> and will keep the default topic structure. This could lead to a very long topic for a light and autodiscovery could fail to parse the necessary code for Home Assistant. In this case a warning will be shown in the logs and Tasmota Console.  To avoid this issue keep your Topic and/or FriendlyName as short as possible.</p> <p>Alternatively you can configure it manually using Light integration.</p> <p>Warning</p> <p>Pay attention to the order of the relays when used in conjunction with lights. The relays have priority over the lights, an incorrect order could lead to an erroneous light control. Add them starting from relay1.  Entities for relays and lights will not be available in Home Assistant until the configuration will be updated.</p> <p>Announced to Home Assistant as MQTT Switch.</p> <p>To make a relay discovered as \"light\" in Home Assistant use command <code>SetOption30 1</code> </p> <p>Alternatively you can configure it manually using Light Switch integration.</p> <p>Warning</p> <p>Pay attention to the order of the relays when used in conjunction with lights. The relays have priority over the lights, an incorrect order could lead to an erroneous light control. Add them starting from relay1.  Entities for relays and lights will not be available in Home Assistant until the configuration will be updated.</p> <p>Announced to Home Assistant as MQTT Sensor.</p> <p>When discovery is enabled Tasmota will send all the sensors information to Home Assistant. For each sensor present, entities will be created in numbers equal to the items present below him.</p> <p>Example:    An AM2301 sensor will generate one entity for Temperature, one for Humidity and one for Dew point.   </p> <p>Warning</p> <p>Please be advised that not all sensors can be correctly rendered under Home Assistant. In those cases a fallback function will be used to create a generic sensor and the correct operation is not guaranteed.</p> <p>Announced to Home Assistant as MQTT Binary Sensor and/or as an Automation Trigger.</p> <p>To have switches discovered <code>SwitchTopic</code> must be set to a custom name and it will automatically start to listen and publish using <code>stat/%topic%/SWITCH&lt;x&gt;</code> (binary sensor) or <code>stat/%topic%/SWITCH&lt;x&gt;T</code> (trigger) topics.</p> <p>Depending by the <code>SwitchMode</code>used, a switch can be a Trigger (<code>TOGGLE</code>or <code>HOLD</code>), a Binary Sensor (<code>ON</code>/<code>OFF</code>) or both at the same time.</p> <p>Example: When using with <code>SwitchMode 0</code> Tasmota will create just one Trigger for <code>TOGGLE</code>. When using with <code>SwitchMode 1</code> Tasmota will create a <code>Binary Sensor</code> with <code>ON</code> and <code>OFF</code> Payloads. When using with <code>Switchmode 5</code> Tasmota will create a <code>Binary Sensor</code> with <code>ON</code> and <code>OFF</code> Payloads and a Trigger for <code>TOGGLE</code>.  </p> <p>All switchmodes are supported with the sole exception of <code>SwitchMode11</code> and <code>SwitchMode12</code> able to generate just a <code>TOGGLE</code> trigger.</p> <p>When a switch is set to a different topic than <code>0</code> is not possible to use <code>Switch#State</code> as a trigger for rules.</p> <p>Types of devices not listed above (covers, etc) require manual configuration</p>"},{"location":"Home-Assistant/#troubleshooting","title":"Troubleshooting","text":"<p>Test if Tasmota and Home Assistant can communicate properly. </p> <p></p> <p>Click on the above button or in your Home Assistant web UI go to Configuration - Integrations, locate MQTT card and click on CONFIGURE. Subscribe to <code>tele/%topic%/STATE</code> and click START LISTENING. You should see a JSON response from your device inside 5 minutes.</p> <p>To test control of a relay or light, as Publish a packet topic enter <code>cmnd/%topic%/POWER</code> with payload <code>toggle</code> or <code>2</code>. When you click PUBLISH your device should switch state and a JSON resc  </p>"},{"location":"HomeSeer/","title":"HomeSeer","text":"<p>For those knowing more about HomeSeer please update this page.</p> <p>About HomeSeer <code>HS3 is the industry standard for flexible, powerful, home automation software. A wide selection of software drivers (plug-ins) is available for use with scores of home automation technologies and products.</code></p> <p>The following forum link provides a guide to upload Tasmota to an S20 using SonOTA and integrate it with HomeSeer HS3 using the mcsMQTT plugin.</p> <p>Here is a guide for integrating HomeSeer HS3 with the Sonoff 4CH Pro and Tasmota firmware as a Garage Door controller using the mcsMQTT plugin.  </p> <p>Requirements for HomeSeer HS3 and Tasmota devices: * HomeSeer HS3  * MQTT server * A MQTT plugin for HS3</p> <p>Currently there are two plugins, both free: \"MQTT\" and \"mcsMQTT\".  The former is more intuitive but hasn't been updated for a while, the latter is newer and constantly updated.</p> <p>If you use \"MQTT\" plugin you need to synch the virtual device to reflect the status of the physical button, this can be done  with a plugin: * EasyTrigger plugin - costs 25$ (used to synchronise the status of the virtual device in HomeSeer when the Sonoff Tasmota module is operated from the physical button)</p> <p>If you use \"mcsMQTT\", starting from ver 3.0.3+ it allows to create a device that both report and control the status of the Sonoff. More info here: https://forums.homeseer.com/showthread.php?t=192675</p> <p>Tasmota Plug-in</p> <p>If your interested in a FREE specific plug-in for Sonoff + Tasmota, then Instructions are HERE and you can install it from the Homeseer Plug-ins Manager, in Primary Technology as TasMQTT. </p> <p>This plug-in takes care of two-way updates so wall switches update Homseer devices and homeseer changes update Sonoff devices. The plug-in also takes care of monitoring sonoff availability and optionally flags homeseer devices as offline so events can take that into consideration before making changes. When devices come back online Homeseer is updated with the current status of the devices. The plug-in also supports Tasmota Sensors such as the Sonoff TH1 etc. The plug-in has so far been tested extensively with the entire Sonoff Portfolio and as new devices become available we'll test those too. </p> <p></p> <p>This plug-in has been in beta for 6 months and has now reached production. Beta's will continue to be released to support any new Tasmota enabled devices. </p>"},{"location":"Homebridge/","title":"Homebridge","text":"<p>Homebridge is a NodeJS server which emulates the iOS HomeKit API to enable support for non-native devices (like Sonoff and Magichome devices).</p> <p>Tasmota compatible plugins have been developed by macwyznawca and arachnetech as well as others to add support for these devices in Apple's Home app and through iCloud for automation (iPad, HomePod/Apple TV 4 or newer required). Note these plugins are not necessarily specific to Sonoff devices.</p> <p>The <code>homebridge-mqttthing</code> package has support for many types of devices and is quite flexible with different options especially for RGB/RGBW LED strips.</p> <p>As of 1.0.11 <code>homebridge-mqttthing</code> supports the following Homekit device types:</p> <ul> <li>Light bulb</li> <li>Switch</li> <li>Outlet</li> <li>Motion Sensor</li> <li>Occupancy Sensor</li> <li>Light Sensor</li> <li>Contact Sensor</li> <li>Doorbell</li> <li>Security System</li> <li>Smoke Sensor</li> <li>Temperature Sensor</li> <li>Humidity Sensor</li> <li>Stateless Programmable Switch</li> <li>Garage Door</li> <li>Garage Door Opener</li> </ul> <p>Check out macwyznawca's packages for supported functions, each in a separate package.</p> <p>To use Homebridge with Tasmota you need to have an existing MQTT broker set up (see wiki article) and each of your Sonoff devices should have a unique topic set.</p> <p>Example screenshot from Apple Home.app</p> <p></p>"},{"location":"Honeywell-HIH/","title":"Honeywell HIH temperature and humidity sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_HIH6\n#define USE_HIH6    // Enable Honeywell HIH (I2C address 0x27) (+0k6)\n#endif\n</code></pre></p> <p>Honeywell HumidIcon\u2122 Digital Humidity and Temperature Sensors HIH Series</p>"},{"location":"Honeywell-HIH/#configuration","title":"Configuration","text":""},{"location":"Honeywell-HIH/#wiring","title":"Wiring","text":"<p>Get the 4 pin SIP version if possible, as this will be easier to solder than the 8 pin SMD version.</p> <p></p> <p></p> <p>Looking at the side of the sensor with a filter: * Pin 1 VDD  1.  connect via 0.22 uF to ground  1.  connect to 3v3 on the ESP * Pin 2 GND  1.  connect to GND on the ESP * Pin 3 SCL  1.  connect via 2k2 resistor to 3v3  1.  connect to TX on the ESP  * Pin 4 SDA  1.  connect via 2k2 resistor to 3v3  1.  connect to RX on the ESP</p> <p>Remember to peel off the white sticker over the filter before use.</p> <p>I have tested several of these without the 0.22 uF capacitor and without the pull-up resistors, and I haven't seen any difference in the readings.  The cap is probably more important that the resistors, since the internal pull-ups in the ESP8266 will work. That said, if I was installing these in a hard-to-service location, I would follow the wiring diagram exactly.</p> <p>I have noticed that temperature readings tend to be a degree or so high if the sensor is wired directly to the ESP: </p> <p>Soldering a 1-2\" piece of wire between the ESP and the HIH7121 fixes this issue: </p>"},{"location":"Honeywell-HIH/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign: 1. GPIO RX to <code>I2C SDA</code> 2. GPIO TX to <code>I2C SCL</code></p> <p>After a reboot the driver will detect the HIHxxxx automatically and display sensor data.</p> <p>&lt;--- </p> <p>if you have an LCD display also configured, run <code>I2CDriver3 0</code></p> <p>More documentation on this is in the I2CDEVICES.md file.</p>"},{"location":"Honeywell-HIH/#why-the-honeywell-hih-series-sensors","title":"Why the Honeywell HIH series sensors?","text":"<p>The go-to humidity sensor for the DIY Arduino/ESP8266 community is the DHT22.  Unfortunately, this sensor has a tendency to collect condensation and give false readings (usually 99.9% RH) in wet environments like a bathroom or outside.  Not being able to use a humidity sensor in a wet area (IMHO) defeats the point of a humidity sensor, so I set about looking for alternatives.</p> <p>After looking at several options, I found the Honeywell HIHxxxx sensors. Different models of the HIH line have different features and work over different ranges of humidity, but most of them use the same I2C protocol, which is now supported in Tasmota.  Check the datasheets to compare sensors.  One of the most critical features to look for is a hydrophobic filter which allows humid air through, but blocks water droplets from entering the sensor.  This is listed on the datasheets as \"with filter,condensation resistant\".  Also keep in mind the humidity range you'll be measuring.</p> <p>For my purposes (bathroom humidity sensor), there was a clear choice in the HIH7121-021 (datasheet, non-affiliate direct link to product on Mouser, which works over a range of 0-100% RH, supports I2C, is accurate to within 3%, and has a hydrophobic filter. The article focuses on that sensor, but I suspect much of the information will be applicable to other HIHxxxx sensors.</p> <p>by @thepotoo</p>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/","title":"How to Expand Sonoff Basic to 4MB Flash","text":"<p>Heya,</p> <p>In this memo I'll describe how to expand the flash of a sonoff basic from 1MB to 4MB. The advantage for this change is, to avoid to double flash with the minimal and then with the normal firmware and to use more features like Webserver and SSL encryption.</p> <p>It was hard to find those information, I'll give credits to some users from the german CreationX Forum.</p> <p>Because to unsolder the flash isn't that easy as just solder in pins, this is only for advanced users.</p> <p>Don't forget, it's at your own risk and the device could be damaged permanently.</p>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/#the-hardware","title":"The Hardware","text":"<ul> <li>Soldering iron</li> <li>Tin</li> <li>Tweezers</li> </ul>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/#the-flash","title":"The Flash","text":"<p>The origin flash block is a XTX PN25F08B 1725XDG. We exchange it with a WINBOND W25Q32FVSIG 1416. You can find the WINBOND Flash on eBay (another ebay) or AliExpress</p> <p></p> <p></p> <p>Those China flash memory ICs are cheap productions, means the chance to solder in a new defect not working flash block is high! Be ready to re-do the operation if the upload fails.</p> <p>If you want to test the flash block, build yourself a test module, something like this for easy soldering in a flash and test it before soldering it in another sonoff basics board. </p>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/#the-operation","title":"The Operation","text":"<p>You will notice that the LED is in the way. Get a pen and mark on of its Pin with the board, so you can solder it in back later in the correct Position. It's a Red-Green LED, if you solder it in the wrong way, it will light up in red.</p> <p>After the LED is out of the way, you give some tin on the pins from the flash block and connect all 4 pins in a row together with tin. This way it will be easier to desolder it, because you need to melt all pins at the same time.</p> <p>Now get a thin object between the flash and the board, try to gently lift the flash up  and at the same time melt both rows of the flash pins tin rotatory. If you got enough space between the board and the flash change to the tweezers and finally take the flash block off.</p> <p>Now refresh the contacts on the board for the new flash block with a lil bit of fresh tin. Don't forget to give a lil bit tin to the new pins of the flash block, too!</p> <p>Now put it on the contacts on the board and try to lock it with the tweezers. Next take the solder iron and head just one pin and try to arrange the flashblock in the center now. Finally, heat and solder the other pins to the board.</p> <p></p> <p>You can also use a hot air rework station, this would be much safer, but also more expensive (Amazon). Be sure to protect the rest of the board if using the heat gun! </p> <p>Good job, you are done :)</p>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/#flashing","title":"Flashing","text":"<p>The next step is to tell Atom (i did not do it with Arduino IDE, sry) to use the whole new 4MB Flash. Note: You can only use 3MB, because 1MB is needed for SPIFFS.</p> <p>To do this, you need to edit the platformio.ini file. Search for your preferred language Block and copy the whole Block. Rename it to e.g. Sonoff-DE-4M Now change the following line</p> <pre><code>build_flags = -Wl,-Tesp8266.flash.1m0.ld -DMY_LANGUAGE=de-DE\n</code></pre> <p>to</p> <pre><code>build_flags = -Wl,-Tesp8266.flash.4m1m.ld -DMY_LANGUAGE=de-DE\n</code></pre> <p>Now scroll back to the top and enter a new default environment with the name of your newly created block</p> <pre><code>env_default = sonoff-DE-4M\n</code></pre> <p>You are done with the preparations, connect the Sonoff with the 4MB Flash in flash mode (hold button while powering it up), click clean, click build, click upload. </p>"},{"location":"How-to-Expand-Sonoff-Basic-to-4MB-Flash/#result","title":"Result","text":"<p>On the Information Page on the tasmota web interface you can now see the 4MB flash :)  </p>"},{"location":"Hubitat/","title":"Hubitat","text":""},{"location":"Hubitat/#hubitat","title":"Hubitat","text":"<p>Hubitat is a SmartHome platform combining advanced functionality with an easier to approach interface. Designed to be highly reliable and without requiring an internet connection Gary  has built an integration without any custom code, and able to integrate directly with Hubitat.</p> <p>The integration is best discussed on this forum thread and support can be found there too. For a direct link to the project on Github you can find it at Hubitat-Tasmota</p> <p>There are 12 unique drivers that perform realtime native synchronisation between Tasmota 11 or greater and Hubitat. No special compilation of Tasmota or webhooks required. Drivers use Tasmota triggers and rules to notify Hubitat using a JSON like sync whenever a monitored parameter changes such as power, color, dimmer, watts etc. 1) Color Bulb 2) Switch with Dimmer 3) Switch with Fan 3) Fan with Dimmer 4) Single Relay\\Switch\\Plug with optional power monitoring 5) Dual Relay\\Switch\\Plug with optional power monitoring 6) Triple Relay\\Switch\\Plug (No power monitoring) 7) Quad Relay\\Switch\\Plug (No power monitoring) 8) Eight Relay\\Switch (No power monitoring) 9) Universal Multi Sensor 10) Universal Multi Sensor Single Relay 11) Universal Multi Sensor Double Relay</p>"},{"location":"Hubitat/#installation","title":"Installation","text":"<p>Whilst full installation instructions are on the above forum/github links, installation is very easy involving a few simple steps: 1) Install 'Tasmota Sync' using Hubitat Package Manager 2) Create a device and add the MAC address (or IP address) as the device ID 3) Press 'Save Device' and then 'tasmotaInjectRule' and it should be working!</p>"},{"location":"I2CDEVICES/","title":"I2C devices","text":"<p>Tasmota supports several I2C devices. To use them I2C and the device need to be enabled at compile time. I2C and some devices are supported also in the official releases. Devices can be de/-actived on runtime to solve possible address conflicts. (e.g. address 0x27 is used by multiple devices)</p> <p>Using command <code>I2cDriver</code> individual drivers can be enabled or disabled at runtime allowing duplicate I2C addresses at compile time. Use the Index from the table below to control I2C drivers like <code>I2cDriver10 0</code> for disabling BMP support.</p>"},{"location":"I2CDEVICES/#supported-i2c-devices","title":"Supported I2C devices","text":"<p>The following table lists the supported I2C devices</p> Index Define Driver Device Address(es) Description 1 USE_PCA9685 xdrv_15 PCA9685 0x40 - 0x47 16-channel 12-bit pwm driver 1 USE_PCA9685_V2 xdrv_15 PCA9685 0x40 - 0x47 16-channel 12-bit pwm driver 2 USE_PCF8574 xdrv_28 PCF8574 0x20 - 0x26 8-bit I/O expander (address range overridable) 2 USE_PCF8574 xdrv_28 PCF8574A 0x39 - 0x3F 8-bit I/O expander (address range overridable) 3 USE_DISPLAY_LCD xdsp_01 0x27, 0x3F LCD display 4 USE_DISPLAY_SSD1306 xdsp_02 SSD1306 0x3C - 0x3D Oled display 5 USE_DISPLAY_MATRIX xdsp_03 HT16K33 0x70 - 0x77 8x8 led matrix 6 USE_DISPLAY_SH1106 xdsp_07 SH1106 0x3C - 0x3D Oled display 7 USE_ADE7953 xnrg_07 ADE7953 0x38 Energy monitor 8 USE_SHT xsns_07 SHT1X Any Temperature and Humidity sensor 9 USE_HTU xsns_08 HTU21 0x40 Temperature and Humidity sensor 9 USE_HTU xsns_08 SI7013 0x40 Temperature and Humidity sensor 9 USE_HTU xsns_08 SI7020 0x40 Temperature and Humidity sensor 9 USE_HTU xsns_08 SI7021 0x40 Temperature and Humidity sensor 10 USE_BMP xsns_09 BMP085 0x76 - 0x77 Pressure and temperature sensor 10 USE_BMP xsns_09 BMP180 0x76 - 0x77 Pressure and temperature sensor 10 USE_BMP xsns_09 BMP280 0x76 - 0x77 Pressure and temperature sensor 10 USE_BMP xsns_09 BME280 0x76 - 0x77 Pressure, temperature and humidity sensor 10 USE_BMP xsns_09 BME680 0x76 - 0x77 Pressure, temperature, humidity and gas sensor 11 USE_BH1750 xsns_10 BH1750 0x23, 0x5C Ambient light intensity sensor 12 USE_VEML6070 xsns_11 VEML6070 0x38 - 0x39 Ultra violet light intensity sensor 13 USE_ADS1115 xsns_12 ADS1115 0x48 - 0x4B 4-channel 16-bit A/D converter 14 USE_INA219 xsns_13 INA219 0x40 - 0x41, 0x44 - 0x45 Low voltage current sensor 15 USE_SHT3X xsns_14 SHT3X 0x44 - 0x45 Temperature and Humidity sensor 15 USE_SHT3X xsns_14 SHT4X 0x44 - 0x45 Temperature and Humidity sensor 15 USE_SHT3X xsns_14 SHTCX 0x70 Temperature and Humidity sensor 16 USE_TSL2561 xsns_16 TSL2561 0x29, 0x39, 0x49 Light intensity sensor 17 USE_MGS xsns_19 Grove 0x04 Multichannel gas sensor 18 USE_SGP30 xsns_21 SGP30 0x58 Gas (TVOC) and air quality sensor 19 USE_SI1145 xsns_24 SI1145 0x60 Ultra violet index and light sensor 19 USE_SI1145 xsns_24 SI1146 0x60 Ultra violet index and light sensor 19 USE_SI1145 xsns_24 SI1147 0x60 Ultra violet index and light sensor 20 USE_LM75AD xsns_26 LM75AD 0x48 - 0x4F Temperature sensor 21 USE_APDS9960 xsns_27 APDS9960 0x39 Proximity ambient light RGB and gesture sensor 22 USE_MCP230xx xsns_29 MCP23008 0x20 - 0x26 8-bit I/O expander 22 USE_MCP230xx xsns_29 MCP23017 0x20 - 0x26 16-bit I/O expander 23 USE_MPR121 xsns_30 MPR121 0x5A - 0x5D Proximity capacitive touch sensor 24 USE_CCS811 xsns_31 CCS811 0x5A Gas (TVOC) and air quality sensor 24' USE_CCS811_V2 xsns_31 CCS811 0x5A - 0x5B Gas (TVOC) and air quality sensor 25 USE_MPU6050 xsns_32 MPU6050 0x68 - 0x69 3-axis gyroscope and temperature sensor 26 USE_DS3231 xsns_33 DS3231 0x68 Real time clock 27 USE_MGC3130 xsns_36 MGC3130 0x42 Electric field sensor 28 USE_MAX44009 xsns_41 MAX44009 0x4A - 0x4B Ambient light intensity sensor 29 USE_SCD30 xsns_42 SCD30 0x61 CO2 sensor 30 USE_SPS30 xsns_44 SPS30 0x69 Particle sensor 31 USE_VL53L0X xsns_45 VL53L0X 0x29 Time-of-flight (ToF) distance sensor 32 USE_MLX90614 xsns_46 MLX90614 0x5A Infra red temperature sensor 33 USE_CHIRP xsns_48 CHIRP 0x20 Soil moisture sensor 34 USE_PAJ7620 xsns_50 PAJ7620 0x73 Gesture sensor 35 USE_INA226 xsns_54 INA226 0x40 - 0x41, 0x44 - 0x45 Low voltage current sensor 36 USE_HIH6 xsns_55 HIH6130 0x27 Temperature and Humidity sensor 37 USE_24C256 xdrv_10 24C256 0x50 Scripter EEPROM storage 38 USE_DISPLAY_ILI9488 xdsp_08 FT6236 0x38 Touch panel controller 39 USE_DISPLAY_RA8876 xdsp_10 FT5316 0x38 Touch panel controller 40 USE_TSL2591 xsns_57 TSL2591 0x29 Light intensity sensor 41 USE_DHT12 xsns_58 DHT12 0x5C Temperature and humidity sensor 42 USE_DS1624 xsns_59 DS1621 0x48 - 0x4F Temperature sensor 42 USE_DS1624 xsns_59 DS1624 0x48 - 0x4F Temperature sensor 43 USE_AHT1x xsns_63 AHT10/15 0x38 - 0x39 Temperature and humidity sensor 43 USE_AHT2x xsns_63 AHT20 0x38 Temperature and humidity sensor 43 USE_AHT2x xsns_63 AM2301B 0x38 Temperature and humidity sensor 44 USE_WEMOS_MOTOR_V1 xdrv_34 0x2D - 0x30 WEMOS motor shield v1.0.0 (6612FNG) 45 USE_HDC1080 xsns_65 HDC1080 0x40 Temperature and Humidity sensor 46 USE_IAQ xsns_66 IAQ 0x5a Air quality sensor 47 USE_DISPLAY_SEVENSEG xdsp_11 HT16K33 0x70 - 0x77 Seven segment LED 48 USE_AS3935 xsns_67 AS3935 0x03 Franklin Lightning Sensor 49 USE_VEML6075 xsns_70 VEML6075 0x10 UVA/UVB/UVINDEX Sensor 50 USE_VEML7700 xsns_71 VEML7700 0x10 Ambient light intensity sensor 51 USE_MCP9808 xsns_72 MCP9808 0x18 - 0x1F Temperature sensor 52 USE_HP303B xsns_73 HP303B 0x76 - 0x77 Pressure and temperature sensor 53 USE_MLX90640 xdrv_43 MLX90640 0x33 IR array temperature sensor 54 USE_VL53L1X xsns_77 VL53L1X 0x29 Time-of-flight (ToF) distance sensor 55 USE_EZOPH xsns_78 EZOPH 0x61 - 0x70 pH sensor 55 USE_EZOORP xsns_78 EZOORP 0x61 - 0x70 ORP sensor 55 USE_EZORTD xsns_78 EZORTD 0x61 - 0x70 Temperature sensor 55 USE_EZOHUM xsns_78 EZOHUM 0x61 - 0x70 Humidity sensor 55 USE_EZOEC xsns_78 EZOEC 0x61 - 0x70 Electric conductivity sensor 55 USE_EZOCO2 xsns_78 EZOCO2 0x61 - 0x70 CO2 sensor 55 USE_EZOO2 xsns_78 EZOO2 0x61 - 0x70 O2 sensor 55 USE_EZOPRS xsns_78 EZOPRS 0x61 - 0x70 Pressure sensor 55 USE_EZOFLO xsns_78 EZOFLO 0x61 - 0x70 Flow meter sensor 55 USE_EZODO xsns_78 EZODO 0x61 - 0x70 Dissolved Oxygen sensor 55 USE_EZORGB xsns_78 EZORGB 0x61 - 0x70 Color sensor 55 USE_EZOPMP xsns_78 EZOPMP 0x61 - 0x70 Peristaltic Pump 56 USE_SEESAW_SOIL xsns_81 SEESOIL 0x36 - 0x39 Adafruit seesaw soil moisture sensor 57 USE_TOF10120 xsns_84 TOF10120 0x52 Time-of-flight (ToF) distance sensor 58 USE_MPU_ACCEL xsns_85 MPU_ACCEL 0x68 MPU6886/MPU9250 6-axis MotionTracking sensor from M5Stack 59 USE_BM8563 xdrv_56 BM8563 0x51 BM8563 RTC from M5Stack 60 USE_AM2320 xsns_88 AM2320 0x5C Temperature and Humidity sensor 61 USE_T67XX xsns_89 T67XX 0x15 CO2 sensor 62 USE_SCD40 xsns_92 SCD40 0x62 CO2 sensor Sensirion SCD40/SCD41 63 USE_HM330X xsns_93 HM330X 0x40 Particule sensor 64 USE_HDC2010 xsns_94 HDC2010 0x40 Temperature and Humidity sensor 65 USE_ADE7880 xnrg_23 ADE7880 0x38 Energy monitor 66 USE_PCF85363 xsns_99 PCF85363 0x51 Real time clock 67 USE_DS3502 xdrv_61 DS3502 0x28 - 0x2B Digital potentiometer 68 USE_HYT xsns_97 HYTxxx 0x28 Temperature and Humidity sensor 69 USE_SGP40 xsns_98 SGP40 0x59 Gas (TVOC) and air quality 70 USE_LUXV30B xsns_99 LUXV30B 0x4A DFRobot SEN0390 V30B lux sensor 71 USE_QMC5883L xsns_33 QMC5883L 0x0D Magnetic Field Sensor 72 USE_INA3221 xsns_100 INA3221 0x40-0x43 3-channels Voltage and Current sensor 73 USE_HMC5883L xsns_101 HMC5883L 0x1E 3-channels Magnetic Field Sensor 74 USE_DISPLAY_TM1650 xdsp_20 TM1650 0x24 - 0x27, 0x34 - 0x37 Four-digit seven-segment LED controller 75 USE_PCA9632 xdrv_64 PCA9632 0x60 4-channel 4-bit pwm driver 76 USE_SEN5X xsns_103 SEN5X 0x69 Gas (VOC/NOx index) and air quality (PPM &lt;1,&lt;2.5,&lt;4,&lt;10) 77 USE_MCP23XXX_DRV xdrv_67 MCP23x17 0x20 - 0x26 16-bit I/O expander as virtual button/switch/relay 78 USE_PMSA003I xsns_104 PMSA003I 0x12 PM2.5 Air Quality Sensor with I2C Interface 79 USE_GDK101 xsns_106 GDK101 0x18 - 0x1B Gamma Radiation Sensor 80 USE_TC74 xsns_108 TC74 0x48 - 0x4F Temperature sensor 81 USE_PCA9557 xdrv_69 PCA95xx 0x18 - 0x1F 8-bit I/O expander as virtual button/switch/relay 82 USE_SGP4X xsns_109 SGP4X 0x59 Gas (TVOC/NOx index) 83 USE_MAX17043 xsns_110 MAX17043 0x36 Fuel-gauge for 3.7 Volt Lipo battery 84 USE_ENS16x xsns_111 ENS16x 0x52 - 0x53 Gas (TVOC, eCO2) and air quality sensor 85 USE_ENS210 xsns_112 ENS210 0x43 - 0x44 Temperature and humidity sensor 86 USE_AMSX915 xsns_114 AMS6915 0x28 Pressure (absolute/differential) and temperature sensor 87 USE_SPL06_007 xsns_25 SPL06-007 0x76 Pressure and temperature sensor 88 USE_QMP6988 xsns_28 QMP6988 0x56, 0x70 Pressure and temperature sensor 89 USE_HX711_M5SCALES xsns_34 M5SCALES 0x26 M5Unit (Mini)Scales(HX711 STM32) U177 90 USE_RX8010 xdrv_56 RX8010 0x32 RX8010 RTC from IOTTIMER 91 USE_MS5837 xsns_116 MS5837 0x76 Pressure and temperature sensor 92 USE_PCF85063 xdrv_56 PCF85063 0x51 PCF85063 Real time clock"},{"location":"I2S-Audio/","title":"I2S Audio","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: To use it you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <p><pre><code>#ifndef USE_I2S_AUDIO\n#define USE_I2S_AUDIO                             // Add support for I2S audio output\n// #define USE_I2S_NO_DAC                         // Add support for transistor-based output without DAC\n// #define USE_I2S_LSB                            // Add support for LSBJ chips, e.g. TM8211/PT8211\n// #define USE_I2S_WEBRADIO                       // Add support for MP3 web radio streaming (only on ESP32 with PSRAM)\n// #define USE_I2S_SAY_TIME                       // Add support for english speaking clock\n// #define USE_I2S_RTTTL                          // Add support for Rtttl playback\n#endif\n\n// USE_M5STACK_CORE2, USE_TTGO_WATCH and ESP32S3_BOX already include I2S_AUDIO\n</code></pre> Also requires <code>lib_extra_dirs = lib/lib_audio, lib/libesp32_audio</code> added to the build environment</p> <p>I2S (Inter-IC Sound) is a serial, synchronous communication protocol that is usually used for transmitting audio data between two digital audio devices.</p>"},{"location":"I2S-Audio/#audio-output","title":"Audio Output","text":"<p>For audio output an I2S digital audio decoder (DAC) board is required. It is recommended to use an external DAC</p> I2S DAC ESP32 ESP8266 (fixed pins) BCLK I2S_BCLK GPIO15 LRCK/WS I2S_WS GPIO02 DIN I2S_DOUT GPIO03 SD NC GAIN NC VIN 3V3 or 5V 3V3 or 5V GND GND GND"},{"location":"I2S-Audio/#internal-dac","title":"Internal DAC","text":"<p>ESP32 has two 8-bit DAC (digital to analog converter) channels, connected to GPIO25 (Channel 1) and GPIO26 (Channel 2).</p> <p>Those channels can be driven via the I2S driver when using the \u201cbuilt-in DAC mode\u201d enabled with <code>USE_I2S_NO_DAC</code></p>"},{"location":"I2S-Audio/#commands","title":"Commands","text":"CMD DAC action I2SGain <code>0..100</code> = sets the volume of the audio signal I2SPlay <code>/file.mp3</code> = plays a .mp3 audio file from the file system, in a separate task not blocking the system I2SRtttl <code>string</code> = play Ring Tones Text Transfer Language (RTTTL) ringtones (requires defined <code>USE_I2S_RTTTL</code>) I2SSay <code>text</code> = speaks the text you typed (only English language supported) I2STime tells current Tasmota time in English (requires defined <code>USE_I2S_SAY_TIME</code>) I2SWr <code>url</code> = starts playing an mp3 radio stream, no blocking (requires defined <code>USE_I2S_WEBRADIO</code>)no parameter = stops playing the stream"},{"location":"I2S-Audio/#audio-input","title":"Audio Input","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: To use it you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_I2S_AUDIO\n#define USE_I2S_AUDIO                    // Add support for I2S audio output (needed even if using only microphone)\n#define USE_I2S_MIC                      // Add support for I2S microphone\n//#define MIC_PDM                        // Set microphone as PDM (only on ESP32)\n//#define MIC_CHANNELS 1                 // 2 = stereo (I2S_CHANNEL_FMT_RIGHT_LEFT), 1 = mono (I2S_CHANNEL_FMT_ONLY_RIGHT)\n//#define MICSRATE 32000                 // Set sample rate\n#define USE_SHINE                        // Use MP3 encoding (only on ESP32 with PSRAM)\n//#define MP3_MIC_STREAM                 // Add support for streaming microphone via http (only on ESP32 with PSRAM)\n  //#define MP3_STREAM_PORT 81           // Choose MP3 stream port (default = 81)\n#endif\n\n// USE_M5STACK_CORE2, USE_TTGO_WATCH and ESP32S3_BOX already include I2S_AUDIO\n</code></pre>"},{"location":"I2S-Audio/#i2s-microphone","title":"I2S Microphone","text":"<p>For microphone input an I2S microphone must be connected.</p> I2S Microphone ESP32 ESP8266 (fixed pins) SCK I2S_BCLK GPIO13 WS I2S_WS GPIO14 SD I2S_DIN GPIO12 L/R GND GND VDD 3.3V 3.3V GND GND GND <p>If you're using only the microphone without a DAC you still need to set pin <code>I2S_DOUT</code> to an unused GPIO.</p>"},{"location":"I2S-Audio/#pdm-microphone","title":"PDM Microphone","text":"<p>Pulse density modulation (PDM) microphones are not an I2S or PWM microphone but still have a digital signal. They're used in ESP32-S3-BOX, Seeed Xiao Sense and others.</p> <p>Compile Tasmota with <code>MIC_PDM</code> defined.</p> Microphone ESP32 CLK I2S_WS DATA I2S_DIN L/R GND VDD 3.3V GND GND NC I2S_DOUT NC I2S_BCLK <p>When using PDM microphones the microphone CLK pin is configured as <code>I2S_WS</code> in Tasmota.</p>"},{"location":"I2S-Audio/#commands_1","title":"Commands","text":"<p>ESP32 with PSRAM required!</p> CMD Action I2SMGain <code>1..50</code> = sets the gain factor of the microphone I2SRec (requires defined <code>USE_SHINE</code>)<code>/file.mp3</code> = starts recording a .mp3 audio file to the file system, no blocking no parameter = stops recording<code>-?</code> = shows how many seconds already recorded I2SStream (requires defined <code>MP3_MIC_STREAM</code>)<code>1</code> = starts streaming .mp3 server at <code>http://&lt;device_ip&gt;:81/stream.mp3</code> <code>1</code> = stop the stream"},{"location":"I2S-Audio/#i2s-audio-bridge","title":"I2S Audio Bridge","text":"<p>Starts an UDP audio service to connect 2 ESP32 devices as an audio intercom (an example). </p> <p>Needs audio output and microphone on 2 devices (no PSRAM needed)  </p> <pre><code>#ifndef I2S_BRIDGE\n#define USE_I2S_AUDIO                       // Add support for I2S audio output\n#define USE_I2S_MIC                         // Add support for I2S microphone\n#define I2S_BRIDGE                          // Add support for UDP PCM audio bridge\n  //#define I2S_BRIDGE_PORT    6970         // Set bridge port (default = 6970)\n#endif\n</code></pre> CMD bridge action I2SBridge <code>ip</code> = sets the IP of the slave device<code>0</code> = stop bridge<code>1</code> = start bridge in read mode<code>2</code> = start bridge in write mode<code>3</code> = start bridge in loopback mode<code>4</code> = set bridge to master<code>5</code> = set bridge to slave<code>6</code> = set microphone to swapped<code>7</code> = set microphone to not swapped<code>p&lt;x&gt;</code> = sets the push to talk button where <code>x</code> is the button's GPIO pin number <p>If a push to talk button is defined the bridge goes to write mode if the button is pushed and to read mode if the button is released  </p>"},{"location":"I2S-Audio_ESP32/","title":"I2S Audio for ESP32","text":"This feature is not included in precompiled binaries <p>Add the following to the build environment and compile your build:</p> <p><pre><code>build_flags                 = ${env:tasmota32_base.build_flags}\n                              -DUSE_I2S_ALL\n</code></pre> Also requires <code>lib_extra_dirs = lib/lib_audio</code> added to the build environment</p> <p>You can create smaller firmware versions with selective use of the build flags: <pre><code>  #define USE_I2S ;             base flag - always needed\n  #define USE_I2S_AUDIO ;       base flag - always needed\n  #define USE_I2S_MIC ;         microphone support\n  #define USE_SHINE ;           MP3 encoder support for microphone\n  #define MP3_MIC_STREAM ;      streaming from microphone to local network\n  #define USE_I2S_AUDIO_BERRY ; the I2S module for Berry\n  #define USE_I2S_AAC ;         AAC decoder - needs about 75 kB flash\n  #define USE_I2S_OPUS ;        OPUS codec - needs about 25 kB flash\n</code></pre></p> <p>The main difference to the older ESP8266 sound driver is the configuration of the various settings at runtime with the command <code>i2sconfig</code>, which uses a hidden driver file.  </p> <p>I2S (Inter-IC Sound) is a serial, synchronous communication protocol that is usually used for transmitting audio data between two digital audio devices. The I2S framework of the ESP-IDF supports 3 communication modes which are standard, PDM and TDM. TDM is the most advanced mode and very uncommon in the IOT world - there is no support for it in Tasmota yet.  </p> <p>Support for different I2S modes varies across the ESP32 family:  </p> Target Standard PDM TX PDM RX TDM ADC/DAC LCD/Camera ESP32 I2S 0/1 I2S 0 I2S 0 none I2S 0 I2S 0 ESP32-S2 I2S 0 none none none none I2S 0 ESP32-C3 I2S 0 I2S 0 none I2S 0 none none ESP32-C6 I2S 0 I2S 0 none I2S 0 none none ESP32-S3 I2S 0/1 I2S 0 I2S 0 I2S 0/1 none none <p>Note the limited support for PDM microphones.</p>"},{"location":"I2S-Audio_ESP32/#audio-settings","title":"Audio settings","text":"<p>Without any additional argument <code>i2sconfig</code> will print the current audio configuration to the console in JSON format, e.g.:</p> <pre><code>MQT: stat/tasmota_4359CC/RESULT = \n{\"I2SConfig\":\n{\"Sys\":{\"Version\":2,\"Duplex\":0,\"Tx\":0,\"Rx\":1,\"Exclusive\":0,\n\"MclkInv0\":0,\"MclkInv1\":0,\"BclkInv0\":0,\"BclkInv1\":0,\"WsInv0\":0,\n\"WsInv1\":0,\"Mp3Preallocate\":1},\n\"Tx\":{\"SampleRate\":16000,\"Gain\":10,\"Mode\":0,\"SlotMask\":3,\n\"SlotConfig\":0,\"Channels\":2,\"APLL\":1},\n\"Rx\":{\"SampleRate\":32000,\"Gain\":30,\"Mode\":1,\"SlotMask\":1,\n\"SlotWidth\":32,\"Channels\":1,\"DCFilterAlpha\":32511,\n\"LowpassAlpha\":17719,\"APLL\":1,\"WsWidth\":32,\"WsPol\":0,\"BitShift\":1,\n\"LeftAlign\":1,\"BigEndian\":0,\"LsbOrder\":0,\n\"DMAFrame\":768,\"DMADesc\":5}}}\n</code></pre> <p>Some properties are easy to understand like number of channels or sample rate. The \"weird ones\" a very likely data structures from the I2S audio framework of the ESP-IDF. Numeric values for these properties are integer representations of <code>enums</code> in many cases. This allows for a very flexible audio setup to support a wide range of hardware combinations with one firmware image.  </p> <p>Changing values is done by passing a JSON with the new key-value-pair.  </p> <p>Examples:  </p> <p><code>i2sconfig {\"Rx\":{\"Mode\":0}}</code> switch input of the microphone to standard modes, where all other default values are set to use an INMP441 with left-channel-configuration. <code>i2sconfig {\"Rx\":{\"SlotMask\":2}}</code> would change the microphone in standard mode to the right channel.</p> <p><code>i2sconfig {\"Rx\":{\"SampleRate\":48000}}</code> changes sample rate of the microphone. <code>i2sconfig {\"Rx\":{\"DMAFrame\":768}}</code> use DMA buffer for higher sample rate.  </p>"},{"location":"I2S-Audio_ESP32/#how-to-apply-complex-settings-the-ugly-truth","title":"How to apply complex settings? The ugly truth ...","text":"<p>In order to support basically any type of microphone in a combination with a certain ESP32 type, we need to find documentation about the needed settings (this works rarely or never) or find/generate demo code, which can be converted to Tasmotas I2S driver. In example the INMP441 does not need the same setting on different SOC's of the ESP32 family.  </p> <p>For the ESP32-S3 this microphone works with the following configuration macro from Espressif (found with trial and error):  </p> <pre><code>#define I2S_STD_PHILIPS_SLOT_DEFAULT_CONFIG(bits_per_sample, mono_or_stereo) { \\\n    .data_bit_width = bits_per_sample, \\\n    .slot_bit_width = I2S_SLOT_BIT_WIDTH_AUTO, \\\n    .slot_mode = mono_or_stereo, \\\n    .slot_mask = (mono_or_stereo == I2S_SLOT_MODE_MONO) ? \\\n                I2S_STD_SLOT_LEFT : I2S_STD_SLOT_BOTH, \\\n    .ws_width = bits_per_sample, \\\n    .ws_pol = false, \\\n    .bit_shift = true, \\\n    .msb_right = true, \\\n}\n</code></pre> <p>Now we have to translate this.</p> <p><code>I2S_SLOT_BIT_WIDTH_AUTO</code> is an enum with an int value of 0, so we need: <pre><code>i2sconfig {\"Rx\":{\"SlotWidth\":0}}\n</code></pre></p> <p><code>I2S_STD_SLOT_LEFT</code> and <code>I2S_STD_SLOT_BOTH</code> are enums too with values of 1 and 3. For mono: <pre><code>i2sconfig {\"Rx\":{\"SlotMask\":1}}\n</code></pre></p> <p>The next values are pretty obvious: <pre><code>i2sconfig {\"Rx\":{\"WsWidth\":16}}\ni2sconfig {\"Rx\":{\"WsPol\":0}}\ni2sconfig {\"Rx\":{\"BitShift\":1}}\n</code></pre></p> <p>The C struct member <code>.msb_right</code> does only exist on ESP32 and ESP32-S2 and is not part of the driver settings with this name. Instead the settings key LsbOrder is reused for these 2 SOC's: <pre><code>i2sconfig {\"Rx\":{\"LsbOrder\":1}}\n</code></pre></p> <p>The rest of the data is inferred from the currently fixed sample rate of the Tasmota driver of 16 bits and channel number with the driver key <code>channels</code>.  </p>"},{"location":"I2S-Audio_ESP32/#audio-output","title":"Audio Output","text":"<p>For audio output an I2S digital audio decoder (DAC) board is required. It is recommended to use an external DAC</p> I2S DAC ESP32 BCLK I2S_BCLK LRCK/WS I2S_WS DIN I2S_DOUT SD NC GAIN NC VIN 3V3 or 5V GND GND"},{"location":"I2S-Audio_ESP32/#internal-dac","title":"Internal DAC","text":"<p>ESP32 has two 8-bit DAC (digital to analog converter) channels, connected to GPIO25 (Channel 1) and GPIO26 (Channel 2).</p> <p>Those channels can be driven via the I2S driver when using the \u201cbuilt-in DAC mode\u201d enabled with <code>USE_I2S_NO_DAC</code></p>"},{"location":"I2S-Audio_ESP32/#commands","title":"Commands","text":"CMD DAC action I2SGain <code>0..100</code> = sets the volume of the audio signal I2SPlay <code>&lt;decoder_type&gt; file</code> = plays an audio file from the file system, sound is played in a separate task not blocking the system I2SLoop <code>&lt;decoder_type&gt; file</code> = plays an audio file from the file system in an endless loopExample: <code>i2sloop2 file.opus</code> I2SRtttl <code>string</code> = play Ring Tones Text Transfer Language (RTTTL) ringtones (requires defined <code>USE_I2S_RTTTL</code>) I2SSay <code>text</code> = speaks the text you typed (only English language supported) I2STime tells current Tasmota time in English (requires defined <code>USE_I2S_SAY_TIME</code>) I2SWr <code>&lt;decoder_type&gt; url</code> = starts playing a radio stream, no blocking (requires defined <code>USE_I2S_WEBRADIO</code>)no parameter = stops playing the stream I2SStop stops current play operation I2SPause pauses current file play operation, can be resumed with <code>i2splay</code> (without any argument) <p>Tasmota can support multiple audio codec types for file playback/loop, microphone recordings and web radio, which are MP3, AAC (decoder only!!) and OPUS. For the referring commands the type is provided at the <code>index</code> position of the command (right behind the command without a space). The filename does not matter, there is no check for naming conventions. Wrong combinations can lead to crashes.  </p> Codec index Codec name 0 AAC - decoder only, must be provided as <code>AAC</code> format, not embedded in an <code>M4A</code> container! 1 MP3 - if you do not provide the type explicitly, this is the automatic default 2 OPUS - most modern and open standard, but has highest memory requirements. Allows nearly perfect gapless looping."},{"location":"I2S-Audio_ESP32/#audio-input","title":"Audio Input","text":"<p>For microphone input an I2S microphone must be connected. It is pretty common, that the captured audio signal has a very low volume. Hence a relatively high gain factor is needed, that can be configured with: <code>i2sconfig {\"Rx\":{\"Gain\":30}}</code> </p>"},{"location":"I2S-Audio_ESP32/#i2s-microphone-standard-mode","title":"I2S Microphone - standard mode","text":"<p>Use command <code>i2sconfig {\"Rx\":{\"Mode\":0}}</code> to switch audio input to standard mode.</p> I2S Microphone ESP32 SCK I2S_BCLK WS I2S_WS SD I2S_DIN L/R GND VDD 3.3V GND GND <p>If you're using only the microphone without a DAC you still need to set pin <code>I2S_DOUT</code> to an unused GPIO.</p>"},{"location":"I2S-Audio_ESP32/#i2s-microphone-pdm-mode","title":"I2S Microphone - PDM mode","text":"<p>Pulse density modulation (PDM) microphones are handled as I2S microphones in the ESP-IDF and need only two data wires in comparison to standard I2S microphones. They're used in ESP32-S3-BOX, Seeed Xiao Sense and others.</p> <p>Use command <code>i2sconfig {\"Rx\":{\"Mode\":1}}</code> to switch audio input to PDM mode.</p> Microphone ESP32 CLK I2S_WS DATA I2S_DIN L/R GND VDD 3.3V GND GND NC I2S_DOUT NC I2S_BCLK <p>When using PDM microphones the microphone CLK pin is configured as <code>I2S_WS</code> in Tasmota.</p>"},{"location":"I2S-Audio_ESP32/#commands_1","title":"Commands","text":"<p>ESP32 with enough RAM required! PSRAM recommended.</p> <p>Optional: <code>i2sconfig {\"Sys\":{\"Mp3Preallocate\":1}}</code> to turn on buffer preallocation at boot time. Can solve issues, if there is not enough contiguous RAM available later. </p> CMD Action I2SMIC Internal debug function. Can be used to do a silent warm start of the microphone to avoid the initial noise, that basically every I2S microphone produces. I2SRec <code>&lt;encoder_type&gt; file</code> = starts recording a .mp3 or .webm audio file to the file system, no blocking, correct file suffix provided by the user, no parameter = stops recording<code>-?</code> = shows how many seconds already recorded I2SStream (requires defined <code>MP3_MIC_STREAM</code>)<code>1</code> = starts streaming .mp3/.webm server at <code>http://&lt;device_ip&gt;:81/stream.mp3</code> or <code>http://&lt;device_ip&gt;:81/stream.webm</code> <code>0</code> = stop the stream <p>Supported sampling frequencies are: 32000, 44100 and 48000 Hz - for MP3 8000, 12000, 16000, 24000, 48000 Hz - for Opus/Webm</p> <p>Frequencies above 32000 Hz will probably bring down most ESP32's, which have to punch above their weights here, although it might work with very good WiFi conditions - especially on the ESP32-S3.  </p> <p>8000 Hz will distort voices quite a lot.  </p> <p>The efficiency of the Opus encoder reveals weaknesses of many clients (including VLC, Chrome and Firefox), which do not adapt their receive buffers to the low bandwidth of the audio stream. Thus these first fill up the buffers - holding above 5- 30 seconds now - and start playing with the resulting latency. Notable exception is Apple's Safari with a delay of about 1 second. The cross-platform console player <code>mpv</code> is not far behind.    </p> <p>Streaming can introduce rhythmic noise into the stream with the send rate of the data packets by interference of the WiFi radio. Proper cabeling and shielding is needed here. This can be quite difficult to achieve.  </p>"},{"location":"I2S-Audio_ESP32/#i2s-audio-bridge","title":"I2S Audio Bridge","text":"<p>Starts a UDP audio service to connect 2 ESP32 devices as an audio intercom (an example). </p> <p>Needs audio output and microphone on 2 devices (no PSRAM needed)  </p> <pre><code>build_flags                 = ${env:tasmota32_base.build_flags}\n                              -DUSE_I2S_ALL\n                              -DUSE_I2S_BRIDGE\n</code></pre> CMD bridge action I2SBridge <code>ip</code> = sets the IP of the slave device<code>0</code> = stop bridge<code>1</code> = start bridge in read mode<code>2</code> = start bridge in write mode<code>3</code> = start bridge in loopback mode<code>4</code> = set bridge to master<code>5</code> = set bridge to slave<code>6</code> = set microphone to swapped<code>7</code> = set microphone to not swapped<code>p&lt;x&gt;</code> = sets the push to talk button where <code>x</code> is the button's GPIO pin number <p>If a push to talk button is defined the bridge goes to write mode if the button is pushed and to read mode if the button is released.  </p>"},{"location":"I2S-Audio_ESP32/#codec-dac","title":"Codec / DAC","text":"<p>Some ESP boards contain integrated circuits or modules that convert audio signals between analog and digital forms, sometimes with support for digital audio processing, mixing and volume control. These external audio codec chips are typically controlled via an additional I2C connection, while the pure audio data still runs over I2S. The intended integration into the core I2S audio driver works with an additional Berry driver that establishes the I2C connection and may provide additional audio commands, while communicating with the core I2S driver via some callbacks. A way to ease the setup work for the end user is to create <code>Autoconf</code> packages for specific boards. Examples already exist for the audio boards <code>Louder-ESP32</code> and <code>Louder-ESP32S3</code> (each using a TAS5805m), which, after initial WiFi setup, only have to be selected in the Autoconf section of the <code>Configuration</code> menu. Currently there is no official support for any of these devices, but you may suggest a board to be looked at in Tasmota's GH discussions or in the Discord channel.</p>"},{"location":"IAQ/","title":"iAQ-Core indoor air quality sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_IAQ\n#define USE_IAQ         // [I2cDriver46] Enable iAQ-core air quality sensor (I2C address 0x5a) (+0k6 code)\n#endif\n</code></pre></p> <p>The iAQ-core indoor air quality module is a low-cost, ultra compact solution for detecting poor air quality. This module uses micro-machined metal oxide semiconductor (MOS) technology to detect a broad range of VOCs while correlating directly with CO<sub>2</sub> and TVOC levels in the room.</p> <p>Warning</p> <p>All testing and driver programming has been done using iAQ-Core C sensor model. We don't know whether iAQ-Core P will work with this driver.</p>"},{"location":"IAQ/#configuration","title":"Configuration","text":""},{"location":"IAQ/#wiring","title":"Wiring","text":"<p>Follow datasheet for required pull-ups when connecting the bare sensor module directly to ESP8266. Wemos and NodeMCU board include the required pull-up.</p> <p></p> Breakout ESP VCC/VIN +3.3VDC GND GND SCL GPIOy SDA GPIOx"},{"location":"IAQ/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After configuring the GPIO's the driver will detect iAQ-Core automatically.</p> <p>On every power on sensor will run in Warm up mode for 5 minutes to calibrate. During this webUI shows:</p> <p></p> <p>and console displays <code>iAQ: Error 10</code></p> <p>When warm-up is finished, sensor will show readings in web UI:</p> <p></p> <p>and in MQTT topic (according to TelePeriod):   <pre><code>{\"Time\":\"2020-01-01T00:00:00\",\"IAQ\":{\"eCO2\":450,\"TVOC\":125,\"Resistance\":76827}}\n</code></pre></p>"},{"location":"IAQ/#usage","title":"Usage","text":"<p>Typical sensor reading should be around 450 ppm eCO<sub>2</sub> and 125 ppb TVOC. Resistance is sensor's gas resistance in Ohm and is the baseline reading from which eCO<sub>2</sub> and TVOC are calculated from</p> <p>If you see error messages in console, take appropriate action:</p> <p><code>iAQ: Error 1</code>  During use, a message <code>iAQ: Error 1</code> will randomly appear. This is normal, it's a skipped reading due to sensor still taking environment data during polling.</p> <p><code>iAQ: Error 80</code>  If this error persists, the sensor is broken and should be replaced.</p> <p><code>iAQ: Error ff</code>  General connection error. Check your wiring and if the power supply supplies enough power to the sensor. Run <code>I2CScan</code> to check if the sensor can be found on 0x5a I<sup>2</sup>C address. </p>"},{"location":"IAQ/#breakout-boards","title":"Breakout Boards","text":""},{"location":"IAQ/#where-to-get","title":"Where to get","text":"<ul> <li>AliExpress sensor module</li> <li>Aliexpress breakout board</li> <li>Mouser</li> <li>DigiKey</li> </ul> <p>iAQ-Core Datasheet</p>"},{"location":"IP-Symcon/","title":"IP Symcon","text":"<p>For users knowing more about integrating Tasmota with IP-Symcon please update this page.</p> <p>The Tasmota IP-Symcon interface can be found at https://github.com/Schnittcher/IPS-Tasmota</p> <p>There are currently two modules for IP Symcon</p>"},{"location":"IP-Symcon/#conditions","title":"Conditions","text":"<ul> <li>Mosquitto Broker</li> <li>MQTT Client - currently a modified version of IPS_MQTT by thomasf68</li> <li>IP-Symcon version 4.1 or higher</li> </ul>"},{"location":"IP-Symcon/#ips-tasmotaconfigurator","title":"IPS-TasmotaConfigurator","text":"<p>With the configurator it is possible to generate automatically  the IP Symcon instances for the Tasmota devices.</p>"},{"location":"IP-Symcon/#ips-tasmota","title":"IPS-Tasmota","text":"<p>With this Module it is possible to map devices that contain standard functions of the Tasmota firmware. For example: Sonoff Switch, Sonoff POW, Sonoff 4CH, Sonoff TH</p>"},{"location":"IP-Symcon/#ips-tasmotaled","title":"IPS-TasmotaLED","text":"<p>With the IPS-TasmotaLED module it is possible to map the LED modules that run with the Tasmota firmware. For example: WS2812, AiLight, Sonoff Led, B1, BN-SZ01, H801 and MagicHome</p>"},{"location":"IP-Symcon/#installation","title":"Installation","text":"<p>Github Repositorys in IP Symcon via Core Instances -&gt; Modules -&gt; Add</p>"},{"location":"IP-Symcon/#ips-ks-mqtt-client","title":"IPS-KS-MQTT Client:","text":"<pre><code>https://github.com/Schnittcher/IPS-KS-MQTT.git\n</code></pre>"},{"location":"IP-Symcon/#ips-tasmota_1","title":"IPS-Tasmota:","text":"<pre><code>https://github.com/Schnittcher/IPS-Tasmota.git\n</code></pre>"},{"location":"IPv6/","title":"IPv6","text":"<p>IPv6 is supported by default on ESP32; requires a specific build for ESP8266</p> <p>Tasmota supports dual-stack IPv4 and IPv6 networks on ESP8266 and ESP32. If you want to know more about IPv6 see the wikipedia IPv6 page. Keep in mind that concepts in IPv6 are very different than IPv4.</p> <p>Tasmota supports IPv4 only networks (Legacy) and dual-stack IPv4+IPv6 networks.</p> <p>Tasmota does not support IPv6 only networks, and it will yield to a crash after some time (may be fixed in the future).</p>"},{"location":"IPv6/#building-ipv6-version-of-tasmota","title":"Building IPv6 version of Tasmota","text":"<p>IPv6 is enabled by default on ESP32 since v12.3.1.1.</p> <p>For ESP8266 you need to compile with <code>-DPIO_FRAMEWORK_ARDUINO_LWIP2_IPV6_HIGHER_BANDWIDTH</code> option in <code>platform.ini</code> instead of <code>-DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH</code>, and set <code>-DUSE_IPV6</code>. The code impact is +34.5kB; and you need <code>#define USE_IPV6</code> in <code>my_user_config.h</code> or in <code>user_config_override.h</code>. See Compiling.</p>"},{"location":"IPv6/#network-pre-requisites","title":"Network pre-requisites","text":"<p>In all cases, Tasmota will enable a Link-Local address on all interfaces (Wifi and Ethernet if present). Link-Local addresses start with <code>fe80::</code> followed by 64 bits derived from the MAC address of the device. Link-Local addresses are not routable across VLANs nor via the Internet and is used only to communicate with the router and with devices on the same LAN (useful in the Matter protocol).</p> <p>IPv6 networks generally support SLAAC (Stateless Address Autoconfiguration, SLAAC). SLAAC allows Tasmota to compute an IPv6 Global Address that is routable across VLANs and possibly accross the internet depending on your router configuration.</p> <p>Note: Unifi UDM Pro has a bug for years that prevent SLAAC from working. Although the bug was never fixed by Unifi, there are multiple work-arounds to be found online.</p> <p>For SLAAC to work, the network size must be at least <code>/64</code> or larger (i.e. <code>/xx</code> with <code>xx</code> lower or equal to <code>64</code>). The first 64 bits are set by the network, the last 64 bits are derived from the MAC address in the same way than Link-Local.</p> Address type Example of value MAC <code>C8:2B:96:B9:0B:50</code> IPv4 <code>192.168.x.x</code> IPv6 Link-Local <code>fe80::ca2b:96ff:feb9:b50</code> IPv6 Global <code>2a01:cb00:xxxx:xxxx:ca2b:96ff:feb9:b50</code> <p></p> <p>Because of limitations in esp-idf, Tasmota does not support IPv6 Temporary Addresses nor ULA addresses. DHCPv6 support is disabled, because it is not really useful in a home network, and because esp-idf support is limited to state-less mode.</p> <p>Features known to work (ESP8266 and ESP32):</p> <ul> <li>[x] Allocation of a Link-Local address</li> <li>[x] Allocation of a Global address via SLAAC</li> <li>[x] Works on Wifi and Ethernet</li> <li>[x] Response to ping on Global address</li> <li>[x] Webui listens on Global address</li> <li>[x] MQTT to a IPv6 broker</li> <li>[x] DNS resolution for IPv4 (A) and IPv6 (AAAA) records</li> <li>[x] Ping to IPv6 address (ICMP6)</li> <li>[x] Berry webclient and tcpclient to IPv6 addresses</li> <li>[x] Berry udpclient to IPv6 addresses</li> <li>[ ] Berry udpclient to IPv6 multicast addresses (untested but likely to not work)</li> </ul>"},{"location":"IPv6/#dual-stack-dns","title":"dual-stack DNS","text":"<p>If a DNS entry has both a v4 address (A record) and a v6 address (AAAA) record, you can choose which address to use:</p> <ul> <li>if no IPv6 Global Address is assigned, only A records are queried</li> <li>If a IPv6 Glbal Address is assigned:</li> <li><code>SetOption149 0</code>: v4 'A' query is done first, then v6 'AAAA' query if no v4 entry was found</li> <li><code>SetOption149 1</code>: v6 'AAAA' query is done first, then v4 'A' query if no v6 entry was found</li> </ul> <p>Note: IPv4 is generally assigned first and IPv6 Global Address takes a few more seconds. Even if <code>SetOption149 1</code> is selected, first queries are likely to return IPv4 addresses anyways.</p>"},{"location":"IPv6/#link-local-interface-names","title":"Link-local interface names","text":"<p>Starting with Tasmota v14 based on Arduino Core 3 (esp-idf 5.1), link-local addresses now needs an interface name to distinguish which physical interface to use between WIFI and Ethernet. The format is the IPv6 official format: <code>&lt;ipv6_link_local&gt;%&lt;interface_name&gt;</code>.</p> <p>Example: <code>fe80::86cc:a8ff:fe64:b768%st1</code></p> <p>Typical interface names are:</p> <ul> <li><code>st1</code>: Wifi (aka STA mode) - this is the most common interface to use</li> <li><code>en2</code>: Ethernet interface if present</li> <li><code>lo0</code>: localhost loopback interface, generally not used</li> </ul>"},{"location":"IPv6/#troubleshooting","title":"Troubleshooting","text":"<p>Enable <code>weblog 3</code> or <code>seriallog 3</code> to get more details about IPv6 and DNS resolution.</p> <p>Example:</p> <pre><code>weblog 3\nping www.wikipedia.org\n\n14:35:50.335 WIF: DNS resolved 'www.wikipedia.org' (185.15.58.224) in 14 ms\n14:35:50.338 RSL: RESULT = {\"Ping\":\"Done\"}\n14:35:51.475 RSL: RESULT = {\"Ping\":{\"www.wikipedia.org\":{\"Reachable\":true,\"IP\":\"185.15.58.224\",\"Success\":1,\"Timeout\":0,\"MinTime\":17,\"MaxTime\":17,\"AvgTime\":17}}}\n\nSetOption149 1\nping www.wikipedia.org\n\n14:36:24.205 WIF: DNS resolved 'www.wikipedia.org' (2a02:ec80:600:ed1a::1) in 14 ms\n14:36:24.210 RSL: RESULT = {\"Ping\":\"Done\"}\n14:36:25.232 RSL: RESULT = {\"Ping\":{\"www.wikipedia.org\":{\"Reachable\":true,\"IP\":\"2a02:ec80:600:ed1a::1\",\"Success\":1,\"Timeout\":0,\"MinTime\":24,\"MaxTime\":24,\"AvgTime\":24}}}\n</code></pre> <p>You can also use <code>Status 5</code> to know all assigned IP addresses and DNS server entries (<code>st</code> is Wifi STA, <code>en</code> is Ethernet):</p> <pre><code>Status 5\n\n14:37:09.339 WIF: 'st' IPv4 192.168.2.x\n14:37:09.350 WIF: 'st' IPv6 fe80::ca2b:96ff:feb9:b50 local\n14:37:09.351 WIF: 'st' IPv6 2a01:cb00:xxxx:xxxx:ca2b:96ff:feb9:b50 \n14:37:09.363 WIF: 'lo' IPv4 127.0.0.1\n14:37:09.364 WIF: 'lo' IPv6 ::1 \n14:37:09.365 WIF: DNS(0): 192.168.2.1\n14:37:09.366 WIF: DNS(1): 0.0.0.0\n[...]\n</code></pre>"},{"location":"IR-Remote/","title":"IR Remote","text":"<p>IR Remote driver enables sending IR codes through an IR transmitter and receiving them through an IR receiver via IRremoteESP8266 library.</p> <p>Most builds support only the common IR protocols, but tasmota-ir.bin supports almost all protocols available in the IRremoteESP8266 library.</p>"},{"location":"IR-Remote/#ir-transmitter","title":"IR Transmitter","text":"<p>Common transmitter modules in the market have a weak IR LED, thus effective transmit distance is really short. If you need range it is best to build your own. For the LED we recommend TSAL6400 for best performance.</p> <p>YT-IRTM transmitter/receiver board is serial only and does not work with this driver (it's also limited to only NEC IR protocol).</p>"},{"location":"IR-Remote/#wiring","title":"Wiring","text":"IR w/ 2N222 ESP data GPIOx + 3.3v/5v - GND"},{"location":"IR-Remote/#tasmota","title":"Tasmota","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>IRsend (8)</code> </li> </ul> <p>See IR commands for use. </p>"},{"location":"IR-Remote/#ir-receiver","title":"IR Receiver","text":"<p>IR Receiver is used to capture IR codes. Those codes can be sent using <code>IRSend</code> or used as a rule trigger.   </p> <p>Example uses the widely available KY-022 breakout board.</p>"},{"location":"IR-Remote/#wiring_1","title":"Wiring","text":"KY-022 ESP S GPIOx + 5v - GND"},{"location":"IR-Remote/#tasmota_1","title":"Tasmota","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>IRrecv (51)</code> </li> </ul> <p>On a captured code IR receiver sends a <code>tele/%topic%/RESULT</code> JSON response:</p> <pre><code>{\n  \"Time\": \"2019-01-01T00:00:00\",\n  \"IrReceived\": {\n    \"Protocol\": \"NEC\",\n    \"Bits\": 32,\n    \"Data\": \"0x00FF00FF\"\n  }\n}\n</code></pre>"},{"location":"IR-Remote/#further-reading","title":"Further Reading","text":"<p>This covers only the basic IR protocols. Read Complete IR Remote Protocols for more advanced applications.</p> <p>IR Send RAW configuration and use</p> <p>User maintained codes database for IR</p> <p>Linux Infrared Remote Control (LIRC) for more information. </p>"},{"location":"IR-Remote/#related-projects","title":"Related Projects","text":"<ul> <li>Automate Things IR Bridge</li> <li>Sonoff Basic IR \"hat\"</li> </ul> <p>Example circuit with transmitter and receiver:  </p>"},{"location":"IRSend-RAW-Encoding/","title":"IRSend RAW Encoding","text":""},{"location":"IRSend-RAW-Encoding/#new-ir-raw-compact-encoding","title":"New IR Raw compact encoding","text":"<p>(available since v9.0.0.1)</p> <p>We had numerous requests from users to expand the buffer sizes because many IR codes would exceed the MQTT/Web/Serial buffer size. Instead, we changed the IR Raw encoding to shrink the size necessary to encode almost any IR code.</p> <p>Before (buffer overflow):</p> <p><code>{\"IrReceived\":{\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55A50AFA55A50AF\",\"DataLSB\":\"0xA55A0AF5A55A0AF5\",\"Repeat\":0,\"RawData\":[8574,4224,574,1558,572,502,570,1562,570,502,572,502,570,1562,570,502,570,1562,572,500,572,1560,572,500,572,1560,572,1560,570,504,568,1560,570,502,572,502,570,1562,570,502,570,1560,570,502,572,500,570,502,572,502,570,1560,570,504,572,1558,572,502,570,1564,568,1562,570,1560,572,1560,572,25258,8574,4222,572,1560,570,502,572,1558,572,502,570,502,572,1558,572,500,570,1560,570,502,570,1560,570,502,570,1560,570,1560,570,504,570,1560,572,502,570,502,570,1560,572,502,570,1560,570,502,570,502,570,502,570,502,570,1560,570,502,570,1560,572,502,570 ...</code></p> <p>Now (no overflow):</p> <p><code>{\"IrReceived\":{\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55A50AFA55A50AF\",\"DataLSB\":\"0xA55A0AF5A55A0AF5\",\"Repeat\":0,\"RawData\":[+8570-4240+550-1580C-510+565-1565F-505Fh+570gFhIdChIgFeFgFgIhFgIhF-525C-1560IhIkI-520ChFhFhFgFhIkIhIgIgIkIkI-25270A-4225IkIhIgIhIhIkFhIkFjCgIhIkIkI-500IkIhIhIkFhIgIl+545hIhIoIgIhIkFhFgIkIgFgI],\"RawDataInfo\":[135,135,0]}}</code></p> <p>The new format still encodes timings for High/low pulses.</p> <ul> <li>First the timings are rounded to the closest 5 microsec value.</li> <li>Instead of using commas, values are prefixed with <code>+</code> if it's a HIGH signal, or <code>-</code> if it's a LOW signal.</li> <li>Each new timing value is assigned a letter starting with 'A'</li> <li>If a timing value matches a previously found value, it is replaced with the letter, in uppercase for a HIGH signal, or lowercase for a LOW signal.</li> </ul> <p>Ex:</p> <pre><code>+8570-4240+550-1580C-510+565-1565F-505Fh\n \\__/ \\__/ \\_/ \\__/C \\_/ \\_/ \\__/F \\_/Fh\n  A    B    C   D     E   F   G     H\n</code></pre> <p>Which translates to: <pre><code>+8570-4240+550-1580+550-510+565-1565+565-505+565-505\nor\n8570,4240,550,1580,550,510,565,1565,565,505,565,505\n</code></pre></p> <p>If you need to transform the compact format in the legacy format, you can use the online tool: https://tasmota.hadinger.fr/util</p>"},{"location":"IRSend-RAW-Encoding/#irsend-for-raw-ir","title":"IRSend for raw IR","text":"<p>There are two command syntax forms for sending a remote control code in RAW format with <code>IRsend</code>:</p> <ol> <li><code>IRSend&lt;x&gt; &lt;frequency&gt;,&lt;rawdata1&gt;,&lt;rawdata2&gt;,..,&lt;rawdataN&gt;</code></li> </ol> <p>e.g., <code>IRsend 0,926,844,958,832,1798,868,902,848,900,870,900,852,908,918,958,794,934,874,928,1738,934,856,1764</code>    or    <code>IRSend 0,+8570-4240+550-1580C-510+565-1565F-505Fh+570gFhIdChIgFeFgFgIhFgIhF-525C-1560IhIkI-520ChFhFhFgFhIkIhIgIgIkIkI-25270A-4225IkIhIgIhIhIkFhIkFjCgIhIkIkI-500IkIhIhIkFhIgIl+545hIhIoIgIhIkFhFgIkIgFgI</code></p> <ol> <li><code>IRSend&lt;x&gt; raw,&lt;frequency&gt;[,&lt;header_mark&gt;,&lt;header_space&gt;,&lt;bit_mark&gt;],&lt;zero_space&gt;[, [&lt;one_multiple&gt;] | &lt;one_space&gt;],&lt;bit_stream&gt;</code></li> </ol> <p>Where</p> Parameter Description <code>&lt;frequency&gt;</code> carrier frequency (default 0 = 38kHz) <code>&lt;header_mark&gt;</code>** header mark duration (\u00b5s) (optional for some protocols) <code>&lt;header_space&gt;</code>** header space duration (\u00b5s) (optional for some protocols) <code>&lt;bit_mark&gt;</code> bit mark duration (\u00b5s) (optional for some protocols) <code>&lt;zero_space&gt;</code> zero space duration (\u00b5s) <code>&lt;one_multiple&gt;</code> used to specify the one space duration if the one space duration is an integral multiple of the zero space duration. This parameter may be omitted if the multiple is 2.Use of this parameter is mutually exclusive with the <code>&lt;one_space&gt;</code> parameter <code>&lt;one_space&gt;</code> one space duration (\u00b5s). Use this parameter if the one space duration is not an integral multiple of <code>&lt;zero_space&gt;</code>Use of this parameter is mutually exclusive with the <code>&lt;one_multiple&gt;</code> parameter <code>&lt;bit_stream&gt;</code> bit stream data (stream of ones and zeroes) <p>** If <code>header_mark</code> and <code>header_space</code> are specified, the gap will be computed as <code>(header_mark + header_space) * 3</code> with a high limit of 65ms (65,000\u00b5s) to avoid 16 bits overflow.  If <code>header_mark</code> and <code>header_space</code> are not specified, the gap will be 40ms (40,000\u00b5s).</p> <p>This command syntax version makes use of the output of the raw IR decoder from ToniA/Raw-IR-decoder-for-Arduino</p>"},{"location":"IRSend-RAW-Encoding/#examples-for-bitstream-command-syntax","title":"Examples for bitstream command syntax","text":""},{"location":"IRSend-RAW-Encoding/#rawirdecode-output","title":"rawirdecode output:","text":"<pre><code>Number of symbols: 75\nSymbols:\nHh010101101000111011001110000000001100110000000001100000000000000010001100\nBytes:\n00:  0101|0110 | 6A | 01101010\n01:  1000|1110 | 71 | 01110001\n02:  1100|1110 | 73 | 01110011\n03:  0000|0000 | 00 | 00000000\n04:  1100|1100 | 33 | 00110011\n05:  0000|0001 | 80 | 10000000\n06:  1000|0000 | 01 | 00000001\n07:  0000|0000 | 00 | 00000000\n08:  1000|1100 | 31 | 00110001\n6A,71,73,00,33,80,01,00,31\nTimings (in us):\nPAUSE SPACE:  0\nHEADER MARK:  8620\nHEADER SPACE: 4260\nBIT MARK:     544\nZERO SPACE:   411\nONE SPACE:    1496\nDecoding known protocols...\nUnknown protocol\nBytecount: 9\n</code></pre> <p>Corresponding command:</p> <pre><code>IRSend&lt;x&gt; raw,0,8620,4260,544,411,1496,010101101000111011001110000000001100110000000001100000000000000010001100\n</code></pre>"},{"location":"IRSend-RAW-Encoding/#gree-air-conditioner-power-on","title":"Gree air conditioner Power On","text":"<pre><code>{8956, 4560, 546, 1710, 588, 616, 584, 618, 584, 1712, 586, 1712, 588, 614, 586, 614, 586, 618, 586, 1706, 590, 616 , 586, 1708, 590, 616, 588, 610, 590, 612, 590, 612, 590, 618, 584, 618, 584, 616, 586, 614, 588, 612, 590, 612, 590, 1712, 586 , 616, 588, 612, 590, 614, 588, 614, 586, 618, 586, 616, 586, 1710, 588, 614, 586, 1708, 590, 610, 592, 612, 590, 1708, 588, 614 , 588, 20084, 548, 612, 590, 614, 588, 614, 588, 616, 586, 654, 546, 616, 586, 616, 586, 614, 588, 612, 588, 610, 592, 612, 590 , 612, 590, 614, 586, 1712, 586, 616, 586, 612, 588, 614, 588, 614, 586, 616, 586, 612, 590, 614, 588, 610, 590, 616, 586, 614 , 588, 612, 590, 612, 590, 614, 588, 614, 588, 614, 588, 1708, 590, 612, 590, 1708, 590}\n</code></pre> <p>Arrange the data into pairs:</p> MARK SPACE BIT 8956 4560 (header) 546 1710 1 588 616 0 584 618 0 584 1712 1 586 1712 1 588 614 0 586 614 0 ... 590 612 0 590 614 0 588 614 0 588 614 0 588 1708 1 590 612 0 590 1708 1 590 (ignore) <p>The header is always the first pair, the zeroes have the shortest space duration and the ones have the longest space duration.</p> <ul> <li>header mark is 8956</li> <li>header space is 4560</li> <li>bit mark, get the average, say 590</li> <li>zero space, say 615</li> <li>one space, say 1710</li> </ul> <p>Corresponding command:</p> <pre><code>IRSend&lt;x&gt; raw,0,8956,4560,590,615,1710,1001100 ... 0000101\n</code></pre>"},{"location":"IRSend-RAW-Encoding/#understanding-ir-encoding","title":"Understanding IR encoding","text":"<p>Below are several topics that may help you decoding and understanding what your IR remotes are sending (ex: HVAC) or convert from popular IR formats like PRONTO or Broadlink.</p> <p>First, have a look at the excellent article from Elektor IR Remote Control Codes</p>"},{"location":"IRSend-RAW-Encoding/#decoding-ir-codes-by-hand","title":"Decoding IR codes by hand","text":"<p>From discussion with <code>@johan1111</code> on Discord.</p> <p>Let's suppose you have an unsupported HVAL and record the following raw IR codes using Tasmota:</p> <p><code>[3094,3062,3092,4442,576,1652,578,528,576,1650,580,528,576,528,576,1650,...]</code></p> <p>IR messages typically start with a long Mark (IR on), followed by a long Space (IR off). Here we see a double sequence of Mark (3094 \u00b5s) - Space (3062 \u00b5s) - Mark (3092 \u00b5s) - Space (4442 \u00b5s).</p> <p>The actual bitstream is <code>576,1652,578,528,576,1650,580,528,576,528,576,1650,...</code>.</p> <p>You need to take timing by pairs, again the first value is Mark (IR on), the second Space (IR off). The Mark is typically of constant time, and the space will vary from short (~528 \u00b5s) for bit <code>0</code> to long (~1650 \u00b5s) for bit <code>1</code>.</p> <p>So the first bits of the bitstream are: <code>101001...</code></p>"},{"location":"IRSend-RAW-Encoding/#pioneer-ir-encoding","title":"Pioneer IR encoding","text":"<p>Pioneer IR encoding is very similar to NEC encoding for the bitstream. When capturing IR codes, they will easily be recognized as NEC codes. But they have subtle differences.</p> <p>First, the Frequency if 40KHz for Pioneer vs 38KHz for NEC. The number of IR pulses are the same, so all Pioneer timings are 5% shorter than Nec equivalent. Most Pioneer will tolerate the difference, but some won't. If you have a Pioneer device, prefer the <code>Pioneer</code> encoding.</p> <p>Second, Pioneer introduced 64 bits messages vs 32 bits for NEC. Most simple Pioneer commands still use 32 bits, but newer require 64 bits. 64 bits messages are actually sent as 2x 32 bits messages with a very short pause in between.</p> <p>Example, Pioneer Vol+ is 32 bits message and must be sent twice. You can either send the same message <code>0xA55A50AF</code> twice with <code>IRSend2</code> or send a 64 bits message with twice the same 32 payload: <code>0xA55A50AFA55A50AF</code>.</p> <p><code>IRSend2 {\"Protocol\":\"PIONEER\",\"Bits\":32,\"Data\":\"0xA55A50AF\"}</code></p> <p>or</p> <p><code>IRSend {\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55A50AFA55A50AF\"}</code></p> <p>Example 2: Pioneer Stereo:</p> <p><code>IRSend {\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55AF906A55A03FC\"}</code></p>"},{"location":"IRSend-RAW-Encoding/#how-to-convert-pioneer-codes-to-tasmota","title":"How to convert Pioneer codes to Tasmota","text":"<p>Pioneer kindly publishes all IR Codes online on its website.</p> <p>Let's take a Pioneer Receiver like VSX-820. Choose the right Excel file and navigate in the corresponding tab.</p> <p>Pioneer codes are in short format. For example \"TV / SAT\" code is <code>A59B+A5CD</code>. You now need to convert these short codes into 64 bits IRRemote8266 codes.</p> <p>Steps: 1. Take the first byte: <code>0xA5</code> or <code>0b10100101</code>. Pioneer codes are LSB, but we need MSB. So read backwards all bits to 0b10100101 and back to hex <code>A5</code>. Your first byte is <code>A5</code>. Note: You can see here that <code>0xA5</code> is a palindrome. 2. Invert all bits of previous byte: <code>0b01011010</code>. Your second byte is <code>5A</code>. 3. Take the second byte <code>0x9B</code> or <code>0b10011011</code>. Read backwards all bits giving 0b11011001. Your third byte is <code>D9</code>. 4. Invert all bits from previous byte: <code>0b00100110</code>. Your fourth byte is <code>26</code>.</p> <p>Do the same with the second sequence <code>A5CD</code>, you should find the following sequence: <code>A55AB3CD</code>.</p> <p>The final sequence is:</p> <p><code>IRSend {\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55AD926A55AB3CD\"}</code></p>"},{"location":"IRSend-RAW-Encoding/#converting-pronto-ir-codes-to-tasmota","title":"Converting Pronto IR codes to Tasmota","text":"<p><code>Pronto</code> is a very common and early format to describe raw IR codes. It is fully described in this excellent series of articles The Pronto's IR Code Format</p> <p>If you don't want to manually convert the pronto IR codes, you can use the Tasmota-IR-Code-Converter site to do it for you.</p> <p>Pronto is commonly represented as a series of 4-digits HEX numbers in unsigned 16-bits format.</p> <p>Example, from Foxtel Vol+:</p> <p><code>Vol +</code> <code>0000 0073 0000 0012 000F 000A 0006 000A 0006 0016 0006 000A 0006 0010 0006 0016 0006 0016 0006 000A 0006 000A 0006 000A 0006 0016 0006 0010 0006 0016 0006 000A 0006 0010 0006 000A 0006 000A 0006 0CA0</code></p> <p>To convert from Pronto to IRSend by hand it requires extra work.</p> <ol> <li>Ignore first <code>0000</code></li> <li><code>0073</code> is the IR frequency, compute as \"Frequency = 1000000/(N * .241246)\". So for 0x73 (115), this gives 36KHz. First value for IRSend is <code>36</code>.</li> <li><code>0000</code> is the length of the One Time Burst. There is no one time burst</li> <li><code>0012</code> - Decimal 18 is the length of the repeat burst. There are 18 bits (Burst pairs) in this code. Next pulses are measured in pulses of the IR clock, so it depends on the frequency. With 36KHz, each pulse is (1000/36) 27.7 microseconds So you need to multiply by 27.7 for Tasmota to get actual \u00b5s <code>000F 000A</code> - becomes <code>415,277</code> <code>0006 000A</code> - becomes <code>166,277</code> And so on...</li> </ol> <p>In the end, it will look like:</p> <p><code>IRSend  36,415,277,166,277,...</code></p>"},{"location":"IRSend-RAW-Encoding/#converting-broadlink-ir-codes-to-tasmota","title":"Converting Broadlink IR codes to Tasmota","text":"<p>Broadlink is another popular device to send and receive IR/RF codes. Unfortunately, it does not run ESP8266, so it cannot be Tasmotized.</p> <p>Broadlink codes come either in Base64 format or in Hex format. Below will use Hex format which is easier to work by hand.</p> <p>Example:</p> <p><code>\"Code\":</code> <code>\"2600700000015692171117111612171116121612161117111735173517361636161117351735173517111636161216121611171116121612163616111735173517351735173517351700053D0001554916000C4E0001554916000C4E0001564817000C4D0001564917000C4C0001564917000D050000000000000000\",</code> <code>\"Base64\":</code> <code>\"JgBwAAABVpIXERcRFhIXERYSFhIWERcRFzUXNRc2FjYWERc1FzUXNRcRFjYWEhYSFhEXERYSFhIWNhYRFzUXNRc1FzUXNRc1FwAFPQABVUkWAAxOAAFVSRYADE4AAVZIFwAMTQABVkkXAAxMAAFWSRcADQUAAAAAAAAAAA==</code></p> <p>The Broadling protocol is described here: Broadlink RM2 network protocol</p> <p>Here is a copy of the part specifically describing</p> Offset Contents 0x00 0x26 = IR, 0xb2 for RF 433Mhz, 0xd7 for RF 315Mhz 0x01 repeat count, (0 = no repeat, 1 send twice, .....) 0x02-0x03 Length of the following data in little endian 0x04 .... Pulse lengths in 2^-15 s units (\u00b5s * 269 / 8192 works very well) .... 0x0d 0x05 at the end for IR only <p>Each value is represented by one byte. If the length exceeds one byte then it is stored big endian with a leading 0.</p> <p>Example: The header for an Optoma projector is 8920 4450 8920 * 269 / 8192 = 0x124 4450 * 269 / 8192 = 0x92 ... which would be encoded as <code>0x00 0x1 0x24 0x92</code> in broalink format.</p> <p>You have all the needed information to convert from Broadlink to Tasmota...</p> <p>See broadlink-ir-converter for a complete implementation example (in JavaScript) which is also available as a package on the NPM registry.</p>"},{"location":"Integrations/","title":"Introduction","text":"Tasmota easily integrates with many home automation solutions reporting status and sensor data and allowing complete control."},{"location":"JSON-Status-Responses/","title":"JSON Status Responses","text":""},{"location":"JSON-Status-Responses/#json-changes","title":"JSON Changes","text":"<p>temp note: for now (6.0.0a) the statetext overwrites the json power result (e.g. \"ON\" =&gt; \"AN\" or any other statetext the users enter)</p>"},{"location":"JSON-Status-Responses/#basic-response","title":"Basic Response","text":"<pre><code>    {\n      \"Status\": {\n        \"Module\": 1,\n        \"FriendlyName\": \"XXX\",\n        \"Topic\": \"sonoff\",\n        \"ButtonTopic\": \"0\",\n        \"Power\": 0,\n        \"PowerOnState\": 0,\n        \"LedState\": 1,\n        \"SaveData\": 0,\n        \"SaveState\": 1,\n        \"ButtonRetain\": 0,\n        \"PowerRetain\": 0\n      },\n      \"StatusPRM\": {\n        \"Baudrate\": 115200,\n        \"GroupTopic\": \"sonoffs\",\n        \"OtaUrl\": \"XXX\",\n        \"Uptime\": \"1 02:33:26\",\n        \"Sleep\": 150,\n        \"BootCount\": 32,\n        \"SaveCount\": 72,\n        \"SaveAddress\": \"FB000\"\n      },\n      \"StatusFWR\": {\n        \"Version\": \"5.12.0a\",\n        \"BuildDateTime\": \"2018.02.11 16:15:40\",\n        \"Boot\": 31,\n        \"Core\": \"2_4_0\",\n        \"SDK\": \"2.1.0(deb1901)\"\n      },\n      \"StatusLOG\": {\n        \"SerialLog\": 0,\n        \"WebLog\": 4,\n        \"SysLog\": 0,\n        \"LogHost\": \"domus1\",\n        \"LogPort\": 514,\n        \"SSId1\": \"XXX\",\n        \"SSId2\": \"XXX\",\n        \"TelePeriod\": 300,\n        \"SetOption\": \"00000001\"\n      },\n      \"StatusMEM\": {\n        \"ProgramSize\": 457,\n        \"Free\": 544,\n        \"Heap\": 23,\n        \"ProgramFlashSize\": 1024,\n        \"FlashSize\": 1024,\n        \"FlashMode\": 3\n      },\n      \"StatusNET\": {\n        \"Hostname\": \"XXX\",\n        \"IPAddress\": \"192.168.178.XX\",\n        \"Gateway\": \"192.168.178.XX\",\n        \"Subnetmask\": \"255.255.255.XX\",\n        \"DNSServer\": \"192.168.178.XX\",\n        \"Mac\": \"2C:3A:E8:XX:XX:XX\",\n        \"Webserver\": 2,\n        \"WifiConfig\": 4\n      },\n      \"StatusTIM\": {\n        \"UTC\": \"Thu Feb 15 00:00:50 2018\",\n        \"Local\": \"Thu Feb 15 01:00:50 2018\",\n        \"StartDST\": \"Sun Mar 25 02:00:00 2018\",\n        \"EndDST\": \"Sun Oct 28 03:00:00 2018\",\n        \"Timezone\": 1\n      },\n      \"StatusSNS\": {\n        \"Time\": \"2018.02.15 01:00:50\",\n        \"Switch1\": \"OFF\"\n      },\n      \"StatusSTS\": {\n        \"Time\": \"2018.02.15 01:00:50\",\n        \"Uptime\": \"1 02:33:26\",\n        \"Vcc\": 3.504,\n        \"POWER\": \"OFF\",\n        \"Wifi\": {\n          \"AP\": 1,\n          \"SSId\": \"XXX\",\n          \"RSSI\": 100,\n          \"APMac\": \"34:31:C4:XX:XX:XX\"\n        }\n      }\n    }\n</code></pre>"},{"location":"JSON-Status-Responses/#mqtt","title":"MQTT","text":"<p>After StatusNET</p> <pre><code>    \"StatusMQT\": {\n        \"MqttHost\": \"192.168.XXX.XX\",\n        \"MqttPort\": 1883,\n        \"MqttClientMask\": \"DVES_%06X\",\n        \"MqttClient\": \"DVES_4AXXXX\",\n        \"MqttUser\": \"admin\",\n        \"MAX_PACKET_SIZE\": 1000,\n        \"KEEPALIVE\": 15\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#domoticz","title":"Domoticz","text":"<p>idx, nvalue, svalue without array</p> <pre><code>      ...\"StatusTIM\": {\n        \"UTC\": \"Thu Feb 01 20:29:40 2018\",\n        \"Local\": \"Thu Feb 01 21:29:40 2018\",\n        \"StartDST\": \"Sun Mar 25 02:00:00 2018\",\n        \"EndDST\": \"Sun Oct 28 03:00:00 2018\",\n        \"Timezone\": 1\n      },\n      \"idx\": 286,\n      \"nvalue\": 0,\n      \"svalue\": \"19.7\",\n      \"StatusSNS\": {\n        \"Time\": \"2018.02.01 21:29:40\",\n        \"DS18B20\": {\n          \"Temperature\": 19.7\n        },\n        \"TempUnit\": \"C\"\n      },\n      \"StatusSTS\": { ...\n</code></pre>"},{"location":"JSON-Status-Responses/#pow","title":"POW","text":"<p>After StatusTIM</p> <pre><code>    \"StatusPTH\": {\n        \"PowerLow\": 0,\n        \"PowerHigh\": 0,\n        \"VoltageLow\": 0,\n        \"VoltageHigh\": 0,\n        \"CurrentLow\": 0,\n        \"CurrentHigh\": 0\n      },\n      \"StatusSNS\": {\n        \"Time\": \"2018.02.04 23:17:01\",\n        \"ENERGY\": {\n          \"Total\": 3.185,\n          \"Yesterday\": 3.058,\n          \"Today\": 0.127,\n          \"Power\": 0,\n          \"Factor\": 0.00,\n          \"Voltage\": 221,\n          \"Current\": 0.000\n        }\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#sensors","title":"Sensors","text":""},{"location":"JSON-Status-Responses/#am2301","title":"AM2301","text":"<pre><code>    \"StatusSNS\": {\n        \"Time\": \"2018.02.01 22:52:09\",\n        \"AM2301\": {\n          \"Temperature\": 15.5,\n          \"Humidity\": 50.6\n        },\n        \"TempUnit\": \"C\"\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#bmp280","title":"BMP280","text":"<pre><code>    {\n      \"StatusSNS\": {\n        \"Time\": \"2018-02-10T22:46:34\",\n        \"BMP280\": {\n          \"Temperature\": 80.9,\n          \"Pressure\": 984.4\n        }\n      }\n    }\n</code></pre>"},{"location":"JSON-Status-Responses/#dht11","title":"DHT11","text":"<pre><code>    \"StatusSNS\": {\n        \"Time\": \"2018.02.01 22:48:39\",\n        \"DHT11\": {\n          \"Temperature\": 12.0,\n          \"Humidity\": 42.0\n        },\n        \"TempUnit\": \"C\"\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#ds18b20","title":"DS18B20","text":"<pre><code>      \"StatusSNS\": {\n        \"Time\": \"2018.02.01 21:29:40\",\n        \"DS18B20\": {\n          \"Temperature\": 19.7\n        },\n        \"TempUnit\": \"C\"\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#sht3x-and-dht11-multiple-sensor-example","title":"SHT3X (and DHT11, multiple Sensor example)","text":"<pre><code>    {\n      \"StatusSNS\": {\n        \"Time\": \"2018-02-07T20:16:19\",\n        \"DHT11\": {\n          \"Temperature\": 78.8,\n          \"Humidity\": 27.0\n        },\n        \"SHT3X\": {\n          \"Temperature\": 74.8,\n          \"Humidity\": 18.9\n        },\n        \"TempUnit\": \"F\"\n      }\n    }\n</code></pre>"},{"location":"JSON-Status-Responses/#sonoff-sc","title":"Sonoff SC","text":"<pre><code>      \"StatusSNS\": {\n        \"Time\": \"2018-02-16T16:18:49\",\n        \"Temperature\": 25,\n        \"Humidity\": 83,\n        \"Light\": 10,\n        \"Noise\": 20,\n        \"AirQuality\": 100,\n        \"TempUnit\": \"C\"\n      },\n</code></pre>"},{"location":"JSON-Status-Responses/#pms5003-and-htu21","title":"PMS5003 and HTU21","text":"<pre><code>    \"StatusSNS\": {\n        \"Time\": \"2018-02-16T16:22:12\",\n        \"HTU21\": {\n          \"Temperature\": 24.7,\n          \"Humidity\": 32.1\n        },\n        \"PMS5003\": {\n          \"CF1\": 1,\n          \"CF2.5\": 2,\n          \"CF10\": 2,\n          \"PM1\": 1,\n          \"PM2.5\": 2,\n          \"PM10\": 2,\n          \"PB0.3\": 423,\n          \"PB0.5\": 116,\n          \"PB1\": 17,\n          \"PB2.5\": 1,\n          \"PB5\": 0,\n          \"PB10\": 0\n        },\n        \"TempUnit\": \"C\"\n      },   \n</code></pre>"},{"location":"KNX/","title":"KNX","text":"This feature is included in ESP32 builds, but for ESP8266 it is included only in <code>tasmota-knx</code> build <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_KNX\n#define USE_KNX         // Enable KNX IP Protocol Support (+9.4k code, +3k7 mem)\n#endif\n</code></pre></p>"},{"location":"KNX/#what-is-knx","title":"What is KNX?","text":"<p>The KNX IP Protocol is an international open standard for smart homes and smart buildings automation. It is a decentralized system. Each device can talk directly to each other without the need of a central controller or server. Any panel or server is just for telesupervision and for sending requests. KNX IP Protocol uses a UDP multicast on 224.0.23.12 : 3671, so there is no need for a KNX Router unless you want to communicate to KNX Devices on different mediums than IP (Twisted Pair, RF, Powerline).</p> <p>Each device has a physical address (like a fixed IP) as 1 . 1 . 0. This address is used for configuration purposes and has to be unique in the installation.</p> <p>Each device can be configured with group addresses as 2 / 2 / 1 and that address can be used for sending/receiving commands. So, for example, if 2 devices that are configured with the 2 / 2 / 1 for turning on/off their outputs, and other device send Turn ON command to 2 / 2 / 1, both devices will turn on their outputs.</p>"},{"location":"KNX/#integration","title":"Integration","text":"<p>Several home automation systems have KNX support. For example, Home Assistant has a XKNX Python Library to connect to KNX IP devices. If you don't have a KNX Router, you can use a Software KNX Router like Calimero or KNXd.</p> <p>If you use the ETS (KNX Provisioning Software) you can add any TasmotaTasmota KNX as a dummy device.</p> <p>If the Tasmotadevice is connecting to a Wifi Repeater you might experience some issues receiving KNX Telegrams. This also applies to mDNS and Emulation features.</p>"},{"location":"KNX/#implemented-features","title":"Implemented Features","text":"<p>The implemented features, up to now, in KNX for Tasmota are:</p> <p>General:</p> <ul> <li>buttons (just push)</li> <li>relays (on/off/toggle)</li> <li>lights (led strips, etc. but just on/off)</li> </ul> <p>Sensor lists that you can use in KNX is (only one sensor per type):</p> <ul> <li>Temperature</li> <li>Humidity</li> <li>Energy (v, i, power)</li> </ul> <p>For using rules:</p> <ul> <li>send KNX command (on/off)</li> <li>receive KNX command (on/off)</li> <li>send values by KNX (any float type, temperature for example)</li> <li>receive a KNX read request</li> <li>send and receive SCENE commands</li> </ul>"},{"location":"KNX/#usage-examples","title":"Usage Examples","text":"<p>There are multiple possible configurations. Here are explained just a few as example. The options for selecting relays, buttons, sensors, etc. are only available if were configured on Configure Module Menu.</p> <p>To configure KNX, enter on the Configuration Menu of Tasmota and select Configure KNX.</p> <p> </p> <p>Note on KNX communication enhancement option: As Wifi Multicast communication is not reliable in some wifi router due to IGMP problems or Snooping, an enhancement was implemented. This option increase the reliability by reducing the chances of losing telegrams, sending the same telegram 3 times. In practice it works really good and it is enough for normal home use. When this option is on, Tasmota will ignore toggle commands by KNX if those are sent more than 1 toggle per second. Just 1 toggle per second is working fine.</p>"},{"location":"KNX/#1-setting-several-tasmota-to-be-controlled-as-one-by-a-home-automation-system","title":"1) Setting Several Tasmota to be controlled as one by a Home Automation System:","text":"<p>We can set one of the group address to be the same in all the devices so as to turn them on or off at the same time. In this case, so as to inform the status of all the relays to the Automation System, just one of the devices have to be configured as the responder. If you use the same Group Address for sending and receiving, you have to take into account not to make loops.</p> <p>DEVICE 1</p> <p></p> <p>DEVICE 2</p> <p></p>"},{"location":"KNX/#2-setting-2-tasmota-to-be-linked-as-stair-lights","title":"2) Setting 2 Tasmota to be linked as stair lights:","text":"<p>We can set one device to send the status of its output and another to read that and follow. And the second device can send the status of its button and the first device will toggle. With this configuration we can avoid to make a loop.</p> <p>DEVICE 1</p> <p></p> <p>DEVICE 2</p> <p></p>"},{"location":"KNX/#3-setting-a-button-as-initiator-of-a-scene","title":"3) Setting a button as initiator of a scene:","text":"<p>Just setting one device to send the push of a button, and the rest just use that value to turn them on. In this case, there is no toggle. Every time the button is pushed, the turn on command is sent.</p> <p>DEVICE 1</p> <p></p> <p>DEVICE 2</p> <p></p>"},{"location":"KNX/#4-setting-a-temperature-sensor","title":"4) Setting a Temperature sensor:","text":"<p>We can configure to send the value of temperature or humidity every teleperiod. This teleperiod can be configured. See TasmotaTasmota docs. It is recommended also to set the reply temperature address.</p> <p></p>"},{"location":"KNX/#5-using-rules","title":"5) Using rules:","text":"<p>More functionality can be added to Tasmota using rules.</p> <ul> <li>In the KNX Menu, can be set a Group Address to send data or commands by rules, as KNX TX1 to KNX TX5</li> </ul> <p>In rules we can use the command <code>KnxTx_Cmnd1 1</code> to send an ON state command to the group address set in KNX TX1 slot of the KNX menu. Also, we can use the command <code>KnxTx_Val1 15</code> to send a 15 value to the group address set in KNX TX1 slot of the KNX menu.</p> <ul> <li>In the KNX Menu can be set a Group Address to receive commands by rules as KNX RX1 to KNX RX5</li> </ul> <p>In rules we can use the events to catch the reception of COMMANDS from KNX to those RX Slots.</p> <p>Example: <code>rule on event#knxrx_cmnd1 do var1 %value% endon</code> to store the command received in the variable VAR1</p> <p>In rules we can use the events to catch the reception of VALUES from KNX to those RX Slots.</p> <p>Example: <code>rule on event#knxrx_val1 do var1 %value% endon</code> to store the value received in the variable VAR1</p> <p>Also, if a Read request is received from KNX Network, we can use that in a rule as for example: <code>rule on event#knxrx_req1 do knxtx_val1 %var3% endon</code></p> <p>NOTE: KnxTX_valn command, KNXRX_Reqn trigger and sensors' telegrams, uses KNX DPT14 (32 bits float) since 9.1.0.2 . Old versions use DPT9 (16 bits float). Old and new versions can not send values between each other. Only commands. It is recommended to have all devices on the same version.</p> <p>SCENES</p> <p>For using the KNX Scenes Feature, you need to add a rule with the behaviour you want for that scene like:</p> <p><code>Rule1 on EVENT#KNX_SCENE=0 do power1 1 endon  on EVENT#KNX_SCENE=1 do power1 0 endon</code></p>"},{"location":"KNX/#6-rule-to-send-knx-telegram-with-bh1750-sensor-data","title":"6) Rule to send KNX Telegram with BH1750 Sensor Data:","text":"<ul> <li>If you want to send your sensor values by KNX every teleperiod time to the Group Address defined in KNX_TX1, you can use the following rule:</li> </ul> <pre><code>rule1 1\nrule1 on tele-BH1750#Illuminance do knxtx_val1 %value% endon\n</code></pre> <ul> <li>If you want to send your sensor values by KNX only when it changes in a delta of 10 lx to the Group Address defined in KNX_TX1, you can use the following rule:</li> </ul> <pre><code>rule1 1\nrule1 on system#boot do backlog var1 0; var2 0 endon on BH1750#Illuminance&gt;%var1% do backlog var1 %value%; knxtx_val1 %value%; var2 %value%; add1 5; sub2 5 endon on BH1750#Illuminance&lt;%var2% do backlog var2 %value%; knxtx_val1 %value%; var1 %value%; add1 5; sub2 5 endon\n</code></pre>"},{"location":"LM75AD/","title":"LM75AD temperature sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_LM75AD \n#define USE_LM75AD      // [I2cDriver20] Enable LM75AD sensor (I2C addresses 0x48 - 0x4F) (+0k5 code)\n#endif\n</code></pre></p> <p>The LM75AD is an I<sup>2</sup>C temperature sensor that converts temperature directly to digital signals from -55\u00b0C to +125\u00b0C and achieves an accuracy of 0.125\u00b0C</p> <p>Some features of the LM75A chip not implemented in this driver:  -  Programmable temperature threshold and hysteresis set points  - Stand-alone operation as thermostat at power-up </p> <p>LM75A Datasheet</p> <p>The STDS75 chip is functionally identical to the LM75A, and can be interfaced using the same code as the LM75A.</p>"},{"location":"LM75AD/#configuration","title":"Configuration","text":""},{"location":"LM75AD/#wiring","title":"Wiring","text":"LM75AD ESP VCC 3.3V GND GND SDA GPIOx SCL GPIOy OS not used <p>The driver currently only allows the use of a single LM75AD sensor on any of the addresses configurable through pins A0, A1 and A2. These are conveniently broken out on the breakout board either as pins or as solderable joints as can be seen on the example breakout board.</p> <p>These pins need to be tied down to either GND or VCC (3.3V) and the resulting I<sup>2</sup>C address will be set during power-up according to the table: </p>"},{"location":"LM75AD/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect LM75AD automatically and display Temperature.</p>"},{"location":"LM75AD/#commands","title":"Commands","text":"<p><code>TempOffset</code> can be used for calibrating the measured temperature. This setting affects all temperature sensors on the device.</p>"},{"location":"LM75AD/#breakout-boards","title":"Breakout Boards","text":"<p>Can also be used standalone if soldered to a board given the diagram is used</p> <p></p> <p>R1 and R2 are pull-up resistors which are required by the I<sup>2</sup>C bus to operate properly. If you have other I<sup>2</sup>C sensors with pull-up resistors connected to the same I<sup>2</sup>C bus it's probably not necessary to have them.</p>"},{"location":"LMT01/","title":"LMT01 temperature sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_LMT01 \n#define USE_LMT01      // Add support for TI LMT01 temperature sensor, count pulses on single GPIO (+0k5 code)\n#endif\n</code></pre></p> <p>The Texas Instruments LMT01 is 2-pin digital output temperature sensor that converts temperature directly to a sequence of digital pulses, reading a range from -50\u00b0C to +150\u00b0C with up to 0.5\u00b0C accuracy.  It is available in a DIY-friendly small TO-92 package.</p> <p>Connection is by a single GPIO to count the pulses, which needs a driver transistor to convert the small current changes into logic level voltage swings.</p> <ul> <li>LMT01 data sheet</li> <li>LMT01 product page with links to evaluation board and    training video and sample code.</li> </ul> <p>Limitations of current implementation: </p> <ul> <li>Only the simple linear conversion is used.  The datasheet suggests the use of a look-up table to improve the accuracy at the edges of the range, this is not yet implemented.</li> <li>The sensor code only supports one LMT01 instance.</li> </ul>"},{"location":"LMT01/#configuration","title":"Configuration","text":"<p>Choose a pin GPIOx.  The GPIO can be connected to the LMT01 via a NPN transistor, so current pulses pull the GPIO line low: see Figure 32 in the LMT01 datasheet.</p> <p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>LMT01 Pulse</code></li> </ul> <p>After a reboot the sensor will be detected and displayed.  If the connection is not working, the pulse counting will timeout and you will see <code>null</code> displayed for the temperature.</p>"},{"location":"LVGL/","title":"Light and Versatile Embedded Graphics Library","text":"<p>Tasmota now supports openHASP-compatible templates - named HASPmota - which makes it much easier to start with LVGL. Check the HASPmota documentation.</p> <p>This feature is included in tasmota32-lvgl.bin</p> <p>Check the LVGL API Reference</p> <p>Supported version: LVGL v9.4.0, LodePNG v20201017, Freetype 2.13.2</p> <p>LVGL (Light and Versatile Graphics Library) is Tasmota's next generation display. It is powerful, lightweight and simple to use. It combines:</p> <ul> <li>LVGL's powerful graphics and GUI library for embedded</li> <li>Tasmota's stability, richness of features and frugality on resources</li> <li>Berry's powerful language similar to MicroPython</li> </ul> <p>LVGL is an open-source graphics library providing everything you need to create embedded GUI with easy-to-use graphical elements, beautiful visual effects and low memory footprint.</p> <p>Berry is an ultra-lightweight dynamically typed embedded scripting language. It is designed for lower-performance embedded devices</p> <p>After compiling Tasmota with LVGL support and configuring uDisplay (see below), you can start using LVGL through the Berry console.</p>"},{"location":"LVGL/#using-lvgl","title":"Using LVGL","text":"<p>This example uses the M5Stack Fire device.</p> <p>Use the Auto-Conf feature in Configuration menu to set up the GPIOs and the <code>display.ini</code> file. After a couple of restarts, the device should show a splash scren with a Tasmota logo. You are ready to start.</p> <p>Then open the Berry console and copy/paste the following: (alternatively create an <code>autoexec.be</code> file with this content):</p> <pre><code>#- start LVGL and init environment -#\nlv.start()\n\nhres = lv.get_hor_res()       # should be 320\nvres = lv.get_ver_res()       # should be 240\n\nscr = lv.scr_act()            # default screen object\nf20 = lv.montserrat_font(20)  # load embedded Montserrat 20\n\n#- Background with a gradient from black #000000 (bottom) to dark blue #0000A0 (top) -#\nscr.set_style_bg_color(lv.color(0x000077), lv.PART_MAIN | lv.STATE_DEFAULT)\n\n#- Upper state line -#\nstat_line = lv.label(scr)\nif f20 != nil stat_line.set_style_text_font(f20, lv.PART_MAIN | lv.STATE_DEFAULT) end\nstat_line.set_long_mode(lv.LABEL_LONG_SCROLL)                                        # auto scrolling if text does not fit\nstat_line.set_width(hres)\nstat_line.set_align(lv.TEXT_ALIGN_LEFT)                                              # align text left\nstat_line.set_style_bg_color(lv.color(0xD00000), lv.PART_MAIN | lv.STATE_DEFAULT)    # background #000088\nstat_line.set_style_bg_opa(lv.OPA_COVER, lv.PART_MAIN | lv.STATE_DEFAULT)            # 100% background opacity\nstat_line.set_style_text_color(lv.color(0xFFFFFF), lv.PART_MAIN | lv.STATE_DEFAULT)  # text color #FFFFFF\nstat_line.set_text(\"Tasmota\")\nstat_line.refr_size()                                                                # new in LVGL8\nstat_line.refr_pos()                                                                 # new in LVGL8\n\n#- display wifi strength indicator icon (for professionals ;) -#\nwifi_icon = lv_wifi_arcs_icon(stat_line)    # the widget takes care of positioning and driver stuff\nclock_icon = lv_clock_icon(stat_line)\n\n#- create a style for the buttons -#\nbtn_style = lv.style()\nbtn_style.set_radius(10)                        # radius of rounded corners\nbtn_style.set_bg_opa(lv.OPA_COVER)              # 100% background opacity\nif f20 != nil btn_style.set_text_font(f20) end  # set font to Montserrat 20\nbtn_style.set_bg_color(lv.color(0x1fa3ec))      # background color #1FA3EC (Tasmota Blue)\nbtn_style.set_border_color(lv.color(0x0000FF))  # border color #0000FF\nbtn_style.set_text_color(lv.color(0xFFFFFF))    # text color white #FFFFFF\n\n#- create buttons -#\nprev_btn = lv.btn(scr)                            # create button with main screen as parent\nprev_btn.set_pos(20,vres-40)                      # position of button\nprev_btn.set_size(80, 35)                         # size of button\nprev_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)   # style of button\nprev_label = lv.label(prev_btn)                   # create a label as sub-object\nprev_label.set_text(\"&lt;\")                          # set label text\nprev_label.center()\n\nnext_btn = lv.btn(scr)                            # right button\nnext_btn.set_pos(220,vres-40)\nnext_btn.set_size(80, 35)\nnext_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)\nnext_label = lv.label(next_btn)\nnext_label.set_text(\"&gt;\")\nnext_label.center()\n\nhome_btn = lv.btn(scr)                            # center button\nhome_btn.set_pos(120,vres-40)\nhome_btn.set_size(80, 35)\nhome_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)\nhome_label = lv.label(home_btn)\nhome_label.set_text(lv.SYMBOL_OK)                 # set text as Home icon\nhome_label.center()\n\n#- callback function when a button is pressed, react to EVENT_CLICKED event -#\n\ndef btn_clicked_cb(obj, event)\n    var btn = \"Unknown\"\n    if   obj == prev_btn  btn = \"Prev\"\n    elif obj == next_btn  btn = \"Next\"\n    elif obj == home_btn  btn = \"Home\"\n    end\n    # get the coordinates\n    var indev = event.get_indev()\n    var point = lv.point()\n    indev.get_point(point)\n    # get local coordinates\n    var area = lv.area()\n    obj.get_coords(area)\n\n    print(f\"{btn} button pressed at ({point.x},{point.y}) local ({point.x - area.x1},{point.y - area.y1})\")\nend\n\n\nprev_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\nnext_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\nhome_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\n</code></pre> <p>You should see this:</p> <p></p> <p></p> <p>Setting an input device is simple, we are now configuring the three buttons as the equivalent of a rotary encoder: left/ok/right.</p> <p>To control focus, you need to create a group, put the focusable items in the group, and assign the input device to the group:</p> <pre><code>g = lv.group()\ng.add_obj(prev_btn)\ng.add_obj(home_btn)\ng.add_obj(next_btn)\nrotary = lv.register_button_encoder(true)   #- buttons are inverted -#\nrotary.set_group(g)\n</code></pre>"},{"location":"LVGL/#touch-screen-support","title":"Touch Screen Support","text":"<p>Touch screen are supported natively via Universal Display driver.</p> <p>Let's go into the details of this example.</p>"},{"location":"LVGL/#starting-lvgl","title":"Starting LVGL","text":"<p>Start LVGL</p> <pre><code>lv.start()\n</code></pre> <p>Note: when you create an LVGL object, you need to use the <code>lv</code> module. For example, creating a label object is done with <code>lv.lv_label</code>. As a convenience, classes can also be named with a shorter name <code>lv.label</code> which is equivalent to <code>lv.lv_label</code>. The internal class name is still <code>lv_label</code>.</p> <p>Use <code>lv.montserrat_font(&lt;size&gt;)</code> to load a pre-defined montserrat font. Embedded sizes are: 10, 14, 20, 28. You can also load a font from the file-system but you need to convert them first. See: https://docs.lvgl.io/latest/en/html/overview/font.html</p> <pre><code>hres = lv.get_hor_res()       # should be 320\nvres = lv.get_ver_res()       # should be 240\n\nscr = lv.scr_act()            # default screan object\nf20 = lv.montserrat_font(20)  # load embedded Montserrat 20\n</code></pre>"},{"location":"LVGL/#set-the-background-color","title":"Set the background color","text":"<pre><code>#- Background with a gradient from black #000000 (bottom) to dark blue #0000A0 (top) -#\nscr.set_style_bg_color(lv.color(0x0000A0), lv.PART_MAIN | lv.STATE_DEFAULT)\nscr.set_style_bg_grad_color(lv.color(0x000000), lv.PART_MAIN | lv.STATE_DEFAULT)\nscr.set_style_bg_grad_dir(lv.GRAD_DIR_VER, lv.PART_MAIN | lv.STATE_DEFAULT)\n</code></pre> <p>The display is composed of a virtual screen object <code>scr</code>. To change the background you need to change the style of this object. You can either create a full style object or change the style inside the object. This is what we do here. Hence methods: <code>set_style_&lt;xxx&gt;</code></p> <p>In this example we do a vertical color gradient from dark blue (up) to black (down).</p>"},{"location":"LVGL/#colors","title":"Colors","text":"<p>Color are created via <code>lv.color(&lt;int&gt;)</code> with 0xRRGGBB as 24 bits color. Internally the color is converted to the display color depth so rounding errors may happen:</p> <pre><code>&gt; lv.color(0x808080)\nlv_color(0x838183 - native:0x1084)\n</code></pre> <p>The line above shows the internal color converted back to 24 bits RGB (rounding errors occur) and the native 15 bits RGB internal color.</p>"},{"location":"LVGL/#create-the-upper-text-line","title":"Create the upper text line","text":"<pre><code>#- Upper state line -#\nstat_line = lv.label(scr)\nif f20 != nil stat_line.set_style_text_font(f20, lv.PART_MAIN | lv.STATE_DEFAULT) end\nstat_line.set_long_mode(lv.LABEL_LONG_SCROLL)                                        # auto scrolling if text does not fit\nstat_line.set_width(hres)\nstat_line.set_align(lv.TEXT_ALIGN_LEFT)                                              # align text left\nstat_line.set_style_bg_color(lv.color(0xD00000), lv.PART_MAIN | lv.STATE_DEFAULT)    # background #000088\nstat_line.set_style_bg_opa(lv.OPA_COVER, lv.PART_MAIN | lv.STATE_DEFAULT)            # 100% background opacity\nstat_line.set_style_text_color(lv.color(0xFFFFFF), lv.PART_MAIN | lv.STATE_DEFAULT)  # text color #FFFFFF\nstat_line.set_text(\"Tasmota\")\nstat_line.refr_size()                                                                # new in LVGL8\nstat_line.refr_pos()                                                                 # new in LVGL8\n</code></pre> <p>Let's decompose:</p> <pre><code>stat_line = lv.label(scr)\n</code></pre> <p>Creates an object of type <code>lv_label</code> with parent <code>scr</code> (screen).</p> <pre><code>if f20 != nil stat_line.set_style_text_font(f20, lv.PART_MAIN | lv.STATE_DEFAULT) end\n</code></pre> <p>If <code>f20</code> is correctly loaded, set the font to Montserrat 20. Styles are associated to parts of objects and to states. Here we associate to the main part for state default.</p> <pre><code>stat_line.set_long_mode(lv.LABEL_LONG_SCROLL)                                        # auto scrolling if text does not fit\n</code></pre> <p>Set the label to auto roll from right to left and vice versa if the text does not fit in the display.</p> <pre><code>stat_line.set_width(hres)\nstat_line.set_align(lv.TEXT_ALIGN_LEFT)                                              # align text left\n</code></pre> <p>Set the width to full screen resolution, and align text to the left.</p> <pre><code>stat_line.set_style_bg_color(lv.color(0xD00000), lv.PART_MAIN | lv.STATE_DEFAULT)    # background #000088\nstat_line.set_style_bg_opa(lv.OPA_COVER, lv.PART_MAIN | lv.STATE_DEFAULT)            # 100% background opacity\nstat_line.set_style_text_color(lv.color(0xFFFFFF), lv.PART_MAIN | lv.STATE_DEFAULT)  # text color #FFFFFF\n</code></pre> <p>Set background color to red, text color to white, opacity to 100%.</p> <pre><code>stat_line.set_text(\"Tasmota\")\n</code></pre> <p>Set the text of the label.</p> <pre><code>stat_line.refr_size()                                                                # new in LVGL8\nstat_line.refr_pos()                                                                 # new in LVGL8\n</code></pre> <p>The latter is new in LVGL8 and tells the widget to update its size and position, that we will use right after to position other widgets. Please note that the actual display is asynchronous. We describe the objects, in whatever order, they will be all displayed at once.</p>"},{"location":"LVGL/#create-a-style","title":"Create a style","text":"<pre><code>#- create a style for the buttons -#\nbtn_style = lv.style()\nbtn_style.set_radius(10)                        # radius of rounded corners\nbtn_style.set_bg_opa(lv.OPA_COVER)              # 100% background opacity\nif f20 != nil btn_style.set_text_font(f20) end  # set font to Montserrat 20\nbtn_style.set_bg_color(lv.color(0x1fa3ec))      # background color #1FA3EC (Tasmota Blue)\nbtn_style.set_border_color(lv.color(0x0000FF))  # border color #0000FF\nbtn_style.set_text_color(lv.color(0xFFFFFF))    # text color white #FFFFFF\n</code></pre> <p>We create a <code>lv_style</code> object and associate some attributes. This works similarly to CSS styles. This style sets background color to Tasmota button blue, text to white, opacity to 100%, font to Montserrat 20 and corner rounding to 1 pixel (10 decipixels).</p>"},{"location":"LVGL/#create-the-buttons","title":"Create the buttons","text":"<pre><code>home_btn = lv.btn(scr)                            # center button\nhome_btn.set_pos(120,vres-40)\nhome_btn.set_size(80, 35)\nhome_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)\nhome_label = lv.label(home_btn)\nhome_label.set_text(lv.SYMBOL_OK)                 # set text as Home icon\nhome_label.center()\n</code></pre> <p>Finally create a <code>lv_btn</code> object with parent <code>scr</code>, set its size and position, add the previously defined style and set its text.</p> <p>LVGL provides some pre-defined symbols like <code>lv.SYMBOL_OK</code>.</p>"},{"location":"LVGL/#advanced-features-and-extensions","title":"Advanced features and extensions","text":""},{"location":"LVGL/#screenshot","title":"Screenshot","text":"<p>Tasmota includes an easy way to take screenshots.</p> <p>Just use <code>lv.screenshot()</code> and a <code>BMP</code> file will be stored in the file system.</p> <p>Example:</p> <pre><code>&gt; lv.screenshot()\n/screenshot-1642356919.bmp\n</code></pre> <p>Then download the file to your local computer. The file format is uncompressed BMP with 16 bits per pixel. It is highly recommended to then compress the image to PNG or JPG with the software of your choice.</p> <p>Warning: due to internal implementation limitations, the image is stored upside down. Don't forget to vertically revert the image.</p> <p></p>"},{"location":"LVGL/#png-image-support","title":"PNG Image support","text":"<p>Support for PNG decoding depends on <code>#define USE_LVGL_PNG_DECODER</code> - which is enabled by default in Tasmota32-lvgl.</p> <p>You need to first store images on the file system, and simply load them through LVGL standard way. PNG identification depends on the <code>.png</code> extension.</p> <p>Example: store the following image as <code>Sunrise320.png</code></p> <p></p> <pre><code>sunrise = lv.img(scr)                   # create an empty image object in the current screen\nsunrise.set_src(\"A:/Sunrise320.png\")    # load \"Sunrise320.png\", the default drive letter is 'A:'\nsunrise.move_background()               # move the image to the background\n</code></pre> <p></p>"},{"location":"LVGL/#freetype-fonts-support","title":"FreeType fonts support","text":"<p>Support for FreeType fonts depends on <code>#define USE_LVGL_FREETYPE</code> - which is NOT enabled by default in Tasmota32-lvgl.</p> <p>Bitmat fonts typically consume significant flash size because you need to embed the font at different size. Using FreeType vector fonts can bring more flexibility and options. You need to first upload the desired fonts on the Tasmota file system.</p> <p>To create the <code>lv_font</code> object, use <code>lv.load_freetype_font(name:string, size:int, type:int) -&gt; nil or lv_font</code>. If the font is not found, the call returns <code>nil</code>. <code>type</code> can be <code>0</code> or <code>lv.FT_FONT_STYLE_NORMAL</code>, or a combination of <code>lv.FT_FONT_STYLE_ITALIC</code> and <code>lv.FT_FONT_STYLE_BOLD</code>.</p> <p>Example (after loading <code>lvgl_demo.be</code>) using <code>sketchbook.ttf</code> font:</p> <pre><code>sb120 = lv.load_freetype_font(\"sketchbook.ttf\", 120, 0)\ntt = lv.label(scr)\ntt.set_style_bg_opa(lv.OPA_0, lv.PART_MAIN | lv.STATE_DEFAULT)\ntt.set_style_text_color(lv.color(0xFFFFFF), lv.PART_MAIN | lv.STATE_DEFAULT)\ntt.set_text(\"MQTT\")\ntt.set_pos(10,40)\ntt.set_size(300,150)\nif sb120 != nil tt.set_style_text_font(sb120, lv.PART_MAIN | lv.STATE_DEFAULT) end\n</code></pre> <p></p>"},{"location":"LVGL/#whats-implemented-and-whats-not","title":"What's implemented and what's not?","text":"<p>What's implemented currently:</p> <ul> <li>All standard LVGL widgets are available, most of extras</li> <li>Styles</li> <li>File-system</li> <li>Fonts, currently Montserrat fonts are embedded at sizes 10, 14 (default), 20 and 28 (compressed - smaller and slower)</li> <li>External Fonts in file-system, either in LVGL's binary format of TrueType fonts via the FreeType library (requires <code>#defined USE_LVGL_FREETYPE</code>)</li> <li>Images in file-system, either in LVGL's binary format or PNG</li> <li>Most of the high-level LVGL APIs via the <code>lv</code> Berry object</li> <li>SPI displays with 16 bits per pixels</li> <li>Animations via Berry code</li> <li>Touch Screen support</li> <li>SPI DMA</li> <li>Callbacks on LVGL objects to react on events</li> <li>Ability to define custom widgets in Berry</li> </ul> <p>What will probably not be implemented</p> <ul> <li>Native LVGL animation engine</li> <li>Styles garbage collection is not done, which means that creating lots of styles leads to memory leak</li> <li>multi-screens display - I don't know of a single ESP32 based device with multi-screens</li> <li>Bidirectional fonts - unless there is strong demand</li> <li>LVGL tasks - Berry provides all the necessary tools for task scheduling</li> </ul>"},{"location":"LVGL/#converting-c-lvgl-to-berry","title":"Converting C LVGL to Berry","text":"<p>Simply speaking, you can convert most constants from their C equivalent to Berry by just changing the <code>LV_</code> prefix to <code>lv.</code>.</p> <p>Example: <code>LV_SYMBOL_OK</code> becomes <code>lv.SYMBOL_OK</code></p> <p>Berry provides an object model to <code>lv_object</code> and sub-classes for widgets like <code>lv_btn</code>, <code>lv_label</code>... To create an object, just instantiate the class: <code>lv_btn(parent)</code></p> <p><code>lv_style</code> is created independently.</p> <p><code>lv_color</code> takes a 24 bits 0xRRGGB as parameter, or a pre-defined color like <code>lv.BLUE</code></p>"},{"location":"LVGL/#compiling-for-lvgl","title":"Compiling for LVGL","text":"<p>In <code>my_user_config.h</code> or in your config override, add:</p> <pre><code>#define USE_LVGL\n#define USE_DISPLAY\n#define USE_DISPLAY_LVGL_ONLY\n#define USE_XPT2046\n#define USE_UNIVERSAL_DISPLAY\n  #undef USE_DISPLAY_MODES1TO5\n  #undef USE_DISPLAY_LCD\n  #undef USE_DISPLAY_SSD1306\n  #undef USE_DISPLAY_MATRIX\n  #undef USE_DISPLAY_SEVENSEG\n</code></pre> <p>Be aware that it adds 440Kb to you firmware, so make sure you have a partition with enough program Flash space. Preferably use <code>esp32_partition_app1856k_spiffs320k.csv</code> partition file.</p>"},{"location":"LVGL/#goodies","title":"Goodies","text":""},{"location":"LVGL/#tasmota-logo","title":"Tasmota Logo","text":"<p>Get a Tasmota logo:</p> <pre><code># start the display\nlv.start()\n\n# set background color to blue\nscr = lv.scr_act()\nscr.set_style_bg_color(lv.color(lv.COLOR_BLUE), lv.PART_MAIN | lv.STATE_DEFAULT)\n\n# create a lv_img object and set it to Tasmota logo\nlogo = lv.img(scr)\nlogo.set_tasmota_logo()\nlogo.center()\n</code></pre> <p></p> <p>The logo is black, with anti-aliasing and transparency. You can now manipulate the logo: change zoom, rotate or recolor.</p> <pre><code># recolor logo to white\nlogo.set_style_img_recolor_opa(255, lv.PART_MAIN | lv.STATE_DEFAULT)\nlogo.set_style_img_recolor(lv.color(lv.COLOR_WHITE), lv.PART_MAIN | lv.STATE_DEFAULT)\n\n# zoom by 125% - 100% is 256, so 125% is 320\nlogo.set_zoom(300)\n\n# rotate by 30 degrees - or 300 deci-degrees\nlogo.set_angle(300)\n</code></pre> <p></p> <p>Example of animation:</p> <pre><code>cur_zoom = 200\ncur_incr = 5\ndef animate_logo()\n  cur_zoom += cur_incr\n  if cur_zoom &gt; 300 cur_incr = - cur_incr end\n  if cur_zoom &lt; 200 cur_incr = - cur_incr end\n  logo.set_zoom(cur_zoom)\n  tasmota.set_timer(100, animate_logo)\nend\nanimate_logo()\n</code></pre>"},{"location":"LVGL/#calibrate-a-resistive-touch-screen","title":"Calibrate a resistive Touch Screen","text":"<p>Some touchscreens like Lolin TFT 2.4 Touch Shields use a resistive touchscreen controlled by <code>XPT2046</code>. Contrary to capacitive touchscreens, resistive touchscreens needs a per-device calibration.</p> <p>You can download DisplayCalibrate.tapp Tasmota Application which allows for easy calibration. In only a few steps, it will generate the universal display line <code>:M</code> with calibration information.</p> <ol> <li> <p>First download DisplayCalibrate.tapp application and upload it in the file system, and restart.</p> </li> <li> <p>Make sure you are in orientation <code>DisplayRotate 0</code></p> </li> <li> <p>In the console, type the command <code>DisplayCalibrate</code></p> </li> </ol> <p>You will see the following screens. Click on all 4 crosses near corners.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Note: measures are taken every 50 ms and are averaged, and requires at least 3 measures (150ms).</p> <p>If everything went well, you will see the following screen. After reboot, your touchscreen is ready and calibrate.</p> <p></p> <p>If the geometry is wrong, you will see the following screen and no change is done to <code>display.ini</code></p> <p></p>"},{"location":"LVGL/#cookbook","title":"Cookbook","text":""},{"location":"LVGL/#measuring-user-inactivity","title":"Measuring user inactivity","text":"<p>LVGL has a notion of screen inactivity, i.e. how long did the user not interact with the screen. This can be use to dim the display or turn it off after a moment of inactivity (like a screen saver). The time is in milliseconds. Full doc here: https://docs.lvgl.io/8/overview/display.html#inactivity</p> <pre><code># time of inactivity in ms\nlv.disp().get_inactive_time()\n</code></pre>"},{"location":"LVGL/#technical-details","title":"Technical Details","text":"<p>The code size impact is quite significant, so you probably need partitions with code at least set to 1856KB. Doing so leaves 320KB for file system on 4MB flash. With the Safeboot partition layout, default code partition size for 4MB of flash is 2880KB.</p> <p>Most of Berry code is solidified in Flash, so the initial RAM footprint is very low (a few KB).</p>"},{"location":"LVGL_API_Reference/","title":"LVGL Berry API Reference","text":""},{"location":"LVGL_API_Reference/#module-lv","title":"module <code>lv</code>","text":"Method Arguments Return type LVGL equivalent anim_count_running int lv_anim_count_running anim_delete \\&lt;any&gt;, comptr bool lv_anim_delete anim_delete_all lv_anim_delete_all anim_get \\&lt;any&gt;, comptr lv.anim lv_anim_get anim_get_timer lv.timer lv_anim_get_timer anim_refr_now lv_anim_refr_now anim_resolve_speed int, int, int int lv_anim_resolve_speed anim_speed int int lv_anim_speed anim_speed_clamped int, int, int int lv_anim_speed_clamped anim_speed_to_time int, int, int int lv_anim_speed_to_time area_align lv.area, lv.area, int, int, int lv_area_align area_copy lv.area, lv.area lv_area_copy area_get_height lv.area int lv_area_get_height area_get_size lv.area int lv_area_get_size area_get_width lv.area int lv_area_get_width area_increase lv.area, int, int lv_area_increase area_move lv.area, int, int lv_area_move area_set lv.area, int, int, int, int lv_area_set area_set_height lv.area, int lv_area_set_height area_set_width lv.area, int lv_area_set_width canvas_buf_size int, int, int, int int lv_canvas_buf_size clamp_height int, int, int, int int lv_clamp_height clamp_width int, int, int, int int lv_clamp_width color32_eq int, int bool lv_color32_eq color32_luminance int int lv_color32_luminance color32_make int, int, int, int int lv_color32_make color_16_16_mix int, int, int int lv_color_16_16_mix color_black lv.color lv_color_black color_brightness lv.color int lv_color_brightness color_darken lv.color, int lv.color lv_color_darken color_eq lv.color, lv.color bool lv_color_eq color_format_get_bpp int int lv_color_format_get_bpp color_format_get_size int int lv_color_format_get_size color_format_has_alpha int bool lv_color_format_has_alpha color_hex int lv.color lv_color_hex color_hex3 int lv.color lv_color_hex3 color_hsv_to_rgb int, int, int lv.color lv_color_hsv_to_rgb color_lighten lv.color, int lv.color lv_color_lighten color_luminance lv.color int lv_color_luminance color_make int, int, int lv.color lv_color_make color_mix lv.color, lv.color, int lv.color lv_color_mix color_mix32 int, int int lv_color_mix32 color_mix32_premultiplied int, int int lv_color_mix32_premultiplied color_over32 int, int int lv_color_over32 color_rgb_to_hsv int, int, int int lv_color_rgb_to_hsv color_swap_16 int int lv_color_swap_16 color_to_32 lv.color, int int lv_color_to_32 color_to_hsv lv.color int lv_color_to_hsv color_to_int lv.color int lv_color_to_int color_to_u16 lv.color int lv_color_to_u16 color_to_u32 lv.color int lv_color_to_u32 color_white lv.color lv_color_white display_create int, int lv.display lv_display_create display_get_default lv.display lv_display_get_default display_refr_timer lv.timer lv_display_refr_timer dpx int int lv_dpx draw_arc lv.layer, lv.draw_arc_dsc lv_draw_arc draw_arc_dsc_init lv.draw_arc_dsc lv_draw_arc_dsc_init draw_arc_get_area int, int, int, int, int, int, bool, lv.area lv_draw_arc_get_area draw_character lv.layer, lv.draw_label_dsc, comptr, int lv_draw_character draw_create_unit int comptr lv_draw_create_unit draw_deinit lv_draw_deinit draw_dispatch lv_draw_dispatch draw_dispatch_layer lv.display, lv.layer bool lv_draw_dispatch_layer draw_dispatch_request lv_draw_dispatch_request draw_dispatch_wait_for_request lv_draw_dispatch_wait_for_request draw_get_unit_count int lv_draw_get_unit_count draw_init lv_draw_init draw_label lv.layer, lv.draw_label_dsc, lv.area lv_draw_label draw_label_dsc_init lv.draw_label_dsc lv_draw_label_dsc_init draw_layer_alloc_buf lv.layer comptr lv_draw_layer_alloc_buf draw_layer_create lv.layer, int, lv.area lv.layer lv_draw_layer_create draw_layer_go_to_xy lv.layer, int, int comptr lv_draw_layer_go_to_xy draw_layer_init lv.layer, lv.layer, int, lv.area lv_draw_layer_init draw_letter lv.layer, lv.draw_letter_dsc, comptr lv_draw_letter draw_letter_dsc_init lv.draw_letter_dsc lv_draw_letter_dsc_init draw_line lv.layer, lv.draw_line_dsc lv_draw_line draw_line_dsc_init lv.draw_line_dsc lv_draw_line_dsc_init draw_rect lv.layer, lv.draw_rect_dsc, lv.area lv_draw_rect draw_rect_dsc_init lv.draw_rect_dsc lv_draw_rect_dsc_init draw_wait_for_finish lv_draw_wait_for_finish event_code_get_name int string lv_event_code_get_name event_dsc_get_cb lv.event_dsc lv.event_cb lv_event_dsc_get_cb event_dsc_get_user_data lv.event_dsc comptr lv_event_dsc_get_user_data event_register_id int lv_event_register_id flex_init lv_flex_init font_get_default lv.font lv_font_get_default font_get_glyph_width lv.font, int, int int lv_font_get_glyph_width font_get_line_height lv.font int lv_font_get_line_height font_has_static_bitmap lv.font bool lv_font_has_static_bitmap font_info_is_equal lv.font_info, lv.font_info bool lv_font_info_is_equal font_set_kerning lv.font, int lv_font_set_kerning get_hor_res int lv_get_hor_res get_ts_calibration lv.ts_calibration lv_get_ts_calibration get_ver_res int lv_get_ver_res grid_fr int int lv_grid_fr grid_init lv_grid_init group_by_index int lv.group lv_group_by_index group_get_count int lv_group_get_count group_get_default lv.group lv_group_get_default indev_active lv.indev lv_indev_active indev_create lv.indev lv_indev_create indev_get_active_obj lv.obj lv_indev_get_active_obj indev_read_timer_cb lv.timer lv_indev_read_timer_cb layer_bottom lv.obj lv_layer_bottom layer_init lv.layer lv_layer_init layer_reset lv.layer lv_layer_reset layer_sys lv.obj lv_layer_sys layer_top lv.obj lv_layer_top obj_assign_id lv.obj_class, lv.obj lv_obj_assign_id obj_class_create_obj lv.obj_class, lv.obj lv.obj lv_obj_class_create_obj obj_delete_anim_completed_cb lv.anim lv_obj_delete_anim_completed_cb obj_enable_style_refresh bool lv_obj_enable_style_refresh obj_event_base lv.obj_class, lv.event int lv_obj_event_base obj_id_compare \\&lt;any&gt;, \\&lt;any&gt; int lv_obj_id_compare obj_redraw lv.layer, lv.obj lv_obj_redraw obj_report_style_change lv.style lv_obj_report_style_change obj_style_get_selector_part int int lv_obj_style_get_selector_part obj_style_get_selector_state int int lv_obj_style_get_selector_state objid_builtin_destroy lv_objid_builtin_destroy palette_darken int, int lv.color lv_palette_darken palette_lighten int, int lv.color lv_palette_lighten palette_main int lv.color lv_palette_main pct int int lv_pct pct_to_px int, int int lv_pct_to_px point_array_transform comptr, int, int, int, int, comptr, bool lv_point_array_transform point_from_precise lv.point_precise int lv_point_from_precise point_precise_set lv.point_precise, int, int lv_point_precise_set point_precise_swap lv.point_precise, lv.point_precise lv_point_precise_swap point_set comptr, int, int lv_point_set point_swap comptr, comptr lv_point_swap point_transform comptr, int, int, int, comptr, bool lv_point_transform refr_now lv.display lv_refr_now scr_act lv.obj lv_screen_active scr_load lv.obj lv_screen_load scr_load_anim lv.obj, int, int, int, bool lv_screen_load_anim screen_active lv.obj lv_screen_active screen_load lv.obj lv_screen_load screen_load_anim lv.obj, int, int, int, bool lv_screen_load_anim span_stack_deinit lv_span_stack_deinit span_stack_init lv_span_stack_init style_get_num_custom_props int lv_style_get_num_custom_props style_get_prop_group int int lv_style_get_prop_group style_prop_get_default int int lv_style_prop_get_default style_prop_has_flag int, int bool lv_style_prop_has_flag style_prop_lookup_flags int int lv_style_prop_lookup_flags style_register_prop int int lv_style_register_prop task_handler int lv_task_handler text_get_size comptr, string, lv.font, int, int, int, int lv_text_get_size text_get_width string, int, lv.font, int int lv_text_get_width text_get_width_with_flags string, int, lv.font, int, int int lv_text_get_width_with_flags text_is_cmd comptr, int bool lv_text_is_cmd theme_apply lv.obj lv_theme_apply theme_get_color_primary lv.obj lv.color lv_theme_get_color_primary theme_get_color_secondary lv.obj lv.color lv_theme_get_color_secondary theme_get_font_large lv.obj lv.font lv_theme_get_font_large theme_get_font_normal lv.obj lv.font lv_theme_get_font_normal theme_get_font_small lv.obj lv.font lv_theme_get_font_small theme_get_from_obj lv.obj lv.theme lv_theme_get_from_obj theme_haspmota_init lv.display, lv.color_arr, lv.font, lv.font, lv.font lv.theme lv_theme_haspmota_init theme_haspmota_is_inited bool lv_theme_haspmota_is_inited theme_set_parent lv.theme, lv.theme lv_theme_set_parent timer_create \\&lt;closure&gt;, int, \\&lt;any&gt; lv.timer lv_timer_create timer_create_basic lv.timer lv_timer_create_basic timer_enable bool lv_timer_enable timer_get_idle int lv_timer_get_idle timer_get_time_until_next int lv_timer_get_time_until_next timer_handler int lv_timer_handler timer_handler_run_in_period int int lv_timer_handler_run_in_period timer_periodic_handler lv_timer_periodic_handler version_info string lv_version_info version_major int lv_version_major version_minor int lv_version_minor version_patch int lv_version_patch"},{"location":"LVGL_API_Reference/#core-classes","title":"Core classes","text":""},{"location":"LVGL_API_Reference/#class-lvanim","title":"class <code>lv.anim</code>","text":"Method Arguments Return type LVGL equivalent custom_delete comptr bool lv_anim_custom_delete custom_get comptr lv.anim lv_anim_custom_get get_delay int lv_anim_get_delay get_playtime int lv_anim_get_playtime get_repeat_count int lv_anim_get_repeat_count get_time int lv_anim_get_time get_user_data comptr lv_anim_get_user_data init lv_anim_init is_paused bool lv_anim_is_paused pause lv_anim_pause pause_for int lv_anim_pause_for resume lv_anim_resume set_bezier3_param int, int, int, int lv_anim_set_bezier3_param set_completed_cb comptr lv_anim_set_completed_cb set_custom_exec_cb comptr lv_anim_set_custom_exec_cb set_delay int lv_anim_set_delay set_duration int lv_anim_set_duration set_early_apply bool lv_anim_set_early_apply set_exec_cb comptr lv_anim_set_exec_cb set_get_value_cb comptr lv_anim_set_get_value_cb set_path_cb comptr lv_anim_set_path_cb set_ready_cb comptr lv_anim_set_completed_cb set_repeat_count int lv_anim_set_repeat_count set_repeat_delay int lv_anim_set_repeat_delay set_reverse_delay int lv_anim_set_reverse_delay set_reverse_duration int lv_anim_set_reverse_duration set_reverse_time int lv_anim_set_reverse_time set_start_cb comptr lv_anim_set_start_cb set_user_data \\&lt;any&gt; lv_anim_set_user_data set_values int, int lv_anim_set_values set_var \\&lt;any&gt; lv_anim_set_var start lv.anim lv_anim_start"},{"location":"LVGL_API_Reference/#class-lvdisplay","title":"class <code>lv.display</code>","text":"Method Arguments Return type LVGL equivalent add_event_cb \\&lt;closure&gt;, int, \\&lt;any&gt; lv_display_add_event_cb del lv_display_delete delete lv_display_delete delete_event int bool lv_display_delete_event delete_refr_timer lv_display_delete_refr_timer dpx int int lv_display_dpx enable_invalidation bool lv_display_enable_invalidation enable_invalidation bool lv_display_enable_invalidation get_angle int lv_display_get_rotation get_antialiasing bool lv_display_get_antialiasing get_antialiasing bool lv_display_get_antialiasing get_color_format int lv_display_get_color_format get_dpi int lv_display_get_dpi get_dpi int lv_display_get_dpi get_draw_buf_size int lv_display_get_draw_buf_size get_driver_data comptr lv_display_get_driver_data get_event_count int lv_display_get_event_count get_event_dsc int lv.event_dsc lv_display_get_event_dsc get_hor_res int lv_display_get_horizontal_resolution get_horizontal_resolution int lv_display_get_horizontal_resolution get_inactive_time int lv_display_get_inactive_time get_inactive_time int lv_display_get_inactive_time get_invalidated_draw_buf_size int, int int lv_display_get_invalidated_draw_buf_size get_layer_bottom lv.obj lv_display_get_layer_bottom get_layer_sys lv.obj lv_display_get_layer_sys get_layer_sys lv.obj lv_display_get_layer_sys get_layer_top lv.obj lv_display_get_layer_top get_layer_top lv.obj lv_display_get_layer_top get_matrix_rotation bool lv_display_get_matrix_rotation get_next lv.display lv_display_get_next get_next lv.display lv_display_get_next get_offset_x int lv_display_get_offset_x get_offset_x int lv_display_get_offset_x get_offset_y int lv_display_get_offset_y get_offset_y int lv_display_get_offset_y get_original_horizontal_resolution int lv_display_get_original_horizontal_resolution get_original_vertical_resolution int lv_display_get_original_vertical_resolution get_physical_hor_res int lv_display_get_physical_horizontal_resolution get_physical_horizontal_resolution int lv_display_get_physical_horizontal_resolution get_physical_ver_res int lv_display_get_physical_vertical_resolution get_physical_vertical_resolution int lv_display_get_physical_vertical_resolution get_refr_timer lv.timer lv_display_get_refr_timer get_rotation int lv_display_get_rotation get_rotation int lv_display_get_rotation get_scr_act lv.obj lv_display_get_screen_active get_scr_prev lv.obj lv_display_get_screen_prev get_screen_active lv.obj lv_display_get_screen_active get_screen_prev lv.obj lv_display_get_screen_prev get_theme lv.theme lv_display_get_theme get_theme lv.theme lv_display_get_theme get_tile_cnt int lv_display_get_tile_cnt get_user_data comptr lv_display_get_user_data get_ver_res int lv_display_get_vertical_resolution get_vertical_resolution int lv_display_get_vertical_resolution is_double_buffered bool lv_display_is_double_buffered is_invalidation_enabled bool lv_display_is_invalidation_enabled is_invalidation_enabled bool lv_display_is_invalidation_enabled register_vsync_event \\&lt;closure&gt;, \\&lt;any&gt; bool lv_display_register_vsync_event remove lv_display_delete remove_event_cb_with_user_data \\&lt;any&gt;, \\&lt;any&gt; int lv_display_remove_event_cb_with_user_data rotate_area lv.area lv_display_rotate_area send_event int, \\&lt;any&gt; int lv_display_send_event send_event int, \\&lt;any&gt; int lv_display_send_event send_vsync_event \\&lt;any&gt; int lv_display_send_vsync_event set_angle int lv_display_set_rotation set_antialiasing bool lv_display_set_antialiasing set_buffers \\&lt;any&gt;, \\&lt;any&gt;, int, int lv_display_set_buffers set_buffers_with_stride \\&lt;any&gt;, \\&lt;any&gt;, int, int, int lv_display_set_buffers_with_stride set_color_format int lv_display_set_color_format set_default lv_display_set_default set_default lv_display_set_default set_dpi int lv_display_set_dpi set_driver_data \\&lt;any&gt; lv_display_set_driver_data set_matrix_rotation bool lv_display_set_matrix_rotation set_offset int, int lv_display_set_offset set_physical_resolution int, int lv_display_set_physical_resolution set_render_mode int lv_display_set_render_mode set_resolution int, int lv_display_set_resolution set_rotation int lv_display_set_rotation set_rotation int lv_display_set_rotation set_theme lv.theme lv_display_set_theme set_theme lv.theme lv_display_set_theme set_tile_cnt int lv_display_set_tile_cnt set_user_data \\&lt;any&gt; lv_display_set_user_data trig_activity lv_display_trigger_activity trigger_activity lv_display_trigger_activity unregister_vsync_event \\&lt;closure&gt;, \\&lt;any&gt; bool lv_display_unregister_vsync_event"},{"location":"LVGL_API_Reference/#class-lvevent","title":"class <code>lv.event</code>","text":"Method Arguments Return type LVGL equivalent get_code int lv_event_get_code get_cover_area lv.area lv_event_get_cover_area get_current_target comptr lv_event_get_current_target get_current_target_obj lv.obj lv_event_get_current_target_obj get_hit_test_info comptr lv_event_get_hit_test_info get_indev lv.indev lv_event_get_indev get_invalidated_area lv.area lv_event_get_invalidated_area get_key int lv_event_get_key get_layer lv.layer lv_event_get_layer get_old_size lv.area lv_event_get_old_size get_param comptr lv_event_get_param get_rotary_diff int lv_event_get_rotary_diff get_scroll_anim lv.anim lv_event_get_scroll_anim get_self_size_info comptr lv_event_get_self_size_info get_target comptr lv_event_get_target get_target_obj lv.obj lv_event_get_target_obj get_user_data comptr lv_event_get_user_data set_cover_res int lv_event_set_cover_res set_ext_draw_size int lv_event_set_ext_draw_size stop_bubbling lv_event_stop_bubbling stop_processing lv_event_stop_processing"},{"location":"LVGL_API_Reference/#class-lvgroup","title":"class <code>lv.group</code>","text":"Method Arguments Return type LVGL equivalent add_obj lv.obj lv_group_add_obj del lv_group_delete delete lv_group_delete focus_freeze bool lv_group_focus_freeze focus_next lv_group_focus_next focus_obj lv_group_focus_obj focus_prev lv_group_focus_prev get_edge_cb callback lv_group_get_edge_cb get_editing bool lv_group_get_editing get_focus_cb lv.group_focus_cb lv_group_get_focus_cb get_focused lv.obj lv_group_get_focused get_obj_by_index int lv.obj lv_group_get_obj_by_index get_obj_count int lv_group_get_obj_count get_wrap bool lv_group_get_wrap remove lv_group_delete remove_all_objs lv_group_remove_all_objs remove_obj lv_group_remove_obj send_data int int lv_group_send_data set_default lv_group_set_default set_default lv_group_set_default set_editing bool lv_group_set_editing set_focus_cb \\&lt;closure&gt; lv_group_set_focus_cb set_refocus_policy int lv_group_set_refocus_policy set_wrap bool lv_group_set_wrap swap_obj lv.obj lv_group_swap_obj"},{"location":"LVGL_API_Reference/#class-lvindev","title":"class <code>lv.indev</code>","text":"Method Arguments Return type LVGL equivalent add_event_cb \\&lt;closure&gt;, int, \\&lt;any&gt; lv_indev_add_event_cb del lv_indev_delete delete lv_indev_delete enable bool lv_indev_enable get_cursor lv.obj lv_indev_get_cursor get_disp lv.display lv_indev_get_display get_display lv.display lv_indev_get_display get_driver_data comptr lv_indev_get_driver_data get_event_count int lv_indev_get_event_count get_event_dsc int lv.event_dsc lv_indev_get_event_dsc get_gesture_dir int lv_indev_get_gesture_dir get_group lv.group lv_indev_get_group get_key int lv_indev_get_key get_mode int lv_indev_get_mode get_next lv.indev lv_indev_get_next get_next lv.indev lv_indev_get_next get_point comptr lv_indev_get_point get_press_moved bool lv_indev_get_press_moved get_read_timer lv.timer lv_indev_get_read_timer get_scroll_dir int lv_indev_get_scroll_dir get_scroll_obj lv.obj lv_indev_get_scroll_obj get_short_click_streak int lv_indev_get_short_click_streak get_state int lv_indev_get_state get_type int lv_indev_get_type get_user_data comptr lv_indev_get_user_data get_vect comptr lv_indev_get_vect read lv_indev_read remove lv_indev_delete remove_event int bool lv_indev_remove_event remove_event_cb_with_user_data \\&lt;any&gt;, \\&lt;any&gt; int lv_indev_remove_event_cb_with_user_data reset lv.obj lv_indev_reset reset_long_press lv_indev_reset_long_press search_obj comptr lv.obj lv_indev_search_obj send_event int, \\&lt;any&gt; int lv_indev_send_event send_event int, \\&lt;any&gt; int lv_indev_send_event set_button_points lv.point_arr lv_indev_set_button_points set_cursor lv.obj lv_indev_set_cursor set_disp lv.display lv_indev_set_display set_display lv.display lv_indev_set_display set_driver_data \\&lt;any&gt; lv_indev_set_driver_data set_group lv.group lv_indev_set_group set_long_press_repeat_time int lv_indev_set_long_press_repeat_time set_long_press_time int lv_indev_set_long_press_time set_mode int lv_indev_set_mode set_scroll_limit int lv_indev_set_scroll_limit set_scroll_throw int lv_indev_set_scroll_throw set_type int lv_indev_set_type set_user_data \\&lt;any&gt; lv_indev_set_user_data stop_processing lv_indev_stop_processing wait_release lv_indev_wait_release"},{"location":"LVGL_API_Reference/#class-lvstyle","title":"class <code>lv.style</code>","text":"Method Arguments Return type LVGL equivalent copy lv.style lv_style_copy is_const bool lv_style_is_const is_empty bool lv_style_is_empty remove_prop int bool lv_style_remove_prop reset lv_style_reset set_align int lv_style_set_align set_anim lv.anim lv_style_set_anim set_anim_duration int lv_style_set_anim_duration set_anim_time int lv_style_set_anim_duration set_arc_color lv.color lv_style_set_arc_color set_arc_image_src \\&lt;any&gt; lv_style_set_arc_image_src set_arc_opa int lv_style_set_arc_opa set_arc_rounded bool lv_style_set_arc_rounded set_arc_width int lv_style_set_arc_width set_base_dir int lv_style_set_base_dir set_bg_color lv.color lv_style_set_bg_color set_bg_grad lv.grad_dsc lv_style_set_bg_grad set_bg_grad_color lv.color lv_style_set_bg_grad_color set_bg_grad_dir int lv_style_set_bg_grad_dir set_bg_grad_opa int lv_style_set_bg_grad_opa set_bg_grad_stop int lv_style_set_bg_grad_stop set_bg_image_opa int lv_style_set_bg_image_opa set_bg_image_recolor lv.color lv_style_set_bg_image_recolor set_bg_image_recolor_opa int lv_style_set_bg_image_recolor_opa set_bg_image_src \\&lt;any&gt; lv_style_set_bg_image_src set_bg_image_tiled bool lv_style_set_bg_image_tiled set_bg_img_opa int lv_style_set_bg_image_opa set_bg_img_recolor lv.color lv_style_set_bg_image_recolor set_bg_img_recolor_opa int lv_style_set_bg_image_recolor_opa set_bg_img_src \\&lt;any&gt; lv_style_set_bg_image_src set_bg_img_tiled bool lv_style_set_bg_image_tiled set_bg_main_opa int lv_style_set_bg_main_opa set_bg_main_stop int lv_style_set_bg_main_stop set_bg_opa int lv_style_set_bg_opa set_bitmap_mask_src \\&lt;any&gt; lv_style_set_bitmap_mask_src set_blend_mode int lv_style_set_blend_mode set_border_color lv.color lv_style_set_border_color set_border_opa int lv_style_set_border_opa set_border_post bool lv_style_set_border_post set_border_side int lv_style_set_border_side set_border_width int lv_style_set_border_width set_clip_corner bool lv_style_set_clip_corner set_color_filter_dsc lv.color_filter_dsc lv_style_set_color_filter_dsc set_color_filter_opa int lv_style_set_color_filter_opa set_flex_cross_place int lv_style_set_flex_cross_place set_flex_flow int lv_style_set_flex_flow set_flex_grow int lv_style_set_flex_grow set_flex_main_place int lv_style_set_flex_main_place set_flex_track_place int lv_style_set_flex_track_place set_grid_cell_column_pos int lv_style_set_grid_cell_column_pos set_grid_cell_column_span int lv_style_set_grid_cell_column_span set_grid_cell_row_pos int lv_style_set_grid_cell_row_pos set_grid_cell_row_span int lv_style_set_grid_cell_row_span set_grid_cell_x_align int lv_style_set_grid_cell_x_align set_grid_cell_y_align int lv_style_set_grid_cell_y_align set_grid_column_align int lv_style_set_grid_column_align set_grid_column_dsc_array lv.int_arr lv_style_set_grid_column_dsc_array set_grid_row_align int lv_style_set_grid_row_align set_grid_row_dsc_array lv.int_arr lv_style_set_grid_row_dsc_array set_height int lv_style_set_height set_image_opa int lv_style_set_image_opa set_image_recolor lv.color lv_style_set_image_recolor set_image_recolor_opa int lv_style_set_image_recolor_opa set_img_opa int lv_style_set_image_opa set_img_recolor lv.color lv_style_set_image_recolor set_img_recolor_opa int lv_style_set_image_recolor_opa set_layout int lv_style_set_layout set_length int lv_style_set_length set_line_color lv.color lv_style_set_line_color set_line_dash_gap int lv_style_set_line_dash_gap set_line_dash_width int lv_style_set_line_dash_width set_line_opa int lv_style_set_line_opa set_line_rounded bool lv_style_set_line_rounded set_line_width int lv_style_set_line_width set_margin_all int lv_style_set_margin_all set_margin_bottom int lv_style_set_margin_bottom set_margin_hor int lv_style_set_margin_hor set_margin_left int lv_style_set_margin_left set_margin_right int lv_style_set_margin_right set_margin_top int lv_style_set_margin_top set_margin_ver int lv_style_set_margin_ver set_max_height int lv_style_set_max_height set_max_width int lv_style_set_max_width set_min_height int lv_style_set_min_height set_min_width int lv_style_set_min_width set_opa int lv_style_set_opa set_opa_layered int lv_style_set_opa_layered set_outline_color lv.color lv_style_set_outline_color set_outline_opa int lv_style_set_outline_opa set_outline_pad int lv_style_set_outline_pad set_outline_width int lv_style_set_outline_width set_pad_all int lv_style_set_pad_all set_pad_bottom int lv_style_set_pad_bottom set_pad_column int lv_style_set_pad_column set_pad_gap int lv_style_set_pad_gap set_pad_hor int lv_style_set_pad_hor set_pad_left int lv_style_set_pad_left set_pad_radial int lv_style_set_pad_radial set_pad_right int lv_style_set_pad_right set_pad_row int lv_style_set_pad_row set_pad_top int lv_style_set_pad_top set_pad_ver int lv_style_set_pad_ver set_prop int, int lv_style_set_prop set_radial_offset int lv_style_set_radial_offset set_radius int lv_style_set_radius set_recolor lv.color lv_style_set_recolor set_recolor_opa int lv_style_set_recolor_opa set_rotary_sensitivity int lv_style_set_rotary_sensitivity set_shadow_color lv.color lv_style_set_shadow_color set_shadow_offset_x int lv_style_set_shadow_offset_x set_shadow_offset_y int lv_style_set_shadow_offset_y set_shadow_ofs_x int lv_style_set_shadow_offset_x set_shadow_ofs_y int lv_style_set_shadow_offset_y set_shadow_opa int lv_style_set_shadow_opa set_shadow_spread int lv_style_set_shadow_spread set_shadow_width int lv_style_set_shadow_width set_size int, int lv_style_set_size set_text_align int lv_style_set_text_align set_text_color lv.color lv_style_set_text_color set_text_decor int lv_style_set_text_decor set_text_font lv.font lv_style_set_text_font set_text_letter_space int lv_style_set_text_letter_space set_text_line_space int lv_style_set_text_line_space set_text_opa int lv_style_set_text_opa set_text_outline_stroke_color lv.color lv_style_set_text_outline_stroke_color set_text_outline_stroke_opa int lv_style_set_text_outline_stroke_opa set_text_outline_stroke_width int lv_style_set_text_outline_stroke_width set_transform_angle int lv_style_set_transform_rotation set_transform_height int lv_style_set_transform_height set_transform_pivot_x int lv_style_set_transform_pivot_x set_transform_pivot_y int lv_style_set_transform_pivot_y set_transform_rotation int lv_style_set_transform_rotation set_transform_scale int lv_style_set_transform_scale set_transform_scale_x int lv_style_set_transform_scale_x set_transform_scale_y int lv_style_set_transform_scale_y set_transform_skew_x int lv_style_set_transform_skew_x set_transform_skew_y int lv_style_set_transform_skew_y set_transform_width int lv_style_set_transform_width set_transform_zoom int lv_style_set_transform_scale set_transition lv.style_transition_dsc lv_style_set_transition set_translate_radial int lv_style_set_translate_radial set_translate_x int lv_style_set_translate_x set_translate_y int lv_style_set_translate_y set_width int lv_style_set_width set_x int lv_style_set_x set_y int lv_style_set_y"},{"location":"LVGL_API_Reference/#class-lvtimer","title":"class <code>lv.timer</code>","text":"Method Arguments Return type LVGL equivalent del lv_timer_delete delete lv_timer_delete get_next lv.timer lv_timer_get_next get_next lv.timer lv_timer_get_next get_paused bool lv_timer_get_paused get_user_data comptr lv_timer_get_user_data pause lv_timer_pause ready lv_timer_ready remove lv_timer_delete reset lv_timer_reset resume lv_timer_resume set_auto_delete bool lv_timer_set_auto_delete set_cb \\&lt;closure&gt; lv_timer_set_cb set_period int lv_timer_set_period set_repeat_count int lv_timer_set_repeat_count set_user_data \\&lt;any&gt; lv_timer_set_user_data"},{"location":"LVGL_API_Reference/#widgets","title":"Widgets","text":""},{"location":"LVGL_API_Reference/#widget-lvobj","title":"widget <code>lv.obj</code>","text":"Method Arguments Return type LVGL equivalent add_event_cb \\&lt;closure&gt;, int, \\&lt;any&gt; lv.event_dsc lv_obj_add_event_cb add_flag int lv_obj_add_flag add_state int lv_obj_add_state add_style lv.style, int lv_obj_add_style align int, int, int lv_obj_align align_to lv.obj, int, int, int lv_obj_align_to allocate_spec_attr lv_obj_allocate_spec_attr area_is_visible lv.area bool lv_obj_area_is_visible calculate_ext_draw_size int int lv_obj_calculate_ext_draw_size calculate_style_text_align int, string int lv_obj_calculate_style_text_align center lv_obj_center check_type lv.obj_class bool lv_obj_check_type class_init_obj lv_obj_class_init_obj clean lv_obj_clean clear_flag int lv_obj_remove_flag clear_state int lv_obj_remove_state del lv_obj_delete del_async lv_obj_delete_async delete lv_obj_delete delete_async lv_obj_delete_async delete_delayed int lv_obj_delete_delayed dump_tree lv_obj_dump_tree fade_in int, int lv_obj_fade_in fade_out int, int lv_obj_fade_out find_by_id \\&lt;any&gt; lv.obj lv_obj_find_by_id free_id lv_obj_free_id get_child int lv.obj lv_obj_get_child get_child_by_type int, lv.obj_class lv.obj lv_obj_get_child_by_type get_child_cnt int lv_obj_get_child_count get_child_count int lv_obj_get_child_count get_child_count_by_type lv.obj_class int lv_obj_get_child_count_by_type get_class lv.obj_class lv_obj_get_class get_click_area lv.area lv_obj_get_click_area get_content_coords lv.area lv_obj_get_content_coords get_content_height int lv_obj_get_content_height get_content_width int lv_obj_get_content_width get_coords lv.area lv_obj_get_coords get_disp lv.display lv_obj_get_display get_display lv.display lv_obj_get_display get_event_count int lv_obj_get_event_count get_event_dsc int lv.event_dsc lv_obj_get_event_dsc get_group lv.group lv_obj_get_group get_height int lv_obj_get_height get_id comptr lv_obj_get_id get_index int lv_obj_get_index get_index_by_type lv.obj_class int lv_obj_get_index_by_type get_parent lv.obj lv_obj_get_parent get_screen lv.obj lv_obj_get_screen get_scroll_bottom int lv_obj_get_scroll_bottom get_scroll_dir int lv_obj_get_scroll_dir get_scroll_end comptr lv_obj_get_scroll_end get_scroll_left int lv_obj_get_scroll_left get_scroll_right int lv_obj_get_scroll_right get_scroll_snap_x int lv_obj_get_scroll_snap_x get_scroll_snap_y int lv_obj_get_scroll_snap_y get_scroll_top int lv_obj_get_scroll_top get_scroll_x int lv_obj_get_scroll_x get_scroll_y int lv_obj_get_scroll_y get_scrollbar_area lv.area, lv.area lv_obj_get_scrollbar_area get_scrollbar_mode int lv_obj_get_scrollbar_mode get_self_height int lv_obj_get_self_height get_self_width int lv_obj_get_self_width get_sibling int lv.obj lv_obj_get_sibling get_sibling_by_type int, lv.obj_class lv.obj lv_obj_get_sibling_by_type get_state int lv_obj_get_state get_style_align int int lv_obj_get_style_align get_style_anim int lv.anim lv_obj_get_style_anim get_style_anim_duration int int lv_obj_get_style_anim_duration get_style_anim_time int int lv_obj_get_style_anim_duration get_style_arc_color int lv.color lv_obj_get_style_arc_color get_style_arc_color_filtered int lv.color lv_obj_get_style_arc_color_filtered get_style_arc_image_src int comptr lv_obj_get_style_arc_image_src get_style_arc_opa int int lv_obj_get_style_arc_opa get_style_arc_rounded int bool lv_obj_get_style_arc_rounded get_style_arc_width int int lv_obj_get_style_arc_width get_style_base_dir int int lv_obj_get_style_base_dir get_style_bg_color int lv.color lv_obj_get_style_bg_color get_style_bg_color_filtered int lv.color lv_obj_get_style_bg_color_filtered get_style_bg_grad int lv.grad_dsc lv_obj_get_style_bg_grad get_style_bg_grad_color int lv.color lv_obj_get_style_bg_grad_color get_style_bg_grad_color_filtered int lv.color lv_obj_get_style_bg_grad_color_filtered get_style_bg_grad_dir int int lv_obj_get_style_bg_grad_dir get_style_bg_grad_opa int int lv_obj_get_style_bg_grad_opa get_style_bg_grad_stop int int lv_obj_get_style_bg_grad_stop get_style_bg_image_opa int int lv_obj_get_style_bg_image_opa get_style_bg_image_recolor int lv.color lv_obj_get_style_bg_image_recolor get_style_bg_image_recolor_filtered int lv.color lv_obj_get_style_bg_image_recolor_filtered get_style_bg_image_recolor_opa int int lv_obj_get_style_bg_image_recolor_opa get_style_bg_image_src int comptr lv_obj_get_style_bg_image_src get_style_bg_image_tiled int bool lv_obj_get_style_bg_image_tiled get_style_bg_main_opa int int lv_obj_get_style_bg_main_opa get_style_bg_main_stop int int lv_obj_get_style_bg_main_stop get_style_bg_opa int int lv_obj_get_style_bg_opa get_style_bitmap_mask_src int comptr lv_obj_get_style_bitmap_mask_src get_style_blend_mode int int lv_obj_get_style_blend_mode get_style_border_color int lv.color lv_obj_get_style_border_color get_style_border_color_filtered int lv.color lv_obj_get_style_border_color_filtered get_style_border_opa int int lv_obj_get_style_border_opa get_style_border_post int bool lv_obj_get_style_border_post get_style_border_side int int lv_obj_get_style_border_side get_style_border_width int int lv_obj_get_style_border_width get_style_clip_corner int bool lv_obj_get_style_clip_corner get_style_color_filter_dsc int lv.color_filter_dsc lv_obj_get_style_color_filter_dsc get_style_color_filter_opa int int lv_obj_get_style_color_filter_opa get_style_flex_cross_place int int lv_obj_get_style_flex_cross_place get_style_flex_flow int int lv_obj_get_style_flex_flow get_style_flex_grow int int lv_obj_get_style_flex_grow get_style_flex_main_place int int lv_obj_get_style_flex_main_place get_style_flex_track_place int int lv_obj_get_style_flex_track_place get_style_grid_cell_column_pos int int lv_obj_get_style_grid_cell_column_pos get_style_grid_cell_column_span int int lv_obj_get_style_grid_cell_column_span get_style_grid_cell_row_pos int int lv_obj_get_style_grid_cell_row_pos get_style_grid_cell_row_span int int lv_obj_get_style_grid_cell_row_span get_style_grid_cell_x_align int int lv_obj_get_style_grid_cell_x_align get_style_grid_cell_y_align int int lv_obj_get_style_grid_cell_y_align get_style_grid_column_align int int lv_obj_get_style_grid_column_align get_style_grid_column_dsc_array int lv.int_arr lv_obj_get_style_grid_column_dsc_array get_style_grid_row_align int int lv_obj_get_style_grid_row_align get_style_grid_row_dsc_array int lv.int_arr lv_obj_get_style_grid_row_dsc_array get_style_height int int lv_obj_get_style_height get_style_image_opa int int lv_obj_get_style_image_opa get_style_image_recolor int lv.color lv_obj_get_style_image_recolor get_style_image_recolor_filtered int lv.color lv_obj_get_style_image_recolor_filtered get_style_image_recolor_opa int int lv_obj_get_style_image_recolor_opa get_style_img_opa int int lv_obj_get_style_image_opa get_style_img_recolor int lv.color lv_obj_get_style_image_recolor get_style_img_recolor_filtered int lv.color lv_obj_get_style_image_recolor_filtered get_style_img_recolor_opa int int lv_obj_get_style_image_recolor_opa get_style_layout int int lv_obj_get_style_layout get_style_length int int lv_obj_get_style_length get_style_line_color int lv.color lv_obj_get_style_line_color get_style_line_color_filtered int lv.color lv_obj_get_style_line_color_filtered get_style_line_dash_gap int int lv_obj_get_style_line_dash_gap get_style_line_dash_width int int lv_obj_get_style_line_dash_width get_style_line_opa int int lv_obj_get_style_line_opa get_style_line_rounded int bool lv_obj_get_style_line_rounded get_style_line_width int int lv_obj_get_style_line_width get_style_margin_bottom int int lv_obj_get_style_margin_bottom get_style_margin_left int int lv_obj_get_style_margin_left get_style_margin_right int int lv_obj_get_style_margin_right get_style_margin_top int int lv_obj_get_style_margin_top get_style_max_height int int lv_obj_get_style_max_height get_style_max_width int int lv_obj_get_style_max_width get_style_min_height int int lv_obj_get_style_min_height get_style_min_width int int lv_obj_get_style_min_width get_style_opa int int lv_obj_get_style_opa get_style_opa_layered int int lv_obj_get_style_opa_layered get_style_opa_recursive int int lv_obj_get_style_opa_recursive get_style_outline_color int lv.color lv_obj_get_style_outline_color get_style_outline_color_filtered int lv.color lv_obj_get_style_outline_color_filtered get_style_outline_opa int int lv_obj_get_style_outline_opa get_style_outline_pad int int lv_obj_get_style_outline_pad get_style_outline_width int int lv_obj_get_style_outline_width get_style_pad_bottom int int lv_obj_get_style_pad_bottom get_style_pad_column int int lv_obj_get_style_pad_column get_style_pad_left int int lv_obj_get_style_pad_left get_style_pad_radial int int lv_obj_get_style_pad_radial get_style_pad_right int int lv_obj_get_style_pad_right get_style_pad_row int int lv_obj_get_style_pad_row get_style_pad_top int int lv_obj_get_style_pad_top get_style_prop int, int int lv_obj_get_style_prop get_style_radial_offset int int lv_obj_get_style_radial_offset get_style_radius int int lv_obj_get_style_radius get_style_recolor int lv.color lv_obj_get_style_recolor get_style_recolor_opa int int lv_obj_get_style_recolor_opa get_style_recolor_recursive int int lv_obj_get_style_recolor_recursive get_style_rotary_sensitivity int int lv_obj_get_style_rotary_sensitivity get_style_shadow_color int lv.color lv_obj_get_style_shadow_color get_style_shadow_color_filtered int lv.color lv_obj_get_style_shadow_color_filtered get_style_shadow_offset_x int int lv_obj_get_style_shadow_offset_x get_style_shadow_offset_y int int lv_obj_get_style_shadow_offset_y get_style_shadow_ofs_x int int lv_obj_get_style_shadow_offset_x get_style_shadow_ofs_y int int lv_obj_get_style_shadow_offset_y get_style_shadow_opa int int lv_obj_get_style_shadow_opa get_style_shadow_spread int int lv_obj_get_style_shadow_spread get_style_shadow_width int int lv_obj_get_style_shadow_width get_style_space_bottom int int lv_obj_get_style_space_bottom get_style_space_left int int lv_obj_get_style_space_left get_style_space_right int int lv_obj_get_style_space_right get_style_space_top int int lv_obj_get_style_space_top get_style_text_align int int lv_obj_get_style_text_align get_style_text_color int lv.color lv_obj_get_style_text_color get_style_text_color_filtered int lv.color lv_obj_get_style_text_color_filtered get_style_text_decor int int lv_obj_get_style_text_decor get_style_text_font int lv.font lv_obj_get_style_text_font get_style_text_letter_space int int lv_obj_get_style_text_letter_space get_style_text_line_space int int lv_obj_get_style_text_line_space get_style_text_opa int int lv_obj_get_style_text_opa get_style_text_outline_stroke_color int lv.color lv_obj_get_style_text_outline_stroke_color get_style_text_outline_stroke_color_filtered int lv.color lv_obj_get_style_text_outline_stroke_color_filtered get_style_text_outline_stroke_opa int int lv_obj_get_style_text_outline_stroke_opa get_style_text_outline_stroke_width int int lv_obj_get_style_text_outline_stroke_width get_style_transform_angle int int lv_obj_get_style_transform_rotation get_style_transform_height int int lv_obj_get_style_transform_height get_style_transform_pivot_x int int lv_obj_get_style_transform_pivot_x get_style_transform_pivot_y int int lv_obj_get_style_transform_pivot_y get_style_transform_rotation int int lv_obj_get_style_transform_rotation get_style_transform_scale_x int int lv_obj_get_style_transform_scale_x get_style_transform_scale_x_safe int int lv_obj_get_style_transform_scale_x_safe get_style_transform_scale_y int int lv_obj_get_style_transform_scale_y get_style_transform_scale_y_safe int int lv_obj_get_style_transform_scale_y_safe get_style_transform_skew_x int int lv_obj_get_style_transform_skew_x get_style_transform_skew_y int int lv_obj_get_style_transform_skew_y get_style_transform_width int int lv_obj_get_style_transform_width get_style_transition int lv.style_transition_dsc lv_obj_get_style_transition get_style_translate_radial int int lv_obj_get_style_translate_radial get_style_translate_x int int lv_obj_get_style_translate_x get_style_translate_y int int lv_obj_get_style_translate_y get_style_width int int lv_obj_get_style_width get_style_x int int lv_obj_get_style_x get_style_y int int lv_obj_get_style_y get_transformed_area lv.area, int lv_obj_get_transformed_area get_user_data comptr lv_obj_get_user_data get_width int lv_obj_get_width get_width int lv_obj_get_width get_x int lv_obj_get_x get_x2 int lv_obj_get_x2 get_x_aligned int lv_obj_get_x_aligned get_y int lv_obj_get_y get_y2 int lv_obj_get_y2 get_y_aligned int lv_obj_get_y_aligned has_class lv.obj_class bool lv_obj_has_class has_flag int bool lv_obj_has_flag has_flag_any int bool lv_obj_has_flag_any has_state int bool lv_obj_has_state has_style_prop int, int bool lv_obj_has_style_prop hit_test comptr bool lv_obj_hit_test init_draw_arc_dsc int, lv.draw_arc_dsc lv_obj_init_draw_arc_dsc init_draw_image_dsc int, lv.draw_image_dsc lv_obj_init_draw_image_dsc init_draw_label_dsc int, lv.draw_label_dsc lv_obj_init_draw_label_dsc init_draw_line_dsc int, lv.draw_line_dsc lv_obj_init_draw_line_dsc init_draw_rect_dsc int, lv.draw_rect_dsc lv_obj_init_draw_rect_dsc invalidate lv_obj_invalidate invalidate_area lv.area lv_obj_invalidate_area is_editable bool lv_obj_is_editable is_group_def bool lv_obj_is_group_def is_layout_positioned bool lv_obj_is_layout_positioned is_scrolling bool lv_obj_is_scrolling is_valid bool lv_obj_is_valid is_visible bool lv_obj_is_visible mark_layout_as_dirty lv_obj_mark_layout_as_dirty move_background lv_obj_move_background move_children_by int, int, bool lv_obj_move_children_by move_foreground lv_obj_move_foreground move_to int, int lv_obj_move_to move_to_index int lv_obj_move_to_index readjust_scroll int lv_obj_readjust_scroll refr_pos lv_obj_refr_pos refr_size bool lv_obj_refr_size refresh_ext_draw_size lv_obj_refresh_ext_draw_size refresh_self_size bool lv_obj_refresh_self_size refresh_style int, int lv_obj_refresh_style remove lv_obj_delete remove_event int bool lv_obj_remove_event remove_event_cb \\&lt;any&gt; int lv_obj_remove_event_cb remove_event_cb_with_user_data \\&lt;any&gt;, \\&lt;any&gt; int lv_obj_remove_event_cb_with_user_data remove_event_dsc lv.event_dsc bool lv_obj_remove_event_dsc remove_flag int lv_obj_remove_flag remove_local_style_prop int, int bool lv_obj_remove_local_style_prop remove_state int lv_obj_remove_state remove_style lv.style, int lv_obj_remove_style remove_style_all lv_obj_remove_style_all replace_style lv.style, lv.style, int bool lv_obj_replace_style reset_transform lv_obj_reset_transform scroll_by int, int, int lv_obj_scroll_by scroll_by_bounded int, int, int lv_obj_scroll_by_bounded scroll_to int, int, int lv_obj_scroll_to scroll_to_view int lv_obj_scroll_to_view scroll_to_view_recursive int lv_obj_scroll_to_view_recursive scroll_to_x int, int lv_obj_scroll_to_x scroll_to_y int, int lv_obj_scroll_to_y scrollbar_invalidate lv_obj_scrollbar_invalidate send_event int, \\&lt;any&gt; int lv_obj_send_event send_event int, \\&lt;any&gt; int lv_obj_send_event set_align int lv_obj_set_align set_content_height int lv_obj_set_content_height set_content_width int lv_obj_set_content_width set_ext_click_area int lv_obj_set_ext_click_area set_flag int, bool lv_obj_set_flag set_flex_align int, int, int lv_obj_set_flex_align set_flex_flow int lv_obj_set_flex_flow set_flex_grow int lv_obj_set_flex_grow set_grid_align int, int lv_obj_set_grid_align set_grid_cell int, int, int, int, int, int lv_obj_set_grid_cell set_grid_dsc_array lv.int_arr, lv.int_arr lv_obj_set_grid_dsc_array set_height int lv_obj_set_height set_id \\&lt;any&gt; lv_obj_set_id set_layout int lv_obj_set_layout set_local_style_prop int, int, int lv_obj_set_local_style_prop set_parent lv.obj lv_obj_set_parent set_pos int, int lv_obj_set_pos set_scroll_dir int lv_obj_set_scroll_dir set_scroll_snap_x int lv_obj_set_scroll_snap_x set_scroll_snap_y int lv_obj_set_scroll_snap_y set_scrollbar_mode int lv_obj_set_scrollbar_mode set_size int, int lv_obj_set_size set_state int, bool lv_obj_set_state set_style_align int, int lv_obj_set_style_align set_style_anim lv.anim, int lv_obj_set_style_anim set_style_anim_duration int, int lv_obj_set_style_anim_duration set_style_anim_time int, int lv_obj_set_style_anim_duration set_style_arc_color lv.color, int lv_obj_set_style_arc_color set_style_arc_image_src \\&lt;any&gt;, int lv_obj_set_style_arc_image_src set_style_arc_opa int, int lv_obj_set_style_arc_opa set_style_arc_rounded bool, int lv_obj_set_style_arc_rounded set_style_arc_width int, int lv_obj_set_style_arc_width set_style_base_dir int, int lv_obj_set_style_base_dir set_style_bg_color lv.color, int lv_obj_set_style_bg_color set_style_bg_grad lv.grad_dsc, int lv_obj_set_style_bg_grad set_style_bg_grad_color lv.color, int lv_obj_set_style_bg_grad_color set_style_bg_grad_dir int, int lv_obj_set_style_bg_grad_dir set_style_bg_grad_opa int, int lv_obj_set_style_bg_grad_opa set_style_bg_grad_stop int, int lv_obj_set_style_bg_grad_stop set_style_bg_image_opa int, int lv_obj_set_style_bg_image_opa set_style_bg_image_recolor lv.color, int lv_obj_set_style_bg_image_recolor set_style_bg_image_recolor_opa int, int lv_obj_set_style_bg_image_recolor_opa set_style_bg_image_src \\&lt;any&gt;, int lv_obj_set_style_bg_image_src set_style_bg_image_tiled bool, int lv_obj_set_style_bg_image_tiled set_style_bg_main_opa int, int lv_obj_set_style_bg_main_opa set_style_bg_main_stop int, int lv_obj_set_style_bg_main_stop set_style_bg_opa int, int lv_obj_set_style_bg_opa set_style_bitmap_mask_src \\&lt;any&gt;, int lv_obj_set_style_bitmap_mask_src set_style_blend_mode int, int lv_obj_set_style_blend_mode set_style_border_color lv.color, int lv_obj_set_style_border_color set_style_border_opa int, int lv_obj_set_style_border_opa set_style_border_post bool, int lv_obj_set_style_border_post set_style_border_side int, int lv_obj_set_style_border_side set_style_border_width int, int lv_obj_set_style_border_width set_style_clip_corner bool, int lv_obj_set_style_clip_corner set_style_color_filter_dsc lv.color_filter_dsc, int lv_obj_set_style_color_filter_dsc set_style_color_filter_opa int, int lv_obj_set_style_color_filter_opa set_style_flex_cross_place int, int lv_obj_set_style_flex_cross_place set_style_flex_flow int, int lv_obj_set_style_flex_flow set_style_flex_grow int, int lv_obj_set_style_flex_grow set_style_flex_main_place int, int lv_obj_set_style_flex_main_place set_style_flex_track_place int, int lv_obj_set_style_flex_track_place set_style_grid_cell_column_pos int, int lv_obj_set_style_grid_cell_column_pos set_style_grid_cell_column_span int, int lv_obj_set_style_grid_cell_column_span set_style_grid_cell_row_pos int, int lv_obj_set_style_grid_cell_row_pos set_style_grid_cell_row_span int, int lv_obj_set_style_grid_cell_row_span set_style_grid_cell_x_align int, int lv_obj_set_style_grid_cell_x_align set_style_grid_cell_y_align int, int lv_obj_set_style_grid_cell_y_align set_style_grid_column_align int, int lv_obj_set_style_grid_column_align set_style_grid_column_dsc_array lv.int_arr, int lv_obj_set_style_grid_column_dsc_array set_style_grid_row_align int, int lv_obj_set_style_grid_row_align set_style_grid_row_dsc_array lv.int_arr, int lv_obj_set_style_grid_row_dsc_array set_style_height int, int lv_obj_set_style_height set_style_image_opa int, int lv_obj_set_style_image_opa set_style_image_recolor lv.color, int lv_obj_set_style_image_recolor set_style_image_recolor_opa int, int lv_obj_set_style_image_recolor_opa set_style_img_opa int, int lv_obj_set_style_image_opa set_style_img_recolor lv.color, int lv_obj_set_style_image_recolor set_style_img_recolor_opa int, int lv_obj_set_style_image_recolor_opa set_style_layout int, int lv_obj_set_style_layout set_style_length int, int lv_obj_set_style_length set_style_line_color lv.color, int lv_obj_set_style_line_color set_style_line_dash_gap int, int lv_obj_set_style_line_dash_gap set_style_line_dash_width int, int lv_obj_set_style_line_dash_width set_style_line_opa int, int lv_obj_set_style_line_opa set_style_line_rounded bool, int lv_obj_set_style_line_rounded set_style_line_width int, int lv_obj_set_style_line_width set_style_margin_all int, int lv_obj_set_style_margin_all set_style_margin_bottom int, int lv_obj_set_style_margin_bottom set_style_margin_hor int, int lv_obj_set_style_margin_hor set_style_margin_left int, int lv_obj_set_style_margin_left set_style_margin_right int, int lv_obj_set_style_margin_right set_style_margin_top int, int lv_obj_set_style_margin_top set_style_margin_ver int, int lv_obj_set_style_margin_ver set_style_max_height int, int lv_obj_set_style_max_height set_style_max_width int, int lv_obj_set_style_max_width set_style_min_height int, int lv_obj_set_style_min_height set_style_min_width int, int lv_obj_set_style_min_width set_style_opa int, int lv_obj_set_style_opa set_style_opa_layered int, int lv_obj_set_style_opa_layered set_style_outline_color lv.color, int lv_obj_set_style_outline_color set_style_outline_opa int, int lv_obj_set_style_outline_opa set_style_outline_pad int, int lv_obj_set_style_outline_pad set_style_outline_width int, int lv_obj_set_style_outline_width set_style_pad_all int, int lv_obj_set_style_pad_all set_style_pad_bottom int, int lv_obj_set_style_pad_bottom set_style_pad_column int, int lv_obj_set_style_pad_column set_style_pad_gap int, int lv_obj_set_style_pad_gap set_style_pad_hor int, int lv_obj_set_style_pad_hor set_style_pad_left int, int lv_obj_set_style_pad_left set_style_pad_radial int, int lv_obj_set_style_pad_radial set_style_pad_right int, int lv_obj_set_style_pad_right set_style_pad_row int, int lv_obj_set_style_pad_row set_style_pad_top int, int lv_obj_set_style_pad_top set_style_pad_ver int, int lv_obj_set_style_pad_ver set_style_radial_offset int, int lv_obj_set_style_radial_offset set_style_radius int, int lv_obj_set_style_radius set_style_recolor lv.color, int lv_obj_set_style_recolor set_style_recolor_opa int, int lv_obj_set_style_recolor_opa set_style_rotary_sensitivity int, int lv_obj_set_style_rotary_sensitivity set_style_shadow_color lv.color, int lv_obj_set_style_shadow_color set_style_shadow_offset_x int, int lv_obj_set_style_shadow_offset_x set_style_shadow_offset_y int, int lv_obj_set_style_shadow_offset_y set_style_shadow_ofs_x int, int lv_obj_set_style_shadow_offset_x set_style_shadow_ofs_y int, int lv_obj_set_style_shadow_offset_y set_style_shadow_opa int, int lv_obj_set_style_shadow_opa set_style_shadow_spread int, int lv_obj_set_style_shadow_spread set_style_shadow_width int, int lv_obj_set_style_shadow_width set_style_size int, int, int lv_obj_set_style_size set_style_text_align int, int lv_obj_set_style_text_align set_style_text_color lv.color, int lv_obj_set_style_text_color set_style_text_decor int, int lv_obj_set_style_text_decor set_style_text_font lv.font, int lv_obj_set_style_text_font set_style_text_letter_space int, int lv_obj_set_style_text_letter_space set_style_text_line_space int, int lv_obj_set_style_text_line_space set_style_text_opa int, int lv_obj_set_style_text_opa set_style_text_outline_stroke_color lv.color, int lv_obj_set_style_text_outline_stroke_color set_style_text_outline_stroke_opa int, int lv_obj_set_style_text_outline_stroke_opa set_style_text_outline_stroke_width int, int lv_obj_set_style_text_outline_stroke_width set_style_transform_angle int, int lv_obj_set_style_transform_rotation set_style_transform_height int, int lv_obj_set_style_transform_height set_style_transform_pivot_x int, int lv_obj_set_style_transform_pivot_x set_style_transform_pivot_y int, int lv_obj_set_style_transform_pivot_y set_style_transform_rotation int, int lv_obj_set_style_transform_rotation set_style_transform_scale int, int lv_obj_set_style_transform_scale set_style_transform_scale_x int, int lv_obj_set_style_transform_scale_x set_style_transform_scale_y int, int lv_obj_set_style_transform_scale_y set_style_transform_skew_x int, int lv_obj_set_style_transform_skew_x set_style_transform_skew_y int, int lv_obj_set_style_transform_skew_y set_style_transform_width int, int lv_obj_set_style_transform_width set_style_transform_zoom int, int lv_obj_set_style_transform_scale set_style_transition lv.style_transition_dsc, int lv_obj_set_style_transition set_style_translate_radial int, int lv_obj_set_style_translate_radial set_style_translate_x int, int lv_obj_set_style_translate_x set_style_translate_y int, int lv_obj_set_style_translate_y set_style_width int, int lv_obj_set_style_width set_style_x int, int lv_obj_set_style_x set_style_y int, int lv_obj_set_style_y set_user_data \\&lt;any&gt; lv_obj_set_user_data set_width int lv_obj_set_width set_x int lv_obj_set_x set_y int lv_obj_set_y stop_scroll_anim lv_obj_stop_scroll_anim stringify_id comptr, int string lv_obj_stringify_id style_apply_color_filter int, int int lv_obj_style_apply_color_filter style_apply_recolor int, int int lv_obj_style_apply_recolor swap lv.obj lv_obj_swap transform_point comptr, int lv_obj_transform_point transform_point_array lv.point_arr, int, int lv_obj_transform_point_array update_layout lv_obj_update_layout update_snap int lv_obj_update_snap"},{"location":"LVGL_API_Reference/#widget-lvarc","title":"widget <code>lv.arc</code>","text":"Method Arguments Return type LVGL equivalent align_obj_to_angle lv.obj, int lv_arc_align_obj_to_angle get_angle int lv_arc_get_rotation get_angle_end int lv_arc_get_angle_end get_angle_start int lv_arc_get_angle_start get_bg_angle_end int lv_arc_get_bg_angle_end get_bg_angle_start int lv_arc_get_bg_angle_start get_knob_offset int lv_arc_get_knob_offset get_max_value int lv_arc_get_max_value get_min_value int lv_arc_get_min_value get_mode int lv_arc_get_mode get_rotation int lv_arc_get_rotation get_rotation int lv_arc_get_rotation get_value int lv_arc_get_value rotate_obj_to_angle lv.obj, int lv_arc_rotate_obj_to_angle set_angle int lv_arc_set_rotation set_angles int, int lv_arc_set_angles set_bg_angles int, int lv_arc_set_bg_angles set_bg_end_angle int lv_arc_set_bg_end_angle set_bg_start_angle int lv_arc_set_bg_start_angle set_change_rate int lv_arc_set_change_rate set_end_angle int lv_arc_set_end_angle set_knob_offset int lv_arc_set_knob_offset set_mode int lv_arc_set_mode set_range int, int lv_arc_set_range set_rotation int lv_arc_set_rotation set_rotation int lv_arc_set_rotation set_start_angle int lv_arc_set_start_angle set_value int lv_arc_set_value"},{"location":"LVGL_API_Reference/#widget-lvbar","title":"widget <code>lv.bar</code>","text":"Method Arguments Return type LVGL equivalent get_indic_area lv.area lv_bar_get_indic_area get_max_value int lv_bar_get_max_value get_min_value int lv_bar_get_min_value get_mode int lv_bar_get_mode get_orientation int lv_bar_get_orientation get_start_value int lv_bar_get_start_value get_value int lv_bar_get_value is_symmetrical bool lv_bar_is_symmetrical set_mode int lv_bar_set_mode set_orientation int lv_bar_set_orientation set_range int, int lv_bar_set_range set_start_value int, int lv_bar_set_start_value set_value int, int lv_bar_set_value"},{"location":"LVGL_API_Reference/#widget-lvbutton","title":"widget <code>lv.button</code>","text":"Method Arguments Return type LVGL equivalent"},{"location":"LVGL_API_Reference/#widget-lvbuttonmatrix","title":"widget <code>lv.buttonmatrix</code>","text":"Method Arguments Return type LVGL equivalent _btn_text int string lv_buttonmatrix_get_button_text clear_button_ctrl int, int lv_buttonmatrix_clear_button_ctrl clear_button_ctrl_all int lv_buttonmatrix_clear_button_ctrl_all get_button_text int string lv_buttonmatrix_get_button_text get_map comptr lv_buttonmatrix_get_map get_one_checked bool lv_buttonmatrix_get_one_checked get_selected_button int lv_buttonmatrix_get_selected_button has_button_ctrl int, int bool lv_buttonmatrix_has_button_ctrl set_button_ctrl int, int lv_buttonmatrix_set_button_ctrl set_button_ctrl_all int lv_buttonmatrix_set_button_ctrl_all set_button_width int, int lv_buttonmatrix_set_button_width set_map lv.str_arr lv_buttonmatrix_set_map set_one_checked bool lv_buttonmatrix_set_one_checked set_selected_button int lv_buttonmatrix_set_selected_button"},{"location":"LVGL_API_Reference/#widget-lvcanvas","title":"widget <code>lv.canvas</code>","text":"Method Arguments Return type LVGL equivalent fill_bg lv.color, int lv_canvas_fill_bg finish_layer lv.layer lv_canvas_finish_layer get_buf comptr lv_canvas_get_buf get_image lv.image_dsc lv_canvas_get_image get_px int, int int lv_canvas_get_px init_layer lv.layer lv_canvas_init_layer set_buffer \\&lt;any&gt;, int, int, int lv_canvas_set_buffer set_palette int, int lv_canvas_set_palette set_px int, int, lv.color, int lv_canvas_set_px"},{"location":"LVGL_API_Reference/#widget-lvcheckbox","title":"widget <code>lv.checkbox</code>","text":"Method Arguments Return type LVGL equivalent get_text string lv_checkbox_get_text set_text string lv_checkbox_set_text set_text_static string lv_checkbox_set_text_static"},{"location":"LVGL_API_Reference/#widget-lvdropdown","title":"widget <code>lv.dropdown</code>","text":"Method Arguments Return type LVGL equivalent add_option string, int lv_dropdown_add_option clear_options lv_dropdown_clear_options close lv_dropdown_close get_dir int lv_dropdown_get_dir get_list lv.obj lv_dropdown_get_list get_option_cnt int lv_dropdown_get_option_count get_option_count int lv_dropdown_get_option_count get_option_index string int lv_dropdown_get_option_index get_options string lv_dropdown_get_options get_selected int lv_dropdown_get_selected get_selected_highlight bool lv_dropdown_get_selected_highlight get_selected_str comptr, int lv_dropdown_get_selected_str get_symbol string lv_dropdown_get_symbol get_text string lv_dropdown_get_text is_open bool lv_dropdown_is_open open lv_dropdown_open set_dir int lv_dropdown_set_dir set_options string lv_dropdown_set_options set_options_static string lv_dropdown_set_options_static set_selected int lv_dropdown_set_selected set_selected_highlight bool lv_dropdown_set_selected_highlight set_symbol \\&lt;any&gt; lv_dropdown_set_symbol set_text string lv_dropdown_set_text"},{"location":"LVGL_API_Reference/#widget-lvimage","title":"widget <code>lv.image</code>","text":"Method Arguments Return type LVGL equivalent get_angle int lv_image_get_rotation get_antialias bool lv_image_get_antialias get_bitmap_map_src lv.image_dsc lv_image_get_bitmap_map_src get_blend_mode int lv_image_get_blend_mode get_inner_align int lv_image_get_inner_align get_offset_x int lv_image_get_offset_x get_offset_x int lv_image_get_offset_x get_offset_y int lv_image_get_offset_y get_offset_y int lv_image_get_offset_y get_pivot comptr lv_image_get_pivot get_rotation int lv_image_get_rotation get_rotation int lv_image_get_rotation get_scale int lv_image_get_scale get_scale_x int lv_image_get_scale_x get_scale_y int lv_image_get_scale_y get_src comptr lv_image_get_src get_src_height int lv_image_get_src_height get_src_width int lv_image_get_src_width get_transformed_height int lv_image_get_transformed_height get_transformed_width int lv_image_get_transformed_width get_zoom int lv_image_get_scale set_angle int lv_image_set_rotation set_antialias bool lv_image_set_antialias set_bitmap_map_src lv.image_dsc lv_image_set_bitmap_map_src set_blend_mode int lv_image_set_blend_mode set_inner_align int lv_image_set_inner_align set_offset_x int lv_image_set_offset_x set_offset_y int lv_image_set_offset_y set_pivot int, int lv_image_set_pivot set_rotation int lv_image_set_rotation set_rotation int lv_image_set_rotation set_scale int lv_image_set_scale set_scale_x int lv_image_set_scale_x set_scale_y int lv_image_set_scale_y set_src \\&lt;any&gt; lv_image_set_src set_tasmota_logo lv_image_set_tasmota_logo set_tasmota_logo36 lv_image_set_tasmota_logo36 set_zoom int lv_image_set_scale"},{"location":"LVGL_API_Reference/#widget-lvlabel","title":"widget <code>lv.label</code>","text":"Method Arguments Return type LVGL equivalent cut_text int, int lv_label_cut_text get_letter_on comptr, bool int lv_label_get_letter_on get_letter_pos int, comptr lv_label_get_letter_pos get_long_mode int lv_label_get_long_mode get_recolor bool lv_label_get_recolor get_text string lv_label_get_text get_text_selection_end int lv_label_get_text_selection_end get_text_selection_start int lv_label_get_text_selection_start ins_text int, string lv_label_ins_text is_char_under_pos comptr bool lv_label_is_char_under_pos set_long_mode int lv_label_set_long_mode set_recolor bool lv_label_set_recolor set_text string lv_label_set_text set_text_fmt string, [\\&lt;any&gt;] lv_label_set_text_fmt set_text_selection_end int lv_label_set_text_selection_end set_text_selection_start int lv_label_set_text_selection_start set_text_static string lv_label_set_text_static"},{"location":"LVGL_API_Reference/#widget-lvline","title":"widget <code>lv.line</code>","text":"Method Arguments Return type LVGL equivalent get_point_count int lv_line_get_point_count get_points lv.point_precise lv_line_get_points get_points_mutable lv.point_precise lv_line_get_points_mutable get_y_invert bool lv_line_get_y_invert is_point_array_mutable bool lv_line_is_point_array_mutable set_points lv.point_arr, int lv_line_set_points set_points_mutable lv.point_arr, int lv_line_set_points_mutable set_y_invert bool lv_line_set_y_invert"},{"location":"LVGL_API_Reference/#widget-lvroller","title":"widget <code>lv.roller</code>","text":"Method Arguments Return type LVGL equivalent get_option_cnt int lv_roller_get_option_count get_option_count int lv_roller_get_option_count get_options string lv_roller_get_options get_selected int lv_roller_get_selected get_selected_str comptr, int lv_roller_get_selected_str set_options string, int lv_roller_set_options set_selected int, int lv_roller_set_selected set_selected_str string, int bool lv_roller_set_selected_str set_visible_row_cnt int lv_roller_set_visible_row_count set_visible_row_count int lv_roller_set_visible_row_count"},{"location":"LVGL_API_Reference/#widget-lvslider","title":"widget <code>lv.slider</code>","text":"Method Arguments Return type LVGL equivalent get_left_value int lv_slider_get_left_value get_max_value int lv_slider_get_max_value get_min_value int lv_slider_get_min_value get_mode int lv_slider_get_mode get_orientation int lv_slider_get_orientation get_value int lv_slider_get_value is_dragged bool lv_slider_is_dragged is_symmetrical bool lv_slider_is_symmetrical set_mode int lv_slider_set_mode set_orientation int lv_slider_set_orientation set_range int, int lv_slider_set_range set_start_value int, int lv_slider_set_start_value set_value int, int lv_slider_set_value"},{"location":"LVGL_API_Reference/#widget-lvswitch","title":"widget <code>lv.switch</code>","text":"Method Arguments Return type LVGL equivalent get_orientation int lv_switch_get_orientation set_orientation int lv_switch_set_orientation"},{"location":"LVGL_API_Reference/#widget-lvtable","title":"widget <code>lv.table</code>","text":"Method Arguments Return type LVGL equivalent clear_cell_ctrl int, int, int lv_table_clear_cell_ctrl get_cell_user_data int, int comptr lv_table_get_cell_user_data get_cell_value int, int string lv_table_get_cell_value get_col_cnt int lv_table_get_column_count get_col_width int int lv_table_get_column_width get_column_count int lv_table_get_column_count get_column_width int int lv_table_get_column_width get_row_cnt int lv_table_get_row_count get_row_count int lv_table_get_row_count get_selected_cell lv.int_arr, lv.int_arr lv_table_get_selected_cell has_cell_ctrl int, int, int bool lv_table_has_cell_ctrl set_cell_ctrl int, int, int lv_table_set_cell_ctrl set_cell_user_data int, int, \\&lt;any&gt; lv_table_set_cell_user_data set_cell_value int, int, string lv_table_set_cell_value set_cell_value_fmt int, int, string, [\\&lt;any&gt;] lv_table_set_cell_value_fmt set_col_cnt int lv_table_set_column_count set_col_width int, int lv_table_set_column_width set_column_count int lv_table_set_column_count set_column_width int, int lv_table_set_column_width set_row_cnt int lv_table_set_row_count set_row_count int lv_table_set_row_count set_selected_cell int, int lv_table_set_selected_cell"},{"location":"LVGL_API_Reference/#widget-lvtextarea","title":"widget <code>lv.textarea</code>","text":"Method Arguments Return type LVGL equivalent add_char int lv_textarea_add_char add_text string lv_textarea_add_text clear_selection lv_textarea_clear_selection cursor_down lv_textarea_cursor_down cursor_left lv_textarea_cursor_left cursor_right lv_textarea_cursor_right cursor_up lv_textarea_cursor_up delete_char lv_textarea_delete_char delete_char_forward lv_textarea_delete_char_forward get_accepted_chars string lv_textarea_get_accepted_chars get_current_char int lv_textarea_get_current_char get_cursor_click_pos bool lv_textarea_get_cursor_click_pos get_cursor_pos int lv_textarea_get_cursor_pos get_label lv.obj lv_textarea_get_label get_max_length int lv_textarea_get_max_length get_one_line bool lv_textarea_get_one_line get_password_bullet string lv_textarea_get_password_bullet get_password_mode bool lv_textarea_get_password_mode get_password_show_time int lv_textarea_get_password_show_time get_placeholder_text string lv_textarea_get_placeholder_text get_text string lv_textarea_get_text get_text_selection bool lv_textarea_get_text_selection set_accepted_chars string lv_textarea_set_accepted_chars set_align int lv_textarea_set_align set_cursor_click_pos bool lv_textarea_set_cursor_click_pos set_cursor_pos int lv_textarea_set_cursor_pos set_insert_replace string lv_textarea_set_insert_replace set_max_length int lv_textarea_set_max_length set_one_line bool lv_textarea_set_one_line set_password_bullet string lv_textarea_set_password_bullet set_password_mode bool lv_textarea_set_password_mode set_password_show_time int lv_textarea_set_password_show_time set_placeholder_text string lv_textarea_set_placeholder_text set_text string lv_textarea_set_text set_text_selection bool lv_textarea_set_text_selection text_is_selected bool lv_textarea_text_is_selected"},{"location":"LVGL_API_Reference/#widget-lvspangroup","title":"widget <code>lv.spangroup</code>","text":"Method Arguments Return type LVGL equivalent add_span lv.span lv_spangroup_add_span delete_span lv.span lv_spangroup_delete_span get_align int lv_spangroup_get_align get_child int lv.span lv_spangroup_get_child get_expand_height int int lv_spangroup_get_expand_height get_expand_width int int lv_spangroup_get_expand_width get_indent int lv_spangroup_get_indent get_max_line_height int lv_spangroup_get_max_line_height get_max_lines int lv_spangroup_get_max_lines get_mode int lv_spangroup_get_mode get_overflow int lv_spangroup_get_overflow get_span_by_point comptr lv.span lv_spangroup_get_span_by_point get_span_coords lv.span lv.span_coords lv_spangroup_get_span_coords get_span_count int lv_spangroup_get_span_count refresh lv_spangroup_refresh set_align int lv_spangroup_set_align set_indent int lv_spangroup_set_indent set_max_lines int lv_spangroup_set_max_lines set_mode int lv_spangroup_set_mode set_overflow int lv_spangroup_set_overflow set_span_style lv.span, lv.style lv_spangroup_set_span_style set_span_text lv.span, string lv_spangroup_set_span_text set_span_text_static lv.span, string lv_spangroup_set_span_text_static"},{"location":"LVGL_API_Reference/#widget-lvspan","title":"widget <code>lv.span</code>","text":"Method Arguments Return type LVGL equivalent get_style lv.style lv_span_get_style get_text string lv_span_get_text set_text string lv_span_set_text set_text_static string lv_span_set_text_static set_text_static string lv_span_set_text_static"},{"location":"LVGL_API_Reference/#widget-lvscale_section","title":"widget <code>lv.scale_section</code>","text":"Method Arguments Return type LVGL equivalent set_range int, int lv_scale_section_set_range set_style int, lv.style lv_scale_section_set_style"},{"location":"LVGL_API_Reference/#widget-lvscale","title":"widget <code>lv.scale</code>","text":"Method Arguments Return type LVGL equivalent add_section lv.scale_section lv_scale_add_section get_angle int lv_scale_get_rotation get_angle_range int lv_scale_get_angle_range get_label_show bool lv_scale_get_label_show get_major_tick_every int lv_scale_get_major_tick_every get_mode int lv_scale_get_mode get_range_max_value int lv_scale_get_range_max_value get_range_min_value int lv_scale_get_range_min_value get_rotation int lv_scale_get_rotation get_rotation int lv_scale_get_rotation get_total_tick_count int lv_scale_get_total_tick_count set_angle int lv_scale_set_rotation set_angle_range int lv_scale_set_angle_range set_draw_ticks_on_top bool lv_scale_set_draw_ticks_on_top set_image_needle_value lv.obj, int lv_scale_set_image_needle_value set_label_show bool lv_scale_set_label_show set_line_needle_value lv.obj, int, int lv_scale_set_line_needle_value set_major_tick_every int lv_scale_set_major_tick_every set_mode int lv_scale_set_mode set_post_draw bool lv_scale_set_post_draw set_range int, int lv_scale_set_range set_rotation int lv_scale_set_rotation set_rotation int lv_scale_set_rotation set_section_range lv.scale_section, int, int lv_scale_set_section_range set_section_style_indicator lv.scale_section, lv.style lv_scale_set_section_style_indicator set_section_style_items lv.scale_section, lv.style lv_scale_set_section_style_items set_section_style_main lv.scale_section, lv.style lv_scale_set_section_style_main set_text_src lv.str_arr lv_scale_set_text_src set_total_tick_count int lv_scale_set_total_tick_count"},{"location":"LVGL_API_Reference/#widget-lvchart","title":"widget <code>lv.chart</code>","text":"Method Arguments Return type LVGL equivalent add_cursor lv.color, int lv.chart_cursor lv_chart_add_cursor add_series lv.color, int lv.chart_series lv_chart_add_series get_cursor_point lv.chart_cursor int lv_chart_get_cursor_point get_first_point_center_offset int lv_chart_get_first_point_center_offset get_point_count int lv_chart_get_point_count get_point_pos_by_id lv.chart_series, int, comptr lv_chart_get_point_pos_by_id get_pressed_point int lv_chart_get_pressed_point get_series_color lv.chart_series lv.color lv_chart_get_series_color get_series_next lv.chart_series lv.chart_series lv_chart_get_series_next get_series_x_array lv.chart_series lv.int_arr lv_chart_get_series_x_array get_series_y_array lv.chart_series lv.int_arr lv_chart_get_series_y_array get_type int lv_chart_get_type get_x_start_point lv.chart_series int lv_chart_get_x_start_point hide_series lv.chart_series, bool lv_chart_hide_series refresh lv_chart_refresh remove_series lv.chart_series lv_chart_remove_series set_all_values lv.chart_series, int lv_chart_set_all_values set_axis_range int, int, int lv_chart_set_axis_range set_cursor_point lv.chart_cursor, lv.chart_series, int lv_chart_set_cursor_point set_cursor_pos lv.chart_cursor, comptr lv_chart_set_cursor_pos set_cursor_pos_x lv.chart_cursor, int lv_chart_set_cursor_pos_x set_cursor_pos_y lv.chart_cursor, int lv_chart_set_cursor_pos_y set_div_line_count int, int lv_chart_set_div_line_count set_next_value lv.chart_series, int lv_chart_set_next_value set_next_value2 lv.chart_series, int, int lv_chart_set_next_value2 set_point_count int lv_chart_set_point_count set_range int, int, int lv_chart_set_axis_range set_series_color lv.chart_series, lv.color lv_chart_set_series_color set_series_ext_x_array lv.chart_series, lv.int_arr lv_chart_set_series_ext_x_array set_series_ext_y_array lv.chart_series, lv.int_arr lv_chart_set_series_ext_y_array set_series_value_by_id lv.chart_series, int, int lv_chart_set_series_value_by_id set_series_value_by_id2 lv.chart_series, int, int, int lv_chart_set_series_value_by_id2 set_series_values lv.chart_series, lv.int_arr, int lv_chart_set_series_values set_series_values2 lv.chart_series, lv.int_arr, lv.int_arr, int lv_chart_set_series_values2 set_type int lv_chart_set_type set_update_mode int lv_chart_set_update_mode set_x_start_point lv.chart_series, int lv_chart_set_x_start_point"},{"location":"LVGL_API_Reference/#widget-lvimagebutton","title":"widget <code>lv.imagebutton</code>","text":"Method Arguments Return type LVGL equivalent set_src int, \\&lt;any&gt;, \\&lt;any&gt;, \\&lt;any&gt; lv_imagebutton_set_src set_state int lv_imagebutton_set_state"},{"location":"LVGL_API_Reference/#widget-lvled","title":"widget <code>lv.led</code>","text":"Method Arguments Return type LVGL equivalent get_brightness int lv_led_get_brightness off lv_led_off on lv_led_on set_brightness int lv_led_set_brightness set_color lv.color lv_led_set_color toggle lv_led_toggle"},{"location":"LVGL_API_Reference/#widget-lvmsgbox","title":"widget <code>lv.msgbox</code>","text":"Method Arguments Return type LVGL equivalent add_close_button lv.obj lv_msgbox_add_close_button add_footer_button string lv.obj lv_msgbox_add_footer_button add_header_button \\&lt;any&gt; lv.obj lv_msgbox_add_header_button add_text string lv.obj lv_msgbox_add_text add_title string lv.obj lv_msgbox_add_title close lv_msgbox_close close_async lv_msgbox_close_async get_content lv.obj lv_msgbox_get_content get_footer lv.obj lv_msgbox_get_footer get_header lv.obj lv_msgbox_get_header get_title lv.obj lv_msgbox_get_title"},{"location":"LVGL_API_Reference/#widget-lvspinbox","title":"widget <code>lv.spinbox</code>","text":"Method Arguments Return type LVGL equivalent decrement lv_spinbox_decrement get_rollover bool lv_spinbox_get_rollover get_step int lv_spinbox_get_step get_value int lv_spinbox_get_value increment lv_spinbox_increment set_cursor_pos int lv_spinbox_set_cursor_pos set_digit_format int, int lv_spinbox_set_digit_format set_digit_step_direction int lv_spinbox_set_digit_step_direction set_range int, int lv_spinbox_set_range set_rollover bool lv_spinbox_set_rollover set_step int lv_spinbox_set_step set_value int lv_spinbox_set_value step_next lv_spinbox_step_next step_prev lv_spinbox_step_prev"},{"location":"LVGL_API_Reference/#widget-lvspinner","title":"widget <code>lv.spinner</code>","text":"Method Arguments Return type LVGL equivalent set_anim_params int, int lv_spinner_set_anim_params"},{"location":"LVGL_API_Reference/#widget-lvkeyboard","title":"widget <code>lv.keyboard</code>","text":"Method Arguments Return type LVGL equivalent _btn_text int string lv_keyboard_get_button_text get_button_text int string lv_keyboard_get_button_text get_map_array comptr lv_keyboard_get_map_array get_mode int lv_keyboard_get_mode get_popovers bool lv_keyboard_get_popovers get_selected_button int lv_keyboard_get_selected_button get_textarea lv.obj lv_keyboard_get_textarea set_mode int lv_keyboard_set_mode set_popovers bool lv_keyboard_set_popovers set_textarea lv.obj lv_keyboard_set_textarea"},{"location":"LVGL_API_Reference/#widget-lvtabview","title":"widget <code>lv.tabview</code>","text":"Method Arguments Return type LVGL equivalent add_tab string lv.obj lv_tabview_add_tab get_content lv.obj lv_tabview_get_content get_tab_act int lv_tabview_get_tab_active get_tab_active int lv_tabview_get_tab_active get_tab_bar lv.obj lv_tabview_get_tab_bar get_tab_btns lv.obj lv_tabview_get_tab_bar get_tab_count int lv_tabview_get_tab_count rename_tab int, string lv_tabview_rename_tab set_act int, int lv_tabview_set_active set_active int, int lv_tabview_set_active set_tab_bar_position int lv_tabview_set_tab_bar_position set_tab_bar_size int lv_tabview_set_tab_bar_size"},{"location":"LVGL_API_Reference/#widget-lvtileview","title":"widget <code>lv.tileview</code>","text":"Method Arguments Return type LVGL equivalent add_tile int, int, int lv.obj lv_tileview_add_tile get_tile_act lv.obj lv_tileview_get_tile_active get_tile_active lv.obj lv_tileview_get_tile_active set_tile lv.obj, int lv_tileview_set_tile set_tile_by_index int, int, int lv_tileview_set_tile_by_index set_tile_id int, int, int lv_tileview_set_tile_by_index"},{"location":"LVGL_API_Reference/#widget-lvlist","title":"widget <code>lv.list</code>","text":"Method Arguments Return type LVGL equivalent _btn_text lv.obj string lv_list_get_button_text add_btn \\&lt;any&gt;, string lv.obj lv_list_add_button add_button \\&lt;any&gt;, string lv.obj lv_list_add_button add_text string lv.obj lv_list_add_text get_button_text lv.obj string lv_list_get_button_text set_btn_text lv.obj, string lv_list_set_button_text set_button_text lv.obj, string lv_list_set_button_text"},{"location":"LVGL_API_Reference/#widget-lvanimimg","title":"widget <code>lv.animimg</code>","text":"Method Arguments Return type LVGL equivalent del bool lv_animimg_delete delete bool lv_animimg_delete get_anim lv.anim lv_animimg_get_anim get_duration int lv_animimg_get_duration get_repeat_count int lv_animimg_get_repeat_count get_src_count int lv_animimg_get_src_count remove bool lv_animimg_delete set_completed_cb comptr lv_animimg_set_completed_cb set_duration int lv_animimg_set_duration set_ready_cb comptr lv_animimg_set_completed_cb set_repeat_count int lv_animimg_set_repeat_count set_reverse_delay int lv_animimg_set_reverse_delay set_reverse_duration int lv_animimg_set_reverse_duration set_src comptr, int lv_animimg_set_src set_src_reverse comptr, int lv_animimg_set_src_reverse set_start_cb comptr lv_animimg_set_start_cb start lv_animimg_start"},{"location":"LVGL_API_Reference/#widget-lvcalendar","title":"widget <code>lv.calendar</code>","text":"Method Arguments Return type LVGL equivalent add_header_arrow lv.obj lv_calendar_add_header_arrow add_header_dropdown lv.obj lv_calendar_add_header_dropdown get_btnmatrix lv.obj lv_calendar_get_btnmatrix get_highlighted_dates_num int lv_calendar_get_highlighted_dates_num header_dropdown_set_year_list string lv_calendar_header_dropdown_set_year_list set_chinese_mode bool lv_calendar_set_chinese_mode set_day_names comptr lv_calendar_set_day_names set_month_shown int, int lv_calendar_set_month_shown set_today_date int, int, int lv_calendar_set_today_date"},{"location":"LVGL_API_Reference/#widget-lvmenu_page","title":"widget <code>lv.menu_page</code>","text":"Method Arguments Return type LVGL equivalent"},{"location":"LVGL_API_Reference/#widget-lvmenu_cont","title":"widget <code>lv.menu_cont</code>","text":"Method Arguments Return type LVGL equivalent"},{"location":"LVGL_API_Reference/#widget-lvmenu_section","title":"widget <code>lv.menu_section</code>","text":"Method Arguments Return type LVGL equivalent"},{"location":"LVGL_API_Reference/#widget-lvmenu_separator","title":"widget <code>lv.menu_separator</code>","text":"Method Arguments Return type LVGL equivalent"},{"location":"LVGL_API_Reference/#widget-lvmenu","title":"widget <code>lv.menu</code>","text":"Method Arguments Return type LVGL equivalent back_button_is_root lv.obj bool lv_menu_back_button_is_root clear_history lv_menu_clear_history get_cur_main_page lv.obj lv_menu_get_cur_main_page get_cur_sidebar_page lv.obj lv_menu_get_cur_sidebar_page get_main_header lv.obj lv_menu_get_main_header get_main_header_back_button lv.obj lv_menu_get_main_header_back_button get_sidebar_header lv.obj lv_menu_get_sidebar_header get_sidebar_header_back_button lv.obj lv_menu_get_sidebar_header_back_button set_load_page_event lv.obj, lv.obj lv_menu_set_load_page_event set_mode_header int lv_menu_set_mode_header set_mode_root_back_button int lv_menu_set_mode_root_back_button set_page lv.obj lv_menu_set_page set_page_title comptr lv_menu_set_page_title set_page_title_static comptr lv_menu_set_page_title_static set_sidebar_page lv.obj lv_menu_set_sidebar_page"},{"location":"LVGL_API_Reference/#widget-lvqrcode","title":"widget <code>lv.qrcode</code>","text":"Method Arguments Return type LVGL equivalent set_dark_color lv.color lv_qrcode_set_dark_color set_light_color lv.color lv_qrcode_set_light_color set_size int lv_qrcode_set_size update \\&lt;any&gt;, int int lv_qrcode_update"},{"location":"LVGL_API_Reference/#widget-lvcolorwheel","title":"widget <code>lv.colorwheel</code>","text":"Method Arguments Return type LVGL equivalent get_color_mode int lv_colorwheel_get_color_mode get_color_mode_fixed bool lv_colorwheel_get_color_mode_fixed get_hsv int lv_colorwheel_get_hsv get_rgb lv.color lv_colorwheel_get_rgb set_hsv int bool lv_colorwheel_set_hsv set_mode int lv_colorwheel_set_mode set_mode_fixed bool lv_colorwheel_set_mode_fixed set_rgb lv.color bool lv_colorwheel_set_rgb"},{"location":"LVGL_Internals/","title":"LVGL - Internals","text":"<p>Below are notes about the LVGL-Berry mapping in Tasmota. You will find information for curious people and maintainers.</p>"},{"location":"LVGL_Internals/#build-system","title":"Build system","text":"<p>Berry mapping to LVGL is entirely automated.</p> <p>Most of the components are generated C code from the LVGL's C source code, similar to MicroPython approach.</p> <p>Phase 1: Parse LVGL source</p> <p>This first phase parses most C headers from the LVGL source tree and generates two files: - <code>lv_enum.h</code> containing all the <code>enum</code> values from LVGL (constants) - <code>lv_funcs.h</code> containing all the functions of the LVGL API normalized to 1 function per line, and with cleaned argument signature.</p> <pre><code>(in folder Tasmota/lib/libesp32_lvgl/lv_berry/tools)\n\n\u276f python3 preprocessor.py\n\n(no output)\n</code></pre> <p>Phase 2: Generate automatic Berry mapping</p> <p>From the two files created in the previous step, all the requires C files are created for the Berry mapping.</p> <pre><code>(in folder Tasmota/lib/libesp32_lvgl/lv_berry/tools)\n\n&gt; python3 convert.py\n| callback types['lv_group_focus_cb', 'lv_event_cb', 'lv_constructor_cb', 'lv_layout_update_cb', 'lv_obj_tree_walk_cb', 'lv_theme_apply_cb', 'lv_color_filter_cb']\n</code></pre> <p>The output should look as above, and indicates the C function that have been ignored (if any) if their return type is listed above. It also lists the callback types supported.</p> <p>Phase 3: Generate the Berry pre-compiled stubs</p> <p>This phase is specific to Berry pre-compiled modules and classes.</p> <pre><code>(in folder Tasmota/lib/libesp32/berry)\n\n&gt; ./gen.sh\n\n(no output)\n</code></pre> <p>Phase 4: compile Tasmota using platform.io as usual</p>"},{"location":"LVGL_Internals/#lv-module","title":"<code>lv</code> module","text":"<p>Tasmota automatically and implicitly imports <code>lv</code> module if compiled with LVGL.</p> <pre><code>import lv\n</code></pre> <p>The <code>lv</code> module is solidified in Flash, so to make it extensible, there is a trick applied to it.</p> <p>When you do <code>import lv</code> the first time, a hidden <code>lv_new</code> module is created in memory (writable) and a <code>member</code> function is added so that all members requested that are not part of <code>lv_new</code> are diverted to <code>lv</code>.</p> <p>Concretely, this means that the new <code>lv</code> module is a facade to the read-only solidified <code>lv</code> module, but you can still add methods.</p> <p>This is how it is done internally:</p> <pre><code>lv = module(\"lv\")\n\n# rename `lv` to `lv_ntv` and replace `lv` with `lv_tasmota`\ndef lv_module_init(lv_solidified)\n  var lv_new = module(\"lv\")   # create a dynamic module\n  lv_new.member = lv_solidified.member\n  # lv_new.lv_solidified = lv_solidified\n  return lv_new\nend\n\nlv.init = lv_module_init\n\ndef lv0_member_ntv() end\n\nlv.member = lv0_member_ntv\n\nreturn lv\n</code></pre> <p>Tasmota then does <code>import lv_tasmota</code> to add all Tasmota specific extensions to module <code>lv</code>.</p>"},{"location":"LVGL_Internals/#constants","title":"Constants","text":"<p>The <code>lv</code> module is a placeholder for all LVGL constants, the equivalent of C enums.</p> <p>As a rule of thumb, all C constants are mapped with a similar name. Just replace <code>LV_&lt;name&gt;</code> with <code>lv.&lt;name&gt;</code>.</p> <p>Example: C API <code>LV_LABEL_ALIGN_LEFT</code> becomes in Berry <code>lv.LABEL_ALIGN_LEFT</code></p>"},{"location":"LVGL_Internals/#implementation","title":"Implementation","text":"<p>The C enum constants are all compiled in a single file <code>tools/lv_berry/lv_module.h</code>. Only names are listed, the actual values are retrieved by the C compiler at runtime (which avoids many mistakes).</p> <p>Internally constants are handled by a virtual member in lvgl module. The module <code>lvgl</code> has a <code>member()</code> function that is called when the Berry runtime does not know the member name.</p> <p>The search happens in <code>lv0_member()</code> which first searches for a static member name, and if not found, looks for a widget class name.</p> <p>Constants are put in a C table in <code>lib/libesp32/Berry/default/be_lv_lvgl_module.c</code> as <code>lv0_constants[]</code>. The table is sorted by member name to allow for fast binary search (dichotomy).</p> <pre><code>const be_constint_t lv0_constants[] = {\n\n    { \"ALIGN_CENTER\", LV_ALIGN_CENTER },\n    { \"ALIGN_IN_BOTTOM_LEFT\", LV_ALIGN_IN_BOTTOM_LEFT },\n   [...]\n    { \"WIN_PART_SCROLLBAR\", LV_WIN_PART_SCROLLBAR },\n    { \"YELLOW\", 16776960 },\n};\n</code></pre>"},{"location":"LVGL_Internals/#colors","title":"Colors","text":"<p>An exception for LVGL colors, they are defined as 32 bits RGB values as follows, and not based on their C representation:</p> <pre><code>COLOR_WHITE=0xFFFFFF\nCOLOR_SILVER=0xC0C0C0\nCOLOR_GRAY=0x808080\nCOLOR_BLACK=0x000000\nCOLOR_RED=0xFF0000\nCOLOR_MAROON=0x800000\nCOLOR_YELLOW=0xFFFF00\nCOLOR_OLIVE=0x808000\nCOLOR_LIME=0x00FF00\nCOLOR_GREEN=0x008000\nCOLOR_CYAN=0x00FFFF\nCOLOR_AQUA=0x00FFFF\nCOLOR_TEAL=0x008080\nCOLOR_BLUE=0x0000FF\nCOLOR_NAVY=0x000080\nCOLOR_MAGENTA=0xFF00FF\nCOLOR_PURPLE=0x800080\n</code></pre> <p>Example: <code>lv.COLOR_RED</code></p>"},{"location":"LVGL_Internals/#widgets-classes","title":"Widgets classes","text":"<p>Although LVGL is C code and is not formally object oriented, LVGL widget follow an inheritance model. Each widget is a virtual subclass of <code>lv_obj</code> structure.</p> <p>Berry builds an actual Object Oriented class system, with a base class <code>lv_obj</code> and subclasses.</p> <p>The class names supported are defined in <code>convert.py</code> and are currently:</p> <pre><code>'lv_arc', 'lv_bar', 'lv_btn', 'lv_btnmatrix', 'lv_calendar', 'lv_canvas', 'lv_chart', 'lv_checkbox',\n'lv_cont', 'lv_cpicker', 'lv_dropdown', 'lv_gauge', 'lv_img', 'lv_imgbtn', 'lv_keyboard', 'lv_label', 'lv_led', 'lv_line',\n'lv_linemeter', 'lv_list', 'lv_msgbox', 'lv_objmask', 'lv_templ', 'lv_page', 'lv_roller', 'lv_slider', 'lv_spinbox',\n'lv_spinner', 'lv_switch', 'lv_table', 'lv_tabview', 'lv_textarea', 'lv_tileview', 'lv_win'\n</code></pre> <p>Additional 'special' classes are (they do not inherit from <code>lv_obj</code>):</p> <pre><code>'lv_obj', 'lv_group', 'lv_style', 'lv_indev'\n</code></pre>"},{"location":"LVGL_Internals/#parsing","title":"Parsing","text":"<p>The parsing is done by <code>convert.py</code> which parses <code>tools/lv_berry/lv_widgets.h</code>. This file contains all the C function signatures as single lines. <code>convert.py</code> checks if the types are supported and converts it as a Berry signature.</p> <p>The resulting signatures are used to generate class stubs for all Berry classes in <code>lib/libesp32/Berry/default/be_lvgl_widgets_lib.c</code> and the Berry signatures are in <code>tasmota/lvgl_berry/be_lv_c_mapping.h</code></p> <p>Example:</p> <p>The C signature:</p> <pre><code>bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area);\n</code></pre> <p>is recognized to be part of <code>lv_obj</code> class (by prefix) and has the following signature:</p> <pre><code>{ \"area_is_visible\", (void*) &amp;lv_obj_area_is_visible, \"b\", \"(lv_obj)(lv_area)\" },\n</code></pre> <p>Decomposed as: - \"area_is_visible\": name of the Berry method - (void*) &amp;lv_obj_area_is_visible: pointer to the C implementation - \"b\": return type, here boolean - \"(lv_obj)(lv_area)\": input types, 2 arguments of classes lv_obj and lv_area</p> <p>Other example:</p> <pre><code>void lv_btnmatrix_set_align(lv_obj_t * btnm, lv_label_align_t align);  \n\n{ \"set_align\", (void*) &amp;lv_btnmatrix_set_align, \"\", \"(lv_obj)i\" },\n</code></pre> <p>The parsing of the signature is done in <code>be_check_arg_type()</code></p> <p>Input and output types are:</p> <ul> <li>\"b\": boolean</li> <li>\"s\": string</li> <li>\"i\": int (signed 32 bits)- \".\": any type</li> <li>\"&amp;\": where n is a digit, Berry callback by class (see below) <li>\"(lv_)\": an instance of lv_. Note if you pass <code>0</code> (NULL) to a class argmunent it is accepted without warning. <p>Note: any missing argument or <code>nil</code> argument is converted to <code>0</code>.</p> <p>In case of an argument mismatch, a warning is printed but the call is still proceed.</p> <p>Warning: you can easily crash Tasmota if you send wrong types arguments.</p>"},{"location":"LVGL_Internals/#widgets-instantiation","title":"Widgets instantiation","text":"<p>Instantiation of a widget is marked as a specific signature. The return type is prefixed with <code>+</code>:</p> <pre><code>lv_obj_t * lv_canvas_create(lv_obj_t * par, const lv_obj_t * copy);\n\n{ \"create\", (void*) &amp;lv_canvas_create, \"+lv_canvas\", \"(lv_obj)(lv_obj)\" },\n</code></pre> <p>All widgets constructor always take 2 arguments, the first is the parent object, the second is the copy object (generally null or ignored)</p> <p>Example:</p> <pre><code>scr = lv.scr_act()\nlog = lv_label(scr)   # scr is parent object of log\n</code></pre> <p>Internally, widget constructors call <code>lvx_init_2()</code>. LVGL object are allocated by LVGL, the Berry object only contains a reference to the C structure (a pointer). These objects can be garbage collected without any impact.</p> <p><code>lv_obj</code> and widget constructors also accept a specific form: <code>log2 = lv_label(-1, log)</code> which just creates a second reference to the same LVGL object - it is mostly used internally to dynamically create an instance from a returned C pointed.</p>"},{"location":"LVGL_Internals/#callbacks","title":"Callbacks","text":"<p>Callbacks are a challenge in Berry. A callback is only a C pointer to a function and does not natively hold any other information. However we would like to match a single C address to multiple Berry closures.</p> <p>We take into account the fact that the first argument of any LVGL callback has always an instance as first argument, from the type list: <code>'lv_group_focus_cb', 'lv_event_cb', 'lv_signal_cb', 'lv_design_cb', 'lv_gauge_format_cb'</code></p> <p>We define 5 different C functions with 5 distinct addresses, one for each callback type. Then we use the first argument to dispatch the call to the appropriate Berry closure.</p> <p>Here is the call used at startup:</p> <pre><code>import lvgl as lv\n\n# for each callback type, mapping between first argument and closure\n_lvgl_cb = [ {}, {}, {}, {}, {}, {} ]\n\n# for each callback type, mapping between first argument and the actual Berry object with the correct type (C arguments are not explicitly typed)\n_lvgl_cb_obj = [ {}, {}, {}, {}, {}, {} ]\n\ndef _lvgl_cb_dispatch(idx, obj, v1, v2, v3, v4)\n  var func = _lvgl_cb[idx].find(obj)\n  var inst = _lvgl_cb_obj[idx].find(obj)\n  if func != nil\n    return func(inst, v1, v2, v3, v4)\n  end\n  return nil\nend\n</code></pre>"},{"location":"LVGL_Internals/#styles","title":"Styles","text":"<p><code>lv_style</code> is not a subclass of <code>lv_obj</code> but uses a similar mechanism to map the members.</p> <p>Main difference, it uses a distinct constructor <code>lvs_init()</code>.</p> <p>Note: <code>lv_style</code> needs to allocate memory and must not be garbage collected. For this reason <code>lv_style</code> allocates static memory which is never freed. Be aware that it may be a cause of memory leak (although not very likely).</p>"},{"location":"LVGL_Internals/#colors_1","title":"Colors","text":"<p><code>lv_color</code> is a simple class that maps RGB 32 bits colors (as 32 bits int) to the internal representation of colors (usually 16 bits).</p> <p>Don't be surprised that getting back a value is the 16 bits color converted to 32 bits - rounding errors may occur:</p> <pre><code>[Berry Console]\n&gt; c = lv_color(0x808080)\n&gt; c\nlv_color(0xff838183 - native:0x1084)\n</code></pre> <p>Note:</p> <ul> <li>0xff838183 - is the 32 bits color, with alpha channel (opaque)</li> <li>0x1084 - is the native internal representation as 16 bits color with swapped bytes</li> </ul>"},{"location":"LVGL_Internals/#groups","title":"Groups","text":"<p><code>lv_group</code> behaves like <code>lv_obj</code> but does not inherit from it.</p>"},{"location":"LVGL_Internals/#indev","title":"Indev","text":"<p>Indev or 'Input Device' is a simple class wrapper to handle touch screens and input buttons. It is similar to <code>lv_obj</code> but uses a simple constructor <code>lv0_init()</code> that just wraps the C pointer into the Berry instance.</p>"},{"location":"LVGL_in_10_minutes/","title":"LVGL in less than 10 minutes with Tasmota","text":"<p>In 2021, Tasmota added full support of LVGL for ESP32 based devices. It also introduced the Berry scripting language, a small-footprint language similar to Python and fully integrated in Tasmota. A comprehensive mapping of LVGL in Berry language is available, similar to the mapping of Micropython.</p> <p>The tutorial below illustrates how to install Tasmota on M5Stack devices (based on ESP32) and run your first LVGL application in Berry - all in less than 10 minutes.</p> <p>We will use nice M5Stack devices that integrate ESP32 and a 320x240 display, with touchscreen or physical buttons depending on the device.</p> <p></p>"},{"location":"LVGL_in_10_minutes/#flash-tasmota-lvgl-on-the-device","title":"Flash Tasmota-lvgl on the device","text":"<p>We have packaged an easy to use Web Flasher for ESP32.</p> <p>If this method fails or if you prefer local client method, have a look at Getting Started on Tasmota documentation.</p> <ul> <li> <p>Connect your M5Stack device via a USB Cable.</p> </li> <li> <p>Connect to the Tasmota Web Installer</p> </li> </ul> <p></p> <ul> <li>Scroll down in <code>Development</code> section and select <code>Tasmota32 LVGL</code></li> </ul> <p></p> <ul> <li>Click <code>Connect</code> and select the appropriate Serial Port. It should connect in a couple of second.</li> </ul> <p></p> <ul> <li>Click <code>Install Development Tasmota32 Lvgl (English)</code></li> </ul> <p></p> <ul> <li>Check <code>Erase Device</code> if it's the first time you install Tasmota, or you may experience unwanted behavior. Click <code>Next</code></li> </ul> <p></p> <ul> <li>Click <code>Install</code></li> </ul> <p></p> <ul> <li>It should take a little more to Erase and Flash</li> </ul> <p></p> <p>You can now close the Web Flasher and proceed to the Wifi configuration</p>"},{"location":"LVGL_in_10_minutes/#configure-tasmota-wifi","title":"Configure Tasmota Wifi","text":"<p>The next step can be done with a phone or a computer.</p> <ul> <li>Connect to temporary the wifi access point with a name starting with <code>tasmota-...</code></li> </ul> <p></p> <ul> <li>You should be automatically brought to the Wifi configuration page. If not, try connecting to <code>192.168.4.1</code></li> </ul> <p></p> <ul> <li>Select your wifi network (yes, my wifi is named <code>Tasmota</code>...), enter the password and hit <code>Save</code>. If all goes well, you should see the IP address of Tasmota and be redirected to it.</li> </ul> <p></p> <ul> <li>You should now see the Tasmota main screen.</li> </ul> <p></p>"},{"location":"LVGL_in_10_minutes/#configure-tasmota-for-m5stack","title":"Configure Tasmota for M5Stack","text":"<p>Tasmota is based on general purpose firmwares, you now need to configure specifically for your M5Stack device. We provide two templates, one for <code>M5Stack Basic/Gray/GO/Fire</code> and one for <code>M5Stack Core2</code>.</p> <ul> <li>Go to Tasmota main screen and click on <code>Configuration</code></li> </ul> <p></p> <ul> <li>Then click on <code>Auto-configuration</code>. You are now on the Auto-configuration page. Select <code>M5Stack Fire</code> or <code>M5Stack Core2</code>. Then click on <code>Apply configuration</code>.</li> </ul> <p></p> <p>The device restarts and you should be back to Tasmota main page. The screen should have been configured (you should see a short flash on the screen).</p> <p></p>"},{"location":"LVGL_in_10_minutes/#try-a-lvgl-demo-app","title":"Try a LVGL demo app","text":"<p>In this last step, we will try to run a small LVGL application written in Berry.</p> <ul> <li>Go to Tasmota Main Screen and click <code>Consoles</code> then <code>Manage File System</code></li> </ul> <p></p> <ul> <li>Click on <code>Create and edit new file</code>, enter the filename <code>autoexec.be</code> and copy the following code in the text pane:</li> </ul> <p></p> <pre><code>#- start LVGL and init environment -#\nlv.start()\n\ntasmota.cmd(\"DisplayDimmer 50\")\n\nhres = lv.get_hor_res()       # should be 320\nvres = lv.get_ver_res()       # should be 240\n\nscr = lv.scr_act()            # default screean object\nf20 = lv.montserrat_font(20)  # load embedded Montserrat 20\n\n#- Background with a gradient from black #000000 (bottom) to dark blue #0000A0 (top) -#\nscr.set_style_bg_color(lv.color(0x0000A0), lv.PART_MAIN | lv.STATE_DEFAULT)\nscr.set_style_bg_grad_color(lv.color(0x000000), lv.PART_MAIN | lv.STATE_DEFAULT)\nscr.set_style_bg_grad_dir(lv.GRAD_DIR_VER, lv.PART_MAIN | lv.STATE_DEFAULT)\n\n#- Upper state line -#\nstat_line = lv.label(scr)\nif f20 != nil stat_line.set_style_text_font(f20, lv.PART_MAIN | lv.STATE_DEFAULT) end\nstat_line.set_long_mode(lv.LABEL_LONG_SCROLL)                                        # auto scrolling if text does not fit\nstat_line.set_width(hres)\nstat_line.set_align(lv.TEXT_ALIGN_LEFT)                                              # align text left\nstat_line.set_style_bg_color(lv.color(0xD00000), lv.PART_MAIN | lv.STATE_DEFAULT)    # background #000088\nstat_line.set_style_bg_opa(lv.OPA_COVER, lv.PART_MAIN | lv.STATE_DEFAULT)            # 100% background opacity\nstat_line.set_style_text_color(lv.color(0xFFFFFF), lv.PART_MAIN | lv.STATE_DEFAULT)  # text color #FFFFFF\nstat_line.set_text(\"Tasmota\")\nstat_line.refr_size()                                                                # new in LVGL8\nstat_line.refr_pos()                                                                 # new in LVGL8\n\n#- display wifi strength indicator icon (for professionals ;) -#\nwifi_icon = lv_wifi_arcs_icon(stat_line)    # the widget takes care of positioning and driver stuff\nclock_icon = lv_clock_icon(stat_line)\n\n#- create a style for the buttons -#\nbtn_style = lv.style()\nbtn_style.set_radius(10)                        # radius of rounded corners\nbtn_style.set_bg_opa(lv.OPA_COVER)              # 100% background opacity\nif f20 != nil btn_style.set_text_font(f20) end  # set font to Montserrat 20\nbtn_style.set_bg_color(lv.color(0x1fa3ec))      # background color #1FA3EC (Tasmota Blue)\nbtn_style.set_border_color(lv.color(0x0000FF))  # border color #0000FF\nbtn_style.set_text_color(lv.color(0xFFFFFF))    # text color white #FFFFFF\n\n#- create buttons -#\nprev_btn = lv.btn(scr)                            # create button with main screen as parent\nprev_btn.set_pos(20,vres-40)                      # position of button\nprev_btn.set_size(80, 30)                         # size of button\nprev_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)   # style of button\nprev_label = lv.label(prev_btn)                   # create a label as sub-object\nprev_label.set_text(\"&lt;\")                          # set label text\nprev_label.center()\n\nnext_btn = lv.btn(scr)                            # right button\nnext_btn.set_pos(220,vres-40)\nnext_btn.set_size(80, 30)\nnext_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)\nnext_label = lv.label(next_btn)\nnext_label.set_text(\"&gt;\")\nnext_label.center()\n\nhome_btn = lv.btn(scr)                            # center button\nhome_btn.set_pos(120,vres-40)\nhome_btn.set_size(80, 30)\nhome_btn.add_style(btn_style, lv.PART_MAIN | lv.STATE_DEFAULT)\nhome_label = lv.label(home_btn)\nhome_label.set_text(lv.SYMBOL_OK)                 # set text as Home icon\nhome_label.center()\n\n#- callback function when a button is pressed, react to EVENT_CLICKED event -#\n\ndef btn_clicked_cb(obj, event)\n    var btn = \"Unknown\"\n    if   obj == prev_btn  btn = \"Prev\"\n    elif obj == next_btn  btn = \"Next\"\n    elif obj == home_btn  btn = \"Home\"\n    end\n    print(btn, \"button pressed\")\nend\n\nprev_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\nnext_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\nhome_btn.add_event_cb(btn_clicked_cb, lv.EVENT_CLICKED, 0)\n</code></pre> <ul> <li>Click <code>Save</code> and restart the device. You should now see this on the M5Stack screen:</li> </ul> <p></p> <p>You will find more information on LVGL-Tasmota-Berry mapping.</p>"},{"location":"LedMask/","title":"LedMask","text":"<p>LedMask command allows setting a bitmask which specifies which relays control the LED indicator used to display whether a relay is latched/powered. The order of the <code>&lt;bitmask&gt;</code> is from most significant bit (MSB) to least significant bit (LSB). Bit 15 (MSB) masks Relay16 through bit 0 (LSB) which masks Relay1, respectively. For each  relay to be included in controlling the power LED, set its corresponding bit in the <code>&lt;bitmask&gt;</code> to <code>1</code>. <code>&lt;bitmask&gt;</code> bits without corresponding configured relay components have no effect and can be ignored.</p> <p><code>&lt;bitmask&gt;</code> = bitwise value representing each relay. Values may be entered as either hexadecimal or decimal values (e.g., 0xFFFF = 65535).   <code>0xFFFF</code> (= 1111 1111 1111 1111) All relays control the power LED (default)</p> <p>LedState must be enabled (i.e., <code>!= 0</code>) in order for <code>LedMask</code> to take effect.</p> <p>Examples:</p> <li>`LedMask 0xFFFD` Every relay, except Relay2, controls the power LED (0xFFFD = 1111 1111 1111 1101)</li> <li>`LedMask 0x0002` Only Relay 2 controls the power LED (0x0002 = 0000 0000 0000 0010)</li>"},{"location":"Lights/","title":"Lights","text":"<p>You know what lights do.... Right? \ud83d\udca1</p>"},{"location":"Lights/#control-lights","title":"Control Lights","text":""},{"location":"Lights/#with-webui","title":"with WebUI","text":"<p>Tasmota webUI displays Brightness, CT, White, Color Picker, Color Saturation or PWM Level  sliders depending on the light component, the number of PWM channels configured and SetOptions used. </p> <p></p> <p></p> <p>Tasmota uses a HSB color model, which besides other more subtile differences compared to HSL means, that the color must be desaturated to reach complete black or white.</p> Control Range Commands and details Brightness 0..100 (percent) <code>Dimmer</code>, <code>HSBColor3</code>: Brightness of the light Hue 0..359 (degrees) <code>HSBColor1</code>: Color as an angle in the color wheel Sat 0..100 (percent) <code>HSBColor2</code>: saturation of the color, 0=grey/white, 100=pure color CT 153..500 (mireds) <code>CT</code>: white color temperature, from 153 (Cold White) to 500(Warm White)"},{"location":"Lights/#with-commands","title":"with Commands","text":"<p>See light commands for how to control lights.</p>"},{"location":"Lights/#light-types","title":"Light Types","text":""},{"location":"Lights/#switched-lights-aka-relays","title":"Switched Lights aka Relays","text":"<p>Switched or On/Off lights are controlled through <code>Relay</code> GPIOs.</p> <p>If you define multiple relays, they are controlled with <code>Power&lt;x&gt;</code> starting at <code>x=1</code>.</p> <p>Alexa: You can use Wemo emulation, your device will appear as a switch. You can change it to a light in the Alexa app.</p> <p>Alexa: If you have one or multiple relays, you can use Philips Hue emulation. All devices will appear as On/Off lights, and named accordingly to <code>FriendlyName</code>. Note: If you have only Echo Spot 2nd generation, your light will have a dummy dimmer.</p> <p></p> Configuration (see below) Commands <code>Power</code> Configuration none"},{"location":"Lights/#1-channel-dimmable-light","title":"1 Channel - Dimmable Light","text":"<p>1 channel lights are often white lights with On/Off controls and dimmer.</p> <p>Alexa: You can use Philips Hue emulation, the light will appear as white light with dimmer.  </p> <p>Leading edge dimmer: You can also configure a leading edge dimmer on 230V with the 1 channel configuration. In this case you need a TRIAC and a zero-cross detection that give a pulse with every crossing of the 0V of the sinus curve. The dimmer is power callibrated. 10% --&gt; 10% light or power consumption on a device like a heater. The Dimmer is e.g. suitable to dynamically pump remaining solar power into a heat sink. </p> Robotdyn AC dimmer configuration <p>Connect zero-crossing to GPIO of Counter4. Define a PWM and connect</p> Configuration (see below) Dimmer,Channel1 PWM1 Channel2 PWM2 (optional) Channel3 PWM3 (optional) Channelxx PWMxx (optional) Zero-Cross PIN COUNTER4 (mandatory) Commands <code>ZCDimmerSet</code> <p>Example schematic: </p> <p>Example config: </p> <p>Preferably before connecting the ZC &amp; PWM perform the following commands:</p> <ul> <li><code>SetOption99 1</code> -&gt; to enable detection of the raising edge of the zero-crossing</li> <li><code>SetOption68 1</code> -&gt; with more than ONE PWM this will all operate as single lights. Control with [<code>channelx 1..100</code>]</li> <li><code>LedTable 0</code> -&gt; for normal lamps or motors. Recommended</li> <li><code>savedata 0</code> -&gt; Saving the current status create small flickering. OFF prevent this. On ESP32 recommended. Do not change after reboot!</li> </ul> Configuration (see below) Commands <code>Power</code>, <code>Dimmer</code>, <code>Channel</code>, <code>Fade</code>, <code>Speed</code> Options Auto Power On, Independant PWM Channels, Gamma Correction"},{"location":"Lights/#2-channels-cct-light","title":"2 Channels - CCT Light","text":"<p>2 channels lights are white lights with correlated color temperature (CCT) controls from Cold White (CT=153) to Warm White (CT=500).</p> <p>Alexa: You can use Philips Hue emulation, the light will appear as white light with color temperature. Control through the Alexa app is limited to the <code>CT</code> range <code>199..383</code>.</p> Configuration (see below) Commands <code>Power</code>, <code>Dimmer</code>, <code>Color</code>, <code>White</code>, <code>CT</code> Options Auto Power On, Independant PWM Channels, Gamma Correction, PWM CT <p></p>"},{"location":"Lights/#3-channels-rgb-lights","title":"3 Channels - RGB Lights","text":"<p>3 channel lights are RGB color lights. You can set color either via RGB or HSB (not HSL). Alexa support also allows XY color, but that is not supported through commands.</p> <p>Alexa: You can use Philips Hue emulation, the light will appear as Color light.</p> Configuration (see below) Commands <code>Power</code>, <code>Dimmer</code>, <code>Color</code>, <code>HSBColor</code> Options Auto Power On, PWM Channel Configuration, Gamma Correction, Channel Remapping <p></p>"},{"location":"Lights/#4-channels-rgbw-lights","title":"4 Channels - RGBW Lights","text":"<p>4 channel lights are RGBW, i.e. RGB light and an additional White light. White can be either Warm White or Cold White depending on the manufacturer.</p> <p>Alexa: You can use Philips Hue emulation, the light will appear as Color light and White light with CT control. The CT control is only present to force pure white instead of RGB white. Changing CT will have no effect.</p> <p></p> <p>There is no White only slider in the UI for 4 channel lights</p> <p>Use <code>White</code> commands or set up White Blend Mode or RGB and White Split.</p> Configuration (see below) Commands <code>Power</code>, <code>Dimmer</code>, <code>Color</code>, <code>HSBColor</code>, <code>White</code> Options Auto Power On, PWM Channel Configuration, Gamma Correction, Channel Remapping, White Blend Mode, RGB and White Split <p>Danger</p> <p>Some lights have limited power supply that do not allow all channels to be at full power at the same time. Be careful not to burn out your light if you force all channels to be on using <code>Color</code> or RGB and White Split.</p>"},{"location":"Lights/#5-channels-rgbcct-lights","title":"5 Channels - RGBCCT Lights","text":"<p>5 channel lights are RGBCCT - a 3 channel RGB light and an additional 2 channel CCT light.</p> <p>Alexa: You can use Philips Hue emulation, the light will appear as Color light and White light with CT control.</p> <p></p> Configuration (see below) Commands <code>Power</code>, <code>Dimmer</code>, <code>Color</code>, <code>HSBColor</code>, <code>White</code>, <code>CT</code> Options Auto Power On, PWM Channel Configuration, Gamma Correction, Channel Remapping, White Blend Mode, RGB and White Split <p>Danger</p> <p>Some lights have limited power supply that do not allow all channels to be at full power at the same time. Be careful not to burn out your light if you force all channels via <code>Color</code> or RGB and White Split</p>"},{"location":"Lights/#independent-pwm-channels","title":"Independent PWM Channels","text":"<p>Any combination of Relays and PWMs, when enabling <code>SetOption68 1</code>. Splits off the light into individually controlled Channels (Useful when connecting multiple 1 channel strips to a single controller)</p> Configuration (see below) Commands <code>Power</code>, <code>Channel</code>, <code>Color</code> Options Auto Power On, PWM Channel Configuration, Gamma Correction <p></p>"},{"location":"Lights/#light-options","title":"Light Options","text":""},{"location":"Lights/#gamma-correction","title":"Gamma Correction","text":"<p>Gamma Correction is enabled by default in Tasmota (<code>LedTable 1</code>).</p> <p></p> <p>Human eye perception of brightness is non linear, bringing back linearity needs a trick called Gamma Correction.</p> <p>Some lights have hardware gamma correction (e.g., Sonoff B1). In that case, software gamma correction should be disabled with <code>LedTable 0</code>.</p> <p>The curve used: orange=ideal, blue=tasmota.</p> <p>How do I know if I have hardware gamma correction?</p> <p>If you find your light very dark even with <code>Dimmer 40</code>, it can mean either you have hardware PWM, disable it with <code>LedTable 0</code>, or you need to apply a minimum PWM value, use <code>DimmerRange 40,100</code> (adapt to the best value).</p> <p>Internally Tasmota uses 10 bits resolution PWM to get smoother levels at low brightness. </p> <p>When using <code>Fade</code> mode, a different Gamma curve (called <code>gamma_fast</code>). This cruve cheats slightly and makes lights increase brighness faster then normal; otherwise the light starts glowing very slowly and gives the impression that the light is not responsive.</p>"},{"location":"Lights/#white-blend-mode","title":"White Blend Mode","text":"<p>White Blend Mode mixes in the white channel with RGB colors while controlling the RGB light which results in a better and brighter color output. It is used only with 4 channel (RGBW) and 5 channel (RGBCCT) lights.</p> <p>Enable it with <code>SetOption105 1</code>.</p> <p>For Tasmota versions before 8.5 use command <code>RGBWWTable 255,255,255,0</code> instead.</p>"},{"location":"Lights/#calibration-optional","title":"Calibration (optional)","text":"<p>Generally white LEDs are brighter than RGB LEDs. If you want to keep the same brightness, you need to calibrate the white level. In this mode, any white component will be removed from RGB LEDs and sent to the white LEDs. This makes whites look much better.</p> <p>Example</p> <p><code>Color 30508000</code> will be converted to <code>Color 0020503000</code> (0x30 is subtracted from RGB channels and added to the White channel)</p> <p>To calibrate a RGBW light:</p> <ol> <li><code>Color FFFFFF00</code></li> <li><code>RGBWWTable 255,255,255,255,255</code> - reset to RGB mode</li> <li><code>RGBWWTable 255,255,255,&lt;n&gt;,0</code> - (begin the calibration process with <code>&lt;n&gt;</code> == 150)</li> <li>If too bright, decrease <code>&lt;n&gt;</code>. If too dim, increase <code>&lt;n&gt;</code></li> <li>Go back to step 2 and iterate until satisfied with the color intensities.</li> </ol> <p>Calibration examples for specific devices:</p> <p>Sonoff B1: <code>RGBWWTable 255,255,255,35,0</code> Teckin SB50: <code>RGBWWTable 255,255,255,80,0</code></p>"},{"location":"Lights/#rgb-and-white-split","title":"RGB and White Split","text":"<p><code>SetOption37 128</code></p> <p>By default RGBW and RGBCCT lights can only be controlled in single mode, either RGB or White (e.g., Turning on CT lights turns off RGB lights and vice versa).</p> <p>Use <code>SetOption37 128</code> to split RGB and White into 2 independent lights. If you are already using Channel Remapping, just add <code>128</code> to the value of <code>SetOption37</code>.</p>"},{"location":"Lights/#channel-remapping","title":"Channel Remapping","text":"<p><code>SetOption37</code></p> <p>Read More</p>"},{"location":"Lights/#disable-auto-power-on","title":"Disable Auto Power On","text":"<p>Lights are always powered on when a light command or a webUI slider is used and automatically powered off when color is set to black or <code>Dimmer</code> is set to <code>0</code>.</p> <p>When enabling <code>SetOption20 1</code> any change to webUI sliders or using commands <code>CT</code>, <code>Dimmer</code>, <code>HSBColor3</code>, <code>Color</code> or <code>Channel</code> will not automatically power on the light if it is off.</p>"},{"location":"Lights/#pwm-ct","title":"PWM CT","text":"<p><code>Module 48</code> or <code>SetOption92 1</code></p> <p>Some CCT lights use PWM1 for brightness and PWM2 for color temperature (instead of PWM1 for Cold White and PWM2 for Warm White).</p> <p>For these lights, use <code>Module 48</code> aka Philips Xiaomi mode, or <code>SetOption92 1</code> (supported since v.8.2.0.5)</p>"},{"location":"Lights/#virtual-ct","title":"Virtual CT","text":"<p>this feature is experimental and will probably not give brilliant results</p> <p>Used with 4 channel RGBW lights to simulate the missing white channel (cold or warm) using RGB channels.</p> <p>Enable Virtual CT with <code>SetOption106 1</code> then choose which type of white you're simulating with <code>SetOption107</code> where <code>0</code> is warm white and <code>1</code> is cold white </p>"},{"location":"Lights/#light-categories","title":"Light Categories","text":"<p>Lights come in various shapes (bulb, strips, ceiling lights, ...) but in Tasmota they are separated in 3 categories:</p> <ul> <li>Channel Controlled Lights</li> <li>Addressable LEDs</li> <li>Status LEDs </li> </ul>"},{"location":"Lights/#channel-controlled-lights","title":"Channel Controlled Lights","text":""},{"location":"Lights/#pwm-lights","title":"PWM Lights","text":"<p>Lights controlled using up to 5 channels (red, green, blue, cold white, warm white). Channels are controlled using PWM or APDM.</p> <p>PWM (Pulse Width Modulation) is the most common method of controlling LED lights. </p> <p>These lights are configured by assigning <code>PWM1(i)</code> through <code>PWM5(i)</code> components to their GPIOs; <code>PWM&lt;x&gt;i</code> means PWM is inverted. Depending on the number of used PWMs Tasmota will recognize the light as</p> Channels PWM1 PWM2 PWM3 PWM4 PWM5 1 Brightness 2 Cold White Warm White 3 Red Green Blue 4 Red Green Blue White 5 Red Green Blue Cold White Warm White"},{"location":"Lights/#my92xx","title":"MY92xx","text":"<p>MY92xx family of drivers uses Adaptive Pulse Density Modulation. </p> <p>Configured in Tasmota by assigning <code>MY92x1 DI</code> and <code>MY92x DCKI</code> components to their GPIOs (some devices might have more than one  MY92xx controller)</p> <p>Channel mapping for such devices is dependent on the controllers but is easily remapped using <code>SetOption37</code>.</p>"},{"location":"Lights/#sm16716","title":"SM16716","text":"<p>SM16716 LEDs, sometimes mislabelled as WS2801.</p> <p>Configured in Tasmota by assigning <code>SM16716 CLK</code>, <code>SM16716 DAT</code> and <code>SM16716 PWR</code> component to their GPIOs. </p> <p>Some SM16716 bulbs have BGR order and need <code>SetOption37 54</code> to work properly.</p>"},{"location":"Lights/#pwm-dimmer-switches","title":"PWM Dimmer Switches","text":"<p>Specific module (requires a custom binary) for Martin Jerry/acenx/Tessan/NTONPOWER SD0x PWM dimmer switches. Brightness of the load for these dimmers is controlled by a PWM GPIO pin. They typically have power, up and down buttons, a power status LED, five brightness LEDs and another status LED. Read more...</p>"},{"location":"Lights/#addressable-leds","title":"Addressable LEDs","text":"<p>Lights where each LED is individually controlled. In these lights it is possible to adjust each LEDs power, color and brightness, all just with the use of a single GPIO pin.</p> <p>WebUI shows hue, saturation and brightness sliders and power toggle for these lights. Red and green color may be mixed up (observed for clone of Wemos RGB shield).</p>"},{"location":"Lights/#ws2812","title":"WS2812","text":"<p>These are also commonly called Neopixel lights.</p> <p>Configured in Tasmota by assigning <code>WS2812 (7)</code> component to its GPIO. </p> <p>For wiring, see instructions for LED strip or Wemos RGB shield.</p>"},{"location":"Lights/#sk6812","title":"SK6812","text":"<p>SK6812 RGBW LEDs are not supported in standard binaries and need custom compiled firmware. See instructions.</p>"},{"location":"Lights/#status-leds","title":"Status LEDs","text":"<p>Status LEDs are the LEDs on the device used to display device information</p> <p>Those LEDs are defined in a template or module using <code>Led1</code>, <code>Led2</code>, <code>Led3</code> or <code>Led4</code> (or <code>Led1i</code>, <code>Led2i</code>, <code>Led3i</code> or <code>Led4i</code>) and additionally using <code>LedLink</code> or <code>LedLinki</code> (<code>LedLink</code> was introduced in version 6.5.0.12). It is not recommended to assign <code>Led&lt;x&gt;</code> and <code>Led&lt;x&gt;i</code> with the same <code>&lt;x&gt;</code> number. Prior to version 6.5.0.12, Tasmota only supported up to two LED components to indicate the power state of the relay(s), and the Wi-Fi/MQTT connectivity status. </p> <p>It is possible to wire in your own LED and assign it as any of the above mentioned but that's outside the scope of this article</p> <p>If only one LED is configured, it serves both purposes; the link status LED and/or the LED that indicates the power state of the relay(s). If more than one LED component is defined, <code>Led1</code>/<code>Led1i</code> will act as the Wi-Fi/MQTT status LED and the next defined LED (e.g., <code>Led2</code>/<code>Led2i</code>) will act as the LED that indicates the power state of the relay(s). This is the default behavior. Configuring a GPIO as an <code>LEDLink</code>/<code>LEDLinki</code> component changes this behavior.</p> <p></p> <p>For example, on a Sonoff Basic the green LED is used as the link status LED. Once the device connects, the LED is used to indicate the relay's power status.</p>"},{"location":"Lights/#link-status-led","title":"Link status LED","text":"<p>Link status LED shows the network state, more specifically the Wi-Fi and MQTT connection status.</p> <p>It blinks if the device is not connected to your Wi-Fi AP and MQTT broker (if MQTT is enabled). You can change this behaviour with <code>LedState</code> or turn it off with <code>SetOption31</code>.</p>"},{"location":"Lights/#power-status-led","title":"Power status LED","text":"<p>Power status LED shows the power status of relay component(s). <code>LedMask</code> determines which relay(s) are associated with the power status LED. This behavior can be modified with the <code>LedState</code> command. The LED is turned off by default when the relay is OFF and turned on when the relay switches ON.</p> <p>Note</p> <p>Depending on the device design, some LEDs are connected to the same GPIO as the relay. Those cannot be independently controlled since they have to follow the relay state.</p> <p>If you have more than one LED wired independently and you want it to show the power state of the relay, you must assign an <code>LedLink</code> GPIO.</p>"},{"location":"Lights/#pwm-led-mode","title":"PWM LED Mode","text":"<p>Using <code>LedPwmMode</code> you can change the LED display mode from simple on/off to a PWM controlled LED which will enable you to e.g., display a brighter LED when the relay is on and a dimmer LED when it's OFF so you can locate the switch in the dark but not have it obnoxiously bright.</p> <p><code>LedPwmOff</code> and <code>LedPwmOn</code> control the preset LED brightness in their respective states.</p>"},{"location":"Lights/#ledpower-command","title":"LedPower Command","text":"<p>When you use <code>LedPower</code> you take over control of that particular LED and it stops being linked to its corresponding relay and being its power status LED.</p>"},{"location":"Lights/#using-ledlink","title":"Using LedLink","text":"<p><code>LedLink</code> / <code>LedLinki</code> is used to assign the link status LED. If your device does not have an LED for link status (or you want to use that LED for a different purpose), you can assign <code>LedLink</code> to an available free GPIO. When <code>LedLink(i)</code> is assigned, other LEDs are automatically linked to their corresponding relay and serve as that relay's power status LED - i.e., <code>Led&lt;x&gt;(i)</code> links to <code>Relay&lt;x&gt;(i)</code></p>"},{"location":"Lights/#esp32-only-features","title":"ESP32 Only Features","text":""},{"location":"Lights/#pwm6","title":"PWM6+","text":"<p>ESP32 has hardware PWM support, named <code>ledc</code>, for up to 16 channels depending on CPU type. You can mix lights and pure PWM channels. The first 5 PWM are reserved for lights, unless <code>SetOption15 0</code>. For pure PWM GPIOs, you can assign any PWM number, they don't need to be continuous. For example you can use <code>PWM 1/2/3</code> for a 3-channel RGB light, and <code>PWM 6</code> &amp; <code>PWM 10</code> for pure PWM at the same time.</p> CPU type PWM channels ESP32 16 channels ESP32-S2 8 channels ESP32-C3 6 channels <p>Channels are assigned to GPIOs in a first-in-first-serve way and PWM GPIOs are assigned first. If <code>ledc</code> channels are exhausted an error will appear in logs.</p> <p>The following GPIOs use <code>ledc</code> PWM channels:</p> GPIO type Description <code>PWM</code> or <code>PWMi</code> <code>PWM 1..5</code> are used for lights, <code>PWM O6..11</code> are general purpose PWM. <code>LedPwmMode</code> Assigns a <code>Led</code> GPIO to a PWM channel <code>Buzzer</code> If <code>BuzzerPwm</code> is used <code>Backlight</code> PWM backlighting for displays <code>XCLK</code> Used as a clock generator for webcam <p>Example of <code>PWM</code> console output with 16 PWM assigned. By default PWM range is 0..1023.</p> <pre><code>RESULT = {\"PWM\":{\"PWM1\":410,\"PWM2\":286,\"PWM3\":286,\"PWM4\":0,\"PWM5\":0,\"PWM6\":0,\"PWM7\":0,\"PWM8\":0,\"PWM9\":0,\"PWM10\":0,\"PWM11\":0,\"PWM12\":0,\"PWM13\":0,\"PWM14\":0,\"PWM15\":0,\"PWM16\":0}}\n</code></pre>"},{"location":"Lights/#auto-phasing-of-pwm","title":"Auto-phasing of PWM","text":"<p>By default, phases of consecutive PWM are disaligned so that a PWM pulses starts when the pulse of the previous PWM channels ends. This helps in distributing over time all pulses and have a smoother effect on power supply.</p> <p>You can revert this with <code>SetOption134 1</code>; all phases are synces and all pulses start at the same moment.</p>"},{"location":"Lights/#h-bridge","title":"H-bridge","text":"<p>H-bridge is an electronic circuit that switches the polarity of a voltage applied to a load. It uses 2 PWM outputs to control the current sent to each polarity.</p> <p>When auto-phasing is enabled, you can use 2 consecutive PWM to drive a H-bridge siunce PWM phases don't overlap - under the condition that the sum of both PWM don't exceed <code>1023</code>.</p> <p>You must always ensure that the sum of both PWM channels is less or equal than <code>1023</code>. Values over this threshold can damage the circuit!!!</p>"},{"location":"LoRa-and-LoRaWan-Bridge/","title":"LoRa and LoRaWan Bridge","text":"This feature is included only in <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SPI \n#define USE_SPI                 // Add support for SPI\n#endif\n#define USE_SPI_LORA            // Add support for LoRaSend and LoRaCommand (+4k code)\n#define USE_LORA_SX126X         // Add driver support for LoRa on SX126x based devices like LiliGo T3S3 Lora32 (+16k code)\n#define USE_LORA_SX127X         // Add driver support for LoRa on SX127x based devices like M5Stack LoRa868, RFM95W (+5k code)\n#define USE_LORAWAN_BRIDGE      // Add support for LoRaWan bridge (+8k code)\n</code></pre></p> <p>The LoRa feature can be used to add a RF communication channel between two or more devices. The LoRaWan Bridge feature can be used to receive information from any joined LoRaWan device.</p> <p>Both features use dedicated hardware supporting the LoRa protocol. Tasmota provides support for two different Semtech drivers used in most LoRa devices today: SX127x and newer SX126x.</p> <p>Some devices using SX127x are:</p> <ul> <li>HopeRF RFM95W, RFM96W and RFM98W</li> <li>LilyGo TTGO T3 LoRa32 868MHz ESP32 (SX1276)</li> <li>LilyGo TTGO T-Higrow 868MHz (SX1276)</li> <li>DFRobot FireBeetle Covers LoRa Radio 868MHz (SX1276) or 434MHz (SX1278)</li> <li>M5Stack LoRa868 (uses AI-01 whith SX1276)</li> <li>Modtronix</li> </ul> <p>Some devices using SX126x are:</p> <ul> <li>LilyGo T3S3 LoRa32 868MHz ESP32S3 (SX1262)</li> <li>LilyGo TTGO T-Weigh ESP32 LoRa 868MHz HX711 (SX1262)</li> <li>Heltec (CubeCell) (SX1262)</li> <li>Waveshare SX1262 Lora Node (HF) and (LF)</li> </ul>"},{"location":"LoRa-and-LoRaWan-Bridge/#lora-commands","title":"LoRa commands","text":"<ul> <li><code>LoRaConfig</code>: show current configuration.</li> <li><code>LoRaConfig 1</code>: set default LoRa configuration.</li> <li><code>LoRaConfig 2</code>: set default LoRaWan configuration.</li> <li><code>LoRaConfig {\"Frequency\":868.0,\"Bandwidth\":125.0}</code>: changes frequency and bandwidth. Other parameters can be changed using the same JSON parameter layout.</li> <li><code>LoRaSend</code>: disable hexadecimal and switch to text decoding.</li> <li><code>LoRaSend &lt;string&gt;</code>: send appending <code>\\n</code> (newline).</li> <li><code>LoRaSend1 &lt;string&gt;</code>: send appending <code>\\n</code> (newline).</li> <li><code>LoRaSend2 &lt;string&gt;</code>: send.</li> <li><code>LoRaSend3 &lt;string&gt;</code>: replace escape characters and send.</li> <li><code>LoRaSend4 &lt;string&gt;</code>: send as binary. Data in response messages is encoded as binary strings.</li> <li><code>LoRaSend5 &lt;string&gt;</code>: send as hex. Data in response messages is encoded as hex strings.</li> <li><code>LoRaSend6 &lt;string&gt;</code>: send as comma-delimited string of decimal numbers.</li> <li><code>LoRaSend15 &lt;string&gt;</code>: send as hex with inverted IQ. Data in response messages is encoded as hex strings.</li> <li><code>LoRaOption4 1</code>: enable reception of <code>LoRaCommand</code> commands. No security, anyone in range can send any command.</li> <li><code>LoRaCommand &lt;topic_of_lora_receiver&gt; &lt;command&gt;</code>: send command to device with MQTT topic.</li> </ul>"},{"location":"LoRa-and-LoRaWan-Bridge/#lorawan-commands","title":"LoRaWan commands","text":"<ul> <li><code>LoRaWanBridge 1</code>: enable LoRaWan bridge.</li> <li><code>LoRaWanBridge 0</code>: disable LoRaWan bridge.</li> <li><code>LoRaOption3 1</code>: enable LoRaWan decoding of received data from Dragino LDS01 and MerryIoT DW10.</li> <li><code>SetOption100 1</code>: remove LwReceived form JSON message.</li> <li><code>SetOption118 1</code>: move LwReceived from JSON message and into the subtopic replacing \"SENSOR\" default.</li> <li><code>SetOption119 1</code>: remove the device addr from json payload, can be used with LoRaWanName where the addr is already known from the topic.</li> <li><code>SetOption144 1</code>: include time in <code>LwReceived</code> messages like other sensors.</li> <li><code>LoRaWanAppKey&lt;x&gt; &lt;32_character_app_key&gt;</code>: set known appkey of LoRaWan device or node to be joined.</li> <li><code>LoRaWanName&lt;x&gt; &lt;string&gt;</code>: set friendly name for device or node.</li> <li><code>LoRaWanDecoder&lt;x&gt; &lt;string&gt;</code>: set name of decoder file. See LoRaWan-Decoders.</li> </ul>"},{"location":"LoRa-and-LoRaWan-Bridge/#configuration","title":"Configuration","text":"<p>First assign SPI GPIOs to <code>SPI MISO</code>, <code>SPI MOSI</code>, <code>SPI CLK</code>, <code>LoRa CS</code> and <code>LoRa Rst</code> types in the \"Configure Module\" page. In addition assign sx127x specific GPIO to <code>LoRa DIO0</code> or sx126x specific GPIOs to  <code>LoRa Busy</code> and <code>LoRa DIO1</code>.</p>"},{"location":"LoRa-and-LoRaWan-Bridge/#lorawan-bridge","title":"LoRaWan bridge","text":"<p>The goal of the LoRaWan bridge is to provide local communication with off-the-shelf LoRaWan devices. So no LoRaWan gateway, network- and application server and cloud service like <code>The Thing Network</code> or <code>Helium Network</code> is needed. The bridge will provide MQTT JSON response like </p> <pre><code>{\"LwReceived\":{\"LDS01\":{\"Node\":1,\"Device\":\"0x4AD6\",\"Name\":\"LDS01\",\"RSSI\":-49.0,\"SNR\":9.8,\"Events\":2,\"LastEvent\":0,\"DoorOpen\":1,\"Alarm\":0,\"Battery\":3.006}}}\n</code></pre> <p>or if decoding is disabled using command <code>LoRaOption3 0</code> or no hardcoded device (LDS01 or DW10)</p> <pre><code>{\"LwReceived\":{\"LDS01\":{\"Node\":1,\"Device\":\"0x4AD6\",\"Name\":\"LDS01\",\"RSSI\":-49.0,\"SNR\":9.5,\"DevEUIh\":\"A840410E\",\"DevEUIl\":\"71894AD6\",\"FPort\":10,\"Payload\":[11,196,1,0,0,2,0,0,19,0]}}}\n</code></pre>"},{"location":"LoRa-and-LoRaWan-Bridge/#information","title":"Information","text":"<p>The LoRaWan Bridge can communicate with LoRaWan devices supporting single channel mode and/or Adaptive Data Rate (ADR).</p> <p>End-Device activation is supported via Over-The-Air-Activation (OTAA). Activation By Personalization (ABP) is not supported. The bridge currently supports maximum four devices.</p> <p>The functionality of the bridge has been tested using Dragino LDS01 and a MerryIoT DW10 devices on 868MHz. </p>"},{"location":"LoRa-and-LoRaWan-Bridge/#example-of-otaa","title":"Example of OTAA","text":"<p>For OTAA the LoRaWan AppKey, provided with the device, needs to be known by the LoRaWan bridge. In case of MerryIoT, default configured for <code>Helium Network</code>, I received the AppKey as a response to my e-mail to their support office.</p> <pre><code>11:41:06.111 CMD: LoRaWanAppKey1 11F81EAEB17EE9043E5884BB98EFC9D6\n11:41:06.113 SRC: WebConsole from 192.168.2.1\n11:41:06.114 CMD: Grp 0, Cmd 'LORAWANAPPKEY', Idx 1, Len 32, Pld 11, Data '11F81EAEB17EE9043E5884BB98EFC9D6'\n11:41:06.131 MQT: stat/core2/RESULT = {\"LoRaWanAppKey1\":\"11F81EAEB17EE9043E5884BB98EFC9D6\"}\n</code></pre> <p>Initiate the OTAA process on the device either by pressing a button or replacing it's batteries and wait for the bridge to receive it's request. This can take several minutes as the device cycles through several Frequencies and Spreadingsfactors.</p> <pre><code>11:42:13.772 LOR: JoinEUI 07010000004140A8, DevEUIh A840410E, DevEUIl 71894AD6, DevNonce F45F, MIC 3B3EE35E\n11:42:14.719 CFG: Lora saved to file\n11:42:19.441 MQT: tele/core2/SENSOR = {\"LwReceived\":{\"0x4AD6\":{\"Node\":1,\"Device\":\"0x4AD6\",\"RSSI\":-50.0,\"SNR\":12.0,\"Events\":0,\"LastEvent\":0,\"DoorOpen\":1,\"Alarm\":0,\"Battery\":3.000}}}\n11:42:21.216 CFG: Lora saved to file\n</code></pre> <p>Now is a good time to give the device a friendlyname.</p> <pre><code>11:46:55.067 CMD: LoRaWanName1 LDS01\n11:46:55.069 SRC: WebConsole from 192.168.2.1\n11:46:55.070 CMD: Grp 0, Cmd 'LORAWANNAME', Idx 1, Len 5, Pld -99, Data 'LDS01'\n11:46:55.086 MQT: stat/core2/RESULT = {\"LoRaWanName1\":\"LDS01\"}\n11:46:56.829 CFG: Lora saved to file\n</code></pre>"},{"location":"LoRa-and-LoRaWan-Bridge/#resources","title":"Resources","text":"<p>LoRaWan specification v1.0.2</p>"},{"location":"LoRaWan-Decoders/","title":"LoRaWan Decoders","text":"<p>LoRaWan end devices transmit packets containing raw Payload Data. The Tasmota LoRaWan Bridge feature normally passes the raw Payload Data onto an MQTT server. <pre><code>{\n  \"LwReceived\": {\n    \"0xAE3D\": {\n      \"Node\": 1,\n      \"Device\": \"0xAE3D\",\n      \"RSSI\": -14,\n      \"SNR\": 8.8,\n      \"Decoder\": \"LHT52\",\n      \"DevEUIh\": \"A840414E\",\n      \"DevEUIl\": \"4F5CAE3D\",\n      \"FPort\": 2,\n      \"Payload\": [9,230,2,48,127,255,1,104,33,178,172]\n    }\n  }\n}\n</code></pre></p>"},{"location":"LoRaWan-Decoders/#adding-payload-data-decoding","title":"Adding Payload Data Decoding","text":"<p>There are no industry standards on the format or content of the raw data send by each sensor; every manufacturer/device is different. There are public databases of decoder scripts for many devices; e.g. TTN decoder script database</p> <p>The Tasmota LoRaWAN Decoder feature:  - is optional  - is implemented in Berry  - does not require any custom builds  - the elements are:     - a Berry script <code>LwDecode.be</code> that:        - subscribes to the tele/xxxx/SENSOR MQTT messages, looking for the <code>LwReceived</code> packets sent by the Tasmota LoRaWAN Bridge.        - dynamically loads (once only) Device Decoder Files from the Tasmota file system, if they exist.        - asks a Device Decoder File to decode the raw Data Payload         - reports the result via MQTT     - Device Decoder Files:       - are written in Berry       - closely modelled on the TTN decoder script database.</p>"},{"location":"LoRaWan-Decoders/#example-lwdecoded-mqtt-message","title":"Example LwDecoded MQTT message","text":"<pre><code>{\n  \"LwDecoded\": {\n    \"0xAE3D\": {\n      \"TempC_Internal\": 25.34,\n      \"Ext_SensorType\": 1,\n      \"Systimestamp\": 1747038892,\n      \"Device\": \"Dragino LHT52\",\n      \"Ext_SensorConnected\": false,\n      \"Hum_Internal\": 56\n    }\n  }\n}\n</code></pre>"},{"location":"LoRaWan-Decoders/#files","title":"Files","text":"<p>These files are available from the Tasmota Github Repository</p> <ul> <li>LwDecoder.be</li> <li>Device Decoder Files (indexed by Vendor/Model)</li> </ul>"},{"location":"LoRaWan-Decoders/#how-to-use-the-device-decoder-feature","title":"How to use the Device Decoder feature","text":"<ol> <li>Download to your local PC, then upload to the Tasmota File System <ul> <li>LwDecode.be</li> <li>the Device Decoder File(s) for your End Device(s), or write your own (see below)</li> </ul> </li> <li>Add this line to <code>autoexec.be</code> in the Tasmota File System (create if necessary)  <code>load(\"LwDecode.be\")</code></li> <li>Execute these Tasmota Console commands:<ul> <li><code>LoRaWanAppKey&lt;x&gt; yyyyyyyy</code>    where <code>&lt;x&gt;</code> is the Tasmota LoRaWAN node number. Joins an End Device to the LoRaWan Bridge. See LoRaWan Commands.</li> <li><code>LoRaWanDecoder&lt;x&gt; &lt;decoderfile&gt;</code> where <code>&lt;x&gt;</code> is the Tasmota LoRaWan node number. Sets the name of the Decoder File for each end device. e.g.  <code>LoRaWanDecoder1 LHT52</code> associates node 1 with the <code>LHT52.be</code> decoder file</li> <li><code>BrRestart</code> to restart Berry  </li> </ul> </li> </ol>"},{"location":"LoRaWan-Decoders/#write-your-own-device-decoder-file","title":"Write your own Device Decoder file","text":"<ol> <li>Find the JavaScript (*.js) decoder file for your device from TTN Device Decoder database Alternatively, find the manufacturer's datasheet/User Guide/User Manual/etc. to learn the syntax of the Raw Data Payload</li> <li>Edit LwDecoderSample.be to decode the Raw Data Payload</li> <li>Rename <code>LwDecoderSample.be</code>  to <code>&lt;DeviceName&gt;.be</code> where <code>&lt;DeviceName&gt;</code> matches your device name.</li> <li>Copy <code>&lt;DeviceName&gt;.be</code> to the Tasmota File System.</li> <li> <p>Test</p> <ul> <li><code>load(\"&lt;DeviceName&gt;.be\")</code> from the Berry Scripting Console, looking for any reported errors.<ul> <li>Execute this Tasmota console command: <code>LoRaWanDecoder&lt;x&gt; &lt;DeviceName&gt;</code> </li> </ul> </li> <li>Wait for your device to send raw Data Payloads to your Tasmota installation, and confirm <code>LwDecoded</code> MQTT messages are received, and the values are correct: </li> </ul> </li> <li> <p>Submit a PR to share your new decoder with the Tasmota community.</p> </li> </ol>"},{"location":"MAX31855/","title":"MAX31855 / MAX6675 Thermocouple Amplifier","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MAX31855\n#define USE_MAX31855  // Add support for MAX31855/MAX6675 K-Type thermocouple sensor using softSPI\n#endif\n</code></pre></p> <p>This driver is used to read type-K thermocouples using a MAX31855 amplifier.</p>"},{"location":"MAX31855/#configuration","title":"Configuration","text":""},{"location":"MAX31855/#tasmota-settings","title":"Tasmota Settings","text":"Parameter Connector Description MX31855 CS # CS Chip select, wire a separate pin to each peripheral if using multiple. MX31855 CLK CLK Along with power and DO, shared among peripherals. MX31855 DO DO Vin 3-5V if using Adafruit's breakout. GND <p>Use SetOption94 to choose the appropriate driver (MAX31855 or MAX6675)</p>"},{"location":"MAX31855/#example-project","title":"Example Project","text":"<p>This example shows two thermocouple amplifier breakouts wired up to one Huzzah ESP8266. The peripherals use the same <code>CLK</code> and <code>DO</code> pins, but each has a separate <code>CS</code>.</p>"},{"location":"MAX31855/#tasmota-configuration","title":"Tasmota Configuration","text":"<p>This Tasmota configuration shows the thermocouples as well as unrelated I2C setup on <code>GPIO4</code> and <code>GPIO5</code>.</p> <p> </p> <p>Sensor data is reported like this:</p> <pre><code>tele/tasmota_30EF0B/SENSOR = {\n  \"Time\":\"2023-12-11T00:54:59\",\n  \"MAX31855-0\":{\n    \"Temperature\":22.8,\n    \"ReferenceTemperature\":23.6,\n    \"Error\":0\n  },\n  \"MAX31855-1\":{\n    \"Temperature\":22.5,\n    \"ReferenceTemperature\":22.9,\n    \"Error\":0\n  },\n  \"TempUnit\":\"C\"\n}\n</code></pre> <p>The <code>ReferenceTemperature</code>, also known as \"cold junction temperature\", is the PCB temperature which is used as the basis for the thermocouple's voltage offset to find the thermocouple or \"hot junection\" temperature.</p>"},{"location":"MAX31855/#home-assistant-view","title":"Home Assistant View","text":"<p>The sensor values are autodiscovered in Home Assistant. In the screenshot below they have been renamed.</p> <p></p>"},{"location":"MAX31855/#wiring","title":"Wiring","text":""},{"location":"MAX7219/","title":"MAX7219 driver for multiple 8x8 dot matrix modules","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_DISPLAY                 \n#define USE_DISPLAY_MAX7219_MATRIX\n#define USE_UTF8_LATIN1             // optional. It defines additionaly UTF8_C2 and UTF8_C3 characters and needs +1k more memory.\n</code></pre></p> <p></p>"},{"location":"MAX7219/#wiring","title":"Wiring","text":"<p>Connect the MAX7219 display module's pins to any free GPIOs of the ESP8266 or ESP32 module. VCC should be 5V. Depending on the number of used modules and the brightness, the used current could be more than 1A. A seperate 5V adapter connected to the display directly could be helpfull.</p> <p>Connect the 5 outgoing pins (VCC, GND, DI, CS, CLK) of the first module to the next one.  With this you can connect up to 32 modules into a line. </p>"},{"location":"MAX7219/#configuration","title":"Configuration","text":"<p>Assign the pins as follows from Tasmota's GUI:</p> <pre><code>DIN hardware pin --&gt; \"MAX7219 DIN\"\nCS  hardware pin --&gt; \"MAX7219 CS\"\nCLK hardware pin --&gt; \"MAX7219 CLK\"\n</code></pre> <p>Once the GPIO configuration is saved and the ESP8266/ESP32 module restarted, set the Display Model to 19 and Display Mode to 0 <pre><code>DisplayModel 19\nDisplayMode 0\n</code></pre></p> <p>Depending on order of the wired 8x8 matrix modules you have got a display of size pixel_width x pixel_height. The size has to be set with the commands \"DisplayWidth \" and \"DisplayHeight \".  <p>E.g. we use 12 8x8 dot modules in one line --&gt; height = 8 dots,  width = 12x8 = 96 dots <pre><code>DisplayHeight 8\nDisplayWidth  96\n</code></pre></p> <p>After the ESP8266/ESP32 module has restarted, turn ON the display with the command  <pre><code>Power ON\nDisplayText Hello Tasmota!\n</code></pre></p>"},{"location":"MAX7219/#commands","title":"Commands","text":"<p>Now, the following \"Display\" commands can be used:</p> Command Parameter Note DisplayText Sends the text to the display. If the text fits into the display, it is shown in the center. Otherwise it scrolls to the left and repeats as long it is cleared or new \"DisplayText\" overwrites it. DisplayDimmer [0..100] 0 = Turn the display off, 100 = maximum luminosity. Note that the MAX7219 supports 16 levels of brightness. Power [ON/OFF] Switches the display on or off. When <code>OFF</code>, the display buffer is not cleared and will be shown again after \"Power ON\". Other display commands are still active when <code>OFF</code>. DisplayClear Clears the display. DisplayScrollDelay [0..15] Default = 0 (max speed). Sets the speed of text scroll. Smaller delay = faster scrolling. The maximum scroll speed is 50ms per pixel with <code>DisplayScrollDelay 0</code>. DisplayWidth [8..256] Sets the pixel width of the display (8x number of modules in a row). DisplayHeight [8..256] Sets the pixel height of the display (8x number of module rows). DisplayRotate [0/2] 0: default (when first module is left), 2 upside down (turns 180\u00b0, when first module is right). DisplayClock [0/1/2] Displays a clock. 1: 12 hr format, 2: 24 hr format, 0: turns clock off. <p>Note: The DisplayClock mode is not persistent. After a restart it has to be set again manually or use the following rule to have clock mode permanently. <pre><code>Rule1 ON System#Boot DO DisplayClock 2 ENDON\nRule1 1\n</code></pre></p>"},{"location":"MAX7219/#constraints","title":"Constraints","text":"<ul> <li>Only one text row is supported</li> <li>Only standard ASCII characters are supported.</li> <li>UTF8 encoded latin1 characters are supported when compiled with <code>#define USE_UTF8_LATIN1</code>. Unknown characters are displayed as \"_\".</li> <li>Entry of characters in hex format, e.g. <code>~E9</code> is not supported.</li> <li><code>#define USE_DISPLAY_MAX7219_MATRIX</code> disables <code>USE_DISPLAY_MAX7219</code> and <code>USE_DISPLAY_TM1637</code> (made for seven segment displays), because it uses the same pin configuration. It is not possible to use dot matrix and seven segment disply at the same time.</li> </ul>"},{"location":"MAX7219/#see-also","title":"See also","text":"<ul> <li>YouTube MAX7219 Dot Matrix Display in Tasmota 16 minutes example for a digital clock, how to compile and configurate</li> </ul>"},{"location":"MCP230xx/","title":"MCP23008 / MCP23017 GPIO Expander","text":"<p>Technical Data from the manufacturer: * Microchip MCP23008 * Microchip MCP23017</p> <p>Generally available breakout boards for the MCP23017 look similar to this:</p> <p></p> <p>The MCP23008 has 8 IO pins which the MCP230xx driver uses as D0 - D7. The MCP23017 has 16 IO pins which the MCP230xx driver uses as D0 - D15. This is visualized in the circuit diagram below but it's important to note that the MCP23017 actually differentiates between PORTA (being A0 to A7) and PORTB (being B0 to B7) - The MCP230xx driver combines the two ports in sequence to translate to pins represented as D0 through D15 for the MCP23017.</p> <p>The chip can be connected quite easily, especially if you can source the DIP version of the chip. Here's a basic outline of what a typical circuit would require to be functional:</p> <p></p> <p>You will need to pick an I2C address in either of the above scenario's using the address mapping according to pin A0, A1, and A2 as from the datasheet as follows:</p> <p></p>"},{"location":"MCP230xx/#supporting-modes","title":"Supporting modes","text":"<p>Starting with Tasmota v12.4.0.2 there are two different modes to use MCP23xxx.</p> <ul> <li>The original approach (now called Mode 1) supports one MCP23008 or MCP23017 with many user configurable features using commands and rules. </li> <li>The latest approach called Mode 2, supports several and mixed MCP23008, MCP23017 and MCP23S17 adding switches, buttons and relays acted on as if they were directly connected to the ESP8266 or ESP32 configured using a JSON file containing a template describing the GPIO's as used on the basic Tasmota device.</li> </ul>"},{"location":"MCP230xx/#mode-2","title":"Mode 2","text":"<p>To enable Mode 2 you will only need to add in <code>user_config_override.h</code> </p> <p><code>#define USE_MCP23XXX_DRV</code></p> <p>This enables the driver which in turn at restart will search for the JSON file in three possible locations:</p> <ul> <li>if a filesystem is present it looks for file <code>mcp23x.dat</code></li> <li>if not found and rules are supported it looks for a specific rule entry like <code>on file#mcp23x.dat do &lt;template&gt; endon</code></li> <li>if not found and scripts are supported it looks for a specific script like <code>-y &lt;template&gt;</code></li> </ul> <p>If no JSON file is found the driver does not claim any MCP23xxx device and if mode 1 is enabled will allow this mode to take over.</p> <p>A typical JSON template would look like <code>{\"NAME\":\"MCP23008 expander\",\"BASE\":0,\"GPIO\":[224,225,226,227,32,33,34,35]}</code> which adds four relays and four buttons.</p> <p>The template consists of a <code>\"NAME\"</code> data pair with any description of the template, an optional <code>\"BASE\"</code> data pair selecting if either relative (0 = default) or absolute (1) button and/or switch numbering is used and a <code>\"GPIO\"</code> data pair with numbers representing the functions of the GPIO's in order from lowest I2C address GP(A)0 to highest I2C address GP(B)7 and are based on the numbers known from the base tasmota template used on the ESP8266 or ESP32.</p> <p>The following list contains the current supported functions:</p> Function Code Description None 0 Not used Button1..32 B 32..63 Button to Gnd with internal pullup Button_n1..32 Bn 64..95 Button to Gnd without internal pullup Button_i1..32 Bi 96..127 Button inverted to Vcc with internal pullup Button_in1..32 Bin 128..159 Button inverted to Vcc without internal pullup Switch1..28 S 160..187 Switch to Gnd with internal pullup Switch_n1..28 Sn 192..219 Switch to Gnd without internal pullup Relay1..32 R 224..255 Relay Relay_i1..32 Ri 256..287 Relay inverted Output_Hi Oh 3840 Fixed output high Output_lo Ol 3872 Fixed output low <p>Some example templates</p> <pre><code>                                          S3  S2  B2 B3 Oh   B1 S1    R1        R4  R2  R3  S4\n{\"NAME\":\"MCP23S17 Shelly Pro 4PM\",\"GPIO\":[194,193,65,66,3840,64,192,0,224,0,0,0,227,225,226,195]}\n\nInverted relays and buttons                Ri1 Ri2 Ri3 Ri4 Ri5 Ri6 Ri7 Ri8 B1 B2 B3 B4 B5 B6 B7 B8\n{\"NAME\":\"MCP23017 A=Ri1-8, B=B1-8\",\"GPIO\":[256,257,258,259,260,261,262,263,32,33,34,35,36,37,38,39]}\n\nUnique inverted relays and buttons with offset 2      Ri3 Ri4 Ri5 Ri6 Ri7 Ri8 Ri9 Ri10B3 B4 B5 B6 B7 B8 B9 B10\n{\"NAME\":\"MCP23017 A=Ri2-10, B=B2-10\",\"BASE\":1,\"GPIO\":[258,259,260,261,262,263,264,265,34,35,36,37,38,39,40,41]}\n\nButtons, relays, buttons and relays                         B1 B2 B3 B4 B5 B6 B7 B8 R1  R2  R3  R4  R5  R6  R7  R8  B9 B10B11B12B13B14B15B16R9  R10 R11 R12 R13 R14 R15 R16\n{\"NAME\":\"MCP23017 A=B1-8, B=R1-8, C=B9-16, D=R9-16\",\"GPIO\":[32,33,34,35,36,37,38,39,224,225,226,227,228,229,230,231,40,41,42,43,44,45,46,47,232,233,234,235,236,237,238,239]}\n</code></pre> <p>In Mode 2 you can choose to connect the interrupt pins from the MCP230xx to native GPIOs on the ESP. You will then need to configure the used GPIOs as \"MCP23xxx Int\" in the Web UI. This way, upon a change in an input, the corresponding interrupt pin will gererate a flag that will be scanned at every program cycle, making the detection as fast as possible. If not using the interrupt pins the detection will be triggered every 50ms.</p>"},{"location":"MCP230xx/#mode-1","title":"Mode 1","text":"<p>You will need to define the address you are using in <code>user_config_override.h</code> for the driver to know on which address the MCP23008/MCP23017 is expected to be found.</p> <p><code>#define USE_MCP230xx_ADDR 0x20</code></p> <p>The MCP23008/MCP23017 chips allow for both INPUT and OUTPUT - Most of the functionality of the driver is focused on INPUT mode - especially since they allow interrupt reporting and are 5V tolerant.</p> <p>OUTPUT functionality is however available as pinmode 5 (Documented later in this Wiki) as an additional option for those who want to use the OUTPUT functionality using the <code>Sensor29</code> command which consumes ~1Kbyte of flash. The driver is disabled by default in the Tasmota firmware so the only way to gain its use would be to perform a manual compilation of your own firmware.</p> <p>There are three different levels in which functionality may be enabled, in the following order, by adding these lines in <code>user_config_override.h</code>: <pre><code>#define USE_MCP230xx                 // Enable INPUT mode (pinmode 1 through 4)\n#define USE_MCP230xx_OUTPUT          // Enable OUTPUT mode (pinmode 5)\n#define USE_MCP230xx_DISPLAYOUTPUT   // Display state of OUTPUT pins on main Tasmota web interface\n</code></pre></p> <p>The ESP8266 will automatically detect whether you have connected an MCP23008 (8 input) or MCP23017 (16 input) and will provide telemetry data in accordance with how the device was configured from within the Tasmota firmware.</p> <p>If OUTPUT is enabled, telemetry data for the current state of OUTPUT pins will also be provided by telemetry.</p>"},{"location":"MCP230xx/#mcp23008-mcp23017-pin-numbers-in-tasmota-compared-to-datasheets","title":"MCP23008 / MCP23017 Pin numbers in Tasmota compared to datasheets","text":"<p>The table below outlines how the pins of the MCP23008/MCP23017 are assigned:</p> <p></p>"},{"location":"MCP230xx/#usage-of-the-driver","title":"Usage of the driver","text":"<p>The MCP230xx chip (or breakout board) must be connected to the ESP8266 and the I2C pins must be configured for the module similar to the following:</p> <p></p> <p>One that is complete you may want to confirm that the Tasmota firmware is finding your MCP23008/MCP23017 chip by sending the command through serial or MQTT: <code>I2Cscan</code></p> <p>You should see a response giving you an address within the range of the MCP23008/MCP23017 chip (0x20 through 0x27) which may look as follows <code>MQT: stat/tasmota/RESULT = {\"I2CScan\":\"Device(s) found at 0x20\"}</code></p> <p>If the extender is not detected, check your wiring and pin configuration.</p> <p>The configuration of MCP23008/MCP23017 by using <code>Sensor29</code> commands via the Console or MQTT messages.</p> <p>In order to use the MCP23008/MCP23017, add the following two lines in your <code>user_config_override.h</code> as the MCP chip support is not enabled by default. <pre><code>#define USE_MCP230xx\n#define USE_MCP230xx_ADDR 0x20\n</code></pre></p> <p>The MCP23008/MCP23017 supports I<sup>2</sup>C address range of 0x20 through 0x27. Take care that you are not using an address which is already used by another device (e.g., 0x27 is a known address for some I<sup>2</sup>C Liquid Crystal Displays).</p>"},{"location":"MCP230xx/#device-configuration","title":"Device Configuration","text":"<p>The behavior of all pins on the MCP23008/MCP23017 can be reset to a specific setting/mode globally to simplify the initial configuration as follows</p> Command Parameters Sensor29 MCP23008 / MCP23017 I<sup>2</sup>C GPIO Expander configuration<code>Reset&lt;x&gt;</code> = reset all pinsx = <code>1..6</code><code>1</code> = INPUT mode, no reporting, no pull-up<code>2</code> = INPUT mode, report on CHANGE, pull-up enabled<code>3</code> = INPUT mode, report on LOW, pull-up enabled<code>4</code> = INPUT mode, report on HIGH, pull-up enabled<code>5</code> = OUTPUT mode (if enabled by <code>#define USE_MCP230xx_OUTPUT</code>)<code>6</code> = inverted OUTPUT mode (if enabled by <code>#define USE_MCP230xx_OUTPUT</code>)<code>pin,pinmode{,intpullup\\|outstate{,repmode}}</code><code>pin</code> = the I/O pin on the MCP230xx chip<ul><li><code>0..7</code> for MCP23008</li><li><code>0..15</code> for the MCP23017)<code>pinmode</code> = operational mode of the pin (<code>?, 0..5</code>)<ul><li><code>?</code> = query pin configuration</li><li><code>0</code> = Disabled (deprecated, but will be default for previously unconfigured devices)</li><li><code>1</code> = INPUT (Floating - only telemetry data will be sent according to configuration <code>TelePeriod</code> intervals)</li><li><code>2</code> = INPUT with INTERRUPT on CHANGE (will send an MQTT output on state change from LOW to HIGH and HIGH to LOW)</li><li><code>3</code> = INPUT with INTERRUPT on CHANGE to LOW (will send an MQTT output on state change only from HIGH to LOW)</li><li><code>4</code> = INPUT with INTERRUPT on CHANGE to HIGH (will send an MQTT output on state change only from LOW to HIGH)</li><li><code>5</code> = OUTPUT (if enabled with <code>#define USE_MCP230xx_OUTPUT</code>)</li><li><code>6</code> = inverted OUTPUT (if enabled with <code>#define USE_MCP230xx_OUTPUT</code>)</li></ul><code>intpullup</code> (pinmode <code>1..4</code>). Pull-up resistors are disabled by default for pin mode <code>1</code> whilst enabled by default for pin modes <code>2..4</code> (because they are interrupt enabled pins and we do not want signal bounce). The internal pull-up on these pins may be disabled if necessary if you are biasing them externally.<ul><li><code>0</code> = weak internal pull-up disabled (default for pinmode <code>1</code>)</li><li><code>1</code> = weak internal pull-up enabled (default for pinmode <code>2..4</code>)</li></ul><code>outstate</code> (pinmode <code>5..6</code>) = set the default state of an OUTPUT pin on reset/power-up. If your device is configured to save state (<code>SetOption0 = 1</code>), the <code>outstate</code> setting will be ignored and the last known state of the pin will be applied during power-up/reset.<ul><li><code>0/off</code> = set output pin to OFF</li><li><code>1/on</code> = set output pin state to ON</li><li><code>2/device</code> = keep the value stored on the MCP230xx device</li></ul><code>repmode</code> = reporting mode (optional). Applicable only for pinmode <code>2..4</code>. Reporting mode is disabled for pinmode <code>1</code> and for output pinmodes (<code>5..6</code>)<ul><li><code>0</code> = interrupt using Event and report using telemetry (default)</li><li><code>1</code> = interrupt using Event only (no telemetry reported)</li><li><code>2</code> = report using telemetry only (no Event triggered)</li></ul> <p>Examples: <code>Sensor29 Reset1</code> <code>MQT: stat/tasmota/RESULT = {\"Sensor29_D99\":{\"MODE\":1,\"PULL_UP\":\"OFF\",\"INT_MODE\":\"DISABLED\",\"STATE\":\"\"}}</code> Pin and State is reported as 99 because it is set across all pins. Mode should correspond with the reset pinmode option used.  </p> <p><code>Sensor29 0,?</code> <code>MQT: stat/tasmota/RESULT = {\"Sensor29_D0\":{\"MODE\":1,\"PULL_UP\":\"OFF\",\"INT_MODE\":\"DISABLED\",\"STATE\":\"ON\"}}</code> Confirming that the pin is in pinmode 1 and that the pull-up resistor is not enabled. INT_MODE indicates the interrupt mode for pins which are interrupt enabled (pinmode 2 through 4) - In the example above it is disabled for pin mode 1 (INPUT without INTERRUPT) The current STATE of the pin as ON or OFF is reported as at the time the command is issued is also reported.  </p>"},{"location":"MCP230xx/#important-notice-on-use-of-interrupts","title":"IMPORTANT NOTICE ON USE OF INTERRUPTS","text":"<p>Only use interrupts on pins which are either explicitly pulled down GND or up to VCC externally as floating pins may cause unintended MQTT responses for pins which are floating. So unless your connected wire/device explicitly pulls the pin to GND or VCC only when conditions of an interrupt would be met it is recommended that you either do not set a pin for an interrupt mode or at least enable pull-up resistors for the unused pins with pullup = 1 when you perform your sensor29 pin,pinmode,pullup command.</p> <p>Examples of some pin configuration options:</p> <p><code>sensor29 4,1,0</code> - Will enable D4 for INPUT without internal pull-up resistor</p> <p><code>sensor29 3,1,1</code> - Will enable D3 for INPUT with the internal pull-up resistor ENABLED</p> <p><code>sensor29 5,2,1</code> - Will enable D5 for INPUT and report on change state from LOW to HIGH and HIGH to LOW via MQTT</p> <p><code>sensor29 6,3,1</code> - Will enable D6 for INPUT and report on change state from HIGH to LOW (note pull-up is also enabled)</p> <p><code>sensor29 2,4,0</code> - Will enable D2 for INPUT and report on change state from LOW to HIGH (note pull-up is not enabled)</p> <p>Pull-up resistor support is valid for all modes from 1 through 4</p> <p>Default telemetry logging will occur for all pins as per the configured logging interval of the ESP8266 as configured in the Tasmota firmware options. The telemetry logging will push out to log and MQTT a JSON as follows: <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2018-08-18T16:13:47\",\"MCP230XX\": \"D0\":0,\"D1\":0,\"D2\":1,\"D3\":0,\"D4\":0,\"D5\":0,\"D6\":0,\"D7\":1}}\n</code></pre></p> <p>Again, this will depend on whether an MCP23008 or MCP23017 is used insofar that the number of pins/bits reported will be 8 (0 to 7) or 16 (0 to 15) respectively.</p>"},{"location":"MCP230xx/#interrupt-modes-and-usage","title":"INTERRUPT MODES AND USAGE","text":"<p>Interrupts will report for individual pins as and when the conditions which were configured are met and will look something like this:</p> <p>Interrupt message on HIGH for input pin 0 <pre><code>MQT: stat/tasmota/RESULT = {\"Time\":\"2018-08-19T16:04:50\",\"MCP230XX_INT\":{\"D0\":1,\"MS\":301}}\n</code></pre> Interrupt message on LOW for input pin 1 <pre><code>MQT: stat/tasmota/RESULT = {\"Time\":\"2018-08-19T16:04:50\",\"MCP230XX_INT\":{\"D1\":0,\"MS\":519}}\n</code></pre></p> <p>The state of the pin captured during the interrupt is reported as Dx=y where x is the pin number and y is the state of the pin. In addition the number of milliseconds since the last interrupt occurred for the particular pin is also reported as MS=xx where xx is the number of milliseconds recorded.</p> <p>In addition to the MQTT message the driver will also execute an event command in the following format:</p> <p><code>event MCPINT_Dxx=y</code></p> <p>Where xx = the pin number from 0 through 7 (MCP23008) or 0 through 15 (MCP23017) and y the state of the pin as it was captured by the interrupt register of the MCP23008/MCP23017 chip.</p> <p>The complete output for an interrupt enabled pin would look like this:</p> <p><pre><code>MQT: stat/tasmota/RESULT = {\"Time\":\"2018-08-19T16:08:28\",\"MCP230XX_INT\":{\"D0\":0,\"MS\":217353}}\nSRC: Rule\nRSL: Group 0, Index 1, Command EVENT, Data MCPINT_D0=0\nMQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n</code></pre> <pre><code>MQT: stat/tasmota/RESULT = {\"Time\":\"2018-08-19T16:08:46\",\"MCP230XX_INT\":{\"D0\":1,\"MS\":18101}}\nSRC: Rule\nRSL: Group 0, Index 1, Command EVENT, Data MCPINT_D0=1\nMQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n</code></pre></p> <p>The latter makes it possible to integrate interrupt responses with rules for example: <pre><code>rule on event#MCPINT_D0=1 do power on endon on event#MCPINT_D0=0 do power off endon\n</code></pre></p> <p>In the example above the rule would respond to an interrupt of HIGH on pin 0 of the MCP by executing command \"power on\" and respond to an interrupt of LOW on pin 0 with the command \"power off\"</p> <p>See the Wiki on Using Rules for more information on how this can be helpful to your requirements.</p> <p>If you require only one of the two reporting methods you may use the sensor29 command to configure the interrupt behavior according to your requirements using command:</p> <p><code>sensor29 pin,pinmode,pullup,intmode</code></p> <p>The intmode parameter is optional for pin modes 2 through 4 (those that support interrupts) and may be configured according to the table below depending on your requirements:</p> <p></p> <p>Keep in mind that the MCP23008/MCP23017 chip will only store the last interrupt registered in the interrupt register and capture register - Because the interrupt register is only checked every 50 milliseconds by the Tasmota firmware you may experience missed interrupts if your incoming signals fluctuate/change faster than 20 times per second.</p>"},{"location":"MCP230xx/#home-assistant-tips","title":"HOME ASSISTANT TIPS","text":"<p>You can use <code>SetOption59 1</code> in order to get extra SENSOR status telemetry messages in addition to event-triggered RESULT messages. This allows very good integration with Home Assistant because it needs to monitor only one payload for both periodic and instant messages using <code>binary_sensor</code>: <pre><code>- platform: mqtt\n  name: \"MCP23017 Teszt D0 SENSOR\"\n  state_topic: \"tele/tasmota/SENSOR\"\n  value_template: \"{{ value_json['MCP230XX'].D0 }}\"\n  payload_on: \"1\"\n  payload_off: \"0\"\n  availability_topic: \"tele/tasmota/LWT\"\n  payload_available: \"Online\"\n  payload_not_available: \"Offline\"\n  qos: 0\n  device_class: door\n</code></pre></p>"},{"location":"MCP230xx/#advanced-functions","title":"ADVANCED FUNCTIONS","text":"<p>Several advanced functions have been added to extend the flexibility and interoperability of the MCP23008/MCP23017 with specific focus on adding functionality which is not present on the hardware's built-in GPIO pins and offloading some of the functionality that would normally be performed by rules or counters on the Tasmota device into the driver of the MCP23008/MCP23017.</p> <p>These include the following * INTPRI - Interrupt Priority, being able to control the rate at which the MCP23008/MCP23017 is polled to see if any interrupts has occurred since the previous poll. * INTDEF - Interrupt Deffer, being able to control the number of interrupts that are ignored on a specific pin before reporting would occur via telemetry and/or EVENT. * INTTIMER - Interrupt Timer which allows for time based counter reporting, specifically reporting the number of times an interrupt has occurred on interrupt enabled pins. * INTCNT - Works with INTTIMER to enable/disable counting for a specific pin. * INTRETAIN - Keep track of whether an interrupt occurred or not and defer reporting to next telemetry message.</p> <p>The above additions are described in further detail below.</p>"},{"location":"MCP230xx/#advanced-function-1-interrupt-priority-intpri","title":"ADVANCED FUNCTION #1 - INTERRUPT PRIORITY (INTPRI)","text":"<p>The maximum interrupt polling rate is once per approximately 50 milliseconds - This is what the Tasmota firmware allows as a maximum and how it is configured in the MCP23008/MCP23017 driver by default.</p> <p>If you want to reduce the number of interrupt polls per second you may use the INTPRI command parameter as follows:</p> <p><code>sensor29 intpri</code></p> <p>Will give you the current setting via JSON response as follows:</p> <p><code>MQT: stat/tasmota/RESULT = {\"MCP230xx_INTPRI\":{\"D_99\":0}}</code></p> <p>To change the value you may use command as follows:</p> <p><code>sensor29 intpri,x</code></p> <p>Where x is the number of 50ms cycles (between 0 and 20) which will be skipped before the MCP23008/MCP23017 chip is polled for interrupt. The last interrupt recorded by the MCP23008/MCP23017 will be reported via the configured method.</p> <p>For example, lets assume you only want the interrupt polling to occur every 500ms  (i.e. twice per second) you could do command:</p> <pre><code>sensor29 intpri,10 // interrupt polled every 10*50 milliseconds, approximated\n</code></pre>"},{"location":"MCP230xx/#advanced-function-2-interrupt-defer-intdef","title":"ADVANCED FUNCTION #2 - INTERRUPT DEFER (INTDEF)","text":"<p>This setting is useful if you need to defer the reporting of an interrupt by event or telemetry until it has occurred at least X number of times.</p> <p>Syntax: <pre><code>sensor29 intdef,pin         // Will provide current setting of pin\nsensor29 intdef,pin,x       // Will set new deffer value to x (0-15)\n</code></pre></p> <p>Examples: <pre><code>sensor29 intdef,pin,5       // Will only report interrupt when it occurs 5 times\nsensor29 intdef,pin,10      // Will only report interrupt when it has occurred 10 times\n</code></pre></p> <p>Interrupts occurring a number of times prior to the setting will be counted but ignored for reporting purposes.</p>"},{"location":"MCP230xx/#advanced-function-3-interrupt-timer-inttimer","title":"ADVANCED FUNCTION #3 - INTERRUPT TIMER (INTTIMER)","text":"<p>This function is used in conjunction with INTCOUNT (Documented below)</p> <p>It allows a timer to be configured over which period the number of interrupts will be counted.</p> <p>Syntax: <pre><code>sensor29 inttimer          // Will provide the current amount of seconds for timer\nsensor29 inttimer,x        // Allows setting number of seconds (x) for timer interval\n</code></pre></p>"},{"location":"MCP230xx/#advanced-function-4-interrupt-counter-enable-intcnt","title":"ADVANCED FUNCTION #4 - INTERRUPT COUNTER ENABLE (INTCNT)","text":"<p>Enable interrupt counting for a particular pin. This functionality works in conjunction with INTTIMER (Documented above)</p> <p>Syntax: <pre><code>sensor29 intcnt,pin       // Readback current setting of interrupt counting for pin (0=OFF/1=ON)\nsensor29 intcnt,pin,x     // Enable/Disable interrupt counting for pin (x=0=OFF,x=1=ON)\n</code></pre></p> <p>Use case example could be if you want to count the number of times an interrupt occurred on a D0 over a period of 60 seconds. For this we will need the following: <pre><code>sensor29 inttimer,60      // Enable interrupt timer for 60 second interval\nsensor29 intcnt,0,1       // Enable interrupt counter for pin D0\n</code></pre></p> <p>The above will result in the number of interrupts that occur within the 60 second period configured to be counted and then reported via telemetry at the end of the 60 second time.</p> <p>A use case for this would be to determine the RPM of something, or perhaps the number of pulses received from an energy meter within a 60 second period to determine energy usage on a per minute bases... or wind speed from impulses received from an anemometer.</p>"},{"location":"MCP230xx/#advanced-function-5-interrupt-retain-intretain","title":"ADVANCED FUNCTION #5 - INTERRUPT RETAIN (INTRETAIN)","text":"<p>This functionality disables immediate even and/or telemetry reporting for a specific pin that has been configured for any of the interrupt modes listed above.</p> <p>If this is enabled for a particular pin and the pin has an interrupt mode configured the fact that an interrupt condition was met will be remembered (but not reported immediately) and will be reported in a MQTT message when the next telemetry period occurs in the following format:</p> <pre><code>{\"Time\":\"2018-12-06T23:59:26\",\"MCP_INTRETAIN\": {\"D0\":1,\"D1\":0,\"D2\":1,\"D3\":1,\"D4\":0,\"Value\":13}}\n</code></pre> <p>In the example above it means that an interrupt occurred at some point during the previous telemetry period for pins D0, D2, and D3 as indicated by the 1's present for each pin - Pins with a value of 0 means that although the pin was configured for interrupt retain that no interrupt occurred during the previous telemetry period for that particular pin.</p> <p>For the sake of handling bit-wise operations within your home automation software the decimal value of the respective bits are also aggregated into the Value output included in the telemetry message.</p> <p>Syntax: <pre><code>sensor29 intretain,pin       // Readback current setting of interrupt retain for a pin (0=OFF/1=ON)\nsensor29 intretain,pin,x     // Enable/Disable interrupt counting for pin (x=0=OFF,x=1=ON)\n</code></pre></p>"},{"location":"MCP230xx/#output-functions-pin-modes-5-and-6","title":"OUTPUT FUNCTIONS (PIN MODES 5 AND 6)","text":"<p>Enable OUTPUT support by removing the comment (#) for the following compiler directive to your user_config_override.h</p> <p><code>#define USE_MCP230xx_OUTPUT</code></p> <p>This will extend the sensor29 command enabling pinmode 5 and 6 (inverted) for output, for example (nb. the output state will only be used/set with setoption0 = 0):</p> <pre><code>sensor29 0,5,0  // Configure pin 0 as OUTPUT and default to OFF on reset/power-up\nsensor29 0,5,1  // Configure pin 0 as OUTPUT and default to ON on reset/power-up\nsensor29 0,5,2  // Configure pin 0 as OUTPUT and default to the value read from the MCP230xx on reset/power-up\nsensor29 0,6,0  // Configure pin 0 as INVERTED OUTPUT and default to ON on reset/power-up\nsensor29 0,6,1  // Configure pin 0 as INVERTED OUTPUT and default to OFF on reset/power-up\nsensor29 0,6,2  // Configure pin 0 as INVERTED OUTPUT and default to the value read from the MCP230xx on reset/power-up\n</code></pre> <p>Confirmation will be sent using MQT, for example: <pre><code>MQT: stat/tasmota/RESULT = {\"Sensor29_D2\":{\"MODE\":5,\"START_UP\":\"OFF\",\"STATE\":\"OFF\"}}\n</code></pre></p> <p>The only difference between pinmode 5 and pinmode 6 is that pinmode 5 will result in normal output state, i.e. pin will be LOW when OFF whereas pinmode 6 will cause the pin to be HIGH when OFF. This is useful when using relays which have inverted inputs.</p> <p>If SAVE_STATE / setoption0 is enabled in your firmware configuration then the last known state of the pin will be used on power-up/reset thereby ignoring the pull-up parameter in the commands above.</p> <p>To change the state of an output pin you may use: <pre><code>sensor29 0,ON   // Turn pin ON (HIGH if pinmode 5 or LOW if pinmode 6(inverted))\nsensor29 0,OFF  // Turn pin OFF (LOW if pinmode 5 or HIGH if pinmode 6(inverted))\nsensor29 0,T    // Toggle the current state of pin from ON to OFF, or OFF to ON\n</code></pre></p> <p>Additionally all OUTPUT pins will be exposed as RELAYS and ordered behind the normal GPIO based RELAYS. Instead of the above sensor command you can also use the POWERxx command like for any RELAY. If you define INTERLOCK and/or INTERLOCK groups these will also take care about the out pins. The numbering of the RELAY's is following the standard tasmota behavior. Counting from D0 any defined OUT pin will add a new RELAY. Example: D0, D2, D3, D7 are out pins, then D0=POWER1, D2=POWER2, D3=POWER3 and D7=POWER4. Same behavior you can expect when defining PULSETIME for RELAYS.</p> <p>Telemetry response will be provided accordingly, for example: <pre><code>MQT: stat/tasmota/RESULT = {\"S29cmnd_D0\":{\"COMMAND\":\"ON\",\"STATE\":\"ON\"}}\nMQT: stat/tasmota/RESULT = {\"S29cmnd_D0\":{\"COMMAND\":\"OFF\",\"STATE\":\"OFF\"}}\nMQT: stat/tasmota/RESULT = {\"S29cmnd_D0\":{\"COMMAND\":\"TOGGLE\",\"STATE\":\"ON\"}}\n</code></pre></p> <p><code>COMMAND = Command which was sent</code></p> <p><code>STATE = New state after execution of command</code></p> <p>Telemetry data is provided for pins which are enabled for output. For example, if pin 0 was enabled for OUTPUT the following additional telemetry message will be sent by MQTT at the same time as the normal telemetry interval occurs which reports the current states of pins. Additionally you can also use the standard POWERxx reporting.</p> <pre><code>MQT: tele/tasmota/SENSOR = {\"Time\":\"2018-08-18T16:41:20\",\"MCP230XX\":{\"D0\":0,\"D1\":0,\"D2\":1,\"D3\":0,\"D4\":0,\"D5\":0,\"D6\":0,\"D7\":0},\"MCP230_OUT\": {\"OUT_D4\":\"OFF\",\"END\":1}}\n</code></pre> <p>Note the MCP230XX telemetry which provides the current logic state of all the pins and then the second MQT telemetry as MCP230_OUT which indicates the current state of pins configured for OUTPUT - In this case pin 4 or D4</p> <p>Remember to adhere to the current limitations of OUTPUT pins when using the device for switching external devices such as LED's. That being said most readily available relay pc boards available from vendors are optically isolated from the input so these will work perfectly.</p>"},{"location":"MCP9808/","title":"MCP9808 temperature sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MCP9808\n#define USE_MCP9808      // [I2cDriver51] Enable MCP9808 temperature sensor (I2C addresses 0x18 - 0x1F) (+0k9 code)\n#endif\n</code></pre></p> <p>the MCP9808 is an I<sup>2</sup>C temperature sensor. Tasmota support up to 8 devices.</p>"},{"location":"MCP9808/#configuration","title":"Configuration","text":""},{"location":"MCP9808/#wiring","title":"Wiring","text":"MCP9808 ESP VCC 3.3V GND GND SDA GPIOx SCL GPIOy"},{"location":"MCP9808/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect automatically up to 8 MCP9808 and display sensor readings.</p> <p>and in MQTT topic (according to TelePeriod):   <pre><code>{\"Time\":\"2020-01-01T00:00:00\",\"MCP9808\":{\"Temperature\":24.7},\"TempUnit\":\"C\"}\n</code></pre></p>"},{"location":"MCP9808/#breakout-boards","title":"Breakout Boards","text":""},{"location":"MCP9808/#datasheet","title":"Datasheet","text":"<p>MCP9808 </p>"},{"location":"MFRC522/","title":"MFRC522 RFID reader","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_SPI                         // Hardware SPI using GPIO12(MISO), GPIO13(MOSI) and GPIO14(CLK) in addition to two user selectable GPIOs(CS and DC)\n#define USE_RC522                       // Add support for MFRC522 13.56Mhz Rfid reader (+6k code)\n#define USE_RC522_DATA_FUNCTION         // Add support for reading data block content (+0k4 code)\n#define USE_RC522_TYPE_INFORMATION      // Add support for showing card type (+0k4 code)\n</code></pre></p> <p>The MFRC522 is a highly integrated reader/writer IC for contactless communication at 13.56 MHz. The MFRC522 reader supports ISO/IEC 14443 A/MIFARE and NTAG. Datasheet.</p> <p>This reader is ubiquitous in many Arduino starter and sensor kits. It uses SPI protocol for communication with ESP.</p>"},{"location":"MFRC522/#wiring","title":"Wiring","text":"MFRC522 ESP8266 Tasmota SDA GPIO0..5,15,16 RC522 CS SCK GPIO14 SPI CLK MOSI GPIO13 SPI MOSI MISO GPIO12 SPI MISO IRQ not used GND GND RST GPIO0..5,15,16 RC522 Rst 3V3 3V3 <p>Warning : on esp8266, as the RST pin is pulling the signal high by default, gpio15 cannot be used for that signal. Please check esp8266 gpios specifications or the table in the section GPIO Overview</p>"},{"location":"MFRC522/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>RC522 Rst</code> </li> <li>GPIOy to <code>RC522 CS</code> </li> <li>GPIO12 to <code>SPI MISO</code> </li> <li>GPIO13 to <code>SPI MOSI</code> </li> <li>GPIO14 to <code>SPI CLK</code> </li> </ul> <p>The module will reboot when you save this configuration.</p> <p>During start-up the following information should be visible in your console output:</p> <p><pre><code>00:00:00 MFR: RC522 Rfid Reader detected\n</code></pre> If the device was not found please check your wiring and configuration and confirm that everything is as it should be.</p> <p>Example</p> <p>Configured using NodeMCU on pins: D1 (connected to RC522 Rst) and D8 (connected to RC522 CS)</p> <p></p>"},{"location":"MFRC522/#usage","title":"Usage","text":"<p>Tasmota will scan for a new card detect 4 times per second and if found will report it via immediate telemetry.</p> <p>The output on the console will look similar to the below when a new card is detected</p> <pre><code>13:10:50.346 MQT: tele/rfid-test/SENSOR = {\"Time\":\"2021-01-23T13:10:50\",\"RC522\":{\"UID\":\"BA839D07\",\"Data\":\"\",\"Type\":\"MIFARE 1KB\"}}\n</code></pre> <p>The UID of the card/tag is reported and any text stored in BLOCK 1 of a Mifare Classic card (up to 15 characters in length) is reported in the <code>DATA</code> field of the JSON sent via telemetry. Please note that the <code>DATA</code> field cannot contain spaces.</p>"},{"location":"MFRC522/#using-the-uid-or-data","title":"Using the UID or DATA","text":"<p>For the purpose of using card/tag data on the device itself you will need to use rules along with the events that are caused.</p> <p>Example</p> <p>Example rule for responding to a specific UID on the device when a card/tag matching a specific UID is presented</p> <pre><code>rule1 on RC522#UID=BA839D07 do power on endon\n</code></pre>"},{"location":"MFRC522/#breakout-boards","title":"Breakout Boards","text":""},{"location":"MGC3130/","title":"MGC3130 3D tracking and gesture controller","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MGC3130\n#define USE_MGC3130     // [I2cDriver27] Enable MGC3130 Electric Field Effect Sensor (I2C address 0x42) (+2k7 code, 0k3 mem)\n#endif\n</code></pre></p> <p>The MGC3130 is an electrical-field (E-field) based three-dimensional (3D) tracking and gesture controller from Microchip. There are several boards available, which are connected via I<sup>2</sup>C. </p>"},{"location":"MGC3130/#usage","title":"Usage","text":"<ul> <li>wire up SDA and SDL and configure as usual in Tasmota</li> <li>wire up RESET and TRFR (names may vary on different boards) to free GPIO's and configure them accordingly (TRFR is GPIO: MGC3130_XFER) </li> </ul>"},{"location":"MGC3130/#expected-behaviour","title":"Expected behaviour","text":"<ul> <li>after boot gestures (FLICK, EDGE_FLICK, TOUCH, TAP, DOUBLE_TAP) will be sensed and published via MQTT </li> </ul> <p>Flicks:  Taps:   </p> <ul> <li>you can select different modes with the COMMANDS, touch will always be sensed and report the duration in 1/20 seconds.</li> </ul> <p>Touch:  </p> <ul> <li>the airwheel gesture will be sensed and published as \"AW\" via MQTT with values between 0 and 1023 - clockwise up  </li> </ul> <p>Airwheel:  </p> <p> </p> <ul> <li>after entering position mode the values for x,y,z will be sensed and published via MQTT with values between 0 and 1023 for x,y. Data is only published, when z is in the upper half (z values are between 0 and 511).  </li> </ul> <p>Location sensing in active volume:  </p> <p> </p> <ul> <li>near the surface you can move your finger without producing location data, i.e. to change the mode.  </li> </ul> <p> </p> <ul> <li>at the moment the circle gestures ((COUNTER)CLOCKWISE) must be activated with the COMMAND: SENSOR91 1 (we must wait 250ms after the start and can not activate it in the init function, this might differ depending on the board firmware)</li> </ul>"},{"location":"MGC3130/#commands","title":"Commands","text":"<ul> <li>SENSOR36 0 - next mode</li> <li>SENSOR36 1 - gesture mode </li> <li>SENSOR36 2 - air wheel mode</li> <li>SENSOR36 3 - position mode (ATTENTION: this will send a lot of data!)</li> </ul>"},{"location":"MGC3130/#mqtt-messages","title":"MQTT Messages","text":"<ul> <li>The terminology follows the documentation from MICROCHIP, but is shortened to save space especially for RULES. The board is to be viewed like a map, where UP is NORTH and RIGHT is EAST and so on. The big central part of the surface is CENTRE.</li> <li>A movement (FLICK) from LEFT to RIGHT is translated to FLICK-WEST-EAST and then finally shortened to {FL_WE:1}.  </li> <li>If you only do a flick at the left edge (with a short movement to the right) this will be EDGE-FLICK-WEST-EAST and then in the final message: {E_FL_WE:1}. </li> <li>A TOUCH (leaving your finger on the board) reports the location and the duration (in counts of 50ms). So touching the center for a second, publishes messages from {TH_C:1} up to (approx.) {TH_C:20}.  </li> <li>Touching for less than 1,25 seconds triggers a TAP-message in the moment of leaving the surface, so on the lower edge we will see: {TP_S:1} (plus some {TH_S:1...x} for the contact duration).  </li> <li>Double Tap (like a double click on your mouse) works similar, but will (at the moment) always trigger a (single) TAP at the same position. Example for the upper edge: {DT_N:1} and before that: {TP_N:1} and some {TH_N:1...x}.  </li> <li>Airwheel is a circular finger movement above the sensor, which will trigger a message {AW:0 ... 1023}.  </li> <li>In position mode we get {X:0...1023,Y:0...1023,Z:0...511}, where X and Y are 0 in the lower left (west-south) corner. The z value is not published  in close proximity to the surface in order to have a chance to switch to another mode with a TOUCH, TAP or DOUBLE-TAP. So the active sensing volume is in the upper z-half of the theoretical maximum sensing volume.  </li> </ul>"},{"location":"MGC3130/#examples","title":"Examples","text":"<p>A possible solution to cycle through the modes only with the sensor by double tapping the center is using rules: <code>rule1 on Tele-MGC3130#DT_C do sensor91 0 endon</code> or with a \"long\" touch of a second <code>rule1 on Tele-MGC3130#TH_C &gt; 20 do sensor91 0 endon</code></p>"},{"location":"MGC3130/#considerations","title":"Considerations","text":"<p>This is an extremely versatile sensor and the main problem is not to get it to work somehow in TASMOTA, but to make it usable in a sensible way. We can measure and publish all kinds of data in parallel, but this will likely end up in an unusable situation.  It is important to have a basic understanding of the sensor, to not get confused with seemingly unreasonable messages (DOUBLE TAP triggers a TOUCH (or more than one), then a TAP (after the first lift of the finger) and then a DOUBLE TAP. The naming conventions of the gestures are according to the data sheets from Microchip, because if we only would have simple FLICKS, it would have made it easy to use: UP, DOWN, LEFT, RIGHT. But we have EDGE FLICKS and various TOUCHES too, and so the direction name could be ambiguous. That's why we (have to) use NORTH-SOUTH, EAST-WEST ... and NORTH, SOUTH, .... and CENTRE. To make the MQTT messages not too long, some useful abbreviations have to be found. This is definitely work in progress.</p>"},{"location":"MGC3130/#known-issues","title":"Known Issues","text":"<p>After the initial flashing the ESP8266/TASMOTA can freeze at startup with a connected sensor board. If this happens disconnect the wires from the MGC3130-board (I<sup>2</sup>C-wires should be enough), reboot and reconnect. Keep in mind, that in general many things will interfere with an electrical field. In certain places it can simply be impossible to use such kind of sensor. For testing reasons it is fine to connect the ESP8266-device to the USB-Port of a computer (for POWER and SERIAL), but this will likely lead to weird effects in some cases (i.e. reading of nonsense-location-data by simply touching the keyboard of a connected laptop). The chip can saturate the I<sup>2</sup>C-bus and additional I<sup>2</sup>C-devices can lead to problems.  The driver was developed and tested on a SKYWRITER-board from PIMORONI. The behavior of other boards can not be guaranteed.</p>"},{"location":"MH-Z19B/","title":"MH-Z19 CO<sub>2</sub> Sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MHZ19 \n#define USE_MHZ19       // Add support for MH-Z19 CO2 sensor (+2k code)\n#endif\n</code></pre></p> <p> </p> <p>The MH-Z19 sensor is manufactured by Winsen Lt., China and the measurement method used is based on the non-dispersive infrared (NDIR) principle to detect the existence of CO<sub>2</sub> in the air.</p> <p>Key features according to the manufacturer are:</p> <ul> <li>good sensitivity</li> <li>non-oxygen dependent</li> <li>long life</li> <li>built-in temperature compensation</li> <li>UART serial interface and Pulse Width Modulation (PWM) output</li> </ul> <p>Principle of operation:   The main components of an NDIR sensor are an infrared source (lamp), a sample chamber or light tube, a light filter and an infrared detector. The IR light is directed through the sample chamber towards the detector. In parallel there is another chamber with an enclosed reference gas, typically nitrogen. The gas in the sample chamber causes absorption of specific wavelengths according to the Beer\u00f1Lambert law, and the attenuation of these wavelengths is measured by the detector to determine the gas concentration. The detector has an optical filter in front of it that eliminates all light except the wavelength that the selected gas molecules can absorb. </p>"},{"location":"MH-Z19B/#wiring","title":"Wiring","text":"ESP MH-Z19 VCC +5V Vin GND GND TX Rx RX Tx <p>In some situations if you only get <code>0 ppm</code> displayed it may be necessary to set \"TX GPIO1\" to \"MHZ Rx\" and \"RX GPIO3\" to \"MHZ Tx\" and correspondingly reverse the cabling for RX/TX.  See here for more details.</p>"},{"location":"MH-Z19B/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>RX to <code>MHZ Tx</code></li> <li>TX to <code>MHZ Rx</code></li> </ol> <p></p> <p>After a reboot the driver will detect MH-Z19 automatically and display measurements.</p> <p></p> <p>Measure range can be selected with command:</p> <ul> <li><code>sensor15 1000</code> for 1000 ppm range</li> <li><code>sensor15 2000</code> for 2000 ppm range</li> <li><code>sensor15 3000</code> for 3000 ppm range</li> <li><code>sensor15 5000</code> for 5000 ppm range</li> </ul> <p>Full commands list for the sensor</p>"},{"location":"MH-Z19B/#model-comparison","title":"Model Comparison","text":"Product model MH-Z19B MH-Z19C MH-Z19D Power supply voltage 4.5~ 5.5 V DC DC (5.0 \u00b1 0.1) V DC (5.0 \u00b1 0.1) V Average current &lt; 60mA(@5V) &lt;40mA (@5V power supply) &lt;40mA (@5V power supply) Peak current 150 mA (@5V supply) 125mA (@5V power supply) 125 mA (@5V power supply) Measuring range 0~5000ppm, 0~10000ppm 400<sub>5000ppm(optional)400</sub>10000ppm range could be customized 400~10000ppm(optional) Warm-up time 3min 2.5min 1min Response time T90&lt;120s T90&lt; 120s T90 &lt;120s Working temperature 0 ~ 50 \u2103 -10\u2103 ~ 50\u2103 -10\u2103 ~ 50\u2103 Working humidity 0~ 90% RH (No condensation) 0~ 90% RH (No condensation) 0~ 90% RH (No condensation) Storage temperature -20\u2103\uff5e60\u2103 -20\u2103\uff5e60\u2103 Source link link link <p>Available from AliExpress</p>"},{"location":"MLX90614/","title":"MLX90614 infrared thermometer","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MLX90614\n#define USE_MLX90614            // [I2cDriver32] Enable MLX90614 ir temp sensor (I2C address 0x5a) (+0.6k code)\n#endif\n</code></pre></p> <p>The MLX90614 is an infrared thermometer for non-contact temperature measurements.</p>"},{"location":"MLX90614/#configuration","title":"Configuration","text":""},{"location":"MLX90614/#wiring","title":"Wiring","text":"MLX90614 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"MLX90614/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect MLX90614 automatically and display Temperature measurements.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2019-11-11T00:03:30\",\"MLX90614\":{\"OBJTMP\":23.8,\"AMBTMP\":22.7}}\n</code></pre>"},{"location":"MLX90614/#breakout-boards","title":"Breakout Boards","text":""},{"location":"MLX90614/#mlx90615","title":"MLX90615","text":"<p>This driver will also work with MLX90615 sensor with some code alterations.</p> <p>Change lines 26-30 <pre><code>#define I2_ADR_IRT      0x5b\n\n#define MLX90614_RAWIR1 0x05\n#define MLX90614_TA     0x26\n#define MLX90614_TOBJ1  0x27\n</code></pre></p> <p></p>"},{"location":"MLX90640/","title":"MLX90640 Far infrared thermal sensor array","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MLX90640\n#define USE_MLX90640        // [I2cDriver53] Enable MLX90640 IR array temperature sensor (I2C address 0x33) (+20k code)\n#endif\n</code></pre></p> <p>The MLX90640 is an IR sensor array of 32x24 pixels, that is connected via a usual I2C-connection. Intended use case is to measure multiple points of interest of an object without the need to directly put a sensor on it, for instance if you are not allowed to apply hardware modifications to a heating. The update frequency of the measurements is approximately 1 per second. In the first driver version 6 POI\u2018s are freely selectable (POI1..6). POI-0 is reserved for the ambient temperature of the sensor (Ta). Data is published at Teleperiod as an array [POI-0...6]:  </p> <pre><code>{\n    \"Time\": \"2020-09-11T09:18:08\",\n    \"MLX90640\": {\n        \"Temperature\": [30.8, 28.5, 24.2, 25.7, 24.5, 24.6, 24.9]\n    },\n    \"TempUnit\": \"C\"\n}\n</code></pre>"},{"location":"MLX90640/#configuration","title":"Configuration","text":""},{"location":"MLX90640/#wiring","title":"Wiring","text":"MLX90640 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"MLX90640/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect MLX90614 automatically and display Temperature measurements.  </p>"},{"location":"MLX90640/#commands","title":"Commands","text":"<p>Command: MLXPOIn xxyy, n ist poi 1...6, xx 0...31, yy 0...23 Example: Point 2 at x:12 and y:08 results in mlxpoi2 1208 </p> <p>The configuration can be saved via RULES.  </p>"},{"location":"MLX90640/#web-gui","title":"Web-GUI","text":"<p>In order to find the correct coordinates a thermal view is provided via webGUI, where points can be validated and/or updated. A stable Wifi-setup is mandatory for reliable operation.  </p> <p></p>"},{"location":"MLX90640/#breakout-boards","title":"Breakout Boards","text":""},{"location":"MPR121/","title":"MPR121 capacitive touch sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MPR121\n#define USE_MPR121      // [I2cDriver23] Enable MPR121 controller (I2C addresses 0x5A, 0x5B, 0x5C and 0x5D) in input mode for touch buttons (+1k3 code)\n#endif\n</code></pre></p> <ul> <li>12-button or touch pad I<sup>2</sup>C controller</li> <li>Driver supports up to 4x MPR121 controllers (= 48 buttons per ESP8266)</li> <li>Electrodes can be covered with adhesive paper and adhesive plastic foil for labeling and symbols</li> <li>Break-out and touch button PCBs ~ 2\u20ac at AliExpress</li> <li>Break-out PCB ~ $8 at Adafruit</li> </ul>"},{"location":"MPR121/#technical-data-from-the-manufacturer","title":"Technical Data from the manufacturer","text":"<ul> <li>MPR121 Fact sheet</li> <li>MPR121 Data sheet</li> <li>AN3889 MPR121 capacitive sensing settings</li> <li>AN3890 MPR121 capacitive sensing filtering and timing</li> <li>AN3891 MPR121 touch sensing baseline system</li> <li>AN3892 MPR121 touch sensing jitter and false touch rejection</li> <li>AN3893 MPR121 proximity sensing</li> <li>AN3894 MPR121 LED driver system</li> <li>AN3895 MPR121 serial communication</li> <li>AN4600 MPR121 Designing a Touch Panel</li> <li>MPR121 Evaluation board schematics</li> </ul>"},{"location":"MPR121/#wiring-breakout-boards","title":"Wiring breakout boards","text":"Breakout ESP VCC/VIN +3.3VDC GND GND SCL GPIO I<sup>2</sup> SCL SDA GPIO I<sup>2</sup> SDA IRQ NC"},{"location":"MPR121/#i2c-address-selection","title":"I<sup>2</sup>C address selection","text":"<p>Connect the ADD(R) pin/pad to one of the following pins/pads:</p> Address ADD(R) 0x5A NC 0x5B +3.3VDC 0x5C GPIO I<sup>2</sup> SDA 0x5D GPIO I<sup>2</sup> SCL"},{"location":"MPR121/#tasmota-settingscompile-tasmota-with-define-use_mpr121-added-in-user_config_overrideh","title":"Tasmota SettingsCompile Tasmota with <code>#define USE_MPR121</code> added in <code>user_config_override.h</code>","text":"<p>The driver will detect the I<sup>2</sup>C addresses of the MPR121s automatically. The MPR121 chip (or breakout board) must be connected to the ESP8266 and the I<sup>2</sup>C GPIO pins must be configured:</p> <p></p>"},{"location":"MPR121/#generally-available-types-of-breakout-boards","title":"Generally available types of breakout boards","text":""},{"location":"MPU-6050/","title":"MPU-6050 gyroscope and accelerometer","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MPU6050\n#define USE_MPU6050                // [I2cDriver25] Enable MPU6050 sensor (I2C address 0x68 AD0 low or 0x69 AD0 high) (+3K3 of code and 188 Bytes of RAM)\n  #define USE_MPU6050_DMP          // Enable in MPU6050 to use the DMP on the chip, should create better results (+8k6 of code)\n#endif\n</code></pre></p> <p>The MPU-6050 combines a 3-axis gyroscope and a 3-axis accelerometer on the same silicon die, together with an onboard Digital Motion Processor\u2122 (DMP\u2122), which processes complex 6-axis MotionFusion algorithms.</p> <p>Datasheet</p>"},{"location":"MPU-6050/#configuration","title":"Configuration","text":""},{"location":"MPU-6050/#wiring","title":"Wiring","text":"MPU-6050 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy XDA XCL AD0 INT"},{"location":"MPU-6050/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect MCU-69050 automatically and display measurements.</p> <p></p> <p>Sensor sends a <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2019-12-10T19:37:50\",\"MPU6050\":{\"Temperature\":27.7,\"AccelXAxis\":-7568.00,\"AccelYAxis\":-776.00,\"AccelZAxis\":12812.00,\"GyroXAxis\":270.00,\"GyroYAxis\":-741.00,\"GyroZAxis\":700.00},\"TempUnit\":\"C\"}\n</code></pre>"},{"location":"MPU-6050/#digital-motion-processor-enabled","title":"Digital Motion Processor Enabled","text":"<p>If you define flag <pre><code>  #define USE_MPU6050_DMP          // Enable in MPU6050 to use the DMP on the chip, should create better results (+8k6 of code)\n</code></pre> enabling Digital Motion Processor\u2122 (DMP\u2122) you will get additional Yaw, Pitch and Roll measurements and more accurate measurements overall</p> <p></p> <p>Sensor sends an expanded <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>tele/tasmota/SENSOR = {\"Time\":\"2019-12-10T19:24:55\",\"MPU6050\":{\"Temperature\":25.0,\"AccelXAxis\":756.00,\"AccelYAxis\":-1409.00,\"AccelZAxis\":2152.00,\"GyroXAxis\":0.00,\"GyroYAxis\":-1.00,\"GyroZAxis\":10.00,\"Yaw\":0.86,\"Pitch\":-1.45,\"Roll\":-10.76},\"TempUnit\":\"C\"}\n</code></pre>"},{"location":"MPU-6050/#breakout-boards","title":"Breakout Boards","text":""},{"location":"MPU-6050/#rule-triggers","title":"Rule Triggers","text":"<p>The following trigger events are supported for use in Rules: <pre><code> ON MPU6050#Temperature DO &lt;command&gt; ENDON  \n ON MPU6050#AccelXAxis DO &lt;command&gt; ENDON   \n ON MPU6050#AccelYAxis DO &lt;command&gt; ENDON   \n ON MPU6050#AccelZAxis DO &lt;command&gt; ENDON\n ON MPU6050#GyroXAxis DO &lt;command&gt; ENDON    \n ON MPU6050#GyroYAxis DO &lt;command&gt; ENDON    \n ON MPU6050#GyroZAxis DO &lt;command&gt; ENDON\n\n ON MPU6050#Yaw DO &lt;command&gt; ENDON  \n ON MPU6050#Roll DO &lt;command&gt; ENDON \n ON MPU6050#Pitch DO &lt;command&gt; ENDON\n</code></pre> Example: <pre><code> ON MPU6050#Yaw DO publish espMotion/sensor/data/Yaw %value% ENDON\n</code></pre></p>"},{"location":"MQTT/","title":"MQTT","text":"<p>MQTT is the main protocol for controlling Tasmota devices</p> <p>After you have a working MQTT broker you need to configure Tasmota to communicate with it.  If you have no knowledge of what MQTT is, you can learn about it from MQTT Essentials articles. </p>"},{"location":"MQTT/#warning","title":"Warning","text":"<p>All ESP32 devices (including all varaiants like <code>ESP32c&lt;x&gt;</code> and <code>ESP32s&lt;x&gt;</code>) natively support encrypted MQTT over TLS. ESP8266 do not natively support TLS unless you compile your own variant with TLS support. Unencrypted MQTT should be limited to own LAN, external unencrypted communication is a very serious security flaw, your device can become a malware bot!</p>"},{"location":"MQTT/#configure-mqtt","title":"Configure MQTT","text":"<p>If you flashed a precompiled .bin or didn't enter MQTT info in <code>user_config_override.h</code> before compiling you have to configure it on your device first.</p>"},{"location":"MQTT/#configure-mqtt-using-webui","title":"Configure MQTT using WebUI","text":"<p>Go to Configuration -&gt; Configure Other and make sure \"MQTT Enable\" box is checked.  Once MQTT is enabled you need to set it up using Configuration -&gt; Configure MQTT. </p> <p>Tip</p> <p>While here, you might as well change the Friendly Name into something more descriptive than generic \"Tasmota\".This is highly recommended for Home Assistant autodiscovery feature.</p> <p> </p> <p>For a basic setup you only need to set Host, User and Password but it is recommended to change Topic to avoid issues. Each device should have a unique Topic.</p> <ul> <li>Host = your MQTT broker address or IP (mDNS is not available in the official Tasmota builds, means no <code>.local</code> domain!) </li> <li>Port = your MQTT broker port (default port is set to 1883)</li> <li>Client = device's unique identifier. In 99% of cases it's okay to leave it as is, however some Cloud-based MQTT brokers require a ClientID connected to your account.  Can not be identical to Topic!</li> <li>User = username for authenticating on your MQTT broker</li> <li>Password = password for authenticating on your MQTT broker</li> <li>Topic = unique identifying topic for your device (e.g. <code>hallswitch</code>, <code>kitchen-light</code>). <code>%topic%</code> in wiki references to this. It is recommended to use a single word for the topic.</li> <li>FullTopic = full topic definition. Modify it if you want to use multi-level topics for your devices, for example <code>lights/%prefix%/%topic%/</code> or <code>%prefix%/top_floor/bathroom/%topic%/</code> etc.</li> </ul>"},{"location":"MQTT/#configure-mqtt-using-backlog","title":"Configure MQTT using Backlog","text":"<p>Using a serial connection or the WebUI Console you can issue (or even better, paste a premade) Backlog command for quick and easy MQTT setup.</p> <pre><code>Backlog mqtthost &lt;mqtt_broker_address&gt;; mqttport &lt;mqtt_broker_port&gt;; mqttuser &lt;username&gt;; mqttpassword &lt;password&gt;; topic &lt;device_topic&gt;\n</code></pre> <p>After a reboot all necessary MQTT settings are configured. Don't forget, you can use Backlog for all commands!</p>"},{"location":"MQTT/#commands-over-mqtt","title":"Commands over MQTT","text":"<p>To send commands and view responses you'll need an MQTT client.</p> <p>Commands over MQTT are issued to Tasmota by using topic <code>cmnd/%topic%/&lt;command&gt;</code> and payload <code>&lt;parameter&gt;</code>. If there is no <code>&lt;parameter&gt;</code> (an empty MQTT message/payload), a query is sent for current status of the <code>&lt;command&gt;</code>.</p> <p>Tip</p> <p>If you are using <code>mosquitto_pub</code> command-line tool, you can issue an empty payload using the <code>-n</code> command line option.  If your MQTT client cannot issue an empty payload, you can use the single character <code>?</code> instead.</p>"},{"location":"MQTT/#command-flow","title":"Command flow","text":"<p>The following example will go in depth on what happens when you send an MQTT command.</p> <p>A device was flashed and configured with the FullTopic as default <code>%prefix%/%topic%/</code> and the Topic set to <code>tasmota_switch</code>. We want to see the current status of the switch and change it.</p> <p>By looking at the commands table we can learn about the <code>POWER</code> command and options associated with it. </p>"},{"location":"MQTT/#ask-the-device-for-status","title":"Ask the device for status","text":"<p><pre><code>cmnd/tasmota_switch/Power \u2190     // an empty message/payload sends a status query\n    \u21b3 stat/tasmota_switch/RESULT \u2192 {\"POWER\":\"OFF\"}  \n    \u21b3 stat/tasmota_switch/POWER \u2192 OFF\n</code></pre>   We can see that the switch (device's relay) is turned off.</p>"},{"location":"MQTT/#send-a-command-to-toggle-the-relay","title":"Send a command to toggle the relay","text":"<p><pre><code>cmnd/tasmota_switch/Power TOGGLE\n    \u21b3 // Power for relay 1 is toggled\n    \u21b3 stat/tasmota_switch/RESULT \u2192 {\"POWER\":\"ON\"}  \n    \u21b3 stat/tasmota_switch/POWER \u2192 ON\n</code></pre>   We've sent the toggle command and received confirmation that the switch is turned on.</p> <p>Tip</p> <p>By default, Tasmota replies to all commands through <code>.../RESULT</code>. This behavior can be changed using SetOption4, which makes the commands reply on the endpoint matching the command name, ex. <code>cmnd/tasmota/PowerOnState</code> will send a response on <code>stat/tasmota/POWERONSTATE</code>.</p>"},{"location":"MQTT/#examples","title":"Examples","text":"<p>In the following examples <code>%topic%</code> is <code>tasmota</code>, FullTopic is <code>%prefix%/%topic%/</code>, and prefixes are default <code>cmnd/stat/tele</code>:</p> <ul> <li> <p>The relay can be controlled with <code>cmnd/tasmota/POWER on</code>, <code>cmnd/tasmota/POWER off</code> or <code>cmnd/tasmota/POWER toggle</code>. Tasmota will send a MQTT status message like <code>stat/tasmota/POWER ON</code>.</p> </li> <li> <p>Power state message can be sent with the retain flag set using <code>PowerRetain 1</code>.</p> </li> <li> <p>Telemetry messages can also be sent with the retain flag using <code>SensorRetain</code>.</p> </li> <li> <p>For Sonoff Dual or Sonoff 4CH the relays need to be addressed with <code>cmnd/tasmota/POWER&lt;x&gt;</code>, where {x} is the relay number from 1 to 2 (Sonoff Dual) or from 1 to 4 (Sonoff 4CH). <code>cmnd/tasmota/POWER4 off</code> turns off the 4th relay on a Sonoff 4CH.</p> </li> <li> <p>MQTT topic can be changed with <code>cmnd/tasmota/Topic tasmota1</code> which reboots Tasmota and changes the <code>%topic%</code> to <code>tasmota1</code>. From that point on MQTT commands should look like <code>cmnd/tasmota1/POWER on</code>.</p> </li> <li> <p>The OTA firmware location can be made known to tasmota with <code>cmnd/tasmota/OtaUrl http://ota.tasmota.com/tasmota/release/tasmota.bin</code>. Reset to default with <code>cmnd/tasmota/OtaUrl 1</code>.</p> </li> <li> <p>Upgrade OTA firmware from the OtaUrl server with <code>cmnd/tasmota/Upgrade 1</code>.</p> </li> <li> <p>Show all status information with <code>cmnd/tasmota/Status 0</code>.</p> </li> <li> <p>The button can send a MQTT message to the broker that in turn will switch the relay. To configure this you need to perform <code>cmnd/tasmota/ButtonTopic tasmota</code> where tasmota equals to Topic. The message can also be provided with the retain flag by <code>cmnd/tasmota/ButtonRetain on</code>.</p> </li> <li> <p>Sonoff Pow (and any device with sensors) status can be requested manually with <code>cmnd/tasmota/status 8</code>. Additionally, Tasmota periodically sends telemetry every TelePeriod, which defaults to 300 seconds (5 minutes).</p> </li> <li> <p>When a Sonoff Pow (and any device with power metering sensors) threshold like PowerLow has been met a message <code>tele/tasmota/POWER_LOW ON</code> will be sent. When the error is corrected a message <code>tele/tasmota/POWER_LOW OFF</code> will be sent.</p> </li> </ul> <p>While most MQTT commands will result in a message in JSON format the power status feedback will always be returned like <code>stat/tasmota/POWER ON</code> as well.</p> <p>Telemetry data will be sent by prefix <code>tele</code> like <code>tele/tasmota/SENSOR {\"Time\":\"2017-02-16T10:13:52\", \"DS18B20\":{\"Temperature\":20.6}}</code></p>"},{"location":"MQTT/#mqtt-topic-definition","title":"MQTT Topic Definition","text":""},{"location":"MQTT/#fulltopic","title":"FullTopic","text":"<p>This is the MQTT topic used to communicate with Tasmota over MQTT. It is created using tokens placed within a user definable string (100 character limit). The tokens are substituted dynamically at run-time. Available substitution tokens are:</p> <ul> <li><code>%prefix%</code> = one of three prefixes as defined by commands <code>Prefix1</code> (default = <code>cmnd</code>), <code>Prefix2</code> (default = <code>stat</code>) and <code>Prefix3</code> (default = <code>tele</code>).</li> <li><code>%topic%</code> = one of five topics as defined by commands <code>Topic</code>, <code>GroupTopic</code>, <code>ButtonTopic</code>, <code>SwitchTopic</code> and <code>MqttClient</code>.</li> <li><code>%hostname%</code> = the hostname of the device as defined through the web UI (default = <code>%s-%04d</code>) or via <code>Hostname</code> command.</li> <li><code>%id%</code> =  MAC address of the device.</li> </ul> <p>Tip</p> <p>These substitution tokens will be used in examples across the documentation</p> <p>If <code>FullTopic</code> does not contain the <code>%topic%</code> token, the device will not subscribe to <code>GroupTopic</code> and <code>FallbackTopic</code>.</p> <p>Tip</p> <p>The order of %prefix% and %topic% doesn't matter, unless you have enabled Auto-discovery for Home Assistant (<code>SetOption19</code>). Enabling this option re-formats the FullTopic to required order.</p> <p>Using the tokens the following example topics can be made:</p> <ul> <li><code>FullTopic %prefix%/%topic%/</code> default</li> <li><code>FullTopic tasmota/%topic%/%prefix%/</code></li> <li><code>FullTopic tasmota/bedroom/%topic%/%prefix%/</code></li> <li><code>FullTopic penthouse/bedroom1/bathroom2/%topic%/%prefix%/</code></li> <li><code>FullTopic %prefix%/home/cellar/%topic%/</code></li> </ul>"},{"location":"MQTT/#prefix","title":"%prefix%","text":"<p>Tasmota uses 3 prefixes for forming a FullTopic:</p> <ul> <li><code>cmnd</code> - prefix to issue commands; ask for status</li> <li><code>stat</code> - reports back status or configuration message</li> <li><code>tele</code> - reports telemetry info at specified intervals</li> </ul> <p>Warning</p> <p>To solve possible MQTT topic loops it is strongly suggested that you use the <code>%prefix%</code> token in all of your FullTopics. Status and telemetry do not need a prefix.</p>"},{"location":"MQTT/#topic","title":"%topic%","text":"<p>All MQTT status messages will be sent using the configurable <code>%topic%</code> which must be made unique by the user. It can be called <code>bedroom</code> but it could also be called <code>XP-TS_10</code> as long as the user knows what it is and where to find it.</p> <p>Default Topic is <code>tasmota_XXXXXX</code> where <code>XXXXXX</code> is unique and derives from the last 6 characters of the MAC address</p> <p>The use of the <code>%topic%</code> token is mandatory in case you want to use <code>ButtonTopic</code> and/or <code>SwitchTopic</code>. It also provides for GroupTopic and Fallback Topic functionality.</p> <p>Tip</p> <p>Use <code>%prefix%</code> and <code>%topic%</code> tokens at all time within your FullTopic definition!</p>"},{"location":"MQTT/#grouptopic","title":"GroupTopic","text":"<p>Having two devices with the same topic allowed for MQTT commands to be sent once to make the devices act in conjunction. That inspired a third topic called GroupTopic.  Devices with the same GroupTopic will all listen to that GroupTopic and react to the same MQTT command sent to it. You can use this to take global actions like updating firmware on all devices or split up devices into different groups using a unique GroupTopic for each group.</p> <p>Default GroupTopic is <code>tasmotas</code></p>"},{"location":"MQTT/#fallback-topic","title":"FallBack Topic","text":"<p>Initially Tasmota had one MQTT configurable topic planned called Topic. It soon became apparent that when two devices come online with the same topic this would be a challenge, to say the least!</p> <p>Tasmota then introduced a unique, non-configurable \"FallBack Topic\" that allows MQTT communication regardless of the configurable topic. This fallback topic is just what it is meant to be: a fallback topic in case of emergency!</p> <p>By default the Fallback Topic is <code>DVES_XXXXXX_fb</code> where xxxxxx is derived from the last 6 characters of the device's MAC address (excluding <code>:</code>). It might look something like this: <code>DVES_3D5E26_fb</code>. You can find out the DVES code by looking at Information page in the webUI or issuing <code>Status 6</code>: <pre><code>12:36:17 MQT: stat/tasmota/STATUS6 = {\"StatusMQT\":{\"MqttHost\":\"1.1.1.1\",\"MqttPort\":1883,\"MqttClientMask\":\"DVES_%06X\",\"MqttClient\":\"DVES_3D5E26\",\"MqttUser\":\"tasmota\",\"MqttCount\":1,\"MAX_PACKET_SIZE\":1000,\"KEEPALIVE\":30}}\n</code></pre></p>"},{"location":"MQTT/#lwt-topic-last-will-and-testament","title":"LWT Topic (Last Will and Testament)","text":"<p>On connection to the MQTT broker tasmota uses the Last Will and Testament (LWT) feature that instructs the broker to generate a notification about an ungracefully disconnect or timeout.</p> <p>The topic to listen to for the state of this specific client is <code>tele/&lt;TOPIC&gt;/LWT</code> that with the mosquitto MQTT broker produces an output like: <pre><code>$ mosquitto_sub -t \"tele/tasmota_XXXXXX/LWT\"\nOffline\nOnline\n</code></pre></p> <p>The full LWT topic can be found in the tasmota console at boot: <pre><code>15:51:51.281 MQT: tele/tasmota_XXXXXX/LWT = Online (retained)\n</code></pre></p>"},{"location":"MQTT/#retained-mqtt-messages","title":"Retained MQTT Messages","text":"<p>If MQTT is defined and retain option is used the last state will be stored permanently in MQTT database.</p> Command Description <code>InfoRetain</code> Show current MQTT info retain state. <code>0</code> / <code>off</code> = disable MQTT info retain (default) <code>1</code> / <code>on</code> = enable MQTT info retain <code>PowerRetain</code> Show current MQTT power retain state.  <code>0</code> / <code>off</code> = disable MQTT power retain on status update (default) <code>1</code> / <code>on</code> = enable MQTT power retain on status update <code>SensorRetain</code> Show current MQTT sensor retain state. <code>0</code> / <code>off</code> = disable MQTT sensor retain on sensor update (default) <code>1</code> / <code>on</code> = enable MQTT sensor retain on sensor update <code>StateRetain</code> Show current MQTT state retain state. <code>0</code> / <code>off</code> = disable MQTT state retain (default) <code>1</code> / <code>on</code> = enable MQTT state retain <code>StatusRetain</code> Show current MQTT status retain state. <code>0</code> / <code>off</code> = disable MQTT status retain (default) <code>1</code> / <code>on</code> = enable MQTT status retain <code>SwitchRetain</code> Show current MQTT switch retain state. <code>0</code> / <code>off</code> = disable MQTT switch retain on switch update (default) <code>1</code> / <code>on</code> = enable MQTT switch retain on switch update <p>BUT, a power message in your MQTT broker flagged as 'retained' will always override the <code>PowerOnState</code>. </p> <p>This is usually the main cause for \"ghost switching\". Learn more in MQTT retained messages explained. Check out this tutorial for troubleshooting switch ghosting.</p>"},{"location":"MQTT/#clearing-retained-messages","title":"Clearing Retained Messages","text":"<p>To check, if there is a retain flag set for the switch's power topic, monitor <code>cmnd/+/power</code> in a MQTT client (recommended MQTT.fx for Windows or Eclipse Mosquitto in linux).</p> <p>You can use Tasmota Device Manager to clear all retained messages for selected device with a single click.</p> <p></p> <p>or use the following tutorials/forum threads:</p> <ul> <li>Clearing retained messages with mosquitto</li> <li>Remove retained messages in Home Assistant</li> <li>Remove retained messages in hass.io MQTT addon</li> </ul>"},{"location":"MQTT/#subscribeunsubscribe","title":"Subscribe/Unsubscribe","text":"<p>This feature is not included in precompiled binaries</p> <p>To use it you must compile your build. Add the following to <code>user_config_override.h</code>: <pre><code>#ifndef SUPPORT_MQTT_EVENT\n#define SUPPORT_MQTT_EVENT\n#endif\n</code></pre> To default maximum MQTT message size that Tasmota can process is 256 bytes. You can increase it by redefining the following constant in <code>user_config_override.h</code>: <pre><code>#ifdef RULE_MAX_MQTT_EVENTSZ\n#undef RULE_MAX_MQTT_EVENTSZ\n#endif\n#define RULE_MAX_MQTT_EVENTSZ  512\n</code></pre></p>"},{"location":"MQTT/#subscribe","title":"Subscribe","text":"<p>Subscribes to an MQTT topic and assigns an <code>Event</code> name to it. </p> <p><code>Subscribe &lt;eventName&gt;, &lt;mqttTopic&gt; [, &lt;key&gt;]</code></p> <p>The <code>&lt;key&gt;</code> parameter is specified when you need to parse a key/value pair from a JSON payload in the MQTT message. In order to parse a value from a multi-level JSON pair, you can use one dot (<code>.</code>) syntax to split the key into sections.</p> <p>You subscribe to an MQTT topic and assign an event name. Once the subscribed MQTT message is received the configured event will be triggered. </p> <p>Command without any parameters will list all currently subscribed topics.</p> <p>Domoticz Users</p> <p>As designed, <code>domoticz/out</code> (or any user defined DOMOTICZ_OUT_TOPIC) overrules the rule subscribe functionality in a way that you're unable to subscribe to <code>domoticz/out/1234/#</code>. This means that you can't subscribe to this topic, unless you remove all Domoticz relay/idx relations with command <code>DzIdx0 0</code> or if you had disabled the <code>USE_DOMOTICZ</code> flag when compiling your own firmware.</p> <p>You can set up a rule with <code>ON EVENT#&lt;event_name&gt; DO ... ENDON</code> to do what you want based on this MQTT message. The payload is passed as a parameter once the event has been triggered. If the payload is in JSON format, you are able to get the value of specified key as a parameter.  </p> <p>For example, if you have a Tasmota based thermostat and multiple temperature sensors in different locations, usually you have to set up a home automation system like Domoticz to control the thermostat. Right now, with this new feature, you can write a rule to do this.  </p>"},{"location":"MQTT/#examples_1","title":"Examples","text":"<p><pre><code>Rule1\n  ON mqtt#connected DO Subscribe BkLight, stat/other-device-topic/POWER ENDON\n  ON Event#BkLight=ON DO &lt;command&gt; ENDON\n</code></pre> <pre><code>Rule1\n  ON mqtt#connected DO Subscribe DnTemp, tele/other-device-topic/SENSOR, DS18B20.Temperature ENDON\n  ON Event#DnTemp&gt;=21 DO &lt;command&gt; ENDON\n</code></pre> where the MQTT message payload is <code>{\"Time\":\"2017-02-16T10:13:52\", \"DS18B20\":{\"Temperature\":20.6}}</code> <pre><code>Rule1\n  ON mqtt#connected DO Subscribe DnTemp, tele/other-device-topic/SENSOR, DS18B20.Temperature ENDON\n  ON Event#DnTemp DO TempMeasuredSet %value% ENDON\n</code></pre> will allow a thermostat to subscribe to a temperature sensor on another Tasmota device</p>"},{"location":"MQTT/#unsubscribe","title":"Unsubscribe","text":"<p>Unsubscribe from topics which were subscribed to using the <code>Subscribe</code> command.  </p> <p>Unsubscribe from a specific MQTT topic <code>Unsubscribe &lt;eventName&gt;</code> </p> <p>The command without a parameter will unsubscribe from all currently subscribed topics.  </p>"},{"location":"MQTT/#return-codes-rc","title":"Return codes (rc)","text":"<p>Sometimes, something wrong can happen and you might need to check return codes.</p> <p>A return code can be found in the console, example output for Return Code = <code>5</code> : <code>MQT: Connect failed to xxxx:1883, rc 5. Retry in 10 sec</code></p> <p>Below table provides more information about it. The original values are related to PubSubClient.h constants.</p> Code Constant name Description -5 MQTT_DNS_DISCONNECTED the DNS server cannot be reached or name cannot be resolved -4 MQTT_CONNECTION_TIMEOUT the server didn't respond within the keepalive time -3 MQTT_CONNECTION_LOST the network connection was broken -2 MQTT_CONNECT_FAILED the network connection failed -1 MQTT_DISCONNECTED the client is disconnected cleanly 0 MQTT_CONNECTED the client is connected 1 MQTT_CONNECT_BAD_PROTOCOL the server doesn't support the requested version of MQTT 2 MQTT_CONNECT_BAD_CLIENT_ID the server rejected the client identifier 3 MQTT_CONNECT_UNAVAILABLE the server was unable to accept the connection 4 MQTT_CONNECT_BAD_CREDENTIALS the username/password were rejected 5 MQTT_CONNECT_UNAUTHORIZED the client was not authorized to connect"},{"location":"MacOSX-Server/","title":"MacOSX Server","text":"<p>Mac OSX comes with a built in web server, although it's not running by default. Starting the web server can be done by running: <pre><code>sudo apachectl start\n</code></pre></p> <p>To start the server, you'll be asked for your user's password.</p> <p>Opening your localhost will show you 'it works!', which will tell you that much - it works.</p> <p>The folder to put files in is <pre><code>/Library/WebServer/Documents\n</code></pre></p> <p>You may wish to create a subfolder for the firmware files.  </p> <p>Use the IP address of this local web server to OTA flash Tasmota. You can determine your IP address here. For example, <pre><code>http://192.168.1.123/tasmota.bin\n</code></pre></p> <p>Issue this command to stop the web server when your are done flashing: <pre><code>sudo apachectl stop\n</code></pre></p> <p>Note: The MAMP web server does not seem to deliver the results as expected!</p>"},{"location":"Matter-Internals/","title":"Matter Internals","text":"<p>Matter protocol supported in all ESP32 variants (C3/S2/S3) since Tasmota v13.0.0. ESP8266 is not supported although ESP8266 devices can be handled via a single ESP32 in bridge mode (see below)</p> This feature is included in standard <code>tasmota32xx</code> builds; not in special variants (display, sensors...) <p>When compiling your build add the following flag to the build environment or <code>user_config_override.h</code>: <pre><code>#define USE_MATTER_DEVICE\n</code></pre></p> <p>Below are implementation notes to understand and extend Matter.</p>"},{"location":"Matter-Internals/#plugin-system","title":"Plugin System","text":"<p>The plugin system is designed to have different implementations for different types of devices or sensors. Each Matter endpoint is managed by an instance of a Plugin class.</p> <p>Endpoint <code>root</code> (0) is managed by the <code>matter.Plugin_Root</code> class because of its specific behavior.</p> <p>We provide currently the following classes:</p> Plug-in class Description Bridge Virtual Plugin_Device Generic device (abstract) Plugin_Root Root node (type 0x0016) Plugin_Aggregator Aggregator for Bridge mode (type 0x000E) Plugin_OnOff Simple On/Off Plug (type 0x010A) x x Plugin_Light0 Light with 0 channel (OnOff) (type 0x0100) x x Plugin_Light1 Light with 1 channels (Dimmer) (type 0x0101) x x Plugin_Light2 Light with 2 channels (CT) (type 0x010C) x x Plugin_Light3 Light with 3 channels (RGB) (type 0x010D) x x Plugin_Fan Fan (type 0x002B) Virtual only x Plugin_Sensor Generic Sensor class (abstract) Plugin_Sensor_Temp Temperature Sensor (type 0x0302) x x Plugin_Sensor_Pressure Pressure Sensor (type 0x0305) x x Plugin_Sensor_Illuminance Light/Illuminance Sensor (type 0x0106) x x Plugin_Sensor_Humidity Humidity Sensor (type 0x0307) x x Plugin_Sensor_Flow Flow Sensor (type 0x0306) x x Plugin_Sensor_Boolean Generic Booleand Sensor class (abstract) Plugin_Sensor_Occupancy Occupancy Sensor linked to a swithch (type 0x0107) x x Plugin_Sensor_Contact Contact Sensor (type 0x0015) x x Plugin_Sensor_OnOff OnOff Sensor (type 0x0850) Plugin_Sensor_Rain Rain Sensor (type 0x0044) x x Plugin_Sensor_Waterleak Water Leak Sensor (type 0x0043) x x Plugin_Sensor_Air_Quality Air Quality Sensor (co2, pm...) (type 0x002C) x x Plugin_Sensor_GenericSwitch_Btn Generic switch for Buttons (type 0x000F) Plugin_Shutter Shutter (type 0x0202) Plugin_Shutter_Tilt Shutter with Tilt control (type 0x0202) <p>Bridge: Tasmota is able to act as a Bridge to other Tasmota devices (ESP8266 or ESP32) and drive them via the HTTP API.</p> <p>Virtual: the endpoint is not connected to any device by Tasmota, and can be driven by Berry code to drive any hardware device or simulate a hardware device.</p> <p>Plugins Hierarchy: <pre><code>Matter_Plugin\n+--- Matter_Plugin_Root\n+--- Matter_Plugin_Aggregator\n+--+ Matter_Plugin_Device\n   |--+ Matter_Plugin_Light0\n   |  +--+ Matter_Plugin_Light1\n   |  |  +--- Matter_Plugin_Light2\n   |  |  +--- Matter_Plugin_Light3\n   |  +--- Matter_Plugin_OnOff\n   +--+ Matter_Plugin_Fan\n   +--+ Matter_Plugin_Shutter\n   |  +--- Matter_Plugin_ShutterTilt\n   +--+ Matter_Plugin_Sensor\n   |  +--+ Matter_Plugin_Sensor_Humidity\n   |     +--- Matter_Plugin_Zigbee_Humidity\n   |  +--+ Matter_Plugin_Sensor_Temperature\n   |     +--- Matter_Plugin_Zigbee_Temperature\n   |  +--+ Matter_Plugin_Sensor_Pressure\n   |     +--- Matter_Plugin_Zigbee_Pressure\n   |  +--- Matter_Plugin_Sensor_Illuminance\n   |  +--- Matter_Plugin_Sensor_Flow\n   +--+ Matter_Plugin_Sensor_Boolean\n   |  +--- Matter_Plugin_Sensor_Contact\n   |  +--- Matter_Plugin_Sensor_Occupancy\n   |  +--- Matter_Plugin_Sensor_OnOff\n   |  +--- Matter_Plugin_Sensor_Rain\n   |  +--- Matter_Plugin_Sensor_WaterLeak\n   +--- Matter_Plugin_Sensor_AirQuality\n   +--- Matter_Plugin_Sensor_GenericSwitch_Btn\n</code></pre></p> <p>All endpoints that support <code>Bridge</code>, <code>Virtual</code> and <code>Zigbee</code> have <code>Matter_Plugin_Bridge_&lt;name&gt;</code>, <code>Matter_Plugin_Virt_&lt;name&gt;</code> and <code>Matter_Plugin_Zigbee_&lt;name&gt;</code> subclasses.</p>"},{"location":"Matter-Internals/#plugin-superclass","title":"Plugin superclass","text":"<p>All plugins inherit from the <code>Matter_Plugin</code> superclass.</p> <p>Note: for solidification to succeed, you need to declare <code>class Matter_Plugin end</code> fake class in the same Berry file. The actual class will be used in solidified code.</p> Plugin method Description init(device, endpoint, config) (can be overridden) Instantiate the plugin on a specific <code>endpoint</code>. You need to pass the root <code>matter_device</code> object, and the <code>config</code> map extracted from the JSON configuration"},{"location":"Matter-Internals/#core-classes","title":"Core classes","text":""},{"location":"Matter-Internals/#class-matterdevice-used-as-monad-matter_device","title":"class <code>matter.Device</code> used as monad <code>matter_device</code>","text":"<p><code>matter_device</code> is a monad of <code>matter.Device</code> automatically created at boot. It checks if Matter si enabled (<code>SetOption151 1</code>) and instantiates all sub-systems.</p>"},{"location":"Matter-Internals/#device-attributes","title":"Device attributes","text":"Device variables Description plugins List of <code>matter.Plugin()</code>.Each plugin manages a distinct endpoint and the associated sub-device behavior udp_server instance of <code>matter.UDPServer()</code> and is used to (re-)send and receive UDP packets message_handler instance of <code>matter.MessageHandler()</code>, handles the dispatching of incoming packets to the relevant layers. sessions instance of <code>matter.Session_Store()</code> which holds a list of <code>matter.Session()</code>All active persistent and non-persistent sessions are listed here, and serve to dispatch incoming packetsSession are also linked to <code>Fabric</code> when persisted ui instance of <code>matter.UI()</code>Handles the web UI for Matter. <p>The following are saved as Matter device configuration</p> Configuration variables Description root_discriminator as <code>int</code> root_passcode as <code>int</code> ipv4_only (<code>bool</code>) advertize only IPv4 addresses (no IPv6) nextep (int) next endpoint to be allocated for bridge, start at 51 <p>When commissioning is open, here are the variables used:</p> Commissioning variables Description commissioning_open timestamp for timeout of commissioning (millis()) or <code>nil</code> if closed commissioning_iterations current PBKDF number of iterations commissioning_discriminator commissioning_discriminator commissioning_salt current salt commissioning_w0 current w0 (SPAKE2+) commissioning_L current L (SPAKE2+) commissioning_instance_wifi random instance name for commissioning (mDNS) commissioning_instance_eth random instance name for commissioning (mDNS) <p>For default commissioning, the following values are used (and can be changed via UI):</p> Root Commissioning variables Description root_iterations PBKDF number of iterations PBKDF information used only during PASE (freed afterwards) root_salt root_w0 root_L"},{"location":"Matter-Internals/#device-methods","title":"Device methods","text":"Method Description start_root_basic_commissioning(timeout_s) Start Basic Commissioning with root/UI parametersOpen window for <code>timeout_s</code> (default 10 minutes) remove_fabric(fabric) Remove a fabric and clean all corresponding values and mDNS entries start_basic_commissioning(timeout_s, iterations, discriminator, salt, w0, L, admin_fabric) Start Basic Commissioning Window with custom parameters is_root_commissioning_open() Is root commissioning currently open. Mostly for UI to know if QRCode needs to be shown. stop_basic_commissioning() Stop PASE commissioning, mostly called when CASE is about to start compute_qrcode_content() Compute QR Code content - can be done only for root PASE compute_manual_pairing_code() Compute the 11 digits manual pairing code (without vendorid nor productid) p.223can be done only for root PASE (we need the passcode, but we don't get it with OpenCommissioningWindow command) every_second() Dispatch second-resolution ticks to: sessions, message_handler, plugins.Expire commissioning window.Called by Tasmota loop. start_operational_discovery_deferred(session) Start Operational Discovery for this sessionDeferred until next tick. start_commissioning_complete_deferred(session) Start Commissioning Complete for this sessionDeferred until next tick. start_operational_discovery(session) Start Operational Discovery for this sessionStop Basic Commissioning and clean PASE specific values (to save memory). Announce fabric entry in mDNS. start_commissioning_complete(session) Commissioning CompleteStop basic commissioning. get_active_endpoints(exclude_zero) Return the list of endpoints from all plugins (distinct), exclude endpoint zero if <code>exclude_zero</code> is <code>true</code> save_param() Persistence of Matter Device parameters load_param() Load Matter Device parameters <p>Incoming messages handing</p> Method Description msg_received(raw, addr, port) Callback when message is received.Send to <code>message_handler</code> msg_send(raw, addr, port, id) Global entry point for sending a message.Delegates to <code>udp_server</code> received_ack(id) Signals that a ack was received.Delegates to <code>udp_server</code> to remove from resending list. attribute_updated(endpoint, cluster, attribute, fabric_specific) Signal that an attribute has been changed and propagate to any active subscription.Delegates to <code>message_handler</code> process_attribute_expansion(ctx, cb) Proceed to attribute expansion (used for Attribute Read/Write/Subscribe)Called only when expansion is needed, so we don't need to report any error since they are ignoredCalls <code>cb(pi, ctx, direct)</code> for each attribute expanded.<code>pi</code>: plugin instance targeted by the attribute (via endpoint). Note: nothing is sent if the attribute is not declared in supported attributes in plugin.<code>ctx</code>: context object with <code>endpoint</code>, <code>cluster</code>, <code>attribute</code> (no <code>command</code>)<code>direct</code>: <code>true</code> if the attribute is directly targeted, <code>false</code> if listed as part of a wildcardreturns: <code>true</code> if processed successfully, <code>false</code> if error occurred. If <code>direct</code>, the error is returned to caller, but if expanded the error is silently ignored and the attribute skipped.In case of <code>direct</code> but the endpoint/cluster/attribute is not supported, it calls <code>cb(nil, ctx, true)</code> so you have a chance to encode the exact error (UNSUPPORTED_ENDPOINT / UNSUPPORTED_CLUSTER / UNSUPPORTED_ATTRIBUTE / UNREPORTABLE_ATTRIBUTE) invoke_request(session, val, ctx) Matter plugin managementPlugins allow to specify response to read/write attributes and command invokes"},{"location":"Matter-Internals/#udppacket_sent","title":"UDPPacket_sent","text":"Method Description init(raw, addr, port, id) Create raw UDP packet with <code>bytes()</code> content, target addr (string) and port (int). If <code>id</code> is not <code>nil</code> enqueue until acked send(socket) Send packet now. Returns <code>true</code> if packet was successfully sent."},{"location":"Matter-Internals/#mdns-dns-sd","title":"mDNS (DNS-SD)","text":"Method Description start_mdns_announce_hostnames() Start mDNS and announce hostnames for Wi-Fi and ETH from MACWhen the announce is active, <code>hostname_wifi</code> and <code>hostname_eth</code> are defined mdns_announce_PASE() Announce MDNS for PASE commissioning mdns_remove_PASE() MDNS remove any PASE announce mdns_announce_op_discovery_all_fabrics() Start UDP mDNS announcements for commissioning for all persisted sessions mdns_announce_op_discovery(fabric) Start UDP mDNS announcements for commissioning mdns_remove_op_discovery_all_fabrics() Remove all mDNS announces for all fabrics mdns_remove_op_discovery(fabric) Remove mDNS announce for fabric save_before_restart() Try to clean MDNS entries before restart.Called by Tasmota loop as a Tasmota driver."},{"location":"Matter-Internals/#class-udpserver","title":"Class UDPServer","text":"<p>This class creates a monad (singleton) in charge of receiving and sending all UDP packets. Packets to sent are generally put in a queue, and are re-sent with exponential backoff until they are acknowledged by the receiver (as part of Matter over UDP) or after the maximum of retries have been made.</p> Method Description init(addr, port) Init UDP Server listening to <code>addr</code> and <code>port</code> (opt). By default, the server listens to <code>\"\"</code> (all addresses) and port <code>5540</code> start(cb) Starts the server. Registers as device handler to Tasmota. <code>cb(packet, from_addr, from_port)</code>: callback to call when a message is received.Raises an exception if something is wrong. stop() Stops the server and remove driver every_50ms() At every tick: Check if a packet has arrived, and dispatch to <code>cb</code>. Read at most `MAX_PACKETS_READ (4) packets at each tick to avoid any starvation.Then resend queued outgoing packets. _resend_packets() Resend packets if they have not been acknowledged by receiver either with direct Ack packet or ack embedded in another packet. Packets with <code>id</code>=<code>nil</code> are not resent.Packets are re-sent at most <code>RETRIES</code> (4) times, i.e. sent maximum 5 times. Exponential back off is added after each resending.If all retries expired, remove packet and log. received_ack() Just received acknowledgment, remove packet from sender send_response(raw, addr, port, id, session_id) Send a packet, enqueue it if <code>id</code> is not <code>nil</code>.<code>session_id</code> is only used for logging."},{"location":"Matter-Internals/#messagehandler","title":"MessageHandler","text":"<p><code>matter_device.message_handler</code> is a monad of <code>matter.MessageHandler</code></p> <p>Dispatches incoming messages and sends outgoing messages</p> Variables of Message Handler Description device Reference to the global <code>matter_device</code> instance commissioning Commissioning Context instance, handling the PASE/CASE phases im Instance of <code>matter.IM</code> handling Interaction Model <p>General methods:</p> Method Description init(device) Constructor, instantiates monads for <code>commissioning</code> and <code>im</code> msg_received(raw, addr, port) Called by <code>matter_device</code> when a message is received.- decodes the message header- associates the message with the corresponding active session, or create a new session- dispatches to <code>commissioning</code> or <code>im</code> depending on the message type- sends an Ack packet if the received packet had the <code>reliable</code> flag set and if the Ack was not already managed upper stack. send_response(raw, addr, port, id, session_id) Send a packet. Proxy to the same method in <code>device</code>"},{"location":"Matter-Internals/#tlv","title":"TLV","text":"<p>Implements the TLV encoding and decoding as defined in Appendix A of the Matter specification. TLV stands for Tag-length-value encoding. It is a way to encode tagged values and structures in a binary compact format. Most Matter messages are encoded in TLV.</p> <p>Parse and print: <code>m = matter.TLV.parse(b) print(m)</code></p>"},{"location":"Matter-Internals/#tlv-types","title":"TLV Types","text":"Type Description I1 I2 I4 Signed integer of at most (1/2/4) bytes (as 32 bits signed Berry type) U1 U2 U4 Unsigned integer of at most (1/2/4) bytes (as 32 bits signed Berry type, be careful when comparing. Use <code>matter.Counter.is_greater(a,b)</code>) I8 U8 Signed/unsigned 8 bytes. You can pass <code>bytes(8)</code>, <code>int64()</code> or <code>int</code>. Type is collapsed to a lower type if possible when encoding. BOOL Boolean, takes <code>true</code> and <code>false</code>. Abstracts the internal <code>BTRUE</code> and <code>BFALSE</code> that you don't need to use FLOAT 32 bites float UTF1 UTF2 String as UTF, size is encoded as 1 or 2 bytes automatically B1 B2 raw <code>bytes()</code>, size is encoded as 1 or 2 bytes automatically NULL takes only <code>nil</code> value STRUCTARRAYLISTEOC (internal) Use through abstractions DOUBLEUTF4 UTF8B4 B8 Unsupported in Tasmota"},{"location":"Matter-Internals/#creating-tlv","title":"Creating TLV","text":"<p>Simple value:</p> <p><code>matter.TLV.create_TLV(type, value)</code></p> <p>Example:</p> <pre><code>matter.TLV.create_TLV(matter.TLV.UTF1, \"Hello world\")\nmatter.TLV.create_TLV(matter.TLV.BOOL, true)\nmatter.TLV.create_TLV(matter.TLV.NULL, nil)\nmatter.TLV.create_TLV(matter.TLV.FLOAT, 3.5)\nmatter.TLV.create_TLV(matter.TLV.I2, -345)\nmatter.TLV.create_TLV(matter.TLV.U8, bytes(\"DEADBEEFDEADBEEF\"))\n</code></pre>"},{"location":"Matter-Internals/#subscriptions","title":"Subscriptions","text":"<p>When a subscription is issued by an initiator, we create an instance of <code>matter.IM_Subscription</code> which holds:</p> <ul> <li>the <code>CASE session</code> on which the subscription was issued. If the session is closed, the subscription dies. Subscriptions are not persisted and stop if reboot</li> <li><code>subscription_id</code> (int) used to tell the initiator which subscription it was</li> <li><code>path_list</code> list of <code>matter.Path</code> instances recording all the attributes subscribed to. They can include wildcards</li> <li><code>min_interval</code> and <code>max_interval</code> (in seconds): Tasmota waits at least <code>min_interval</code> before sending a new value, and sends a message before <code>max_interval</code> (usually heartbeats to signal that the subscription is still alive). Generally changes to attributes are dispatched immediately.</li> <li><code>fabric_filtered</code>: not used for now</li> </ul> <p>Below are internal arguments:</p> <ul> <li><code>not_before</code>: the actual timestamp that we should wait before sending updates, as to respect <code>min_interval</code></li> <li><code>expiration</code>: the maximum timestamp we can wait before sending a heartbeat. Both are updated after we sent a new value</li> <li><code>wait_status</code>: signals that we sent everything and we wait for the final <code>StatusReport</code> to resume sending further updates</li> <li><code>is_keep_alive</code> (bool) did the last message was a keep-alive, if so we just expect a Ack and no StatusReport</li> <li><code>updates</code>: list of concrete attributes that have values changed since last update. They don't contain the new value, we will actually probe each attribute value when sending the update</li> </ul>"},{"location":"Matter-Internals/#im_subscription_shop","title":"IM_Subscription_Shop","text":"<p>This class (monad) contains the global list of all active subscriptions. Method|Description :----|:--- init(im)|Instantiate the monad with the global IM monad new_subscription(session, req)|Take a session and a <code>SubscribeRequestMessage</code>, parse the message and create a <code>matter.IM_Subscription</code> instance.Returns the <code>matter.IM_Subscription()</code> instance. Also allocates a new subscription id.</p>"},{"location":"Matter-Internals/#what-happens-when-an-attribute-is-updated","title":"What happens when an attribute is updated","text":"<p>Subscriptions are triggered by the value of an attribute changing. They can originate from an explicit WRITE Matter command from an initiator or another device, of be the consequence of a Matter command (like switching a light ON). The can also originated from independent source, like an action at Tasmota level (using Tasmota <code>Power</code> command), or Tasmota detecting that a sensor value has changed after periodical polling.</p> <p>Note: default plugins for Lights actually probe Tasmota light status every second, and report any difference between the last known change (also called shadow value) and the current status. We realized that it was more consistent and reliable than trying to create rules for every event.</p> <p>When an attribute's value changed, you need to call the plugin's method<code>self.attribute_updated(&lt;endpoint_id&gt;, &lt;cluster_id&gt;, &lt;attribute_id&gt; [, &lt;fabric_specific&gt;])</code></p> <p><code>&lt;fabric_specific&gt;</code> (bool) is optional and currently ignored and reserved for future use.</p> <p>The <code>endpoint_id</code> argument is optional. If the endpoint is unknown, the message is broadcast to all endpoints that support reading this attributes:<code>self.attribute_updated(nil, &lt;cluster_id&gt;, &lt;attribute_id&gt;)</code></p> <p>More generally, you can use the global method to signal an attribute change from any code:<code>matter_device.attribute_updated(nil, &lt;cluster_id&gt;, &lt;attribute_id&gt;)</code></p> <p>Note: internally this method creates a <code>matter.Path</code> instance and calls<code>matter_device.message_handler.im.subs_shop.attribute_updated_ctx(ctx, fabric_specific)</code>which in turns calls <code>attribute_updated_ctx(ctx, fabric_specific)</code> on every active subscription.</p> <p>Calls to <code>attribute_updated_ctx()</code> are first check whether the attribute matches the filtering criteria's (that may include wildcards). If they match, the attribute is candidate to be added to the list. We then call <code>_add_attribute_unique_path()</code> to check if the attribute is not already in the list, and if not add it to the list of future updates. It's possible that during the <code>min_interval</code> time, an attribute may change value multiple times; yet we publish a single value (the last one).</p>"},{"location":"Matter-Internals/#updates","title":"Updates","text":"<p>The<code>Subscription_Shop</code>  monad checks every 250ms if there are updates ready to be sent via <code>every_250ms()</code>.</p> <p>It does a first scan across all active subscriptions if updates can be sent out:</p> <ul> <li>subscription is not in <code>wait_status</code> (i.e. not waiting for a previous exchange to complete)</li> <li>subscription has a non-empty list of updates</li> <li>subscription has reached the <code>not_before</code> timestamp (so as to not sent too frequent updates)</li> </ul> <p>If so:</p> <ul> <li><code>im.send_subscribe_update(sub)</code> is called</li> <li>the subscription list of updates is cleared via <code>sub.clear_before_arm()</code></li> </ul> <p>Once all updates are sent, the subscription are scanned again to see if any heartbeat needs to be sent:</p> <ul> <li>subscription is not in <code>wait_status</code></li> <li>subscription has reached <code>expiration</code> timestamp If so:</li> <li><code>im.send_subscribe_update(sub)</code> is called</li> <li>the subcription list of updates is cleared via <code>sub.clear_before_arm()</code> XXX TODO</li> </ul>"},{"location":"Matter-Internals/#extending-matter","title":"Extending Matter","text":"<p>All Matter support code is located in <code>berry_matter</code> as a lib, which avoids polluting the main directory of drivers. Berry allows to develop much faster compared to C++, and performance is mostly not an issue with Matter.</p> <p>The Berry code is located in the <code>embedded</code> directory. Then the code is compiled into bytecode and the bytecode is stored in Flash. This avoids consuming RAM which is a very previous resource on ESP32. To solidify, you just need to run <code>./solidify_all.be</code> in <code>berry_matter</code>. But before you need to have a local version of Berry: in <code>berry</code> directory, just do <code>make</code>. For windows users, compiling Berry can be challenging so a pre-compiled <code>berry.exe</code> is provided.</p>"},{"location":"Matter-Internals/#creating-a-new-endpoint-type-class","title":"Creating a new endpoint type (class)","text":"<p>Ideally select the best super class and inherit from it. Most new type will derive from <code>Matter_Plugin_Device</code>.</p> <p>Below are the class attributes that need to be defined or are inherited from their superclass</p> Method Description TYPE Internal name of the plugin class as referenced in configuration JSON.This attribute is mandatory and its value must be different from all other classes. BRIDGE Set to <code>true</code> if this endpoint is a bridged, i.e. used to drive a remote ESP8266 or OpenBK device. If such, some additional methods need to be defined, like <code>parse_status</code>, <code>web_values</code> and <code>web_values_prefix</code> VRITUAL Set to <code>true</code> if the device is purely virtual and driven by Berry code or updated with <code>MtrUpdate</code> command DISPLAY_NAME The user-readable name of the plugin class, to be displayed in WebUI ARG The main argument key name in configuraiton JSON ARG_TYPE A Berry function used to enforce the type of the argument, like <code>/ x -&gt; int(x)</code> ARG_HINT A hint message displayed in the WebUI about what to put in the argument field UPDATE_CMD Tasmota command used to update the internal shadow value, and potentially update the Matter controller if a subscription is active UPDATE_TIME Update every <code>UPDATE_TIME</code> milliseconds. It can be very small for features driven by Berry functions (lights) but needs to be set for several seconds if it requires a <code>Status</code> comment or a remote (bridge) access CLUSTERS Map of supported clusters and attributes per clusters. You need only to set the class specific attributes, the complete list is consolidated with superclasses at compile time. TYPES A map of the supported \"device type\" as per Matter device list specification, and the revision of the spec for this device type UPDATE_COMMANDS List of all <code>MtrUpdate</code> commands supportde. The list is consolidated with superclasses at compile time"},{"location":"Matter-with-Google/","title":"Beginners Guide to adding Tasmota Matter to Google Home","text":"<p>Google Home will not accept devices using a test Vendor ID like Tasmota does. To pair Tasmota with Google Home you will need a Matter compatible Google device and the following procedure to enable Tasmota for your Google Home account.</p>"},{"location":"Matter-with-Google/#create-a-project","title":"Create a Project","text":"<p>Open Google Home Developer Console logged in under the same account used for Google Home.</p> <p>Click on Create a project then Create project. Enter a name for your project (e.g., \"Matter Tasmota\").</p> <p></p>"},{"location":"Matter-with-Google/#add-matter-integration","title":"Add Matter Integration","text":"<p>Click on \"Add Matter Integration\"</p> <p></p> <p>Click Next: Develop then Next:Setup</p>"},{"location":"Matter-with-Google/#enter-device-information","title":"Enter Device Information","text":"<p>Enter the name for the devices used.</p> <p></p> <p>Vendor ID needs to be 0xFFF1 as selected by default.</p> <p>Product ID used by Tasmota devices is 0x8000.</p> <p>Once you've filled out the required fields click on Save &amp; continue</p>"},{"location":"Matter-with-Google/#configure-setup-and-branding-optional","title":"Configure setup and branding (optional)","text":"<p>At this step you can change the images used in Google Home app during device commissioning. There is no need to fill out Android package name field.</p> <p></p> <p>Click Save</p>"},{"location":"Matter-with-Google/#setup-complete","title":"Setup Complete","text":"<p>Main page will now have an integration as shown:</p> <p></p>"},{"location":"Matter-with-Google/#add-device-to-google-home","title":"Add Device to Google Home","text":"<p>Activate Open Commissioning on the Tasmota device and then click on add new device, then select New device in the Google Home app. Tasmota device should be discovered as a Matter device. Scan the QR code from the web UI and click on Agree to connect the Tasmota device to Google Home.</p> <p></p>"},{"location":"Matter/","title":"Matter","text":"<p>Matter protocol supported in all ESP32 variants (C3/S2/S3) since Tasmota v13.0.0. ESP8266 is not supported although ESP8266 devices can be handled via a single ESP32 in bridge mode (see below)</p> This feature is included in standard <code>tasmota32xx</code> builds; not in special variants (display, sensors...) <p>When compiling your build add the following flag to the build environment or <code>user_config_override.h</code>: <pre><code>#define USE_MATTER_DEVICE\n</code></pre></p>"},{"location":"Matter/#what-is-matter","title":"What is Matter?","text":"<p>The Matter protocol is an open-source, royalty-free standard designed to enable smart home devices from different manufacturers to work seamlessly and securely together. The Matter standard was launched end of 2022, and is supported since July 2023 by Tasmota v13.0 and above. Learn more about Matter.</p> <p>Tasmota supports Matter over IP (Wi-Fi or Ethernet) as an end-device. This means that you can connect a Tasmota device to a Matter gateway, using standard and well defined protocols. The Matter communication is completely local.</p> <p>Matter cannot be directly supported on ESP8266 due to limited memory resources but you can use an ESP32 device as a Matter bridge to other Tasmota and OpenBK devices.</p> <p></p> <p>Thread is not supported</p> <p>Thread requires a specific radio and is not supported by ESP32 devices, it would require an additional, separate MCU. Espressif has launched a certified Thread Border Router based on ESP32S3 + ESP32H2 which should allow to bridge Thread device to a Wifi/Ethernet local network. Stay tuned...</p>"},{"location":"Matter/#supported-platforms","title":"Supported platforms","text":"<p>Tasmota Matter is confirmed to work with:</p> <ul> <li>Apple Home - requirements</li> <li>Amazon Alexa - requirements</li> <li>Espressif-Matter iOS/Mac app</li> <li>Google Home - only works after following these instructions</li> <li>Home Assistant</li> </ul> <p>More information on pairing with above mentioned smart home systems.</p>"},{"location":"Matter/#getting-started","title":"Getting Started","text":"<p>Matter is supported by default. The binaries are available for all ESP32 variants in our web installer</p> <p>Go to Configuration --&gt; Configure Matter and enable Matter with the checkmark then click Save.</p> <p></p> <p>After a restart device commissioning will be open for 10 minutes.</p> <p></p> <p>Add the device to your Matter hub by scanning the QR code or with the \"Manual pairing code\" if code scanning is not possible.  </p>"},{"location":"Matter/#configuration","title":"Configuration","text":"<p>After Matter support is enabled the Configuration --&gt; Configure Matter menu is used to configure options.</p> <p></p> <p>Here you can enable/disable Matter or open commissioning again if needed.</p>"},{"location":"Matter/#current-configuration","title":"Current Configuration","text":"<p>Configuration of your device for Matter discovery. Tasmota tries to configure supported features automatically.</p> <p>You can change the name of the Matter endpoint, switch its Parameter number or remove the endpoint by clicking the \ud83d\udd25 icon.</p> <p></p> <p>After changing these options click Change configuration.</p>"},{"location":"Matter/#adding-supported-device-types","title":"Adding supported device types","text":""},{"location":"Matter/#add-local-sensor-or-device","title":"Add local sensor or device","text":"<p>To add new features you need to add Endpoints.</p> <p></p>"},{"location":"Matter/#name","title":"Name","text":"<p>Name your endpoint to give it a label in your Matter hub (might not be supported by all hubs)</p>"},{"location":"Matter/#type","title":"Type","text":"<p>Select your endpoint type from the drop down. Types are limited by the Matter specification and some types might not be supported by the Matter hub.</p>"},{"location":"Matter/#parameter","title":"Parameter","text":"<p>To link a Tasmota power output (light/relay) to an endpoint set its parameter equal to the POWER number.</p> <p>A relay on <code>POWER2</code> will have Parameter set to <code>2</code></p> <p>To link a Tasmota sensor to an endpoint add the rule trigger of the sensor to the Parameter value.</p> <p>You can easily find out the parameter value by issuing <code>Status 8</code> in the console:</p> <pre><code>MQT: tele/tasmota/SENSOR = {\"Time\":\"2023-05-28T20:04:27\",\"SCD40\":{\"CarbonDioxide\":618,\"eCO2\":623,\"Temperature\":23.8,\"Humidity\":61.1,\"DewPoint\":15.8},\"TempUnit\":\"C\"}\n</code></pre> <p>Parameter for a Temperature endpoint will be <code>SCD#Temperature</code> and the Parameter for a Humidity endpoint will be <code>SCD#Humidity</code> in this case.</p> <p></p> <p>After entering click Create new endpoint and it will appear in the Current configuration list</p> <p></p>"},{"location":"Matter/#add-remote-tasmota-or-openbk","title":"Add Remote Tasmota or OpenBK","text":"<p>With this option you can bridge any existing Tasmota or OpenBK device to Matter.</p> <p></p> <p>Enter the IP or hostname of the remote device and click Auto-configure remote Tasmota</p> <p>Since v13.3.0.2, web passwords are supported for remote Tasmota devices. Include the <code>admin:&lt;password&gt;@&lt;IP_or_hostname&gt;</code>. For example if the password is <code>banana</code>, specify the address as <code>admin:banana@192.168.2.78</code></p> <p></p> <p>This will bring you to another menu where you can further configure the remote device.</p> <p></p> <p>Add remote Endpoints same as for a local sensors and devices.</p> <p>When finished click Add endpoints. The remote device will appear in the Current configuration list.</p> <p></p> <p>When a command arrives from the Matter controller, it is passed immediately to the end-device. Any change made on the end-device is eventually sent back to Matter controller via polling. Polling is done every 3 seconds for lights and relays and every 5 seconds for sensors.</p> <p>The Matter border router needs to have IP connectivity to the Tasmota end-device to send HTTP requests. However they don't need to be on the same VLAN (contrary to Matter which needs the controller and the device to be on the same VLAN).</p> <p>There is a limit to the number of endpoints</p> <p>Matter bridge cannot support a large number of endpoints since the numerous HTTP requests will impact performance.  It is recommended to limit the number of remote endpoints to 8 per Matter bridge.</p>"},{"location":"Matter/#reset-all-and-auto-discover","title":"Reset all and Auto-discover","text":"<p>This option will reset all configured endpoints and try to auto discover them again.</p>"},{"location":"Matter/#specific-supported-types","title":"Specific supported types","text":"<p>Find below specific information you need to know for certain device types</p>"},{"location":"Matter/#lights","title":"Lights","text":"<p>When possible, native lights are automatically mapped to Matter lights. Currently, lights with 1/2/3 channels are mapped to <code>Light 1 Dimmer</code>/<code>Light 2 CT</code>/<code>Light 3 RGB</code> endpoint types. They don't need any parameter, except for bridged device where you need to indicate the <code>Power&lt;x&gt;</code> number associated to the light (this is due to bridge mode not able to automatically detect it).</p>"},{"location":"Matter/#rgb-and-white-split","title":"RGB and White Split","text":"<p>See RGB and White Split enabled with <code>SetOption37 128</code>.</p> <p>4 channels lights are split as 1 RGB and 1 Dimmer: </p> <p>5 channels light are split as 1 RGB and 1 CT: </p>"},{"location":"Matter/#independent-pwm-channels","title":"Independent PWM Channels","text":"<p>See Independent PWM Channels enabled with <code>SetOption68 1</code></p> <p>All channels are defined as independant Light Dimmers: </p> <p>Note: the first Dimmer has no parameter and is mapped to the default (first) channel. Other channels need an additional <code>light</code> parameter to map to the appropriate channel (numbering starts with <code>1</code> which is also the default).</p>"},{"location":"Matter/#bridging-zigbee-devices","title":"Bridging Zigbee devices","text":"<p>Since v14.2.0, it is now possible to control a selection of Zigbee devices via a Z2T (Zigbee2Tasmota) bridge device. Such bridge device should have Zigbee and Matter enabled; currently you need to self-compile the firmware.</p> <p>This mode is not possible if you are using Zigbee2MQTT or ZHA with Tasmota in TCP tunnel (<code>TCPStart</code>). In such modes, Tasmota has no visibility on the data passed between Z2M/ZHA, and has no control over the Zigbee MCU.\"</p> <p>Matter control of zigbee lights is compatible with Alexa Hue, you can have the same light controlled by multiple controllers.</p> <p>To configure a Zigbee devices mapped to a Matter endpoint, you simply need to choose the Zigbee Matter type and select the Zigbee device: either by shortaddr (ex: 0xABCD) or by friendlyname (preferred).</p> <p></p> Matter type Zigbee mapping Zig Light 0 OnOff Light On/Off controlled via <code>Power</code> command and attribute Zig Light 1 Dimmer Light with 1 channel, controlled via <code>Power</code> and <code>Bri</code> commands and attributes Zig Light 2 CT Light with 2 channels (white with color temperature), controlled via <code>Power</code>, <code>Bri</code> and <code>CT</code> commands and attributes Zig Temperature Temperature sensor, reported via <code>Temperature</code> attribute Zig Pressure Atmospheric Pressure sensor, reported via <code>Pressure</code> attribute Zig Humidity Atmospheric Humidity sensor, reported via <code>Humidity</code> attribute Zig Occupancy Occupancy sensor, reported via <code>Occupancy</code> attribute <p>Limitations: currently only the first endpoint light can be controlled. Plugs with multple relays are not yet supported (only the first one is accessible).</p>"},{"location":"Matter/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"Matter/#matter-passcode","title":"Matter Passcode","text":"<p>You can change the passcode and ID of the device or force it to use IPv4 only.</p> <p></p>"},{"location":"Matter/#fabrics","title":"Fabrics","text":"<p>In short fabrics are Matter node identifiers. Long story here....</p> <p></p> <p>Deleting a Fabric will remove its commissioned status from the Matter hub.</p>"},{"location":"Matter/#known-limitations","title":"Known Limitations","text":"<p>Matter support is still in testing, there are some limitations:</p> <ul> <li>Matter requires IPv6 support, yet IPv4 is often tolerated. For debug purpose you can force Tasmota to manage Matter only on IPv4</li> <li>Tasmota devices with dual active networks (Ethernet + Wifi) are not yet supported. You need to disable Wifi or Ethernet. For example use Ethernet Network Flipper</li> <li>Tasmota cannot be Matter certified, it uses development vendor id's, which typically raise user warnings when commissioning the device</li> <li>Matter is also in an early phase with hub development and not all hubs support all Matter device types yet</li> </ul> <p>What's not suported:</p> <ul> <li>Thread as it requires a separate MCU. The number of Thread devices is still very limited.</li> <li>ESP8266 directly because of limited memory resources and lack of Berry support but you can add them to Matter via the Remote option</li> <li>Zigbee (it will come later)</li> </ul>"},{"location":"Matter/#matter-command-events","title":"Matter Command Events","text":"<p>Whenever a command is received from the controller, an event is generated and published to MQTT. This event can be matched by a rule.</p> <p>Example:</p> <pre><code>20:08:36.201 MQT: stat/tasmota_xxxxxx/COMMAND = {\"MtrReceived\":{\"9\":{\"Ep\":9,\"Name\":\"Light0\",\"Power\":1}}}\n</code></pre> <p>Note: only commands trigger an event (Controller to Tasmota). When a sensors updates the controller (Tasmota to Controller), it is not considered as a command but as an update of internal state.</p> <p>Endpoints are identified both by endpoint number <code>\"Ep\":&lt;x&gt;</code> and by name if a friendlyname is defined <code>\"Name\":\"&lt;friendlyname&gt;\"</code>. The formatting of MQTT topic and JSON payload use the same SetOption's as Zigbee.</p> SetOption Description SO83 Use friendly_name as key instead of <code>ep&lt;x&gt;</code> SO100 Remove <code>MtrReceived</code> key prefix SO119 Remove the endpoint or friendly name as key, the device name is still published in \"Name\" key SO89 Publish on distinct topics per endpoint, by default <code>stat/tasmota_xxxxxx/&lt;ep&gt;/COMMAND</code> SO112 If <code>SO89 1</code>, use the friendly name in topic instead of endpoint number SO118 Move <code>MtrReceived</code> from JSON message and into the subtopic replacing \"COMMAND\" default SO125 Hide bridge from topic (use with SetOption89) <p>Examples below consider an endpoint number <code>9</code> with friendlyname <code>Light0</code>:</p> 83 100 119 118 144 JSON Payload 0 0 0 0 0 <code>{\"MtrReceived\":{\"ep9\":{\"Name\":\"Light0\",\"Power\":1}}}</code> 1 0 0 0 0 <code>{\"MtrReceived\":{\"Light0\":{\"Name\":\"Light0\",\"Power\":1}}}</code> 0 1 0 0 x <code>{\"ep9\":{\"Name\":\"Light0\",\"Power\":1}}</code> 1 1 0 0 x <code>{\"Light0\":{\"Name\":\"Light0\",\"Power\":1}}</code> x 0 1 0 0 <code>{\"MtrReceived\":{\"Name\":\"Light0\",\"Power\":1}}</code> x 1 1 0 x <code>{\"Name\":\"Light0\",\"Power\":1}</code> 0 0 0 1 x <code>{\"ep9\":{\"Name\":\"Light0\",\"Power\":1}}</code> 0 0 0 0 1 <code>{\"Time\":\"2023-09-20T09:21:26\",\"MtrReceived\":{\"ep9\":{\"Name\":\"Light0\",\"Power\":1}}}</code> 1 0 0 0 1 <code>{\"Time\":\"2023-09-20T09:21:26\",\"MtrReceived\":{\"Light0\":{\"Name\":\"Light0\",\"Power\":1}}}</code> 1 0 1 0 1 <code>{\"Time\":\"2023-09-20T09:21:26\",\"MtrReceived\":{\"Name\":\"Light0\",\"Power\":1}}</code> 89 112 118 125 MQTT Topic 0 x 0 x <code>stat/tasmota_xxxxxx/COMMAND</code> 1 0 0 0 <code>stat/tasmota_xxxxxx/9/COMMAND</code> 1 1 0 0 <code>stat/tasmota_xxxxxx/Light0/COMMAND</code> 0 x 1 x <code>stat/tasmota_xxxxxx/COMMAND</code> 1 0 1 0 <code>stat/tasmota_xxxxxx/9/MtrReceived</code> 1 1 1 0 <code>stat/tasmota_xxxxxx/Light0/MtrReceived</code> 1 0 0 1 <code>stat/9/COMMAND</code> 1 1 0 1 <code>stat/Light0/COMMAND</code> 1 0 1 1 <code>stat/9/MtrReceived</code> 1 1 1 1 <code>stat/Light0/MtrReceived</code> <p>To reset all options, use:</p> <pre><code>Backlog SO83 0; SO89 0; SO100 0; SO112 0; SO118 0; SO119 0; SO125 0; SO144 0\n</code></pre>"},{"location":"Matter/#matter-virtual-devices","title":"Matter Virtual Devices","text":"<p>Since v13.1.0.3, it is possible to define \"virtual devices\" (lights, sensors...) visible from the controller but that do not map to an actual device or sensors managed by Tasmota. You can completely customize the behavior of the virtual device with rules or Berry scripts:</p> <ul> <li>whenever the controller sends a command, it generates a \"Matter Command Event\" JSON payload that you handle with rules</li> <li>you send back updates of the status of the device when you want via <code>MtrUpdate</code> command. Updates are automatically sent back to the controller via hidden Matter subscription.</li> </ul>"},{"location":"Matter/#mtrupdate-command","title":"<code>MtrUpdate</code> command","text":"<p><code>MtrUpdate</code> is used to signal to the Matter controller that the internal state of an endpoint has changed, either because of a user action or because of a new sensor reading. When you update an internal state variable, and if the value actually change, an attribute report message is sent immediately to the controller to signal the change. This ensures that Matter applications are promptly notified. In case of multiple controllers, multiple report messages are automatically sent.</p> <p>There are 2 ways to identify an endpoint:</p> <ul> <li><code>\"Ep\":&lt;ep_number&gt;</code> via the endpoint number</li> <li><code>\"Name\":\"&lt;friendly_name&gt;\"</code> (preferred) via the friendly_name of the endpoint if one has been set.</li> </ul> <p>Example:</p> <pre><code>MtrUpdate {\"ep\":9, \"Power\":0}\n20:44:57.852 MQT: stat/tasmota_xxxxxx/RESULT = {\"MtrUpdate\":{\"Ep\":9,\"Name\":\"Light0\",\"Power\":false}}\n\nMtrUpdate {\"Name\":\"Light0\", \"Power\":1}\n20:45:27.457 MQT: stat/tasmota_xxxxxx/RESULT = {\"MtrUpdate\":{\"Ep\":9,\"Name\":\"Light0\",\"Power\":true}}\n</code></pre> <p>If the endpoint is valid, the returned payload contains the entire state of the endpoint, similar to <code>MtrInfo</code> command.</p> <p>List of attributes supported by endpoints:</p> Attribute Type of endpoint Description Power Relay, all Lights <code>0</code>/<code>1</code> report Power change Bri Lights <code>0..254</code> report Brightness change CT Light 2 <code>153..500</code> White Temperature in mireds Hue Ligth 3 <code>0..254</code> Hue converted from 0..360 to 0..254 Sat Light 3 <code>0..254</code> Saturation Contact Contact <code>0</code>/<code>1</code> state of the Contact sensor Occupancy Occupancy <code>0</code>/<code>1</code> state of the Occupancy sensor Humidity Humidity <code>0..10000</code> Humidity in 1/100th of percentage Illuminance Illuminance <code>0..65534</code> Illuminance with formula <code>log10(val + 1) * 10000</code> Pressure Pressure Pressure in <code>hPa</code> Temperature Temperature <code>-32767..32767</code> Temperature in 1/100th of \u00b0C Rain Rain <code>0</code>/<code>1</code> change rain sensor state\u00b0C Waterleak Waterleak <code>0</code>/<code>1</code> change rain sensor state FanMode Fan <code>0</code>: Off<code>1</code>: Low (33%)<code>2</code>: Med (66%)<code>3</code>: High (100%) FanSpeed Fan <code>0..100</code> Fan speed in percentage FanSpeed255 Fan <code>0..255</code> Fan speed in a range more suitable for Rules and PWM <p>Keep in mind that many values are in the range <code>0..254</code> because <code>255</code> is an invalid value (this comes from Zigbee).</p>"},{"location":"Matter/#full-example","title":"Full Example","text":"<p>The example below implements a simple bridge between Matter and IR (Infra Red). This allows to trigger On/Off commands from the Matter controller, that are translated to On/Off infra-red commands (we use the simple NEC protocol in the example, like used in Magic Home LED strips). You can also received On/Off infra-red commands that are reflected in the virtual light. In reality, you will probably use only Matter-to-IR or IR-to-Matter direction, but it doesn't harm to have both directions implemented.</p> <p>We will use a Tasmota Relay via <code>Power1</code> and map it with rules to a virtual <code>Light0</code> type.</p> <p>Step 1. Define one endpoint as <code>(v) Light 0 On</code> and give it the name <code>Light0</code>.</p> <p></p> <p>Step 2. Define rules for Matter Controller commands</p> <p>We use <code>SetOption83 1</code> to match endpoint name instead of number, which is highly recommended for easier maintenance.</p> <pre><code>SetOption83 1\nRule1 on mtrreceived#Light0#power==1 do irsend {\"protocol\":\"nec\",\"bits\":32,\"data\":\"0xffb04f\"} endon on mtrreceived#Light0#power==0 do irsend {\"protocol\":\"nec\",\"bits\":32,\"data\":\"0xfff807\"} endon on irreceived#data=0xFFB04F do mtrupdate {\"name\":\"Light0\",\"power\":1} endon on irreceived#data=0xFFF807 do mtrupdate {\"name\":\"Light0\",\"power\":0} endon\nRule1 1\n</code></pre> <p>If we decompose the Rule, the first two rule matches convert a Matter initiated command to an IR message, the two last convert an IR message to a Matter state update:</p> <pre><code>Rule1\n    on mtrreceived#Light0#power==1 do irsend {\"protocol\":\"nec\",\"bits\":32,\"data\":\"0xffb04f\"} endon\n    on mtrreceived#Light0#power==0 do irsend {\"protocol\":\"nec\",\"bits\":32,\"data\":\"0xfff807\"} endon\n    on irreceived#data=0xFFB04F do mtrupdate {\"name\":\"Light0\",\"power\":1} endon\n    on irreceived#data=0xFFF807 do mtrupdate {\"name\":\"Light0\",\"power\":0} endon \n</code></pre> <p>Step 3. Pair Tasmota to the Matter Controller.</p>"},{"location":"Matter/#commands","title":"Commands","text":"Command Description MtrJoin <code>1</code> = open commissioning for 10 minutes<code>0</code> = close commissioning MtrUpdate Send an state update to the controller, see Virtual Devices above MtrInfo <code>ep_number</code> or <code>friendly_name</code>Display the internal state of an endpoint by number or by nameExample: <code>MtrInfo 9</code> or <code>MtrInfo Light0</code><code>20:25:04.362 MQT: tele/tasmota_673244/RESULT = {\"MtrInfo\":{\"Ep\":9,\"Name\":\"Light0\",\"Power\":true}}</code>Use <code>MtrInfo</code> (no argument) to display all endpoints"},{"location":"Matter/#misc-events","title":"Misc Events","text":"<p>Events published as JSON MQTT that can be captured in rules:</p> <p><code>{\"Matter\":{\"Initialized\":1}}</code>  when the device is configured (all endpoints created). Can be used in rules with trigger <code>Matter#Initialized</code></p> <p><code>{\"Matter\":{\"Commissioning\":1,\"PairingCode\":\"00054912336\",\"QRCode\":\"MT:Y.K90IRV01YZ.548G00\"}}</code>    when commissioning is open</p> <p><code>{\"Matter\":{\"Commissioning\":0}}</code>    when commissioning is closed</p>"},{"location":"Matter/#for-developers","title":"For developers","text":"<p>Developers might be interested in understanding the Tasmota Matter Internals</p>"},{"location":"Modbus-Bridge/","title":"Modbus Bridge","text":"<p>Add a \"Modbus bridge\" functionality to a device that is otherwise serial Modbus RTU only</p> This feature is only included in <code>tasmota32</code> binary <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_MODBUS_BRIDGE\n#define USE_MODBUS_BRIDGE       // Add support for software Modbus Bridge (+3k code)\n#define USE_MODBUS_BRIDGE_TCP   // Add support for software Modbus TCP Bridge (Must also enable USE_MODBUS_BRIDGE)\n#endif\n</code></pre></p> <p>In most cases you'll need an RS485 converter like this:</p> <p></p>"},{"location":"Modbus-Bridge/#introduction","title":"Introduction","text":"<p>Connect the Modbus device to an ESP and Tasmota will create a bridge to the Modbus network.</p> <p>The Modbus Bridge driver features 2 kind of bridges. </p> <p><code>USE_MODBUS_BRIDGE</code>: The bridge can be used by commands in the console and via MQTT messages.   <code>USE_MODBUS_BRIDGE_TCP</code>: The bridge can be used by commands in the console and via MQTT messages but also as Modbus TCP/IP bridge</p>"},{"location":"Modbus-Bridge/#configuration","title":"Configuration","text":"<p>First assign two GPIOs to <code>ModBR Tx</code> and <code>ModBR Rx</code> in the \"Configure Module\" page. The Rx/Tx are relative to the ESP device. For example with ESP-12's hardware serial, set GPIO1 as ModBR Tx and GPIO3 as ModBR Rx.</p> <p>Then set baud rate with <code>ModbusBaudRate</code> (default is 9600).</p>"},{"location":"Modbus-Bridge/#commands","title":"Commands","text":"Command Parameters ModbusSend Sending a message to the Modbus network as JSON payload.<code>{\"deviceAddress\":&lt;value&gt;, \"functionCode\":&lt;value&gt;, \"startAddress\":&lt;value&gt;, \"type\":\"&lt;value&gt;\",\"count\":&lt;value&gt; \"endian\":&lt;value&gt;}</code> <code>\"deviceAddress\":1..255</code> = device address from the Modbus slave. <code>\"functioncode\":1..6 or 15..16</code> = function code to send to the Modbus slave (see table below). <code>\"startaddress\":1..65535</code> address of the first register to read. <code>\"type\":\"&lt;value&gt;\"</code> Gives the type of the returned data (see table below).  <code>\"count\":1..n</code> the number of values to be requested.  <code>\"endian\":msb,lsb</code> Sets endian msb (big) or lsb (little) (optional). ModbusBaudrate <code>1200...115200</code> = set baudrate for serial (only 8N1 mode) in 1200 increments (default = <code>9600</code>) ModbusSerialConfig Set serial protocol using data/parity/stop conventional notation (example: 8N1 or 702)<code>0..23</code> = set serial protocol (<code>3</code> equals 8N1)"},{"location":"Modbus-Bridge/#functioncode","title":"FunctionCode","text":"Function Code Description 1 Read Coils 2 Read Discrete Inputs 3 Read Multiple Holding Registers 4 Read Input Registers 5 Write Single Coil 6 Write Single Register 15 Write Multiple Coils 16 Write Multiple Registers"},{"location":"Modbus-Bridge/#type","title":"Type","text":"Type Description raw Return or send the slave data as a raw values bit Return or send the slave data as a bit values hex Return or send the slave data as a hex values float Return or send the slave data as floats uint8 Return or send the slave data as an 8 bits unsigned int uint32 Return or send the slave data as a 32 bits unsigned int uint16 Return or send the slave data as a 16 bits unsigned int uint32 Return or send the slave data as a 32 bits unsigned int int8 Return or send the slave data as an 8 bits signed int int16 Return or send the slave data as a 16 bits signed int int32 Return or send the slave data as a 32 bits signed int"},{"location":"Modbus-Bridge/#additional-commands-for-use_modbus_bridge_tcp","title":"Additional commands for USE_MODBUS_BRIDGE_TCP","text":"Command Parameters ModbusTCPStart <code>&lt;port&gt;</code> = start the Modbus TCP bridge on the specified port ModbusTCPConnect <code>&lt;port&gt;,&lt;ip_address&gt;</code> = connect to a remote Modbus TCP server on remote tcp <code>port\u02d9</code> and <code>ip_address</code> ModbusTCPMqtt <code>&lt;x&gt;</code> = send results queried by tcp modbus client also to mqtt when parameter is 1"},{"location":"Modbus-Bridge/#returned-data","title":"Returned Data","text":"<pre><code>{\"ModbusReceived\":{\"DeviceAddress\":&lt;value&gt;,\"FunctionCode\":&lt;value&gt;,\"StartAddress\":&lt;value&gt;,\"Length\":&lt;value&gt;,\"Count\":&lt;value&gt;,\"Values\":[value1,value2,value3,valueN]}}\n</code></pre> <p>In raw mode, only the data is returned, no other fields.</p>"},{"location":"Modbus-Bridge/#error-codes","title":"Error Codes","text":"<p>There are 2 types of errors, errors from the tasmotamodbus driver and errors from this Modbusbridge module.</p>"},{"location":"Modbus-Bridge/#module-errors","title":"Module Errors","text":"<p>Errors from this Modbus bridge module can be recognized by <code>MBS: MBR Send error</code> or <code>MBS: MBR Recv error</code> at the start of the errormessage.</p> Errorcode Description 1 nodataexpected 2 wrongdeviceaddress 3 wrongfunctioncode 4 wrongstartaddress 5 wrongtype 6 wrongregistercount 7 wrongcount 8 tomanydata"},{"location":"Modbus-Bridge/#driver-errors","title":"Driver Errors","text":"<p>Errors from the tasmotamodbus driver can be recognized by <code>MBS: MBR Driver error</code></p> Errorcode Description 1 Illegal Function 2 Illegal Data Address 3 Illegal Data Value 4 Slave Error 5 Acknowledge but not finished (no error) 6 Slave Busy 7 Not enough minimal data received 8 Memory Parity error 9 Crc error 10 Gateway Path Unavailable 11 Gateway Target device failed to respond 12 Wrong register count 13 Register data not specified"},{"location":"Modbus-Bridge/#example-of-use","title":"Example of use","text":"<p>Requesting 4 holding registers starting from register 1 from slave address </p>"},{"location":"Modbus-Bridge/#register-1","title":"Register 1","text":"<p>On command: <pre><code>ModBusSend {\"deviceaddress\": 1, \"functioncode\": 3, \"startaddress\": 1, \"type\":\"uint16\", \"count\":4}\n</code></pre></p> <p>Response: <pre><code>RSL: RESULT = {\"ModbusSend\":\"Done\"}\nRSL: RESULT = {\"ModbusReceived\":{\"DeviceAddress\":1,\"FunctionCode\":3,\"StartAddress\":1,\"Length\":13,\"Count\":4,\"Values\":[65282,65028,65280,65024]}}\n</code></pre></p>"},{"location":"Modbus-Bridge/#set-coil-register-1-of-slaveaddress-1-to-on","title":"Set coil register 1 of slaveaddress 1 to ON:","text":"<p>On command: <pre><code>ModBusSend {\"deviceaddress\": 1, \"functioncode\": 5, \"startaddress\": 1, \"type\":\"bit\", \"count\":1, \"values\":[1]}\n</code></pre> Response: <pre><code>RSL: RESULT = {\"ModbusSend\":\"Done\"}\nRSL: RESULT = {\"ModbusReceived\":{\"DeviceAddress\":1,\"FunctionCode\":5,\"StartAddress\":1,\"Length\":8,\"Count\":1,\"Values\":[255]}}\n</code></pre></p>"},{"location":"Modbus-Bridge/#setting-multiple-coils-starting-from-coil-register-1-from-slave-address-1","title":"Setting multiple coils starting from coil register 1 from slave address 1","text":"<p>On command: <pre><code>ModBusSend {\"deviceaddress\": 1, \"functioncode\": 15, \"startaddress\": 1, \"type\":\"bit\", \"count\":8, \"values\":[1,0,0,1,1,1,0,0]}\n</code></pre> Response: <pre><code>RSL: RESULT = {\"ModbusSend\":\"Done\"}\nRSL: RESULT = {\"ModbusReceived\":{\"DeviceAddress\":1,\"FunctionCode\":15,\"StartAddress\":1,\"Length\":8,\"Count\":1}}\n</code></pre></p>"},{"location":"Modbus-Bridge/#additional-resources","title":"Additional resources","text":"<p>Tasmota Pull Request Modbus Protocol More Modbus information</p>"},{"location":"Modules/","title":"Modules","text":"<p>Module is a firmware supported device which has specific code to enable its features.</p> <p>Configure Module page in the webUI is used to configure additional components connected to one of the free GPIO pins of the device.</p> <p>Warning</p> <p>Use Templates to configure Tasmota for your device if it doesn't exist in the module list. New Modules are added to Tasmota only if a device requires additional code for new functions. </p> <p>Tip</p> <p>Use Generic module <code>Module 18</code> to have almost all GPIO pins available.</p> <p>Each module is assigned a number which is used in Template configuration or when using <code>Module</code> command.</p> # Name Module specifics 0 Template Module for currently active template. Named after the template NAME field.If a template is not active it will display <code>Generic (0)</code>.Do not use it until you configure a template, use <code>Generic (18)</code> instead     1 Sonoff Basic     2 Sonoff RF     3 Sonoff SV     4 Sonoff TH     5 Sonoff Dual Process relay and button via hardware serial interface using GPIO01 and GPIO03. Change the baud rate to 19200 bps. Process buttons as single press only     6 Sonoff POW     7 Sonoff 4Ch     8 Sonoff S2X     9 Slampher     10 Sonoff Touch Invert <code>LedState 1</code> functionality     11 Sonoff LED Set light type to 2 PWM channels disregarding SetOption15. Fix device specific LED instabilities by disabling GPIO04, GPIO5 and GPIO14     12 1 Channel     13 4 Channel See Sonoff Dual     14 Motor C/AC Force all relays ON at power up and disable command\u00a0<code>PowerOnState</code>     15 ElectroDragon     16 EXS Relay(s) Enable pulse latching using even/odd numbered relay pairs     17 WiOn     18 Generic Show Wemos specific pin information in GUI     19 Sonoff Dev     20 H801 Change hardware UART Tx from GPIO01 to GPIO02     21 Sonoff SC Enable and process data via hardware serial interface using GPIO01 and GPIO03. Change the baud rate to 19200 bps     22 Sonoff BN-SZ Set light type to 1 PWM channel disregarding <code>SetOption15</code>     23 Sonoff 4Ch Pro Button handling disregarding <code>SetOption13</code> only allowing single press to enable RF learning while holding the button     24 Huafan SS     25 Sonoff Bridge Enable and Process data via hardware serial interface using GPIO01 and GPIO03. Change the baud rate to 19200 bps. Process 16 buttons in web GUI. Enable EFM8BB1 firmware upload     26 Sonoff B1 Set light type to RGBWC using MY92x1     27 AiLight Set light type to RGBW using MY92x1     28 Sonoff T1 1Ch See Sonoff Touch     29 Sonoff T1 2Ch See Sonoff Touch     30 Sonoff T1 3Ch See Sonoff Touch     31 Supla Espablo     32 Witty Cloud     33 Yunshan Relay     34 MagicHome     35 Luani HVIO     36 KMC 70011     37 Arilux LC01     38 Arilux LC11     39 Sonoff Dual R2 Process buttons as single press only     40 Arilux LC06     41 Sonoff S31 Selects component types for the CSE7766 (serial connected energy monitoring chip) with Rx and Tx hardware serial (even parity) on GPIO01 and GPIO03 respectively. Sets serial interface to 4800 baud and disables serial logging     42 Zengge WF017     43 Sonoff Pow R2     44 Sonoff iFan02 Enable command\u00a0<code>FanSpeed</code>. Disable <code>Interlock</code> and <code>PulseTime</code>. Tune status information, MQTT data and GUI. Sync with microcontroller. Process Domoticz Fan state     45 BlitzWolf SHP Module specific power monitoring calibration     46 Shelly 1     47 Shelly 2     48 Xiaomi Philips Process color temperature using PWM2 and intensity using PWM1     49 Neo Coolcam     50 ESP Switch     51 OBI Socket     52 Teckin     53 APLIC WDP303075     54 TuyaMCU Enable and process data via software or hardware serial interface using component 107 and 108. Change the baud rate to 9600 bps. Process all buttons. Read more...     55 Gosund SP1 v23     56 Armtronix Dimmers Enable and process data via software or hardware serial interface using component 148 and 149. Change baudrate to 115200 bps.     57 SK03 Outdoor (Tuya)     58 PS-16-DZ Enable and process data via software or hardware serial interface using component 148 and 149. Change the baud rate to 19200 bps.     59 Teckin US     60 Manzoku Strip (EU 4)     61 OBI Socket 2     62 YTF IR Bridge Disable serial interface to stop loopback.     63 Digoo DG-SP202     64 KA10     65 Luminea ZX2820     66 Mi Desk Lamp Process rotary and <code>Button1</code> data specific to this device     67 SP10     68 WAGA CHCZ02MB     69 SYF05     70 Sonoff L1     71 Sonoff iFan03     72 EX-Store Dimmer     73 PWM Dimmer For MJ-SD01/acenx/NTONPOWER PWM dimmers. Read more...     74 Sonoff D1 Dimmer 75 Sonoff ZbBridge Sonoff Zigbee bridge <p>Serial logging is disabled by the Tasmota code for several modules and components (e.g., Sonoff POW, Sonoff S31, Sonoff Dual (v1), Tuya dimmers, PZEM components, etc.). Serial communication is used by these devices to transfer the data from the MCU chip to the ESP chip. Do not enable serial logging (SerialLog 0) on these devices. It can cause the device software to crash.</p> <p>Supported Modules</p>"},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/","title":"Moisture Sensor and Chirp! Sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_CHIRP\n#define USE_CHIRP        // [I2cDriver33] Enable CHIRP soil moisture sensor (variable I2C address, default 0x20)\n#endif\n</code></pre></p> <p>Chirp! I<sup>2</sup>C moisture sensor is the sensor-only version of the original Chirp! sensor.  </p> <p>The \"sensor mode only\" (without the chirp function) is the preferred sensor variant for Tasmota. It provides additional temperature readings. Chirp! is a plant watering alarm which uses capacitive sensing to measure moisture. It provides ambient light readings and works in Tasmota, but is not the recommended version.  </p> <p>Additional References: - Catnip electronics - Plant Watering Alarm </p>"},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/#connecting-to-an-esp82xx","title":"Connecting to an ESP82xx","text":"<p>Use a standard I<sup>2</sup>C connection plus 3.3V and GND.</p>"},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/#device-configuration","title":"Device Configuration","text":"<p>In the Configuration -&gt; Configure Other page, enter and activate  the following template: <code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,0,0,0,6,5,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code> </p> <p>BASE: Generic (18) GPIO4 : I2C SDA (06) GPIO5 : I2C SCL (05)</p> <p>At boot time the driver will scan the I<sup>2</sup>C bus for CHIRP moisture sensors and enumerate them starting with 0. The sensor has a default I<sup>2</sup>C address of <code>0x20</code>, which can be changed within the driver so that multiple sensors are possible.  </p> <p>Write access to the sensor is potentially dangerous!! Only change the I<sup>2</sup>C address while only one is sensor connected, using a stable power supply, and if you are familiar with how to flash the sensor.  </p>"},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/#commands","title":"Commands","text":"Command Description CHIRPScan Re-scan the I<sup>2</sup>C bus and re-enumerate the sensors. CHIRPSelect Select the active sensor, which can receive commands. To select the first sensor use <code>CHIRPSELECT 0</code>. CHIRPSet Set the new I<sup>2</sup>C address for the selected sensor. Use decimal address.To change active sensor to <code>0x1f</code> (=31) use <code>CHIRPSET 31</code>. CHIRPSleep Put the selected sensor into sleep mode. CHIRPWake Wake the selected (sleeping) sensor. CHIRPReset Reset the selected sensor."},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/#sensor-readings","title":"Sensor readings","text":"<p>The original explanation from the manufacturer can be found on this tindie page .  </p> <p>It is important to understand, that the light sensor does not provide LUX but a relative reading (<code>0..65535</code>), where more light means a lower value!  The term DARKNESS is used in Tasmota.  </p> <p>!! \u26a0\ufe0f PLEASE USE <code>TelePeriod</code> OF 20 OR GREATER \u26a0\ufe0f !! The driver will sync with the <code>TelePeriod</code> and start the measure cycle about 17 seconds before the next telemetry message. You can issue a <code>Status 8</code> and any time to output that last sensor readings.  </p>"},{"location":"Moisture-Sensor-and-Chirp%21-Sensor/#known-issues","title":"Known issues","text":"<p>The sensor is relatively slow and therefore the driver will (try to) slow down the I<sup>2</sup>C bus-speed and extend the CLOCKSTRETCHLIMIT. A long discussion about it can be found here. The problem seems to occur mostly when the sensor wakes up from sleep. That is why the implemented auto-sleep-wake function is currently deactivated in the driver. Typically when you get readings of <code>0</code> for all 3 measurements, then the I<sup>2</sup>C bus is likely \"frozen\". The expected result for <code>I2CSCAN</code> on the console is <code>{\"I2CScan\":\"Error 4 at 0x01\"}</code>. A restart (<code>Restart 1</code>) of Tasmota should be enough, but you may need to power cycle the device. Different ESP Cores may lead to different behavior.  </p> <p>It is possible to flash incorrect firmware to a sensor (chirp vs non-chirp). This will very likely lead to nonsense temperature readings.  </p> <p>Multiple sensors on one I<sup>2</sup>C  bus were tested successfully, but are not guaranteed to work due to multiple possible reasons (power, cabling, ...). Your mileage may vary.</p>"},{"location":"NRF24L01/","title":"NRF24L01 module","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_SPI            // Hardware SPI using GPIO12(MISO), GPIO13(MOSI) and GPIO14(CLK) in addition to two user selectable GPIOs(CS and DC)\n#ifndef USE_NRF24\n#define USE_NRF24          // Add SPI support for RF24L01(+) (+2k6 code)\n#define USE_MIBLE          // BLE-bridge for some Mijia-BLE-sensors (+4k7 code)\n#endif\n</code></pre></p> <p>This chip is manufactured by Nordic Semiconductors as a single chip transceiver in the 2,4 GHz band. There are many applications of this chip in many projects as a versatile very low cost wireless module.  </p> <p>In recent years solutions were found to use this chip for limited Bluetooth-Low-Energy communication. One of the first articles about this topic can be found here.</p> <p>Subsequently, further work was done by several developers and a working bridge to read sensor data from a Xiaomi MJ_HT_V1 BLE sensor was created. The fundamental principle is, that some of these sensors send its data as a usual BLE-advertisement packet with a proprietary data format at the end of the payload. These packets had to fit into the 32 bytes of the FIFO-RX-buffer of the RF24L01, otherwise the \"later\" bytes were lost. </p> <p>A new solution was found for the Tasmota driver. </p> <p>The basic idea is to use some constant ID-bytes of the BLE-packets as the PDU-type for the NRF24l01. Thus, all bytes before these ID-bytes are lost and the size restriction for the payload is successfully circumvented. That way it is possible to read the sensor data from a Mi Flora sensor, which is positioned outside of the 32-byte-range. Of course there is still no bidirectional \"real\" BLE-communication, only advertisements can be read.</p>"},{"location":"NRF24L01/#configuration","title":"Configuration","text":""},{"location":"NRF24L01/#wiring","title":"Wiring","text":"<p>Configure the pins for SPI_DC and SPI_CS while connecting the hardware SPI pins 12 - 14 (MOSI, MISO and CLOCK).  </p> <p>Tip</p> <p>In order to simplify the code, the pin names from the SPI-display-drivers are used in the webUI! For nRF24L01 SPI_DC translates to CSN and SPI_CS to CE.  </p> <p>Warning</p> <p>Even slightly loose cables can lead to malfunctions of the SPI-data-transfer. This can produce a Software WDT reset.</p>"},{"location":"NRF24L01/#tasmota-settings","title":"Tasmota Settings","text":"<p>No additional steps are necessary.  </p> <p>The initial log should like this:  </p> <pre><code>00:00:00 NRF24L01 initialized  \n00:00:00 NRF24L01+ detected  \n00:00:00 MIBLE: started  \n</code></pre> <p>The driver will do the rest automatically and start to look for known \"special\" packets, which will be used to extract the sensor readings. webUI and TELE-messages will be populated with sensor data.  This can take a while after start and may be influenced by the general traffic on the 2,4 GHz band.  </p> <p>For a complete overview of supported devices, commands and features read the Bluetooth article.</p>"},{"location":"NeoPool/","title":"Sugar Valley NeoPool Controller","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_NEOPOOL\n#define USE_NEOPOOL                       // Add support for Sugar Valley NeoPool Controller - also known under brands Hidrolife, Aquascenic, Oxilife, Bionet, Hidroniser, UVScenic, Station, Brilix, Bayrol and Hay (+6k flash, +60 mem)\n#endif\n</code></pre></p> <p>Sugar Valley NeoPool are water treatment systems also known under the names Hidrolife, Aquascenic, Oxilife, Bionet, Hidroniser, UVScenic, Station, Brilix, Bayrol and Hay. It uses a RS485 interface with the Modbus data protocol for enhancement equipment like Wifi-Interface or a second attached control panel. All functions and parameters can be queried and controlled via this bus interface.</p> <p>The Tasmota Sugar Valley NeoPool Controller sensor module shows the most of parameters such as the built-in display:</p> <p></p> <p>There are Tasmota commands implemented to control the high level functions for filtration, light and system parameters such as pH setpoint, hydrolysis level, redox setpoint etc. However, the sensor also provides low-level commands to directly read and write NeoPool register, means that you have the option to implement your own commands via home automation systems or by using the Tasmota build-in possibilities Rules with Backlog or the powerful Berry language on ESP32.</p>"},{"location":"NeoPool/#connection","title":"Connection","text":"<p>The NeoPool controller uses a RS485 interface, the ESP has RS232 interfaces. Both are serial interfaces but with different physical specifications. Therefore to connect your NeoPool controller to an ESP82xx/32 you need a TTL-UART to RS485 converter. For an ESP8266 it is recommended to use GPIO1 and GPIO3, because the ESP then uses the serial interface of the hardware.</p> <p></p>"},{"location":"NeoPool/#using-m5stack-atom-lite-with-tail485-addon","title":"Using M5Stack Atom Lite with Tail485 addon","text":"<p>This is the easiest and the most comfortable way to run Tasmota with the Sugar Valley system. The combination of a M5Stack Atom Lite and the Tail485 addon is very small, does not need a separate power supply (because it is powered from the Sugar Valley system) and can even be placed directly next to the system or in the junction box itself. </p> <p>For this you will need:</p> <ul> <li>a M5Stack Atom Lite</li> <li>a Tail485</li> <li>a 4 wire dupont cable or 4 wire cable using a 5 pin 2,54 mm JST connector(see also Sugar Valley connection)</li> <li>Sugar Valley pin 1 (+12V) goes to Tail485 pin 12V (9-24V)</li> <li>Sugar Valley pin 3 (Modbus A+) goes to Tail485 pin A</li> <li>Sugar Valley pin 4 (Modbus B-) goes to Tail485 pin B</li> <li>Sugar Valley pin 5 (Modbus GND) goes to Tail485 pin GND</li> </ul> <p>For final use, put the whole thing together:</p> <p></p> <p>To get this combination running:</p> <ul> <li>compile your own Tasmota including the NeoPool driver as described under the red note <code>\"This function is not included in precompiled binaries\"</code> at the very top of this page and flash your this to your M5STack Atom Lite using USB</li> <li>make the configuration steps M5Stack Atom Lite with Tail485 template</li> <li>turn off the Sugar Valley device and plug the 4-wire dupont or 5 pin JST cable into the WIFI or EXTERN ports</li> <li>turn on the Sugar Valley device</li> </ul> <p>That's all.</p>"},{"location":"NeoPool/#using-any-other-esp","title":"Using any other ESP","text":"<p>The following TTL UART to RS485 converter have been tested with both an ESP8266 and ESP32 using a Vcc of 3.3V:</p> <p> </p> <p>Note</p> <p>Your TTL UART to RS485 converter must be able to work with an operating voltage of 3.3V. Some converters are not designed for operating with 3.3V and only works with 5V TTL level - these converters are useless. Do not operate your TTL UART to RS485 converter with 5V, your converter must be operated with the 3.3V from ESP, otherwise the ESP GPIO ports will be damaged.</p>"},{"location":"NeoPool/#sugar-valley-connection","title":"Sugar Valley connection","text":"<p>The Sugar Valley NeoPool RS485 connector pins are located under the connection cover, for the Sugar-Valley products on the right-hand side next to the relay connections:</p> <p>The pin assignment (from top to bottom):</p> Pin Description 1 +12V 2 nc 3 Modbus A+ 4 Modbus B- 5 Modbus GND <p>The +12V connection is the 12V from the internal power supply, do not feed in any external voltage.</p> <p>You can use the \"WIFI\" or \"EXTERN\" connector, both are independent Modbus channels and uses the Modbus address 1 by default.</p> <p>Note</p> <p>The \"DISPLAY\" port can only be used if neither the built-in nor an external display is connected but since there is probably at least one display connected to one of the two \"DISPLAY\" ports, the \"DISPLAY\" port is useless.</p>"},{"location":"NeoPool/#using-wifi-port","title":"Using WIFI Port","text":""},{"location":"NeoPool/#using-extern-port","title":"Using EXTERN Port","text":"<p>Note</p> <p>Leave the define for <code>NEOPOOL_MODBUS_ADDRESS</code> set to 1 whether you are using the \"WIFI\" or \"EXTERNAL\" port (unless you have changed the parameters for it within your Sugar Valley device).</p>"},{"location":"NeoPool/#configuration","title":"Configuration","text":""},{"location":"NeoPool/#tasmota-settings","title":"Tasmota settings","text":"<p>The configuration is limited to the assignment of two GPIOs under Tasmota Configuration -&gt; Configure Module:</p> <ul> <li>change the Module type to <code>Generic (0)</code> - this will restart your Tasmota</li> <li>After restart set</li> <li>GPIO1 to <code>NeoPool RX</code></li> <li>GPIO3 to <code>NeoPool TX</code></li> </ul> <p></p> <p>Don't be surprised that Rx seems to be connected to Tx here (and vice versa). The Rx and Tx designations are to be considered from the point of view of the respective devices, which can be confusing.</p>"},{"location":"NeoPool/#m5stack-atom-lite-with-tail485-template","title":"M5Stack Atom Lite with Tail485 template","text":"<p>For this combination use a template, got to Console and enter the command below:</p> <pre><code>Template {\"NAME\":\"NeoPool\",\"GPIO\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,6976,0,0,0,0,0,7008,1,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1}\n</code></pre> <p>This also allows the later use of the additonal GPIOs 19, 21 - 23 and 33 for other purposes (sensors or similar).</p> <p>After a restart active the template using command <code>Module 0</code>.</p>"},{"location":"NeoPool/#final-check","title":"Final check","text":"<p>After Tasmota restarts, the main screen should display the controller data as shown above. If not, check that the A+/B pins aren't swapped and that the Rx/Tx pins are on the correct GPIOs - swap once if in doubt.</p>"},{"location":"NeoPool/#sensor-data","title":"SENSOR data","text":"<p>Sensor data is sent via the Tasmota topic <code>tele/%topic%/SENSOR</code> in JSON format every TelePeriod interval. To get the data immediately, use the Tasmota TelePeriod command without parameter:</p> <pre><code>{\n  \"Time\": \"2021-06-01T11:00:00+02:00\",\n  \"NeoPool\": {\n    \"Time\": \"2021-06-01T11:00:00\",\n    \"Type\": \"Oxilife\",\n    \"Module\": {\n      \"pH\": 1,\n      \"Redox\": 1,\n      \"Hydrolysis\": 1,\n      \"Chlorine\": 1,\n      \"Conductivity\": 1,\n      \"Ionization\": 1\n    },\n    \"Temperature\": 23.5,\n    \"Powerunit\": {\n      \"Version\": \"V3.45\",\n      \"NodeID\": \"XXXX XXXX XXXX XXXX XXXX 442A\",\n      \"5V\": 5.017,\n      \"12V\": 13.904,\n      \"24-30V\": 33.721,\n      \"4-20mA\": 0.01\n    },\n    \"pH\": {\n      \"Data\": 7.2,\n      \"Min\": 7.0,\n      \"Max\": 7.2,\n      \"State\": 0,\n      \"Pump\": 2,\n      \"FL1\": 0,\n      \"Tank\": 1\n    },\n    \"Redox\": {\n      \"Data\": 752,\n      \"Setpoint\": 750\n    },\n    \"Chlorine\": {\n      \"Data\": 0.7,\n      \"Setpoint\": 1.0\n    },\n    \"Conductivity\": 0,\n    \"Ionization\": {\n      \"Data\": 0,\n      \"Setpoint\": 0,\n      \"Max\": 0\n    },\n    \"Hydrolysis\": {\n      \"Data\": 100,\n      \"Unit\": \"%\",\n      \"Setpoint\": 100,\n      \"Max\": 100,\n      \"Runtime\": {\n        \"Total\": \"28T22:13:19\",\n        \"Part\": \"28T22:13:02\",\n        \"Pol1\": \"14T12:32:46\",\n        \"Pol2\": \"14T09:40:33\",\n        \"Changes\": 258\n      },\n      \"State\": \"Pol1\",\n      \"Cover\": 0,\n      \"Boost\": 0,\n      \"Low\": 0,\n      \"FL1\": 0,\n      \"Redox\": 1\n    },\n    \"Filtration\": {\n      \"State\": 1,\n      \"Speed\": 2,\n      \"Mode\": 1\n    },\n    \"Light\": 0,\n    \"Relay\": {\n      \"State\": [0, 1, 0, 0, 0, 1, 0],\n      \"Aux\": [0, 0, 1, 0],\n      \"Acid\": 0\n    },\n    \"Connection\": {\n      \"Time\": \"2024-08-14T15:00:00\",\n      \"MBRequests\": 9040,\n      \"MBNoError\": 9039,\n      \"MBIllegalFunc\": 0,\n      \"MBIllegalDataAddr\": 0,\n      \"MBIllegalDataValue\": 0,\n      \"MBSlaveError\": 0,\n      \"MBAck\": 0,\n      \"MBSlaveBusy\": 0,\n      \"MBNotEnoughData\": 0,\n      \"MBMemParityErr\": 0,\n      \"MBCRCErr\": 0,\n      \"MBGWPath\": 0,\n      \"MBGWTarget\": 0,\n      \"MBRegErr\": 0,\n      \"MBRegData\": 0,\n      \"MBTooManyReg\": 0,\n      \"MBUnknownErr\": 0,\n      \"MBNoResponse\": 1,\n      \"DataOutOfRange\": 0\n    }\n  },\n  \"TempUnit\": \"C\"\n}\n</code></pre>"},{"location":"NeoPool/#sensor-data-description","title":"SENSOR data description","text":"Key Details Time (String) Device time Type (String) Model description (<code>Hidrolife</code>, <code>Aquascenic</code>, <code>Oxilife</code>, <code>Bionet</code>, <code>Hidroniser</code>, <code>UVScenic</code>, <code>Station</code>, <code>Brilix</code>, <code>Generic</code>, <code>Bayrol</code> or <code>Hay</code>) Module (Bool) These subkeys indicate whether the corresponding module is installed and activated (<code>1</code>) or not (<code>0</code>) Temperature (Float) Temperature value from temperature sensor (only available if temperature sensor is installed) Powerunit.Version (String) The firmware version of the power unit module Powerunit.NodeID (String) The NodeID of your device (default hidden, do not publish your NodeID). See <code>SetOption157</code> Powerunit.5V (Float) Voltage value of the 5 Volt output Powerunit.12V (Float) Voltage value of the 12 Volt output Powerunit.24-30V (Float) Voltage value of the 24-30 Volt output Powerunit.4-20mA (Float) Current value of the 4-20mA output pH.Data (Float) Current pH value (<code>0</code>..<code>14</code>) pH.Min (Float) Minimum setting value for pH control (only useful if a base pump is connected). pH.Max (Float) Maximum setting value for pH control (only useful if an acid pump is connected). pH.State (Int) Status of the pH controller:<code>0</code> = no alarm<code>1</code> = pH too high: pH value is 0.8 points higher than setpoint (<code>NPpHMax</code> on acid systems, <code>NPpHMin</code> on base systems, <code>NPpHMax</code> on acid+base systems)<code>2</code> = pH too low: pH value is 0.8 points lower than setpoint (<code>NPpHMax</code> on acid systems, <code>NPpHMin</code> on base systems, <code>NPpHMin</code> on acid+base systems)<code>3</code> = pH pump has exceeded the working time set by the MBF_PAR_RELAY_PH_MAX_TIME parameter and has stopped<code>4</code> = pH higher than setpoint (<code>NPpHMax</code> + 0.1 on acid systems, <code>NPpHMin</code> + 0.1 on base systems, <code>NPpHMax</code> on acid+base systems)<code>5</code> = pH lower than setpoint (<code>NPpHMax</code> - 0.3 on acid systems, <code>NPpHMin</code> - 0.3 on base systems, <code>NPpHMin</code> on acid+base systems)<code>6</code> = Tank level alarm pH.Pump (Int) pH control module and controlling pumps:<code>0</code> = pH control module and controlling pumps inactive<code>1</code> = Acid/base pH pump pump on<code>2</code> = Acid/base pH pump pump off pH.FL1 (Bool) Control status of the pH module by flow detection:<code>0</code> = Disable<code>1</code> = Enable pH.Tank (Bool) Acid/Base tank signal input:<code>0</code> = Tank empty<code>1</code> = No Tank alarm Redox.Data (Int) Current redox value [mV] Redox.Setpoint (Int) Redox target [mV] Chlorine.Data (Float) Current chlorine value [ppm] Chlorine.Setpoint (Float) Chlorine target production level [ppm] Conductivity (Int) Current conductivity level [%] Ionization.Data (Int) Current ionization level Ionization.Setpoint (Int) Ionization target production level Ionization.Max (Int) Ionization maximum production level (system defined) Hydrolysis.Data (Float/Int) Hydrolysis current production level Hydrolysis.Unit (String)  Hydrolysis unit (\"g/h\" or \"%\") Hydrolysis.Setpoint (Float/Int) Hydrolisis target production level Hydrolysis.Max (Float/Int) Hydrolysis maximum production level [g/h Hydrolysis.Runtime.Total (String) Cell total runtime (format dd_T_hh:_mm_:ss) Hydrolysis.Runtime.Part (String) Cell partly runtime Hydrolysis.Runtime.Pol1 (String) Cell runtime for polarization 1 Hydrolysis.Runtime.Pol2 (String) Cell runtime for polarization 2 Hydrolysis.Runtime.Changes (Int) Number of polarization changes Hydrolysis.State (String) Cell state:<code>OFF</code> = Cell inactive<code>FLOW</code> = Cell water flow alarm<code>POL1</code> = Cell polarization 1 active<code>POL2</code> = Cell polarization 2 active Hydrolysis.Cover (Bool) Cover signal input:<code>0</code> = Cover input inactive<code>1</code> = Cover input active Hydrolysis.Boost (Int) Boost mode state:<code>0</code> = Boost mode inactive<code>1</code> = Boost mode active<code>2</code> = Boost mode active with redox control Hydrolysis.Low (Bool) Hydrolysis low alarm:<code>0</code> = No alarm<code>1</code> = Hydrolysis cannot reach the setpoint Hydrolysis.FL1 (Bool) Hydrolysis cell flow indicator:<code>0</code> = No alarm<code>1</code> = Hydrolysis flow alarm, no flow detected Hydrolysis.Redox (Bool) Activation of hydrolysis by the redox module:<code>0</code> = Not activated by redox module<code>1</code> = Activated by redox module Filtration.State (Int) Filtration pump state:<code>0</code> = Pump off<code>1</code> = Pump on Filtration.Speed (Int) Filtration pump speed:<code>1</code> = Low<code>2</code> = Middle<code>3</code> = High Filtration.Mode (Int) Filtration mode:<code>0</code> = Manual<code>1</code> = Auto<code>2</code> = Heating<code>3</code> = Smart<code>4</code> = Intelligent<code>13</code> = Backwash operation Light (Bool) Light state:<code>0</code> = Light off<code>1</code> = Light on Relay Relay state values (<code>0</code> = off, <code>1</code> = on): Relay.State (Array) Relay states for all possible seven relays 1-7 (functional independent) Relay.Aux (Array) Relay states for the 4 Aux relais (these are the same as <code>Relay.State</code> 4-7 - functional independent) Relay.Acid (Bool) Acid relay state Relay.Base (Bool) Base relay state Relay.Redox (Bool) Redox relay state Relay.Chlorine (Bool) Chlorine relay state Relay.Conductivity (Bool) Conductivity relay state Relay.Heating (Bool) Heating relay state Relay.UV (Bool) UV relay state Relay.Valve (Bool) Valve relay state Connection NeoPool Modbus connection statistics (ESP32 only, NPSetOption1 must be 1): Connection.Time (String) Start time statistics Connection.MBRequests (Int) Total ModBus queries Connection.MBNoError (Int) Responses without error Connection.MBNoResponse (Int) Missing responses Connection.DataOutOfRange (Int) Number of values outside the sensor range Connection.MBIllegalFunc (Int) Err 1: Illegal Function Connection.MBIllegalDataAddr (Int) Err 2: Illegal Data Address Connection.MBIllegalDataValue (Int) Err 3: Illegal Data Value Connection.MBSlaveError (Int) Err 4: Slave Error Connection.MBAck (Int) Err 5: Acknowledge but not finished (no error) Connection.MBSlaveBusy (Int) Err 6: Slave Busy Connection.MBNotEnoughData (Int) Err 7: Not enough minimal data received Connection.MBMemParityErr (Int) Err 8: Memory Parity error Connection.MBCRCErr (Int) Err 9: CRC error Connection.MBGWPath (Int) Err 10: Gateway Path Unavailable Connection.MBGWTarget (Int) Err 11: Gateway Target device failed to respond Connection.MBRegErr (Int) Err 12: Wrong number of registers Connection.MBRegData (Int) Err 13: Register data not specified Connection.MBTooManyReg (Int) Err 14: To many registers Connection.MBUnknownErr (Int) Unknown errors occured <p>The JSON values <code>pH</code>, <code>Redox</code>, <code>Hydrolysis</code>, <code>Chlorine</code>, <code>Conductivity</code> and <code>Ionization</code> are only available if the corresponding module is installed in the device (the corresponding \"Module\" subkey must be <code>1</code>).</p> <p>The <code>Relay</code> subkeys <code>Acid</code>, <code>Base</code>, <code>Redox</code>, <code>Chlorine</code>, <code>Conductivity</code>, <code>Heating</code>, <code>UV</code> and <code>Valve</code> are only available if the related function is assigned to a relay.</p> <p>To check which modules are installed use the <code>Module</code> value from SENSOR topic or query it manually by using the NPControl command:</p> <pre><code>{\n  \"Modules\": {\n    \"pH\": 1,\n    \"Redox\": 1,\n    \"Hydrolysis\": 1,\n    \"Chlorine\": 0,\n    \"Conductivity\": 0,\n    \"Ionization\": 0\n  },\n  \"Relay\": {\n    \"Acid\": 1,\n    \"Base\": 0,\n    \"Redox\": 0,\n    \"Chlorine\": 0,\n    \"Conductivity\": 0,\n    \"Heating\": 4,\n    \"UV\": 0,\n    \"Valve\": 0\n  }\n}\n</code></pre> Key Details Modules (Bool) These subkeys indicate whether the corresponding module is installed and activated (<code>1</code>) or not (<code>0</code>) Relays (Int) These subkeys list the relay number assignments to the internal function (<code>0</code>..<code>7</code>)<code>0</code> = functionality is unassigned<code>1</code>..<code>7</code>  functionality is assigned to the related relay numberExamples: <code>\"Acid\": 1</code> means relay 1 is assigned to the acid function<code>\"Heating\": 4</code> means relay 4 (is equal to Aux1) is assigned to the heating function"},{"location":"NeoPool/#commands","title":"Commands","text":"<p>This sensor supports some high-level commands for end user.</p> <p>Regardless, all other Modbus registers can be read and write, so you can enhance your Sugar Valley control by using low-level NPRead/npwrite commands.</p> <p>Modbus register addresses and their meaning are described within source file xsns_83_neopool.ino at the beginning and (partly) within document 171-Modbus-registers. Please note that Sugar Valley Modbus registers are not byte addresses but modbus registers containing 16-bit values - don't think in byte memory layout.</p> Command Parameters NPFiltration <code>&lt;state&gt;( &lt;speed&gt;)</code>Set manual filtration (state = <code>0</code> or <code>1</code>, speed = <code>1..3</code>):<ul><li><code>0</code> - manual turn filtration pump off</li><li><code>1</code> - manual turn filtration pump on</li></ul>Optional set filtration <code>&lt;speed&gt;</code> (only available if filtration speed control is configured):<ul><li><code>1</code> - slow</li><li><code>2</code> - medium</li><li><code>3</code> - fast</li></ul> NPFiltrationmode <code>&lt;mode&gt;</code>Set filtration mode (mode = <code>0..4</code> or <code>13</code>):<ul><li><code>0</code> - MANUALallows to turn the filtration (and all other systems that depend on it) on and off</li><li><code>1</code> - AUTOallows filtering to be turned on and off according to the settings of the MBF_PAR_TIMER_BLOCK_FILT_INT timers.</li><li><code>2</code> - HEATINGsimilar to the AUTO mode, but includes setting the temperature for the heating function. This mode is activated only if the BF_PAR_HEATING_MODE register is at 1 and there is a heating relay assigned.</li><li><code>3</code> - SMARTadjusts the pump operating times depending on the temperature. This mode is activated only if the MBF_PAR_TEMPERATURE_ACTIVE register is at 1.</li><li><code>4</code> - INTELLIGENTperforms an intelligent filtration process in combination with the heating function. This mode is activated only if the MBF_PAR_HEATING_MODE register is at 1 and there is a heating relay assigned.</li><li><code>13</code> - BACKWASHstarted when the backwash operation is activated. NPFiltrationspeed <code>&lt;speed&gt;</code>Set manual filtration speed (speed = <code>1..3</code>):<ul><li><code>1</code> - Low</li><li><code>2</code> - Mid</li><li><code>3</code> - High</li></ul>Note: The command is only available if filtration speed control is configured. NPBoost <code>&lt;mode&gt;</code>Set hydrolysis/electrolysis boost mode (mode = <code>0..2</code> or <code>OFF</code>, <code>ON</code>, <code>REDOX</code>):<ul><li><code>0</code> or <code>OFF</code> - Boost offdisables the boost mode</li><li><code>1</code> or <code>ON</code> - Boost onenables the boost mode independent of the redox value</li><li><code>2</code> or <code>REDOX</code> - Boost on with Redox controlsimilar to ON, but with consideration of the current redox settings.</li></ul>Note: The boost function always switches the filtering on. NPTime <code>&lt;time&gt;</code>Set device time:<ul><li><code>0</code> - sync with Tasmota local time</li><li><code>1</code> - sync with Tasmota utc time</li><li><code>2..4294967295</code> - set time as epoch</li></ul> NPLight <code>&lt;state&gt;( &lt;delay&gt;)</code>Set light (state = <code>0..4</code>, delay = <code>5..100</code> in 1/10 sec):<ul><li><code>0</code> - manual turn light off</li><li><code>1</code> - manual turn light on</li><li><code>2</code> - manual toggle light</li><li><code>3</code> - switch light into auto mode according MBF_PAR_TIMER_BLOCK_LIGHT_INT settings</li><li><code>4</code> - select light RGB LED to next program. This is normally done by power the light on (if currently off), then power off the light for <code>&lt;delay&gt;</code> time and power on again. <code>&lt;delay&gt;</code> must be specified in 1/10 seconds, default is 15 (=1.5 sec). NPpHMin <code>&lt;ph&gt;</code>Set pH lower limit (ph = <code>0..14</code>)Note: The command is only available if the pH module is installed. NPpHMax <code>&lt;ph&gt;</code>Set pH upper limit (ph = <code>0..14</code>)Note: The command is only available if the pH module is installed. NPpH <code>&lt;ph&gt;</code>Set pH upper limit (ph = <code>0..14</code>) - alias for NPpHMaxNote: The command is only available if the pH module is installed. NPRedox <code>&lt;setpoint&gt;</code>Set redox setpoint in mV (setpoint = <code>0..1000</code>)Note: The command is only available if the redox module is installed. NPHydrolysis <code>&lt;level&gt;( %)</code>Set hydrolysis/electrolysis level:<ul><li><code>0..100</code> in % for systems configured to %</li><li><code>0..&lt;max&gt;</code> in g/h for systems configured to g/h (<code>&lt;max&gt;</code> depends on the value of the MBF_PAR_HIDRO_NOM register of the device)</li></ul><code>&lt;level&gt;</code> can specified in % on all systems by appending the % sign to the valueNote: The command is only available if the hydrolysis/electrolysis control is present. NPIonization <code>&lt;level&gt;</code>Set ionization target production level (level = <code>0..&lt;max&gt;</code>, the upper limit <code>&lt;max&gt;</code> may vary depending on the MBF_PAR_ION_NOM register)Note: The command is only available if the hydrolysis/electrolysis control is present. NPChlorine <code>&lt;setpoint&gt;</code>Set chlorine setpoint in ppm (setpoint = <code>0..10</code>)Note: The command is only available if the free chlorine probe detector is installed. NPControl Show information about system controls. NPTelePeriod <code>&lt;time&gt;</code>Enables/disables auto telemetry message when NeoPool values change (time = <code>0</code> or <code>5..3600</code>):<ul><li><code>0</code> - disable this function off (default), telemetry message are only reported depending on TelePeriod setting</li><li><code>5..3600</code> - set the minimum of seconds between two telemetry messages for NeoPool measured values (status changes for relays and settings trigger the SENSOR messages immediately, regardless of the time set)</li></ul>Hint: To get immediate telemetry messages only for status changes (relays, settings) set <code>&lt;time&gt;</code> higher than TelePeriod. In this case, measured sensors are reported only by TelePeriod setting, status changes are reported immediately. NPOnError <code>&lt;repeat&gt;</code>Set the number of retries for Modbus read/write commands errors (repeat = <code>0..10</code>):<ul><li><code>0</code> - disable auto-repeat on read/write error</li><li><code>1..10</code> - repeat commands n times until ok</li></ul> NPResult <code>&lt;format&gt;</code>Set addr/data result format for read/write commands (format = <code>0|1</code>):<ul><li><code>0</code> - output decimal numbers</li><li><code>1</code> - output hexadecimal strings, this is the default</li></ul> NPPHRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for PH value (resolution = <code>0..3</code>). NPCLRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for CL value (resolution = <code>0..3</code>). NPIONRes <code>&lt;resolution&gt;</code>Set number of decimal places in results for ION value (resolution = <code>0..3</code>). NPSetOption0 Sensor data min/max validation and correction function (ESP32 only)<code>0</code> = disable correction <code>1</code> = enable correction (default) NPSetOption1 NeoPool Modbus connection statistics (ESP32 only)<code>0</code> = disable statistics <code>1</code> = enable statistics (default) NPRead <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPRead <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadLSB <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device LSB of 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadMSB <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device MSB of 16-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..30</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPReadL <code>&lt;addr&gt;( &lt;cnt&gt;)</code>Read device 32-bit register (addr = <code>0..0x06FF</code>, cnt = <code>1..15</code>). <code>&lt;cnt&gt;</code> = <code>1</code> if omitted NPWrite <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFFFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteLSB <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device LSB 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteMSB <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device MSB 16-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFF</code>). Use of <code>&lt;data&gt;</code> max 20 times NPWriteL <code>&lt;addr&gt; &lt;data&gt;( &lt;data&gt;...)</code>Write device 32-bit register (addr = <code>0..0x06FF</code>, data = <code>0..0xFFFFFFFF</code>). Use of <code>&lt;data&gt;</code> max 10 times NPBit <code>&lt;addr&gt; &lt;bit&gt;( &lt;data&gt;)</code>Read/Write a single bit from device 16-bit register (addr = <code>0..0x06FF</code>, bit = <code>0..15</code>, data = <code>0|1</code>). Read if <code>&lt;data&gt;</code> is omitted, otherwise set single bit NPBitL <code>&lt;addr&gt; &lt;bit&gt;( &lt;data&gt;)</code>Read/Write a single bit from device 32-bit register (addr = <code>0..0x06FF</code>, bit = <code>0..31</code>, data = <code>0|1</code>). Read if <code>&lt;data&gt;</code> is omitted, otherwise set single bit NPEscape Clears possible errors (like pump exceeded time etc.) NPExec Take over changes without writing to EEPROM. This command is necessary e. g. on changes in Installer page (addr 0x0400..0x04EE). NPSave Write data permanently into EEPROM.During the EEPROM write procedure the NeoPool device may be unresponsive to MODBUS requests, this process always takes less than 1 second.Since this process is limited by the number of EEPROM write cycles, it is recommend to write all necessary changes to the registers and only then execute EEPROM write process using this command.Note: The number of EEPROM writes for Sugar Valley NeoPool devices is guaranteed 100,000 cycles. As soon as this number is exceeded, further storage of information can no longer be guaranteed. See also <code>SetOption157</code> - Hide/Show sensitive data <p>Note</p> <p>The setttings changed by commands NPPHRes, NPCLRes, NPIONRes, NPSetOption0 and NPSetOption1 are permanently stored only if firmware was compiled with USE_UFILESYS (#define <code>USE_UFILESYS</code>, default enabled on ESP32 and disabled on ESP82xx). Without USE_UFILESYS (default on ESP82xx), you can alternatively use a rule to set your defaults during system start, e. g.: <code>Rule1 ON System#Init DO Backlog NPPHRes 1;NPCLRes 1;NPIonRes 1;NPSetOption0 1;NPSetOption1 0</code></p>"},{"location":"NeoPool/#examples","title":"Examples","text":"<p>Example</p> <p>Get filtration mode</p> <pre><code>NPFiltrationmode\nRESULT = {\"NPFiltrationmode\":\"Manual\"}\n</code></pre> <p>Example</p> <p>Set filtration mode</p> <pre><code>NPFiltrationmode 1\n{\"NPFiltrationmode\":\"Auto\"}\n</code></pre> <p>Example</p> <p>Switch light relay on</p> <pre><code>NPLight 1\nRESULT = {\"NPLight\":\"ON\"}\n</code></pre> <p>Example</p> <p>Read Heating setpoint temperature</p> <p>Here we read register <code>MBF_PAR_HEATING_TEMP</code> (<code>0x0416</code>):</p> <pre><code>Backlog NPResult 0;NPRead 0x416\nRESULT = {\"NPResult\":0}\nRESULT = {\"NPRead\":{\"Address\":1046,\"Data\":28}}\n</code></pre> <p>Example</p> <p>Enable additional factory menu</p> <p>For that enable bit <code>MBMSK_SHOW_FACTORY_MENU</code> (15) in register <code>MBF_PAR_UICFG_VISUAL_OPTIONS</code> (<code>0x0605</code>)</p> <pre><code>Backlog NPBit 0x605,15,1;NPSave\nRESULT = {\"NPBit\":{\"Address\":\"0x0605\",\"Data\":\"0xAFC0\",\"Bit15\":1}}\nRESULT = {\"NPSave\":\"Done\"}\n</code></pre> <p>Example</p> <p>Read system time</p> <p>We either use command <code>NPTime</code> or read the 32-bit value starting <code>MBF_PAR_TIME_LOW</code> (<code>0x0408</code>) using decimal output:</p> <pre><code>Backlog NPResult 0;NPTime;NPReadL 0x408\nRESULT = {\"NPResult\":0}\nRESULT = {\"NPTime\":\"2021-01-31T21:22:20\"}\nRESULT = {\"NPReadL\":{\"Address\":1032,\"Data\":1612124540}}\n</code></pre> <p>Example</p> <p>Enable temperature module</p> <p>Do this by enabling <code>MBF_PAR_TEMPERATURE_ACTIVE</code> (<code>0x04F</code>) and set it permanently in EEPROM::</p> <pre><code>Backlog NPWrite 0x40F,1;NPSave\nRESULT = {\"NPWrite\":{\"Address\":\"0x040F\",\"Data\":\"0x0001\"}}\nRESULT = {\"NPSave\":\"Done\"}\n</code></pre> <p>Example</p> <p>Hide auxiliary relay display from main menu</p> <p>To do this, set bit <code>MBMSK_HIDE_AUX_RELAYS</code> (3) in register <code>MBF_PAR_UICFG_VISUAL_OPTIONS</code> (<code>0x0605</code>):</p> <pre><code>NPBit 0x605,3,1\nRESULT = {\"NPBit\":{\"Address\":\"0x0605\",\"Data\":\"0x08C8\"}}\n</code></pre> <p>Example</p> <p>Read Filtration interval 1-3 settings</p> <p>To do this, we read the registers <code>MBF_PAR_TIMER_BLOCK_FILT_INT1</code> (<code>0x0434</code>), <code>MBF_PAR_TIMER_BLOCK_FILT_INT2</code> (<code>0x0443</code>) and <code>MBF_PAR_TIMER_BLOCK_FILT_INT3</code> (<code>0x0452</code>) with offset <code>MBV_TIMER_OFFMB_TIMER_ENABLE</code> (0) as 16-bit values and the remaining timer offset values <code>MBV_TIMER_OFFMB_*</code> as 32-bit values:</p> <pre><code>Backlog NPResult 0;NPRead 0x434;NPReadL 0x435,7;NPRead 0x443;NPReadL 0x444,7;NPRead 0x452;NPReadL 0x0453,7\nRESULT = {\"NPResult\":0}\nRESULT = {\"NPRead\":{\"Address\":1076,\"Data\":1}}\nRESULT = {\"NPReadL\":{\"Address\":1077,\"Data\":[28800,0,86400,14400,0,1,0]}}\nRESULT = {\"NPRead\":{\"Address\":1091,\"Data\":1}}\nRESULT = {\"NPReadL\":{\"Address\":1092,\"Data\":[43200,0,86400,21600,0,1,0]}}\nRESULT = {\"NPRead\":{\"Address\":1106,\"Data\":1}}\nRESULT = {\"NPReadL\":{\"Address\":1107,\"Data\":[0,0,86400,0,0,1,0]}} *\n</code></pre> <p>Example</p> <p>Set filtration interval</p> <p>Here we set interval 1 to a daily interval between 9:00 - 12:30 (9:00: 3600 * 9 \u2259 32400 / 12:30 \u2259 3,5h = 12600)</p> <p>For this write register <code>MBF_PAR_TIMER_BLOCK_FILT_INT1</code> (<code>0x0434</code>) using the offsets <code>MBV_TIMER_OFFMB_</code>.  For the sake of simplicity we write 4 consecutive 32-bit registers:</p> <ul> <li><code>MBV_TIMER_OFFMB_TIMER_ON</code>: Timer start = 93600 + 0060 = 32400</li> <li><code>MBV_TIMER_OFFMB_TIMER_OFF</code>: Timer stop - not used</li> <li><code>MBV_TIMER_OFFMB_TIMER_PERIOD</code>: Time in seconds between starting points = 86400 (means daily interval)</li> <li><code>MBV_TIMER_OFFMB_TIMER_INTERVAL</code>: Time in seconds that the timer has to run when started. This is the difference between 12:30 (123600 + 3060 = 45000) and 9:30(see Timer start = 32400) = 12600</li> </ul> <pre><code>NPWriteL 0x435,32400 0 86400 12600\nRESULT = {\"NPWriteL\":{\"Address\":1077,\"Data\":[32400,0,86400,12600]}}\n</code></pre> <p>Example</p> <p>Manual switch relay 7 (Aux4)</p> <p>To switch Aux4 ON, we set <code>MBF_PAR_TIMER_BLOCK_AUX4_INT1</code> (<code>0x04D9</code>) + <code>MBV_TIMER_OFFMB_TIMER_ENABLE</code> (0) to MBV_PAR_CTIMER_ALWAYS_ON (<code>3</code>):.</p> <pre><code>Backlog NPWrite 0x4D9,3;NPExec\nRESULT = {\"NPWrite\":{\"Address\":\"0x04D9\",\"Data\":\"0x0003\"}}\nRESULT = {\"NPExec\":\"Done\"}\n</code></pre> <p>To switch Aux4 OFF, we set <code>MBF_PAR_TIMER_BLOCK_AUX4_INT1</code> (<code>0x04D9</code>) + <code>MBV_TIMER_OFFMB_TIMER_ENABLE</code> (0) to MBV_PAR_CTIMER_ALWAYS_OFF (<code>4</code>):.</p> <pre><code>Backlog NPWrite 0x4D9,4;NPExec\nRESULT = {\"NPWrite\":{\"Address\":\"0x04D9\",\"Data\":\"0x0004\"}}\nRESULT = {\"NPExec\":\"Done\"}\n</code></pre> <p>Example</p> <p>Modbus autorepeat on communication error</p> <p>Read current autorepeat value:</p> <pre><code>NPOnError\nRESULT = {\"NPOnError\":2}\n</code></pre> <p>Set autorepeat value to 3:</p> <pre><code>NPOnError 3\nRESULT = {\"NPOnError\":3}\n</code></pre>"},{"location":"NeoPool/#enhancements","title":"Enhancements","text":""},{"location":"NeoPool/#daily-sync-device-to-tasmota-time","title":"Daily sync device to Tasmota time","text":"<p>Since the NeoPool devices, without a WiFi module, have no way of synchronizing their internal clock with an external clock and, in addition, the accuracy of the internal clock leaves something to be desired, it makes sense to synchronize the clock with Tasmota once a day. Advantageously, we do this at night after a possible daylight saving time or normal time change.</p> <p>We use a rule that synchronizes the time and which is triggered by the Tasmota built-in timer (here we use timer 10):</p> <pre><code>Rule2\n  ON Clock#Timer=10 DO NPTime 0 ENDON\n</code></pre> <p>Activate it:</p> <pre><code>Backlog Rule2 4;Rule2 1\n</code></pre> <p>Configure Tasmota \"Timer 10\" for your needs:</p> <p></p>"},{"location":"NeoPool/#esp82xxesp32-add-buttons-for-filtration-and-light-control","title":"ESP82xx/ESP32: Add buttons for filtration and light control","text":"<p>Add two dummy buttons to control the filtration pump and the light.</p> <p>First we define two dummy relay (which does not have any physical function) on two unused GPIO (here we use GPIO0 and GPIO4 where we define Tasmota Relay 1 and 2):</p> <pre><code>Backlog GPIO0 224;GPIO4 225\n</code></pre> <p>Then we rename the buttons for better visibility:</p> <pre><code>Backlog WebButton1 Filtration;WebButton2 Light\n</code></pre> <p>Now we have the WebGUI buttons like this:</p> <p></p> <p>but missing the functionality behind. For that we use Rules and connect the states for Tasmota Power, Neopool filtration and light:</p> <pre><code>Rule1\n  ON Power1#State==0 DO NPFiltration %value% ENDON\n  ON Power1#State==1 DO NPFiltration %value% ENDON\n  ON NeoPool#Filtration#State==0 DO Power1 %value% ENDON\n  ON NeoPool#Filtration#State==1 DO Power1 %value% ENDON\n  ON Power2#State==0 DO NPLight %value% ENDON\n  ON Power2#State==1 DO NPLight %value% ENDON\n  ON NeoPool#Light==0 DO Power2 %value% ENDON\n  ON NeoPool#Light==1 DO Power2 %value% ENDON\n</code></pre> <p>Don't wonder about the double trigger definition, which at first glance seem nonsensical - they are necessary so that the rule does not trigger endless.</p> <p>At least we activate the rule:</p> <pre><code>Backlog Rule1 5;Rule1 1\n</code></pre> <p>It is important to enable the Rule ONCE (<code>Rule1 5</code>) function, which prevents the trigger is triggering themself in a loop.</p> <p>You can now control filtration and light using the WebGUI and get the current status of the device elements when they are switched by auto-mode or manually on the device directly.</p> <p></p> <p>Additional advantage is that you can also use Tasmota Timer switching Power1 (=filtration) and Power2 (light) for your needs.</p>"},{"location":"NeoPool/#esp32-adding-user-defined-neopool-commands-to-tasmota","title":"ESP32: Adding user defined NeoPool commands to Tasmota","text":"<p>The following enhancements are made using the Berry Scripting Language which is available on ESP32 only.</p> <p>The Berry script file neopoolcmd.be below adds the following new commands to Tasmota:</p> Command Parameters NPAux&lt;x&gt; <code>&lt;state&gt;</code>Set auxiliary relay &lt;x&gt; (x=<code>1..4</code>, state = <code>0..2</code>):<ul><li><code>0</code> - switch off auxiliary relay</li><li><code>1</code> - switch on auxiliary relay</li><code>2</code> - toggle auxiliary relay</ul> NPAntiFreeze&lt;x&gt; <code>&lt;state&gt;</code>Set Smart mode antifreeze (state = <code>0..2</code>):<ul><li><code>0</code> - switch Smart mode antifreeze off</li><li><code>1</code> - switch Smart mode antifreeze on</li><code>2</code> - toggle Smart mode antifreeze</ul> NPTimer&lt;x&gt; <code>0</code> or <code>OFF</code> or <code>&lt;hh:mm hh:mm&gt;( &lt;period&gt;)</code> or <code>&lt;json&gt;</code>Set device timer for filtration, light and auxiliary relay (x=<code>1..12</code>) &lt;x&gt;:<ul><li><code>1</code> - Filtration timer 1</li><li><code>2</code> - Filtration timer 2</li><li><code>3</code> - Filtration timer 3</li><li><code>4</code> - Light timer</li><li><code>5</code> - Aux1 timer 1</li><li><code>6</code> - Aux1 timer 2</li><li><code>7</code> - Aux2 timer 1</li><li><code>8</code> - Aux2 timer 2</li><li><code>9</code> - Aux3 timer 1</li><li><code>10</code> - Aux3 timer 2</li><li><code>11</code> - Aux4 timer 1</li><li><code>12</code> - Aux4 timer 2</li></ul><ul><li><code>0</code> or <code>OFF</code> - Switch timer off</li><li><code>hh:mm hh:mm</code> - Start/End time pair<li><code>period</code> - optional period interval (default seconds), use postfix (e. g. \"1d\") for period unit:<code>s</code> - seconds<code>m</code> - minutes<code>h</code> - hours<code>d</code> - days<code>w</code> - weeks</li><li><code>json</code> - valid JSON string containng start-/endtime and period e. g. <code>#!json {\"Start\":\"17:00\",\"End\":\"22:15\",\"Period\":\"1d\"}</code></li> NPVersion Get the firmware info as array (firmware version and creation date) NPBackup (<code>&lt;name&gt;</code>( <code>overwrite</code>)Creates a backup copy of device setting (it saves the INSTALLER (0x04xx), USER (0x05xx) and MISC (0x06xx) pages). <code>&lt;name&gt;</code> is optional and may contain strftime format codes (default <code>devicename_%Y-%m-%dT%H:%M:%S</code>).The command fails if the backup file already exists. Explicitly use <code>&lt;name&gt;</code> and append <code>overwrite</code> to overwrite an existing backup file or delete the file manually.Note: The backup files are stored in Tasmota file system within the hidden directory <code>.npbackup</code>, pay attention to the maximum free size of the file system and use <code>NPPrune</code> if necessary NPRestore <code>&lt;name&gt;</code>Restores a previous device setting backup, <code>&lt;name&gt;</code> is required. Use command <code>NPList</code> to get a list the backup files.Note: A restart of the system may be necessary if massive changes are made by an <code>NPRestore</code>. NPList Get a list of all stored backup files. NPPrune <code>&lt;age&gt;</code>( <code>dry-run</code>)Deletes backup files that are older than specified <code>&lt;age&gt;</code> seconds. Use postfix (e. g. \"1w\") for :<code>s</code> - seconds<code>m</code> - minutes<code>h</code> - hours<code>d</code> - days<code>w</code> - weeks<code>y</code> - yearsUse <code>dry-run</code> to simulate the <code>NPPrune</code> run, it will list the files that will be deleted. <p>Store the following script into the Tasmota file system by using the WebGUI \"Console\" / \"Manage File system\".</p>"},{"location":"NeoPool/#neopoolcmdbe","title":"neopoolcmd.be","text":"View script <pre><code># File: neopoolcmd.be\n#\n# Add commands NPAux, NPAntiFreeze, NPTimer, NPVersion, NPBackup, NPRestore, NPList and NPPrune\n\n# Neopool definitions\n\nMBF_POWER_MODULE_REGISTER = 0x000C\nMBF_POWER_MODULE_DATA = 0x000D\nMBF_RELAY_STATE = 0x010E\nMBF_PAR_SMART_ANTI_FREEZE = 0x41A\nMBF_PAR_UICFG_MACHINE = 0x0600\n\n# MBF_PAR_TIMER_BLOCK_BASE\nMBV_TIMER_OFFMB_TIMER_ENABLE = 0\nMBV_TIMER_OFFMB_TIMER_ON = 1\nMBV_TIMER_OFFMB_TIMER_OFF = 3\nMBV_TIMER_OFFMB_TIMER_PERIOD = 5\nMBV_TIMER_OFFMB_TIMER_INTERVAL = 7\nMBV_TIMER_OFFMB_TIMER_COUNTDOWN = 9\nMBV_TIMER_OFFMB_TIMER_FUNCTION = 11\nMBV_TIMER_OFFMB_TIMER_WORK_TIME = 13\n\nMBV_TIMER_OFFMB_TIMER_ON_IDX = 0\nMBV_TIMER_OFFMB_TIMER_OFF_IDX = 1\nMBV_TIMER_OFFMB_TIMER_PERIOD_IDX = 2\nMBV_TIMER_OFFMB_TIMER_INTERVAL_IDX = 3\nMBV_TIMER_OFFMB_TIMER_COUNTDOWN_IDX = 4\nMBV_TIMER_OFFMB_TIMER_FUNCTION_IDX  = 5\nMBV_TIMER_OFFMB_TIMER_WORK_TIME_IDX = 6\n\n# MBV_TIMER_OFFMB_TIMER_ENABLE working modes:\nMBV_PAR_CTIMER_DISABLE = 0\nMBV_PAR_CTIMER_ENABLED  = 1\nMBV_PAR_CTIMER_ENABLED_LINKED = 2\nMBV_PAR_CTIMER_ALWAYS_ON  = 3\nMBV_PAR_CTIMER_ALWAYS_OFF = 4\nMBV_PAR_CTIMER_COUNTDOWN_KEY = 5\nMBV_PAR_CTIMER_COUNTDOWN_KEY_PLUS = 0x01\nMBV_PAR_CTIMER_COUNTDOWN_KEY_MINUS = 0x02\nMBV_PAR_CTIMER_COUNTDOWN_KEY_ARROWDOWN = 0x04\nMBV_PAR_CTIMER_COUNTDOWN_KEY_ARROWUP = 0x08\nMBV_PAR_CTIMER_COUNTDOWN_KEYS = {\n  MBV_PAR_CTIMER_COUNTDOWN_KEY_PLUS:\"+\",\n  MBV_PAR_CTIMER_COUNTDOWN_KEY_MINUS:\"-\",\n  MBV_PAR_CTIMER_COUNTDOWN_KEY_ARROWDOWN:\"\u25bc\",\n  MBV_PAR_CTIMER_COUNTDOWN_KEY_ARROWUP:\"\u25b2\"\n}\n\n# MBV_TIMER_OFFMB_TIMER_FUNCTION codes:\nMBV_PAR_CTIMER_FCT_FILTRATION = 0x0001\nMBV_PAR_CTIMER_FCT_LIGHTING = 0x0002\nMBV_PAR_CTIMER_FCT_HEATING = 0x0004\nMBV_PAR_CTIMER_FCT_RELAY1 = 0x0100\nMBV_PAR_CTIMER_FCT_RELAY2 = 0x0200\nMBV_PAR_CTIMER_FCT_RELAY3 = 0x0400\nMBV_PAR_CTIMER_FCT_RELAY4 = 0x0800\nMBV_PAR_CTIMER_FCT_RELAY5 = 0x1000\nMBV_PAR_CTIMER_FCT_RELAY6 = 0x2000\nMBV_PAR_CTIMER_FCT_RELAY7 = 0x4000\n# Function codes text\nMBV_PAR_CTIMER_FCT = {\n  MBV_PAR_CTIMER_FCT_FILTRATION:\"Filtration\",\n  MBV_PAR_CTIMER_FCT_LIGHTING:\"Light\",\n  MBV_PAR_CTIMER_FCT_HEATING:\"Heating\",\n  MBV_PAR_CTIMER_FCT_RELAY1:\"Relay1\",\n  MBV_PAR_CTIMER_FCT_RELAY2:\"Relay2\",\n  MBV_PAR_CTIMER_FCT_RELAY3:\"Relay3\",\n  MBV_PAR_CTIMER_FCT_RELAY4:\"Aux1\",\n  MBV_PAR_CTIMER_FCT_RELAY5:\"Aux2\",\n  MBV_PAR_CTIMER_FCT_RELAY6:\"Aux3\",\n  MBV_PAR_CTIMER_FCT_RELAY7:\"Aux4\"\n}\n\n# configuration of the system timers\nMBF_PAR_TIMER_BLOCK_FILT_INT1 = 0x0434\nMBF_PAR_TIMER_BLOCK_FILT_INT2 = 0x0443\nMBF_PAR_TIMER_BLOCK_FILT_INT3 = 0x0452\nMBF_PAR_TIMER_BLOCK_LIGHT_INT = 0x0470\nMBF_PAR_TIMER_BLOCK_AUX1_INT1 = 0x04AC\nMBF_PAR_TIMER_BLOCK_AUX1_INT2 = 0x0461\nMBF_PAR_TIMER_BLOCK_AUX2_INT1 = 0x04BB\nMBF_PAR_TIMER_BLOCK_AUX2_INT2 = 0x047F\nMBF_PAR_TIMER_BLOCK_AUX3_INT1 = 0x04CA\nMBF_PAR_TIMER_BLOCK_AUX3_INT2 = 0x048E\nMBF_PAR_TIMER_BLOCK_AUX4_INT1 = 0x04D9\nMBF_PAR_TIMER_BLOCK_AUX4_INT2 = 0x049D\n\n# Timer base addr index\nPAR_TIMER_BLOCK = [\n  # addr, function\n  [MBF_PAR_TIMER_BLOCK_FILT_INT1, MBV_PAR_CTIMER_FCT_FILTRATION],\n  [MBF_PAR_TIMER_BLOCK_FILT_INT2, MBV_PAR_CTIMER_FCT_FILTRATION],\n  [MBF_PAR_TIMER_BLOCK_FILT_INT3, MBV_PAR_CTIMER_FCT_FILTRATION],\n  [MBF_PAR_TIMER_BLOCK_LIGHT_INT, MBV_PAR_CTIMER_FCT_LIGHTING],\n  [MBF_PAR_TIMER_BLOCK_AUX1_INT1, MBV_PAR_CTIMER_FCT_RELAY4],\n  [MBF_PAR_TIMER_BLOCK_AUX1_INT2, MBV_PAR_CTIMER_FCT_RELAY4],\n  [MBF_PAR_TIMER_BLOCK_AUX2_INT1, MBV_PAR_CTIMER_FCT_RELAY5],\n  [MBF_PAR_TIMER_BLOCK_AUX2_INT2, MBV_PAR_CTIMER_FCT_RELAY5],\n  [MBF_PAR_TIMER_BLOCK_AUX3_INT1, MBV_PAR_CTIMER_FCT_RELAY6],\n  [MBF_PAR_TIMER_BLOCK_AUX3_INT2, MBV_PAR_CTIMER_FCT_RELAY6],\n  [MBF_PAR_TIMER_BLOCK_AUX4_INT1, MBV_PAR_CTIMER_FCT_RELAY7],\n  [MBF_PAR_TIMER_BLOCK_AUX4_INT2, MBV_PAR_CTIMER_FCT_RELAY7]\n]\nPAR_TIMER_BLOCK_AUX = [\n  MBF_PAR_TIMER_BLOCK_AUX1_INT1,\n  MBF_PAR_TIMER_BLOCK_AUX2_INT1,\n  MBF_PAR_TIMER_BLOCK_AUX3_INT1,\n  MBF_PAR_TIMER_BLOCK_AUX4_INT1\n]\n\n# Register to exclude from restore\nMBF_PAR_TIME_LOW = 0x0408\nMBF_PAR_TIME_HIGH = 0x0409\nMBF_ACTION_COPY_TO_RTC = 0x04F0\n\nRESTORE_EXCL = [\n  MBF_PAR_TIME_LOW,\n  MBF_PAR_TIME_HIGH,\n  MBF_ACTION_COPY_TO_RTC\n]\n\nMACHINE_NAMES = [\n  \"NeoPool\",\n  \"Hidrolife\",\n  \"Aquascenic\",\n  \"Oxilife\",\n  \"Bionet\",\n  \"Hidroniser\",\n  \"UVScenic\",\n  \"Station\",\n  \"Brilix\",\n  \"Generic\",\n  \"Bayrol\",\n  \"Hay\"\n]\n\nimport string\nimport json\nimport path\n\n# NeoPool command class\nclass NeoPoolCommands\n  var TEXT_OFF\n  var TEXT_ON\n  var TEXT_TOGGLE\n  var BACKUP_DIR\n  var BACKUP_NAME\n  var BACKUP_START_ADDR\n  var BACKUP_END_ADDR\n\n  # helper\n  def ltrim(s)\n    var i = 0 while(i &lt; size(s) &amp;&amp; s[i] == ' ') i += 1 end\n    return string.split(s, i)[1]\n  end\n  def rtrim(s)\n    var i = size(s) while(i &amp;&amp; s[i-1] == ' ') i -= 1 end\n    return string.split(s, i)[0]\n  end\n  def trim(s)\n    return self.rtrim(self.ltrim(s));\n  end\n  def list_sort(_list)\n    for i:1..size(_list)-1\n      var _value = _list[i]\n      var j = i\n      while (j &gt; 0) &amp;&amp; (_list[j-1] &gt; _value)\n        _list[j] = _list[j-1]\n        j -= 1\n      end\n      _list[j] = _value\n    end\n    return _list\n  end\n  def get_args(payload)\n    if nil == payload\n      return []\n    end\n    var p = string.replace(payload, ' ', ',')\n    var d = nil\n    var s = \"\"\n    for i:0..size(p)-1\n      if nil == d &amp;&amp; ('\"' == p[i] || \"'\" == p[i])\n        d = p[i]\n      elif nil != d &amp;&amp; d == p[i]\n        d = nil\n      elif nil != d &amp;&amp; \",\" == p[i]\n        s += ' '\n      else\n        s += p[i]\n      end\n    end\n    p = string.split(s, ',')\n    while p.find('') != nil p.remove(p.find('')) end\n    return p\n  end\n  def get_args_switch(payload, p2)\n    var parm, res\n    try\n      parm = string.tolower(self.trim(payload))\n    except ..\n      parm = \"\"\n    end\n    if parm != \"\"\n\n      if (size(parm) == size('off') &amp;&amp; string.find(parm, 'off') == 0) ||\n        (size(parm) == size('0') &amp;&amp; string.find(parm, '0') == 0) ||\n        (size(parm) == size(self.TEXT_OFF) &amp;&amp; string.find(parm, self.TEXT_OFF) == 0)\n        res = 0\n      elif (size(parm) == size('on') &amp;&amp; string.find(parm, 'on') == 0) ||\n          (size(parm) == size('1') &amp;&amp; string.find(parm, '1') == 0) ||\n          (size(parm) == size(self.TEXT_ON) &amp;&amp; string.find(parm, self.TEXT_ON) == 0)\n        res = 1\n      elif p2 != nil &amp;&amp;\n          ((size(parm) == size(p2) &amp;&amp; string.find(parm, p2) == 0) ||\n            (size(parm) == size('2') &amp;&amp; string.find(parm, '2') == 0)\n          )\n        res = 2\n      else\n        res = -1\n      end\n    else\n      res = nil\n    end\n    parm = nil\n    tasmota.gc()\n    return res\n  end\n  def get_period_from_int(period_num)\n    if (period_num == 0)\n      return \"0\"\n    elif ((period_num % (86400 * 365)) == 0)\n      return string.format(\"%dy\", period_num / (86400 * 365))\n    elif ((period_num % (86400 * 7)) == 0)\n      return string.format(\"%dw\", period_num / (86400 * 7))\n    elif ((period_num % 86400) == 0)\n      return string.format(\"%dd\", period_num / 86400)\n    elif ((period_num % 3600) == 0)\n      return string.format(\"%dh\", period_num / 3600)\n    elif ((period_num % 60) == 0)\n      return string.format(\"%dm\", period_num / 60)\n    else\n      return string.format(\"%ds\", period_num)\n    end\n  end\n  def get_period_from_str(period_str)\n    period_str = string.tolower(self.trim(period_str))\n    var period_num = int(period_str)\n    if period_str[size(period_str) - 1] == 'y'\n      period_num *= 365 * 24 * 60 * 60\n    elif period_str[size(period_str) - 1] == 'w'\n      period_num *= 7 * 24 * 60 * 60\n    elif period_str[size(period_str) - 1] == 'd'\n      period_num *= 24 * 60 * 60\n    elif period_str[size(period_str) - 1] == 'h'\n      period_num *= 60 * 60\n    elif period_str[size(period_str) - 1] == 'm'\n      period_num *= 60\n    end\n    return period_num\n  end\n  def get_timer(cmd, idx)\n    var timer_enable = self.read_register(cmd, \"NPRead\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_ENABLE);\n    if nil == timer_enable return nil end\n    var data = self.read_register(cmd, \"NPReadL\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_ON, 7)\n    if nil == data return nil end\n\n    var mode, state = \"Unknown\"\n    var values = \"\"\n    if (timer_enable == MBV_PAR_CTIMER_DISABLE || timer_enable == MBV_PAR_CTIMER_ENABLED)\n      mode = \"Timer\"\n      state = self.TEXT_OFF\n      if (timer_enable == MBV_PAR_CTIMER_ENABLED &amp;&amp;\n        (int(data[MBV_TIMER_OFFMB_TIMER_ON_IDX]) !=\n          (int(data[MBV_TIMER_OFFMB_TIMER_ON_IDX]) + int(data[MBV_TIMER_OFFMB_TIMER_INTERVAL_IDX]))\n        )\n      )\n        state = self.TEXT_ON\n      end\n\n      values = string.format(',\"Start\":\"%s\",\"End\":\"%s\",\"Period\":\"%s\"',\n        tasmota.strftime(\"%H:%M\", int(data[MBV_TIMER_OFFMB_TIMER_ON_IDX])),\n        tasmota.strftime(\"%H:%M\", int(data[MBV_TIMER_OFFMB_TIMER_ON_IDX]) + int(data[MBV_TIMER_OFFMB_TIMER_INTERVAL_IDX])),\n        self.get_period_from_int(int(data[MBV_TIMER_OFFMB_TIMER_PERIOD_IDX]))\n      )\n    end\n\n    if (timer_enable == MBV_PAR_CTIMER_ALWAYS_OFF || timer_enable == MBV_PAR_CTIMER_ALWAYS_ON)\n      mode = \"Manual\"\n      state = (timer_enable == MBV_PAR_CTIMER_ALWAYS_OFF) ? self.TEXT_OFF : self.TEXT_ON\n      values = \"\"\n    end\n\n    if ((timer_enable &amp; 0x00FF) == MBV_PAR_CTIMER_COUNTDOWN_KEY)\n      mode = \"Temporary\"\n      state = self.TEXT_ON\n      values = string.format(',\"Key\":\"%s\",\"Duration\":\"%s\"',\n        MBV_PAR_CTIMER_COUNTDOWN_KEYS.find(((timer_enable &gt;&gt; 8) &amp; 0x0F), \"unknown\"),\n        self.get_period_from_int(int(data[MBV_TIMER_OFFMB_TIMER_INTERVAL_IDX]))\n      )\n    end\n\n    var alloc = MBV_PAR_CTIMER_FCT.find(int(data[MBV_TIMER_OFFMB_TIMER_FUNCTION_IDX]), \"undefined\")\n    return string.format('{\"%s%d\":{\"Mode\":\"%s\",\"State\":\"%s\",\"Allocation\":\"%s\"%s}}', cmd, idx, mode, state, alloc, values)\n  end\n  def read_register(cmd, read_cmnd, addr, cnt)\n    var res = tasmota.cmd(string.format(\"%s 0x%04X,%d\", read_cmnd, addr, cnt), true).find(read_cmnd, \"Unknown\")\n    # result must be a json\n    if \"Unknown\" == res\n      tasmota.resp_cmnd(string.format('{\"%s\":\"NeoPool module not available or not activated\"}', cmd))\n      return nil\n    end\n    var _json = json.load(json.dump(res))\n    if nil == _json || \"Error\" == res\n      tasmota.resp_cmnd(string.format('{\"%s\":\"NeoPool device does not respond\"}', cmd))\n      return nil\n    end\n    return compile(\"return \".._json.find('Data'))()\n  end\n\n  # NPAux&lt;x&gt; OFF|0|ON|1|TOGGLE|2 (&lt;x&gt; = 1..4)\n  def NPAux(cmd, idx, payload)\n    var ctrl, parm\n\n    if idx &lt; 1 || idx &gt; 4\n      tasmota.resp_cmnd_error()\n      return\n    end\n    parm = self.get_args_switch(payload, self.TEXT_TOGGLE)\n    if parm != nil\n      if 0 == parm\n        ctrl = MBV_PAR_CTIMER_ALWAYS_OFF\n      elif 1 == parm\n        ctrl = MBV_PAR_CTIMER_ALWAYS_ON\n      elif 2 == parm\n        try\n          ctrl = self.read_register(cmd, \"NPRead\", MBF_RELAY_STATE)\n          if nil == ctrl return end\n          ctrl = (ctrl &gt;&gt; (idx+2)) &amp; 1 ? MBV_PAR_CTIMER_ALWAYS_OFF : MBV_PAR_CTIMER_ALWAYS_ON\n        except ..\n          return\n        end\n      else\n        tasmota.resp_cmnd_error()\n        return\n      end\n      tasmota.cmd(string.format(\"NPWrite 0x%04X,%d\", PAR_TIMER_BLOCK_AUX[idx-1], ctrl), true)\n      tasmota.cmd(\"NPExec\", true)\n    else\n      try\n        ctrl = self.read_register(cmd, \"NPRead\", MBF_RELAY_STATE)\n        if nil == ctrl return end\n        ctrl = (ctrl &gt;&gt; (idx+2)) &amp; 1\n    except ..\n        return\n      end\n    end\n    tasmota.resp_cmnd(string.format('{\"%s%d\":\"%s\"}', cmd, idx, ctrl == (parm != nil ? 4 : 0) ? self.TEXT_OFF : self.TEXT_ON))\n  end\n\n  # NPAntiFreeze OFF|0|ON|1|TOGGLE|2\n  def NPAntiFreeze(cmd, idx, payload)\n    var ctrl, parm\n    parm = self.get_args_switch(payload, self.TEXT_TOGGLE)\n    if parm != nil\n      if 0 == parm\n        ctrl = 0\n      elif 1 == parm\n        ctrl = 1\n      elif 2 == parm\n        try\n          ctrl = self.read_register(cmd, \"NPRead\", MBF_PAR_SMART_ANTI_FREEZE)\n          if nil == ctrl return end\n          if 1 == ctrl\n            ctrl = 0\n          else\n            ctrl = 1\n          end\n        except ..\n          return\n        end\n      else\n        tasmota.resp_cmnd_error()\n        return\n      end\n      tasmota.cmd(string.format(\"NPWrite 0x%04X,%d\", MBF_PAR_SMART_ANTI_FREEZE, ctrl), true)\n      tasmota.cmd(\"NPExec\", true)\n    else\n      try\n        ctrl = self.read_register(cmd, \"NPRead\", MBF_PAR_SMART_ANTI_FREEZE)\n        if nil == ctrl return end\n    except ..\n        tasmota.resp_cmnd_error()\n        return\n      end\n    end\n    tasmota.resp_cmnd(string.format('{\"%s\":\"%s\"}', cmd, ctrl ? self.TEXT_ON : self.TEXT_OFF))\n  end\n\n  # NPTimer&lt;x&gt; 0|OFF|&lt;hh:mm hh:mm&gt;( &lt;period&gt;)|&lt;json&gt; (&lt;x&gt; = 1..12)\n  def NPTimer(cmd, idx, payload)\n    var parm\n\n    if idx &lt; 1 || idx &gt; size(PAR_TIMER_BLOCK)\n      tasmota.resp_cmnd_error()\n      return\n    end\n\n    try\n      parm = string.tolower(self.trim(payload))\n    except ..\n      parm = nil\n    end\n\n    if parm != nil &amp;&amp; size(parm)\n\n      # Set timer\n      if self.get_args_switch(payload) == 0\n        parm = ''\n      end\n\n      try\n        if (nil == json.load(parm))\n          # convert none json parm to json parm\n          var params = self.get_args(parm)\n          var keys = [\"start\", \"end\", \"period\"]\n          if size(params) &gt; size(keys)\n            tasmota.resp_cmnd_error()\n            return\n          end\n          var _json = {}\n          while params.size() &gt; 0\n            _json[keys[0]] = params[0]\n            keys.remove(0)\n            params.remove(0)\n          end\n          parm = json.dump(_json)\n        end\n      except ..\n        tasmota.resp_cmnd_error()\n        return\n      end\n\n      parm = json.load(parm)\n      if (nil != parm)\n        var timer_start, timer_end, strp\n        try\n            # set start and end\n          strp = tasmota.strptime(parm.find(\"start\", \"00:00\"), \"%H:%M\")\n          timer_start = (strp.find(\"hour\", 0) * 3600) + (strp.find(\"min\", 0) * 60)\n          strp = tasmota.strptime(parm.find(\"end\", \"00:00\"), \"%H:%M\")\n          timer_end = strp.find(\"hour\", 0) * 3600 + strp.find(\"min\", 0) * 60\n          if (timer_start &gt; timer_end)\n            var tmp = timer_end\n            timer_end = timer_start\n            timer_start = tmp\n          end\n        except ..\n          tasmota.resp_cmnd_error()\n          return\n        end\n        tasmota.cmd(string.format(\"NPWrite 0x%04X,%d\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_ENABLE, MBV_PAR_CTIMER_ENABLED), true)\n        tasmota.cmd(string.format(\"NPWriteL 0x%04X,%d\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_FUNCTION, PAR_TIMER_BLOCK[idx - 1][1]), true)\n        tasmota.cmd(string.format(\"NPWriteL 0x%04X,%d\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_ON, timer_start), true)\n        tasmota.cmd(string.format(\"NPWriteL 0x%04X,%d\", PAR_TIMER_BLOCK[idx - 1][0] + MBV_TIMER_OFFMB_TIMER_INTERVAL, timer_end - timer_start), true)\n\n        if (self.get_period_from_str(parm.find(\"Period\", \"0\")) != 0)\n          tasmota.cmd(string.format(\"NPWriteL 0x%04X,%d\", PAR_TIMER_BLOCK[idx - 1] + MBV_TIMER_OFFMB_TIMER_PERIOD, self.get_period_from_str(parm.find(\"Period\", \"0\"))), true)\n        end\n        tasmota.cmd(\"NPExec\", true)\n\n        var res = self.get_timer(cmd, idx)\n        if nil != res\n          tasmota.resp_cmnd(res)\n        end\n      else\n        tasmota.resp_cmnd_error()\n      end\n\n    else\n      # Get timer\n      var res = self.get_timer(cmd, idx)\n      if nil != res\n        tasmota.resp_cmnd(res)\n      end\n\n    end\n\n  end\n\n  # NPVersion\n  def NPVersion(cmd)\n    var verstr = \"\"\n    for i: 0 .. 12\n      tasmota.cmd(string.format(\"NPWrite 0x%04X,%d\", MBF_POWER_MODULE_REGISTER, i*2), true)\n      var data = self.read_register(cmd, \"NPRead\", MBF_POWER_MODULE_DATA)\n      if nil == data return end\n      verstr += string.char(data&gt;&gt;8 &amp; 0xFF)\n      verstr += string.char(data    &amp; 0xFF)\n    end\n    var arr = []\n    for i: string.split(verstr,'\\n') arr.push(i) end\n    tasmota.resp_cmnd(string.format('{\"%s\":%s}', cmd, json.dump(arr)))\n  end\n\n  # NPBackup (&lt;name&gt;( overwrite)\n  #   &lt;name&gt; may contain strftime specifier\n  def NPBackup(cmd, idx, payload)\n    var name, overwrite = nil\n\n    var machine = self.read_register(cmd, \"NPRead\", MBF_PAR_UICFG_MACHINE)\n    if nil == machine return end\n    machine = machine &gt; size(MACHINE_NAMES) ? 0 : machine\n\n    var parm = self.get_args(payload)\n    if parm != nil &amp;&amp; size(parm)\n      name = self.trim(parm[0])\n      if size(parm) &gt; 1\n        overwrite = string.tolower(self.trim(parm[1]))\n      end\n    else\n      name = tasmota.strftime(MACHINE_NAMES[machine]+\"_\"+self.BACKUP_NAME, tasmota.rtc()['local'])\n      name += string.format(\"%+03d:%02d\", (tasmota.rtc()['local'] - tasmota.rtc()['utc']) / 3600, 0)\n    end\n\n    path.mkdir(self.BACKUP_DIR)\n    name = tasmota.strftime(name, tasmota.rtc()['local'])\n    if nil != overwrite\n      if size(overwrite) &gt; 0 &amp;&amp; 'o' == overwrite[0]\n        if path.exists(self.BACKUP_DIR+\"/\"+name)\n          # overwrite, first delete existing\n          path.remove(self.BACKUP_DIR+\"/\"+name)\n        end\n      else\n        tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"File\":\"%s\",\"Msg\":\"Unknown command %s\"}', cmd, name, overwrite))\n        return\n      end\n    end\n    if path.exists(self.BACKUP_DIR+\"/\"+name)\n      # do not overwrite existing backups\n      tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"File\":\"%s\",\"Msg\":\"Already exists\"}', cmd, name))\n      return\n    end\n\n    # read register\n    var reg_data = []\n    try\n      for addr:range(self.BACKUP_START_ADDR, self.BACKUP_END_ADDR, 16)\n        var r = self.read_register(cmd, \"NPRead\", addr, 16)\n        if nil == r return end\n        for i:r\n          reg_data.push(int(i))\n        end\n      end\n    except ..\n      reg_data = []\n    end\n\n    if 0 == size(reg_data)\n      tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"Msg\":\"Reading Modbus register error\"}', cmd))\n      return\n    end\n\n    # write backup file\n    try\n      var f = open(self.BACKUP_DIR+\"/\"+name, \"w\")\n      f.write(json.dump({string.format(\"0x%04X\", self.BACKUP_START_ADDR):reg_data}))\n      f.close()\n    except ..\n      tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"File\":\"%s\",\"Msg\":\"Writing file error\"}', cmd, name))\n      return\n    end\n    tasmota.resp_cmnd(string.format('{\"%s\":\"Done\",\"File\":\"%s\"}', cmd, name))\n    return\n  end\n\n  # NPRestore &lt;name&gt;\n  def NPRestore(cmd, idx, payload)\n    var name = nil\n\n    var machine = self.read_register(cmd, \"NPRead\", MBF_PAR_UICFG_MACHINE)\n    if nil == machine return end\n\n    var parm = self.get_args(payload)\n\n    if parm != nil &amp;&amp; size(parm)\n      name = self.trim(parm[0])\n    else\n      tasmota.resp_cmnd_error()\n      return\n    end\n    if !path.exists(self.BACKUP_DIR+\"/\"+name)\n      tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"File\":\"%s\",\"Msg\":\"Does not exists\"}', cmd, name))\n      return\n    end\n\n    # Restore\n    # read backup file\n    var backup = {}\n    var f = open(self.BACKUP_DIR+\"/\"+name, \"r\")\n    try\n      backup = json.load(f.read())\n      f.close()\n    except ..\n      tasmota.resp_cmnd(string.format('{\"%s\":\"Error\",\"File\":\"%s\",\"Msg\":\"JSON format error\"}', cmd, name))\n      return\n    end\n\n    # if any multiple addr sort it\n    var addr_list = []\n    for i:backup.keys()\n      addr_list.push(i)\n    end\n    addr_list = self.list_sort(addr_list)\n    # do restore commands\n    for addr:addr_list\n      var reg_list = backup[addr]\n      var write_cmnd = \"\"\n      var cnt = 0\n      var write_addr = int(addr)\n      for reg_value:reg_list\n        if nil == RESTORE_EXCL.find(write_addr)\n          if \"\" == write_cmnd\n            write_cmnd = string.format(\"NPWrite 0x%04X\", write_addr)\n          end\n          write_cmnd +=\",\" + str(int(reg_value))\n          cnt += 1\n          if cnt &gt;= 8\n            tasmota.cmd(write_cmnd, true)\n            write_cmnd = \"\"\n            cnt = 0\n          end\n        elif size(write_cmnd)\n          tasmota.cmd(write_cmnd, true)\n          write_cmnd = \"\"\n          cnt = 0\n        end\n        write_addr += 1\n      end\n      if size(write_cmnd)\n        tasmota.cmd(write_cmnd, true)\n      end\n    end\n    tasmota.cmd(\"NPExec\", true)\n    tasmota.cmd(\"NPSave\", true)\n    tasmota.resp_cmnd(string.format('{\"%s\":\"Done\",\"File\":\"%s\"}', cmd, name))\n    return\n  end\n\n  # NPList\n  def NPList(cmd)\n    tasmota.resp_cmnd(string.format('{\"%s\":%s}', cmd, json.dump(path.listdir(self.BACKUP_DIR)) ))\n  end\n\n  # NPPrune &lt;age&gt;( dry-run)\n  def NPPrune(cmd, idx, payload)\n    var age = nil\n    var dry_run = false\n\n    var parm = self.get_args(payload)\n    if parm != nil &amp;&amp; size(parm)\n      age = self.get_period_from_str(string.tolower(self.trim(parm[0])))\n      if size(parm) &gt; 1\n        if size(string.tolower(self.trim(parm[1]))) &gt; 0 &amp;&amp; 'd' == string.tolower(self.trim(parm[1]))[0]\n          dry_run = true\n        else\n          tasmota.resp_cmnd_error()\n          return\n        end\n      end\n    else\n      tasmota.resp_cmnd_error()\n      return\n    end\n\n    var dfiles = []\n    for _filename:path.listdir(self.BACKUP_DIR)\n      if (tasmota.rtc()['local'] - path.last_modified(self.BACKUP_DIR+\"/\"+_filename)) &gt; age\n        dfiles.push(_filename)\n        if !dry_run\n          path.remove(self.BACKUP_DIR+\"/\"+_filename)\n        end\n      end\n    end\n    if dry_run\n      tasmota.resp_cmnd(string.format('{\"%s\":\"dry-run\",\"File\":%s}', cmd, json.dump(dfiles)))\n      return\n    end\n    tasmota.resp_cmnd(string.format('{\"%s\":\"Done\",\"File\":%s}', cmd, json.dump(dfiles)))\n  end\n\n\n  def init()\n    # get tasmota settings\n    self.TEXT_OFF = tasmota.cmd('StateText1', true).find('StateText1', 'OFF')\n    self.TEXT_ON = tasmota.cmd('StateText2', true).find('StateText2', 'ON')\n    self.TEXT_TOGGLE = tasmota.cmd('StateText3', true).find('StateText3', 'TOGGLE')\n    self.BACKUP_DIR = \"/.npbackup\"\n    self.BACKUP_NAME = '%Y-%m-%dT%H:%M:%S'\n    self.BACKUP_START_ADDR = 0x0400\n    self.BACKUP_END_ADDR = 0x06FF\n    # add commands\n    tasmota.add_cmd('NPAux', / cmd, idx, payload -&gt; self.NPAux(cmd, idx, payload))\n    tasmota.add_cmd('NPAntiFreeze', / cmd, idx, payload -&gt; self.NPAntiFreeze(cmd, idx, payload))\n    tasmota.add_cmd('NPTimer', / cmd, idx, payload -&gt; self.NPTimer(cmd, idx, payload))\n    tasmota.add_cmd('NPVersion', / cmd -&gt; self.NPVersion(cmd))\n    tasmota.add_cmd('NPBackup', / cmd, idx, payload -&gt; self.NPBackup(cmd, idx, payload))\n    tasmota.add_cmd('NPRestore', / cmd, idx, payload -&gt; self.NPRestore(cmd, idx, payload))\n    tasmota.add_cmd('NPList', / cmd -&gt; self.NPList(cmd))\n    tasmota.add_cmd('NPPrune', / cmd, idx, payload -&gt; self.NPPrune(cmd, idx, payload))\n  end\n\n  def deinit()\n    # remove commands\n    tasmota.remove_cmd('NPAux')\n    tasmota.remove_cmd('NPAntiFreeze')\n    tasmota.remove_cmd('NPTimer')\n    tasmota.remove_cmd('NPVersion')\n    tasmota.remove_cmd('NPBackup')\n    tasmota.remove_cmd('NPRestore')\n    tasmota.remove_cmd('NPList')\n    tasmota.remove_cmd('NPPrune')\n  end\nend\nneopoolcommands = NeoPoolCommands()\n</code></pre> <p>To activate the new commands, go to WebGUI \"Consoles\" / \"Berry Scripting console\" and execute</p> <pre><code>load(\"neopoolcmd.be\")\n</code></pre>"},{"location":"NeoPool/#esp32-add-gui-controls-for-filtration-light-and-aux-relais","title":"ESP32: Add GUI controls for filtration, light and aux relais","text":"<p>The following enhancements are made using the Berry Scripting Language which is available on ESP32 only.</p> <p>The class <code>NeoPoolButtonMethods</code> below adds new GUI elements to control filtration, light and aux relais:</p> <p></p> <p>Store the following code into a Tasmota file by using the WebGUI \"Console\" / \"Manage File system\".</p>"},{"location":"NeoPool/#neopoolguibe","title":"neopoolgui.be","text":"View script <pre><code># File: neopoolgui.be\n#\n# Add GUI elements for filtration control, light and aux relais\n\nimport webserver\nimport string\n\nclass NeoPoolButtonMethods : Driver\n\n  #- method for adding elements to the main menu -#\n  def web_add_main_button()\n\n    def selected(value, comp)\n      return comp == value ? 'selected=\"\"' : ''\n    end\n\n    var html = '&lt;p&gt;&lt;/p&gt;'\n\n    var speed = tasmota.cmd('NPFiltration').find('Speed', 'invalid')\n    var mode = tasmota.cmd('NPFiltrationmode').find('NPFiltrationmode', 'invalid')\n    if 'invalid' == speed &amp;&amp; 'invalid' == mode\n      html+= 'NeoPool device not available'\n    else\n      # Filtration mode/speed\n      html+= '&lt;table style=\"width:100%\"&gt;&lt;tbody&gt;&lt;tr&gt;'\n      html+= '  &lt;td style=\"width:50%;padding: 0 4px 0 4px;\"&gt;'\n      html+= '    &lt;label for=\"mode\"&gt;&lt;small&gt;Mode:&lt;/small&gt;&lt;/label&gt;'\n      html+= '    &lt;select id=\"mode\" name=\"mode\"&gt;'\n      html+= string.format('&lt;option value=\"m_sv_manual\"%s&gt;Manual&lt;/option&gt;', selected(mode, 'Manual'))\n      html+= string.format('&lt;option value=\"m_sv_auto\"%s&gt;Auto&lt;/option&gt;', selected(mode, 'Auto'))\n      html+= string.format('&lt;option value=\"m_sv_heating\"%s&gt;Heating&lt;/option&gt;', selected(mode, 'Heating'))\n      html+= string.format('&lt;option value=\"m_sv_smart\"%s&gt;Smart&lt;/option&gt;', selected(mode, 'Smart'))\n      html+= string.format('&lt;option value=\"m_sv_intelligent\"%s&gt;Intelligent&lt;/option&gt;', selected(mode, 'Intelligent'))\n      html+= '    &lt;/select&gt;'\n      html+= '  &lt;/td&gt;'\n      html+= '  &lt;td style=\"width:50%;padding: 0 4px 0 4px;\"&gt;'\n      html+= '    &lt;label for=\"speed\"&gt;&lt;small&gt;Speed:&lt;/label&gt;'\n      html+= '    &lt;select id=\"speed\" name=\"speed\"&gt;'\n      html+= string.format('&lt;option value=\"m_sv_slow\"%s&gt;Slow&lt;/option&gt;', selected(speed, '1'))\n      html+= string.format('&lt;option value=\"m_sv_medium\"%s&gt;Medium&lt;/option&gt;', selected(speed, '2'))\n      html+= string.format('&lt;option value=\"m_sv_fast\"%s&gt;Fast&lt;/option&gt;', selected(speed, '3'))\n      html+= '    &lt;/select&gt;'\n      html+= '  &lt;/td&gt;'\n      html+= '&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'\n      html+= '&lt;script&gt;'\n      html+= 'document.getElementById(\"speed\").addEventListener (\"change\",function(){la(\"&amp;\"+this.value+\"=1\");});'\n      html+= 'document.getElementById(\"mode\").addEventListener (\"change\",function(){la(\"&amp;\"+this.value+\"=1\");});'\n      html+= '&lt;/script&gt;'\n\n      # Filtration button\n      html+= '&lt;table style=\"width:100%\"&gt;&lt;tbody&gt;&lt;tr&gt;'\n      html+= '  &lt;td style=\"width:100%\"&gt;'\n      html+= '    &lt;button id=\"bn_filtration\" name=\"bn_filtration\" onclick=\"la(\\'&amp;m_sv_filtration=1\\');\"&gt;Filtration&lt;/button&gt;'\n      html+= '  &lt;/td&gt;'\n      html+= '&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'\n\n      # Light button\n      html+= '&lt;table style=\"width:100%\"&gt;&lt;tbody&gt;&lt;tr&gt;'\n      html+= '  &lt;td style=\"width:100%\"&gt;'\n      html+= '    &lt;button onclick=\"la(\\'&amp;m_sv_light=1\\');\"&gt;Light&lt;/button&gt;'\n      html+= '  &lt;/td&gt;'\n      html+= '&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'\n\n      # Aux buttons\n      html+= '&lt;table style=\"width:100%\"&gt;&lt;tbody&gt;&lt;tr&gt;'\n      html+= '  &lt;td style=\"width:25%\"&gt;&lt;button onclick=\"la(\\'&amp;m_sv_aux=1\\');\"&gt;Aux1&lt;/button&gt;&lt;/td&gt;'\n      html+= '  &lt;td style=\"width:25%\"&gt;&lt;button onclick=\"la(\\'&amp;m_sv_aux=2\\');\"&gt;Aux2&lt;/button&gt;&lt;/td&gt;'\n      html+= '  &lt;td style=\"width:25%\"&gt;&lt;button onclick=\"la(\\'&amp;m_sv_aux=3\\');\"&gt;Aux3&lt;/button&gt;&lt;/td&gt;'\n      html+= '  &lt;td style=\"width:25%\"&gt;&lt;button onclick=\"la(\\'&amp;m_sv_aux=4\\');\"&gt;Aux4&lt;/button&gt;&lt;/td&gt;'\n      html+= '&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'\n    end\n\n    webserver.content_send(html)\n    html = nil\n    speed = nil\n    mode = nil\n    tasmota.gc()\n  end\n\n  #- As we can add only one sensor method we will have to combine them besides all other sensor readings in one method -#\n  def web_sensor()\n    if webserver.has_arg(\"m_sv_filtration\")\n      tasmota.cmd(\"NPFiltration 2\")\n    end\n\n    if webserver.has_arg(\"m_sv_slow\")\n      tasmota.cmd(\"NPFiltration 1,1\")\n    end\n    if webserver.has_arg(\"m_sv_medium\")\n      tasmota.cmd(\"NPFiltration 1,2\")\n    end\n    if webserver.has_arg(\"m_sv_fast\")\n      tasmota.cmd(\"NPFiltration 1,3\")\n    end\n\n    if webserver.has_arg(\"m_sv_manual\")\n      tasmota.cmd(\"NPFiltrationmode 0\")\n    end\n    if webserver.has_arg(\"m_sv_auto\")\n      tasmota.cmd(\"NPFiltrationmode 1\")\n    end\n    if webserver.has_arg(\"m_sv_heating\")\n      tasmota.cmd(\"NPFiltrationmode 2\")\n    end\n    if webserver.has_arg(\"m_sv_smart\")\n      tasmota.cmd(\"NPFiltrationmode 3\")\n    end\n    if webserver.has_arg(\"m_sv_intelligent\")\n      tasmota.cmd(\"NPFiltrationmode 4\")\n    end\n\n    if webserver.has_arg(\"m_sv_light\")\n      tasmota.cmd(\"NPLight 2\")\n    end\n\n    if webserver.has_arg(\"m_sv_aux\")\n      tasmota.cmd(\"NPAux\"+webserver.arg(\"m_sv_aux\")+\" TOGGLE\")\n    end\n  end\n\n  def init()\n  end\n\n  def deinit()\n  end\nend\n\nneopool_driver = NeoPoolButtonMethods()\ntasmota.add_driver(neopool_driver)\n</code></pre> <p>To activate the new gui elements, go to WebGUI \"Consoles\" / \"Berry Scripting console\" and execute</p> <pre><code>load(\"neopoolgui.be\")\n</code></pre>"},{"location":"NeoPool/#esp32-make-the-scripts-persistent","title":"ESP32: Make the scripts persistent","text":"<p>If you want the extensions to be activated automatically every time you restart your ESP32, save the <code>load()</code> commands into the special file <code>autoexec.be</code>:</p>"},{"location":"NeoPool/#autoexecbe","title":"autoexec.be","text":"<pre><code>load(\"neopoolcmd.be\")\nload(\"neopoolgui.be\")\n</code></pre>"},{"location":"NodeRed/","title":"NodeRed","text":""},{"location":"NodeRed/#home-automation-system-examples-with-pi-tasmota-and-node-red","title":"Home automation system examples with Pi, Tasmota and Node-Red","text":"<ul> <li>Detailed setting up Node-Red and mosquitto on a Raspberry PI and initial control of a Sonoff Switch:</li> </ul> <p>https://www.instructables.com/id/Powerful-Standalone-Home-Automation-System-Pi-Sono/</p> <ul> <li>Detailed setting up of sensors and LEDs using Tasmota:</li> </ul> <p>https://www.instructables.com/id/Home-Automation-Sonoff-Tasmota-Sensors-LEDs-Develo//</p> <p>Credits: @MikePRoberts</p> <ul> <li>ESP8266 OTA Firmware Upgrade Manager and Server</li> </ul> <p>https://flows.nodered.org/flow/888b4cd95250197eb429b2f40d188185</p> <ul> <li>Dynamically Populate Dashboard with Buttons to Tasmota-Sonoff Devices</li> </ul> <p>https://flows.nodered.org/flow/1541bcbba48bb088ec1503dba109f63c</p>"},{"location":"OTA-over-SCP/","title":"OTA over SCP","text":"<p>How to setup and configure \"OTA over SCP\" upload for PlatformIO. The uploader pushes .bin files to remote OTA server using SCP (SSH connection). Images can be served to Tasmotas from there.</p>"},{"location":"OTA-over-SCP/#configuration","title":"Configuration","text":"<p>To upload .bin images to OTA server using SCP, edit the following lines under target environment: <pre><code>; *** Upload file to OTA server using SCP\nupload_port = USER@HOST:/path\nextra_scripts = pio/sftp-uploader.py\n</code></pre> upload_port should be modified to reflect user, host and path on the host where images should be uploaded.</p>"},{"location":"OTA-over-SCP/#requirements","title":"Requirements","text":"<p>SSH communication between the build server and OTA server should be pre-configured so that it doesn't require password (pre-shared keys).</p>"},{"location":"OTA-over-SCP/#add-the-pre-shared-key","title":"Add the pre-shared key","text":"<p>On a linux client machine type the following to generate the key. Press enter three times (without any input): <pre><code>ssh-keygen -t rsa -C \"YOUR OWN KEY DESCRIPTION\"\n</code></pre> Copy the key to your ssh server. You need to confirm this action. Use your server ssh password (one last time): <pre><code>ssh-copy-id -i ~/.ssh/id_rsa.pub USER@HOST\n</code></pre> Optionally, reload the ssh service: <pre><code>sudo /etc/init.d/ssh restart\n</code></pre></p>"},{"location":"OTA-over-SCP/#upload-tasmota","title":"Upload Tasmota","text":"<p>Easy compilation and upload can be performed from the icons at the left side of the PlatformIO screen or use <code>Ctrl</code> + <code>Alt</code> + <code>U</code> to upload (will build if needed).</p>"},{"location":"Octoprint/","title":"OctoPrint","text":"<p>OctoPrint provides a snappy web interface for controlling consumer 3D printers. It is Free Software and released under the GNU Affero General Public License V3 by Gina H\u00e4u\u00dfge.</p> <p>Its website can be found at http://www.octoprint.org.</p>"},{"location":"Octoprint/#octoprint-tasmota","title":"OctoPrint-Tasmota","text":"<p>Jneilliii wrote a plugin to control your Sonoff device with tasmota firmware via OctoPrint, for example shutdown the printer after a print has finished.</p> <p>Repository: https://github.com/jneilliii/OctoPrint-Tasmota</p>"},{"location":"OpenHASP/","title":"OpenHASP","text":"<p>This page moved to HASPmota</p>"},{"location":"OpenTherm/","title":"OpenTherm","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_OPENTHERM\n#define USE_OPENTHERM\n#endif\n</code></pre> <p>Implementation of OpenTherm protocol</p> <p>OpenTherm integration is based on OpenTherm protocol specification v2.2 and works with all OpenTherm compatible boilers.</p> <p>OpenTherm protocol requires a simple low voltage two-wire connection to the boiler, but voltage levels (7..15V) still much higher than ESP8266 levels, which requires OpenTherm Adapter.</p>"},{"location":"OpenTherm/#compatible-opentherm-adapters","title":"Compatible OpenTherm Adapters","text":"<ul> <li>Ihor Melnyk OpenTherm Adapter</li> <li>OpenTherm Gateway Arduino shield</li> <li>OpenTherm master shield for Wemos/Lolin</li> </ul> <p>All adapters have a fully isolated circuit from the boiler. However, please be aware that you can damage your boiler. You may also void your boiler warranty by installing this hardware. Please consult with your boiler manufacturer.</p> <p>Note</p> <p>For my home automation project, I used OpenTherm Gateway Arduino shield; however, this project uses OpenTherm library from Ihor Melnyk. I assume all adapters will work.</p> <p>Please note, this integration does not work with the OTGW. You might want to take a look at the HA OpenTherm GW</p>"},{"location":"OpenTherm/#connecting-to-the-boiler","title":"Connecting to the Boiler","text":"<p>Current integration acts as a master to the boiler.</p> <p></p> <p>Note</p> <p>If OpenTherm <code>master</code> device is present, the boiler may disable its front panel controls. Users may not be able to set a boiler and hot water temperature through the boiler. Now it's the responsibility of the <code>master</code> device. This behavior might vary across different boilers.</p> <p>You may disable this behavior by removing OpenTherm Slave Status command. However, the integration will not be able to read flame/heating/failure flags.</p> <p>OpenTherm Gateway Arduino shield support a gateway mode. As of now, this mode is not supported by the integration.</p> <p></p> <p>As of now, gateway mode is not supported</p>"},{"location":"OpenTherm/#setting-up-tasmota","title":"Setting Up Tasmota","text":"<p>Note</p> <p>You need to define <code>USE_OPENTHERM</code> and rebuild Tasmota to enable OpenTherm integration.</p> <ul> <li>Log into your Tasmota device</li> <li>Go to <code>Configuration</code> -&gt; <code>Configure Module</code></li> <li>Select <code>Generic</code> module type, save &amp; restart</li> <li>In the <code>Module parameters</code> window, assign <code>OpenTherm RX</code> and <code>OpenTherm TX</code> to the corresponding pins</li> <li>Save settings and restart</li> </ul> <p></p> <p>Note</p> <p>The integration attaches ISR to the <code>RX</code> GPIO to avoid pooling. That GPIO should support interrupts. Please consider this while working on the schematics.</p>"},{"location":"OpenTherm/#troubleshooting","title":"Troubleshooting","text":"<p>In order to troubleshoot you may need to enable <code>Debug</code> or <code>More Debug</code> logging level,</p> <p></p> <p>After restart you might see the following in the logs: <pre><code>00:00:00 CFG: Loaded from flash at 3F7, Count 72\n00:00:00 QPC: Flag 0E\n00:00:00 CFG: CR 338/699\n00:00:00 SRC: Restart\n00:00:00 Project tasmota Tasmota Version 8.2.0(sensors)-STAGE\n00:00:01 [OTH]: perform handshake\n00:00:01 [OTH]: Processing response. Status=SUCCESS, Response=0x4003011B\n00:00:01 [OTH]: getLastResponseStatus SUCCESS. Slave Cfg: 4003011B\n00:00:01 [OTH]: Processing response. Status=SUCCESS, Response=0xC0000000\n00:00:02 [OTH]: Setting Boiler Temp. Old: 0, New: 85\n00:00:02 [OTH]: Processing response. Status=SUCCESS, Response=0xD0015500\n00:00:02 [OTH]: Setting Hot Water Temp. Old: 0, New: 37\n12:34:58 [OTH]: Processing response. Status=INVALID, Response=0x70730000\n12:34:58 [OTH]: command OEMD is not supported by the boiler. Last status: INVALID\n12:35:00 [OTH]: Processing response. Status=INVALID, Response=0xF01B0000\n12:35:00 [OTH]: command TOUT is not supported by the boiler. Last status: INVALID\n12:35:00 [OTH]: Processing response. Status=INVALID, Response=0x701C0000\n12:35:00 [OTH]: command TRET is not supported by the boiler. Last status: INVALID\n12:35:16 MQT: tele/boiler/SENSOR = {\"Time\":\"2020-05-12T12:35:16\",\"ANALOG\":{\"A0\":7},\"OPENTHERM\":{\"conn\":\"BUSY\",\"settings\":3,\"SLAVE\":{\"FAULT\":0,\"CH\":0,\"DHW\":0,\"FL\":0,\"COOL\":0,\"CH2\":0,\"DIAG\":0,\"RAW\":3221225472},\"BTMP\":{\"FAULT\":0,\"REQ\":85.0,\"ACT\": 85.0},\"HWTMP\":{\"REQ\":37.0,\"ACT\": 37.0},\"ASFF\":{\"FC\":0,\"OFC\":0},\"FLM\":0.0,\"TB\":31.0,\"TDHW\":30.0,\"DHWS\":37.0,\"TMAX\":0.0}}\n</code></pre></p> <p>In the example, <code>perform handshake</code> was successful, and the OpenTherm integration started to fetch various OpenTherm statuses.</p> <p>Note</p> <p>Your boiler may not respond to some of the OpenTherm commands. The integration made 3 attempts to execute the command. If the third attempt failed, the command marked as not supported and excluded from the rotation.</p>"},{"location":"OpenTherm/#external-thermostat-wiring-and-safety","title":"External Thermostat Wiring and Safety","text":"<p>Central heating is the last thing you want to fail in your home. You might have significant damage to your property in case of the software bug or your custom hardware or wiring failure.</p> <p>As a last resort measure, you probably want to use some sort of mechanical thermostat, which turns on your boiler if the temperature drops below the safe threshold.</p> <p></p> <p>In the worst-case scenario, your OpenTherm hardware stop communicating with the boiler. Proper boiler implementation will flag external panel error and take control back, following the external thermostat circuit state.</p> <p>The second issue can be with your thermostat logic, especially if your logic is running on some external device. To address this, OpenTherm integration is using <code>Diagnostics Indication</code> to enable central heating. That way, if your external thermostat report freezing condition, OpenTherm integration activates heating. To enable this option, set the <code>CHOD</code> flag.</p> <p>Note</p> <p>Another use case for the <code>CHOD</code> flag might be an external hot water tank storage using central heating to heat the hot water in the tank.</p>"},{"location":"OpenTherm/#configuration","title":"Configuration","text":"<p>OpenTherm integration supports the following commands.</p> <ul> <li><code>ot_flags</code>            Get/Set OpenTherm flags</li> <li><code>ot_tboiler</code>          Get/Set central heating temperature</li> <li><code>ot_twater</code>           Get/Set domestic hot water temperature</li> <li><code>ot_save_setpoints</code>   Save central heating and domestic hot water temperatures</li> <li><code>ot_ch</code>               Activate/Deactivate central heating</li> </ul>"},{"location":"OpenTherm/#ot_flags-command","title":"ot_flags command","text":"<p>OpenTherm integration supports the following flags:</p> <ul> <li><code>CHOD</code> - Enable CH (central heating) on diagnostics flag. See External Thermostat section</li> <li><code>DHW</code>  - Enable Domestic Hot Water. If you have an on-demand gas heater, it won't start heating immediately, but enable heating when water is on</li> <li><code>CH</code>   - If set, activate central heating permanently, following the <code>ot_tboiler</code> setpoint value. If disabled and <code>CHOD</code> is set, it follows the <code>Diagnostics</code> flag. Otherwise, heating is controlled by the <code>ot_ch</code> status</li> <li><code>COOL</code> - Enable cooling, if supported. Refer to your boiler manual.</li> <li><code>OTC</code>  - Enable external temperature compensation thermistor. Refer to your boiler manual.</li> <li><code>CH2</code>  - Enable auxiliary central heating. Refer to your boiler manual.</li> </ul> <p>Note</p> <p>During the first run, <code>ot_flags</code> is set to the <code>CHOD,DHW</code>. Hot water setpoint set to 36-degree Celsius and central heating temperature set to 85 degree celsius</p> <p>To get OpenTherm flags, type <code>ot_flags</code> <pre><code>13:49:48 CMD: ot_flags\n13:49:48 MQT: stat/boiler/RESULT = CHOD,DHW\n</code></pre></p> <p>To set OpenTherm flags, type <code>ot_flags DHW,CH,OTC</code> <pre><code>13:49:48 CMD: ot_flags DHW,CH,OTC\n13:49:48 MQT: stat/boiler/RESULT = DHW,CH,OTC\n</code></pre></p>"},{"location":"OpenTherm/#ot_tboiler-command","title":"ot_tboiler command","text":"<p><code>ot_tboiler</code> set boiler (CH) desired temperature. The actual command to the boiler will be issued if your new temperature difference bigger than the OPENTHERM_BOILER_SETPOINT_TOLERANCE value which is 1-degree Celsius as of today.</p> <pre><code>14:12:04 CMD: ot_tboiler\n14:12:04 MQT: stat/boiler/RESULT = {\"ot_tboiler\":60.0}\n</code></pre> <pre><code>14:12:55 CMD: ot_tboiler 85\n14:12:55 MQT: stat/boiler/RESULT = {\"ot_tboiler\":85.0}\n14:12:57 [OTH]: Setting Boiler Temp. Old: 60, New: 85\n</code></pre> <p>Note</p> <p>Some boilers might write setpoint temperature into the Flash memory. Having PID controlled appliance may produce a lot of small fluctuations in the setpoint value, wearing out Boiler flash memory.</p> <p>Warning</p> <p><code>ot_tboiler</code> do not write the value in the Tasmota settings, reducing Flash memory writes. To store it permanently, invoke <code>ot_save_setpoints</code> command after <code>ot_tboiler</code> command</p>"},{"location":"OpenTherm/#ot_twater-command","title":"ot_twater command","text":"<p><code>ot_twater</code> set domestic hot water temperature setpoint (DHW).</p> <p>Warning</p> <p><code>ot_twater</code> do not write the value in the Tasmota settings. To store it permanently, invoke <code>ot_save_setpoints</code> command after <code>ot_twater</code> command.</p> <pre><code>14:13:55 CMD: ot_twater\n14:13:55 MQT: stat/boiler/RESULT = {\"ot_twater\":38.0}\n</code></pre> <pre><code>14:13:55 CMD: ot_twater 40\n14:13:55 MQT: stat/boiler/RESULT = {\"ot_twater\":40.0}\n</code></pre>"},{"location":"OpenTherm/#ot_save_setpoints-command","title":"ot_save_setpoints command","text":"<p><code>ot_save_setpoints</code> store boiler and domestic hot water setpoints into the flash memory of the Tasmota.</p>"},{"location":"OpenTherm/#ot_ch-command","title":"ot_ch command","text":"<p><code>ot_ch</code> enable or disable central heating (CH). The Boiler follows the <code>ot_tboiler</code> temperature setpoint.</p> <pre><code>14:14:57 CMD: ot_ch\n14:14:57 MQT: stat/boiler/RESULT = {\"ot_ch\":0}\n</code></pre> <pre><code>14:15:57 CMD: ot_ch 1\n14:15:57 MQT: stat/boiler/RESULT = {\"ot_ch\":1}\n</code></pre> <p>Warning</p> <p><code>ot_ch 0</code> won't turn the boiler off, if <code>CHOD</code> flag is set and external thermostat requires heat</p>"},{"location":"OpenTherm/#setting-hot-water-temperature","title":"Setting Hot Water temperature","text":"<p>One of the drawbacks, at least with my boiler, is that the boiler disables all the external knobs, so I can not set up the desired hot water temperature from the boiler itself. You might come up with the automation, setting hot water temperature by some schedule.</p> <p>Another way is to use Home Assistant with the HomeKit integration. I created MQTT Hot Water Heater integration to the Home Assistant, so the Water Heater is exposed to the Home Kit. You should be able to install it through HACS</p> <p></p> <p>You can add the following configuration into the <code>configuration.yaml</code> of your Home Assistant set up.</p> <pre><code>water_heater:\n  platform: mqtt_water_heater\n  name: \"Water Heater\"\n  state_topic: \"tele/boiler/SENSOR\"\n  command_topic: \"cmnd/boiler/OT_TWATER\"\n  value_template: \"{{ value_json.OPENTHERM.DHWS }}\"\n  qos: 0\n  availability_topic: \"tele/boiler/LWT\"\n  payload_available: \"Online\"\n  payload_not_available: \"Offline\"\n  target_temperature: 38\n  heater_min_temperature: 35\n  heater_max_temperature: 50\n</code></pre>"},{"location":"OpenTherm/#automation-examples","title":"Automation Examples","text":"<p>This automation example turns on then Bathroom towel heater if someone is using hot water more than 5 minutes in the evening or more than 7 minutes in the evening. Bathroom towel heater has a coolant pump relay at <code>192.168.1.xx</code> Also, it always turns on the heater on Clock#Timer3 event, working according to the schedule</p> <p>It publishes state to the <code>st/boiler/rr_dry</code> for the Home Assistant bookkeeping. Also, it set boiler temperature to the %var3% value if external heating is required during the bathroom Dry mode.</p> <p>Also, it syncs up the coolant pump state in case of the pump controller power outage.</p> <pre><code># var1 - hot water ON time to enable bathroom Dry mode\n# var2 - Bathroom Dry Mode boiler setpoint\n# var3 - Normal Mode boiler setpoint\n# var15 - a lock of the flame mode to avoid timer restart\n# var16 - sync power4 state\n# use VAR3 to set the actual boiler temperature setpoint\n\n# If heat demand is on during RR Dry Mode, the temperature should be set back to the normal\n\nRule1\non system#boot do backlog TelePeriod 20; var1=540; var2=60; var3=85; var15 0; var16 0 endon\non tele-OPENTHERM#SLAVE#FL do WebSend [192.168.1.xx] POWER4 %var16%; endon\non Clock#Timer=1 do var1=300 endon\non Clock#Timer=2 do var1=420 endon\non Clock#Timer=3 do event dr=1 endon\non var3#state do ot_tboiler %value% endon\n\nRule2\non tele-OPENTHERM#SLAVE#DHW&gt;%var15% do backlog RuleTimer1 %var1%; var15 1 endon\non tele-OPENTHERM#SLAVE#DHW=0 do backlog RuleTimer1 0; var15 0 endon\non Rules#Timer=2 do backlog ot_ch 0; ot_tboiler %var3%; var16 0; WebSend [192.168.1.xx] POWER4 OFF; publish st/boiler/rr_dry 0 endon\non Rules#Timer=1 do event dr=1 endon\non event#dr do backlog RuleTimer2 7200; ot_ch 1; ot_tboiler %var2%; var16 1; WebSend [192.168.1.xx] POWER4 ON; publish st/boiler/rr_dry 1 endon\n\nRule3\non tele-OPENTHERM#SLAVE#DIAG=1 do ot_tboiler %var3%; endon\non tele-OPENTHERM#SLAVE#DIAG=0 do ot_tboiler %var2%; endon\n</code></pre>"},{"location":"P1-Smart-Meter/","title":"P1 Smart Meter","text":"<p>Reading serial data from a P1 smart meter using a Wemos with Tasmota installed.</p> <p>Tested on the following smart meters:</p> <ul> <li>Kaifa MA105C</li> <li>De Landis + Gyr, E350 (ZCF110)</li> <li>Landis + Gyr, E360</li> <li>Sanxing SX631 (S34U18)</li> </ul>"},{"location":"P1-Smart-Meter/#schematics","title":"Schematics","text":"<p>The transistor makes sure that the RxD signal is converted and inverted to 3.3V. According to the DSMR v5.0.2 P1 specification the P1 connector on the meter provides 5V DC output for the OSM (Other Service Module) connected to this port, which is able to continuously supply maximum current of 250mA. A Wemos D1 mini module draws way less than 100mA so it is perfectly safe to use this as a power source. It can be powered through the 5V pin just inserting a protection diode.</p>"},{"location":"P1-Smart-Meter/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page, select module <code>Generic (18)</code></p> <p>From the web console set the serial delimiter to 10 (newline). This makes Tasmota publish each line of the telegram separately to mqtt. </p> <ul> <li><code>SerialDelimiter 10</code></li> <li><code>SerialSend 1</code></li> </ul> <p>For more details see serial-bridge.</p> <p>Should you run into problems with serial buffer overflows, then try to increase the serial buffer size using <code>SerialBuffer 520</code>. This will not be automatically persisted, so try the command first and when the device works fine after having increased the serial buffer size, then try to add a rule like:</p> <pre><code>Rule1 ON Power1#Boot DO SerialBuffer 520 ENDON\n</code></pre>"},{"location":"P1-Smart-Meter/#example-output","title":"Example output","text":"<p>Below an example of the telegram message published (per line) to mqtt. From here your HA system can process the data required for your needs.</p> <pre><code>09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"/KFM5KAIFA-METER\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-3:0.2.8(42)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:1.0.0(200913101618S)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.1.1(4530303235303030303639363432393136)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:1.8.1(005779.835*kWh)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:1.8.2(005583.617*kWh)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:2.8.1(000000.000*kWh)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:2.8.2(000000.000*kWh)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.14.0(0001)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:1.7.0(00.498*kW)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:2.7.0(00.000*kW)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.7.21(00000)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.7.9(00000)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:99.97.0(1)(0-0:96.7.19)(000101000001W)(2147483647*s)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:32.32.0(00000)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:32.36.0(00000)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.13.1()\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-0:96.13.0()\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:31.7.0(002*A)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:21.7.0(00.496*kW)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"1-0:22.7.0(00.000*kW)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-1:24.1.0(003)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-1:96.1.0(4730303332353631323736373836373136)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"0-1:24.2.1(200913100000S)(04139.079*m3)\\r\"}\n09:16:17 MQT: tele/wemos-9/RESULT = {\"SerialReceived\":\"!F798\\r\"}\n</code></pre>"},{"location":"P1-Smart-Meter/#description-of-each-line","title":"Description of each line","text":"<p>see also DSMR 5.0 - P1 Companion Standard</p> <p><pre><code>Header information - {\"SerialReceived\":\"/KFM5KAIFA-METER\"}\nEmpty line - {\"SerialReceived\":\"\"}\nVersion information for P1 output - {\"SerialReceived\":\"1-3:0.2.8(42)\"}\nDate-time stamp of the P1 message - {\"SerialReceived\":\"0-0:1.0.0(181227093413W)\"}\nEquipment identifier - {\"SerialReceived\":\"0-0:96.1.1(4530303235303030303639363432393136)\"}\nelectricityUsedTariff1 &gt;&gt; Meter Reading electricity delivered to client (Tariff 1) in 0,001 kWh - {\"SerialReceived\":\"1-0:1.8.1(002293.192*kWh)\"}\nelectricityUsedTariff2 &gt;&gt; Meter Reading electricity delivered to client (Tariff 2) in 0,001 kWh - {\"SerialReceived\":\"1-0:1.8.2(002523.640*kWh)\"}\nMeter Reading electricity delivered by client (Tariff 1) in 0,001 kWh - {\"SerialReceived\":\"1-0:2.8.1(000000.000*kWh)\"}\nMeter Reading electricity delivered by client (Tariff 2) in 0,001 kWh - {\"SerialReceived\":\"1-0:2.8.2(000000.000*kWh)\"}\nelectricityActiveTariff &gt;&gt; Tariff indicator electricity. The tariff indicator can also be used to switch tariff dependent loads e.g boilers. This is the responsibility of the P1 user - {\"SerialReceived\":\"0-0:96.14.0(0002)\"}\nActual electricity power delivered (+P) in 1 Watt resolution - {\"SerialReceived\":\"1-0:1.7.0(00.474*kW)\"}\nActual electricity power received (-P) in 1 Watt resolution - {\"SerialReceived\":\"1-0:2.7.0(00.000*kW)\"}\nNumber of power failures in any phase - {\"SerialReceived\":\"0-0:96.7.21(00000)\"}\nNumber of long power failures in any phase - {\"SerialReceived\":\"0-0:96.7.9(00000)\"}\nPower Failure Event Log (long power failures) - {\"SerialReceived\":\"1-0:99.97.0(1)(0-0:96.7.19)(000101000001W)(2147483647*s)\"}\nNumber of voltage sags in phase L1 - {\"SerialReceived\":\"1-0:32.32.0(00000)\"}\nNumber of voltage swells in phase L1 - {\"SerialReceived\":\"1-0:32.36.0(00000)\"}\nText message max 1024 characters. - {\"SerialReceived\":\"0-0:96.13.1()\"}\nText message max 1024 characters. - {\"SerialReceived\":\"0-0:96.13.0()\"}\nInstantaneous current L1 in A resolution - {\"SerialReceived\":\"1-0:31.7.0(002*A)\"}\nInstantaneous active power L1 (+P) in W resolution - {\"SerialReceived\":\"1-0:21.7.0(00.474*kW)\"}\nInstantaneous active power L1 (-P) in W resolution - {\"SerialReceived\":\"1-0:22.7.0(00.000*kW)\"}\nDevice-Type - {\"SerialReceived\":\"0-1:24.1.0(003)\"}\nEquipment identifier (Gas) - {\"SerialReceived\":\"0-1:96.1.0(4730303332353631323736373836373136)\"}\nGasMeterReadingFiveMinutes &gt;&gt; Last 5-minute value (temperature converted), gas delivered to client in m3, including decimal values and capture time - {\"SerialReceived\":\"0-1:24.2.1(181227090000W)(02910.491*m3)\"}\n{\"SerialReceived\":\"!5E3E\"}\n</code></pre> Also see Tasmota's Smart Meter Interface if you want to have these OBIS lines translated in selected sensors populatinng MQTT payloads.</p> <p>Additional info * Kaifa Meters (Dutch) * DSMR 5.0 - P1 Companion Standard</p>"},{"location":"PAJ7620/","title":"PAJ7620U2 gesture sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_PAJ7620\n#define USE_PAJ7620         // [I2cDriver34] Enable PAJ7620 gesture sensor (I2C address 0x73) (+2.5k code)\n#endif\n</code></pre></p> <p>PAJ7620U2 is an integrated gesture recognition I<sup>2</sup>C sensor from PixArt-Imaging Inc. based on infrared. It also has built-in proximity detection and can sense various properties like position (x,y,z) and speed.</p> <p>Gesture recognition seems to be more stable than with the APDS-9960, which on the other hand is a lot cheaper.</p>"},{"location":"PAJ7620/#configuration","title":"Configuration","text":""},{"location":"PAJ7620/#wiring","title":"Wiring","text":"Breakout ESP VCC/VIN +3.3VDC GND GND SCL GPIOy SDA GPIOx INT Not used"},{"location":"PAJ7620/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect the PAJ7620 automatically. </p> <p>After restart Tasmota needs some time to completely configure its state. In this time frame it is likely to miss some gestures. This should stabilize after a few moments.  </p>"},{"location":"PAJ7620/#commands","title":"Commands","text":"<p>To use the sensor you need to switch to the desired mode of operation with  <code>Sensor50 &lt;x&gt;</code> where &lt;x&gt; = <code>0\u20265</code>. It will not appear in the webUI but it can be observed via MQTT messages in console.</p>"},{"location":"PAJ7620/#0-off","title":"<code>0</code> - Off","text":"<p>Sensor muted, no readings in Tasmota.</p>"},{"location":"PAJ7620/#1-gesture-mode","title":"<code>1</code> - Gesture Mode","text":"<p>Reports gesture movement with:  <code>Up</code> <code>Down</code> <code>Left</code> <code>Right</code> <code>Near</code> <code>Far</code> <code>CW</code> (clockwise rotation) <code>CCW</code> (counter-clockwise rotation) </p> <p>As expected, \"Near\" and \"Far\" gestures are tricky and you have to train your movements to catch them. Sometimes the sensor reports \"Near\" and \"Far\" at once (which will be discarded). There is some postprocessing to allow the object (hand or finger) to move into the sensing area and delay the initial direction report (up, down, left, right) to give the chance to trigger (the intended) \"Near\" or \"Far\" movement.  Especially \"Far\" is a bit harder to achieve.  </p> <p>example: <code>\u2026{Up:1}</code> = up gesture once  <code>\u2026{Left:3}</code> =  left gesture 3 times in a row, without any other gesture in between</p>"},{"location":"PAJ7620/#2-proximity-mode","title":"<code>2</code> - Proximity Mode","text":"<p>Arbitrary values between 0 (far away) and 255 (very near) are given. Exit from the sensor field will always give at least one \"zero message\". <code>tele</code> is only triggered, when the value has changed.</p> <p>example: <code>\u2026{Proximity:255}</code> = close proximity, almost touching the sensor  <code>\u2026{Proximity:0}</code> = object has left the sensing area</p>"},{"location":"PAJ7620/#3-corner-mode","title":"<code>3</code> - Corner Mode","text":"<p>Sensing area is organised in quarters. An object in one of the corners will trigger the corresponding number. </p> 1 2 3 4 <p>example: <code>\u2026{Corner:2}</code> = object in upper right corner</p>"},{"location":"PAJ7620/#4-pin-mode","title":"<code>4</code> - PIN Mode:","text":"<p>A fluent movement of an object through a given sequence of corners (similar to unlocking a smartphone) will trigger a valid \"PIN\". The next corner must be reached in about 0.7 seconds.    </p> <p>example: <code>\u2026{PIN:1}</code> = valid PIN</p>"},{"location":"PAJ7620/#5-cursor-mode","title":"<code>5</code> - Cursor Mode:","text":"<p>Shows x- and y-coordinates. Mainly intended for debugging and \"seeing\" the sensing area. This reads only the upper 5-bit-values, which automatically removes much of the jitter, giving values between 0 and 15.  </p> <p>example: <code>\u2026{x:1, y:15}</code> = upper left corner</p> <p>The sensor provides some more goodies, like velocity of an object, so if someone has a fancy use case for this, feel free to open a feature request. Of course it would be possible to mix the modes, but this can produce a lot of MQTT-messages. This could be added later upon user request (based on real world use cases).</p>"},{"location":"PAJ7620/#breakout-boards","title":"Breakout boards","text":""},{"location":"PCA9557/","title":"PCA9557 GPIO Expander","text":"<p>Technical Data from the manufacturer: * NXP PCA9557</p> <p>The PCA9557 has 8 IO pins which the PCA9557 driver uses as D0 - D7. This is visualized in the circuit diagram below.</p> <p></p> <p>You will need to pick an I2C address using the address mapping according to pin A0, A1, and A2 as from the datasheet as follows:</p> <p></p>"},{"location":"PCA9557/#supporting-modes","title":"Supporting modes","text":"<p>Starting with Tasmota v12.5.0.x several and mixed PCA9557 are supported, adding switches, buttons and relays acted on as if they were directly connected to the ESP8266 or ESP32 configured using a JSON file containing a template describing the GPIO's as used on the basic Tasmota device.</p> <p>To enable it you will only need to add in <code>user_config_override.h</code> </p> <p><code>#define USE_PCA9557</code></p> <p>This enables the driver which in turn at restart will search for the JSON file in three possible locations:</p> <ul> <li>if a filesystem is present it looks for file <code>pca9557.dat</code></li> <li>if not found and rules are supported it looks for a specific rule entry like <code>on file#pca9557.dat do &lt;template&gt; endon</code></li> <li>if not found and scripts are supported it looks for a specific script like <code>-y &lt;template&gt;</code></li> </ul> <p>If no JSON file is found the driver does not claim any PCA9557 device.</p> <p>A typical JSON template would look like <code>{\"NAME\":\"PCA9557 expander\",\"BASE\":0,\"GPIO\":[224,225,226,227,32,33,34,35]}</code> which adds four relays and four buttons.</p> <p>The template consists of a <code>\"NAME\"</code> data pair with any description of the template, an optional <code>\"BASE\"</code> data pair selecting if either relative (0 = default) or absolute (1) button and/or switch numbering is used and a <code>\"GPIO\"</code> data pair with numbers representing the functions of the GPIO's in order from lowest I2C address IO0 to highest I2C address IO7 and are based on the numbers known from the base tasmota template used on the ESP8266 or ESP32.</p> <p>The following list contains the current supported functions:</p> Function Code Description None 0 Not used Button_n1..32 Bn 64..95 Button to Gnd (needs external resistor) Button_in1..32 Bin 128..159 Button inverted to Vcc (needs external resistor) Switch_n1..28 Sn 192..219 Switch to Gnd (needs external resistor) Relay1..32 R 224..255 Relay Relay_i1..32 Ri 256..287 Relay inverted Output_Hi Oh 3840 Fixed output high Output_lo Ol 3872 Fixed output low <p>Some example templates</p> <pre><code>                          S3  S2  B2 B3 Oh   B1 S1    R1        R4  R2  R3  S4\n{\"NAME\":\"PCA9557\",\"GPIO\":[194,193,65,66,3840,64,192,0,224,0,0,0,227,225,226,195]}\n\nInverted relays and buttons               Ri1 Ri2 Ri3 Ri4 Ri5 Ri6 Ri7 Ri8 B1 B2 B3 B4 B5 B6 B7 B8\n{\"NAME\":\"PCA9557 A=Ri1-8, B=B1-8\",\"GPIO\":[256,257,258,259,260,261,262,263,32,33,34,35,36,37,38,39]}\n\nUnique inverted relays and buttons with offset 2     Ri3 Ri4 Ri5 Ri6 Ri7 Ri8 Ri9 Ri10B3 B4 B5 B6 B7 B8 B9 B10\n{\"NAME\":\"PCA9557 A=Ri2-10, B=B2-10\",\"BASE\":1,\"GPIO\":[258,259,260,261,262,263,264,265,34,35,36,37,38,39,40,41]}\n\nButtons, relays, buttons and relays                        B1 B2 B3 B4 B5 B6 B7 B8 R1  R2  R3  R4  R5  R6  R7  R8  B9 B10B11B12B13B14B15B16R9  R10 R11 R12 R13 R14 R15 R16\n{\"NAME\":\"PCA9557 A=B1-8, B=R1-8, C=B9-16, D=R9-16\",\"GPIO\":[32,33,34,35,36,37,38,39,224,225,226,227,228,229,230,231,40,41,42,43,44,45,46,47,232,233,234,235,236,237,238,239]}\n</code></pre> <p>Since the PCA9557 has no interrupt pin, buttons and switches will be polled every 50ms.</p> <p>You will need to define the address you are using in <code>user_config_override.h</code> for the driver to know on which address the PCA9557 is expected to be found.</p> <p><code>#define USE_PCA9557_ADDR 0x18</code></p> <p>The PCA9557 chips allow for both INPUT and OUTPUT.</p> <p>If OUTPUT is enabled, telemetry data for the current state of OUTPUT pins will also be provided by telemetry.</p>"},{"location":"PCA9557/#usage-of-the-driver","title":"Usage of the driver","text":"<p>The PCA9557 chip (or breakout board) must be connected to the ESP8266/ESP32 and the I2C pins must be configured for the module similar to the following:</p> <p></p> <p>Once that is complete you may want to confirm that the Tasmota firmware is finding your PCA9557 chip by sending the command through serial or MQTT: <code>I2Cscan</code></p> <p>You should see a response giving you an address within the range of the PCA9557 chip (0x18 through 0x1F) which may look as follows <code>MQT: stat/tasmota/RESULT = {\"I2CScan\":\"Device(s) found at 0x18\"}</code></p> <p>If the extender is not detected, check your wiring and pin configuration.</p> <p>If sucessful, you should be able to see the changes in Tasmota main web page. Following example has 8 IO lines defined as relays:</p> <p></p>"},{"location":"PCA9557/#configuration-example","title":"Configuration example","text":"<p>You can add all necessary settings at once in your <code>user_config_override.h</code>. The following example adds 8 relays (commanded with POWER1 to POWER8), PCA9557 has all address bits tied to GND (0x18) while ESP8266 GPIO 0 and 2 are used for I2C SDA and SCL. <pre><code>#define USE_PCA9557\n#define USE_PCA9557_ADDR 0x18\n\n#define USER_TEMPLATE \"{\\\"NAME\\\":\\\"Lights\\\",\\\"GPIO\\\":[608,0,640,0,0,0,0,0,0,0,0,0,0,0],\\\"FLAG\\\":0,\\\"BASE\\\":18}\"\n#define USER_RULE1 \"On file#pca9557.dat DO {\\\"NAME\\\":\\\"Lights\\\",\\\"BASE\\\":0,\\\"GPIO\\\":[256,257,258,259,260,261,262,263]} ENDON\"\n</code></pre></p>"},{"location":"PCA9685/","title":"PCA9685 12-bit PWM controller","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_PCA9685\n#define USE_PCA9685                     // [I2cDriver1] Enable PCA9685 I2C HW PWM Driver - Must define I2C Address in #define USE_PCA9685_ADDR below - range 0x40 - 0x47 (+1k4 code)\n  #define USE_PCA9685_ADDR 0x40         // Enable PCA9685 I2C Address to use (Must be within range 0x40 through 0x47 - set according to your wired setup)\n  #define USE_PCA9685_FREQ 50           // Define default PWM frequency in Hz to be used (must be within 24 to 1526) - If other value is used, it will revert to 50Hz\n#endif\n</code></pre></p> <p>Technical Data: Product Information from NXP</p>"},{"location":"PCA9685/#implementation-status-in-tasmota","title":"IMPLEMENTATION STATUS IN TASMOTA","text":"<p>The PCA9685 driver is implemented in such a way that it may be used as standard individual OUTPUT pins, or as PWM capable OUTPUT pins - The latter offloads the PWM functionality from the ESP8266 insofar that the PCA9685 will continue to perform its configured output PWM/ON/OFF state without direct control or intervention from the Tasmota firmware.</p> <p>Support was added in line with the datasheet specification insofar that the PWM frequency can be set from 24hz all the way up to 1526hz.</p> <p>This driver does not currently have any perpetual settings so will revert to a base frequency of 50hz (usually suitable for most applications) and will be set in an OFF state for all pins during power-up and/or reset.</p> <p>The latter may change as the driver grows in cases where user requirements and development requirements are met.</p>"},{"location":"PCA9685/#usage-of-the-pca9685-driver-in-tasmota","title":"USAGE OF THE PCA9685 DRIVER IN TASMOTA","text":"<p>The driver needs to be connected to the I<sup>2</sup>C bus of your Tasmota powered device (note that most Sonoff devices will not have reachable I<sup>2</sup>C pins so it's applicable to a limited number, so most likely only applicable to bare ESP8266 or WeMos type users.</p> <p>If you modify a Sonoff or similar device to gain access to the I<sup>2</sup>C bus please be aware that other problems may persist and that for such use cases support in Tasmota chat or Issues is not guaranteed in any way whatsoever)</p> <p>For information on how to set up a development environment please check the wiki on PlatformIO</p> <p>Note that the I<sup>2</sup>C selection must correspond with how you have wired the module or chip as incorrect addressing will result in the PCA9685 not being detected. The valid I<sup>2</sup>C address range is 0x40 through 0x47 for the PCA9685 and most off-the-shelf modules would likely default to 0x40.</p> <p>If you are unsure please use <code>I2CScan</code> from Tasmota console to scan for devices on the I<sup>2</sup>C bus and you should find a device within the mentioned range.</p> <p>You may also get a discovery on 0x70 but please do not use this address as it is a broadcast address and the driver does not currently support its implementation.</p> <p>Also be aware of other I<sup>2</sup>C devices you have connected to the same Tasmota driven device in order to avoid I<sup>2</sup>C address conflicts.</p> <p>Once connected, correctly flashed, and configured Tasmota will detect the device automatically on startup.</p>"},{"location":"PCA9685/#driver-usage","title":"DRIVER USAGE","text":"<p>There is no web interface for this driver. The driver is used via MQTT or console command using the following available commands and their respective parameters</p> <pre><code>driver15 pwmf,frequency   // where frequency is the PWM frequency from 24 to 1526 in Hz\ndriver15 pwm,pin,pwmvalue // where pin = LED pin 0 through 15 and pwmvalue is the pulse width between 0 and 4096\ndriver15 pwm,pin,ON       // Fully turn a specific pin/LED ON\ndriver15 pwm,pin,OFF      // Fully turn a specific pin/LED OFF\ndriver15 reset            // Reset to power-up settings - i.e. F=50hz and all pins in OFF state\ndriver15 status           // Will return a JSON string containing all the current settings / parameters\n</code></pre>"},{"location":"PCA9685/#other-important-information","title":"OTHER IMPORTANT INFORMATION","text":"<ul> <li>Please remember to consider the voltage and current limitations of the chip and per pin output current limitations as outlined in the datasheet.</li> <li>You may also get a discovery on 0x70 but please do not use this address as it is a broadcast address and the driver does not currently support its implementation.</li> <li>Also be aware of other I<sup>2</sup>C devices you have connected to the same Tasmota driven device in order to avoid I<sup>2</sup>C address conflicts.</li> </ul>"},{"location":"PCA9685/#outstanding-feature-requests","title":"OUTSTANDING FEATURE REQUESTS","text":"<ul> <li>Dimming ON / OFF a dimming value in a certain time and fade on \"ON / OFF\" (Not yet scheduled for implementation)</li> <li>Allow usage of RGBW in pairs of 4 PWM outputs (i.e. drive 4 x 4pin RGBW LED's) (Not yet scheduled for implementation)</li> </ul>"},{"location":"PCF8574/","title":"PCF8574 / PCF8574A GPIO Expander","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_I2C                                // Add support for I2C\n#define USE_PCF8574                            // [I2cDriver2] Enable PCF8574 I/O Expander (I2C addresses 0x20 - 0x26 and 0x39 - 0x3F) (+2k1 code)\n//  #define USE_PCF8574_MODE2                    // Enable Mode2 virtual relays/buttons/switches (+2k3 code)\n//  #define USE_PCF8574_SENSOR                   // Enable Mode1 inputs and outputs in SENSOR message (+0k2 code)\n//  #define USE_PCF8574_DISPLAYINPUT             // Enable Mode1 inputs display in Web page (+0k2 code)\n//  #define USE_PCF8574_MQTTINPUT                // Enable Mode1 MQTT message &amp; rule process on input change detection : stat/%topic%/PCF8574_INP = {\"Time\":\"2021-03-07T16:19:23+01:00\",\"PCF8574-1_INP\":{\"D1\":1}} (+0k5 code)\n</code></pre> In order to use PCF8574 mode 2, uncomment USE_PCF8574_MODE2. In order to use inputs, uncomment the last three lines.</p>"},{"location":"PCF8574/#introduction","title":"Introduction","text":"<p>PCF8574 and PCF8574A are I2C 8-bit IO port extender originally designed by Philips (now NXP) but also  now available from various manufacturer.</p> <ul> <li>PCF8574 and PCF8574A at NXP</li> <li>PCF8574 and PCF8574A at Texas Instruments</li> </ul> <p>As usual when using an electronic part, reading the datasheet is highly recommended as the below  document only focus on Tasmota integration.</p> <p>A few different breakout boards are available although some are dedicated to be mounted as a backpack on standard 16x2 or 16x4 LCD displays and are not suitable for general I/Os (but works well with tasmota-display).</p> <p></p> <ul> <li>On the left: generic modules suitable for extending IO</li> <li>On the right: specific module to control a LCD display (not the purpose of this doc page)</li> </ul>"},{"location":"PCF8574/#supported-i2c-addresses-and-number-of-pcf8574","title":"Supported I2C addresses and number of PCF8574","text":"<p>PCF8574 and PCF8574A are identical functionally and each can be configured to work on 1 of 8 possible I2C address. PCF8574 can use one address of 0x20 to 0x27 and PCF8574A can use one of 0x38 to 0x3F.</p> <p>As of today, Tasmota driver supports:</p> <ul> <li>Up to 4 PCF8574 OR PCF8574A is supported by Tasmota allowing up to 32 additional GPIO pins.</li> <li>Addresses 0x27 and 0x38 are excluded to avoid conflict with other I2C peripheral which can't    be differentiated at run-time.</li> </ul> <p>If USE_MCP230xx_ADDR is defined, this address is reserved for MCP230XX IO expander.</p> <p>The first 2 lines are mandatory to enable I2C support and including the driver in the build. The 3 other lines allows to add optional features to support inputs. By default only the \"outputs\" feature is enabled.</p>"},{"location":"PCF8574/#tasmota-configuration","title":"Tasmota Configuration","text":"<p>Note</p> <p>Once the firmware with the PCF8574 driver has been loaded, make sure to have it enabled with <code>I2Cdriver2 1</code>.</p> <p>Starting with Tasmota v12.4.0.2 there are two different modes to use PCF8574(A):</p> <ul> <li>The original approach (now called Mode 1) supports user configurable features using a GUI menu. </li> <li>The latest approach called Mode 2, supports adding switches, buttons and relays configured using a JSON file containing a template describing the GPIO's as used on the basic Tasmota device.</li> </ul>"},{"location":"PCF8574/#mode-2","title":"Mode 2","text":"<p>To enable Mode 2 you will need to add in <code>user_config_override.h</code></p> <p><code>#define USE_PCF8574_MODE2</code></p> <p>This enables the driver which will at restart search for the JSON file in three possible locations:</p> <ul> <li>if a filesystem is present it looks for file <code>pcf8574.dat</code></li> <li>if not found and rules are supported it looks for a specific rule entry like <code>on file#pcf8574.dat do &lt;template&gt; endon</code></li> <li>if not found and scripts are supported it looks for a specific script like <code>-y &lt;template&gt;</code></li> </ul> <p>Note</p> <p>If no JSON file is found the driver continues in mode 1.</p> <p>A typical JSON template would look like <code>{\"NAME\":\"PCF8574 expander\",\"BASE\":0,\"GPIO\":[224,225,226,227,32,33,34,35]}</code> which adds four relays and four buttons.</p> <p>The template consists of a <code>\"NAME\"</code> data pair with any description of the template, an optional <code>\"BASE\"</code> data pair selecting if either relative (0 = default) or absolute (1) button and/or switch numbering is used and a <code>\"GPIO\"</code> data pair with numbers representing the functions of the GPIO's in order from lowest I2C address D0 to highest I2C address D7 and are based on the numbers known from the base tasmota template used on the ESP8266 or ESP32.</p> <p>The following list contains the current supported functions:</p> Function Code Description None 0 Not used Button1..32 B 32..63 Button to Gnd with internal pullup Button_n1..32 Bn 64..95 Button to Gnd without internal pullup Button_i1..32 Bi 96..127 Button inverted to Vcc with internal pullup Button_in1..32 Bin 128..159 Button inverted to Vcc without internal pullup Switch1..28 S 160..187 Switch to Gnd with internal pullup Switch_n1..28 Sn 192..219 Switch to Gnd without internal pullup Relay1..32 R 224..255 Relay Relay_i1..32 Ri 256..287 Relay inverted Output_Hi Oh 3840 Fixed output high Output_lo Ol 3872 Fixed output low <p>Some example templates</p> <pre><code>Unique inverted relays and buttons with offset 2                           B3 B4 B5 B6 Ri3 Ri4 Ri5 Ri6 B7 Ri7 B8 Ri8 B9 Ri9 B10Ri10\n{\"NAME\":\"PCF8574 A=B3456,Ri3456,B=B7Ri7B8Ri8B9Ri9B10Ri10\",\"BASE\":1,\"GPIO\":[34,35,36,37,258,259,260,261,38,262,39,263,40,264,41,265]}\n\nInverted relays and buttons               Ri8 Ri7 Ri6 Ri5 Ri4 Ri3 Ri2 Ri1 B1 B2 B3 B4 B5 B6 B7 B8\n{\"NAME\":\"PCF8574 A=Ri8-1, B=B1-8\",\"GPIO\":[263,262,261,260,259,258,257,256,32,33,34,35,36,37,38,39]}\n\n                                                     B1 B2 B3 B4 Ri4 Ri3 Ri2 Ri1 B5 B6 B7 B8 Ri8 Ri7 Ri6 Ri5\n{\"NAME\":\"PCF8574 A=B1-4,Ri4-1, B=B5-8,Ri8-5\",\"GPIO\":[32,33,34,35,259,258,257,256,36,37,38,39,263,262,261,260]}\n</code></pre>"},{"location":"PCF8574/#mode-1","title":"Mode 1","text":"<p>PCF8574 can be configured from Tasmota web GUI in \"Configure\" =&gt; \"Configure PCF8574\" </p> <p>Each IO port can be configured as Input or Output in a similar way as a native GPIO of the ESP.</p> <p>If you are using outputs to drive relays, it is possible to choose if the relay is activated by a  HIGH signal (checkbox \"Invert Ports\" unchecked) or a LOW signal (checkbox checked). The selection  applies to all output ports. This checkbox can also be controlled by SetOption81.</p> <p>Once configuration is complete, it must be saved by clicking on the green \"Save\" button. Like for  general ESP GPIO configuration, this will trigger a reboot of the ESP.</p> <p>It is not possible to change pin definition at run-time.</p>"},{"location":"PCF8574/#outputs","title":"Outputs","text":"<p>A PCF8574 pin configured as an output support all features of a Tasmota <code>Relay</code> component.</p> <p>It is assigned a Power index and can be controlled by Power command (on, off, toggle). Power indexes of PCF8574 outputs are assigned after the ESP GPIO configured as <code>Relay</code>. For example, if you have Relay 1 (Power1) to Relay 4 (Power4) configured on the ESP's GPIO, PCF8574 outputs will start at Power5.</p> <p>A state text and an on/off button are automatically created on the Web GUI and syncs with the pin state.</p> <p>All <code>Power</code> features are supported including <code>PowerOnState</code>, <code>PulseTime</code>, <code>Blink</code>, <code>SetOption0</code>, ...</p> <p></p>"},{"location":"PCF8574/#usage","title":"Usage","text":"<p>Enabling <code>USE_PCF8574_SENSOR</code> adds a <code>PCF8574-xx</code> field into the JSON payload of the <code>tele/topic/SENSOR</code> message. The form of the message is: <pre><code>{\"Time\":\"2021-03-11T19:50:58+01:00\",\"PCF8574-1\":{\"D0\":1,\"D1\":1,\"D2\":1,\"D3\":1,\"D4\":0,\"D5\":0,\"D6\":0,\"D7\":0}}\n</code></pre></p> <p>As you can see, all pins are listed, including both inputs and outputs. The value reported is the digital level of the pin. If \"Invert Ports\" has been enabled, <code>Power ON</code> will be reported as 0 as the pin is at a LOW level.</p> <p>As for any sensor published in the <code>tele/topic/SENSOR</code> message, it is possible to use Rules triggers such as: <pre><code>ON tele-PCF8574-1#D0 DO something_with %value% ENDON\n</code></pre> Numerical operators such as <code>==</code> can be used to compare to 0 or 1. See also change detection.</p>"},{"location":"PCF8574/#pcf8574-inputs-pins-in-the-web-gui","title":"PCF8574 inputs pins in the Web GUI","text":"<p>Enabling <code>USE_PCF8574_DISPLAYINPUT</code> will add the state of PCF8574 inputs displayed as sensors in the Web GUI. Outputs are not represented here as they are already shown as Power.</p> <p></p> <p>Value of pin is updated in almost \"real-time\".</p>"},{"location":"PCF8574/#input-change-detection","title":"Input Change Detection","text":"<p>While reporting the pin level in SENSOR or on the GUI is interesting, it is even better to detect pin change. This is enabled by <code>USE_PCF8574_MQTTINPUT</code>. When this feature is enabled at build time, a test will be performed every 50ms to detect if an input pin has changed. In that case, Tasmota will publish on <code>stat/topic/PCF8574_INP</code> a JSON payload with the PCF8574 index and the pin level: <pre><code>20:19:39.385 MQT: stat/topic/PCF8574_INP = {\"Time\":\"2021-03-11T20:19:39+01:00\",\"PCF8574-1_INP\":{\"D0\":0}}\n20:19:39.584 MQT: stat/topic/PCF8574_INP = {\"Time\":\"2021-03-11T20:19:39+01:00\",\"PCF8574-1_INP\":{\"D0\":1}}\n</code></pre></p> <p>This can be caught in rules such as:</p> <p>Implementing a Power push \"Button\": <pre><code>ON PCF8574-1_INP#D0=0 DO Power2 toggle ENDON\n</code></pre></p>"},{"location":"PID-Control/","title":"PID Control","text":"<p>This extension adds a PID (Proportional Integral Derivative) feature into the Tasmota software.  </p> <p>The PID algorithm is designed to be used to control real-world processes.  This includes room heating/cooling, temperature control when brewing, and a multitude of other processes.  The PID tuning parameters are designed to be meaningful in the real world (rather than the abstract Ki Kd Kp that are often used which are completely meaningless to most). The algorithm is based on that in the node-red node node-red-contrib-pid which has been well received.</p> <p>In use it can either regularly be given the current process value via MQTT or if the device has a sensor attached then that sensor can be used to read the process value.  So using any Tasmota-capable device with e.g. a temperature sensor (e.g. a TH10 with a DS18B20) the complete PID loop control can be built into the device so that the process will continue to be controlled even if the wifi is down.  This is a very cost effective way of achieving PID control.</p> <p>The algorithm allows the relay to be used in a time proportioned way using the Time Proportioned output extension.</p> <p>The loop tuning parameters can be set at build time and can be adjusted at run time via MQTT.  Choice of which local sensor to servo to is set at build time, with configuration looking like: </p> <pre><code>#define PID_LOCAL_SENSOR_NAME \"ANALOG\"\n#define PID_LOCAL_SENSOR_TYPE \"Temperature1\"\n</code></pre> <p>The feature is included in Tasmota v9.3.0 onward.</p> <p>The PID code adds about 11.1k and the Timeprop code another 1k</p> <p>Detailed instructions for setup are in these two xdrv files: <code>tasmota/xdrv_48_timeprop.ino</code> and <code>tasmota/xdrv_49_pid.ino</code>.</p> <p>The ESP8266/ESP32 will run the PID algorithm at up to 1 cycle per second (whenever a physical PV value is set through MQTT, or obtained locally every second of a locally attached sensor), which is much faster than is needed for the sort of processes Sonoff devices are usually associated with (eg, thermostats in rooms with response functions of the order of 10 minutes).  It rather clobbers the Tasmota terminal output in the web browser at that rate, but show no real signs of stress.  For locally attached sensors, the process control survives network detachment and loss of communications to the MQTT server.</p> <p>Help with using the PID algorithm and with loop tuning can be found at http://blog.clanlaw.org.uk/pid-loop-tuning.html. This is directed towards using the algorithm in the node-red node node-red-contrib-pid but the algorithm here is based on the same code so the tuning technique described there should work just the same.</p> <p>This has been tested in a Sonoff Basic with a TH10, and a Sonoff Mini with a DS18B20 connected, and a ESP32 DevKit with a NTC thermistor attached to a GPIO port and tuned appropriately. If there are any issues running this on other hardware let us know.</p>"},{"location":"PIR-Motion-Sensors/","title":"PIR Motion Sensors","text":"<p>PIR motion sensors, albeit called sensors, are configured as switches in Tasmota since they basically report motion (<code>1</code>) or no motion (<code>0</code>) to the device. </p> <p>Most PIR's are single wire and they require connecting to VCC, GND and one GPIO. In this guide we will use <code>GPIO13</code> as the pin that the PIR output is connected to. See PIN Restrictions on which pins not to use.</p> <p>In the simple case of wanting PIR activity to turn on a light/fan connected to the same device, you can use <code>SwitchMode 13</code> (push to on), along with a <code>PulseTime</code> for the minimum on-period. Then you can skip the more detailed options on this page.</p>"},{"location":"PIR-Motion-Sensors/#tasmota-settings","title":"Tasmota Settings","text":"<p>In Configuration -&gt; Configure Module menu change <code>GPIO13</code> to <code>Switch1</code>. </p> <p>If there already is a <code>Switch1</code> simply choose the next in line. Same applies if you're connecting more than 1 PIR on a single device.</p> <p>A configured PIR will not appear in the web UI in any form. To make it report like a sensor we need a rule that will send movement triggers to an MQTT topic.</p> <p><pre><code>SwitchMode1 1\nSwitchTopic 0\nRule1 on Switch1#state=1 do publish stat/%topic%/PIR1 ON endon on Switch1#state=0 do Publish stat/%topic%/PIR1 OFF endon\nRule1 1\n</code></pre> You can change (<code>PIR1</code>) and the message (<code>ON</code>/<code>OFF</code>) to whatever suits your needs. <code>%topic%</code> is the configured device topic.</p> <p>Look in console for motion detection messages <code>[20:24:03] stat/%topic%/PIR1 ON</code> to verify everything is working</p> <p>optional: Before using rules configure any GPIO that doesn't have anything connected to it as <code>Relay1</code>.   This creates a dummy relay which is triggered by the PIR so you can see the changes in the web UI. This method is not recommended for daily use and should only be used for testing.</p> <p>A more advanced example of rules with PIRs.</p>"},{"location":"PIR-Motion-Sensors/#am312","title":"AM312","text":"<p>AM312 works even on 3.3v instead of 5v (like HC-SR501) which makes it perfect for ESP8266 devices without a 5V line (like Sonoff Basic). It is also less prone to false triggers due to Wi-Fi interference.</p> <p></p>"},{"location":"PIR-Motion-Sensors/#pinout","title":"Pinout","text":"<p>Pin marked VOUT is connected to a free GPIO pin on the device.</p> <p>This PIR goes to off state after a few seconds so we need to use this rule instead of the one in the example.  <pre><code>Rule1 on Switch1#state=1 do Backlog Publish stat/%topic%/PIR1 ON; RuleTimer1 30 endon on Rules#Timer=1 do Publish stat/%topic%/PIR1 OFF endon\n</code></pre> With this it will stay ON for 30 seconds then send OFF message and the timer restarts every time there's an ON trigger.</p> <p>Another configuration option is to change Switchmode to 14 with Pulsetime of 130 (30 seconds on every time the AM312 is triggered)</p> <p>Another use case as a hand wave switch.</p>"},{"location":"PIR-Motion-Sensors/#hc-sr501","title":"HC-SR501","text":""},{"location":"PIR-Motion-Sensors/#pinout_1","title":"Pinout","text":"<p>Configuration with HC-SR501 is easiest with Switchmode 1, since this module has a built-in trigger/delay potentiometers and the state remains ON during the trigger period.</p>"},{"location":"PIR-Motion-Sensors/#mh-sr602","title":"MH-SR602","text":"<p>This is a very small version of a PIR that is able to modify the sensitivity and delay by soldering resistors.</p> <p>With factory settings this PIR goes to off state after a few seconds so we need to use this rule instead of the one in the example.  <pre><code>Rule1 on Switch1#state=1 do Backlog Publish stat/%topic%/PIR1 ON; RuleTimer1 30 endon on Rules#Timer=1 do Publish stat/%topic%/PIR1 OFF endon\n</code></pre> With this it will stay ON for 30 seconds then send OFF message and the timer restarts every time there's an ON trigger.</p> <p></p>"},{"location":"PIR-Motion-Sensors/#pinout_2","title":"Pinout","text":""},{"location":"PIR-Motion-Sensors/#panasonic-ekmc1603111","title":"Panasonic EKMC1603111","text":"<p>Set the data pin to <code>Switch n</code> for it to work.</p> <p>Datasheet</p>"},{"location":"PIR-Motion-Sensors/#configuring-tasmota-to-for-home-assistant","title":"Configuring Tasmota to for Home Assistant","text":"<p>To make Home Assistant recognize your PIR sensor automatically, skip all previous steps, and execute the following steps to make Tasmota announce your PIR as a motion sensor.</p> <ol> <li>In Configuration -&gt; Configure Module menu change your GPIO pin to <code>Switch2</code> (or any other switch number).</li> <li>Assuming you picked <code>Switch2</code> in the previous step, run this command:</li> </ol> <pre><code>Backlog rule1 on switch2#state do publish stat/%topic%/MOTION %value% endon; rule1 1; switchmode2 1, so19 1\n</code></pre> <ol> <li>Run this very-long command all at once:</li> </ol> <pre><code>rule2 on system#boot do publish2 homeassistant/%topic%/config {\n  \"name\": \"Motion Sensor\",\n  \"state_topic\": \"stat/%topic%/MOTION\",\n  \"payload_on\": 1,\n  \"availability_topic\": \"tele/%topic%/LWT\",\n  \"payload_available\": \"Online\",\n  \"payload_not_available\": \"Offline\",\n  \"device_class\": \"motion\",\n  \"force_update\": true,\n  \"off_delay\": 30,\n  \"unique_id\": \"%deviceid%_motion\",\n  \"device\": {\n    \"identifiers\": [\n      \"%deviceid%\"\n    ]\n  }\n} endon\n</code></pre> <ol> <li>Run the following two commands to enable the rule, and then restart the device:</li> </ol> <pre><code>Rule2 1\nRestart 1\n</code></pre> <p>Note that this configuration, much like the rest of the examples on this page, don't show the PIR sensor's state on the home screen of Tasmota.</p>"},{"location":"PN532/","title":"PN532 NFC reader","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_PN532_HSU \n#define USE_PN532_HSU                            // Add support for PN532 using HSU (Serial) interface (+1k8 code, 140 bytes mem)\n// Optional defines, uncomment (remove //) as needed\n//  #define USE_PN532_DATA_FUNCTION                // Add sensor40 command support for erase, setting data block content (+1k7 code, 388 bytes mem)\n#endif\n</code></pre></p> <p>The PN532 is a highly integrated transceiver module for contactless communication at 13.56 MHz based on the 80C51 microcontroller core.</p> <p>The datasheet for the PN532 chip is available here.</p> <p>Please note that although the datasheet mentions that the PN532 can be used on SPI, I<sup>2</sup>C and HSUART that only the HSU interface is implemented in the Tasmota driver.</p>"},{"location":"PN532/#configuration","title":"Configuration","text":"<p><code>#define USE_PN532_DATA_FUNCTION</code> This function is experimental. There are limitations because it seems not all cards are supported by this driver and/or the PN532 module. See issue 4941 for more information. We are still researching the </p>"},{"location":"PN532/#wiring","title":"Wiring","text":"<p>As mentioned earlier the PN532 breakout boards usually have pins broken out for all three protocols supported by the PN532 but we are only interested in the HSU interface as that is all the driver currently supports.</p> <p>For this reason breakout boards have either micro dip switches as shown in the image below, or they have pads on the PC board which you need to bridge out with solder to select which mode the PN532 will operate in.</p> <p></p> <p>After selecting the correct protocol mode and connecting the HSU TX/RX pins of the PN532 to the pins you configured on your ESP8266 board you can power it up and the PN532 should be detected automatically.</p> PN532 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"PN532/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>PN532 Rx (139)</code></li> <li>GPIOy to <code>PN532 Tx (138)</code></li> </ul> <p>The module will reboot when you save this configuration. During start-up the following information should be visible in your console output:</p> <p><pre><code>00:00:00 NFC: PN532 NFC Reader detected V1.6\n</code></pre> If the device was not found please check your wiring and configuration and confirm that everything is as it should be.</p> <p>Example</p> <p>Configured using Wemos D1 mini on pins: D1 (connected to PN532 SCL) and D2 (connected to PN532 SDA)</p> <p></p>"},{"location":"PN532/#usage","title":"Usage","text":"<p>Tasmota will scan for a new card detect 4 times per second and if found will report it via immediate telemetry.</p> <p>The output on the console will look similar to the below when a new card is detected</p> <pre><code>18:23:24 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-01-10T18:23:24\",\"PN532\":{\"UID\":\"94D8FC5F\", \"DATA\":\"\"}}\n18:23:24 MQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n18:23:25 MQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n</code></pre> <p>The UID of the card/tag is reported and any text stored in BLOCK 1 of a Mifare Classic card or PAGE4-7 of a NTAG card (up to 16 characters in length) is reported in the <code>DATA</code> field of the JSON sent via telemetry. Please note that the <code>DATA</code> field can contain only printable chars.</p> <p>The content of the <code>DATA</code> on BLOCK 1 of a Mifare Classic (PAGE4-7 of a NTAG) card can be set as follows</p> <p><code>Sensor40 WRITE,I LOVE TASMOTA</code></p> <p>Once executed the very next card/tag that is presented to the reader will be programmed accordingly and the data will be retained on the card/tag until either changed or erased.</p> <p>To erase the content of the <code>DATA</code> field the following command may be used</p> <p><code>Sensor40 ERASE</code></p> <p>Once executed the very next card/tag that is presented to the reader will have its BLOCK 1 (PAGE4-7 of a NTAG) erased.</p> <p>For canceling previous command he following command may be used</p> <p><code>Sensor40 CANCEL</code></p> <p>Once executed will stop waiting next card/tag.</p> <p>For NTAG213/215/216, NT3H2111/2211 or compatible are additionally available commands: AUTH, SET_PWD, UNSET_PWD for password operations.</p> <p>Warning. The password is a unsigned 32 bit and acknowledge is a unsigned 16 bit values.</p> <p><code>Sensor40 AUTH,password,ack</code> </p> <p>Set tasmota password phrase and password acknowledge for authentication.</p> <p><code>Sensor40 SET_PWD</code> or <code>Sensor40 SET_PWD,new_password</code> or <code>Sensor40 SET_PWD,new_password,new_ack</code></p> <p>Write current password and ack / new password and current ack / new password and new acknowledge to a NTAG21x tag.</p> <p><code>Sensor40 UNSET_PWD</code></p> <p>Clear password and ack in a NTAG21x tag.</p> <p>Text logging of the above two actions are also presented during the process for information purposes.</p>"},{"location":"PN532/#using-the-uid-and-data-of-a-presented-card","title":"Using the UID and DATA of a presented card","text":"<p>When a card is presented to the PN532 under normal operating conditions up to 3 ways of using the data is possible.</p> <p>The first is the immediate telemetry generated which looks as follows. For not NTAG21x: <pre><code>18:31:39 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-01-10T18:31:39\",\"PN532\":{\"UID\":\"94D8FC5F\", \"DATA\":\"ILOVETASMOTA\"}}\n</code></pre></p> <p>For NTAG21x and correct password and acknowledge: <pre><code>20:05:48 MQT: tele/tasmota/SENSOR = {\"Time\":\"2023-02-24T20:05:48\",\"PN532\":{\"UID\":\"53BB1F05110001\",\"Data\":\"I love tasmota\",\"Auth\":\"Ok\"}}\n</code></pre></p> <p>For NTAG21x and correct password and not correct acknowledge: <pre><code>20:05:48 MQT: tele/tasmota/SENSOR = {\"Time\":\"2023-02-24T20:05:48\",\"PN532\":{\"UID\":\"53BB1F05110001\",\"Data\":\"I love tasmota\",\"Auth\":\"NOk\"}}\n</code></pre></p> <p>For NTAG21x and not password protection in a tag: <pre><code>20:05:48 MQT: tele/tasmota/SENSOR = {\"Time\":\"2023-02-24T20:05:48\",\"PN532\":{\"UID\":\"53BB1F05110001\",\"Data\":\"I love tasmota\",\"Auth\":\"None\"}}\n</code></pre></p> <p>Since this is an immediate telemetry generation as opposed to the sensor data you would normally be expected to be presented when the telemetry period occurs, this telemetry data is not directly usable on the device itself. It is generated and immediately transmitted over MQTT and the purpose of this is so that immediate action may be taken by any home automation software you are using with the data obtained from the card/tag as opposed to waiting for the telemetry period to expire and be sent with normal telemetry data.</p> <p>For the purpose of using card/tag data on the device itself you will need to use rules along with the events that are caused.</p> <p>Example</p> <p>Example rule for responding to a specific UID on the device when a card/tag matching a specific UID is presented</p> <pre><code>rule1 on PN532#UID=94D8FC5F do power on endon\n</code></pre> <p>Example</p> <p>Example rule for responding to a specific DATA content that was previously programmed to one or more cards using the <code>Sensor40 write,xxxx</code> command</p> <pre><code>Rule 1on EVENT#PN532_DATA=ILOVETASMOTA do power on endon\n</code></pre> <pre><code>18:41:12 MQT: tele/tasmota/SENSOR = {\"Time\":\"2019-01-10T18:41:12\",\"PN532\":{\"UID\":\"94D8FC5F\", \"DATA\":\"ILOVETASMOTA\"}}\n18:41:13 MQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n18:41:13 MQT: stat/tasmota/RESULT = {\"Event\":\"Done\"}\n18:41:13 RUL: EVENT#PN532_DATA=ILOVETASMOTA performs \"power on\"\n18:41:13 MQT: stat/tasmota/RESULT = {\"POWER\":\"ON\"}\n18:41:13 MQT: stat/tasmota/POWER = ON\n</code></pre>"},{"location":"PN532/#breakout-boards","title":"Breakout Boards","text":"<p>Since the PN532 chip itself is surface mount and requires some external components to operate the best is probably to obtain a breakout board similar to the one below from your favourite online supplier.</p> <p></p> <p>Please make sure the breakout board you order has the HSU pins (SCL=TX and SDA=RX) broken out as it will be very difficult to add them manually - Usually they have them but for good measure just make sure.</p>"},{"location":"PS-16-DZ-Dimmer/","title":"PS-16-DZ Dimmer","text":"<p>The PS-16-DZ dimmer uses eWeLink app same as Sonoff devices. It's available from Amazon and Aliexpress. It may under different name, but the model number is PS-16-DZ.</p>"},{"location":"PS-16-DZ-Dimmer/#pics","title":"Pics","text":"<p>Opened it up, found an ESP8285 and a Nuvoton N76E003.  </p>"},{"location":"PS-16-DZ-Dimmer/#flash-and-gpio-pins","title":"Flash and GPIO pins","text":"<p>Remove the ESP8285 daughter card DLX-MKCK01 from the main board and flash Tasmota. <pre><code>pin1 RST -&gt; N76E003 P0.5/PWM2\npin2 TXD -&gt; N76E003 P0.7/RXD\npin3 RXD -&gt; N76E003 P0.6/TXD\npin4 GPIO13/MTCK -&gt; LED\npin5 3.3V\npin6 GND\n</code></pre></p>"},{"location":"PS-16-DZ-Dimmer/#communication-between-esp8285-and-n76e003","title":"Communication between ESP8285 and N76E003","text":"<p>It uses AT command to communicate between ESP8285 and N76E003 over UART at 19200 baud. <pre><code>Turn on the switch from ESP8266:\nSend from ESP8266\nAT+UPDATE=\"sequence\":\"1528335040032\",\"switch\":\"on\"\nReceive from MCU\nAT+RESULT=\"sequence\":1528335040032\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn off the switch from ESP8266:\nSend from ESP8266\nAT+UPDATE=\"sequence\":\"1528335118327\",\"switch\":\"off\"\nReceive from MCU\nAT+RESULT=\"sequence\":1528335118327\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nChange brightness to 44 from ESP8266:\nSend from ESP8266:\nAT+UPDATE=\"sequence\":\"1528335181502\",\"bright\":44\nReceive from MCU\nAT+RESULT=\"sequence\":1528335181502\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn on the switch with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn off the switch with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"off\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nChange the brightness to 52 with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":52\nSend from ESP8266:\nAT+SEND=ok\n\nHolding the middle button on faceplate to reset the device:\nReceived from MCU\nAT+SETTING=enterESPTOUCH\nSend from ESP8266:\nAT+SETTING=enterESPTOUCH\n</code></pre> The sequence number is a 13 digits unix timestamp (in milliseconds). The data after \"bright\" is the brightness. The maximum of the brightness is 100 and the minimum is 10. There is one byte 0x1B at the end of each AT command.</p>"},{"location":"PWM-dimmer-switch/","title":"PWM Dimmer","text":"<p>PWM dimmer is supported in standard tasmota.bin</p> <p>To enable PWM dimmer operation, select the PWM Dimmer module. On ESP32, instead config an unused gpio as <code>Option E1</code>, and use a build with <code>#define USE_PWM_DIMMER</code>.</p> <p>PWM Dimmer module adds support for PWM dimmer switches and devices with one or more buttons that control devices in a device group. The brightness of the load for PWM dimmers is controlled by a PWM GPIO pin. They typically have power, up and down buttons, a powered-on LED, five brightness LEDs and another status LED. The SD0x dimmer from Martin Jerry, Acenx, Tessan or NTONPOWER is an example of such a device.</p> <p></p> <p>Any other device with one or more buttons, such as any typical Tasmota-capable wall switch, can make use of the PWM Dimmer module to control the power, brightness and light channels of one or more device groups. For single-button devices or multi-button devices with remote device mode enabled, only the operations controlled by the power button in the instructions below apply. Examples include:</p> <p></p>"},{"location":"PWM-dimmer-switch/#pwm-dimmer-operation","title":"PWM Dimmer Operation","text":"<p>Pressing and releasing the power button toggles the power on/off. If the toggle turns the power on, the light is returned to the last brightness it was set to. If <code>Fade</code> is enabled, the light is faded on/off at the rate defined by the <code>Speed</code> setting.</p> <p>When the power is on, holding the down or up button decreases/increases the brightness. The brightness can also be changed using just the power button. When the power is on, holding the power button alternately increases or decreases the brightness. Initially, holding the power button increases the brightness. Releasing and then holding the power button again decreases the brightness.</p> <p>When the power is off, pressing and releasing the down or up button turns the power on at a temporary brightness of the low/high levels set by the <code>BriPreset</code> command. Turning the power on at the low preset can also be accomplished by holding the power button while the power is off. The brightness presets are intended to enable quickly turning on a light to a dim or bright level without changing the normal desired brightness. Turning the power on to a preset does not change the brightness the light will be set to when the switch is turned on the next time. For example, if the light is on and you adjust the brightness to 80 and then turn the light off, when you turn it back on, the brightness will return to 80. If you turn the power off again and then press the down button, the light will be turned on at the brightness defined by the low preset. If you then turn the light off and on again, the brightness will return to 80.</p> <p>If there are LEDs defined in the template, they are turned on to indicate the current brightness. More LEDs are turned on at higher brightnesses. <code>SetOption86</code> enables/disables the LED timeout. If <code>SetOption86</code> is enabled, the LEDs turn off five seconds after the last change in brightness. Note that the lowest LED and the blue power LED are always on when the power is on. The LED timeout can also be enabled/disabled by holding the power button while tapping (pressing and releasing quickly) the down button.</p> <p>The LedLink LED can be used as a nightlight/powered-off indicator. <code>SetOption87</code> enables/disables turning the LedLink LED on when the power is off. The powered-off indicator can also be enabled/disabled by holding the power button and tapping the up button.</p> <p>Holding the power button and then holding the down or up button publishes an MQTT EVENT command. The topic follows the format of the Full Topic with a subtopic of EVENT (ex. <code>cmnd/LightSwitch1/EVENT</code>). The MQTT payload is <code>Trigger#</code>, where # is 1 if the down button is held or 2 if the up button is held. These triggers can be used in rules on remote devices (<code>ON Event#Trigger1</code>) or by automation software to trigger automations such as scene changes. For example, the Event topic Trigger1 payload could trigger the automation software to turn on the previous scene in a list and the Trigger2 payload could trigger the automation software to turn on the next scene in a list.</p> <p>Holding the power button, tapping the down button and then tapping or holding the down or up button sends a device group message to set CW/RGB/RGBW/RGBCW lights in the device group to the previous/next fixed color. The command is sent/value is adjusted once every .75 seconds for as long as the button is held. The color sequence is red, green, blue, orange, light green, light blue, amber, cyan, purple, yellow, pink, white using RGB channels; cold white using CT channels; and warm white using CT channels.</p> <p>Holding the power button, tapping the up button and then tapping or holding the down or up button publishes an MQTT Event command. The command is sent once every .75 seconds for as long as the button is held. The MQTT topic is as described above. The MQTT payload is <code>Trigger#</code>, where # is 3 if the down button is held or 4 if the up button is held.</p> <p>Pressing and releasing the power button and then holding the power button publishes an MQTT Event command. The command is sent once every .75 seconds for as long as the button is held. The MQTT topic is as described above. The MQTT payload is <code>Trigger#</code>, where # is 5.</p> <p>Button presses and holds execute the normal ButtonTopic and Rule processing. If <code>ButtonTopic</code> is set and <code>SetOption61</code> is 0 or a the button press/hold matches a rule, the button press/hold is ignored by PWM Dimmer. Operations invoked by holding the power button in combination with the up/dowm buttons cannot be overridden by rules. Standard Tasmota multi-press button presses operate as normal.</p> <p>PWM Dimmer uses the Light module to control the PWM. Brightness levels are rescaled to PWM values between the <code>dimmer_min</code> and <code>dimmer_max</code> values specified with DimmerRange. Most LED bulbs do not show a significant difference between PWM value of 1 and PWM value of 100. This results in the lower 10% of the dimmer range having no effect. For best results, <code>DimmerRange &lt;dimmerMin&gt;</code> value should be set to the highest value that results in the lowest bulb brightness (Typically in the range of 8 - 18).</p> <p>When Device Groups are enabled, the PWM Dimmer brightness presets are kept in sync across all switches in the group. The powered-off LED and LED timeout settings are specific to each switch. Changing them does not replicate the change to the other switches in the group.</p> <p>When CW/RGB/RGBW/RGBCW lights are in the same device group as the PWM Dimmer device, use the <code>PWMDimmerPWMs</code> command to define the PWM (channel) count of the lights. This allows the PWM Dimmer module to correctly determine the brightness (dimmer) level and allows the color of all the lights in the device group to be controlled from the PWM Dimmer device.</p>"},{"location":"PWM-dimmer-switch/#commands","title":"Commands","text":"Command Parameters BriPreset <code>&lt;low&gt;,&lt;high&gt;</code> = set brightness low and high presets<code>1..255</code> = set brightness preset<code>+</code> = increase brightness preset<code>-</code> = decrease brightness preset LedMask Set a bitmask specifying which LEDs are used to indicate the current brightness. LEDs not included in the bitmask can be controlled with LedPower.<code>&lt;bitmask&gt;</code> = bitwise value representing each LED. Values may be entered as either hexadecimal or decimal values (e.g., 0xFFFF = 65535). Note that LED 0 is tied to the relay and is always used to indicate the first level of brightness. 0xFFFF (= 1111 1111 1111 1111) All LEDs are used to indicate the  brightness (default)Ex.: LedMask 3 = Use LEDs 0, 1 and 2 to indicate the brightness. PWMDimmerPWMs Set the PWM (channel) count of lights in the device group controlled by the module (CW=2, RGB=3, RGBW=4, RGBCW=5). SetOption86 Set brightness LED timeout<code>0</code> = disable timeout (default)<code>1</code> = enable timeout SetOption87 Set powered-off LED (nightlight)<code>0</code> = disable powered-off LED (default)<code>1</code> = enable powered-off LED SetOption88 Set remote device mode<code>0</code> = disable remote device mode(default)<code>1</code> = enable remote device mode"},{"location":"PWM-dimmer-switch/#remote-device-mode","title":"Remote Device Mode","text":"<p>Remote device mode allows PWM Dimmer switches to control remote devices. With remote device mode enabled, each button controls a different device.</p> <p>Remote device mode is included in the default Tasmota binary. To include remote device mode support in other builds, define <code>USE_PWM_DIMMER_REMOTE</code> and <code>USE_DEVICE_GROUPS</code> in your user_config_override. Remote device mode support requires device group support. Remote device mode support adds 1K to the code size in addition to the code size required for device groups support.</p> <p>To enable remote device mode, execute <code>SetOption88 1</code> (the device will restart). Each remote device must be running firmware with device group support and have remote device support enabled. Remote devices do not need to be built with PWM Dimmer support nor do they need to be switches.</p> <p>If a remote device also uses the PWM Dimmer module, the device acts like a 3-way dimmer switch and may or may not have a load connected to it. All PWM Dimmer switches in the device group can control the power, brightness and color of one or more smart lights with Tasmota with device group support loaded on them.</p> <p>When remote device mode is enabled, button 1 is the power button for the local device while buttons 2 and 3 are the power buttons for remote devices. Group names for buttons 2 and 3 are set by the <code>DevGroupName2</code> and <code>DevGroupName3</code> commands respectively. Note that the button numbers are defined by the module template and can be in any physical order on the switch (button 1 can be defined as the top button, the middle button or the bottom button). Button combinations that publish MQTT Event commands use a topic in the format <code>cmnd/%group-topic%/EVENT</code>.</p> <p>While holding a button, the other two buttons act like the down and up buttons for the remote device associated with the first button pressed. All the functions performed by the down and up buttons in non-remote device mode are available in remote device mode. While holding button 1, button 2 performs the functions of the down button and button 3 performs the functions of the up button. While holding button 2, button 1 performs the functions of the down button and button 3 performs the functions of the up button. While holding button 3, button 1 performs the functions of the down button and button 2 performs the functions of the up button.</p>"},{"location":"PZEM-0XX/","title":"PZEM-0xx power monitor","text":"<p>PZEM is a dedicated separate energy monitor, device calibration in Tasmota is not necessary, the PZEM devices are precisely factory-calibrated.</p>"},{"location":"PZEM-0XX/#pzem-004","title":"PZEM-004","text":"<p>The PZEM-004T together with a Sonoff Basic provide a good clamp on energy monitor.</p>"},{"location":"PZEM-0XX/#parts-needed","title":"Parts needed","text":"<ul> <li>Sonoff Basic</li> <li>PZEM-004T</li> <li>Resistor 1k</li> <li>Enclosure</li> <li>Power cable</li> </ul>"},{"location":"PZEM-0XX/#preparation","title":"Preparation","text":"<p>Install Tasmota on the Sonoff Basic and confirm it is functional before connecting the PZEM-004T to its serial interface.</p>"},{"location":"PZEM-0XX/#hardware-connections","title":"Hardware connections","text":"<p>As the PZEM-004T RX optocoupler series resistor (1K ohm, R15 for v.1 .0 and R8 for v.3.0 ) is designed for 5V, that resistor value had to be reduced in order to achieve the current for driving the RX optocoupler diode. This can be accomplished by soldering a 1k resistor between the joints shown below (modification works for version v.1.0 and v.3.0). The resistor has to be connected between VDD (5V/3.3V) terminal and the RX opto terminal 1.</p> <p>PZEM-004T v.1.0 </p> <p>PZEM-004T v.3.0 </p> <p>It can be used a SMD resistor 102 or 1001 (1K) soldered near/parallel with R8 or a normal resistor (THT) similar to that used on the image of v.1.0 The resistor is placed in different place on v.3.0 because the optocouplers RX and TX are reversed compared to v.1.0</p> <p>Connect the serial interface of the Sonoff Basic with the serial interface of the PZEM-004T. See pictures regarding used colors and connections.</p> <ul> <li>3V3/5V Red</li> <li>Rx Yellow</li> <li>Tx Green</li> <li>Gnd Grey</li> </ul> <p></p> <p>(Image re-used from https://www.instructables.com/id/Use-Homie-Firmware-to-Drive-Sonoff-Switch-Module-E/ Thanks @amayii0)</p> <p>If you need 5V you can use directly from Sonoff (for something else) but do not connect to PZEM logic because this will result in a big flash (kaboom!, the sonoff LIVE line may reach the PZEM NEUTRAL or viceversa). Using 5V from Sonoff for PZEM TTL port is safe but the resistor mod explained above must be undone and another mod is needed for dropping the PZEM TX line from 5V to 3.3V. So, the simplest way is to use 3.3V from Sonoff to 5V TTL terminal of the PZEM and the resistor mod explained in the above images. </p> <p>Cut the power cable in two and connect the input wires to both Sonoff Basic and PZEM-004T. Route one of the power output wires through the PZEM-004T core and connect the output wires to the Sonoff Basic output.</p> <p>As most parts are connected to high voltage AC it is recommended to fit the hardware in a solid enclosure.</p>"},{"location":"PZEM-0XX/#software-configuration","title":"Software configuration","text":"<p>Configure the GPIO's for hardware serial connection as shown below.</p> <p>IMPORTANT: If using the connections as following, the communication works in all cores due to TASMOTA using hardware serial. If the user wants to use other GPIOs for communication, TASMOTA will emulate a serial interface using software serial. This feature does not work using core 2.3.0 due to insufficient RAM. To use the software serial feature, you must use a core version of 2.4.2 or greater.</p> <p>Device Template PZEM-004T version prior to V3:</p> <p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,63,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1}</code></p>"},{"location":"PZEM-0XX/#pzem-004t-version-v3","title":"PZEM-004T version V3","text":"<p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,98,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1}</code></p> <p></p> <p>The PZEM-004T together with a HW-655 Relay provide a good clamp-on energy monitor for a 240V clothes dryer.</p>"},{"location":"PZEM-0XX/#parts-needed_1","title":"Parts needed","text":"<ul> <li>Circuit Box</li> <li>3-prong Dryer Electrical Cord (Note - some households use a 4-prong plug)</li> <li>3-prong Dryer Receptacle (Note - some households use a 4-prong plug)</li> <li>PZEM-004T</li> <li>HW-655 w/ ESP-01</li> <li>ESHION SPSD-5S AC-DC 5V Buck Converter</li> <li>4-pin Serial Connector</li> <li>DuPont Connectors &amp; 22 AWG wire</li> </ul>"},{"location":"PZEM-0XX/#preparation_1","title":"Preparation","text":"<p>Install Tasmota on the ESP-01 and confirm it is functional before connecting the PZEM-004T to its serial interface. Use of pins other that the default hardware serial GPIO (01 &amp; 03) in order for TASMOTA to emulate a serial interface using software serial.</p>"},{"location":"PZEM-0XX/#hardware-connections_1","title":"Hardware connections","text":"<p>Connect the serial interface of the HW-655 with the serial interface of the PZEM-004T.</p> <p></p> <p>As most parts are connected to high voltage AC it is recommended to fit the hardware in a solid enclosure.</p> <p></p>"},{"location":"PZEM-0XX/#software-configuration_1","title":"Software configuration","text":"<p>Device Template PZEM-004T version prior to V3:</p> <p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,63,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code></p>"},{"location":"PZEM-0XX/#pzem-004t-version-v3_1","title":"PZEM-004T version V3","text":"<p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,98,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code></p> <p>Use the module template to configure the GPIO's for hardware serial connection.</p> <p>IMPORTANT: If using the connections as following, the communication works in all cores due to TASMOTA using hardware serial. If the user wants to use other GPIOs for communication, TASMOTA will emulate a serial interface using software serial. This feature does not work using core 2.3.0 due to insufficient RAM. To use the software serial feature, you must use a core version of 2.4.2 or greater.</p>"},{"location":"PZEM-0XX/#connected-power-meter-using-pzem-004t-wemos-d1-mini-and-a-1602-i2c-display","title":"Connected Power Meter using PZEM-004T, Wemos D1 Mini and a 1602 I<sup>2</sup>C display","text":""},{"location":"PZEM-0XX/#parts-needed_2","title":"Parts needed","text":"<ul> <li>Wemos D1 Mini</li> <li>PZEM-004T</li> <li>1kOhm Resistor (optional - see alternate wiring)</li> <li>Enclosure</li> <li>5V buck converter power supply (search for \"700ma 3.5w 5v\" on usual stores...)</li> <li>I<sup>2</sup>C 1602 LCD Display (I had issues with green one, I<sup>2</sup>C address 0x3F, while no problems with blue ones, address 0x27)</li> <li>Mains Power cable</li> <li>Mammuth Clamps</li> </ul>"},{"location":"PZEM-0XX/#preparation_2","title":"Preparation","text":"<p>You need to compile your own Tasmota firmware as none of the pre-compiled binaries have support for display and PZEM module. </p> <p>Set up your preferred IDE as described in wiki </p>"},{"location":"PZEM-0XX/#enable-ide-to-use-custom-settings","title":"Enable IDE to Use Custom Settings","text":"<p>Create user_config_override.h in the <code>tasmota</code> folder and paste the contents of this sample configuration file.</p>"},{"location":"PZEM-0XX/#platformio","title":"PlatformIO","text":"<ul> <li>Rename platformio_override_sample.ini.   to platformio_override.ini</li> <li>Enter <code>platformio run -e &lt;variant-name&gt;</code>   Examples:  </li> <li><code>platformio run -e tasmota-sensors</code> </li> <li><code>platformio run -e tasmota-DE</code> </li> </ul>"},{"location":"PZEM-0XX/#tasmota-parameter-configuration","title":"Tasmota Parameter Configuration","text":"<p>Device Template PZEM-004T version prior to V3:</p> <p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,63,6,5,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code></p>"},{"location":"PZEM-0XX/#pzem-004t-version-v3_2","title":"PZEM-004T version V3","text":"<p><code>{\"NAME\":\"HW-655 PZEM\",\"GPIO\":[0,62,0,98,6,5,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":18}</code></p> <ul> <li>use <code>I2CScan</code> to detect your device address</li> <li>use <code>DeviceAddress XXX</code> (where XXX is the decimal converted address found) to set the I<sup>2</sup>C address</li> <li>set <code>TelePeriod 10</code> to have the display refresh every 10 seconds (you can't go under this value)</li> <li>set <code>DisplayModel 1</code>, and <code>DisplayMode 0</code></li> <li>finally, add a Rule to display values (I choose these): <pre><code>Rule1 ON Tele-ENERGY#Power DO DisplayText [z] [x1y0]%value%W ENDON ON Tele-ENERGY#Today DO DisplayText [x8y0]%value%Wh ENDON ON Tele-ENERGY#Voltage DO DisplayText [x1y1]%value%V ENDON ON Tele-ENERGY#Current DO DisplayText [x8y1]%value%A ENDON\n</code></pre></li> <li>remember to enable the rule, with <code>Rule1 1</code></li> </ul>"},{"location":"PZEM-0XX/#images-and-wiring-diagram","title":"Images and Wiring diagram","text":"<p>DANGER - MAINS VOLTAGE. Be sure to crimp connectors and use heat-shrinking tube wherever possible/needed, and tightly secure any screw.</p> <p></p> <p>How it looks, from web GUI:</p> <p></p> <p>How it looks, from enclosure:</p> <p></p> <p>You can set the contrast using the little trimmer/pot on back of the display. I cut a bit of the corners from the display to have it flush with border, and used two hexagonal plastic standoffs with nuts and bolts to secure it to transparent top.</p> <p>Mains IN, mains OUT, all sealed:</p> <p></p> <p>Wiring Diagram: * Check images below for more information about the 1kOhm resistor needed to use 3.3V instead of 5V for the PZEM-004T serial connection.  </p> <p>PZEM-004T v.1.0 </p> <p>PZEM-004T v.3.0 </p>"},{"location":"PZEM-0XX/#calibration","title":"Calibration","text":"<p>Per Theo - As the PZEM is a dedicated energy monitor, device calibration in TASMOTA is currently not supported.</p>"},{"location":"PZEM-0XX/#pzem-016","title":"PZEM-016","text":"<p> DO NOT PERFORM THIS MODIFICATION WITHOUT REMOVING POWER FROM THE PZEM FIRST! </p> <p>Note: the PZEM-016 TTL output is at 5V signal levels. There are varying schools of thought on whether the ESP82xx has 5V tolerant GPIO. You may want to use a level shifter for the serial communications signals to bring them to the recommended 3.3V.  </p> <p>PZEM-016 modules can be converted from RS485 to TTL serial level devices by simply removing the internal MAX485 chip and adding two internal jumper wires. This will bring the serial port connections out via the four-pin terminal block. Pin A is now TTL serial out (Tx) and pin B TTL serial in (Rx). The modification retains the optical isolation used by the PZEM for safety to ensure no high voltages on the outputs.</p> <p> </p> <p>You can use a voltage level shifter to power the ESP82xx from the PZEM-016 module's 5V power. This may also require a 470uf 35V capacitor across the 5V line to work reliably. </p>"},{"location":"PZEM-0XX/#tasmota-configuration","title":"Tasmota Configuration","text":"<p>It is recommended to use GPIO1/GPIO3 or GPIO13/GPIO15 for the most reliable serial communications. When using other GPIOs software serial will be activated and used. </p> GPIO Component PZEM 1 PZEM0XX Tx (62) Pin B 3 PZEM016 Rx (98) Pin A"},{"location":"Peripherals/","title":"Peripherals","text":"<p>Peripherals are sensors, displays, controllers, LEDs and other devices wired to available GPIO pins of your device</p> <p>Tip</p> <p>A peripheral must have correctly wired power, GND and data pins to the device prior to booting in order for Tasmota to detect it and initialize it properly.</p>"},{"location":"Peripherals/#supported-peripherals","title":"Supported peripherals","text":""},{"location":"Peripherals/#tasmota-settings","title":"Tasmota Settings","text":"<p> Tasmota allows for easy selection of peripherals and assignment to GPIO pins. </p> <p>Configuration is possible in the webUI Configuration - Configure Module page</p> <p>or by using commands: <code>Module</code> and <code>GPIO</code>, or <code>Template</code>.</p>"},{"location":"Peripherals/#module","title":"<code>Module</code>","text":"<p>First select desired module for the device (Wait for the restart). Depending on the type of Module, only certain GPIO pins are user configurable. Module Generic (18) has all the GPIOs configurable.   </p> <p><code>Modules</code> shows supported modules</p>"},{"location":"Peripherals/#gpio","title":"<code>GPIO</code>","text":"<p>Assign a component to a GPIO.</p> <ul> <li><code>GPIO14 2</code> configures sensor AM2301 to GPIO14_    </li> <li><code>Backlog GPIO14 5; GPIO4 6</code> sets I<sup>2</sup>C SCL to GPIO14 and I<sup>2</sup>C SDA to GPIO4    Tasmota will auto-detect all connected and supported I<sup>2</sup>C devices. If you have conflicting I<sup>2</sup>C addresses see I2CDEVICES</li> </ul> <p><code>GPIOs All</code> shows list of all available components by name and index</p> <p>For a peripheral to show up you may need to power cycle your device instead of a soft restart.</p>"},{"location":"Peripherals/#template","title":"<code>Template</code>","text":"<p>Instead of using <code>Module</code> and <code>GPIO</code> you can define everything using <code>Template</code>. Read more...</p>"},{"location":"Peripherals/#additional-options","title":"Additional Options","text":""},{"location":"Peripherals/#measurement-units","title":"Measurement Units","text":"<p>Temperature units can be set to Celsius or Fahrenheit with <code>SetOption8</code> command.</p> <p>Pressure units can be set to hPa or mmHg with <code>SetOption24</code> command. </p>"},{"location":"Peripherals/#update-interval","title":"Update Interval","text":"<p>To change the update interval (TelePeriod) of MQTT messages change the <code>TelePeriod</code>. Default interval is 300 seconds but can be set between 10 and 3600 seconds.   <code>TelePeriod 10</code> will set the update interval to 10 seconds, so the sensor will update 6 times a minute.</p>"},{"location":"Peripherals/#peripheral-specific","title":"Peripheral Specific","text":"<p>Some peripherals offer, or even require, additional commands. See Sensor commands page for peripheral specific commands.</p> <p>Tip</p> <p>To make a link between the different naming schemes the Pin Definition overview in the ESP8266 wiki is quite helpful.</p>"},{"location":"Peripherals/#examples","title":"Examples","text":""},{"location":"Peripherals/#connect-switch","title":"Connect switch","text":"<p>If you take a Sonoff Basic and connect a switch between pin4 (GND) and pin5 (GPIO14) of the 5 pin programming header you now have a second switch connected to the device. You can set this through the module config page as option <code>Switch1 (9)</code> or from the command line with <code>gpio14 9</code>.</p> <p>See Buttons and Switches for more information.</p>"},{"location":"Peripherals/#connect-jack","title":"Connect jack","text":"<p>Instead of connecting a switch, you could connect a 4-pin 2.5mm jack, with the pins wired:  </p> Jack Pin ESP8266 tip 5 GPIO14 R1 no connection R2 1 GND R3 4 3.3V <p>You can then plug a sensor into the jack like you would to a Sonoff TH and define what sensor you have connected to GPIO14.</p>"},{"location":"Peripherals/#restrictions","title":"Restrictions","text":"<p>Danger</p> <p>If you can avoid it, don't use GPIOs: 0, 1, 2, 6-11, 15 and 16. That leaves 4, 5, 12, 13, 14 as GPIOs without any constraints. 3 being RX is also good to avoid (PWM is not working on this GPIO).</p> <p>Others can be used but you have to mind the constraints outlined in this document.</p>"},{"location":"Peripherals/#voltage-and-current","title":"Voltage and Current","text":"<p>Danger</p> <p>The ESP8266 is a 3.3V microcontroller, so its I/O operates at 3.3V as well. The pins are not 5V tolerant, applying more than 3.6V on any pin will release the magic smoke (fry the chip). The maximum current that can be drawn from a single GPIO pin is 12mA.</p>"},{"location":"Peripherals/#power-supply","title":"Power Supply","text":"<p>It is important to have a reliable power supply</p> <p>The power supplied to the device is one of the most important elements for stable device operation. Many devices on the market have barely adequate power supplies for normal operation. Connected peripherals may strain the ability of the power supply on the device to deliver appropriate power to all the components, both on-board as well as externally connected.</p> <p>Voltage regulation issues typically result in fatal exception fault code <code>1</code>. You must ensure that the device receives sufficient power (current and appropriate voltage level). Take into account the current that each wired component (e.g., sensor) will draw from the device itself. </p>"},{"location":"Peripherals/#electrical-considerations","title":"Electrical Considerations","text":"<p>When you switch a GPIO pin to an input and hang a long wire off of it, that wire can pick up stray signals and cause the voltage on the GPIO pin to vary. This can cause the system to think the switch has changed.</p> <p>To fix this, there are several things you can do.</p> <ol> <li>add a pull-up resistor</li> <li>add a bypass capacitor</li> <li>shielding on the wire</li> <li>use twisted pair wiring</li> </ol> <p>A pull-up resistor is a resistor connected between the GPIO pin and 3.3v. The exact value of this is not critical, 4.7k is a common value to use, as is 10k. This ensures that when the switch it open, the GPIO pin will go high.</p> <p>A bypass capacitor is a small (pF range) capacitor that is connected between the GPIO and ground. This provides a path for any radio signals that are picked up by the wire to go to ground and not confuse the system.</p> <p>Shielding or using twisted pair wiring are other ways to reduce the effect of radio signals on the system.</p> <p>Example for 10K Resistor (issue#2708)</p>"},{"location":"Peripherals/#esp8266-in-depth","title":"ESP8266 In Depth","text":"<p>Complete document available from https://tttapa.github.io/ESP8266/Chap04%20-%20Microcontroller.html</p>"},{"location":"Peripherals/#digital-io","title":"Digital I/O","text":"<p>Just like a normal Arduino, the ESP8266 has digital input/output pins (I/O or GPIO, General Purpose Input/Output pins). As the name implies, they can be used as digital inputs to read a digital voltage, or as digital outputs to output either 0V (sink current) or 3.3V (source current).</p>"},{"location":"Peripherals/#usable-pins","title":"Usable Pins","text":"<p>The ESP8266 and ESP8285 have 17 GPIO pins (0-16) but several are reserved or have constraints. Do not use any of the reserved pins. If you do, you might crash your program. On the ESP8266, six pins (GPIO 6 - 11) are used to interface the flash memory (the small 8-legged chip usually right next to the ESP8266). The ESP8285 has its flash memory integrated into the chip which frees up GPIO 9 and 10.</p> <p>GPIO 1 and 3 are used as TX and RX of the hardware Serial port (UART), so in most cases, you can\u2019t use them as normal I/O while sending/receiving serial data. GPIO 1, 2 and 3 will cause boot failure if LOW on boot - use with care.</p> <p></p>"},{"location":"Peripherals/#boot-mode-pins","title":"Boot Mode Pins","text":"<p>Some I/O pins have a special function during boot: They select 1 of 3 boot modes:</p> GPIO15 GPIO0 GPIO2 Mode 0V 0V 3.3V Uart Bootloader 0V 3.3V 3.3V Boot sketch (SPI flash) 3.3V x x SDIO mode (not used for Arduino) <p>Note: you don\u2019t have to add an external pull-up resistor to GPIO2, the internal one is enabled at boot.</p> <p>We have to be sure that these conditions are met by adding external resistors, or the board manufacturer of your board has added them for you. This has some implications, however:</p> <p>GPIO15 is always pulled low, so you can\u2019t use the internal pull-up resistor. You have to keep this in mind when using GPIO15 as an input to read a switch or connect it to a device with an open-collector (or open-drain) output, like I\u00b2C. GPIO0 is pulled high during normal operation, so you can\u2019t use it as a Hi-Z input. GPIO2 can\u2019t be low at boot, so you can\u2019t connect a switch to it. Internal pull-up/-down resistors GPIO 0-15 all have a built-in pull-up resistor, just like in an Arduino. GPIO16 has a built-in pull-down resistor.</p>"},{"location":"Peripherals/#pwm","title":"PWM","text":"<p>ESP8266 Unlike most Atmel chips (Arduino), the ESP8266 doesn\u2019t support hardware PWM, however, software PWM is supported on all digital pins. The default PWM range is 10-bits @ 1kHz, but this can be changed (up to &gt;14-bit@1kHz). Check Restrictions.</p> <p>ESP8266 has only software and supports 5 PWM channels. <code>PWM</code> and <code>PWMi</code> GPIOs are used in two modes depending on <code>SetOption15</code>: either as lights or as pure PWM.</p> <p>ESP32 has hardware PWM support, named <code>ledc</code>, up to 16 channels depending on CPU type. You can mix lights and pure PWM channels. The first 5 PWM channels are reserved for lights, unless <code>SetOption15 0</code>. For pure PWM GPIOs, you can assign any PWM number, they don't need to be continuous. For example you can use <code>PWM 1/2/3</code> for a 3-channel RGB light, and <code>PWM 6</code> &amp; <code>PWM 10</code> for pure PWM at the same time.</p> CPU type PWM channels ESP32 16 channels ESP32S2 8 channels ESP32C3 6 channels <p>Channels are assigned to GPIOs in a first-in-first-serve way, and PWM GPIOs are assigned first. If <code>ledc</code> channels are exhausted, an error will appear in logs.</p> <p>The following GPIOs use <code>ledc</code> PWM channels:</p> GPIO type Description <code>PWM</code> or <code>PWMi</code> <code>PWM 1..5</code> are used for lights, <code>PWM O6..11</code> are general purpose PWM. <code>LedPwmMode</code> Assigns a <code>Led</code> GPIO to a PWM channel <code>Buzzer</code> If <code>BuzzerPwm</code> is used <code>Backlight</code> PWM backlighting for displays <code>XCLK</code> Used as a clock generator for webcam <p>Example of <code>PWM</code> console output with 16 PWM assigned. By default PWM range is 0..1023.</p> <pre><code>RSL: RESULT = {\"PWM\":{\"PWM1\":410,\"PWM2\":286,\"PWM3\":286,\"PWM4\":0,\"PWM5\":0,\"PWM6\":0,\"PWM7\":0,\"PWM8\":0,\"PWM9\":0,\"PWM10\":0,\"PWM11\":0,\"PWM12\":0,\"PWM13\":0,\"PWM14\":0,\"PWM15\":0,\"PWM16\":0}}\n</code></pre>"},{"location":"Peripherals/#auto-phasing-of-pwm","title":"Auto-phasing of PWM","text":"<p>(ESP32 only) By default, phases of consecutive PWM channels are disaligned so that a PWM pulse starts when the pulse of the previous PWM channel ends. This helps distributing all pulses over time and has a smoother effect on the power supply.</p> <p>With auto-phasing: </p> <p>You can revert this with <code>SetOption134 1</code>; all phases are synced and all pulses start at the same moment. </p>"},{"location":"Peripherals/#h-bridge","title":"H-bridge","text":"<p>H-bridge is an electronic circuit that switches the polarity of a voltage applied to a load. It uses 2 PWM outputs to control the current sent to each pole.</p> <p>When auto-phasing is enabled, you can use 2 consecutive PWM channels to drive an H-bridge since PWM phases won't overlap - under the condition that the sum of the PWM duty cycles doesn't exceed <code>1023</code>.</p> <p>Important: you must always ensure that the sum of both PWM channels is less or equal than <code>1023</code>. Values over this threshold can damage the circuit, because the phases will overlap opening both poles of the H-bridge and shorting the power supply.</p>"},{"location":"Peripherals/#analog-input","title":"Analog Input","text":"<p>The ESP8266 has a single analog input, with an input range of 0 - 1.0V. If you supply 3.3V, for example, you will damage the chip. Some boards like the NodeMCU have an on-board resistive voltage divider, to get an easier 0 - 3.3V range. You could also just use a trimpot as a voltage divider.</p> <p>The ADC (analog to digital converter) has a resolution of 10 bits.</p>"},{"location":"Peripherals/#communication","title":"Communication","text":""},{"location":"Peripherals/#serial","title":"Serial","text":"<p>The ESP8266 has two hardware UARTS (Serial ports): UART0 on pins 1 and 3 (TX0 and RX0 resp.), and UART1 on pins 2 and 8 (TX1 and RX1 resp.), however, GPIO8 is used to connect the flash chip. This means that UART1 can only transmit data.</p> <p>UART0 also has hardware flow control on pins 15 and 13 (RTS0 and CTS0 resp.). These two pins can also be used as alternative TX0 and RX0 pins.</p>"},{"location":"Peripherals/#i2c","title":"I\u00b2C","text":"<p>ESP8266 doesn\u2019t have a hardware TWI (Two Wire Interface) but it is implemented in software. This means that you can use pretty much any two digital pins. By default, the I\u00b2C library uses pin 4 as SDA and pin 5 as SCL. (The data sheet specifies GPIO2 as SDA and GPIO14 as SCL.) The maximum speed is approximately 450kHz.</p>"},{"location":"Peripherals/#spi","title":"SPI","text":"<p>The ESP8266 has one SPI connection available to the user, referred to as HSPI. It uses GPIO14 as CLK, 12 as MISO, 13 as MOSI and 15 as Slave Select (SS). It can be used in both Slave and Master mode (in software).</p>"},{"location":"Peripherals/#gpio-overview","title":"GPIO Overview","text":"NodeMCU Labelled Pin GPIO# Function State Restrictions D3 0 Boot mode select 3.3V No Hi-Z D10 1 TX0 - Not usable during Serial transmission - Boot will fail if LOW at boot D4 2 Boot mode select TX1 3.3V (boot only) Don\u2019t connect to ground at boot time - boot will fail. Sends debug data at boot time D9 3 RX0 - Not usable during Serial transmission D2 4 SDA (I\u00b2C) - - D1 5 SCL (I\u00b2C) - - x 6 - 8 Flash connection x Not usable, and not broken out x 9, 10 Flash connection * Only available on the ESP8285 x 11 Flash connection x Not usable, and not broken out D6 12 MISO (SPI) - - D7 13 MOSI (SPI) - - D5 14 SCK (SPI) - - D8 15 SS (SPI) 0V Pull-up resistor not usable (extern pull down resistor) D0 16 Wake up from sleep - No pull-up resistor, but pull-down instead Should be connected to RST to wake up"},{"location":"Pinouts/","title":"Wi-Fi Module Pinouts","text":""},{"location":"Pinouts/#esp82xx-based","title":"ESP82xx Based","text":""},{"location":"Pinouts/#esp8266-and-esp8285","title":"ESP8266 and ESP8285","text":""},{"location":"Pinouts/#esp-12eesp-12f","title":"ESP-12E/ESP-12F","text":""},{"location":"Pinouts/#esp-12s","title":"ESP-12S","text":""},{"location":"Pinouts/#esp-wroom-02","title":"ESP-WROOM-02","text":""},{"location":"Pinouts/#lm1","title":"LM1","text":""},{"location":"Pinouts/#lm2","title":"LM2","text":""},{"location":"Pinouts/#tywe1s","title":"TYWE1S","text":""},{"location":"Pinouts/#tywe2s","title":"TYWE2S","text":""},{"location":"Pinouts/#tywe2l","title":"TYWE2L","text":""},{"location":"Pinouts/#tywe3s","title":"TYWE3S","text":""},{"location":"Pinouts/#tywe3l","title":"TYWE3L","text":""},{"location":"Pinouts/#tylc4","title":"TYLC4","text":""},{"location":"Pinouts/#tylc5","title":"TYLC5","text":""},{"location":"Pinouts/#tywe5p","title":"TYWE5P","text":""},{"location":"Pinouts/#psf-b85psf-b01psf-b04","title":"PSF-B85/PSF-B01/PSF-B04","text":""},{"location":"Pinouts/#esp8266-s3","title":"ESP8266-S3","text":""},{"location":"Pinouts/#wt8266-s1","title":"WT8266-S1","text":""},{"location":"Pinouts/#449a-ecoplugs","title":"449A-ECOPLUGS","text":"<p> Datasheet</p>"},{"location":"Pinouts/#cuco-z0-v11-used-by-gosund","title":"CUCO-Z0-V1.1 (Used by Gosund)","text":"Overview Front Back"},{"location":"Pinouts/#m1p_v10-used-by-shellyplugus","title":"M1P_V1.0 (Used by ShellyPlugUS)","text":"Overview Front &amp; Back ShellyPlugUS FrontBack  <p>Note: the TX and RX labels on the ShellyPlugUS circuitboard are swapped. These diagrams show TX/RX properly labeled.</p>"},{"location":"Pinouts/#esp32-based","title":"ESP32 Based","text":""},{"location":"Pinouts/#esp32-cam","title":"ESP32-CAM","text":""},{"location":"Pinouts/#esp32-s","title":"ESP32-S","text":""},{"location":"Pinouts/#esp32-solo-1","title":"ESP32-SOLO-1","text":""},{"location":"Pinouts/#esp32-wrover","title":"ESP32-WROVER","text":"<p>Includes ESP32-WROVER-B and ESP32-WROVER-BI</p> <p></p>"},{"location":"Pinouts/#esp32-wroom-32x","title":"ESP32-WROOM-32x","text":""},{"location":"Pinouts/#esp32-s_1","title":"ESP32-S","text":""},{"location":"Pinouts/#esp-12k","title":"ESP-12K","text":""},{"location":"Pinouts/#jw-02-8285","title":"JW-02-8285","text":""},{"location":"Pinouts/#jw-03-8285","title":"JW-03-8285","text":""},{"location":"Pinouts/#esp32-c3","title":"ESP32-C3","text":""},{"location":"Pinouts/#esp-c3-12f","title":"ESP-C3-12F","text":""},{"location":"Pinouts/#esp-c3-32s","title":"ESP-C3-32S","text":""},{"location":"Pinouts/#esp-c3-13","title":"ESP-C3-13","text":""},{"location":"Pinouts/#esp-c3-01m","title":"ESP-C3-01M","text":""},{"location":"Pinouts/#jw-2s-esp32c3","title":"JW-2S-ESP32C3","text":""},{"location":"Pinouts/#devices","title":"Devices","text":""},{"location":"Pinouts/#sonoff-mini","title":"Sonoff Mini","text":""},{"location":"Pinouts/#sonoff-th","title":"Sonoff TH","text":""},{"location":"Pinouts/#sonoff-basic","title":"Sonoff Basic","text":""},{"location":"Pinouts/#digoo-dg-sp202-oxaoxe-nx-sp202","title":"Digoo DG-SP202 / OxaOxe NX-SP202","text":"<p> (Found out by tracing the PCB copper tracks of the unknown ESP module. Not verified, except GPIO0, RX, TX, Vcc and GND which have successfully been used for flashing.)</p>"},{"location":"PlatformIO-CLI/","title":"PlatformIO CLI","text":"<p>How to flash the Tasmota firmware onto a device using the <code>platformio</code> command line interface. This manual was tested on Ubuntu 17.10.</p>"},{"location":"PlatformIO-CLI/#prerequisites","title":"Prerequisites","text":""},{"location":"PlatformIO-CLI/#install-python-and-pip","title":"Install Python and PIP","text":"<p><code>sudo apt-get install python-pip</code></p>"},{"location":"PlatformIO-CLI/#install-platformio-cli","title":"Install PlatformIO CLI","text":"<p><code>sudo pip install -U platformio</code></p>"},{"location":"PlatformIO-CLI/#download-the-tasmota-source-code","title":"Download the Tasmota source code","text":"<p>Either download the latest Tasmota Source code from https://github.com/arendst/Tasmota/ and extract it or clone the Git repository:  </p> <p><code>git clone https://github.com/arendst/Tasmota.git</code></p>"},{"location":"PlatformIO-CLI/#select-the-environment","title":"Select the environment","text":"<p>The default environment configuration can be used to easily generate Tasmota firmware variants (tasmota, sensors, display, etc.). If you're not sure which binary is the right one for you, consult the builds table or just start with <code>tasmota.bin</code>. To build and/or flash exactly one of these, use the <code>-e</code> command line argument (e.g., <code>-e tasmota-sensors</code>). </p>"},{"location":"PlatformIO-CLI/#compile-and-upload","title":"Compile and upload","text":"<p>Once all the prerequisites are in place, compiling and uploading is one simple command. Execute this from within the <code>Tasmota</code> source code directory:  </p> <p><code>platformio run -e &lt;variant&gt; --target upload --upload-port &lt;port&gt;</code></p> <p>Just make sure to replace <code>&lt;port&gt;</code> with the actual serial port your device is connected to. On Windows these interfaces are named COM ports (COM1, COM2, etc.). On Linux these interfaces are named TTY ports (e.g., /dev/ttyUSB0, /dev/ttyUSB1, etc.)].</p> <p>Depending on your configuration your user account may need to be in the <code>dialout</code> group.</p>"},{"location":"PlatformIO/","title":"PlatformIO","text":"<p>How to setup and configure PlatformIO for Tasmota compilation and upload.</p>"},{"location":"PlatformIO/#download-platformio","title":"Download PlatformIO","text":"<p>Download PlatformIO from https://platformio.org/</p>"},{"location":"PlatformIO/#install-platformio","title":"Install PlatformIO","text":"<p>Install PlatformIO to a known folder.</p>"},{"location":"PlatformIO/#download-tasmota","title":"Download Tasmota","text":"<p>Download the latest Tasmota Source code from https://github.com/arendst/Tasmota and unzip to another known folder.</p>"},{"location":"PlatformIO/#compile-tasmota","title":"Compile Tasmota","text":"<p>Choose the Tasmota variant from the Platformio menu.</p>"},{"location":"PlatformIO/#upload-tasmota","title":"Upload Tasmota","text":"<p>PlatformIO uses the serial interface to upload the firmware to your device. On Windows these interfaces are named COM ports (COM1, COM2, etc.). On Linux these interfaces are named TTY ports (e.g., /dev/ttyUSB0, /dev/ttyUSB1, etc.).</p>"},{"location":"PlatformIO/#put-device-into-programming-mode","title":"Put device into programming mode","text":"<p>When performing a firmware upload do not connect the device to AC. Use a 3.3v DC power supply such as that provided by your serial programming adapter.</p> <p>Put the device in programming mode by grounding pin GPIO0 and then applying power (e.g., connecting your computer to the serial adapter). Grounding pin GPIO0 can often be achieved by pressing the button on the device or using a wire between GPIO0 and GND if the button is not available. Deviations may apply.</p>"},{"location":"PlatformIO/#perform-serial-upload","title":"Perform serial upload","text":"<p>Select <code>Upload</code> from the menu.</p> <p>NOTE: For a proper device initialization after first firmware upload power down and power up the device.</p>"},{"location":"Power-Monitoring-Calibration/","title":"Power Monitoring Calibration","text":"<p>You need to calibrate your power monitoring device as correct measurements are influenced by hardware and timing differences.</p> <p>Warning</p> <p>This procedure does not apply to CT Power modules using ADC. For those, see <code>AdcParam</code></p> <ul> <li>Your power monitoring capable device flashed with Tasmota and configured with the correct module/template that supports power monitoring</li> <li>An AC capable calibrated multi-meter</li> <li>A known wattage load with a power factor as close to 1 as possible (e.g., a resistive load) for best results  </li> </ul> <p>Note</p> <p>A resistive load device is any device which draws a constant amount of power. For example, an incandescent or halogen light bulb         (best choice since their power draw is declared on them). An electric kettle, heater, or blow dryer are also options but you will       also need a power meter since the power draw could vary.  </p> <p>Danger</p> <p>Do not use switch mode driven devices such as LED lamps, computer equipment, or inductive/capacitive devices such as motors!</p> <ul> <li>(optional) A calibrated power meter (a.k.a Kill-a-Watt) or AC multi-meter</li> </ul>"},{"location":"Power-Monitoring-Calibration/#setup","title":"Setup","text":"<ul> <li>Connect the load (e.g., a 60W incandescent light bulb) to your device  </li> <li>(optional) Plug your load into the Kill-a-Watt</li> <li>Open two Tasmota web UI browser windows for your power monitoring device:</li> <li>Click on Console in one browser window</li> <li>Keep the other on the main page to view the Power telemetry data</li> <li>Turn the power on to your device. Be sure to turn the output on so the load is powered on as well</li> <li>Optionally increase resolution with commands <code>Voltres 1</code> and/or <code>WattRes 2</code></li> <li>Wait a few seconds for the readings to stabilize</li> </ul>"},{"location":"Power-Monitoring-Calibration/#calibration-procedure-tasmota-v14201-and-up","title":"Calibration Procedure - Tasmota v14.2.0.1 and up","text":"<p>This procedure calculates current calibration based on measured voltage and known or measured load.</p> <ol> <li> <p>Verify the Voltage reading in the web UI. Adjust the voltage offset if needed (in Volts): <code>VoltageSet &lt;voltage&gt;</code> Replace <code>&lt;voltage&gt;</code> with your standard voltage or with reading on your multi-meter if you have one. Your voltage will vary depending on the electrical standards and your electrical grid </p> </li> <li> <p>Verify the Power and Current readings (optionally with the power meter as well) for the expected wattage and amperage. Adjust both power and current offsets if needed (in Watts and Volts): <code>PowerSet 60.0, &lt;voltage&gt;</code> If you're using something other than a 60W bulb, enter your load's power rating.    Replace <code>&lt;voltage&gt;</code> with your standard voltage or with reading on your multi-meter if you have one. Your voltage will vary depending on the electrical standards and your electrical grid </p> </li> <li> <p>Confirm the validity of your calibration process checking <code>Power Factor</code> from the web UI which should be as close as possible to <code>1.00</code>. In theory resistive loads will always provide a power factor of 1.00. If that is not the case, we recommend you repeat the calibration process and make sure everything was done correctly. </p> </li> </ol>"},{"location":"Power-Monitoring-Calibration/#calibration-procedure-old","title":"Calibration Procedure - Old","text":"<ol> <li> <p>Verify the Power reading in the web UI (optionally with the power meter as well) for the expected wattage. Adjust the power offset if needed (in Watts): <code>PowerSet 60.0</code> If you're using something other than a 60W bulb, enter your load's power rating</p> </li> <li> <p>Verify the Voltage reading. Adjust the voltage offset if needed (in Volts): <code>VoltageSet &lt;voltage&gt;</code> Replace <code>&lt;voltage&gt;</code> with your standard voltage or with reading on your multi-meter if you have one. Your voltage will vary depending on the electrical standards and your electrical grid </p> </li> <li> <p>Verify the Current reading by calculating current value (amperage) using this formula: P<sub>(W)</sub>/V<sub>(V)</sub>=I<sub>(A)</sub>. Adjust the current offset if needed (in milliAmps (1000mA = 1A)): <code>CurrentSet &lt;current&gt;</code> Replace <code>&lt;current&gt;</code> with your calculated value (in milliAmps) </p> </li> </ol> <p><code>CurrentSet</code> calculation:   </p> <p>Watts / Volts = Amperes</p> <p>and thus</p> <p>(1000 * Watts) / Volts = milliAmperes</p> <p>Example</p> <p>Consider a power usage of 60W at a voltage of 240V. Then the current in milliAmps can be calculated as</p> <p>(1000 * 60) / 240 = 250.0</p> <ol> <li>Confirm the validity of your calibration process checking <code>Power Factor</code> from the web UI which should be as close as possible to <code>1.00</code>. In theory resistive loads will always provide a power factor of 1.00. If that is not the case, we recommend you repeat the calibration process and make sure everything was done correctly. </li> </ol>"},{"location":"Power-Monitoring-Calibration/#fine-tuning","title":"Fine Tuning","text":"<p>This procedure requires the use of a calibrated power meter or AC multi-meter. </p> <p>Commands <code>CurrentCal</code>, <code>PowerCal</code> and <code>VoltageCal</code>  allow fine tuning of the power calibration.  </p> <p>Repeat the procedure below for each of the readings: Current, Power, and Voltage using the corresponding calibration command (<code>CurrentCal</code>, <code>PowerCal</code>, and <code>VoltageCal</code> respectively). Take note that the offset ranges vary for each command.  </p> <ol> <li>Check the reading using a multi-meter</li> <li>Compare it with the reading on the Tasmota web UI</li> <li>If there is an observed difference, change the offset value by issuing the calibration command in the Console (e.g., <code>PowerCal 10000</code>)</li> <li>Adjust the offset value up or down until the readings on the multi-meter and the web page are as close as possible</li> </ol> <p>The <code>CurrentCal</code>, <code>PowerCal</code>, <code>VoltageCal</code> commands accept values up to 32000. If the offset values you would like to specify are larger, you may have configured an incorrect power monitoring chip in the template. For example: if you specify the BL0937 (134) while you actually have an HLW8012 (133). Change the template to proper power monitoring chip to fix.</p>"},{"location":"Power-Monitoring-Calibration/#known-issues","title":"Known Issues","text":"<p>Power monitoring chips such as HLW8032 (Blitzwolf SHP5) and CSE7766 (Sonoff S31, Sonoff POW R2) occasionally report invalid power measurements for load values below 5W. During this situation it sometimes reports a valid load. By setting SetOption39 to <code>128</code> (default) it must read at least 128 invalid power readings before reporting there is no load.</p> <p>To discard all loads below 6W simply set <code>SetOption39 1</code> (<code>0</code> will reset to default on next restart) so it will report no load below 6W.</p>"},{"location":"PowerOnState/","title":"PowerOnState","text":""},{"location":"PowerOnState/#poweronstate-functionality","title":"PowerOnState Functionality","text":"Command Description <code>PowerOnState</code> Control relay state after powering up the device. <code>0</code> / <code>OFF</code> = keep relay(s) OFF after power up  <code>1</code> / <code>ON</code> = turn relay(s) ON after power up  <code>2</code> / <code>TOGGLE</code> = toggle relay(s) from last saved state  <code>3</code> = switch relay(s) to their last saved state (default) <code>4</code> = turn relay(s) ON and disable further relay control  <code>5</code> = after a <code>PulseTime</code> period turn relay(s) ON (acts as inverted <code>PulseTime</code> mode) <p>The <code>PowerOnState</code> device configuration parameter is applied when the device is initially powered up. It does not apply to device warm restarts.</p> <p>To lock the power state in its current setting you can use <code>PowerLock</code> followed by the number of relay you want to lock. The value <code>0|1</code> defines the state <code>locked|unlocked</code>. The <code>PowerOnState</code> always has a higher priority than the <code>PowerLock</code>.</p> <p>Tasmota tracks the relays' state in a masked variable. A set bit (<code>1</code>) means the corresponding relay is turned ON. The associated GPIO state will be high or low according to whether the relay is configured as <code>Relay&lt;x&gt;</code> or <code>Relay&lt;x&gt;i</code>. Every command for setting the relay state is \"recorded\" in the variable and saved to flash (depending on <code>SetOption0</code>). The setting of the relay GPIO is then executed.</p> <p>After a warm restart, the mask variable is re-initialised with the saved state from flash and the relay(s) set to that state. <code>PowerOnState</code> is not executed. During any a device restart, the relay power feedback state is scanned according to the setting of <code>SetOption63</code>. Scanning the relay state attempts to READ from GPIOs that are configured as relays, i.e., OUTPUTS! The result will not always be what is expected as it depends on how the device relays are wired to the GPIO. <code>SetOption63</code> was introduced to make this scan optional. With <code>SetOption63</code> set to <code>0</code> (the default), each GPIO assigned as a <code>Relay&lt;x&gt;</code> or <code>Relay&lt;x&gt;i</code> is scanned using 'digitalRead'. The mask variable will be updated with the detected values. The state of the relay(s) will not be changed. READING from an OUTPUT GPIO may result in the mask value being different from the state the relays are in. Thus, <code>SetOption63</code> was introduced to disable the startup scan for devices where the scan leads to undefined results.</p> <p><code>SetOption63</code> is executed after <code>PowerOnState</code> or restart initialization.</p>"},{"location":"Project-AM312-and-Sonoff-R2/","title":"Project AM312 and Sonoff R2","text":"<p>This use case represents a method to use AM312 as a \"wave hand toggle\" (for under-cabinet kitchen LED). Please note that this solution isn't working in 100% (this sensor has a detection range of a few meters, to decrease the range you can remove the lens from the sensor but still it will pick up movement from 50 cm. You can create the Tasmota rule that will disable AM312 toggle action when the light is on and turn off the power after a few minutes. The gesture sensor APDS-9960 should work better for \"hand-wave\" toggle.</p>"},{"location":"Project-AM312-and-Sonoff-R2/#wiring-for-sonoff-basic-r2","title":"Wiring for Sonoff Basic R2","text":"<p>As the R2 version doesn't have GPIO14 exposed you can use GPIO3 (RX) as the AM312 data pin. GPIO2 goes high during the boot (it would toggle the switch then).</p> AM312 ESP8255 device VCC 3V3 or VCC VOUT GPIO3 (RX) GND GND <p>Remember to remove the lens to lower the sensitivity of the sensor.</p>"},{"location":"Project-AM312-and-Sonoff-R2/#configuration","title":"Configuration","text":"<ol> <li>Go to IP of the device, next Configuration --&gt; Configure Module --&gt; set \"GPIO3 Serial In\" to \"Switch1 (9)\"</li> <li>Go to Console and type \"SwitchMode 4\" (detailed description of SwitchModes) to enable toggle switch type.</li> <li>Set rule to turn off light after X amount of seconds (mentioned workaround): <pre><code>rule1 on Switch1#State=2 do backlog Power1 1; RuleTimer1 180 endon on Rules#Timer=1 do backlog Power1 0 endon\nrule1 1\n</code></pre></li> </ol> <p>Rule explanation: <code>Switch1#State=2</code> - fire the event when switch1 is toggled,  <code>Power1 1</code> - turn on power,  <code>RuleTimer1 180</code> - set Timer1 to 180 seconds and start counting,  <code>Rules#Timer=1</code> - fire the event when Timer1 has stopped,  <code>Power1 0</code> - turn off power.</p> <p>This rule will turn off the light after 3 minutes, if the movement will be detected prior, the timer will be restarted and will count the time from the beginning.</p> <ol> <li>Instead of point 3, you can set below rules in order to ignore the second and next movements. It will just turn off the power after 3 minutes. <pre><code>rule1 on Switch1#State=2 do backlog Power1 1; RuleTimer1 180; Rule1 0; Rule2 1 endon\nrule2 on Rules#Timer=1 do backlog Power1 0; Rule1 1; Rule2 0 endon on Switch1#State=2 do break\nbacklog rule1 1; rule2 0\n</code></pre></li> </ol> <p>Rules explanation: <code>rule1 on Switch1#State=2 do backlog Power1 1; RuleTimer1 180; Rule1 0; Rule2 1 endon</code>: <code>Switch1#State=2</code> - fire the event when switch1 is toggled,  <code>Power1 1</code> - turn on power,  <code>RuleTimer1 180</code> - set Timer1 to 180 seconds and start counting,  <code>Rule1 0</code> - disable Rule1,  <code>Rule2 1</code> - enable Rule2.</p> <p><code>rule2 on Rules#Timer=1 do backlog Power1 0; Rule1 1; Rule2 0 endon on Switch1#State=2 do break</code>: <code>Rules#Timer=1</code> - fire the event when Timer1 has stopped <code>Power1 0</code> - turn off power <code>Rule1 1</code> - enable Rule1 <code>Rule2 0</code> - disable Rule2 <code>Switch1#State=2 do break</code> - ignore toggling</p>"},{"location":"Projector/","title":"LCD/DLP projector Serial Control","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>:</p> <pre><code>#define USE_PROJECTOR_CTRL\n// _Mandatory:_ choose the communication protocol for your projector. define only one of them:\n#define USE_PROJECTOR_CTRL_NEC\n#define USE_PROJECTOR_CTRL_OPTOMA\n#define USE_PROJECTOR_CTRL_ACER\n// _Optional:_ set the Relay that powers your device (default is 1)\n#define PROJECTOR_CTRL_PWR_BY_RELAY 1  //the relay that powers the projector\n// _Optional:_ set the baudrate to communicate to your device (default is 9600):\n#define PROJECTOR_CTRL_SERIAL_BAUDRATE 9600\n// _Optional:_ enable debugging messages:\n#define DEBUG_PROJECTOR_CTRL\n// _Optional:_ Add Serial to TCP Bridge to your build if you want to play with your projector's communication protocol over network connection. Useful for ASCII protocol testing. Needs a different GPIO configuration and is completely independent to this module:\n#define USE_TCP_BRIDGE\n</code></pre>"},{"location":"Projector/#description","title":"Description","text":"<p>This driver simulates an additional relay in your Tasmota device. If you have N physical relays and you configure GPIO pin functions <code>DLP Tx</code> and <code>DLP Rx</code> you'll see relay (N+1) after reboot. The two GPIO pins will be used for serial communication with your LCD or DLP projector. The communication protocol is unique for each manufacturer (compile-time option). The driver polls the projector's state periodically and updates the fake relay state. When you toggle the fake relay, serial commands are sent to the projector to power it up or down. While the projector is running, the driver prevents to switch off the real relay that feeds the projector. This protects the lamp of the projector (needs to be cooled down before power is cut from the device).</p>"},{"location":"Projector/#supported-projectors","title":"Supported Projectors","text":"<ul> <li>NEC projectors - tested with NEC V300W</li> <li>OPTOMA projectors - not tested yet / report your results!</li> <li>Acer projectors - tested with Acer P1500 &amp; H5360BD</li> </ul> <p>Fixes and definitions for further manufacturers should go to <code>tasmota\\xdrv_53_projector_ctrl.h</code></p>"},{"location":"Projector/#physical-connection","title":"Physical Connection","text":"<p>Connect your Tasmota GPIO pins (3.3V TTL level) to a MAX3232 interface (cheap items on internet sales). Such interface changes TTL signals to proper RS232 levels. There are 4 wires on TTL side (Vcc, GND, Rx and Tx) and 3 wires on RS232 side (GND, Tx and Rx). A wire jumper between pins 7(RTS) and 8(CTS) may be needed in DSUB9 connector going to projector.</p> <p></p> <p></p> <p></p>"},{"location":"Projector/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIO1 to <code>DLP Tx</code></li> <li>GPIO3 to <code>DLP Rx</code></li> </ol> <p>Replace GPIO1/GPIO3 with your scenario. Use command <code>Weblog 3</code> to see extended logging of serial communication in Console.</p>"},{"location":"Projector/#projector-configuration","title":"Projector Configuration","text":"<p>Check your projector settings concerning Serial port. It must match Tasmota settings eg. 9600 8N1. Some models have \"ID number\" feature to allow several projectors in one room. The control commands in Tasmota contain ID 0. Please switch off the \"ID\" control completely or set the ID to 0.</p> <p>Since Acer H5360BD does not offer a simple RS2332 port setup is as follows: </p>"},{"location":"Python-HTTP-OTA-Server/","title":"Python HTTP OTA Server","text":""},{"location":"Python-HTTP-OTA-Server/#introduction","title":"Introduction","text":"<p>Tasmota firmware can be upgraded using 'Firmware Upgrade' option on the main menu and selecting an OTA URL to fetch (and flash) a new firmware on the device.  </p> <p> </p> <p>To use this feature, firmware files need to be hosted on an HTTP web server (e.g., http://ota.tasmota.com/tasmota). Alternatively, users can to deploy a local HTTP server with Apache, Nginx, or other software solutions.  </p> <p>Python makes available the Flask (micro)framework that can be used at different levels of complexity due to its modular architecture. A simple HTTP server (hello-world) can be deployed with only six lines of Python code.  </p> <p>A Flask application to offer Tasmota firmware images for OTA upgrades is available as part of the available tools.  </p>"},{"location":"Python-HTTP-OTA-Server/#requirements","title":"Requirements","text":"<ul> <li>Switching to superuser privileges and installing additional packages (and libraries) on a Linux/Windows box.</li> <li>Python3 (follow instruction related to your operating system)</li> <li>netifaces and Flask libraries - can be installed by 'pip' package manager:   <pre><code>pip install netifaces flask\n</code></pre></li> </ul>"},{"location":"Python-HTTP-OTA-Server/#instructions","title":"Instructions","text":"<p>Copy Tasmota firmware binary files in 'tools/fw' directory. A set of pre-built firmware binary files can be downloaded from the Tasmota repository.</p> <p>Configure your Tasmota device with your firmware server URL: <pre><code>Firmware Upgrade -&gt; Upgrade by web server:\n     http://&lt;ip_address&gt;:5000/tasmota.bin\n</code></pre></p> <p>or use the following command: <pre><code>Backlog OTAURL http://&lt;ip_address&gt;:5000/tasmota.bin; Upgrade 1\n</code></pre></p>"},{"location":"Python-HTTP-OTA-Server/#usage","title":"Usage","text":"<p>To start Python HTTP server: <code>python fw-server.py -d &lt;net_iface&gt;   (default: eth0)</code>   or <code>python fw-server.py -i &lt;ip_address&gt;</code> </p> <p>Example: <code>python fw-server.py -d wlan0</code>   or <code>python fw-server.py -i 192.168.1.1</code> </p> <p>Note: On Windows it is advisable to use '-i' option because Windows uses UUID naming for network interfaces that are difficult to enter.  </p>"},{"location":"Python-HTTP-OTA-Server/#linux-server","title":"Linux server:","text":"<p>If your MQTT broker is hosted on a local server, you may want your firmware web server used for Tasmota OTA updates to reside on the same server. Follow these steps to create it as a service: - Copy the python script on the Linux server: <pre><code>$ sudo su\n# mkdir /srv/tasmota/fw_server/fw\n# cd /srv/tasmota/fw_server\n# wget https://github.com/arendst/Tasmota/tree/development/tools/fw_server/fw-server.py\n</code></pre> - Create a new file named <code>tasmota.service</code> in <code>/etc/systemd/system/</code> and paste these lines (replace <code>XYZ</code> by your username): <pre><code>[Unit]\nDescription=Local OTA server for Tasmota\nRequires=network.target\nAfter=network.target multi-user.target\n\n[Service]\nUser=XYZ\nType=idle\nExecStart=/usr/bin/python /srv/tasmota/fw_server/fw-server.py -d wlan0\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> - User rights:   The files and directories have been created as <code>root</code> but this is not desirable. Invoke the following commands (replace the four instances of <code>XYZ</code> by your username): <pre><code># chown -hR XYZ:XYZ /srv/tasmota\n# chown XYZ:XYZ /etc/systemd/system/tasmota.service\n</code></pre> - Run the service: <pre><code># systemctl daemon-reload\n# systemctl enable tasmota.service\n# systemctl start tasmota.service\n</code></pre></p> <p>If the server is rebooted, the service will automatically restart. - Check that the service is active and running: <pre><code># systemctl status tasmota.service\n</code></pre> - Test the server:   Copy new firmware files to the <code>/srv/tasmota/fw_server/fw</code> folder. Ensure that they have <code>XYZ</code> user rights in a similar fashion as shown above. You can use <code>scp</code> or a <code>samba</code> share.  Copy the firmware files into the folder (<code>firmware.bin</code> in the example below).  </p> <p>The service can be tested from any browser by issuing the address <code>http://&lt;ip_address&gt;:5000/firmware.bin</code> were <code>&lt;ip_address&gt;</code> is the address of the Linux server.  </p> <ul> <li> <p>If the web server becomes unresponsive:   After a power failure, your wlan0 IP may resolve to an invalid value like <code>169.254.5.153</code> because your LAN gateway was not ready when the web server restarted. If you notice that the OTA mechanism is broken, try to download the file from a browser. If you can't, then restart the service and check the status. Log in using a terminal session and enter: <pre><code>$ sudo su\n# systemctl restart tasmota.service\n# systemctl status tasmota.service\n</code></pre>   If you recognize the IP address of your server on the last line of the status output, the web server should be OK. You can confirm that your OTA web server is restored by trying to download a file using your web browser.  </p> </li> <li> <p>PlatformIO:   If you want PlatformIO to be able to upload your compiled binaries to the local server, you'll still have to setup <code>ssh</code> with <code>ssh-keygen</code> in order to use the Tasmota script <code>pio/sftp-uploader.py</code> without a password.</p> </li> </ul>"},{"location":"RCWL-0516/","title":"RCWL-0516 microwave radar motion sensor","text":"<p>module uses a \u201cmicrowave Doppler radar\u201d technique to detect moving objects. Its advantage over traditional PIRs is that it can detect presence through obstacles with a sensing distance of 3m average in real life conditions.</p> <p> </p>"},{"location":"RCWL-0516/#configuration","title":"Configuration","text":""},{"location":"RCWL-0516/#wiring","title":"Wiring","text":"RCWL-0516 ESP GND GND VIN 5V OUT GPIOx"},{"location":"RCWL-0516/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>Switch1 (9)</code> </li> </ul> <p></p> <p>A configured RCWL-0516 will not appear in the web UI, only the console displays the status of Switch1 as <code>POWER</code>.</p> <p></p> <p>Continue to use RCWL-0516 just as any other PIR in Tasmota.</p> <p>Buy from AliExpress Features of RCWL-0516 RCWL-0516 Datasheet RCWL-0516 GitHub </p>"},{"location":"RDM6300/","title":"RDM6300 RFID reader","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_RDM6300 \n#define USE_RDM6300         // Add support for RDM6300 125kHz RFID Reader (+0k8)\n#endif\n</code></pre></p> <p>RDM6300 125KHz cardreader mini-module is designed for reading code from 125KHz card compatible read-only tags and read/write card.</p>"},{"location":"RDM6300/#warning","title":"Warning","text":"<p>There seems to be an issue with some card readers!(the cheap ones?) These output some fake/ghost readings that look like valid card numbers and validate thru the XOR method but are not real. This is confirmed by multiple users. Please see details in issue #9952. There seem to not be issues yet with SeeedStudio Grove 125Khz Reader or RDM630</p>"},{"location":"RDM6300/#configuration","title":"Configuration","text":"<p>Sensor uses serial interface for communication.</p>"},{"location":"RDM6300/#wiring","title":"Wiring","text":"RDM6300 ESP TX GPIOx RX GPIOy Pin3 unused GND GND VCC 5V"},{"location":"RDM6300/#tasmota-settings","title":"Tasmota Settings","text":"<p>Update 12.10.2020: Seems there is a new driver and you can use RDM6300 RX instead of the SerBr Tx and SerBr Rx. This also seems to show the last card read in the management interface. As a note, the card number that comes from the SerBr was 12 chars and the RDM6300 one has only 8, being stripped by the first 2 and last 2 chars.</p> <p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>SerBr Tx (71)</code></li> <li>GPIOy to <code>SerBr Rx (72)</code></li> </ol> <p>If the RFID Tag is held in front of the Antenna the reader starts sending the Tag ID. The Tag Id is prefaced with a 0x02 and the end is delimited with a 0x03. If the reader reads the tag multiple times you would get one line with multiple times the Tag ID. For this to separate you can add a SerialDelimiter of 0x03. This will split the result from the serial into several single mqtt messages. But (probably) all the messages wil be prepended with a binary 0x02.</p> <p>Set SerialDelimiter to 3 <pre><code>SerialDelimiter 3\n</code></pre></p>"},{"location":"RDM6300/#openhab","title":"OpenHab","text":"<p>sonoff-rfid.items: <pre><code>// tele/sonoff-rfid-1/RESULT {\"SSerialReceived\":\"01020304FAFA\"}\nString RFID_1      \"RFID [%s]\"\n      {mqtt=\"&lt;[broker:tele/sonoff-rfid-1/RESULT:state:JSONPATH($.SSerialReceived)]\"}\n</code></pre></p>"},{"location":"RDM6300/#breakout-boards","title":"Breakout Boards","text":""},{"location":"RF-Protocol/","title":"RF Communication","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_RC_SWITCH\n#define USE_RC_SWITCH         // Add support for RF transceiver using library RcSwitch (+2k7 code, 460 iram)\n#endif\n</code></pre></p> <p>This guide does not apply to Sonoff RF Bridge specific commands</p> <p>Tasmota uses the rc-switch library to decode RF codes. Supported hardware depends on rc-switch library support only.</p>"},{"location":"RF-Protocol/#sending-rf-codes","title":"Sending RF Codes","text":"<p>Send an RF control code as a decimal or hexadecimal string in a JSON payload. An inexpensive RF receiver such as a STX882 can be connected to a device running Tasmota. In order to send RF data you need to configure the connected GPIO as <code>RFSend (105)</code> </p> Command Parameters RfSend <code>&lt;value&gt;</code> = code decimal or JSON. Data value is required and can be decimal or hexadecimal (using the 0x prefix), other values are optional.JSON<code>{\"Data\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Protocol\":&lt;value&gt;,\"Pulse\":&lt;value&gt;}</code><code>\"Data\":\"&lt;value&gt;\"</code> = hexadecimal code<code>\"Bits\":&lt;value&gt;</code> = required number of data bits (default = <code>24</code>)<code>\"Protocol\":&lt;value&gt;</code> = protocol number (default = <code>1</code>)<code>\"Repeat\":&lt;value&gt;</code> = repeat value (default = <code>10</code>)<code>\"Pulse\":&lt;value&gt;</code> = pulse value (<code>350</code> = default for protocol 1)\u2003e.g., <code>RfSend {\"Data\":\"0x7028DC\",\"Bits\":24,\"Protocol\":1,\"Pulse\":238}</code>Decimal<code>data, bits, protocol, repeat, pulse</code> \u2003e.g., <code>RfSend 7350492, 24, 1, 10, 238</code> or <code>RfSend 0x7028DC, 24, 1, 10, 238</code> <p>If you send only the \"Data\" value in decimal or hexadecimal other values will be sent as default.</p> <p>Example</p> <p><code>RfSend 123456</code></p> <p>will be sent as <code>{\"Data\":\"0x1E240\",\"Bits\":24,\"Protocol\":1,\"Pulse\":351}</code></p> <p>When sending decimal formatted command you need to follow the pattern otherwise a part of the command will be ignored. </p> <p>Example</p> <p><code>RfSend 123456, 24, 1, 238</code> is missing the <code>repeat</code> value so the last number intended as pulse value won't be sent</p>"},{"location":"RF-Protocol/#receiving-rf-codes","title":"Receiving RF Codes","text":"<p>An inexpensive RF receiver such as a SRX882 can be connected to a device running Tasmota. Configure the GPIO connected to Data pin on the RF receiver as 'RFrecv (106)'.  Once you have identified the protocols that you want to receive data on , you can enable only those protocols .  The RfProtocol command will only work if you have set a pin function to rfrecv</p> Command Parameters RfProtocol <code>&lt;value&gt;</code> <code>&lt;value&gt;</code> 0 .. 0x7FFFFFFFF  or 'A' for All :: This Sets the Enabled Protocol Mask Value RfProtocol<code>&lt;idx&gt; &lt;value&gt;</code> <code>&lt;idx&gt;</code> 1 .. 35 <code>&lt;value&gt;</code> 0 or 1 :: This Disables or Enables a Specific Protocol <p>Example</p> <p><code>RfProtocol 5</code>  \u00a0 \u00a0 \u00a0 will enable only protocols 1 &amp; 3 \u00a0 \u00a0 \u00a0 <code>stat/tasmota_D728A8/RESULT {\"RfProtocol\":\"1,3\"}</code> <code>RfProtocol27 1</code>  \u00a0 \u00a0 \u00a0 will enable protocol 27 \u00a0 \u00a0 \u00a0 <code>stat/tasmota_D728A8/RESULT {\"RfProtocol\":\"1,3,27\"}</code> <code>RfProtocol 0</code> <code>stat/tasmota_D728A8/RESULT {\"RfProtocol\":\"None Enabled\"}</code> <code>RfProtocol a</code> <code>stat/tasmota_D728A8/RESULT {\"RfProtocol\":\"1,2,3,4,5,6,7,8,9,10,11,12,</code> <code>13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35\"}</code></p> <p>If you have an RF receiver configured, a message will be logged each time an RF code is seen. RF driver will try to decode it against all protocols supported by rc-switch library.   </p> <p>When Tasmota receives an RF message, the data portion of the payload has the same format as the <code>RfSend</code> JSON parameters.</p> <pre><code>\"RfReceived\":{\"Data\":\"&lt;hex-value&gt;\",\"Bits\":&lt;value&gt;,\"Protocol\":&lt;value&gt;,\"Pulse\":&lt;value&gt;}\n</code></pre> <p>This JSON payload data can be used in a rule such as:</p> <p><pre><code>ON RfReceived#Data=&lt;hex-value&gt; DO &lt;command&gt; ENDON\n</code></pre> Note: If you need a decimal-value instead of a \\&lt;hex-value&gt; see SetOption28.</p> <p>Examples: Sonoff RM433 Remote <code>MQT: tele/tasmota/RESULT = {\"Time\":\"2020-05-27T18:59:06\",\"RfReceived\":{\"Data\":\"0x7028D2\",\"Bits\":24,\"Protocol\":1,\"Pulse\":238}}</code></p>"},{"location":"RF-Transceiver/","title":"RF Transceiver","text":"<p>RC Switch driver enables sending RF codes through an RF transmitter and receiving them through an RF receiver via rc-switch library.</p>"},{"location":"RF-Transceiver/#rf-transmitter","title":"RF Transmitter","text":"<p>Not all transmitter modules will work with the rc-switch library. Some of officially supported modules by rc-switch are:</p> <ul> <li>SC5262 / SC5272</li> <li>HX2262 / HX2272</li> <li>PT2262 / PT2272</li> <li>EV1527 / RT1527 / FP1527 / HS1527</li> <li>Intertechno outlets</li> <li>HT6P20X</li> </ul> <p>This guide was created using STX882 RF transmitter which also works without issues.</p>"},{"location":"RF-Transceiver/#wiring","title":"Wiring","text":"RF ESP data GPIOx + 3.3v/5v - GND"},{"location":"RF-Transceiver/#tasmota","title":"Tasmota","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>RFSend</code> </li> </ul> <p>See RF commands for use. </p>"},{"location":"RF-Transceiver/#rf-receiver","title":"RF Receiver","text":"<p>RF receiver is used to capture RF codes. Those codes can be sent using <code>RFSend</code> or used as a rule trigger.   </p> <p>Not all transmitter modules will have sufficient power or range for normal use</p> <p>This guide is using SRX882 RF receiver module with a helical antenna. </p>"},{"location":"RF-Transceiver/#wiring_1","title":"Wiring","text":"SRX882 ESP Data GPIOx VCC 5v GND GND CS 3v3 or 5v <p>CS pin needs to be pulled high to put the module in active mode</p>"},{"location":"RF-Transceiver/#tasmota_1","title":"Tasmota","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>RFrecv (106)</code> </li> </ul> <p>On a captured code RF receiver sends a <code>tele/%topic%/RESULT</code> JSON response visible in console:</p> <pre><code>{\n  \"Time\": \"2019-01-01T00:00:00\",\n  \"RfReceived\": {\n    \"Data\": \"0x7028D5\",\n    \"Bits\": 24,\n    \"Protocol\": 1,\n    \"Pulse\": 238\n  }\n}\n</code></pre>"},{"location":"ROI-editor/","title":"ROI editor for the img class of Berry","text":"<p>Create a region of interest which will be the input tensor for TFL. Result is a descriptor map that is the representation of a 2D affine matrix and can be used in Berry. You can drop the source image onto the image view.  </p> Show help <p></p> Width: pixel Height: pixel Rotation: radians Scale X: factor Scale Y: factor              Add ROI 32x32 <p>'G' - grab and attach ROI to mouse pointer, release with 'G'</p> <p>'X' - increase width, 'shift-X' - decrease width</p> <p>'Y' - increase height, 'shift-Y' - decrease height</p> <p>'R' - rotate clockwise, 'shift-R' - rotate counter-clockwise</p> <p>'0' - reset ROI</p>"},{"location":"Range-Extender/","title":"Range Extender","text":"<p>This feature allows Tasmota to publish an AP with a dedicated SSID that is then routed to the core WiFi network.</p> This feature is not included in precompiled binaries <p>To use it you must compile your build</p> <p>Copy <code>platformio_tasmota_cenv_sample.ini</code> to <code>platformio_tasmota_cenv.ini</code> which already contains the following sections for ESP8266 and ESP32. Or create a section in your <code>platformio_tasmota_cenv.ini</code> such as the following for an ESP8266:</p> <pre><code>[env:tasmota-rangeextender]\nmonitor_port = /dev/cu.SLAB*\nupload_port  = /dev/cu.SLAB*\nupload_speed = 921600\nbuild_unflags               = ${esp_defaults.build_unflags}\nbuild_flags                 = ${esp82xx_defaults.build_flags}\n                              -D FIRMWARE_RANGE_EXTENDER\n                              -D USE_WIFI_RANGE_EXTENDER                ; adds about 11k to flash size\n                              -D USE_WIFI_RANGE_EXTENDER_NAPT           ; Optional, adds about 1k to flash size\n                              -D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH   ; required option to use this feature\n</code></pre> <p>For ESP32 (note this extends the <code>tasmota32idf4</code> section included in the <code>platformio_tasmota_cenv_sample.ini</code>):</p> <pre><code>[env:tasmota32-rangeextender]\nextends                 = env:tasmota32idf4\nbuild_flags             = ${env:tasmota32idf4.build_flags}\n                          -D FIRMWARE_TASMOTA32\n                          -D USE_WIFI_RANGE_EXTENDER\n                          -D USE_WIFI_RANGE_EXTENDER_NAPT\n</code></pre> <p>Alternatively, add the following to <code>user_config_override.h</code> (however the <code>PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH</code> or <code>tasmota32idf4</code> must still be set as per above):</p> <pre><code>#ifndef USE_WIFI_RANGE_EXTENDER\n#define USE_WIFI_RANGE_EXTENDER\n#endif\n// Optionally, to enable NAT/NAPT\n#ifndef USE_WIFI_RANGE_EXTENDER_NAPT\n#undef USE_WIFI_RANGE_EXTENDER_NAPT\n#endif\n</code></pre>"},{"location":"Range-Extender/#overview","title":"Overview","text":"<p>If you have a Tasmota device at the edge of your WiFi coverage and require a bit more distance, this feature allows you to turn it into a routing WiFi node.</p> <p>Note that this should be considered low bandwidth as the ESP has to process every packet.</p> <p>Additionally, if desired, it can also NAT/NAPT traffic, removing the need for a route on your core router. See below for the pros and cons of each option.</p>"},{"location":"Range-Extender/#routing-not-napt","title":"Routing (not NAPT)","text":"<p>If using routing, you must setup a return route on your \"core\" router for each extender node. Each extender must also have a unique client side IP address range, and a static core side IP address so the core router knows where to send routes.</p> <p>Pros</p> <ul> <li>Can access web interface remote devices</li> <li>Lower overhead on the extender device</li> <li>Slightly smaller flash foot print if you choose to disable NAPT</li> </ul> <p>Cons</p> <ul> <li>More complex to setup, requiring return routes and static IP addressing</li> </ul> <p>An example setup using commands to match the above image to route traffic, with an AP name <code>rangeextender</code> and password <code>securepassword</code> would be:</p> <pre><code>RgxSSId rangeextender\nRgxPassword securepassword\nRgxAddress 10.99.1.1\nRgxSubnet 255.255.255.0\nRgxState ON\n</code></pre> <p>Alternatively, it could also be set in your <code>user_config_override.h</code> with:</p> <pre><code>#define WIFI_RGX_SSID \"rangeextender\"\n#define WIFI_RGX_PASSWORD \"securepassword\"\n#define WIFI_RGX_IP_ADDRESS \"10.99.1.1\"\n#define WIFI_RGX_SUBNETMASK \"255.255.255.0\"\n#define WIFI_RGX_STATE 1\n</code></pre> <p>NAPT defaults to off - however if you needed to disable it, run <code>RgxNAPT OFF</code>.</p>"},{"location":"Range-Extender/#with-napt","title":"With NAPT","text":"<p>If using NAPT, deployment is a lot easier as there is no need for a static IP address, or adding routes to your core router. Also, all extender nodes could have the same \"remote\" IP address range as these addresses never enter into the \"core\" network.</p> <p>Pros</p> <ul> <li>Very simple to setup</li> </ul> <p>Cons</p> <ul> <li>More overhead on the extender device</li> <li>Access to the web interface of the remote devices needs port forwarding -&gt; see RgxPort command</li> </ul> <p>An example setup using commands to match the above image with NAPT, with an AP name <code>rangeextender</code> and password <code>securepassword</code> would be:</p> <pre><code>RgxSSId rangeextender\nRgxPassword securepassword\nRgxAddress 10.99.1.1\nRgxSubnet 255.255.255.0\nRgxState ON\nRgxNAPT ON\n</code></pre> <p>Alternatively, it could also be set in your <code>user_config_override.h</code> with:</p> <pre><code>#define WIFI_RGX_SSID \"rangeextender\"\n#define WIFI_RGX_PASSWORD \"securepassword\"\n#define WIFI_RGX_IP_ADDRESS \"10.99.1.1\"\n#define WIFI_RGX_SUBNETMASK \"255.255.255.0\"\n#define WIFI_RGX_STATE 1\n#define WIFI_RGX_NAPT 1\n</code></pre> <p>To access the web page (which uses tcp port 80) of a client with mac 11:22:33:44:55:66 you execute the following command after the client is connected: <pre><code>RgxPort tcp,8080,112233445566,80\n</code></pre> If the result is OK the range extender port 8080 is forwarded to port 80 of the client and the web page can be accessed with URL http://range-extender-name:8080</p> <p>The setting is not permanent and needs to be repeated each time the client (re)connects since its IP could have changed.</p> <p>So, if access to a device behind the NAT is required it is easiest to configure this device with a static IP in the range extender subnet. Then the RgxPort command can be used with that IP instead of the MAC. Since the IP is known, it is not required that the IP is already active at the time of the port forward. That way the RgxPort command could be used in a simple startup rule. Given the range extender subnet is the default 192.168.4.0/24, and the device has a static IP of 192.168.4.44 then this command would work: <pre><code>RgxPort tcp,8084,192.168.4.44,80\n</code></pre> If the result is OK the range extender port 8084 is forwarded to port 80 of the client and the web page can be accessed with URL http://range-extender-name:8084 while the client is active.</p>"},{"location":"Range-Extender/#commands","title":"Commands","text":"Command Parameters RgxSSId The SSID of the AP that Tasmota will present for devices to connect to RgxPassword The password for the above SSID RgxAddress The IP address on the AP side, the connection to the \"core\" network IP addressing remains the same (eg: DHCP) RgxSubnet The subnet mask for the AP side, it's recommended to use <code>255.255.255.0</code>. The AP will automatically use addresses from this subnet to serve via DHCP to connecting devices RgxState Enable or disable the AP. Note that turning the AP off will cause a reboot RgxNAPT Only available if <code>USE_WIFI_RANGE_EXTENDER_NAPT</code> is enabled. Enable or disable NAPT. Note that turning off NAPT will cause the device to reboot RgxClients Show JSON list of currently connected clients with their MAC and IP. On ESP32 last RSSI is also shown RgxPort protocol,range_extender_port,[client_mac|client_ip],client_port: Forward a tcp or udp STA port to a port of an AP client"},{"location":"Rules/","title":"Rules","text":"<p>Rules expand the functionality of Tasmota with user configurable flexible logic</p> <p>Tasmota provides a Rule feature heavily inspired by the ESPEasy implementation while maintaining a small memory footprint. Automation solutions can be implemented without having to add dedicated code or use external solutions.  </p> <p>Rules perform actions based on triggers (e.g., switch state change, temperature threshold, events like system boot, a defined timer elapsing, custom defined events, etc.) They are stored in flash and therefore will survive a reboot.</p> <p>Note</p> <p>Most pre-compiled builds have the Rules feature enabled. If you are &gt;compiling your own firmware, in order to use rules, include <code>#define USE_RULES</code> in <code>user_config_override.h</code>.</p> <p>List of Rules Commands </p>"},{"location":"Rules/#rule-syntax","title":"Rule Syntax","text":"<p>Rule definition syntax </p> <pre><code>ON &lt;trigger&gt; DO &lt;command&gt; [ENDON | BREAK]\n</code></pre> <ul> <li><code>ON</code> - marks the beginning of a rule   </li> <li><code>&lt;trigger&gt;</code> - what condition needs to occur for the rule to trigger  </li> <li><code>DO</code> - statement marking end of trigger and beginning of command part</li> <li><code>&lt;command&gt;</code> - command that is executed if the <code>&lt;trigger&gt;</code> condition is met  </li> <li><code>ENDON</code>  - marks the end of a rule. It can be followed by another rule.</li> <li><code>BREAK</code>  - marks the end of a rule. <code>BREAK</code> will stop the execution of the remaining rules that follow this rule within the rule set. If a rule that ends with <code>BREAK</code> is triggered, the following rules in that rule set will not be executed. This allows the rules to somewhat simulate an \"IF/ELSE\" statement.  </li> </ul> <p>Rule sets are defined by using the <code>Rule&lt;x&gt;</code> command. After defining a rule set, you have to enable it (turn it on) using <code>Rule&lt;x&gt; 1</code>. Similarly you can disable the rule set using <code>Rule&lt;x&gt; 0</code>.</p> <p>Note</p> <p>If bootloops are detected all rules will be disabled as a precaution. See SetOption36.</p> <p>There are three separate rule sets called <code>Rule1</code>, <code>Rule2</code> and <code>Rule3</code>. Each rule set can contain many rules. The number of rules that can fit in a rule set varies, but expect at least 1000 characters available per set. Additionally, rules are dynamically compressed, meaning they will be compressed automatically when doing so is required, but left uncompressed until that point.</p> <p>Whenever a rule set is enabled all the rules in it will be active. If the character count of the rules in one set actually exceeds the limit, start using the next rule set. If you have a long list of rules, verify the rules have all fit by inspecting the resulting log.</p> <p>Rules inside a rule set <code>Rule&lt;x&gt;</code> are concatenated and entered as a single statement.  </p> <pre><code>Rule&lt;x&gt; ON &lt;trigger1&gt; DO &lt;command&gt; ENDON ON &lt;trigger2&gt; DO &lt;command&gt; ENDON ...\n</code></pre> <p>Spaces after <code>ON</code>, around <code>DO</code>, and before <code>ENDON</code> or <code>BREAK</code> are mandatory. A rule is not case sensitive.  </p>"},{"location":"Rules/#rule-trigger","title":"Rule Trigger","text":"<p>Rule trigger names are derived from the JSON message displayed in the console. Each JSON level (all values enclosed in <code>{...}</code>) is separated in the trigger with a <code>#</code>. Top level JSON fields are referenced without any <code>#</code>, except when the JSON has only one field, where you need <code>#Data</code>.</p> <p>A rule trigger can consist of:  </p> <ul> <li><code>[TriggerName]#[ValueName]</code></li> <li><code>[TriggerName]#[ValueName][comparison][value]</code></li> <li><code>[SensorName]#[ValueName]</code></li> <li><code>[SensorName]#[ValueName][comparison][value]</code></li> <li><code>Tele-[SensorName]#[ValueName]</code></li> <li><code>[TriggerName1]#[TriggerName2]#[ValueName]</code></li> <li><code>[TriggerName1]#?#[ValueName]</code></li> <li><code>[ValueName]</code></li> <li><code>[ValueName#Data]</code></li> </ul> <p>Use <code>?</code> as a wildcard for a single trigger level. Rule will trigger on <code>[TriggerName]#?#[Value]</code> where <code>?</code> is any value.</p> <p>Example</p> <p>Rule with a trigger of <code>ZBReceived#?#Power=0</code> will trigger on <code>{\"ZBReceived\":{\"0x4773\":{\"Power\":0}}}</code> and on <code>{\"ZBReceived\":{\"aqara_switch\":{\"Power\":0}}}</code> both.</p> <p>Note</p> <p>Same trigger may be used in more than one rule. This may be required for some cases of using <code>IF/ELSE</code> since an <code>IF</code> statement cannot be used within a <code>Backlog</code>.</p>"},{"location":"Rules/#rule-trigger-comparison-operators","title":"Rule Trigger Comparison Operators","text":"Operator Function <code>=</code> equal to (used for string comparison) <code>==</code> equal to (used for numerical comparison) <code>&gt;</code> greater than <code>&lt;</code> lesser than <code>!=</code> number not equal to (for string see below) <code>&gt;=</code> greater than or equal to <code>&lt;=</code> lesser than or equal to <code>$&lt;</code> string starts with <code>$&gt;</code> string ends with <code>$|</code> string contains <code>$!</code> string is not equal to <code>$^</code> string does not contain <code>|</code> used for modulo operation with remainder = 0 (exact division)"},{"location":"Rules/#examples-of-available-triggers","title":"Examples of Available Triggers","text":"<p>This is just a sampling of available triggers to showcase what is possible and not a definitive list</p> Trigger When it occurs Analog#A0div10 when the <code>A0</code> input changes by more than 1% it provides a value between 0 and 100 Button2#State when a button changes state:<code>0</code> = OFF<code>1</code> = ON<code>2</code> = TOGGLE<code>3</code> = HOLD Clock#Timer=3 when global <code>Timer3</code> is activated Dimmer#Boot occurs after Tasmota starts Dimmer#State when the value for Dimmer is changed Eth#Connected when Ethernet is connected (ESP32 only) Eth#Disconnected when Ethernet is disconnected (ESP32 only) Event#eventName when command <code>Event eventName</code> is executed. You can define your own event values and trigger them with the <code>Event</code> command. An event with a <code>=</code> will provide a <code>%value%</code> to use in the execution part of the rule. Example: Command <code>Event speed=2</code> in rule trigger <code>on event#speed</code> will have the <code>%value%</code> of <code>2</code>. FanSpeed#Data=3 when the fan speed is set to <code>3</code> Mem&lt;x&gt;#State when the value for Mem&lt;x&gt; is changed Http#Initialized Mqtt#Connected when MQTT is connected Mqtt#Disconnected when MQTT is disconnected Power1#Boot <code>Relay1</code> state before Wi-Fi and MQTT are connected and before Time sync but after <code>PowerOnState</code> is executed. Power#Boot triggers before System#Boot.This trigger's value will be the last state of <code>Relay1</code> if <code>PowerOnState</code> is set to its default value (<code>3</code>). Power1#State when a power output is changeduse <code>Power1#state=0</code> and <code>Power1#state=1</code> for comparison, not =off or =onPower2 for Relay2, etc. Rotary1#Pos1 when rotary encoder change. See Use a rotary encoder. Rules#Timer=&lt;x&gt; when countdown <code>RuleTimer&lt;x&gt;</code> expires (x = <code>1..8</code>). Switch1#Boot occurs after Tasmota starts before it is initializated. Switch1#State when a switch changes to state. Will not trigger if SwitchTopic is set.use <code>Switch1#state=0</code> and <code>Switch1#state=1</code> for comparison, not =off or =on<code>0</code> = OFF<code>1</code> = ON<code>2</code> = TOGGLE<code>3</code> = HOLD (<code>SwitchTopic 0</code> must be set for this to trigger)<code>4</code> = INC_DEC (increment or decrement dimmer)<code>5</code> = INV (change from increment to decrement dimmer and vice versa)<code>6</code> = CLEAR (button released for the time set with <code>SetOption32</code>) System#Boot occurs once after Tasmota is fully initialized (after the INFO1, INFO2 and INFO3 console messages). <code>System#Boot</code> triggers after Wi-Fi and MQTT (if enabled) are connected. If you need a trigger prior to every service being initialized, use <code>Power1#Boot</code> System#Init occurs once after restart before Wi-Fi and MQTT are initialized System#Save executed just before a planned restart Time#Initialized once when NTP is initialized and time is in sync Time#Minute every minute Time#Minute|5 every five minutes Time#Minute=241 every day once at 04:01 (241 minutes after midnight) Time#Set every hour when NTP makes time in sync Var&lt;x&gt;#State when the value for Var&lt;x&gt; is changed (triggers whenever a value is written to <code>Var&lt;x&gt;</code> even if it's the same value) Wifi#Connected when Wi-Fi is connected Wifi#Disconnected when Wi-Fi is disconnected Tele-Heap when a teleperiod message is sent with available heap memory (example of top-level JSON) Tele-Wifi#AP when a teleperiod message is sent with the number of the used AP Tele-Wifi#Ssid when a teleperiod message is sent with the name of the used AP Tele-Wifi#Bssid when a teleperiod message is sent with the name of the bSSID Tele-Wifi#Channel when a teleperiod message is sent with the number of the wifi channel used Tele-Wifi#RSSI when a teleperiod message is sent with the RSSI LEVEL Tele-Wifi#LinkCount when a teleperiod message is sent with the number of wifi disconnections Tele-Wifi#Downtime when a teleperiod message is sent with the total seconds of wifi disconnections <p>Every command with a JSON payload response has an associated rule trigger, with the exception of Power#Data and Switch, which are superseded by by the Power#State and Switch#State trigger. Trigger When it occurs &lt;command&gt;#Data A one level JSON payload such as <code>{\"Command\":\"value\"}</code>. For example, for {\"Fanspeed\":3}, the trigger is<code>Fanspeed#Data</code>. level1#level2#levelN A multi-level JSON payload such as <code>{\"TriggerLevel1\":{\"TriggerLevel2\":{\"ValueName\":\"value\"}}}</code> does NOT have the <code>#Data</code> trigger. Instead, the trigger for these responses is <code>TriggerLevel1#TriggerLevel2#ValueName</code>. <p>When the JSON payload response is produced by a command executed by a rule i.e. <code>on time=120 do status 8 endon</code>, the <code>StatusSNS#Data</code> trigger will not fire unless the command is wrapped in <code>backlog</code> i.e. <code>on time=120 do backlog status 8 endon</code></p> <p>Example</p> <p>For <code>{\"PulseTime2\":{\"Set\":0,\"Remaining\":0}}</code>, the triggers are <code>PulseTime2#Set</code> and <code>PulseTime2#Remaining</code>.|</p> <p>For a 3 level JSON message such as <code>{\"ZbReceived\":{\"test_switch\":{\"Device\":\"0x0C94\",\"Power\":1,\"Endpoint\":8,\"LinkQuality\":70}}}</code> one possible trigger is <code>ZbReceived#test_switch#Power</code> or another <code>ZbReceived#test_switch#LinkQuality</code> </p> <p>Connected sensors can be a trigger in the form as they are represented in the <code>TelePeriod</code> and <code>Status 8</code> JSON payloads.  </p> Trigger When it occurs DS18B20#Temperature whenever the temperature of sensor DS18B20 updates (also unchanged) DS18B20#Temperature&lt;20 whenever the temperature of sensor DS18B20 is below 20 degrees BME280#Humidity==55.5 whenever the humidity of sensor BEM280 equals 55.5% INA219#Current&gt;0.100 whenever the current drawn is more than 0.1A Energy#Power&gt;100 whenever the power used is more than 100W <p>When the payload consists of an array of data eg: <code>\"ENERGY\":{\"Current\":[1.320,2.100]}</code></p> Trigger When it occurs Energy#Current[N] N = Number of the field. 1 for the first <code>1.320</code>, 2 for the second <code>2.100</code> etc. Energy#Current[1]&gt;1.000 whenever the first value of Energy#Current is higher than 1.000. <p>To trigger only at TelePeriod time, prefix the sensor with the word <code>Tele-</code>.  </p> Trigger When it occurs Tele-AM2301#Temperature sensor AM2301 Temperature value when the TelePeriod JSON payload is output <p>Hardware and software serial interface, RF, IR and TuyaMCU are also supported based on their JSON status message:  </p> Trigger When it occurs TuyaReceived#Data=&lt;hex_string&gt; whenever &lt;hex_string&gt; is received with TuyaMCU component SerialReceived#Data=&lt;string&gt; whenever &lt;string&gt; is received via hardware serial SSerialReceived#Data=&lt;string&gt; whenever &lt;string&gt; is received via software serial IrReceived#Data=801 whenever an IR signal for a RC5 remote control button 1 is received IrReceived#Data=0x00FF9867 whenever an IR signal with hex code 0x00FF9867 is received RfReceived#RfKey=4 whenever the RF Bridge receives a recognized RfKey 4 signal RfReceived#Data=0xE8329E whenever an RF signal with hex code 0xE8329E is received"},{"location":"Rules/#rule-command","title":"Rule Command","text":"<p>A rule command can be any command listed in the Commands list. The command's <code>&lt;parameter&gt;</code> can be replaced with  <code>%value%</code> which will use the value of the trigger, strings are folded to uppercase. </p> <p><code>ON Switch1#State DO Power %value% ENDON</code></p> <p>To accomplish a rule with one trigger but several commands, you need to use <code>Backlog</code>:</p> <p><code>ON &lt;trigger&gt; DO Backlog &lt;command1&gt;; &lt;command2&gt;; &lt;command3&gt; ENDON</code></p> <p>Appending new rule onto an existing rule set Use the <code>+</code> character to append a new rule to the rule set. For example:</p> <p>\u00a0\u00a0\u00a0\u00a0Existing Rule1:  <code>ON Rules#Timer=1 DO Mem2 %time% ENDON</code></p> <p>\u00a0\u00a0\u00a0\u00a0Rule to append:  <code>ON Button1#state DO POWER TOGGLE ENDON</code></p> <p>\u00a0\u00a0\u00a0\u00a0Command:         <code>Rule1 + ON button1#state DO POWER TOGGLE ENDON</code></p> <p>\u00a0\u00a0\u00a0\u00a0Resulting in  <pre><code>Rule1 ON Rules#Timer=1 DO Mem2 %time% ENDON ON Button1#state DO POWER TOGGLE ENDON\n</code></pre></p> <p>You can repeate the same trigger in rules. </p> <pre><code>Rule\n  ON Power2#state=1 DO Power1 1 ENDON\n  ON Power2#state=1 DO RuleTimer1 100 ENDON\n</code></pre>"},{"location":"Rules/#rule-variables","title":"Rule Variables","text":"<p>There are thirty-two (32) available variables (single precision reals) in Tasmota: <code>Var1..Var16</code> and <code>Mem1..Mem16</code>. They provide a means to store the trigger <code>%value%</code> to be used in any rule.        All <code>Var</code> will be empty strings when the program starts. The value of all <code>Mem</code> persists after a reboot. </p> <p>The value of a <code>Var&lt;x&gt;</code> and <code>Mem&lt;x&gt;</code> can be: </p> <ul> <li>any number</li> <li>any text</li> <li>%var1% to %var16%</li> <li>%mem1% to %mem16% </li> <li>%color%</li> <li>%deviceid%</li> <li>%macaddr%</li> <li>%power1% to number of power channels</li> <li>%sunrise%</li> <li>%sunset%</li> <li>%switch1% to number of switch gpios</li> <li>%time%</li> <li>%timer1% to %timer16%</li> <li>%timestamp%</li> <li>%topic%</li> <li>%uptime%</li> <li>%utctime%</li> <li>%zbdevice%</li> <li>%zbgroup%</li> <li>%zbcluster%</li> <li>%zbendpoint%</li> </ul> <p>To set the value for <code>Var&lt;x&gt;</code> and <code>Mem&lt;x&gt;</code> use the command  </p> <ul> <li><code>Var&lt;x&gt; &lt;value&gt;</code></li> <li><code>Mem&lt;x&gt; &lt;value&gt;</code></li> </ul> <p>The <code>&lt;value&gt;</code> can also be the value of the trigger of the rule.  </p> <ul> <li>Set Var2 to the temperature of the AM2301 sensor - <code>ON AM2301#Temperature DO Var2 %value% ENDON</code></li> <li>Set Var4 to Var2's value - <code>ON Event#temp DO Var4 %Var2% ENDON</code></li> <li>Set Mem2 to the current time (minutes elapsed since midnight) - <code>ON Rules#Timer=1 DO Mem2 %time% ENDON</code></li> <li>After a Wi-Fi reconnect event, publish a payload containing timestamps of when Wi-Fi was disconnected in From: and when Wi-Fi re-connected in To: to <code>stat/topic/BLACKOUT</code>.</li> </ul> <pre><code>Rule1\n  ON wifi#disconnected DO Var1 %timestamp% ENDON\n  ON wifi#connected DO Var2 %timestamp% ENDON\n  ON mqtt#connected DO Publish stat/topic/BLACKOUT {\"From\":\"%Var1%\",\"To\":\"%Var2%\"} ENDON\n</code></pre>"},{"location":"Rules/#delete-rule","title":"Delete rule","text":"<p>To clear / delete use double quote(s):</p> <pre><code>Rule1 \"\n</code></pre>"},{"location":"Rules/#conditional-rules","title":"Conditional Rules","text":"<p>Note</p> <p>This feature is now included in ESP32 builds as well as in ESP8266 builds since v13.3.0.4.</p>"},{"location":"Rules/#major-features","title":"Major features","text":"<ul> <li>Support IF, ELSEIF, ELSE  </li> <li>Support for <code>&lt;comparison&gt;</code> and <code>&lt;logical expression&gt;</code> as condition  </li> <li>Support for executing multiple commands  </li> <li>Available free RAM is the only limit for logical operators and parenthesis.  </li> </ul>"},{"location":"Rules/#grammar","title":"Grammar","text":"<p><code>&lt;if-statement&gt;</code> </p> <ul> <li><code>IF (&lt;logical-expression&gt;) &lt;statement-list&gt; {ELSEIF (&lt;logical-expression&gt;) &lt;statement-list&gt;} [ELSE &lt;statement-list&gt;] ENDIF</code> </li> </ul> <p><code>(&lt;logical-expression&gt;)</code> Parentheses must enclose the expression. They can also be used to explicitly control the order of evaluation.  </p> <ul> <li><code>&lt;comparison-expression&gt;</code> </li> <li><code>(</code> <code>&lt;comparison-expression&gt;</code> | <code>&lt;logical-expression&gt;</code> <code>)</code> {{<code>AND</code> | <code>OR</code>} <code>&lt;logical-expression&gt;</code>}  </li> <li><code>(</code> <code>&lt;logical-expression&gt;</code> <code>)</code> {<code>AND</code> | <code>OR</code>} <code>&lt;logical expression&gt;</code>}  </li> </ul> <p><code>&lt;comparison-expression&gt;</code> </p> <ul> <li><code>&lt;expression&gt;</code> {<code>=</code> | <code>&lt;</code> | <code>&gt;</code> | <code>|</code> | <code>==</code> | <code>&lt;=</code> | <code>&gt;=</code> | <code>!=</code>} <code>&lt;expression&gt;</code> </li> </ul> <p><code>&lt;statement-list&gt;</code> </p> <ul> <li><code>&lt;statement&gt;</code> {<code>;</code> <code>&lt;statement&gt;</code>}  </li> </ul> <p><code>&lt;statement&gt;</code> </p> <ul> <li>{<code>&lt;Tasmota-command&gt;</code> | <code>&lt;if-statement&gt;</code>}  </li> </ul>"},{"location":"Rules/#syntax","title":"Syntax","text":"<p>IF statement supports 3 formats:  </p> <ul> <li><code>IF (&lt;logical-expression&gt;) &lt;statement-list&gt; ENDIF</code> </li> <li><code>IF (&lt;logical-expression&gt;) &lt;statement-list&gt; ELSE &lt;statement-list&gt; ENDIF</code> </li> <li><code>IF (&lt;logical-expression&gt;) &lt;statement-list&gt; [ELSEIF (&lt;logical-expression&gt;) &lt;statement-list&gt; ] ELSE &lt;statement-list&gt; ENDIF</code> </li> </ul> <p>When the <code>&lt;if-statement&gt;</code> directly follows the trigger the standard 'Do' syntax applies, however, it is not necessary to use 'Backlog' within the chain   <code>Rule1 ON Power1#State DO IF (%value%==1) Backlog Power2 1;Power3 1 ENDIF ENDON</code> is permitted <code>Rule1 ON Power1#State DO IF (%value%==1) Power2 1;Power3 1 ENDIF ENDON</code> is also permitted</p> <p>When the <code>&lt;if-statement&gt;</code> is preceded by other Tasmota commands you should use <code>Backlog</code> along with <code>Do</code> , e.g. <code>Rule1 ON ENERGY#Current&gt;10 DO Backlog Power1 0; IF (%var1%==1) Power1 1 ENDIF;Power 2 0;Power3 1 ENDON</code> and not <code>Rule1 ON ENERGY#Current&gt;10 DO Power1 0; IF (%var1%==1) Power1 1 ENDIF ENDON</code> or <code>Rule1 ON ENERGY#Current&gt;10 Backlog Power1 0; IF (%var1%==1) Power1 1 ENDIF ENDON</code></p> <p><code>(&lt;logical-expression&gt;)</code> example: <code>(VAR1&gt;=10)</code> - Multiple comparison expressions with logical operator <code>AND</code> or <code>OR</code> between them. <code>AND</code> has higher priority than <code>OR</code>. For example: <code>((UPTIME&gt;100) AND (MEM1==1) OR (MEM2==1))</code> - Parenthesis can be used to change the priority of the logical expression evaluation. For example: <code>((UPTIME&gt;100) AND ((MEM1==1) OR (MEM2==1)))</code> </p> <ul> <li>Following variables can be used in <code>&lt;condition&gt;</code>:  </li> </ul> Symbol Description VAR&lt;x&gt; variable (&lt;x&gt; = <code>1..MAX_RULE_VARS</code>, e.g., <code>VAR2</code>) MEM&lt;x&gt; persistent variable (&lt;x&gt; = <code>1..MAX_RULE_MEMS</code>, e.g., <code>MEM3</code>) TIME minutes past midnight UPTIME uptime minutes UTCTIME UTC time, UNIX timestamp, seconds since 01/01/1970 LOCALTIME local time, UNIX timestamp SUNRISE current sunrise time (minutes past midnight) SUNSET current sunset time (minutes past midnight) COLOR current color <p><code>&lt;statement-list&gt;</code> - A Tasmota command (e.g.,<code>LedPower on</code>) - Another IF statement (<code>IF ... ENDIF</code>) - Multiple Tasmota commands or IF statements separated by <code>;</code>. For example: <code>Power1 off; LedPower on; IF (Mem1==0) Var1 Var1+1; Mem1 1 ENDIF; Delay 10; Power1 on</code> <code>Backlog</code> is implied and is not required (saves rule set buffer space).  </p> <p>But not like this:    <code>Power1 off; LedPower on; IF (Mem1==0) Var1 Var1+1; Mem1 1 ENDIF; Delay 10; Power1 on</code></p> <p>You should split it in two lines like:    <code>ON Power2#state=1 DO Power1 off; LedPower on; ENDON</code> <code>ON Power2#state=1 DO IF (Mem1==0) Var1 Var1+1; Mem1 1 ENDIF; Delay 10; Power1 on ENDON</code></p> <p>Example</p> <p>Rule used to control pressure cooker with a Sonoff S31. Once it is finished cooking, wait for 10 minutes and then shut off the power.</p> <pre><code>Rule1\n ON system#boot DO var1 0 ENDON\n ON energy#power&gt;100 DO if (var1!=1) var1 1; ruletimer1 0; endif ENDON\n ON energy#power&lt;100 DO if (var1==1) var1 2; ruletimer1 600 endif ENDON\n ON rules#timer=1 DO Backlog var1 0; power off ENDON  \n</code></pre>"},{"location":"Rules/#expressions-in-rules","title":"Expressions in Rules","text":"<p>Note</p> <p>This feature is now included in ESP32 builds as well as in ESP8266 builds since v13.3.0.4.</p> <p>Beginning with Tasmota version 6.4.1.14, an optional feature for using mathematical expressions in rules was introduced. </p>"},{"location":"Rules/#supported-commands","title":"Supported Commands","text":"<p>Once the feature is enabled, the use of expressions is supported in the following commands:</p> <ul> <li>Var</li> <li>Mem</li> <li>RuleTimer</li> <li>If conditional statement (requires <code>#define SUPPORT_IF_STATEMENT</code>)</li> </ul>"},{"location":"Rules/#syntax_1","title":"Syntax","text":"<p>Expressions can use of the following operators. They are listed by the order of operations priority, from higher to lower.</p> <ul> <li><code>(  )</code> (parentheses can be used to explicitly control the order of operations)</li> <li><code>^</code> (power)</li> <li><code>%</code> (modulo, division by zero returns modulo \"0\")</li> <li><code>*</code> and <code>/</code>  (multiplication and division; division by zero returns \"0\")</li> <li><code>+</code> and <code>-</code>  (addition and subtraction)</li> </ul> <p>Example</p> <ul> <li><code>1+2*2</code>   results in 5.0 as the multiplication is done first due to its higher priority</li> <li><code>(1+2)*2</code>   results in 6.0</li> </ul> <p>In addition to numeric constants, the following symbolic values can be used:  </p> Symbol Description VAR&lt;x&gt; variable (&lt;x&gt; = <code>1..MAX_RULE_VARS</code>, e.g., <code>VAR2</code>) MEM&lt;x&gt; persistent variable (&lt;x&gt; = <code>1..MAX_RULE_MEMS</code>, e.g., <code>MEM3</code>) TIME minutes past midnight UPTIME uptime minutes UTCTIME UTC time, UNIX timestamp, seconds since 01/01/1970 LOCALTIME local time, UNIX timestamp SUNRISE current sunrise time (minutes past midnight) SUNSET current sunset time (minutes past midnight) COLOR current color <p>Example</p> <p><code>Mem1=((0.5*Var1)+10)*0.7</code></p> <p>To use expressions in the <code>Var</code>, <code>Mem</code> and <code>RuleTimer</code> commands, an equal sign (<code>=</code>) character has to be used after the command. If not, the traditional syntax interpretation is used.  </p> Statement Var1 Result <code>Var1=42</code> 42 <code>Var1 1+1</code> \"1+1\" (the literal string) <code>Var1=1+1</code> 2 <code>Var1=sunset-sunrise</code> duration of daylight in minutes"},{"location":"Rules/#rule-cookbook","title":"Rule Cookbook","text":""},{"location":"Rules/#long-press-on-a-switch","title":"Long press on a switch","text":"<p>This example is for GPIOs defined as switches not buttons</p> <p>Activate long press action with <code>Switchmode 5</code> and shorten long press time to 2 seconds (<code>Setoption32 20</code>).</p> <pre><code>Backlog SwitchMode 5; SetOption32 20\nRule ON switch1#state=3 DO publish cmnd/tasmota02/POWER 2 ENDON\n</code></pre> <p>Long pressing on switch1 sends <code>POWER 2</code> (toggle action) command to the <code>tasmota02</code> device</p> <p>Notice we use <code>Rule</code> which edits <code>Rule1</code> rule set. They can be used interchangeably. If your rule does not trigger there could some constraints, in this case if SwitchTopic has a value it will override rules for switches and will need to be disabled: <code>SwitchTopic 0</code>.</p>"},{"location":"Rules/#send-mqtt-message-on-button-press","title":"Send MQTT message on button press","text":"<p>When a button is pressed the user has the possibility to send a MQTT message based on FullTopic and ButtonTopic. This MQTT message is going to be received by the MQTT broker and if there is any other device(s) subscribed to that Topic, it will receive also that message. So this approach can be used for sending messages/commands to MQTT Broker to Home Automation System, and/or sending messages/commands to MQTT Broker to other device(s).</p> <p>A problem with this solution is that on a Sonoff 4CH all four buttons will be sending the same MQTT topic using only a different Power index number like <code>cmnd/ButtonTopic/Power3 toggle</code>.</p> <p>By using a rule a single button can send any MQTT message allowing for more flexibility.</p> <p>Disable ButtonTopic as it overrides rules for buttons: <code>ButtonTopic 0</code></p>"},{"location":"Rules/#rule","title":"Rule","text":"<pre><code>Rule1\n  ON button1#state DO publish cmnd/ring2/power %value% ENDON\n  ON button2#state DO publish cmnd/strip1/power %value% ENDON\n</code></pre> <p>You will need to enable this rule if it's the first time you've used rule with <code>Rule1 1</code></p>"},{"location":"Rules/#result","title":"Result","text":"<p>When Button1 is pressed the rule kicks in and sends a MQTT message substituting variable <code>%value%</code> with the button state, f.e <code>cmnd/ring2/Power 2</code>. When Button2 is pressed an MQTT message <code>cmnd/strip1/Power 2</code> will be sent.</p>"},{"location":"Rules/#usage-of-one-shot-once","title":"Usage of one-shot (once)","text":"<p>The rule command once option provides the possibility to trigger only once ON a slow change while the change is still within the bounds of the test.</p> <pre><code>Rule\n  ON ENERGY#Current&gt;0.100 DO publish tool/tablesaw/power 1 ENDON\n  ON ENERGY#Current&lt;0.100 DO publish tool/tablesaw/power 0 ENDON\n</code></pre> <p>This creates a rule to publish MQTT commands whenever a Sonoff POW has current passing through it. Used as is, it will publish MQTT commands repeatedly, over and over, while current is &gt;0.100 ... but, executing another command:</p> <p><code>Rule 5</code></p> <p>Now the MQTT message will be sent once, and only once, while the condition is met. This is perfect for thermostat on/off depending on temperature, bathroom extractor fan on/off depending on humidity, workshop dust collector on/off depending on whether some dust-producing machine is running.</p> <p>It meets the 'hard thermostat' requests that have been common.</p>"},{"location":"Rules/#use-a-potentiometer","title":"Use a potentiometer","text":"<p>Connecting a potentiometer to the Analog A0 input and a rule can be used to control the dimmer state of any device.</p> <p>Hardware - Wemos D1 mini - Potentiometer of 2k2 connected to Gnd, A0 and 3V3 - WS2812 LED</p> <pre><code>Rule ON analog#a0div10 DO dimmer %value% ENDON\n</code></pre>"},{"location":"Rules/#result_1","title":"Result","text":"<p>Turning the potentiometer the voltage on the analog input will change resulting in a value change of 0 (Off) to 100 for the trigger. Using this value to control the dimmer of the WS2812 will control the brightness of the led(s)</p> <pre><code>Rule ON analog#a0div10 DO publish cmnd/grouplight/dimmer %value% ENDON\n</code></pre> <p>Result This time all lights configured with GroupTopic <code>grouplight</code> will change their brightness according to the potentiometer position.</p> <p>NOTE: You might want to execute command <code>SaveData 2</code> to reduce flash writes ;-)</p>"},{"location":"Rules/#use-a-rotary-encoder","title":"Use a rotary encoder","text":"<p>You can capture in rules the value of a rotary encoder connected to 2 GPIOs configured as <code>Rotary_a|&lt;n&gt;</code> and <code>Rotary_b|&lt;n&gt;</code>. Optionally the button of the rotary encoder can be connected to another GPIO configured as <code>Button|&lt;n&gt;</code>. <code>&lt;n&gt;</code> must be the same to allow the encoder to manage 2 absolute counters from the same rotary encoder.</p> <p>To get triggers from the rotary encoder into rules, you must enable <code>SetOption98 1</code>. The rotary encoder <code>&lt;n&gt;</code> provides a JSON in the form of <code>{'Rotary&lt;n&gt;': {'Pos1': value, 'Pos2': value}}</code>. You can use the following rules triggers:</p> <pre><code>SetOption98 1\nRule1\n  ON Rotary1#Pos1 DO something_with %value% ENDON\n  ON Rotary1#Pos2 DO something_with %value% ENDON\n</code></pre>"},{"location":"Rules/#result_2","title":"Result","text":"<p><code>Pos1</code> is changed when the rotary encoder is turned while button is not pressed. <code>Pos2</code> is changed while button is pressed. Both <code>Pos1</code> and <code>Pos2</code> are published whatever is the button position, so both trig at the same time.</p> <p>The button will still have its default action (such as toggling power). If you want to avoid that, you need to capture the button into a dummy rule such as <code>ON Button1#state DO Delay 0 ENDON</code>.</p> <p>The step range of the rotary encoder can be selected using <code>SetOption43</code>, and the default is hardcoded in <code>#define ROTARY_MAX_STEPS 10</code>. To change the default range, set it in your <code>user_config_override.h</code> and recompile.</p>"},{"location":"Rules/#use-zigbee-to-control-tasmota-devices","title":"Use Zigbee to control Tasmota devices","text":"<p>This setup uses a Zigbee gateway with an Ikea remote switch paired. </p> <p>Ikea switch's name was set with <code>ZbName</code> to make it more user friendly.</p>"},{"location":"Rules/#rule_1","title":"Rule","text":"<pre><code>Rule1 on zbreceived#ikea_switch#power=1 do publish cmnd/backyard/POWER TOGGLE endon on zbreceived#ikea_switch#power=0 do publish cmnd/hall_light/POWER TOGGLE endon\n</code></pre>"},{"location":"Rules/#result_3","title":"Result","text":"<p>Pressing <code>I</code> on the Ikea switch will toggle <code>backyard</code> device and pressing <code>O</code> toggles <code>hall_light</code> device.</p>"},{"location":"Rules/#button-single-press-double-press-and-hold","title":"Button single press, double press and hold","text":"<p>This example show how to assign different behavior to a button other than Button1. Button1 has special multi-press behaviors associated with it (see Note in Multi-Press Functions), examples 1 and 2 cannot be applied to Button1.</p>"},{"location":"Rules/#1st-example","title":"1st example:","text":"<p>[assuming Button2 (or &gt;2) and Setoption73 0]</p> <ul> <li>single press: Toggle Power2 (or &gt;2)</li> <li>double press: send a mqtt message  </li> <li>hold 2 secs: send a different mqtt message</li> </ul> <pre><code>Backlog ButtonTopic 0; SetOption1 1; SetOption11 0; SetOption32 20\nRule1\n  ON button2#state=3 DO publish cmnd/topicHOLD/power2 2 ENDON\n  ON button2#state=2 DO publish cmnd/topicDOUBLEPRESS/power2 2 ENDON \nRule1 1\n</code></pre>"},{"location":"Rules/#2nd-example-with-setoption11-1","title":"2nd example with <code>Setoption11 1</code>:","text":"<p>[assuming Button2 (or &gt;2) and Setoption73 0]</p> <ul> <li>single press: send MQTT message</li> <li>double press: Toggle Power2 (or &gt;2) (SetOption11 swaps single and double press)</li> <li>hold 2 secs: send another mqtt message  </li> </ul> <pre><code>Backlog ButtonTopic 0; SetOption1 1; SetOption11 1; SetOption32 20  \nRule1\n  ON button2#state=3 DO publish cmnd/topicHOLD/power2 2 ENDON\n  ON button2#state=2 DO publish cmnd/topicSINGLEPRESS/power2 2 ENDON \nRule1 1\n</code></pre>"},{"location":"Rules/#3rd-example-for-button1","title":"3rd example for Button1:","text":"<p>For assigning different actions to multi-press on Button1, it is mandatory to detach buttons from  their default function using <code>SetOption73 1</code>. With <code>SetOption73 1</code> buttons only publish a MQTT message (<code>stat/tasmota/BUTTON&lt;x&gt; = {\"ACTION\":\"xxxx\"}</code>). To re-assign a specific action, rules must be used like below:</p> <ul> <li>single press: Toggle Power1</li> <li>double press: send a mqtt message  </li> <li>hold 2 secs: send a different mqtt message</li> </ul> <pre><code>Backlog ButtonTopic 0;  SetOption73 1; SetOption32 20\nRule1\n  ON button1#state=10 DO power1 2 ENDON\n  ON button1#state=3 DO publish cmnd/topicHOLD/power 2 ENDON\n  ON button1#state=11 DO publish cmnd/topicDOUBLEPRESS/power 2 ENDON\nRule1 1\n</code></pre> <p>Note</p> <p><code>SetOption73 1</code> detaches ALL buttons. If you have more than 1 button, you must create rules for each buttons where you want an action (other than publishing <code>stat/tasmota/BUTTON&lt;x&gt; = {\"ACTION\":\"xxxx\"}</code>)</p>"},{"location":"Rules/#disable-switch-single-press-and-use-long-press","title":"Disable switch single press and use long press","text":"<p><code>SetOption11 0</code> </p> <p>Switches do not have double press feature </p> <p>[assuming a connected pushbutton configured as Switch1]</p> <ul> <li>single press: Does nothing (empty <code>Delay</code> commands)  </li> <li>hold 2 secs: Toggle Power1</li> </ul> <pre><code>Backlog SwitchTopic1 0; SwitchMode1 5; SetOption32 20  \n</code></pre> <pre><code>Rule1\n  ON Switch1#State=3 DO Power1 2 ENDON\n  ON Switch1#State=2 DO Delay ENDON  \n</code></pre> <p><code>Rule1 1</code></p>"},{"location":"Rules/#execute-several-commands-when-a-timer-expires","title":"Execute several commands when a Timer expires","text":"<p>The default Timer1..16 functionality allows for controlling one output to either off, on, toggle or blink. When rules are enabled the blink option will be replaced by rule functionality allowing much more flexibility.</p> <p>Configure timer5 for rule execution when activated:  </p> <pre><code>Timer5 {\"Enable\":1,\"Mode\":0,\"Time\":\"16:00\",\"Days\":\"1111111\",\"Repeat\":1,\"Action\":3}\n</code></pre>"},{"location":"Rules/#rule_2","title":"Rule","text":"<pre><code>Rule1 ON clock#Timer=5 DO Backlog Power2 on; Power1 off; Power3 2 ENDON\n</code></pre>"},{"location":"Rules/#result_4","title":"Result","text":"<p>When the timer expires the rule kicks in and set Power1 to OFF, Power2 to ON and Power3 TOGGLE.</p> <p>If you want to have blink functionality define a rule like <code>ON clock#Timer=5 DO power 3 ENDON</code></p>"},{"location":"Rules/#setting-variables","title":"Setting variables","text":"<p>Demonstrate the use of variables. Make sure to execute commands <code>Rule 4</code>(Disable one-shot detection) first when trying the following example.</p> <p>Set a variable</p> <pre><code>Rule ON event#setvar1 DO var1 %value% ENDON\n</code></pre> <p>Command:  <code>event setvar1=1</code></p> <p>View a variable <pre><code>rule ON event#getvar1 DO var1 ENDON\n</code></pre></p> <p>Command:  <code>event getvar1</code></p> <ul> <li>Toggle a variable</li> </ul> <pre><code>Rule\n  ON event#togglevar1 DO event toggling1=%var1% ENDON\n  ON event#toggling1&lt;1 DO event setvar1=1 ENDON\n  ON event#toggling1&gt;0 DO event setvar1=0 ENDON\n  ON event#setvar1 DO var1 %value% ENDON\n</code></pre> <p>Command:  <code>event togglevar1</code></p> <p>Show Messages:</p> <pre><code>Rule ON event#message DO publish stat/[topic]/log %value% ENDON\n</code></pre> <p>Command:  <code>event message=INIT</code></p> <p>All event commands can be executed from:</p> <ul> <li>console: <code>event anyname=number</code></li> <li>mqtt:    <code>cmnd/[topic]/event anyname=number</code></li> </ul> <p>Everything together: </p> <pre><code>Rule1 \n  ON event#togglevar1 DO event toggling1=%var1% ENDON \n  ON event#toggling1&lt;1 DO event setvar1=1 ENDON \n  ON event#toggling1&gt;0 DO event setvar1=0 ENDON \n  ON event#setvar1 DO var1 %value% ENDON \n  ON event#getvar1 DO var1 ENDON \n  ON event#message DO publish stat/mqttTopic/log %value% ENDON\n</code></pre> <p>The following won't work:</p> <p><code>Rule1 ON event#setvar1 DO Backlog var1 %value%; Power1 %var1% ENDON</code></p> <p>At least not as you probably would expect. The <code>var1</code> value used by the <code>Power1</code> command will be the value present before the <code>Backlog</code> command is executed. This is so, because the rule will replace <code>%var1%</code> BEFORE the <code>Backlog</code> commands are put in the <code>Backlog</code> command stream.</p>"},{"location":"Rules/#time-delayed-auto-off-switch","title":"Time-delayed Auto-off Switch","text":""},{"location":"Rules/#rule_3","title":"Rule","text":"<pre><code>Rule1\n  ON button1#state DO Backlog Power1 %value%; RuleTimer1 600 ENDON\n  ON Rules#Timer=1 DO Power1 off ENDON\n</code></pre>"},{"location":"Rules/#result_5","title":"Result","text":"<p><code>on button1#state do Backlog Power1 %value%;</code> On Button press the Light will toggle on/off  </p> <p><code>RuleTimer1 600 ENDON</code> Additionally RuleTimer1 will begin to countdown 10 minutes  </p> <p><code>ON Rules#Timer=1 DO Power1 off ENDON</code> After the RuleTimer1 expires the light will be turned off (if you forgot to turn it off)  </p>"},{"location":"Rules/#time-delay-after-switch-off","title":"Time-delay After Switch Off","text":""},{"location":"Rules/#rule_4","title":"Rule","text":"<pre><code>Backlog switchmode1 1; rule1 1\n</code></pre> <pre><code>Rule1 ON switch1#state=1 DO Backlog Power1 on; ruletimer1 0 ENDON\nON switch1#state=0 DO ruletimer1 300 ENDON\nON rules#timer=1 DO Power1 0 ENDON\n</code></pre>"},{"location":"Rules/#result_6","title":"Result","text":"<p><code>ruletimer1 300</code> sets a 5 minute timer. After that time, fan will be switched off. If during the defined 5 minutes (or in general - when timer is counting) you the switch on, the timer will be canceled.</p> <p><code>switchmode1 1</code> sets the switch in follow mode (LOW=off, HIGH=on) If you have inverted switch (LOW=on, HIGH=off) then use <code>switchmode1 2</code> </p>"},{"location":"Rules/#auto-off-motion-sense-switch","title":"Auto-off Motion Sense Switch","text":"<p>Example works fine on a Wemos D1 Mini. Used as night light with motion sensor or as ambient light on floor or kitchen.</p> <p>Connect an LED Strip WS2812 on D1 and the PIR on D2 and a LDR on A0 (voltage divider with 10k ohm resistor)</p> <p><code>SwitchMode1 1</code></p>"},{"location":"Rules/#rule_5","title":"Rule","text":"<p><pre><code>Rule1\n  ON analog#a0&lt;400 DO Backlog Rule3 0; Rule2 1 ENDON\n  ON analog#a0&gt;500 DO Backlog Rule2 0; Rule3 1 ENDON\n</code></pre> <pre><code>Rule2\n  ON switch1#state DO Backlog Power1 1; RuleTimer1 30 ENDON\n  ON Rules#Timer=1 DO Power1 off ENDON\n</code></pre></p> <pre><code>Rule3\n  ON switch1#state DO Power1 off ENDON\n</code></pre> <p>Activate Rule1 with one shot detection <code>Backlog Rule1 1; Rule1 6</code> </p> <p>Optional <code>Backlog Rule2 4; Rule3 4</code> </p>"},{"location":"Rules/#result_7","title":"Result","text":"<p><code>on analog#a0&gt;400</code> disable Rule3 and activate Rule2</p> <p><code>on analog#a0&gt;500</code> disable Rule2 and activate Rule3</p> <p>Rule2 activates the LEDs for RuleTimer1 30 seconds on each trigger from PIR the RuleTimer start again.  </p> <p><code>on Rules#Timer=1 do Power1 off</code> The LEDs turn off after the RuleTimer expires  </p> <p>Rule3 is active on daylight and pipe the PIR signal in a Power1 off signal. The LEDs stay off.  </p>"},{"location":"Rules/#auto-off-if-or-when-current-is-idle","title":"Auto-off if or when current is idle","text":"<p>The example is used on a Sonoff POWR316D.</p> <p>It assumes an idle current of less than 0.1 amps and a grace period of 10 minutes to get consumption above the idle level.</p> <p>If the consumer uses less than 0.1 amps for more than 10 minutes, then it will be turned off.</p> <p>This works with either manually turning on power, using a timer or whatever.</p>"},{"location":"Rules/#rule_6","title":"Rule","text":"<pre><code>Rule1\n  ON system#boot DO var1 0 ENDON\n  ON ENERGY#Current==0.0 DO if (var1!=0) RuleTimer1 0; var1 0 endif BREAK\n  ON ENERGY#Current&gt;=0.1 DO if (var1!=0) RuleTimer1 0; var1 0 endif BREAK\n  ON ENERGY#Current&lt;0.1 DO if (var1!=1) RuleTimer1 600; var1 1 endif ENDON\n  ON Rules#Timer=1 DO Power1 off ENDON\n</code></pre>"},{"location":"Rules/#control-timers-from-a-switch","title":"Control Timers from a Switch","text":"<p>Assuming that your switch is on <code>GPIO00</code> and configured as <code>Switch1</code>:</p> <p><code>Switchmode1 1</code> will make Switch1#state be 1 when ON and 0 when OFF</p> <p>If you don't set <code>Switchmode1</code> or it is equal 0, it will only have <code>Switch1#state=2</code> (toggle) and the rule will not work.</p>"},{"location":"Rules/#rule_7","title":"Rule","text":"<pre><code>Rule1\n  ON Switch1#state=1 DO Timers 0 ENDON\n  ON Switch1#state=0 DO Timers 1 ENDON\n</code></pre>"},{"location":"Rules/#toggle-relay-when-holding-button-for-2-seconds","title":"Toggle Relay when holding button for 2 seconds","text":"<p>The following example is to explain how to catch and use the HOLD feature for buttons.</p> <p>Behavior: Disable Button1 Short Press and Toggle Relay1 only when holding button1 for 2 Seconds.</p> <pre><code>Backlog ButtonTopic 0; SetOption1 1; SetOption32 20\n</code></pre> <p><pre><code>Rule1\n  ON button1#state=3 DO Power1 2 ENDON\n  ON button1#state=2 DO delay ENDON\n</code></pre> <pre><code>Rule1 1\n</code></pre></p> <p>Commands Explanation</p> <p><code>ButtonTopic 0</code> : (default) To not use topics for buttons <code>SetOption1 1</code> : Allow only single, double and hold press button actions <code>SetOption32 20</code> : Set key hold time from 0.1 to 10 seconds (20 = 2 seconds) <code>Rule ON button1#state=3 DO Power1 2 ENDON</code> : When holding the button1 for 2 seconds it will toggle relay 1 (state = 3 means HOLD) <code>ON button1#state=2 DO delay ENDON</code> : Do nothing when short pressing the button1 (state = 2 means TOGGLE) <code>Rule1 1</code> : To enable rules  </p> <p>NOTE: There is no state value for \"double press\" for Buttons. It is designed that double press will toggle the relay. See Multi-Press Functions for more information.</p> <p>In the case you do not want the double press feature you can configure your button as switch and also set <code>SwitchMode</code> that fits your use case (such as <code>SwitchMode 5</code> to make the switch behave like a pushbutton) [SWITCH does not support double press] </p> <p>Another example but using switch instead of button:</p> <pre><code>Backlog SwitchTopic1 0; SwitchMode1 5; SetOption32 20\n\nRule1\n  ON switch1#state=3 DO Power1 2 ENDON\n  ON switch1#state=2 DO delay ENDON\n\nRule1 1\n</code></pre>"},{"location":"Rules/#make-sure-light-is-on-at-night","title":"Make sure Light is on at night","text":"<p>Using Timers, you can set a light to turn on and off to illuminate a street/patio by night. But if the device has no power at the trigger time, then, when it powers up, the light will be off all night. So, as a fail-safe, implement a conditional control to be checked at Tasmota Startup.</p> <p>Set Timers to turn on your light at Sunset and Turn off at sunrise. Use <code>poweronstate 0</code> in order to start with lights off when powering up your device. Set the following rules:</p> <pre><code>Rule1\n  ON Time#Initialized DO Backlog event checksunrise=%time%; event checksunset=%time% ENDON\n  ON event#checksunset&gt;%sunset% DO Power1 1 ENDON\n  ON event#checksunrise&lt;%sunrise% DO Power1 1 ENDON\n</code></pre> <p>The previous rules are conditionals that represent the following logic:</p> <p>IF %time%&gt;%sunset DO Power1 1 / IF %time%&lt;%sunrise DO Power1 1</p>"},{"location":"Rules/#turn-on-light-before-dawn-and-at-dusk","title":"Turn On Light Before Dawn and At Dusk","text":"<p>Turn on light at dusk until your nighttime and again in the morning before dawn. (memory variable method)</p> <p>What if the sun sets after your nighttime, as in during the summer? Then the timer will turn off the light at \"night\", but then the Sunset timer will turn it on again, so it stays on all night.  </p>"},{"location":"Rules/#rule_8","title":"Rule","text":"<pre><code>Rule1\n  ON Time#Initialized DO event chkSun ENDON\n  ON Time#Minute=%sunset% DO event chkSun ENDON\n  ON Time#Minute=%mem2% DO event chkSun ENDON\n  ON Time#Minute=%sunrise% DO event chkSun ENDON\n  ON Time#Minute=%mem1% DO event chkSun ENDON\n</code></pre> <pre><code>Rule2\n  ON event#chkSun DO Backlog var1 0; event chkSunrise=%time%; event chkSunset=%time%; event chkmorn=%time%; event chknight=%time%; event setPower ENDON\n  ON event#chkSunrise&lt;%sunrise% DO var1 1 ENDON\n  ON event#chkSunset&gt;=%sunset% DO var1 1 ENDON\n  ON event#chkmorn&lt;%mem1% DO var1 0 ENDON\n  ON event#chknight&gt;=%mem2% DO var1 0 ENDON\n  ON event#setPower DO Power1 %var1% ENDON\n</code></pre> <pre><code>Backlog mem1 360; mem2 1350; Rule1 1; Rule2 1\n</code></pre>"},{"location":"Rules/#result_8","title":"Result","text":"<ul> <li> <p>When device restarts, calculate if the light should be on or off <code>ON Time#Initialized DO event chkSun ENDON</code></p> </li> <li> <p>Calculate if the light should be on or off <code>ON Time#Minute=%sunset% DO event chkSun ENDON</code> <code>ON Time#Minute=%mem2% DO event chkSun ENDON</code> <code>ON Time#Minute=%sunrise% DO event chkSun ENDON</code> <code>ON Time#Minute=%mem1% DO event chkSun ENDON</code></p> </li> <li> <p>Calculate if the light should be on or off <code>on event#chkSun do Backlog</code></p> </li> <li> <p>Assume off <code>var1 0;</code></p> </li> <li> <p>Trigger each event with the current time <code>event chkSunrise=%time%; event chkSunset=%time%; event chkmorn=%time%; event chknight=%time%; event setPower</code></p> </li> <li> <p>End rule  <code>ENDON</code></p> </li> <li> <p>If before sunrise, turn on <code>ON event#chkSunrise&lt;%sunrise% DO var1 1 ENDON</code></p> </li> <li> <p>If past sunset, turn on <code>ON event#chkSunset&gt;=%sunset% DO var1 1 ENDON</code></p> </li> <li> <p>But if before Morning time (<code>mem1</code>), do not turn on <code>ON event#chkmorn&lt;%mem1% DO var1 0 ENDON</code></p> </li> <li> <p>Or if after Night time (<code>mem2</code>), do not turn on <code>ON event#chknight&gt;=%mem2% DO var1 0 ENDON</code></p> </li> <li> <p>Perform on/off state <code>ON event#setPower DO Power1 %var1% ENDON</code></p> </li> <li> <p>Set variables for Morning (06h00) and Night (22h30) times <code>Backlog mem1 360; mem2 1350</code></p> </li> <li> <p>Turn on the rule sets <code>Backlog Rule1 1; Rule2 1</code></p> </li> </ul>"},{"location":"Rules/#turn-on-light-before-dawn-and-at-dusk_1","title":"Turn On Light Before Dawn and At Dusk","text":"<p>Turn on light at dusk until your nighttime and again in the morning before dawn. (Web UI timer method)</p> <p>What if the sun sets after your nighttime, as in during the summer? Then the timer will turn off the light at \"night\", but then the Sunset timer will turn it on again, so it stays on all night.  This version uses the timers to set the actual time, using the %timerN% variables made availible in Tasmota V11. As a result, while the rule still needs to be applied by a skilled user, a less savvy family member can next choose or modify the desired times.</p>"},{"location":"Rules/#rule_9","title":"Rule","text":"<pre><code>Rule1\nON Time#Initialized DO event checktime=%time% ENDON\nON Clock#Timer DO event checktime=%time% ENDON\nON event#checktime DO %var10% 0 ENDON\nON event#checktime&gt;=%timer1% DO var10 1 ENDON\nON event#checktime&gt;=%timer2% DO var10 0 ENDON\nON event#checktime&gt;=%timer3% DO var10 1 ENDON\nON event#checktime&gt;=%timer4% DO var10 0 ENDON\nON event#checktime DO Power1 %var10% ENDON\n</code></pre> <p>You do need to make sure the timers are set to run rules instead of hard ON-OFF. Timer 1,3 are interpreted as ON, Timer 2,4 as OFF. Here are some example timers, on at 06h00, off at 23h00, but you can also set these in the Web UI     <pre><code>Timer1 {\"Enable\":1,\"Mode\":0,\"Time\":\"06:00\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":2,\"Action\":3}\nTimer2 {\"Enable\":1,\"Mode\":1,\"Time\":\"00:00\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":2,\"Action\":3}\nTimer3 {\"Enable\":1,\"Mode\":2,\"Time\":\"00:00\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":2,\"Action\":3}\nTimer4 {\"Enable\":1,\"Mode\":0,\"Time\":\"23:00\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":2,\"Action\":3}\n</code></pre></p> <p>The basic rule above works for all situations where the sun (with or without offset) or scheduled time does not pass midnight. The more advanced version below works (from #16914 onward) also if the sunset or scheduled time is after midnight, or even if there is no sunset at all (permanent daylight or night in north scandinavia) <pre><code>Rule1\nON Time#Initialized DO event checktime=%time% ENDON\nON Clock#Timer DO event checktime=%time% ENDON\nON event#checktime DO Backlog var1 %timer1%; var2 %timer2%; var3 %timer3%; var4 %timer4%; var5 %value%; var6 %value%; var10 0; event checknoon=%value%; ENDON\nON var1#state&gt;1140 DO sub1 1440 ENDON\nON var2#state&gt;1140 DO sub2 1440 ENDON\nON var5#state&gt;1140 DO sub5 1440 ENDON\nON var3#state&lt;=420 DO add3 1440 ENDON\nON var4#state&lt;=420 DO add4 1440 ENDON\nON var6#state&lt;=420 DO add6 1440 ENDON\nON event#checknoon DO Backlog event checkafternoon=%var6% ENDON\nON event#checknoon&lt;=780 DO Backlog event checkmorning=%var5%; event settime ENDON\nON event#checknoon&gt;780 DO Backlog event checkafternoon=%var6%; event settime ENDON\nON event#checkmorning&gt;=%var1% DO var10 1 ENDON\nON event#checkmorning&gt;=%var2% DO var10 0 ENDON\nON event#checkafternoon&gt;=%var3% DO var10 1 ENDON\nON event#checkafternoon&gt;=%var4% DO var10 0 ENDON\nON event#settime DO Power1 %var10% ENDON\n</code></pre> For an attempted explanation of above advanced rule, please refer to the design and test XLS in #16914</p>"},{"location":"Rules/#enable-a-pir-switch-only-at-night","title":"Enable a PIR Switch only at night","text":"<p>Latitude and Longitude need to be set in config. Use PulseTime to specify the duration the light should remains on. Every PIR trigger will restart for that amount of time.</p> <pre><code>SwitchMode1 14\nPulseTime 60\n</code></pre> <pre><code>Rule1\n  ON Switch1#state=1 DO Backlog event checksunrise=%time%; event checksunset=%time% ENDON\n  ON event#checksunrise&lt;%sunrise% DO Power1 1 ENDON\n  ON event#checksunset&gt;%sunset% DO Power1 1 ENDON\n</code></pre>"},{"location":"Rules/#control-luminance-switch-with-timer","title":"Control luminance switch with Timer","text":"<p>Background: Tasmota powers a Sonoff Basic attached to a TS-2561 Luminance Sensor. This switch toggles a lamp ON or OFF. The switch should work as below:  i) during daytime (sunrise-sunset): ON when it is too dark (&lt;150 lx)  and OFF when it gets brighter (&gt;175 lx).  ii) during evenings it ignores the sensor and turns on at sunset and turns off after about 5 hours </p> <p>Approach: Used a combination of Clock Timers and Rule to do this. </p> <p>Timer 1: Power ON switch at Sunset Powers on the switch at sunset with an offset of 20 minutes. Repeats every day. <pre><code>Timer1 {\"Enable\":1,\"Mode\":2,\"Time\":\"-00:20\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":1,\"Action\":1}\n</code></pre></p> <p>Timer 2: Power OFF switch at Night. Turns power OFF at 23.00hrs. Repeats every day. <pre><code>Timer2 {\"Enable\":1,\"Mode\":0,\"Time\":\"23:00\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":1,\"Action\":0}\n</code></pre></p> <p>Timer 3: Trigger Luminance Rule at Sunrise Start watching the Lux sensor 15 minutes after sunrise. <pre><code>Timer3 {\"Enable\":1,\"Mode\":1,\"Time\":\"00:15\",\"Window\":0,\"Days\":\"1111111\",\"Repeat\":1,\"Output\":1,\"Action\":3}\n</code></pre></p> <p>Rule 1: Main Rule to check Luminance If Luminance is less than 150lx, power ON. If it goes beyond 175lx, power OFF. <pre><code>Rule1\n  ON tele-TSL2561#Illuminance&lt;150 DO Power1 1 ENDON\n  ON tele-TSL2561#Illuminance&gt;175 DO Power1 0 ENDON \n\nRule1 1\n```haskell\n\n**Rule 2:** Trigger Rule1 only in the Mornings  \nThis ensures that Rule1 is triggered when Timer3 starts (in the morning) and stops when Timer1 starts (in the evenings).  \n```haskell\nRule2\n  ON Clock#Timer=3 DO Rule1 1 ENDON\n  ON Clock#Timer=1 DO Rule1 0 ENDON\n\nRule2 1\n</code></pre></p>"},{"location":"Rules/#automatically-vary-the-color-temperature-of-a-cct-light","title":"Automatically vary the color temperature of a CCT light","text":"<p>Background: Tasmota powers a CCT light which is adjustable from cool white to warm white. You want the color temperature to automatically vary between cool (CT=153) at midday to warm (CT=500) at midnight.</p> <p>Approach: Check that your timezone and DST (if applicable) are set correctly and the time is correctly set on your light using NTP. Create the two rules to scale the CT based on the time of day. If Wifi is unavailable or NTP can't determine the time of day then the light will default to the mid point for neutral white (CT=326). Adjusting the CT will switch the light on so Rule 2 disables and enables Rule 1 according to the state of the light.</p> <p>Rule 1: Set the CT according to the time of day.</p> <p><pre><code>rule1 \n    on Power1#Boot do CT 326 endon\n    on Time#Initialized do backlog event myCT=%time% endon\n    on Time#Minute do backlog event myCT=%time% endon\n    on event#myCT&lt;=720 do backlog scale1 %time%,0,720,500,153; event updateCT endon\n    on event#myCT&gt;720 do backlog scale1 %time%,720,1440,153,500; event updateCT endon\n    on event#updateCT do CT %var1% endon\nrule1 1\n</code></pre> Rule 2: Toggle rule 1 on and off with the light and also update the CT for the current time when the light is switched on.</p> <p><pre><code>Rule2 on Power1#State do backlog Rule1 %value%; event myCT=%time% endon\nRule2 1\n</code></pre> Notes:</p> <p>When the light is powered up on it should change to neutral white for a few seconds while Wifi, MQTT and NTP are initialised then switch to the correct color temperature for the time of day. If the light is switched off in software then it will come back on with the previous CT then update to the current CT after a few seconds.</p> <p>If you have a RGBCCT light then the CT light may be Power2 rather than Power1.</p> <p>It is possible to use %sunrise% and %sunset% to adjust the CT if you set your latitude, longitude and elevation but it's much more complex especially at extreme Northern and Southern latitudes. </p>"},{"location":"Rules/#perform-any-action-on-singledouble-press-for-switches-and-buttons","title":"Perform any action on single/double press (for switches AND buttons)","text":""},{"location":"Rules/#rule_10","title":"Rule","text":"<p><code>SwitchMode 5</code></p> <pre><code>Rule1\n  ON switch1#state==2 DO add1 1 ENDON\n  ON switch1#state==2 DO Power1 2 ENDON\n  ON var1#state!=0 DO Backlog delay 6;var1 0 ENDON\n  ON var1#state==2 DO publish cmnd/othertasmota/POWER toggle ENDON\n</code></pre> <p><code>Rule1 on</code></p>"},{"location":"Rules/#result_9","title":"Result","text":"<ul> <li>each toggle of the switch triggers first condition and adds 1 to our variable (var1 in the example),</li> <li>each toggle of the switch toggles the associated relay (<code>Power1 2</code> - but can do anything else instead, <code>Publish</code> for example)</li> <li>when var1 changes to non zero, we set it back to 0 but after a <code>Delay</code> (arbitrarily chosen 6 here - 0.6 seconds)</li> <li>when var1 reaches 2 (i.e. the switch has been toggled twice within the last 0.6 seconds), desired action is triggered (here: <code>Publish</code> to <code>othertasmota</code>)</li> </ul> <p>Every time you press the switch, your light toggles state (as it should). If you do press the switch twice in a rapid succession (i.e., double-click), you can trigger a different action (e.g., on a remote device).</p>"},{"location":"Rules/#enable-or-disable-relay-with-a-switch-in-domoticz","title":"Enable or disable relay with a switch in Domoticz","text":"<p>When you want to send MQTT messages ( we use domoticz in this example ) and choose when you want the relay on or off, by simply sending HTTP commands to trigger an event.  </p> <p>Initial Config:</p> <ul> <li>PushButton Doorbell</li> <li>(Sonoff Basic R1) GPIO14 - Switch4 (12)</li> </ul> <p>Connect the Switch to GND and the GPIO on your device. Be sure put a 4.7k resistor between VCC(3.3v) and the GPIO. This prevents ghost switching (capacitor is optional) See: YouTube </p> <p>Dont forget to change the IDX value</p> <p>Commands:</p> <pre><code>Backlog SwitchTopic 0; SwitchMode4 2; SetOption0 0; PowerOnState 0\n\nvar1 1\n\nRule1\n  ON event#doorbell DO var1 %value% ENDON\n  ON switch4#state=1 DO publish domoticz/in {\"idx\":11,\"nvalue\":1} ENDON\n  ON switch4#state=1 DO Power1 %var1% ENDON\n  ON switch4#state=0 DO publish domoticz/in {\"idx\":11,\"nvalue\":0} ENDON\n  ON switch4#state=0 DO Power1 0 ENDON\n\nRule1 1\n</code></pre> <p>Usage: </p> <p>Turn off the relay by calling the event using HTTP: <code>http://&lt;tasmotaIP&gt;/cm?cmnd=event%20doorbell=0</code> </p> <p>Turn on the relay by calling the event using HTTP: <code>http://&lt;tasmotaIP&gt;/cm?cmnd=event%20doorbell=1</code> </p> <p>If your Tasmota device is password protected, which is most common, then use the following HTTP commands instead. Make sure you change <code>&lt;tasmotaUsername&gt;</code> and <code>&lt;tasmotaPassword&gt;</code> </p> <p>Off: <code>http://&lt;tasmotaIP&gt;/cm?&amp;user=&lt;tasmotaUsername&gt;&amp;password=&lt;tasmotaPassword&gt;&amp;cmnd=event%20doorbell=0</code> On: <code>http://&lt;tasmotaIP&gt;/cm?&amp;user=&lt;tasmotaUsername&gt;&amp;password=&lt;tasmotaPassword&gt;&amp;cmnd=event%20doorbell=1</code></p>"},{"location":"Rules/#force-automatic-re-connection-to-mqtt-server-via-sd-dns","title":"Force automatic re-connection to MQTT server via SD DNS","text":"<p>In order to search for the MQTT server using SD-DNS service (a.k.a. Bonjour or Zero Network Configuration) the suggested configuration is to leave the MQTT Host field blank.</p> <p>The standard behavior of Tasmota is </p> <ul> <li>searches for _mqtt._tcp service</li> <li>resolve that to the proper IP address</li> <li>connect to it </li> <li>in case the connection is successful, retain the IP address and use that in the subsequent connections</li> </ul> <p>The above is not proper, though, in case you have a redundant MQTT (e.g., two MQTT server synchronized). In such case, when the active MQTT fails for any reason, the expected behavior is to achieve automatic re-connection to the other MQTT server.</p> <p>That can be easily configured defining the following rule on the device console:</p> <pre><code>Rule1 ON Mqtt#Disconnected DO MqttHost 0 ENDON\nRule1 1\n</code></pre> <p>If the MqttHost field already contains an IP, you have to delete it using the web interface or the following MQTT command:</p> <pre><code>mosquitto_pub -h mqtt_server.local -t \"cmnd/mqttTopic/MqttHost\" -m ''\n</code></pre>"},{"location":"Rules/#change-distance-to-percentage","title":"Change distance to percentage","text":"<p>When measuring distance and you have the need to see it in percentage of distance. In the example 100% is everything below 69cm and 0% is everything above 128cm. This is used for showing fill percentage of a wood pellets storage.</p> <pre><code>Rule1\n  ON tele-SR04#distance DO Backlog var1 %value%; event checklimit=%value%; event senddistance ENDON\n  ON event#checklimit&gt;128 DO var1 128 ENDON\n  ON event#checklimit&lt;69 DO var1 68 ENDON\n  ON event#senddistance DO Backlog SCALE1 %var1%, 128, 69, 0, 100; event pubdata ENDON\n  ON event#pubdata DO publish tele/pannrum-temp/SENSOR %var1% ENDON\n\nRule1 1\n</code></pre>"},{"location":"Rules/#distinguish-switch1-and-switch2-without-the-use-of-relay1-and-relay2","title":"Distinguish Switch1 and Switch2 (without the use of Relay1 and Relay2)","text":"<p>When two (or more) switches are defined as input and you want to distinguish these in the RESULT topic without the use of Relays, then consider the following rules. </p> <ul> <li> <p>SwitchMode1 1 will make Switch1#state to be 1 when ON and 0 when OFF <code>SwitchMode1 1</code></p> </li> <li> <p>SwitchMode2 1 will make Switch2#state to be 1 when ON and 0 when OFF <code>SwitchMode2 1</code></p> </li> <li> <p>Publish json with key POWER1 and value %value% <pre><code>Rule1 ON switch1#state DO publish stat/wemos-4/RESULT {\"POWER1\":\"%value%\"} ENDON\n</code></pre></p> </li> <li> <p>Publish json with key POWER2 and value %value% <pre><code>Rule2 ON switch2#state DO publish stat/wemos-4/RESULT {\"POWER2\":\"%value%\"} ENDON\n</code></pre></p> </li> <li> <p>Enable Rules   <code>Backlog Rule1 1; Rule2 1</code></p> </li> </ul> <p>Output:</p> <pre><code>RUL: SWITCH1#STATE performs \"publish stat/wemos-4/RESULT {\"POWER1\":\"1\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER1\":\"1\"}\nRUL: SWITCH2#STATE performs \"publish stat/wemos-4/RESULT {\"POWER2\":\"1\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER2\":\"1\"}\nRUL: SWITCH1#STATE performs \"publish stat/wemos-4/RESULT {\"POWER1\":\"0\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER1\":\"0\"}\nRUL: SWITCH2#STATE performs \"publish stat/wemos-4/RESULT {\"POWER2\":\"0\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER2\":\"0\"}\nRUL: SWITCH1#STATE performs \"publish stat/wemos-4/RESULT {\"POWER1\":\"1\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER1\":\"1\"}\nRUL: SWITCH1#STATE performs \"publish stat/wemos-4/RESULT {\"POWER1\":\"0\"}\"\nMQT: stat/wemos-4/RESULT = {\"POWER1\":\"0\"}\n</code></pre>"},{"location":"Rules/#receiving-state-of-anything-that-triggers-switch-more-than-one-time","title":"Receiving state of anything that triggers SWITCH more than one time","text":"<p>With analog intercom doorbells you can take out info about ringing from speaker voltage. You can connect GPIO to it via opto-isolator and resistor to take out state. But even with those speaker voltage is dropping so it switches the device multiple times. <pre><code>MQT: cmnd/doorbell/POWER2 = OFF (retained)\nMQT: cmnd/doorbell/POWER2 = ON (retained)\nMQT: cmnd/doorbell/POWER2 = OFF (retained)\nMQT: cmnd/doorbell/POWER2 = ON (retained)\nMQT: cmnd/doorbell/POWER2 = OFF (retained)\n</code></pre></p> <p>To solve it we can use rules. <pre><code>SwitchTopic 0\n\nRule1\n  on System#Boot DO var1 0 ENDON\n  ON Switch2#State DO Backlog add1 1; event START ENDON\n  ON event#START DO event BELL=%var1% ENDON\n  ON event#BELL=1.000 DO Backlog publish cmnd/bell/power on; RuleTimer1 60 ENDON\n  ON event#BELL=0 DO publish cmnd/bell/power off ENDON\n  ON Rules#Timer=1 DO Backlog var1 0; event BELL=0 ENDON\n\nRule1 1\n</code></pre></p> <p>description:</p> <ul> <li>Disable SwitchTopic as it overrides rules for switches: <code>SwitchTopic 0</code></li> <li>on system boot set var1 to 0</li> <li>on switch2 click (person pushing doorbell) - var1 += 1; trigger event START</li> <li>on START - set event BELL equal to var1</li> <li>if event#BELL=1 (triggered first time) publish mqtt message ON and trigger RulesTimer1 for 60 seconds</li> <li>if event#BELL=0 publish mqtt message OFF </li> <li>on RulesTimer1 - reset var1 to 0, and call event#BELL.</li> <li>enable rule 1</li> </ul> <p>In this case we have lock for 60 seconds for multiple people calls or to be resistant for speaker voltage drops.</p>"},{"location":"Rules/#prevent-wemos-d1-mini-load-overcurrent","title":"Prevent Wemos D1 mini load overcurrent","text":"<p>As a WS2812 24 led ring draws approximately 24x3x20 mA = 1.44A and the Wemos D1 mini powered from a PC's USB port can only provide up to 0.5A it would be nice to have some kind of mechanism in place to limit the amount of current to the WS2812 LEDring to 0.1A. This is still enough to light all 24 leds up to color 202020.</p> <p>Hardware</p> <ul> <li>Wemos D1 mini</li> <li>INA219 I<sup>2</sup>C sensor</li> <li>WS2812 LEDring with 24 LEDs powered by the Wemos D1 mini 5V thru the INA219 sensor</li> </ul> <pre><code>Rule1 ON INA219#Current&gt;0.100 DO Backlog Dimmer 10;Color 10,0,0 ENDON\nRule1 on\n</code></pre> <p>Result - When a user raises brightness to a level using more than 0.1A the rule kicks in and lowers the current by executing command <code>Dimmer 10</code> and changes the color to Red with command <code>Color 10,0,0</code>.</p>"},{"location":"Rules/#using-dummy-gpio-to-send-serial-codes-to-an-mcu","title":"Using dummy GPIO to send Serial codes to an MCU","text":"<p>By having a device that controls all its features through an MCU and reports the states in serial codes to the ESP8266 we have to create some rules to control it using the Web UI or standard Power commands.</p> <p><pre><code>Rule1\n  ON Power1#state=1 DO serialsend5 55AA00060005020400010213 ENDON \n  ON Power1#state=0 DO serialsend5 55AA00060005020400010011 ENDON \n  ON Power2#state=1 DO serialsend5 55AA00060005060400010217 ENDON \n  ON Power2#state=0 DO serialsend5 55AA00060005060400010015 ENDON\n</code></pre> Power1 controls the device, Power2 turn on and off the light on the device.</p> <p>Another rule was created to issue commands on boot so the serial interface works every time and to control the built in fan using Event triggers and have its state retained in an MQTT message for Home Assistant.</p> <pre><code>Rule2 \n  ON system#boot DO Backlog baudrate 9600; seriallog 2; serialsend5 55aa000300010306 ENDON \n  ON event#high DO Backlog serialsend5 55AA00060005650400010175; publish2 stat/diffuser/FAN high ENDON \n  ON event#low DO Backlog serialsend5 55AA00060005650400010074; publish2 stat/diffuser/FAN low ENDON\n</code></pre>"},{"location":"Rules/#arithmetic-commands-used-with-var","title":"Arithmetic commands used with VAR","text":"<p>Note</p> <p>The arithmetic is done using single point precision floating point. This means calculations involving values larger than approximately 16 million (ex: <code>%utctime%</code>) will not be precise.</p>"},{"location":"Rules/#add","title":"ADD","text":"<p><code>ADD1</code> to <code>ADD16</code>: Add a value to <code>VARx</code>   Syntax: <code>ADDx value</code>   Usage: <code>ADD1 15</code>   Result: <code>VAR1 = VAR1 + 15</code> </p>"},{"location":"Rules/#subtract","title":"SUBTRACT","text":"<p><code>SUB1</code>to <code>SUB16</code>: Subtract a value from <code>VARx</code>   Syntax: <code>SUBx value</code>   Usage: <code>SUB1 15</code>   Result: <code>VAR1 = VAR1 - 15</code> </p>"},{"location":"Rules/#multiply","title":"MULTIPLY","text":"<p><code>MULT1</code>to <code>MULT16</code>: Multiply a value to <code>VARx</code>   Syntax: <code>MULTx value</code>   Usage: <code>MULT1 15</code>   Result: <code>VAR1 = VAR1 * 15</code> </p>"},{"location":"Rules/#scale-a-value","title":"SCALE A VALUE","text":"<p><code>SCALE1</code>to <code>SCALE16</code>: Scale a value from a low and high limit to another low and high limit and store it in <code>VARx</code> (directly equivalent to MAP arduino command)  </p> <p>Syntax: <code>SCALEx value, fromLow, fromHigh, toLow, toHigh</code> </p> <p>where,  </p> <p>value: the number to scale fromLow: the lower bound of the value\u2019s current range fromHigh: the upper bound of the value\u2019s current range toLow: the lower bound of the value\u2019s target range toHigh: the upper bound of the value\u2019s target range  </p> <p>(omitted values are taken as zero) </p> <p>Usage: <code>SCALE1 15, 0, 100, 0, 1000</code>   Result: <code>VAR1 = 150</code> </p>"},{"location":"Rules/#transmit-sensor-value-only-when-a-delta-is-reached","title":"Transmit sensor value only when a delta is reached","text":"<p>Send only when the sensor value changes by a certain amount.  </p> <pre><code>Rule1\n  ON SI7021#temperature&gt;%var1% DO Backlog var1 %value%; publish stat/mqttTopic/temp %value%; var2 %value%; add1 2; sub2 2 ENDON\n  ON SI7021#temperature&lt;%var2% DO Backlog var2 %value%; publish stat/mqttTopic/temp %value%; var1 %value%; add1 2; sub2 2 ENDON\n</code></pre> <p>This example explains expands on the above example while matching typical sensor data.  Helpful for HA tasmota integration sensors when polling and adding in delta value changes.</p> <p>Normal polling data below <pre><code>23:58:41 MQT: tele/ds1820/SENSOR = {\"Time\":\"2021-01-13T23:58:41\",\"DS18B20\":{\"Id\":\"030597946B04\",\"Temperature\":20.9},\"TempUnit\":\"C\"}\n</code></pre> The matching rule.</p> <pre><code>Rule1 \n  ON DS18B20#temperature&gt;%var1% DO Backlog var1 %value%; publish tele/ds1820/SENSOR {\"Time\":\"%timestamp%\",\"DS18B20\":{\"Id\":\"030597946B04\",\"Temperature\":%value%},\"TempUnit\":\"C\"}; var2 %value%; add1 0.5; sub2 0.5 ENDON \n  ON DS18B20#temperature&lt;%var2% DO Backlog var2 %value%; publish tele/ds1820/SENSOR {\"Time\":\"%TIMESTAMP%\",\"DS18B20\":{\"Id\":\"030597946B04\",\"Temperature\":%value%},\"TempUnit\":\"C\"}; var1 %value%; add1 0.5; sub2 0.5 ENDON\n</code></pre>"},{"location":"Rules/#adjust-a-value-and-send-it-over-mqtt","title":"Adjust a value and send it over MQTT","text":"<p>This example adds 2 degrees to the measured temperature and then sends that value to an MQTT topic.</p> <pre><code>Rule1\n  ON tele-SI7021#temperature DO Backlog var1 %value%; add1 2; event sendtemp ENDON\n  ON event#sendtemp DO publish stat/mqttTopic/temp %var1% ENDON\n</code></pre>"},{"location":"Rules/#control-relays-via-serial","title":"Control relays via serial","text":"<p>This example switches connected relays over the software serial on and off.</p> <p>Write the following rules:</p> <pre><code>rule1\n  ON SSerialReceived#Data=on DO Power1 1 ENDON\n  ON SSerialReceived#Data=off DO Power1 0 ENDON\n</code></pre> <p>receiving <code>on</code> and <code>off</code> results in</p> <pre><code>MQT: tele/mqttTopic/RESULT = {\"SSerialReceived\":\"on\"}\nRUL: SSERIALRECEIVED#DATA=ON performs \"Power1 1\"\nMQT: stat/mqttTopic/RESULT = {\"POWER\":\"ON\"}\nMQT: stat/mqttTopic/POWER = ON\nMQT: tele/mqttTopic/RESULT = {\"SSerialReceived\":\"off\"}\nRUL: SSERIALRECEIVED#DATA=OFF performs \"Power1 0\"\nMQT: stat/mqttTopic/RESULT = {\"POWER\":\"OFF\"}\nMQT: stat/mqttTopic/POWER = OFF\n</code></pre>"},{"location":"Rules/#processing-json-received-from-softwareserialbridge","title":"Processing JSON received from (Software)SerialBridge","text":"<p>When using SerialBridge (or SoftwareSerialBridge), the received string will be published to Rules as SerialReceived (or SSerialReceived). If the string starts with a <code>{</code> then Tasmota will parse the string as a JSON and make the different keys available for Rules. For example with the following string <code>{\"DeviceID\":\"TM182\",\"Temp\":25.3,\"Hum\":50}</code>, it is possible to use any of the keys in the trigger. <pre><code>rule1\n  ON SSerialReceived#DeviceID DO var1 %value% ENDON\n  ON SSerialReceived#Temp DO var2 %value% ENDON\n  ON SSerialReceived#Hum DO publish /some/topic/%var1% {\"Temperature\":%var2%,\"Humidity\":%value%} ENDON\n</code></pre></p> <p>The 1st and 2nd rules store the values for <code>Device</code> and <code>Temp</code> into variables. The last key triggers the 3rd rule, here re-publication on a different topic.</p> <p>Execution: <pre><code>12:51:48.050 MQT: tele/nodemcu/SSERIALRECEIVED = {\"SSerialReceived\":{\"DeviceID\":\"TM182\",\"Temp\":25.3,\"Hum\":50}}\n12:51:48.064 RUL: SSERIALRECEIVED#DEVICEID performs \"var1 TM182\"\n12:51:48.071 MQT: stat/nodemcu/VAR = {\"Var1\":\"TM182\"}\n12:51:48.083 RUL: SSERIALRECEIVED#TEMP performs \"var2 25.3\"\n12:51:48.091 MQT: stat/nodemcu/VAR = {\"Var2\":\"25.3\"}\n12:51:48.104 RUL: SSERIALRECEIVED#HUM performs \"publish /some/topic/TM182 {\"Temperature\":25.3,\"Humidity\":50}\"\n12:51:48.110 MQT: /some/topic/TM182 = {\"Temperature\":25.3,\"Humidity\":50}\n</code></pre></p> <p>Note</p> <p>It is important that the receive string strictly starts with the opening <code>{</code>. If other characters, such as   spaces or new line are inserted before, Tasmota will not par as a JSON. Characters after the    closing <code>}</code> are not a problem.</p>"},{"location":"Rules/#using-break-to-simulate-ifelseifelseendif","title":"Using BREAK to simulate IF..ELSEIF..ELSE..ENDIF","text":"<p><code>BREAK</code> is an alternative to <code>ENDON</code>. <code>BREAK</code> will stop the execution for the triggers that follow. If a trigger that ends with <code>BREAK</code> fires, then the following triggers of that rule will not be executed. This allows to simulate <code>IF..ELSEIF..ELSE..ENDIF</code></p> <p>Example: <pre><code>IF temp &gt; 85 then\n  VAR1 more85\nELSEIF temp &gt; 83 then\n  VAR1 more83\nELSEIF temp &gt; 81 then\n  VAR1 more81\nELSEIF temp = 81 then\n  VAR1 equal81\nELSE\n  VAR1 less81\nENDIF\n</code></pre></p> <p>With the actual rules, if we use a set like the following: <pre><code>Rule1\n  ON event#temp&gt;85 DO VAR1 more85 ENDON\n  ON event#temp&gt;83 DO VAR1 more83 ENDON\n  ON event#temp&gt;81 DO VAR1 more81 ENDON\n  ON event#temp=81 DO VAR1 equal81 ENDON\n  ON event#temp&lt;81 DO VAR1 less81 ENDON\n</code></pre></p> <p>This is the output in the console: <pre><code>CMD: rule\nMQT: stat/living/RESULT = {\"Rule1\":\"ON\",\"Once\":\"ON\",\"StopOnError\":\"OFF\",\"Free\":322,\"Rules\":\"ON event#temp&gt;85 do VAR1 more85 ENDON ON event#temp&gt;83 do VAR1 more83 ENDON on event#temp&gt;81 do VAR1 more81 ENDON on event#temp=81 do VAR1 equal81 ENDON on event#temp&lt;81 DO VAR1 less81 ENDON\"}\nCMD: event temp=10\nMQT: stat/living/RESULT = {\"Event\":\"Done\"}\nRUL: EVENT#TEMP&lt;81 performs \"VAR1 less81\"\nMQT: stat/living/RESULT = {\"Var1\":\"less81\"}\nCMD: event temp=100\nMQT: stat/living/RESULT = {\"Event\":\"Done\"}\nRUL: EVENT#TEMP&gt;85 performs \"VAR1 more85\"\nMQT: stat/living/RESULT = {\"Var1\":\"more85\"}\nRUL: EVENT#TEMP&gt;83 performs \"VAR1 more83\"\nMQT: stat/living/RESULT = {\"Var1\":\"more83\"}\nRUL: EVENT#TEMP&gt;81 performs \"VAR1 more81\"\nMQT: stat/living/RESULT = {\"Var1\":\"more81\"}\n</code></pre> So, all the triggers where TEMP&gt;100, are firing. With the <code>BREAK</code> statement the rule set can be changed to: <pre><code>Rule\n  on event#temp&gt;85 do VAR1 more85 break\n  on event#temp&gt;83 do VAR1 more83 break\n  ON event#temp&gt;81 DO VAR1 more81 ENDON\n  ON event#temp=81 DO VAR1 equal81 ENDON\n  ON event#temp&lt;81 DO VAR1 less81 ENDON\n</code></pre></p> <p>Which will result in the following output: <pre><code>CMD: rule\nRSL: RESULT = {\"Rule1\":\"ON\",\"Once\":\"OFF\",\"StopOnError\":\"OFF\",\"Free\":321,\"Rules\":\"ON event#temp&gt;85 do VAR1 more85 break ON event#temp&gt;83 do VAR1 more83 break on event#temp&gt;81 do VAR1 more81 ENDON on event#temp=81 do VAR1 equal81 ENDON on event#temp&lt;81 DO VAR1 less81 ENDON\"}\nCMD: event temp=10\nRSL: RESULT = {\"Event\":\"Done\"}\nRUL: EVENT#TEMP&lt;81 performs \"VAR1 less81\"\nRSL: RESULT = {\"Var1\":\"less81\"}\nCMD: event temp=100\nRSL: RESULT = {\"Event\":\"Done\"}\nRUL: EVENT#TEMP&gt;85 performs \"VAR1 more85\"\nRSL: RESULT = {\"Var1\":\"more85\"}\nCMD: event temp=83\nRSL: RESULT = {\"Event\":\"Done\"}\nRUL: EVENT#TEMP&gt;81 performs \"VAR1 more81\"\nRSL: RESULT = {\"Var1\":\"more81\"}\n</code></pre></p>"},{"location":"Rules/#adjust-powerdelta-according-to-current-power-values","title":"Adjust PowerDelta according to current Power values","text":"<p>Power sensor reporting thresholds are set by a percentage change in the Power value by setting PowerDelta. Power changes from 10W to 11W (10%) may not be very interesting. But power changes from 1000W to 1100W (also 10%) could be very important. To avoid getting reports for small changes but ensuring that larger power swings are reported, a rule set can be used to create a gradient threshold based on the absolute power values.</p> <p>This rule also uses the one-shot feature of rules to avoid reporting of every small change within a threshold window. The rule (a ON/DO/ENDON rule in this the set) will trigger only once when a threshold is crossed.</p> <pre><code>Backlog PowerDelta 0; Rule1 0; Rule1 5\n\nRule1\n  ON ENERGY#Power&gt;=35 DO Backlog PowerDelta 10; Status 8 BREAK \n  ON ENERGY#Power&gt;=15 DO Backlog PowerDelta 25; Status 8 BREAK \n  ON ENERGY#Power&gt;5 DO Backlog PowerDelta 35; Status 8 BREAK \n  ON ENERGY#Power&lt;=5 DO PowerDelta 100 ENDON\n\nRule1 1\n</code></pre> <p>Which translates (pseudo code): <pre><code>IF ENERGY#Power&gt;=35  // ENERGY#Power GE 35\n  DO Backlog PowerDelta 10; Status 8\nELSE IF ENERGY#Power&gt;=15  // ENERGY#Power GE 15 and LT 35\n  DO Backlog PowerDelta 25; Status 8\nELSE IF ENERGY#Power&gt;5  // ENERGY#Power GT 5 and LT 15\n  DO Backlog PowerDelta 35; Status 8\nELSE  // ENERGY#Power changed (i.e. LE 5)\n  DO PowerDelta 100\n</code></pre></p>"},{"location":"Rules/#forward-ir-signals","title":"Forward IR signals","text":"<p>Using one IR receiver and one sender (or both extender) you can simply forward signals from one to another using the following rule <pre><code>rule1 ON IRreceived#Data DO publish cmnd/irsideboard/irsend {Protocol:NEC,Bits:32,Data:%value%} ENDON\n</code></pre></p>"},{"location":"Rules/#garage-door-opener","title":"Garage Door Opener","text":"<p>(#3942)</p> <p>// Set the relay on time to signal the opener <code>PulseTime 7</code></p> <p>// Send ON and OFF as the switch is ON or OFF <pre><code>Backlog SwitchMode1 1; SwitchMode2 1; SwitchMode3 1\n</code></pre></p> <p>//No need to save changes on power cycle <code>SetOption0 0</code></p> <p>//Don\u2019t blindly run the door on power up <code>PowerOnState 0</code></p> <p>//One shot Detection off <pre><code>Backlog Rule1 0; Rule1 4; Rule2 0; Rule2 4; Rule2 0; Rule2 4\n</code></pre></p> <p>//Set Counter to measure the period between on and off, check if it's blinking because of an obstruction <pre><code>Backlog CounterType 1; CounterDebounce 100\n</code></pre></p> <p>//So the door doesn't close if you send it an Open when it's already Opened, etc. <pre><code>// var1=1 Only When OPEN  \n// var2=1 Only When CLOSED  \n// var3=1 Only When OPENING  \n// var4=1 Only When CLOSING  \n</code></pre> <pre><code>Rule1\n  ON Switch1#Boot=1 DO Backlog delay 99; event Opened ENDON\n  ON Switch2#Boot=1 DO Backlog delay 99; event Closed ENDON\n  ON EVENT#OPEN DO Power1 %var2% ENDON\n  ON EVENT#CLOSE DO Power1 %var1% ENDON\n  ON EVENT#STOP DO Backlog Power1 %var3%; Power1 %var4%; event PState=STOP ENDON\n  ON Switch1#State=1 DO event Opened ENDON\n  ON Switch2#State=1 DO event Closed ENDON\n  ON Switch1#State=0 DO event Closing ENDON\n  ON Switch2#State=0 DO event Opening ENDON\n\nRule2\n  ON event#Opened DO Backlog var 1; var2 0; var3 0; var4 0; ruletimer1 0; event PState=OPEN ENDON\n  ON event#Closed DO Backlog var1 0; var2 1; var3 0; var4 0; ruletimer1 0; event PState=CLOSE ENDON\n  ON event#Opening DO Backlog var1 0; var2 0; var3 1; var4 0; ruletimer1 15; event PState=OPENING ENDON\n  ON event#Closing DO Backlog var1 0; var2 0; var3 0; var4 1; ruletimer1 15; event PState=CLOSING ENDON\n\nRule3\n  ON counter#c1&gt;1000 DO event PObstr=0 ENDON\n  ON counter#c1&lt;1000 DO event PObstr=1 ENDON\n  ON event#PObstr DO publish stat/GarageDoor/OBSTR %value% ENDON\n  ON event#PState DO publish stat/GarageDoor/STATE %value% ENDON\n  ON rules#timer=1 DO event PState=STOP ENDON\n</code></pre></p> <p>//Turn on Rules <pre><code>Backlog Rule1 1; Rule2 1; Rule3 1\n</code></pre></p>"},{"location":"Rules/#ir-remote-button-multi-press","title":"IR Remote Button Multi-press","text":"<p>For example, a remote control with one button to change speed. This rules simulates pressing the button three times to set the receiving device to the third speed setting. </p> <p>Specify the rule set  </p> <ul> <li>The <code>&lt;trigger&gt;</code> can be a condition or an event sent from another device or home automation hub.</li> <li><code>&lt;topic&gt;</code> corresponds to the device transmitting the code (e.g., YTF IR Bridge). This could also be modified to send an RF code from a Sonoff RF Bridge.  </li> <li>The <code>Delay</code> may not be necessary in your environment or may need to be adjusted according to your device characteristics. </li> </ul> <pre><code>Rule 1\n  ON Event#tora DO Backlog Publish cmnd/&lt;topic&gt;/IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x00FF30CF\"}; Delay 10 ENDON\n  ON &lt;trigger&gt; DO Backlog Event tora; Event tora; Event tora ENDON\n</code></pre> <ul> <li>Enable the Rule set <code>Rule1 1</code></li> </ul>"},{"location":"Rules/#two-way-light-switches-without-mqtt","title":"Two-way light switches without MQTT","text":"<p>Two Sonoff T1 3-gang light switches can be used at either end of a room by setting up one the master and the other as the slave.  The master performs the switching of the power to the lights, while the slave just asks the master to toggle the power state.  The master also turns the slave's relays on and off so that the LED indicators follow the master's state.</p> <p>Using the <code>WebSend</code> command, the two switches can talk to each other without an MQTT broker.  It remains to be seen how reliable this is.</p> <p>Starting with the slave, the rule to toggle the master is pretty simple:</p> <p><pre><code>Rule1\n  ON Event#sendPower DO WebSend [192.168.0.74] POWER%value% TOGGLE ENDON\n  ON Button1#State DO Event sendPower=1 ENDON\n  ON Button2#State DO Event sendPower=2 ENDON\n  ON Button3#State DO Event sendPower=3 ENDON\n</code></pre> <code>Rule1 1</code></p> <p>Note that having a rule for the Button#State disables the power toggling of the slave's relay(s).  This is desirable because we want the master to control the slave's relay state(s) according to its own as follows:</p> <p><pre><code>Rule1\n  ON Event#sendPower DO WebSend [192.168.0.144] POWER%Var1% %value% ENDON\n  ON Power1#state DO Backlog Var1 1;Event sendPower=%value% ENDON\n  ON Power2#state DO Backlog Var1 2;Event sendPower=%value% ENDON\n  ON Power3#state DO Backlog Var1 3;Event sendPower=%value% ENDON\n</code></pre> <code>Rule1 1</code></p>"},{"location":"Rules/#control-remote-light-on-switch-double-press","title":"Control remote light on switch double press","text":"<p>Toggling the switch controls local POWER state while toggling twice fast controls another device.</p> <p>Great with two SONOFF MINI in adjacent rooms, to control both rooms with either switch.</p> <pre><code>SwitchMode 8\nRule1 ON switch1#state=3 DO websend [ip/hostname of remote] power1 toggle ENDON\nRule1 1\n</code></pre>"},{"location":"Rules/#roller-shutter-push-button-toggle","title":"Roller shutter push-button toggle","text":"<p>With a two relay device (e.g., Shelly 2.5) configured for a roller shutter, you can also connect push-buttons (configured as switch components in this example) and set them for inverted toggle behavior. Pressing a push-button once makes the roller shutter move in one direction. Pressing it again stops it. These rules each use a variable to remember the shutter state where <code>0 == Stopped</code> and <code>1 == Moving</code>.</p> <pre><code>Backlog SwitchTopic 0; SwitchMode1 4; SwitchMode2 4\n\nRule1\n  ON Switch1#State==1 DO Add1 1 ENDON\n  ON Var1#State==0 DO ShutterStop1 ENDON\n  ON Var1#State==1 DO ShutterClose1 ENDON\n  ON Var1#State&gt;=2 DO Var1 0 ENDON\n  ON Shutter1#Close DO Var1 0 ENDON\n  ON Switch2#State==1 DO Add2 1 ENDON\n  ON Var2#State==0 DO ShutterStop1 ENDON\n  ON Var2#State==1 DO ShutterOpen1 ENDON\n  ON Var2#State&gt;=2 DO Var2 0 ENDON\n  ON Shutter1#Open DO Var2 0 ENDON\n\nRule1 1\n</code></pre>"},{"location":"Rules/#control-a-dimmer-with-one-switch","title":"Control a dimmer with one switch","text":"<p>This example is for GPIOs defined as switches not buttons</p> <p>Activate dimmer mode with <code>Switchmode 11</code> and shorten long press time to 1 second (<code>Setoption32 10</code>).</p> <p>A short press of the switch sends a <code>TOGGLE</code> message to toggle the dimmer. A long press sends repeated <code>INC_DEC</code> messages to increment the dimmer. If a second press of the switch follows the first press an <code>INV</code> message is sent to invert the function from increment to decrement and repeated <code>INC_DEC</code> messages are sent to decrement the dimmer. After releasing the switch a timeout message <code>CLEAR</code> resets the automation</p> <p><pre><code>Backlog SwitchMode 11; SetOption32 10; Rule1 1;\n\nRule1 \non system#boot do var1 + ENDON\non switch1#state=2 do POWER TOGGLE ENDON\non switch1#state=4 do DIMMER %var1% ENDON\non switch1#state=7 do event upordown=%var1% ENDON\non event#upordown=+ do var1 - ENDON\non event#upordown=- do var1 + ENDON\n</code></pre> Restart Tasmota after creating the rule set. Notice we use <code>Rule</code> which edits <code>Rule1</code> rule set. They can be used interchangeably.</p>"},{"location":"Rules/#watchdog-for-wi-fi-router-or-modem","title":"Watchdog for Wi-Fi router or modem","text":"<p>The ping method requires <code>#define USE_PING</code> and Tasmota version 8.2.0.3 or newer</p> <p>The WebQuery method requires Tasmota version 10.0.0 or newer</p> <p>A Tasmota plug can check a remote host (router itself, something else connected to the router, or a site on the Internet) via an ICMP Ping or loading a URL and can power cycle the router or modem if the remote host isn't responding.  In this example, an interval of 3 minutes is used. The simplest watchdog rule does not use variables:</p> <pre><code>Rule1\n  ON Time#Minute|3 DO backlog Ping4 192.168.1.10 ENDON\n  ON Ping#192.168.1.10#Success==0 DO Backlog Power1 0; Delay 10; Power1 1; ENDON\nRule1 1\n</code></pre> <p>However, if the endpoint becomes unreachable for a long time, the watchdog will keep cycling it every three minutes.  This could reduce the watchdog's relay lifetime to months, at most years. A safer option would be to use an  exponential backoff algorithm. <code>Var1</code> contains the current interval in minutes, which is tripled after each failed query, but limited to 1439 minutes (1 day).</p> <pre><code>Rule1\n  ON system#boot do Var1 3 ENDON\n  ON Var1#State&gt;1439 DO Var1 1439 ENDON\n\n  ON Time#Minute|%var1% DO backlog Ping4 192.168.1.10 ENDON\n  ON Ping#192.168.1.10#Success==0 DO backlog Mult1 3; Power1 0; Delay 10; Power1 1 ENDON\n  ON Ping#192.168.1.10#Success&gt;0 DO Var1 3 ENDON\n</code></pre> <p>If your Tasmota doesn't have ping compiled in and your remote host has an HTTP server you can access, you can use WebQuery as below:</p> <pre><code>Rule1\n  ON system#boot do Var1 3 ENDON\n  ON Var1#State&gt;1439 DO Var1 1439 ENDON\n\n  ON Time#Minute|%var1% DO backlog WebQuery http://192.168.1.10/ GET ENDON\n  ON WebQuery#Data$!Done DO backlog Mult1 3; Power1 0; Delay 10; Power1 1 ENDON\n  ON WebQuery#Data=Done DO Var1 3 ENDON\n</code></pre> <p>Triggering off the JSON response to webquery (and other commands) may require wrapping the command in backlog, as per example above</p>"},{"location":"Rules/#simple-thermostat-example","title":"Simple Thermostat Example","text":"<p>As example, to be used on a Sonoff TH10 with Sensor Si7021</p> <p>This example turn on and off an output based on the temperature value and the upper set point and the lower set point. It waits until is enabled by pressing the button or by mqtt message 1 to mem1. This value is remembered. So if power cycle occurs, will resume operation. The set point values can be changed on the fly by mqtt or console commands If the Temperature sensor disconnects, the outputs will shutdown until the sensor is back again and will resume operation. When the device is power up, the thermostat also waits until the sensor value to resume operation.</p> <p>Initial Config:</p> <ul> <li>Available physical button as Switch1</li> <li>Relay1 will be used the controller</li> <li>Rules must be used to control Relay so the pushbutton must only control Switch1 and not directly control the relay - For this we use SwitchMode1 3 as described below and create the necessary rules because the pushbutton control of the relay is only disabled when the rules are in place.</li> </ul> <p>Initial config on console:</p> <ul> <li><code>SwitchMode1 3</code>  &lt;- Use the switch1 as pushbutton (It will allow us to disable the link between the button and the relay by inserting a rule to dictate what the pushbutton will do - NOTE: Until rules are created the pushbutton will still control the relay!)</li> <li><code>Rule1 1</code>        &lt;- turn on rules</li> <li><code>Rule1 4</code>        &lt;- turn off one-shot rule</li> <li><code>TelePeriod 60</code>  &lt;- check temp every minute</li> <li><code>SetOption26 1</code>  &lt;- use Power1 on mqtt messages</li> <li><code>SetOption0 0</code>   &lt;- dont save relay status on eeprom</li> <li><code>PowerOnState 0</code> &lt;- start all relays off</li> <li><code>Mem1 0</code>         &lt;- thermostat status: 0-off 1-enabled - View or set by MQTT cmnd/mqttTopic/mem1</li> <li><code>Mem2 25</code>       &lt;- setpoint Temp upper limit - View or set by MQTT cmnd/mqttTopic/mem2</li> <li><code>Mem3 23</code>        &lt;- setpoint Temp lower limit - View or set by MQTT cmnd/mqttTopic/mem3</li> <li><code>Var1 0</code>       &lt;- thermostat actual status: 1-OK 0-NOT READY - View by MQTT cmnd/mqttTopic/var1</li> </ul>"},{"location":"Rules/#rules","title":"Rules","text":"<p>On boot start a watchdog timer to check temp sensor connection. <pre><code>Rule ON system#boot DO RuleTimer1 70 ENDON\n</code></pre></p> <p>An available button is configured as switch to set thermostat ON or OFF</p> <pre><code>Rule1\n  ON switch1#state DO Backlog event toggling1=%mem1% ENDON\n  ON event#toggling1=0 DO mem1 1 ENDON\n  ON event#toggling1=1 DO mem1 0 ENDON\n</code></pre> <p>Check temp sensor connection. If fails, set to off and turn off thermostat. Also continue checking  </p> <pre><code>Rule ON Rules#Timer=1 DO Backlog var1 0; RuleTimer1 70; Power1 0 ENDON\n</code></pre> <p>Resets checking timer if temperature is connected  </p> <pre><code>Rule ON tele-SI7021#temperature DO Backlog var1 1; RuleTimer1 30; event ctrl_ready=1; event temp_demand=%value% ENDON\n</code></pre> <p>Thermostat control - upper limit and lower limit and enabled  </p> <pre><code>Rule1\n  ON event#ctrl_ready&gt;%mem1% DO var1 0 ENDON\n  ON event#temp_demand&gt;%mem2% DO Power1 0 ENDON\n  ON event#temp_demand&lt;%mem3% DO Power1 %var1% ENDON\n</code></pre> <p>Thermostat can be turned On by:  </p> <ul> <li>pushing button</li> <li>by command on local console: mem1 1</li> <li>by command on any other console: publish cmnd/mqttTopic/mem1 1</li> <li>or MQTT at: cmnd/mqttTopic/mem1 1</li> </ul> <p>Thermostat can be turned Off by:  </p> <ul> <li>pushing button</li> <li>by command on local console: mem1 0</li> <li>by command on any other console: publish cmnd/mqttTopic/mem1 0</li> <li>or MQTT at: cmnd/mqttTopic/mem1 0</li> </ul> <p>To get the status:  </p> <ul> <li><code>mem1</code>        &lt;- thermostat status: 0-off 1-enabled - View or set by MQTT cmnd/mqttTopic/mem1</li> <li><code>mem2</code>       &lt;- setpoint Temp upper limit - View or set by MQTT cmnd/mqttTopic/mem2</li> <li><code>mem3</code>         &lt;- setpoint Temp lower limit - View or set by MQTT cmnd/mqttTopic/mem3</li> <li><code>var1</code>        &lt;- thermostat actual status: 1-OK 0-NOT READY - View by MQTT cmnd/mqttTopic/var1</li> </ul> <p>Everything together:</p> <p>Initial config: </p> <p>RuleTimer1 must be greater that TelePeriod for expected results</p> <pre><code>Backlog SwitchMode1 3; Rule 1; Rule 4; TelePeriod 60; SetOption26 1; SetOption0 0; poweronstate 0; mem1 0; mem2 25; mem3 23; var1 0\n</code></pre> <p>Rules</p> <pre><code>Rule1 \n  ON system#boot DO RuleTimer1 70 ENDON \n  ON Switch1#State DO event toggling1=%mem1% ENDON \n  ON event#toggling1=0 DO mem1 1 ENDON \n  ON event#toggling1=1 DO mem1 0 ENDON \n  ON Rules#Timer=1 DO Backlog var1 0; RuleTimer1 70; Power1 0 ENDON \n  ON tele-SI7021#temperature DO Backlog var1 1; RuleTimer1 70; event ctrl_ready=1; event temp_demand=%value% ENDON \n  ON event#ctrl_ready&gt;%mem1% DO var1 0 ENDON \n  ON event#temp_demand&gt;%mem2% DO Power1 0 ENDON \n  ON event#temp_demand&lt;%mem3% DO Power1 %var1% ENDON\n</code></pre> <p>Example rules without temp sensor to test the thermostat rules</p> <pre><code>Rule1 \n  ON system#boot DO RuleTimer1 70 ENDON \n  ON Switch1#State DO event toggling1=%mem1% ENDON \n  ON event#toggling1=0 DO mem1 1 ENDON \n  ON event#toggling1=1 DO mem1 0 ENDON \n  ON Rules#Timer=1 DO Backlog var1 0; RuleTimer1 70; Power1 0 ENDON \n  ON event#temp DO Backlog var1 1; RuleTimer1 70; event ctrl_ready=1; event temp_demand=%value% ENDON \n  ON event#ctrl_ready&gt;%mem1% DO var1 0 ENDON \n  ON event#temp_demand&gt;%mem2% DO Power1 0 ENDON \n  ON event#temp_demand&lt;%mem3% DO Power1 %var1% ENDON\n</code></pre> <p>Tests:  </p> <ul> <li>Push the button1. The thermostat changes to ENABLED (mem1=1)</li> <li>on console: event temp=20 (now the system receives like a tele message from temperature sensor) and will turn on the relay1 (to heat)</li> <li>on console: event temp=26 (the thermostat turn off the heater)</li> <li>on console: event temp=22 (the thermostat turn on the heater)</li> <li>wait more than a minute without using the event temp and the thermostat will turn off as there is no temperature value (like a sensor error or disconnection)</li> <li>will resume when using again the event temp</li> <li>console mem1 0, DISABLED, console mem1 1, ENABLED</li> </ul> <p>Timers:</p> <ul> <li>With the above the timers can be used to control mem1 and add a schedule to when the thermostat will be enabled <code>Rule2 ON Clock#Timer=1 DO mem1 1 ENDON ON Clock#Timer=2 DO mem1 0 ENDON</code></li> </ul>"},{"location":"Rules/#solar-heater-control","title":"Solar heater control","text":"<p>In a swimming pool, a filter pump and a solar panel is installed. When the sun is shining, the pump should push water through the solar panel, to heat the pool. When it's night or cloudy, the pump should be off, to avoid cooling the pool water through the solar panel. The pump is controlled by a Sonoff TH10 with 2x DS18B20 sensors connected.</p> <p>3 rules:</p> <ul> <li>Pump should start when solar panel is more than 2 deg warmer than the pool water</li> <li>Pump should stop when solar panel is less than 1 deg warmer than the pool water</li> <li>Pump should not start if the solar panel is below 25 deg Celsius.</li> </ul> <p><code>t1</code>: pool temp <code>t2</code>: panel temp <code>var1</code>: in valid panel temp range? <code>var2</code>: off threshold temp for panel <code>var3</code>: on threshold temp for panel <code>mem3</code>: lowest valid panel temp  </p> <pre><code>mem3 25\n</code></pre> <pre><code>rule1\n  ON DS18B20-1#temperature DO Backlog0 var2 %value%; add2 1 ; var3 %value%; add3 2 ENDON\n  ON DS18B20-2#temperature DO event t2=%value% ENDON\n  ON event#t2&gt;%mem3% DO var1 1 ENDON\n  ON event#t2&lt;=%mem3% DO var1 0 ENDON\n  ON event#t2&gt;%var3% DO Power1 %var1% ENDON\n  ON event#t2&lt;%var2% DO Power1 0 ENDON\n</code></pre> <p>To test the rule without having the sensors in place, simply enter the events for <code>t1</code> and <code>t2</code> in the console: <code>Backlog event t1=21;event t2=30</code></p> <p>And watch the relay turn on and off based on the values.</p> <p>Please note that this example does not support manual override or handles missing sensor data. </p>"},{"location":"Rules/#energy-saving-switch","title":"Energy Saving Switch","text":"<p>Example of a switch controlling a light with a condition of a required amount of lux.</p> <p>When the switch is on, the light will turn on but only when you have less than 100 lux in that room. While if the switch is off the light will be off.</p> <pre><code>Rule1\n  ON switch1#state=1 DO var1 100 ENDON\n  ON switch1#state=0 DO Backlog var1 0; Power1 off ENDON\n  ON APDS9960#Ambient&lt;%var1% DO Power1 on ENDON\n</code></pre>"},{"location":"Rules/#use-of-variables-and-tele-in-domoticz","title":"Use of variables and tele- in Domoticz","text":"<p>Using variables allows for storing sensor results to be used in composing a single HA message like used with Domoticz. To prevent flooding Domoticz with messages we only want to send a message at TelePeriod time. This is achieved by prefixing the <code>&lt;SensorName&gt;</code> with the label <code>tele-</code>. This example will use a variable storing the temperature to be used together with humidity in one Domoticz MQTT message.</p> <ul> <li>Domoticz configured with a virtual sensor Temp+Hum using Idx 134</li> </ul> <p>Rule <pre><code>Rule\n  ON tele-am2301-12#temperature DO var1 %value% ENDON\n  ON tele-am2301-12#humidity DO publish domoticz/in {\"idx\":134,\"svalue\":\"%var1%;%value%;1\"} ENDON\n</code></pre></p> <p>Result - As a result of the <code>tele-</code> prefix the rules will be checked at TelePeriod time for sensor AM2301-12 Temperature and Humidity. The first rule will use the Temperature stored in <code>%value%</code> and save it in <code>%var1%</code> for future use. The second rule will use the Humidity stored in <code>%value%</code> and the Temperature stored in <code>%var1%</code> to compose a single MQTT message suitable for Domoticz. </p>"},{"location":"Rules/#publish-maximum-value-from-sensor-in-a-time-period","title":"Publish Maximum Value from sensor in a time period","text":"<p>This rule stores the sensor value in <code>var1</code>. When the current value is greater than the previous, <code>var1</code> is updated. If the current value is smaller,  <code>var1</code> remains  unchanged. Then every minute, <code>var1</code> is published and reset. This results in publication of the maximum/peak value for the last minute. Useful, for example in a decibel meter, when the peak value is important, rather than the value that is occurring by chance at normal telemetry time.</p> <p>This example uses Analog Range mode (trigger <code>analog#range</code>) which is a scaled output value (the raw analog value would be <code>analog#a0</code>).  On ESP32 which supports multiple ADC inputs, the ADC index must be appended such as <code>analog#range1</code> for ADC#1.</p> <pre><code>Rule\n  ON analog#range&gt;%var1% DO VAR1 %value% ENDON\n  ON Time#Minute DO Backlog publish shed/tele/maxdb %var1%; var1 0 ENDON\n\nRule 1 1\n</code></pre>"},{"location":"Rules/#rf-repeater-ir-repeater","title":"RF Repeater / IR Repeater","text":"<p>In some applications, an RF-Repeater may come in handy to increase the range of RF based devices. We need to use RF receiver and RF transmitter modules with tasmota powered controllers. The following rule looks for data received by the RF receiver and re transmits the same over the transmitter.</p> <p><pre><code>Rule1\n  on RfReceived#data do RfSend {\"Data\":%value%,\"Bits\":24,\"Protocol\":1,\"Pulse\":454} endon\n</code></pre> Enable it with <code>Rule1 1</code></p> <p>A similar concept can also work for IR- Repeater. Connect IR receiver module and IR trnasmitter to Tasmotized device and the following rule retransmits any data over IR <pre><code>Rule1\n  on IrReceived#Data do IRsend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":%value%} endon\n</code></pre> Enable it with <code>Rule1 1</code></p> <p>The only catch is that the protocol needs to be setup in the rule. Most likely this can be taken care of by using a more complex rule maybe using variables. Would update in future</p>"},{"location":"Rules/#power-led-brightness-indicates-power-load","title":"Power LED brightness indicates Power Load","text":"<p>Uses the power LED to indicate the power load.</p> <ul> <li>Relay off - Power LED off</li> <li>Relay on  - Power LED dimmed to minimum of 50% (<code>128</code>) which equals no power consumption (<code>0W</code>)               the remaining possible brightness (50%-100%) correlates with the power consumption (100% = <code>255</code>, equals <code>200W</code>)</li> </ul> <p><pre><code># enable PWM mode\nLedPwmMode1 1\n\nRule1 ON ENERGY#Power DO BACKLOG Scale1 %value%,0,200,128,255; LedPwmOn %var1% ENDON\n</code></pre> Enable it with <code>Rule1 1</code></p>"},{"location":"SCD4x/","title":"SCD40/SCD41 CO<sub>2</sub> sensor","text":"This feature is included only in <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SCD40 \n#define USE_SCD40       // [I2cDriver62] Enable Sensiron SCd40/Scd41 CO2 sensor (I2C address 0x62) (+3k5 code)\n#endif\n</code></pre></p>"},{"location":"SCD4x/#device-information","title":"Device information","text":"<p>The SCD40/SCD41 is Sensirion\u2019s miniature CO2 sensor. This sensor builds on the photoacoustic NDIR sensing principle and Sensirion\u2019s patented PASens\u00ae and CMOSens\u00ae technology to offer high accuracy at an unmatched price and smallest form factor. SMD assembly allows cost- and space-effective integration of the sensor combined with maximal freedom of design. On-chip signal compensation is realized with the built-in SHT4x humidity and temperature sensor.</p>"},{"location":"SCD4x/#features","title":"Features","text":"<ul> <li>Photoacoustic NDIR sensor technology PASens\u00ae</li> <li>Smallest form factor: 10.1 x 10.1 x 6.5 mm3</li> <li>Reflow solderable for cost-effective assembly</li> <li>Digital I\u00b2C interface</li> <li>Integrated temperature and humidity sensor</li> </ul>"},{"location":"SCD4x/#product-variants","title":"Product Variants","text":"<ul> <li>SCD40: Base accuracy, specified measurement range 400 \u20132\u2019000 ppm</li> <li>SCD41: High accuracy, specified measurement range 400 \u2013 5\u2019000 ppm, compatible with relevant IAQ standards, several power modes</li> </ul>"},{"location":"SCD4x/#datasheets","title":"Datasheets","text":"<p>The Sensirion SCD40/SCD41 datasheet. </p>"},{"location":"SCD4x/#configuration","title":"Configuration","text":""},{"location":"SCD4x/#wiring","title":"Wiring","text":"SCD4x ESP VCC 3.3V GND GND SDA GPIOx SCL GPIOy"},{"location":"SCD4x/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect SCD4x automatically and display sensor readings.</p> <p></p> <p>and in MQTT topic (according to TelePeriod):   <pre><code>{\"Time\":\"2024-01-01T10:31:09\",\"SCD40\":{\"CarbonDioxide\":1204,\"eCO2\":1235,\"Temperature\":28.8,\"Humidity\":47.5,\"DewPoint\":16.5},\"TempUnit\":\"C\"}\n</code></pre></p>"},{"location":"SCD4x/#commands","title":"Commands","text":"<ul> <li>Return errorvalue: -1 in case of error, 0 otherwise</li> <li>Return data: -1 in case of error, \"value\" otherwise</li> <li>Exec(ms): time in ms needed for execution</li> <li>DPM: may be executed during periodic measurements</li> </ul> Command Returns Exec(ms) DPM Function SCD40Alt data 1 no Get Sensor Altitude (in m) SCD40Alt x errorvalue 1 no Set Sensor Altitude in range 0-3000 (in m) SCD40Auto data 1 no Get CalibrationEnabled status (bool) SCD40Auto x errorvalue 1 no Set CalibrationEnabled status (bool) SCD40Toff data 1 no Set Temperature offset (centigrades) SCD40Toff x errorvalue 1 no Set Temperature offset (centigrades) (some rounding may occur) SCD40Pres x errorvalue 1 yes Set Ambient Pressure in range 700-1200(mbar) (overrides Sensor Altitude setting) SCD40Cal x errorvalue 400 no Perform forced recalibration (ppm CO2) SCD40Test errorvalue 10000 no Perform selftest SCD40StLp errorvalue 0 no Start periodic measurement in low-power mode (1/30s) SCD40Strt errorvalue 0 no Start periodic measurement (1/5s) SCD40Stop errorvalue 500 yes Stop periodic measurement SCD40Pers errorvalue 800 no Persist settings in EEPROM (2000 write cycles guaranteed) SCD40Rein errorvalue 20 no Reinit sensor SCD40Fact errorvalue 1200 no Factory reset sensor SCD40Sing errorvalue 5000 no (SCD41 only) Measure single shot SCD40SRHT errorvalue 50 no (SCD41 only) Measure single shot, RHT only"},{"location":"SCD4x/#first-installation","title":"First installation","text":"<p>The SCD4x features on-chip signal compensation to counteract pressure and temperature effects. Feeding the SCD4x with the pressure or altitude enables highest accuracy of the CO2 output signal across a large pressure range. Setting the temperature offset improves the accuracy of the relative humidity and temperature output signal. Note that the temperature offset does not impact the accuracy of the CO2 output.</p> <p>Upon first installation it is convenient to set the current altitude and temperature offset. To do this you must first send the command to stop the periodic measurements, then the set commands can be sent and then the settings must be saved with the persist command, then restart.</p> <pre><code>12:03:19.012 CMD: SCD40Stop\n12:03:19.019 MQT: stat/air/RESULT = {\"SCD40Stop\":0}\n12:03:50.584 CMD: SCD40Toff 400\n12:03:50.593 MQT: stat/air/RESULT = {\"SCD40Toff\":0}\n12:04:16.511 CMD: SCD40Alt 60\n12:04:16.520 MQT: stat/air/RESULT = {\"SCD40Alt\":0}\n12:04:23.745 CMD: SCD40pers\n12:04:23.752 MQT: stat/air/RESULT = {\"SCD40Pers\":0}\n</code></pre>"},{"location":"SCD4x/#breakout-boards","title":"Breakout Boards","text":""},{"location":"SDS011/","title":"SDS011 air quality sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_NOVA_SDS \n#define USE_NOVA_SDS                    // Add support for SDS011 and SDS021 particle concentration sensor (+1k5 code)\n  #define STARTING_OFFSET      30       // Turn on NovaSDS XX-seconds before tele_period is reached    \n#endif\n</code></pre></p> <p></p> <p>Nova PM Sensor SDS011 can measure the air quality very accurately by measuring air particles or dust based on laser detection.</p> <p>Specifications:</p> <ul> <li>Voltage: 4.7 - 5.3V DC (5V DC with &lt;20mV ripple advised)</li> <li>Power consumption: 70mA \u00b110mA (in operation), &lt;4mA (laser and fan sleep mode)</li> <li>Measuring range: 0.0-999.9 \u03bcg/m3</li> <li>PM2.5 and PM10 output</li> </ul> <p>See manufacturer site for more information.</p>"},{"location":"SDS011/#configuration","title":"Configuration","text":""},{"location":"SDS011/#wiring","title":"Wiring","text":"SDS011 ESP GND GND 5V 5V TX GPIO RX RX GPIO TX"},{"location":"SDS011/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign: 1. GPIO TX to <code>SDS0X1 Tx (101)</code> 2. GPIO RX to <code>SDS0X1 Rx (70)</code></p> <p></p> <p>To extend the lifetime of the sensor, you can use the command Sensor20 in association with setting TelePeriod for how often you want the fan to run and the sensor to be polled.</p>"},{"location":"SDS011/#tasmota-main","title":"Tasmota Main","text":"<p>After reboot of the device the displays the SDS011 measurements.</p> <p></p>"},{"location":"SDS011/#openhab","title":"OpenHab","text":"<pre><code>Number Dust_Sensor_2_5 \"PM 2.5 [%.2f \u00b5g/m\u00b3]\" &lt;door&gt; (Dust) {mqtt=\"&lt;[mosquitto:tele/dust/SENSOR:state:JSONPATH($.SDS0X1['PM2.5'])]\"}\nNumber Dust_Sensor_10  \"PM 10 [%.2f \u00b5g/m\u00b3]\" &lt;door&gt; (Dust) {mqtt=\"&lt;[mosquitto:tele/dust/SENSOR:state:JSONPATH($.SDS0X1['PM10'])]\"}\n</code></pre>"},{"location":"SHT30/","title":"SHT30 temperature sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SHT3X \n#define USE_SHT3X           // [I2cDriver15] Enable SHT3x (I2C address 0x44 or 0x45) or SHTC3 (I2C address 0x70) sensor (+0k7 code)\n#endif\n</code></pre></p> <p>Wemos SHT30 Shield High Precision Humidity &amp; Temperature (I<sup>2</sup>C) sensor</p> <p>From the Wemos SHT30 shield specs the SDA pin on the SHT30 shield is connected to D2 and the SCL pin to D1. </p>"},{"location":"SHT30/#configuration","title":"Configuration","text":"<p>As a default the SHT30 uses I<sup>2</sup>C address 0x45 and is user changeable by short-circuiting the two soldering pads at the lower left-side of the sensor (see image below marked green).</p> <p>Also if no other I<sup>2</sup>C devices are connected to the Wemos it might be wise to short-circuit the three soldering pads at the upper left-side of the sensor (see image below marked red). This connects the pull-up resistors for I<sup>2</sup>C and biases the SCL and SDA pins to VCC. This is to avoid possible false detections of other sensors like VEML6070.</p> <p>Note: On the v2.1.0 board these pads are on the rear.</p> <p></p>"},{"location":"SHT30/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>D2 GPIO4 to <code>I2C SDA</code></li> <li>D1 GPIO5 to <code>I2C SCL</code></li> </ul> <p></p> <p>After reboot of the device the temperature, humidity and dew point are displayed.</p> <p></p>"},{"location":"SHT30/#breakout-boards","title":"Breakout Boards","text":"<p>Three versions are known to exist, they all share the same pinout. Lolin is the new name for Wemos going forward.</p> <ul> <li>v.1.0.0 - original design (retired)</li> <li>v.2.0.0 - detachable design</li> <li>v.2.1.0 - detachable design with TFT I2C connector</li> </ul> <p> </p>"},{"location":"SK6812/","title":"SK6812 RGBW Addressable LEDs","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_WS2812_HARDWARE  NEO_HW_SK6812     \n#define USE_WS2812_CTYPE     NEO_GRBW           // Color type (NEO_RGB, NEO_GRB, NEO_BRG, NEO_RBG, NEO_RGBW, NEO_GRBW)\n</code></pre></p> <p>Wiring with a level shifter is required. Look at WS2812B LEDs article for instructions.</p>"},{"location":"SK6812/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page, select the following:</p> <ol> <li>GPIOx to <code>WS2812</code></li> </ol>"},{"location":"SK6812/#tasmota-main","title":"Tasmota Main","text":"<p>After reboot of the device the color sliders and toggle button are displayed to control the LED.</p> <p>Set number of pixels used on your strip with <code>Pixels x</code> command</p> <p>Select whether use white in separate channel or blended with RGB colors.</p> <p>Configuration was done on a round 7 LED board and an ESP-01S Addressable LED adapter</p>"},{"location":"SPS30/","title":"SPS30 Particulate sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_SPS30         // [I2cDriver30] Enable Sensiron SPS30 particle sensor (I2C address 0x69) (+1.7 code)\n</code></pre></p>"},{"location":"SPS30/#device-information","title":"Device information","text":"<p>The Sensirion SPS30 is a laser based, fan driven, MCERTS-certified particulate matter (PM) sensor with a I\u00b2C and UART interface (datasheet). The Tasmota driver implements the I\u00b2C interface.</p>"},{"location":"SPS30/#mass-concentration-measurements","title":"Mass Concentration Measurements","text":"<p>The device exposes the following data:</p> <ul> <li>Volumetric concentration (\u03bcg/m\u00b3):</li> <li>PM1.0, PM2.5, PM4 and PM10</li> <li>Number concentration (binning, #/cm\u00b3):</li> <li>PM0.5, PM1.0, PM2.5, PM4 and PM10</li> <li>Typical particle size (\u03bcm)</li> </ul>"},{"location":"SPS30/#sampling","title":"Sampling","text":"<p>The module has a minimum sampling interval of 1 second in continuous mode (default).</p>"},{"location":"SPS30/#automatic-cleaning","title":"Automatic Cleaning","text":"<p>It implements an automatic fan cleaning routine, which sets the built-in fan speed to maximum for 10 seconds to clear out the detector chamber and accumulated dust on the fan blades. The default cleaning interval is 1 week of interrupted use, and resetting the sensor power also resets the built-in time counter for this. The current implementation does not support disabling this or setting a custom interval.</p>"},{"location":"SPS30/#configuration","title":"Configuration","text":"<p>The sensor has a 5 pin JST ZHR type connector, with a 1.5mm pitch (connector, datasheet). Pin5 (SEL/Interface Select) must be shorted to Pin4/Ground to enable the I\u00b2C interface.</p> <p>The sensor and fan components require 5V VDD, so a 5V capable board (e.g. Wemos D1) or external power must be supplied.</p> <p>Finding appropriate connectors/cables for this module are somewhat cumbersome, SparkFun sells them with handy breadboard friendly breakout cables.</p> <p></p> Pin SPS30 ESP Comment 1 VDD + 5V \u00b1 10% 2 SDA GPIOx 5V and 3.3V compatible 3 SCL GPIOy 5V and 3.3V compatible 4 SEL - Pull to GRD to enable I\u00b2C 5 GND -"},{"location":"SPS30/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ul> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ul> <p>After saving the board will reboot and the particulate measurements will be displayed on the main page.</p>"},{"location":"Safeboot/","title":"Safeboot Partition Layout","text":"<p>This page is specific to ESP32 and variants (not applicable to ESP8266)</p> <p>This feature was introduced in Tasmota v12</p> <p>Safeboot partition layout is a new feature in Tasmota v12 that optimizes the use of Flash memory and allows for bigger filesystems and bigger firmware sizes.</p> <p> </p>"},{"location":"Safeboot/#before-v12","title":"Before v12","text":"<p>Tasmota used a standard partition layout consisting of 2 firmware partitions of equal sizes. One partition is active and is booted from, while the other partition receives the new code when an OTA (Over The Air) update occurs.</p> <p>This scheme is standard in ESP32 Arduino. Its main advantage is that it is very safe. If a power failure occurs during the OTA update, the device is not bricked and reboots on the untouched version. The main drawback is that it consumes a lot of flash space, enough to contains twice the firmware size.</p> <p> Example, standard Tasmota layout for 4MB flash:</p> <ul> <li>a fixed size 64KB system area</li> <li>2x partitions of 1856KB each to receive Tasmota code</li> <li>a filesystem of 320KB</li> </ul> <p></p>"},{"location":"Safeboot/#introducing-safeboot","title":"Introducing Safeboot","text":"<p>We introduced a new variant of Tasmota called \"Safeboot\". It contains a minimal version of Tasmota used only for OTA, and a normal firmware. The main advantage is that it provides 1024KB of additional storage for firmware and/or filesystem.  </p> <p> Example of new partition layout since v12:</p> <ul> <li>a fixed size 64KB system area</li> <li>a Safeboot partition of 832KB</li> <li>1x partition of 2880KB to receive Tasmota code</li> <li>a filesystem of 320KB</li> </ul> <p> </p> <p>An alternate partition scheme is used in Sonoff Zigbee Bridge Pro:</p> <ul> <li>a fixed size 64KB system area</li> <li>a Safeboot partition of 832KB</li> <li>1x partition of 1856KB to receive Tasmota code</li> <li>a filesystem of 1344KB </li> </ul> <p>Note: the Safeboot firmware is a reduced version of Tasmota containing only what's required for OTA updates (Web UI, MQTT, TLS...). However it does not save settings nor support initial Wi-Fi configuration.  </p> <p>Tip</p> <p>If even Safeboot is not enough for your self compiled large firmware (e.g. with webcam, LVGL, Tensorflow, Bluetooth, ...) it is possible to override the partition scheme in your build environemnt in <code>platformio_tasmota_cenv.ini</code> with: <code>board_build.partitions      = partitions/esp32_partition_app3904k_fs3392k.csv # this is already part of Tasmota</code>.</p>"},{"location":"Scripting-Language/","title":"Scripting","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SCRIPT\n#define USE_SCRIPT  // adds about 17k flash size, variable ram size\n#endif\n#ifdef USE_RULES\n#undef USE_RULES\n#endif  \n</code></pre></p> <p>Additional features are enabled by adding the following <code>#define</code> compiler directive parameters and then compiling the firmware. These parameters are explained further below in the article.</p> Feature Description USE_BUTTON_EVENT enable <code>&gt;b</code> section (detect button state changes) USE_SCRIPT_JSON_EXPORT enable <code>&gt;J</code> section (publish JSON payload on TelePeriod) USE_SCRIPT_SUB_COMMAND enables invoking named script subroutines via the Console or MQTT USE_SCRIPT_HUE enable <code>&gt;H</code> section (Alexa Hue emulation) USE_HOMEKIT enable <code>&gt;h</code> section (Siri Homekit support (ESP32 only),define must be given in platform_override see below) USE_SCRIPT_STATUS enable <code>&gt;U</code> section (receive JSON payloads from cmd status) SCRIPT_POWER_SECTION enable <code>&gt;P</code> section (execute on power changes) SUPPORT_MQTT_EVENT enables support for subscribe unsubscribe USE_SENDMAIL enable <code>&gt;m</code> section and support for sending e-mail(on ESP32 you must add USE_ESP32MAIL) USE_SCRIPT_WEB_DISPLAY enable <code>&gt;W</code> section (modify web UI) SCRIPT_FULL_WEBPAGE enable <code>&gt;w</code> section (separate full web page and webserver) USE_TOUCH_BUTTONS enable virtual touch button support with touch displays USE_WEBSEND_RESPONSE enable receiving the response of <code>WebSend</code> and <code>WebQuery</code> commands (received in section &gt;E) SCRIPT_STRIP_COMMENTS enables stripping comments when attempting to paste a script that is too large to fit USE_ANGLE_FUNC add sin(x),acos(x) and sqrt(x) e.g. to allow calculation of horizontal cylinder volume USE_SCRIPT_FATFS_EXT enables additional FS commands USE_WEBCAM enables support ESP32 Webcam which is controlled by scripter cmds USE_FACE_DETECT enables face detecting in ESP32 Webcam USE_SCRIPT_TASK enables multitasking Task in ESP32 <code>USE_LVGL</code> enables support for LVGL, no longer supported, use Berry script with LVGL USE_SCRIPT_GLOBVARS enables global variables and &gt;G section USE_SML_M enables Smart Meter Interface SML_REPLACE_VARS enables possibility to replace the lines from the (SML) descriptor with Vars NO_USE_SML_SCRIPT_CMD disables SML script cmds USE_SCRIPT_I2C enables I2C support USE_SCRIPT_SERIAL enables support for serial io cmds USE_SCRIPT_TIMER enables up to 4 Arduino timers (so called tickers) SCRIPT_GET_HTTPS_JP enables reading HTTPS JSON WEB Pages (e.g. Tesla Powerwall) LARGE_ARRAYS enables arrays of up to 1000 entries instead of max 127 SCRIPT_LARGE_VNBUFF enables to use 4096 in stead of 256 bytes buffer for variable names USE_GOOGLE_CHARTS enables definition of google charts within web section USE_FEXTRACT enables array extraction from database fxt(...), fxto() and tso(), tsn(), cts(), s2t() functions USE_SCRIPT_SPI enables support for SPI interface USE_SCRIPT_TCP_SERVER enables support for TCP server USE_DISPLAY_DUMP enables to show epaper screen as BMP image in &gt;w section TS_FLOAT may be define as double to use double precision numbers (uses double RAM memory and is slower) SCRIPT_FULL_OPTIONS enables almost any of the above options (uses about 90k of Flash) <p>Scripting Language for Tasmota is an alternative to Tasmota Rules. For ESP32 builds it is recommended to use Berry</p> <p>To enter a script, go to Consoles -&gt; Edit Script in the Tasmota web UI menu (for version before 9.4, go to Configuration -&gt; Edit script)</p> <p>To save code space almost no error messages are provided. However it is taken care of that at least it should not crash on syntax errors.  </p>"},{"location":"Scripting-Language/#features","title":"Features","text":"<ul> <li>number of variables limited by available RAM only </li> <li>Freely definable variable names (all variable names are intentionally case sensitive)  </li> <li>Nested if,then,else up to a level of 8  </li> <li>Math operators  <code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>&amp;</code>,<code>|</code>,<code>^</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;</code> </li> <li>All operators may be used in the <code>op=</code> form, e.g., <code>+=</code> </li> <li>Comparison operators <code>==</code>,<code>!=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code> </li> <li><code>and</code> , <code>or</code> support  </li> <li>Hexadecimal numbers with prefix <code>0x</code> are supported</li> <li>Strings support <code>+</code> and <code>+=</code> operators  </li> <li>Support for \\n \\r regular expressions on strings</li> <li>String comparison <code>==</code>, <code>!=</code> </li> <li>String size is 19 characters (default). This can be increased or decreased by the optional parameter on the <code>D</code> section definition</li> </ul>"},{"location":"Scripting-Language/#script-interpreter","title":"Script Interpreter","text":"<ul> <li>Execution is strictly sequential, line by line</li> <li>Evaluation is left to right with optional brackets  </li> <li>All numbers are float, e.g., temp=hum*(100/37.5)+temp-(timer*hum%10)  </li> <li>No spaces are allowed between math operators</li> <li>Comments start with <code>;</code> </li> </ul>"},{"location":"Scripting-Language/#script-buffer-size","title":"Script buffer size","text":"<p>the script language normally shares script buffer with rules buffer which is 1536 chars. with below options script buffer size may be expanded. PVARS is size for permanent vars.</p> Feature ESP ESP32 PVARS remarks fallback 1536 1536 50 no longer supported compression (default) 2560 2560 50 actual compression rate may vary #define USE_UFILESYS#define UFSYS_SIZE S S&lt;=8192 S&lt;=16384 1536 ESP must use 4M Flash use linker option <code>-Wl,-Teagle.flash.4m2m.ld</code> or SDCARD  ESP32 can use any linker file, size of Filesystem depends on linker file #define EEP_SCRIPT_SIZE S#define USE_EEPROM#define USE_24C256 S&lt;=8192 S&lt;=16384 1536 for hardware eeprom only #define EEP_SCRIPT_SIZE 8192#define USE_EEPROM S=8192 not supported 1536 script may be lost on OTA and serial flash, not on restart <p>most useful definition for larger scripts would be  </p>"},{"location":"Scripting-Language/#esp8266","title":"ESP8266","text":"<p>with 1M flash only default compressed mode should be used (or an SDCARD) a special mode can be enabled for 8192 chars by defining #define USE_EEPROM, #define EEP_SCRIPT_SIZE 8192 however this has some side effects. the script may be deleted on firware OTA or serial update and may have to be reinstalled  after update.  </p> <p>with 4M Flash best mode would be    <code>#define USE_UFILESYS</code>  with linker file \"eagle.flash.4m2m.ld\"  </p>"},{"location":"Scripting-Language/#esp32","title":"ESP32","text":"<p>with all linker files <code>#define USE_UFILESYS</code> </p>"},{"location":"Scripting-Language/#script-init-error-codes","title":"script init error codes","text":"<p>after initialization the script reports some info in the console e.g: 00:00:00.043 SCR: nv=15, tv=1, vns=83, vmem=895, smem=8192, gmem=588, pmem=0, tmem=9758 nv = number of used variables in total (numeric and strings) tv = number of used string variables vns = total size of name strings in bytes (may not exceed 256) or #define SCRIPT_LARGE_VNBUFF extents the size to 4095 (default)</p> <p>vmem = used heap ram by the script (psram if available) smem = used script (text) memory (psram if available) gmem = used script global static memory  pmem = used script permanent memory tmem = used script memory total  </p> <p>if the script init fails an error code is reported:   -4 = not enough memory -5 = variable name length too long in total -6 = too many arrays defined -7 = not enough memory  </p> <p>number of variables is only limited by RAM. you will probably get a memory error when you define to many variables. you may increase the number of allowed array and the maximum string size defines in user_config_override defaults and override defines: Number of filters (arrays) = 10 (override #define MAXFILT) Max string size            = 20 (increase with &gt;D n, n up to SCRIPT_MAXSSIZE, default 255) (override #define SCRIPT_MAXSSIZE)     </p>"},{"location":"Scripting-Language/#optional-external-editor","title":"Optional external editor","text":"<p>you may use a special external editor with syntax highlighting to edit the scripts. (mac and pc) you may use any number of comments and indents to make it better readable. then with cmd r the script is transferred to the ESP and immediately started. (all comments and indents are removed before transferring) see further info and download here </p>"},{"location":"Scripting-Language/#visual-studio-code-extension","title":"Visual Studio Code Extension","text":"<p>If you're used to work with Visual Studio Code, you can use this extension to edit your scripts with the benefit of various helpful features, such as, for example, Syntax Highlighting, Automatic script upload, #define, ifdef and ifndef preprocessor macros, Code Folding, Code Snippet and Hover hints on tasmota functions and variables documentation.  </p>"},{"location":"Scripting-Language/#console-commands","title":"Console Commands","text":"<ul> <li><code>script &lt;n&gt;</code> : <code>0</code> = switch script off; <code>1</code> = switch script on  <code>8</code> = switch stop on error off; <code>9</code> = switch stop on error on  <li> <p><code>script &gt;&lt;cmdline&gt;</code> to execute <code>&lt;cmdline&gt;</code> </p> </li> <li> <p>Can be used to set variables, e.g., <code>script &gt;mintmp=15</code> </p> </li> <li> <p>Multiple statements can be specified by separating each with a semicolon, e.g. <code>script &gt;mintmp=15;maxtemp=40</code> </p> </li> <li> <p><code>script?&lt;var&gt;</code> queries a script variable <code>var</code> </p> </li> <li> <p><code>scriptsize N</code> sets the amount of script source code allowed between 1000 and max defined during compile (with #define UFSYS_SIZE)    </p> </li> <li>The script itself can't be specified because the size would not fit the MQTT buffers</li>"},{"location":"Scripting-Language/#script-sections","title":"Script Sections","text":"<p>Section descriptors (e.g., <code>&gt;E</code>) are case sensitive a valid script must start with &gt;D in the first line  </p>"},{"location":"Scripting-Language/#d-ssize","title":"&gt;D ssize","text":"<p><code>ssize</code> = optional max string size (default=19, max=255)   define and init variables here, must be the first section, no other code allowed <code>p:vname</code>   specifies permanent variables. The number of permanent variables is limited by Tasmota rules space (50 bytes) - numeric variables are 4 bytes; string variables are one byte longer than the length of string.  p vars are stored sequentially in the order of defintion. therefore when specifing permanent variables, add newly defined ones always at the end of already defined p vars. otherwise variables are mixed up and string variables may even be destroyed. <code>t:vname</code>    specifies countdown timers, if &gt;0 they are decremented in seconds until zero is reached. see example below <code>i:vname</code>    specifies auto increment counters if =0 (in seconds) <code>g:vname</code>    specifies global variable which is linked to all global variables with the same definition on all devices in the homenet.   when a variable is updated in one device it is instantly updated in all other devices. if a section &gt;G exists it is executed when a variable is updated from another device (this is done via UDP-multicast, so not always reliable) the global variable receiver may be reset by cmd <code>gvr</code> <code>I:vname</code>    specifies an integer 32 bit variable instead of float. (limited support) integer constants must be preceeded by '#' <code>m:vname</code>     specifies a median filter variable with 5 entries (for elimination of outliers) <code>M:vname</code>    specifies a moving average filter variable with 8 entries (for smoothing data, should be also used to define arrays)   (max 10 filters in total m+M) optional another filter length (1..127) can be given after the definition.   Filter vars can be accessed also in indexed mode <code>vname[x]</code> (x = <code>1..N</code>, x = <code>0</code> returns current array index pointer (may be set also), x = <code>-1</code> returns array length, x = <code>-2</code> returns array average,x = <code>-3</code> returns array sum)   Using this filter, vars can be used as arrays, #define LARGE_ARRAYS allows for arrays up to 1000 entries   array may also be permanent by specifying an extra <code>:p</code> <code>m:p:vname</code>    defines a permanent array. Keep in mind however that in 1M Flash standard configurations you only have 50 bytes permanent storage which stands for a maximum of 12 numbers. (see list above for permanent storage in other configurations)   arrays may also be preset in auto increment mode array=X sets the value at index array[0] and increments the index by 1.   array = {x y z} sets 3 values in an array from index array[0]  </p> <p>Tip</p> <p>Keep variable names as short as possible. The length of all variable names taken together may not exceed 4096 characters. Memory is dynamically allocated as a result of the D section. Copying a string to a number or reverse is supported  </p>"},{"location":"Scripting-Language/#b","title":"&gt;B","text":"<p>executed on BOOT time before sensors are initialized and on save script  </p>"},{"location":"Scripting-Language/#bs","title":"&gt;BS","text":"<p>executed on BOOT time after sensors are initialized  </p>"},{"location":"Scripting-Language/#e","title":"&gt;E","text":"<p>Executed when a Tasmota MQTT <code>RESULT</code> message is received, e.g., on <code>POWER</code> change. Also  Zigbee reports to  this section.</p>"},{"location":"Scripting-Language/#f","title":"&gt;F","text":"<p>Executed every 100 ms  </p>"},{"location":"Scripting-Language/#s","title":"&gt;S","text":"<p>Executed every second  </p>"},{"location":"Scripting-Language/#r","title":"&gt;R","text":"<p>Executed on restart. p vars are saved automatically after this call  </p>"},{"location":"Scripting-Language/#t","title":"&gt;T","text":"<p>Executed at least at <code>TelePeriod</code> time (<code>SENSOR</code> and <code>STATE</code>) but mostly faster up to every 100 ms, only put <code>tele-</code> vars in this section Remark: JSON variable names (like all others) may not contain math operators like - , you should set <code>SetOption64 1</code> to replace <code>-</code> (dash) with <code>_</code> (underscore). Zigbee sensors will not report to this section, use E instead.</p>"},{"location":"Scripting-Language/#h","title":"&gt;H","text":"<p>Alexa Hue interface (up to 32 virtual hue devices) (example) <code>device</code>,<code>type</code>,<code>onVars</code> Remark: hue values have a range from 0-65535. Divide by 182 to assign HSBcolors hue values.</p> <p><code>device</code> device name <code>type</code> device type - <code>E</code> = extended color; <code>S</code> = switch <code>onVars</code> assign Hue \"on\" extended color parameters for hue, saturation, brightness, and color temperature (hue,sat,bri,ct) to scripter variables  </p> <p>Example</p> <p><code>lamp1,E,on=pwr1,hue=hue1,sat=sat1,bri=bri1,ct=ct1</code></p>"},{"location":"Scripting-Language/#h-passcode","title":"&gt;h passcode","text":"<p>Siri Homekit interface (up to 16 virtual Homekit devices) passcode = 111-11-111  keep this format, numbers 0-9 <code>name</code>,<code>type</code>,<code>opt</code>,<code>var1</code>,<code>var2</code>...  </p> <p><code>name</code> device name  (max 23 characters) <code>type</code> device type (HAP_CID) - <code>7</code> = outlet, on/off - <code>5</code> = light, on/off,hue,sat,bri - <code>10</code> = sensor  </p> <p><code>opt</code> sensor type - <code>0</code> = Temperature,val - <code>1</code> = Humidity,val - <code>2</code> = Light level,val - <code>3</code> = Battery status,level,low battery,charging - <code>4</code> = Ambient light level with extended range -10000,+10000 - <code>5</code> = Contact Sensor (switch)</p> <p><code>var1 ...</code> variable name (max 11 characters) the variables denote scripting variables that need to be set by script the special variables @px x (1..9) directly set, read power states e.g. relays @sx x (1..9) directly read switch state @bx x (1..9) directly read button state  </p> <p>Example</p> <p><code>&gt;h 111-11-111</code> <code>outlet,7,0,@p1</code> <code>lamp1,5,0,pwr,hue,sat,bri</code> <code>temperature,10,0,tval</code> </p> <p>a restart is required after modification of descriptor! by faulty parameters the homekit dataset may get corrupted to reset the homekit dataset completely type in console script&gt;hki(89)  </p> <p>compilation:</p> <p>needs to add in linker to  </p> <p>build_flags -DUSE_HOMEKIT  </p> <p>lib_extra_dirs lib/libesp32_div  </p>"},{"location":"Scripting-Language/#u","title":"&gt;U","text":"<p>JSON messages from cmd status arrive here</p>"},{"location":"Scripting-Language/#c","title":"&gt;C","text":"<p>HTML messages arrive here (on web user io event, (if defined USE_HTML_CALLBACK))  </p>"},{"location":"Scripting-Language/#g","title":"&gt;G","text":"<p>global variable updated section</p>"},{"location":"Scripting-Language/#p","title":"&gt;P","text":"<p>any power change triggers here (if defined SCRIPT_POWER_SECTION)</p>"},{"location":"Scripting-Language/#jp","title":"&gt;jp","text":"<p>https webpage json parse arrives here  </p>"},{"location":"Scripting-Language/#ti","title":"&gt;ti","text":"<p><code>&gt;ti1</code> <code>&gt;ti2</code> <code>&gt;ti3</code> </p> <p>ticker callback after timer expiration</p>"},{"location":"Scripting-Language/#b_1","title":"&gt;b","text":"<p>(note lower case) executed on button state change  </p> <p><code>bt[x]</code>  read button state (x = <code>1.. MAX_KEYS</code>)  </p> <p>Example</p> <pre><code>&gt;D\ntmp=0\n&gt;b\ntmp=bt[1]\nif tmp==0  \nthen  \nprint falling edge of button1  \nendif  \nif tmp==1  \nthen  \nprint rising edge of button1  \nendif\n</code></pre>"},{"location":"Scripting-Language/#j","title":"&gt;J","text":"<p>The lines in this section are published via MQTT in a JSON payload on TelePeriod. Requires compiling with <code>#define USE_SCRIPT_JSON_EXPORT</code>. </p>"},{"location":"Scripting-Language/#w","title":"&gt;W","text":"<p>The lines in this section are displayed in the web UI main page. Requires compiling with <code>#define USE_SCRIPT_WEB_DISPLAY</code>. </p> <p>You may put any html code here. </p> <ul> <li>Variables may be substituted using %var%  </li> <li>HTML statements are displayed in the sensor section of the main page  </li> <li>HTML statements preceded with a <code>@</code> are displayed at the top of the page  </li> <li>HTML statements preceded with a <code>$</code> are displayed in the main section  </li> <li>USER IO elements are displayed at the top of the page  </li> </ul>"},{"location":"Scripting-Language/#optionally-these-sections-may-be-used","title":"optionally these sections may be used","text":""},{"location":"Scripting-Language/#ws","title":"&gt;WS","text":"<ul> <li>HTML statements are displayed in the sensor section of the main page  </li> </ul>"},{"location":"Scripting-Language/#wm","title":"&gt;WM","text":"<ul> <li>HTML statements are displayed in the main section of the main page  </li> </ul> <p>for next loops are supported to repeat HTML code (precede with % char) <pre><code>%for var from to inc\n%next\n</code></pre> but this method is preferred: script subroutines may be called sub=name of subroutine, like normal subroutines <code>%=#sub</code> in this subroutine a web line may be sent by wcs (see below) thus allowing dynamic HTML pages</p> <p>=#sub(x) in any position of webline calls subroutine. this allows inserting content</p> <p>insa(array) in any position insert all elements from an array comma separated </p> <p>%/file calls a file from the file system and send its content to browser. in this file any cmds may apply.</p> <p>A web user interface may be generated containing any of the following elements:  </p> <p>remark: state variable names used for IO in the web interface may not contain an underscore.  </p>"},{"location":"Scripting-Language/#button","title":"Button","text":"<p><code>bu(vn txt1 txt2)</code> (up to 4 buttons may be defined in one row) <code>vn</code> = name of variable to hold button state <code>txt1</code> = text of ON state of button <code>txt2</code> = text of OFF state of button  </p>"},{"location":"Scripting-Language/#pulldown","title":"Pulldown","text":"<p><code>pd(vn label (xs) txt1 txt2 ... txtn)</code> <code>vn</code> = name of variable to hold selected state <code>label</code> = label text <code>xs</code> = optional xs (default 200)   <code>txt1</code> = text of 1. entry <code>txt2</code> = text of 2. entry and so on  </p>"},{"location":"Scripting-Language/#radio-button","title":"Radio button","text":"<p><code>rb(vn label (xs) txt1 txt2 ... txtn)</code> <code>vn</code> = name of variable to hold selected state <code>label</code> = label text <code>xs</code> = optional xs (default 200)   <code>txt1</code> = text of 1. entry <code>txt2</code> = text of 2. entry and so on  </p>"},{"location":"Scripting-Language/#checkbox","title":"Checkbox","text":"<p><code>ck(vn txt (xs))</code> <code>vn</code> = name of variable to hold checkbox state <code>txt</code> = label text  <code>xs</code> = optional xs (default 200) </p>"},{"location":"Scripting-Language/#slider","title":"Slider","text":"<p><code>sl(min max vn ltxt mtxt rtxt)</code> <code>min</code> = slider minimum value <code>max</code> = slider maximum value <code>vn</code> = name of variable to hold slider value <code>ltxt</code> = label left of slider <code>mtxt</code> = label middle of slider <code>rtxt</code> = label right of slider  </p>"},{"location":"Scripting-Language/#text-input","title":"Text Input","text":"<p><code>tx(vn lbl (xs) (type min max))</code> <code>vn</code> = name of string variable to hold text state <code>lbl</code> = label text <code>xs</code> = optional xs (default 200) <code>type min max</code> = optional strings type = e.g \"datetime-local\" for date+time selector, min, max = date-time min max range  </p>"},{"location":"Scripting-Language/#time-input","title":"Time Input","text":"<p><code>tm(vn lbl (xs))</code> <code>vn</code> = name of number variable to hold time HHMM as number e.g. 1900 means 19:00 <code>lbl</code> = label text <code>xs</code> = optional xs (default 70)  </p>"},{"location":"Scripting-Language/#number-input","title":"Number Input","text":"<p><code>nm(min max step vn txt (xs) (prec))</code> <code>min</code> = number minimum value <code>max</code> = number maximum value <code>step</code> = number step value for up/down arrows <code>vn</code> = name of number variable to hold number <code>txt</code> = label text <code>xs</code> = optional xs (default 200) <code>prec</code> = optional number precision (default 1)  </p>"},{"location":"Scripting-Language/#special-html-options","title":"special html options","text":"<p><code>so(flags)</code> <code>WSO_NOCENTER</code> = 1 force elements not centered <code>WSO_NODIV</code> = 2 force elements not in extra \\&lt;div&gt; <code>WSO_FORCEPLAIN</code> = 4 send line in plain (no table elements) <code>WSO_FORCEMAIN</code> = 8 send lines in main mode ($ mode)  </p>"},{"location":"Scripting-Language/#google-charts","title":"Google Charts","text":"<p>google chart support requires arrays and to make sense also permanent arrays. Therefore on 4M Flash Systems the use of <code>USE_UFILESYS</code> is recommended while on 1 M Flash Systems the special EEPROM mode should be used (see above). other options may also be needed like <code>LARGE_ARRAYS</code> </p>"},{"location":"Scripting-Language/#basic-chart","title":"basic chart","text":"<p>draw a google chart with up to 4 data sets per chart <code>gc(T (size) array1 ... array4 \"name\" \"label1\" ... \"label4\" \"entrylabels\" \"header\" {\"maxy1\"} {\"maxy2\"})</code> <code>T</code> = type   - b=barchart   - c=columnchart   - cs=columnchart stacked    - C=combochart   - p=piechart   - l=linechart up to 4 lines with same scaling   - l2=linechart with exactly 2 lines and 2 y scales (must be given at end)   - lf2 like above but with splined lines   - h=histogram   - t=data table   - g=simple gauges (must give extra 3 vars after header, yellow start, red start, maxval)   - T=Timeline (special type arrays contains start,stop pairs in minutes timeofday)  </p> <p>b,l,h type may have the '2' option to specify exactly 2 arrays with 2 y scales given at the end of parameter list.  </p>"},{"location":"Scripting-Language/#advanced-chart","title":"advanced chart","text":"<p>a custom chart may be specified by splitting the chart definition and inserting the chart options directly. see example below  </p> <p><code>size</code> = optional size, allows to use only part of an array, must be lower then array size  </p> <p><code>array</code> = up to 4 arrays of data <code>name</code> = name of chart <code>label</code> = label for up to the 4 datasets in chart <code>entrylabel</code> = labels of each x axis entry separated by '|' char   (\"cntN\" starts numbering entries with the number N an optional /X generates numbers divided by X.   Produce labels that cycle through the array indexes, starting with the number N.   For instance, \"cnt6\" with an array of length 8 will produce the labels 6|7|0|1|2|3|4|5|   Using \"cntN/X\" will then divide the numeric value of the label, so \"cnt6/2\" with an array of length 8 will produce the labels 3|3|0|0|1|1|2|2|)   (\"wdh: before a week definition generates a week with full hours) <code>header</code> = visible header name of chart   the curve displayed in google chart starts at array index (array[0]) so array index must be set also.   thus the displayed curve may be shifted to the desired position by adjusting the array index.</p> <p>additionally you have to define the html frame to put the chart in (both lines must be preceded by a $ char)   e.g. <pre><code>$&lt;div id=\"chart1\"style=\"width:640px;height:480px;margin:0 auto\"&gt;&lt;/div&gt;\n$gc(c array1 array2 \"wr\" \"pwr1\" \"pwr2\" \"mo|di|mi|do|fr|sa|so\" \"Solar feed\")\n</code></pre></p> <p>you may define more then one chart. The charts id is chart1 ... chartN</p> <p>very customized chart definition:   define a chart like above, but add a t to the definition   this generates a google table from the arrays e.g.:   &amp;gc(lt array1 array2 \"wr\" \"pwr1\" \"pwr2\" \"mo|di|mi|do|fr|sa|so\")</p> <p>then define the options for the graph as from the doku of google e.g.:   $var options = {   $vAxes:{0:{maxValue:40,title:'Au\u00dfentemperatur'},1:{maxValue:60,title:'Solarspeicher'}},   $series:{0:{targetAxisIndex:0},1:{targetAxisIndex:1}},   $hAxis: {title: 'Wochenverlauf'},   $};   then gc(e) closes the definition    $gc(e)  </p>"},{"location":"Scripting-Language/#w-buttonlabel","title":"&gt;w ButtonLabel","text":"<p>generates a button with the name \"ButtonLabel\" in Tasmota main menu. Clicking  this button displays a web page with the HTML data of this section. all cmds like in &gt;W apply here. these lines are refreshed frequently to show e.g. sensor values. lines preceded by $ are static and not refreshed and displayed below lines without $. this option also enables a full webserver interface when USE_UFILESYS is active. you may display files from the flash or SD filesystem by specifying the url:  IP/ufs/path  . (supported files: *.jpg, *.html, *.txt) <code>&gt;w1</code> <code>&gt;w2</code> <code>&gt;w3</code> <code>&gt;w4</code> <code>&gt;w5</code> <code>&gt;w6</code> some as above <code>&gt;w</code> Requires compiling with <code>#define SCRIPT_FULL_WEBPAGE</code>. </p>"},{"location":"Scripting-Language/#m","title":"&gt;M","text":"<p>Smart Meter Interface </p>"},{"location":"Scripting-Language/#y","title":"&gt;y","text":"<p>on devices without a file system a configuration string may be defined here, e.g. xnrg_29_modbus.ino driver </p>"},{"location":"Scripting-Language/#ah","title":"&gt;ah","text":"<p>add up to 3 headers e.g. ; http rpc handler res=won(1 \"/rpc/*\") this section is only called on tasmota restart, if changing &gt;ah have to restart device  </p>"},{"location":"Scripting-Language/#on1","title":"&gt;on1","text":""},{"location":"Scripting-Language/#on2","title":"&gt;on2","text":""},{"location":"Scripting-Language/#on3","title":"&gt;on3","text":"<p>here add header x arrives  </p> <p><code>warg</code> string that contains the web args of on1 ... on3  </p> <p>If a variable does not exist, <code>???</code> is displayed for commands  </p> <p>If a Tasmota <code>SENSOR</code> or <code>STATUS</code> or <code>RESULT</code> message is not generated or a <code>Var</code> does not exist the destination variable is NOT updated.  </p>"},{"location":"Scripting-Language/#special-variables","title":"Special Variables","text":"<p>(read only) <code>upsecs</code> = seconds since start <code>uptime</code> = minutes since start <code>time</code> = minutes since midnight <code>sunrise</code> = sunrise minutes since midnight <code>sunset</code> = sunset minutes since midnight <code>tper</code> = TelePeriod (may be set also) <code>cbs</code> = command text buffer size for tasmota cmds (default 256) (may be set also) <code>tstamp</code> = timestamp (local date and time) <code>topic</code> = mqtt topic <code>maca</code> = current MAC Address <code>gtopic</code> = mqtt group topic <code>lip</code> = local ip as string <code>luip</code> = udp ip as string (from updating device when USE_SCRIPT_GLOBVARS defined)  <code>prefixn</code> = prefix n = 1-3 <code>frnm</code> = friendly name <code>dvnm</code> = device name <code>pwr[x]</code> = power state  (x = 1..N) <code>npwr</code> = number of tasmota power devices   <code>pc[x]</code> = pulse counter value  (x = 1..4) <code>tbut[x]</code> = touch screen button state  (x = 1..N) <code>sw[x]</code> = switch state  (x = 0..N) (Switch1 = <code>sw[0]</code>) <code>bt[x]</code> = button state  (x = 1..N) only valid in section b  (if defined USE_BUTTON_EVENT) <code>pin[x]</code> = GPIO pin level (x = 0..16) <code>pn[x]</code> = GPIO for sensor code x. 99 if none <code>pd[x]</code> = defined sensor for GPIO x. 999 if none <code>adc(fac (pin))</code> = get adc value (on ESP32 can select pin) fac is number of averaged samples (power of 2: 0..7) <code>sht[x]</code> = shutter position (x = 1..N) (if defined USE_SHUTTER) <code>gtmp</code> = global temperature <code>ghum</code> = global humidity <code>gprs</code> = global pressure  </p> <p>global variables now optional binary mode, much faster and more precise, also supports arrays. <code>gvr</code> = reset global variable handler <code>gvrbs</code> = get, set global variable udp buffer size <code>gvrm</code> = get, set global variable udp mode, 0 = string mode (default), 1 = binary mode <code>gvrsa(array)</code> = send array as global variable in binary mode <code>udp(0 port)</code> = open UDP port 'port' <code>udp(1)</code> = read string from UDP <code>udp(2 s1 (s2) (s3))</code> = answer to UDP remote port, up to 3 strings concatenated <code>udp(3 url s1)</code> = send string to url  and udp port <code>udp(4)</code> = return udp remote ip as string <code>udp(5)</code> = return udp remote port <code>udp(6 url port string)</code> = send a string via UDP to url and port  </p> <p>when #define USE_SCRIPT_MDNS <code>mdns(name mac type)</code> = open mdns service with name, mac (use device mac if '-') and type (use tasmota hostname if '-' or e.g. \"shelly\"). If \u201cshelly\u201d or \u201ceverhome\u201d is used, a corresponding txt record is also set (for Shelly/EcoTracker emulation).  </p> <p>deep sleep for ESP32 devices only <code>ds(-1)</code> = get deep sleep wakeup status <code>ds(x)</code> = deep sleep for x seconds <code>ds(x pin level)</code> = deep sleep for time and pin level if x &gt; 0 sleep x seconds if pin != -1 wake on pin change pin level that causes wake up  </p> <p><code>pow(x y)</code> = calculates exponential powers x^y (imprecise version only) <code>med(n x)</code> = calculates a 5 value median filter of x (2 filters possible n=0,1) <code>int(x)</code> = gets the integer part of x (like floor) <code>floor(x)</code> = gets the integer part of x <code>ceil(x)</code> = gets the integer + 1 part of x <code>round(x)</code> = round to nearest integer x <code>i(x)</code> = convert float x to integer <code>f(x)</code> = convert integer x to float <code>hn(x)</code> = converts x (0..255) to a hex nibble string <code>hni(x)</code> = converts integer x (0..255) to a hex nibble string <code>hx(x)</code> = converts x (0..4294967295, 32-bit) to a hex string <code>hxi(x)</code> = converts integer x (0..4294967295, 32-bit) to a hex string <code>hd(\"hstr\")</code> = converts hex number string to a decimal number <code>af(array index)</code> = converts 4 bytes of an array at index <code>index</code> to float number  <code>as(array)</code> = sort array <code>sas(index)</code> = sort string array (is, is1, is2, index = 1,2,3) <code>hf(\"hstr\")</code> = converts hex float number string to a decimal number <code>hf(\"hstr\" r)</code> = converts hex float number string (reverse byte order) to a decimal number <code>st(svar c n)</code> or = <code>st(svar 'c' n)</code>string token - retrieve the n<sup>th</sup> element of svar delimited by c, <code>ins(s1 s2)</code> = check if string s2 is contained in string s1, return -1 if not contained or position of contained string <code>sl(svar)</code> = gets the length of a string <code>asc(svar)</code> = gets the binary value of 1. char of a string <code>sb(svar p n)</code> = gets a substring from svar at position p (if p&lt;0 counts from end) and length n <code>is(num \"string1|string2|....|stringn|\")</code> = defines a string array optionally preset with immediate strings separated by '|' (this immediate string may be up to 255 chars long) num = 0 read only string array, num &gt; 0 number of elements in read write string array <code>is[index]</code> = gets string <code>index</code> from string array, if read-write also write string of index <code>is1(..)</code>, <code>is2(...)</code> string array see above <code>is1[x]</code>, <code>is2[x]</code> string array see above <code>rr()</code> = returns the reset reason of last restart (as string) <code>s2hms(S)</code>, converts seconds to HH:MM:SS string <code>sin(x)</code> = calculates the sinus(x) (if defined USE_ANGLE_FUNC)  <code>cos(x)</code> = calculates the cosinus(x) (if defined USE_ANGLE_FUNC) <code>acos(x)</code> = calculates the acos(x) (if defined USE_ANGLE_FUNC) <code>sqrt(x)</code> = calculates the sqrt(x) (if defined USE_ANGLE_FUNC) <code>abs(x)</code> = calculates the absolute value of x <code>mpt(x)</code> = measure pulse time, x&gt;=0 defines pin to use, -1 returns low pulse time,-2 return high pulse time (if defined USE_ANGLE_FUNC) <code>rnd(x)</code> = return a random number between 0 and x, (seed may be set by rnd(-x)) <code>sf(F)</code> = sets the CPU Frequency (ESP32) to 80,160,240 Mhz, returns current Freq. <code>s(x)</code> = explicit conversion from number x to string  may be preceded by precision digits e.g. s(2.2x) = use 2 digits before and after decimal point  </p>"},{"location":"Scripting-Language/#i2c-support","title":"I2C support","text":"<p><code>#define USE_SCRIPT_I2C</code> <code>ia(AA)</code>, <code>ia2(AA)</code> test and set I2C device with address AA (on BUS 1 or 2), returns 1 if device is present <code>iw(aa val)</code> , <code>iw1(aa val)</code>, <code>iw2(aa val)</code>, <code>iw3(aa val)</code>write val to register aa (1..3 bytes), if in aa bit 15 is set no destination register is transfered (needed for some devices), if bit 14 is set byte order is reversed <code>ir(aa)</code>, <code>ir1(aa)</code>, <code>ir2(aa)</code>, <code>ir3(aa)</code> read 1..3 bytes from register aa  </p>"},{"location":"Scripting-Language/#onewire-support","title":"Onewire support","text":"<p><code>#define USE_SCRIPT_ONEWIRE</code> support for onewire either directly or via serial port with onewire bus driver DS2480B <code>ow(SEL &lt;opt PAR&gt;)</code>     SEL 0 = init bus with pin number N (if bit 15 ist set, select serial DS2480B, lsb = rec pin, msb = trx pin)     SEL 1 = reset cmd     SEL 2 = skip cmd     SEL 3 = write PAR     SEL 4 = read     SEL 5 = reset search cmd     SEL 6 = search cmd addr index PAR     SEL 7 = select cmd addr index PAR      SEL 8 = select and set bits index PAR     SEL 9 = select and read word index PAR bit 7 = 0 start, bit 7 = 1 read result     SEL 10-18 = get byte (1-8) of adress from index PAR     SEL 99 = delete bus driver  </p>"},{"location":"Scripting-Language/#serial-io-support","title":"Serial IO support","text":"<p><code>#define USE_SCRIPT_SERIAL</code> <code>so(RXPIN TXPIN BR)</code> open serial port with RXPIN, TXPIN and baud rate BR with 8N1 serial mode (-1 for pin means don't use) <code>so(RXPIN TXPIN BR MMM)</code> open serial port with RXPIN, TXPIN and baud rate BR and serial mode e.g 7E2 (all 3 modechars must be specified) <code>so(RXPIN TXPIN BR MMM BSIZ)</code> open serial port with RXPIN, TXPIN and baud rate BR and serial mode e.g 7E2 (all 3 modechars must be specified) and serial IRW buffer size <code>sc()</code> close serial port <code>sw(STR)</code> write the string STR to serial port <code>swb(NUM)</code> write the number char code NUM to serial port <code>sa()</code> returns number of bytes available on port <code>sr()</code> read a string from serial port, all available chars up to string size <code>sr(X)</code> read a string from serial port until charcode X, all available chars up to string size or until charcode X <code>srb()</code> read a number char code from serial port <code>sp()</code> read a number char code from serial port, don't remove it from serial input (peek) <code>sra(ARRAY (flags))</code> fill an array from serial port, if USE_SML_M is enabled and Array size is 8 it is assumed to be a MODBUS request and the checksum is evaluated, if OK <code>8</code> is returned, else -2, or if flags is set Modbus response is assumed and checksum is calculated, 0 = standard Modbus, 1 = Rec BMA mode, return -2 on checksum error  a</p> <p><code>sra(ARRAY (flags))</code> fill an array from serial port, if USE_SML_M is enabled and Array size is 8 it is assumed to be a MODBUS request and the checksum is evaluated, if OK <code>8</code> is returned, else -2, or if flags is set Modbus response is assumed and ckum is calculated, 0 = standard Modbus, 1 = Rec BMA mode  <code>swa(ARRAY len (flags))</code> send len bytes of an array to serial port, if flags is set Modbus cmd is assumed and cksum is calculated, 0 = standard Modbus, 1 = Rec BMA mode <code>smw(ADDR MODE NUMBER)</code> send a value with checksum to MODBUS Address, MODE 0 = uint16, 1 = uint32, 3 = float  </p>"},{"location":"Scripting-Language/#spi-io-support","title":"SPI IO support","text":"<p><code>#define USE_SCRIPT_SPI</code> <code>spi(0 SCLK MOSI MISO)</code> defines a software SPI port with pin numbers used for SCLK, MOSI, MISO. <code>spi(0 -1 freq)</code> defines a hardware SPI port with pin numbers defined by Tasmota GPIO definition with bus frequency in Mhz. <code>spi(0 -2 freq)</code> defines a hardware SPI port 2 on ESP32 with pin numbers defined by Tasmota GPIO definition. <code>spi(1 N GPIO)</code> sets the CS pin with index N (1..4) to pin Nr GPIO. <code>spi(2 N ARRAY LEN S)</code> sends and receives an ARRAY with LEN values with S (1..3) (8,16,24 bits) if N==-1 CS is ignored. If S=4, CS is raised after each byte.</p>"},{"location":"Scripting-Language/#tcp-server-support","title":"TCP server support","text":"<p><code>#define USE_SCRIPT_TCP_SERVER</code> <code>wso(port)</code> start a tcp stream server at port <code>wsc()</code> close tcp stream server <code>wsa()</code> return bytes available on tcp stream <code>wsrs()</code> return a string read from tcp stream <code>wsws(string)</code> writes a string to tcp stream <code>wsra(array)</code> reads a tcp stream into array <code>wswa(array num (type))</code> writes num bytes of array to tcp stream, type: 0 = uint8 (default), 1 = uint16, 2 = sint16, 3 = float    </p> <p><code>ttget(TNUM SEL)</code> get tasmota timer setting from timer TNUM (1 .. 16) SEL:   0 = time   1 = time window   2 = repeat   3 = days   4 = device   5 = power   6 = mode   7 = arm <code>mqtts</code> = MQTT connection status: <code>0</code> = disconnected, <code>&gt;0</code> = connected <code>wbut</code> = button status of watch side button (if defined USE_TTGO_WATCH) <code>wdclk</code> = double tapped on display (if defined USE_TTGO_WATCH) <code>wtch(sel)</code> = gets state from touch panel sel=0 =&gt; touched, sel=1 =&gt; x position, sel=2 =&gt; y position (if defined USE_TTGO_WATCH) <code>slp(time)</code> = sleep time in seconds, pos values =&gt; light sleep, neg values =&gt; deep sleep (if defined USE_TTGO_WATCH) <code>pl(\"path\")</code> = play mp3 audio from filesystem (if defined USE_I2S_AUDIO or USE_TTGO_WATCH or USE_M5STACK_CORE2) <code>say(\"text\")</code> = plays specified text to speech (if defined USE_I2S_AUDIO or USE_TTGO_WATCH or USE_M5STACK_CORE2)  <code>c2ps(sel val)</code> = gets, sets values on ESP32 CORE2 sel=0 green led, sel=1 vibration motor, sel=2,3,4 get touch button state 1,2,3 (if defined USE_M5STACK_CORE2) <code>rec(path seconds)</code> = rec n seconds wav audio file from i2s microphone to filesystem path (if defined USE_I2S_AUDIO or USE_M5STACK_CORE2) <code>pwmN(-pin freq)</code> = defines a pwm channel N (1..N) with pin Nr and frequency (pin 0 being -64, N=5 with esp8266 and N=8 with esp32) <code>pwmN(val)</code> = outputs a pwm signal on channel N (1..N) with val (0-1023) <code>wifis</code> = Wi-Fi connection status: <code>0</code> = disconnected, <code>&gt;0</code> = connected  </p> <p><code>wcs</code> = send this line to webpage (WebContentSend) <code>wcf</code> = flushes the web buffer (WSContentFlush) <code>wfs</code> = send this file to webpage <code>rapp</code> = append this line to MQTT (ResponseAppend) <code>wm</code> = contains source of web request code e.g. 0 = Sensor display (FUNC_WEB_SENSOR)  </p> <p><code>acp(dst src)</code> = copy array, if src is numeric variable or constant array dst is filled with this value, if src = sml SML decoder results are copied.   </p> <p><code>knx(code value)</code> = sends a number value to KNX   </p> <p><code>sml(m 0 bd)</code> = set SML baud rate of Meter m to bd (baud) <code>sml(m 1 htxt)</code> = send SML Hex string htxt as binary to Meter m <code>sml(-m 1 initstr)</code> = reinits serial port of Meter m, initstr: \"baud:mode\" e.g. \"9600:8E1\", currently only baud and N,E,O are evaluated.   <code>sml(m 2)</code> = reads serial data received by Meter m into string (if m&lt;0 reads hex values, else asci values) <code>sml(m 3 hstr)</code> = inserts SML Hexstring variable hstr as binary to Meter m in Output stream e.g. for special MODBUS cmds, hstr must be a string variable NO string constant  <code>sml[n]</code> = get value of SML energy register n, if n == 0 then get number of decode lines  <code>smls[m]</code> = get value of SML meter string info of meter m, if m &lt; 0 gets string representation of numeric value of decode line m, this enables double number resolution. <code>smlv[n]</code> = get SML decode valid status of line n (1..N), returns 1 if line decoded. n=0 resets all status codes to zero  <code>smld(m)</code> = call decoder of meter m <code>smlj</code> = read or write variable, when 0 disables MQTT output of SML. <code>enrg[n]</code> = get value of energy register n 0=total, 1..3 voltage of phase 1..3, 4..6 current of phase 1..3, 7..9 power of phase 1..3, 10=start energy, 11=daily energy, 12=energy yesterday (if defined USE_ENERGY_SENSOR) <code>gjp(\"host\" \"path\")</code> = trigger HTTPS JSON page read as used by Tesla Powerwall (if defined SCRIPT_GET_HTTPS_JP) <code>gwr(\"del\" index (ec))</code> = gets non JSON element from webresponse del = delimiter char or string, index = n\u00b4th element, optional end character delimiter ec. (if defined USE_WEBSEND_RESPONSE) <code>http(\"url\" \"payload\")</code> = does a GET or POST request on a URL (http:// is internally added) <code>tsN(ms)</code> = set up to 4 timers (N=1..4) to millisecond time on expiration triggers section &gt;tiN  (if defined USE_SCRIPT_TIMER) <code>hours</code> = hours <code>mins</code> = mins <code>secs</code> = seconds <code>day</code> = day of month <code>wday</code> = day of week  (Sunday=1,Monday=2;Tuesday=3;Wednesday=4,Thursday=5,Friday=6,Saturday=7) <code>month</code> = month  <code>year</code> = year <code>epoch</code> = epoch time (from 2019-1-1 00:00:00) <code>epoffs</code> = set epoch offset, (must be no longer then 2 years to fit into single float with second precision) <code>eres</code> = result of &gt;E section set this var to 1 in section &gt;E to tell Tasmota event is handled (prevents MQTT)  </p> <p>The following variables are cleared after reading true: <code>chg[var]</code> = true if a variables value was changed (numeric vars only) <code>diff[var]</code> = difference since last variable update <code>upd[var]</code> = true if a variable was updated <code>boot</code> = true on BOOT <code>tinit</code> = true on time init <code>tset</code> = true on time set <code>mqttc</code> = true on mqtt connect <code>mqttd</code> = true on mqtt disconnect <code>wific</code> = true on Wi-Fi connect <code>wifid</code> = true on Wi-Fi disconnect  </p>"},{"location":"Scripting-Language/#system-variables-for-debugging","title":"System variables (for debugging)","text":"<p><code>stack</code> = stack size <code>heap</code> = free heap size <code>pheap</code> = PSRAM free heap size (ESP32) <code>core</code> = current core (0 or 1)  (ESP32) <code>ram</code> = used ram size <code>slen</code> = script length <code>freq</code> = cpu frequency <code>micros</code> = running microseconds <code>millis</code> = running milliseconds <code>loglvl</code> = loglevel of script cmds (may be set also)  </p> <p>Remarks: If you define a variable with the same name as a special variable that special variable is discarded  </p>"},{"location":"Scripting-Language/#commands","title":"Commands","text":"<p><code>=&gt; &lt;command&gt;</code> Execute  cmd with MQTT output enabled <code>-&gt; &lt;command&gt;</code> Execute  cmd with MQTT output disabled, recursion  disabled. Do not send MQTT or log messages (i.e., silent execute - useful to reduce traffic) <code>+&gt; &lt;command&gt;</code> Execute  cmd with MQTT output enabled, recursion enabled.   <p>Warning</p> <p>Recursion: If you execute a tasmota cmd in an &gt;E section and this cmd itself executes &gt;E you will get an infinite loop. this is disabled normally and enabled by the +&gt; in case you know what you are doing</p>"},{"location":"Scripting-Language/#variable-substitution","title":"Variable Substitution","text":"<ul> <li>A single percent sign must be given as <code>%%</code> </li> <li>Variable replacement within commands is allowed using <code>%varname%</code>. Optionally, the decimal places precision for numeric values may be specified by placing a digit (<code>%Nvarname%</code>, N = <code>0..9</code>) in front of the substitution variable (e.g., <code>Humidity: %3hum%%%</code> will output <code>Humidity: 43.271%</code>)  </li> <li>instead of variables arbitrary calculations my be inserted by bracketing %N(formula)%  </li> <li>Linefeed, tab and carriage return may be defined by \\n, \\t and \\r  </li> </ul>"},{"location":"Scripting-Language/#special-commands","title":"Special  commands:","text":"<p><code>print</code> or <code>=&gt;print</code> prints to the log for debugging A Tasmota MQTT RESULT message invokes the script's <code>E</code> section. Add <code>print</code> statements to debug a script.  </p> <p>Example</p> <pre><code>&gt;E\nslider=Dimmer\npower=POWER\n\nif upd[slider]&gt;0\nthen\nprint slider updated %slider%\nendif\n\nif upd[power]&gt;0\nthen\nprint power updated %power%\nendif\n</code></pre> <p><code>break</code> exits a section or terminates a <code>for next</code> loop <code>dpx</code> sets decimal precision to x (0-9) <code>dpx.y</code> sets preceding digits to x and decimal precision to y (0-9), the delimiter also sets the decimal point character to . or , <code>dp(x y)</code> sets preceding digits to x and decimal precision to y, the delimter if space sets decimal point character to ., a comma sets the point o comma <code>svars</code> save permanent vars <code>delay(x)</code> pauses x milliseconds (should be as short as possible) <code>beep(f l)</code> (ESP32) beeps with a passive piezo beeper. beep(-f 0) attaches PIN f to the beeper, beep(f l) starts a sound with frequency f (Hz) and len l (ms). f=0 stops the sound. <code>spin(x b)</code> set GPIO <code>x</code> (0..16) to value <code>b</code> (0,1). Only bit 0 of <code>b</code> is used - even values set the GPIO to <code>0</code> and uneven values set the GPIO to <code>1</code> <code>spinm(x m)</code> set GPIO <code>x</code> (0..16) to mode <code>m</code> (input=0, output=1, input with pullup=2,alternatively b may be: O=out, I=in, P=in with pullup) <code>ws2812(array dstoffset)</code> copies an array (defined with <code>m:vname</code>) to the WS2812 LED chain. The array length should be defined as long as the number of pixels. Color is coded as 24 bit RGB. optionally the destination offset in the LED chain may be given   if dstoffset is flagged by 0x1000, 2 values 16 bits each in an array are used for 32 bit RGBW pixels <code>hsvrgb(h s v)</code> converts hue (0..360), saturation (0..100) and value (0..100) to RGB color <code>dt</code> display text command (if #define USE_DISPLAY)  </p>"},{"location":"Scripting-Language/#subroutines-and-parameters","title":"Subroutines and Parameters","text":"<p><code>#name</code> names a subroutine. Subroutine is called with <code>=#name</code> <code>#name(param)</code> names a subroutine with a parameter. Each parameter variable must be declared in the '&gt;D' section. A subroutine with multiple parameters is declared as '#name(p1 p2 p3)', i.e. spaces between parameters. A subroutine is invoked with <code>=#name(param)</code> or '=#name(p1 p2) Invoking a subroutine sets the parameter variable to the corresponding expression of the invocation. This means that parameter variables have script wide scope, i.e. they are not local variables to the subroutine. Subroutines end with the next <code>#</code> or <code>&gt;</code> line or break. Subroutine invocations may be nested (each level uses about 600 bytes stack space, so nesting level should not exceed 4). Parameters can be numbers or strings and on type mismatch are converted.  </p> <p>If <code>#define USE_SCRIPT_SUB_COMMAND</code> is included in your <code>user_config_override.h</code>, a subroutine may be invoked via the Console or MQTT using the subroutine's name. For example, a declared subroutine <code>#SETLED(num)</code> may be invoked by typing <code>SETLED 1</code> in the Console. The parameter <code>1</code> is passed into the <code>num</code> argument. This also works with string parameters. since Tasmota capitalizes all commands you must use upper case labels.  </p> <p>It is possible to \"replace\" internal Tasmota commands. For example, if a <code>#POWER1(num)</code> subroutine is declared, the command <code>POWER1</code> is processed in the scripter instead of in the main Tasmota code.  </p> <p>String parameter should be passed within double quotas: <code>CUSTOMCMD \"Some string here\"</code></p> <p><code>=(svar)</code> executes a routine whose name is passed as a string in a variable (dynamic or self modifying code). The string has to start with <code>&gt;</code> or <code>=#</code> for the routine to be executed.</p> <p>a subroutine may return a value (number or string): <code>return var</code></p> <p>a subroutine is called with: var=#sub(x) when returning a value or =#sub(x) when not returning a value</p> <pre><code>D\nsvar=\"=#subroutine\"\n\nS\n=(svar)\n\n#subroutine\nprint subroutine was executed\n</code></pre>"},{"location":"Scripting-Language/#for-loop-loop-count-must-not-be-less-than-1-nesting-up-to-3-levels","title":"For loop (loop count must not be less than 1, nesting up to 3 levels)","text":"<pre><code>for var &lt;from&gt; &lt;to&gt; &lt;inc&gt;  \nnext  \n</code></pre>"},{"location":"Scripting-Language/#switch-selector-numeric-or-string","title":"Switch selector  (numeric or string)","text":"<pre><code>switch x  \ncase a  \ncase b  \nends  \n</code></pre>"},{"location":"Scripting-Language/#conditional-statements","title":"Conditional Statements","text":"<p>There are two syntax alternatives. You may NOT mix both formats.  </p> <pre><code>if a==b  \nand x==y  \nor k==i  \nthen = do this  \nelse = do that  \nendif  \n</code></pre> <p>or </p> <pre><code>if a==b  \nand x==y  \nor k==i {  \n  = do this  \n} else {  \n  = do that  \n}  \n</code></pre> <p>Remarks: The last closing bracket must be on a separate line Calculations are permitted in conditional expressions, e.g.,  </p> <pre><code>if var1-var2==var3*var4\n</code></pre> <p>Conditional expressions may be enclosed in parentheses. The statement must be on a single line. e.g.,  </p> <pre><code>if ((a==b) and ((c==d) or (c==e)) and (s!=\"x\"))\n</code></pre>"},{"location":"Scripting-Language/#mapping-function","title":"Mapping Function","text":"<p><pre><code>mp(x cond1 result1 cond2 result2 ... cond&lt;n&gt; result&lt;n&gt;)  \n</code></pre> It addresses a standard task with less code and much flexibility: mapping an arbitrary incoming numeric value into the allowed range. The numeric value x (float only - no integer I:) passed as the first parameter is followed by parameter pairs which can be repeated. A parameter pair consists of condition and result. So input value x is compared to the conditions in the order they are provided as subsequent parameters. If the value matches the condition, the associated result is returned as function. Subsequent rules are skipped. If x matches none of the conditions, x is returned unchanged as result. Conditions consist of one of the comparison operators \"&lt;\", \"&gt;\", \"=\" followed by a numeric value/variable. Be noted that 2-char-operators like \"&gt;=\" are not allowed. Results consist of a numeric value/variable. <pre><code>Example 1: y=mp(x &lt;8 0)\n           This mapping reads: If x is less than 8 return 0, otherwise return x\n                                                          .\nExample 2: y=mp(x &gt;100 100)\n           This mapping reads: If x is greater than 100 return 100, otherwise x.\n\nExample 3: y=mp(x &lt;8 0 &gt;100 100)\n           This mapping reads: Assigns 0 to y if x is less than 8. Assigns 100 to y if x is greater than 100. \n                               Assigns x to y for all values of x that do not meet the above criteria (8 to 100).\nThe above code of example 3 does the same as the following code - with just one line of code and 16 characters less:\ny=x\nif x&lt;8 {\ny=0\n}\nif x&gt;100 {\ny=100\n}\n</code></pre>"},{"location":"Scripting-Language/#m-e-mail","title":"&gt;m E-mail","text":"<p><code>#define USE_SENDMAIL</code> Enabling this feature also enables Tasmota TLS as <code>sendmail</code> uses SSL.  </p> <p><code>sendmail [server:port:user:passwd:from:to:subject] msg</code> </p> <p>Example</p> <pre><code>sendmail [smtp.gmail.com:465:user:passwd:&lt;sender@gmail.com&gt;:&lt;rec@gmail.com&gt;:alarm] %string%\n</code></pre> <p>Remark: A number of e-mail servers (such as Gmail) require the receiver's e-mail address to be enclosed by angle brackets <code>&lt; ... &gt;</code> as in example above. Most other e-mail servers also accept this format. While ESP8266 sendmail needs brackets, ESP32 sendmail inserts brackets itself so you should not specify brackets here.  </p> <p>Warning</p> <p>Don't use your Google account password with GMAIL SMTP server. You must create an Application specific password</p> <p>The following parameters can be specified during compilation via <code>#define</code> directives in <code>user_config_override.h</code>: * <code>EMAIL_SERVER</code> * <code>EMAIL_PORT</code> * <code>EMAIL_USER</code> * <code>EMAIL_PASSWORD</code> * <code>EMAIL_FROM</code> </p> <p>To use any of these values, pass an <code>*</code> as its corresponding argument placeholder.  </p> <p>Example</p> <p><code>sendmail [*:*:*:*:*:&lt;rec@gmail.com&gt;:theSubject] theMessage</code></p> <p>Instead of passing the <code>msg</code> as a string constant, the body of the e-mail message may also be composed using the script <code>m</code> (note lower case) section. The specified text in this script section must end with a <code>#</code> character. <code>sendmail</code> will use the <code>m</code> section if <code>*</code> is passed as the <code>msg</code> parameter. in this &gt;m section you may also specify email attachments. @/filename specifies a file to be attached (if file system is present) &amp;arrayname specifies an array attachment (as tab delimited text, no file system needed) $N attach a webcam picture from rambuffer number N (usually 1)  </p> <p>See Scripting Cookbook Example </p>"},{"location":"Scripting-Language/#mqtt-subscribe-unsubscribe","title":"MQTT Subscribe, Unsubscribe*","text":"<p><code>#define SUPPORT_MQTT_EVENT</code> <code>subscribe</code> and <code>unsubscribe</code> commands are supported. In contrast to rules, no event is generated but the event name specifies a variable defined in <code>D</code> section and this variable is automatically set on transmission of the subscribed item within a script the subscribe cmd must be send with +&gt; instead of =&gt; the MQTT decoder may be configured for more space in user config overwrite by <code>#define MQTT_EVENT_MSIZE</code> xxx   (default is 256) <code>#define MQTT_EVENT_JSIZE</code> xxx   (default is 400)  </p>"},{"location":"Scripting-Language/#file-system-support","title":"File System Support","text":"<p><code>#define USE_UFILESYS</code> optional for SD_CARD: <code>#define USE_SDCARD</code> <code>#define SDCARD_CS_PIN X</code> X = GPIO of card chip select  SD card uses standard hardware SPI GPIO: mosi,miso,sclk depending on used linker file you get a flash file system with the same functionality but very low capacity (e.g. 2 MB) A maximum of four files may be open at a time e.g., allows for logging sensors to a tab delimited file and then downloading the file (see Sensor Logging example)  The script itself is also stored on the file system with a default size of 8192 characters  </p> <p><code>fr=fo(\"fname\" m)</code> open file fname, mode 0=read, 1=write, 2=append (returns file reference (0-3) or -1 for error (alternatively m may be: r=read, w=write, a=append). For files on SD card, filename must be preceded with / e.g. fr=fo(\"/fname.txt\" 0) <code>res=fw(\"text\" fr)</code> writes text to (the end of) file fr, returns number of bytes written <code>res=fr(svar fr)</code> reads a string into svar, returns bytes read. String is read until delimiter (\\t \\n \\r) or eof <code>fc(fr)</code> close file <code>ff(fr)</code> flush file, writes cached data and updates directory <code>fd(\"fname\")</code> delete file fname <code>frn(\"spath\" \"dpath\")</code> rename a file <code>flx(fname)</code> create download link for file (x=1 or 2) fname = file name of file to download <code>fsm</code> return 1 if filesystem is mounted, (valid SD card found) <code>res=fsi(sel)</code> gets file system information, sel=0 returns total media size, sel=1 returns free space both in kB    <code>fz(fr)</code> returns file size <code>fa(fr)</code> returns number of available bytes in open file stream <code>fs(fr pos)</code> seek to file position pos <code>fwb(byte fr)</code> write byte to file <code>frb(fr)</code> read byte from file <code>frw(fr url)</code> read file from web url, if url is an immediate string it may be longer than max string size to support very long URLs. <code>fcs(fr \"del\" index ec)</code> = gets non string from file: del = delimiter char or string, index = n\u00b4th element, ec = end character delimiter. files in filesystem may also be listed or downloaded via http://ip/ufs/filename with http://ip/ufs/$varname(;varname2;...) you may list variables and arrays from scripter in json format.</p>"},{"location":"Scripting-Language/#other-commands-flash","title":"Other commands   (+?? flash)","text":"<p><code>#define USE_FEXTRACT</code> <code>fxt(fr ts_from ts_to col_offs accum array1 array2 ... arrayn)</code> read arrays from csv file from timestamp to timestamp with column offset and accumulate values into arrays1 .. N, assumes csv file with timestamp in 1. column and data values in columns 2 to n. <code>fxto(...</code> same as above with time optimized access <code>cts(tstamp flg)</code> convert timestamp to German locale format back and forth flg=0 to webformat, 1 to German format <code>tso(tstamp day flag)</code> add time offset in days to timestamp optional flg = char 0 zo zero time HH:MM:SS <code>tsn(tstamp)</code> convert timestamp to seconds <code>s2t(seconds)</code> convert seconds to Tasmota timestamp  </p>"},{"location":"Scripting-Language/#extended-commands-09k-flash","title":"Extended commands   (+0,9k flash)","text":"<p><code>#define USE_SCRIPT_FATFS_EXT</code> <code>fmt(0)</code> format flash file system (erases all data) <code>fmd(\"fname\")</code> make directory fname <code>frd(\"fname\")</code> remove directory fname <code>fra(array fr)</code> reads array from open file with fr (assumes tab delimited entries) <code>fwa(array fr (a))</code> writes array to open file with fr (writes tab delimited entries and line feed at end) the optional a parameter ommits the linefeed for appending arrays <code>fx(\"fname\")</code> check if file fname exists <code>fe(\"fname\")</code> execute script fname (max 2048 bytes, script must start with the '&gt;' character on the first line) <code>lfw(\"fname\" payload limit)</code> logs a string (payload) to a file (fname) with size limit (limit)  paylyoad is added to end of file together with a LF character. if file size is exceeded first line of file is removed.  <code>fra(array fr)</code> reads array from open file with fr (assumes tab delimited entries) <code>fwa(array fr (a))</code> writes array to open file with fr (writes tab delimited entries and line feed at end) the optional a parameter ommits the linefeed for appending arrays </p>"},{"location":"Scripting-Language/#t-esp32-real-multitasking-support","title":"&gt;t ESP32 real Multitasking support","text":"<p><code>#define USE_SCRIPT_TASK</code>  enables support for multitasking scripts res=ct(num timer core (prio) (stack)) creates a task num (1 or 2) with optional priority and stack size which is executed every timer (ms) time on core 0 or 1  </p> <p>the sections are named &gt;t1 for task 1 &gt;t2 for task 2  </p> <p>Example</p> <pre><code>&gt;D\n&gt;B\n; create task 1 every 1000 ms on core 0\nct(1 1000 0)\n; create task 2 every 3000 ms on core 1\nct(2 3000 1)\n\n&gt;t1\nprint task1 on core %core%\n\n&gt;t2\nprint task2 on core %core%\n</code></pre>"},{"location":"Scripting-Language/#esp32-webcam-support","title":"ESP32 Webcam support","text":"<p><code>#define USE_WEBCAM</code> Template for AI THINKER CAM :</p> <p>remarks: - GPIO0 zero must be disconnected from any wire after programming because this pin drives the cam clock and does not tolerate any capacitive load - Only boards with PSRAM should be used. To enable PSRAM board should be se set to esp32cam in common32 of platform_override.ini board                   = esp32cam - To speed up cam processing CPU frequency should be better set to 240Mhz in common32 of platform_override.ini board_build.f_cpu       = 240000000L  </p> <p>file system extension: <code>fwp(pnum fr)</code> write picture from RAM buffer number pnum to SD card file with file reference fr specific webcam commands: <code>res=wc(sel p1 p2)</code> control webcam, sel = function selector  p1 ... optional parameters <code>res=wc(0 pres)</code> init webcam with picture resolution pres, returns 0 when error, 2 when PSRAM found, else 1  pres * <code>0 = FRAMESIZE_QQVGA,    // 160x120</code> * <code>1 = FRAMESIZE_QQVGA2,   // 128x160</code> * <code>2 = FRAMESIZE_QCIF,     // 176x144</code> * <code>3 = FRAMESIZE_HQVGA,    // 240x176</code> * <code>4 = FRAMESIZE_QVGA,     // 320x240</code> * <code>5 = FRAMESIZE_CIF,      // 400x296</code> * <code>6 = FRAMESIZE_VGA,      // 640x480</code> * <code>7 = FRAMESIZE_SVGA,     // 800x600</code> * <code>8 = FRAMESIZE_XGA,      // 1024x768</code> * <code>9 = FRAMESIZE_SXGA,     // 1280x1024</code> * <code>10 = FRAMESIZE_UXGA,     // 1600x1200</code> </p> <p><code>res=wc(1 bnum)</code> capture picture to rambuffer bnum (1..4), returns framesize of picture or 0 when error <code>res=wc(2 sel p1)</code> execute various controls, details below. <code>res=wc(3)</code> gets picture width <code>res=wc(4)</code> gets picture height <code>res=wc(5 p)</code> start stop streaming 0=stop, 1=start <code>res=wc(6 p)</code> start stop motion detector, p=0 =&gt; stop detector, p=T start detector with picture every T ms, -1 get picture difference, -2 get picture brightness <code>res=wc(7 p)</code> start stop face detector, p=0 =&gt; stop detector, p=T start detector with picture every T ms, -1 get number of faces found in picture (USE_FACE_DETECT must be defined)  </p> <p>control cmds sel = * 0 fs = set frame size (see above for constants)   * 1 se = set special effect  </p> <ul> <li><code>0 = no effect</code> </li> <li><code>1 = negative</code> </li> <li><code>2 = black and white</code> </li> <li><code>3 = reddish</code> </li> <li><code>4 = greenish</code> </li> <li><code>5 = blue</code> </li> <li> <p><code>6 = retro</code> </p> </li> <li> <p>2 fl = set horizontal flip 0,1  </p> </li> <li>3 mi = set vertical mirror 0,1  </li> </ul> <p>to read a value without setting pass -1</p> <ul> <li> <p>extensions to the email system on ESP32 <code>#define SEND_EMAIL</code> and <code>#define USE_ESP32MAIL</code> enables specific ESP32 mail server this server can handle more mail servers by supporting START_TLS remark:  mail addresses must not be enclosed with &lt;&gt; because the server inserts them automatically this server also supports email attachments in the &gt;m section you may write &amp;/file.txt  to attach a file from SD card $N   N=1..4 to attach a picture from picture RAM buffer number N  </p> </li> <li> <p>displaying webcam pictures in WEBUI you may display a webcam picture by giving the name /wc.jpg?p=N (1..4) for RAM picturebuffer N \"&lt;img src=\"/wc.jpg?p=1\" alt=\"webcam image\" &gt;\" you may also provide the picture size  (h and v have to be preset before) \"&lt;img src=\"/wc.jpg?p=1\" alt=\"webcam image\" style=\"width:%w%px;height:%h%px;\"&gt;\" if you precede the line by &amp; char the image is displayed in the main section, else in the sensor tab section  </p> </li> </ul> <p>the webcam stream can be specified by the following line lip is a system variable containing the local device ip  \"&amp;&lt;br&gt;\" \"&amp;&lt;img src=\"http://%lip%:81/stream\" style=\"width:%w%px;height:%h%px\"&gt;\" \"&amp;&lt;br&gt;&lt;center&gt;webcam stream\"  </p> <p>remark: the Flash illumination LED is connected to GPIO4</p> <p>Example</p> <pre><code>    &gt;D\n    res=0\n    w=0\n    h=0\n    mot=0\n    bri=0\n\n    &gt;B\n    ; init cam with QVGA\n    res=wc(0 4)\n    ; get pixel size\n    w=wc(3)\n    h=wc(4)\n    ; start motion detector, picture every 1000 ms\n    mot=wc(6 1000)\n\n    &gt;S\n    if wific&gt;0\n    then\n    ; when wifi up, start stream\n    res=wc(5 1)\n    endif\n\n    ; get motion detect diff value\n    mot=wc(6 -1)\n    ; get picture brightnes\n    bri=wc(6 -2)\n\n    &gt;W\n    &lt;center&gt;motion diff = %mot%&lt;br&gt;\n    &lt;center&gt;brightness = %bri%&lt;br&gt;\n    ; show stream on WEBUI\n    &amp;&lt;br&gt;\n    &amp;&lt;img src=\"http://%lip%:81/stream\" style=\"width:%w%px;height:%h%px\"&gt;\n    &amp;&lt;br&gt;&lt;center&gt;webcam stream\n</code></pre>"},{"location":"Scripting-Language/#scripting-cookbook","title":"Scripting Cookbook","text":"<pre><code>a valid script must start with &gt;D in the first line!  \nsome samples still contain comment lines before &gt;D. This is no longer valid!\n</code></pre>"},{"location":"Scripting-Language/#simple-example-to-start-with","title":"simple example to start with","text":"<pre><code>&gt;D\n; in this section you may define and or preset variables, there are numbers or strings.\n; in contrast to rules you may choose any variable name\n; numeric variable\nval1=1.234\n; numeric variable that is preserved after reboot or power down\np:val2=0\n; text variable\ntxt=\"hello world\"\n\n&gt;B\n; this section is executed durig boot or on script restart\nprint we are booting\n\n&gt;S\n; this section is executed every second\nprint one second tick\n; variables may be printed enclosed with % char, thus showing \"hello world 1.234\"\n; very handy for debugging\nprint %txt% %val1%\n\n; check if upcounting seconds give zero result when dividing by 10\n; upsecs is a system defined variable that counts seconds from start\n\n; you may use if then, else, endif\nif upsecs%10==0\nthen\n    print every 10 seconds\nendif\n\n; or if {} else {}\nif upsecs%10==0 {\n    print every 10 seconds\n}\n\n&gt;R\n; this section is executed on restart\nprint we are restarting\n</code></pre>"},{"location":"Scripting-Language/#scripting-language-example","title":"Scripting Language Example","text":"<pre><code>**Actually this code is too large**. This is only meant to show some of the possibilities\n\n&gt;D\n; define all vars here\np:mintmp=10  (p:means permanent)\np:maxtmp=30\nt:timer1=30  (t:means countdown timer)\nt:mt=0\ni:count=0  (i:means auto counter)\nhello=\"hello world\"\nstring=\"xxx\"\nurl=\"[_IP_]\";\nhum=0\ntemp=0\nzigbeetemp=0\ntimer=0\ndimmer=0\nsw=0\nrssi=0\nparam=0\n\ncol=\"\"\nocol=\"\"\nchan1=0\nchan2=0\nchan3=0\n\nahum=0\natemp=0\ntcnt=0\nhour=0\nstate=1\nm:med5=0\nM:movav=0\n; define array with 10 entries\nm:array=0 10\n\n&gt;B\nstring=hello+\"how are you?\"\nprint BOOT executed\nprint %hello%\n=&gt;mp3track 1\n\n; list gpio pin definitions\nfor cnt 0 16 1\ntmp=pd[cnt]\nprint %cnt% = %tmp%\nnext\n\n; get gpio pin for relais 1\ntmp=pn[21]\nprint relais 1 is on pin %tmp%\n\n; pulse relais over raw gpio\nspin(tmp 1)\ndelay(100)\nspin(tmp 0)\n\n; raw pin level\nprint level of gpio1 %pin[1]%\n\n; pulse over tasmota cmd\n=&gt;power 1\ndelay(100)\n=power 0\n\n&gt;T\nhum=BME280#Humidity\ntemp=BME280#Temperature\nrssi=Wifi#RSSI\nstring=SleepMode\n\n; add to median filter\nmedian=temp\n; add to moving average filter\nmovav=hum\n\n; show filtered results\nprint %median% %movav%\n\nif chg[rssi]&gt;0\nthen print rssi changed to %rssi%\nendif\n\nif temp&gt;30\nand hum&gt;70\nthen print damn hot!\nendif\n\n=#siren(5)\n\n; loop nesting workaround\n; by using subroutine\n#siren(num)\nfor cnt 1 num 1\n=#stone\nnext\n\n#stone\nfor tone 2000 1000 -20\nbeep(tone 10);\ndelay(12)\nnext\n\n&gt;S\n; every second but not completely reliable time here\n; use upsecs and uptime or best t: for reliable timers\n\n; arrays\narray[1]=4\narray[2]=5\ntmp=array[1]+array[2]\n\n; call subrountines with parameters\n=#sub1(\"hallo\")\n=#sub2(999)\n\n; stop timer after expired\nif timer1==0\nthen timer1=-1\nprint timer1 expired\nendif\n\n; auto counter with restart\nif count=10\nthen print 10 seconds over\ncount=0\nendif\n\nif upsecs%5==0\nthen print %upsecs%  (every 5 seconds)\nendif\n\n; not recommended for reliable timers\ntimer+=1\nif timer&gt;=5\nthen print 5 seconds over (may be)\ntimer=0\nendif\n\ndimmer+=1\nif dimmer&gt;100\nthen dimmer=0\nendif\n\n=&gt;dimmer %dimmer%\n=&gt;WebSend %url% dimmer %dimmer%\n\n; show on display\ndp0\ndt [c1l1f1s2p20] dimmer=%dimmer%\n\nprint %upsecs% %uptime% %time% %sunrise% %sunset% %tstamp%\n\nif time&gt;sunset\nor time&lt;sunrise\nthen\n; night time\nif pwr[1]==0\nthen =&gt;power1 1\nendif\nelse\n; day time\nif pwr[1]&gt;0\nthen =&gt;power1 0\nendif\nendif\n\n; clr display on boot\nif boot&gt;0\nthen dt [z]\nendif\n\n; frost warning\nif ((temp&lt;0 or zigbeetemp&lt;0) and mt&lt;=0)\nthen =#sendmail(\"frost alert\")\n; alarm only every 5 minutes\nmt=300\n=mp3track 2\nendif\n\n; var has been updated\nif upd[hello]&gt;0\nthen print %hello%\nendif\n\n; send to Thingspeak every 60 seconds\n; average data in between\nif upsecs%60==0\nthen\nahum&gt;=tcnt\natemp&gt;=tcnt\n=WebSend [_IP_]/update?key=_token_&amp;field1=%atemp%&amp;field2=%ahum%\ntcnt=0\natemp=0\nahum=0\nelse\nahum+=hum\natemp+=temp\ntcnt+=1\nendif\n\nhour=int(time/60)\nif chg[hour]&gt;0\nthen\n; exactly every hour\nprint full hour reached\nendif\n\nif time5 {\nprint more then 5 minutes after midnight\n} else {\nprint less then 5 minutes after midnight\n}\n\n; publish abs hum every teleperiod time\nif mqtts&gt;0\nand upsecs%tper==0\nthen\n; calc abs humidity\ntmp=pow(2.718281828 (17.67*temp)/(temp+243.5))\ntmp=(6.112*tmp*hum*18.01534)/((273.15+temp)*8.31447215)\n; publish median filtered value\n=&gt;Publish tele/%topic%/SENSOR {\"Script\":{\"abshum\":%med(0 tmp)%}}\nendif\n\n;switch case state machine\nswitch state\ncase 1\nprint state=%state% , start\nstate+=1\ncase 2\nprint state=%state%\nstate+=1\ncase 3\nprint state=%state%  , reset\nstate=1\nends\n\n; subroutines\n#sub1(string)\nprint sub1: %string%\n#sub2(param)\nprint sub2: %param%\n\n#sendmail(string)\n=&gt;sendmail [smtp.gmail.com:465:user:passwd:&lt;sender@gmail.de:&lt;rec@gmail.de:alarm] %string%\n\n&gt;E\nprint event executed!\n\n; Assign temperature from a Zigbee sensor\nzigbeetemp=ZbReceived#0x2342#Temperature\n; get HSBColor 1. component\ntmp=st(HSBColor , 1)\n\n; check if switch changed state\nsw=sw[1]\nif chg[sw]&gt;0\nthen =&gt;power1 %sw%\nendif\n\nhello=\"event occurred\"\n\n; check for Color change (Color is a string)\ncol=Color\n; color change needs 2 string vars\nif col!=ocol\nthen ocol=col\nprint color changed  %col%\nendif\n\n; or check change of color channels\nchan1=Channel[1]\nchan2=Channel[2]\nchan3=Channel[3]\n\nif chg[chan1]&gt;0\nor chg[chan2]&gt;0\nor chg[chan3]&gt;0\nthen = color has changed\nendif\n\n; compose color string for red\ncol=hn(255)+hn(0)+hn(0)\n=color %col%\n\n&gt;R\nprint restarting now\n</code></pre>"},{"location":"Scripting-Language/#sensor-logging","title":"Sensor Logging","text":"<pre><code>; define all vars here\n; reserve large strings\n&gt;D 48\nhum=0\ntemp=0\nfr=0\nres=0\ncnt=0\n; moving average for 60 seconds\nM:mhum=0 60\nM:mtemp=0 60\nstr=\"\"\n\n&gt;B\n; set sensor file download link\n;fl1(\"slog.txt\")\n; delete file in case we want to start fresh\n;fd(\"slog.txt\")\n\n; list all files in root directory\nfr=fo(\"/\" 0)\nfor cnt 1 20 1\nres=fr(str fr)\nif res&gt;0\nthen\nprint %cnt% : %str%\nelse\nbreak\nendif\nnext\nfc(fr)\n\n&gt;T\n; get sensor values\ntemp=BME280#Temperature\nhum=BME280#Humidity\n\n&gt;S\n; average sensor values every second\nmhum=hum\nmtemp=temp\n\n; write average to sensor log every minute\nif upsecs%60==0\nthen\n; open file for write\nfr=fo(\"slog.txt\" 1)\n; compose string for tab delimited file entry\nstr=s(upsecs)+\"\\t\"+s(mhum)+\"\\t\"+s(mtemp)+\"\\n\"\n; write string to log file\nres=fw(str fr)\n; close file\nfc(fr)\nendif\n\n&gt;R\n</code></pre>"},{"location":"Scripting-Language/#global-variables-example","title":"global variables example","text":"<p>make temperature and humidity of an SHT sensor public all devices in the local network may use the global variables needs #define USE_SCRIPT_GLOBVARS  </p> <p>Sender:</p> <pre><code>&gt;D\ng:temp=0\ng:hum=0\n\n&gt;T\ntemp=SHT3X_0x44#Temperature\nhum=SHT3X_0x44#Humidity\n</code></pre> <p>Receiver(s) displays the value on a display</p> <pre><code>&gt;D\ng:temp=0\ng:hum=0\n\n&gt;S\ndt [l1c1p10]temp=%temp% C\ndt [l2c1p10]hum=%hum% %%\n</code></pre>"},{"location":"Scripting-Language/#e-paper-29-display-with-sgp30-and-bme280","title":"e-Paper 29 Display with SGP30 and BME280","text":"<p>Some variables are set from ioBroker</p> <pre><code>&gt;D\nhum=0\ntemp=0\npress=0\nahum=0\ntvoc=0\neco2=0\nzwz=0\nwr1=0\nwr2=0\nwr3=0\notmp=0\npwl=0\ntmp=0\n; preset units in case they are not available\npunit=\"hPa\"\ntunit=\"C\"\n\n&gt;B\n;reset auto draw\ndt [zD0]\n;clr display and draw a frame\ndt [x0y20h296x0y40h296]\n\n&gt;T\n; get telemetry sensor values\ntemp=BME280#Temperature\nhum=BME280#Humidity\npress=BME280#Pressure\ntvoc=SGP30#TVOC\neco2=SGP30#eCO2\nahum=SGP30#aHumidity\ntunit=TempUnit\npunit=PressureUnit\n\n&gt;S\n; update display every [`TelePeriod`](Commands.md#teleperiod)\nif upsecs%tper==0\nthen\ndp2\ndt [f1p7x0y5]%temp% %tunit%\ndt [p5x70y5]%hum% %%[x250y5t]\ndt [p11x140y5]%press% %punit%\ndt [p10x30y25]TVOC: %tvoc% ppb\ndt [p10x160y25]eCO2: %eco2% ppm\ndt [p10c26l5]ahum: %ahum% g^m3\n\ndp0\ndt [p25c1l5]WR 1 (Dach)  : %wr1% W\ndt [p25c1l6]WR 2 (Garage): %-wr3% W\ndt [p25c1l7]WR 3 (Garten): %-wr2% W\ndt [p25c1l8]Aussentemperatur: %otmp% C\ndt [x170y95r120:30f2p6x185y100] %pwl% %%\n; now update screen\ndt [d]\nendif\n\n&gt;E\n\n&gt;R\n</code></pre>"},{"location":"Scripting-Language/#e-paper-42-display-with-sht31-and-bme280","title":"e-Paper 42 Display with SHT31 and BME280","text":"<p>This script shows 2 graphs on a 4.2 inch e-Paper display: 1. some local sensors, and 2. power statistics</p> <ul> <li>The first graph is the battery level of a solar battery (Tesla PowerWall 2)  </li> <li>The second graph shows the solar yield of the roof panels in Watts  </li> <li>Another special feature is that this script displays daily and weekly averages (via moving average) of all power IO of the house.  </li> <li>it sends an email every Sunday night with the weekly data  </li> <li>it displays a google bar chart on the webui with values for each weekday of the last week  </li> <li>ESP32 CPU with SD card </li> <li>Since the display is a full update panel it is updated only once a minute  </li> <li>Some values (like power meters) are set remotely from ioBroker  </li> </ul> <pre><code>&gt;D\nhum=0\ntemp=0\npress=0\nzwz=0\nwr1=0\nwr2=0\nwr3=0\notmp=0\npwl=0\nez1=0\nsez1=0\nM:mez1=0 7\nezh=0\nsezh=0\nM:mezh=0 7\nvzh=0\nsvzh=0\nM:mvzh=0 7\nwd=0\nres=0    \nhr=0\nt1=0\nres=0\n\n&gt;B\n-&gt;setoption64 1\ntper=30\n\ndt [IzD0]\ndt [zG10352:5:40:-350:80:10080:0:100f3x360y40]100 %%[x360y115]0 %%\ndt [f1x100y25]Powerwall - 7 Tage[f1x360y75] 0 %%\ndt [G10353:5:140:-350:80:10080:0:5000f3x360y140]+5000 W[x360y215]0 W\ndt [f1x70y125]Volleinspeisung - 7 Tage[f1x360y180] 0 W\ndt [p13x10y230]WR 1,2,3:\ndt [p13x10y245]H-Einsp.:\ndt [p13x10y260]H-Verbr.:\ndt [p13x10y275]D-Einsp.:\ndt [d]\n\ndt [Gr0:/g0_sav.txt:]\ndt [Gr1:/g1_sav.txt:]\n\nbeep(-25 0)\nbeep(1000 100)\n\n&gt;T\npress=BMP280#Pressure\ntemp=SHT3X_0x44#Temperature\nhum=SHT3X_0x44#Humidity\n\n&gt;S\n\nif upsecs%60==0\nthen\ndp2\ndt [f1p7x0y5]%temp% C\ndt [x0y20h400x250y5T][x350t][f1p10x70y5]%hum% %%\ndt [p10x140y5]%press% hPa\ndp0\ndt [p5x360y75]%pwl% %%\ndt [p6x360y180]%wr1%W\ndt [g0:%pwl%g1:%wr1%]\n\ndt [p24x75y230] %wr1% W : %-wr2% W : %-wr3% W\ndt [p-10x75y245]%ezh% kWh\ndt [p-10x75y260]%vzh% kWh\ndt [p-10x75y275]%ez1% kWh\n\nt1=mezh*7\ndt [p-10x150y245]: %t1% kWh\nt1=mvzh*7\ndt [p-10x150y260]: %t1% kWh\nt1=mez1*7\ndt [p-10x150y275]: %t1% kWh\n\ndp1\nt1=ezh-sezh\ndt [p12x250y245]: %t1% kWh\nt1=vzh-svzh\ndt [p12x250y260]: %t1% kWh\nt1=ez1-sez1\ndt [p12x250y275]: %t1% kWh\n\ndp0\ndt [f2p5x320y250] %otmp%C\n\ndt [d]\nprint updating display\nendif\n\nhr=hours\nif chg[hr]&gt;0\nand hr==0\nthen\nmez1=ez1-sez1\nsez1=ez1\nmezh=ezh-sezh\nsezh=ezh\nmvzh=vzh-svzh\nsvzh=vzh\nendif\n\nif sezh==0\nthen\nsez1=ez1\nsezh=ezh\nsvzh=vzh\nendif\n\nwd=wday\nif chg[wd]&gt;0\nand wd==1\nthen\n=&gt;sendmail [*:*:*:*:*:user.tasmota@gmail.com: Wochenbericht]*\nprint sending email\nendif\n\n\nif upsecs%300==0\nthen\n=#savgraf\nprint saving graph\nendif\n\n#savgraf\ndt [Gs0:/g0_sav.txt:]\ndt [Gs1:/g1_sav.txt:]\n\n&gt;m\nWochenbericht Einspeisung und Verbrauch&lt;br&gt;&lt;br&gt;\nw1=%mez1[1]%,%mez1[2]%,%mez1[3]%,%mez1[4]%,%mez1[5]%,%mez1[6]%,%mez1[7]%,%mez1[8]%&lt;br&gt;\nw2=%mezh[1]%,%mezh[2]%,%mezh[3]%,%mezh[4]%,%mezh[5]%,%mezh[6]%,%mezh[7]%,%mezh[8]%&lt;br&gt;\nw3=%mvzh[1]%,%mvzh[2]%,%mvzh[3]%,%mvzh[4]%,%mvzh[5]%,%mvzh[6]%,%mvzh[7]%,%mvzh[8]%&lt;br&gt;\n#\n&gt;W\n&amp;&lt;br&gt;&lt;div id=\"container\"style=\"width:640px;height:480px;margin:0 auto\"&gt;&lt;/div&gt;&lt;br&gt;\n&amp;&lt;script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"&gt;&lt;/script&gt;\n&amp;&lt;script type=\"text/javascript\"&gt;google.charts.load('current',{packages:['corechart']});&lt;/script&gt;\n&amp;&lt;script language=\"JavaScript\"&gt;function drawChart(){var data=\n&amp;google.visualization.arrayToDataTable([\n&amp;['weekday','Power'],['Mo',%mvzh[1]%],['Di',%mvzh[2]%],['Mi',%mvzh[3]%],['Do',%mvzh[4]%],\n&amp;['Fr',%mvzh[5]%],['Sa',%mvzh[6]%],['So',%mvzh[7]%]]);\n&amp;var options={title:'daily solar feed',isStacked:true};\n&amp;var chart=new \n&amp;google.visualization.ColumnChart(document.getElementById('container'));chart.draw(data,options);}\n&amp;google.charts.setOnLoadCallback(drawChart);&lt;/script&gt;\n#\n</code></pre>"},{"location":"Scripting-Language/#ili-9488-color-lcd-display-with-bmp280-and-vl5310x","title":"ILI 9488 Color LCD Display with BMP280 and VL5310X","text":"<p>Shows various BMP280 energy graphs Turn display on and off using VL5310X proximity sensor to prevent burn-in</p> <p>Some variables are set from ioBroker</p> <pre><code>&gt;D\ntemp=0\npress=0\nzwz=0\nwr1=0\nwr2=0\nwr3=0\notmp=0\npwl=0\ntmp=0\ndist=0\npunit=\"hPa\"\ntunit=\"C\"\nhour=0\n\n&gt;B\ndt [z]\n\n// define 2 graphs, 2. has 3 tracks\ndt [zCi1G2656:5:20:400:80:1440:-5000:5000:3Ci7f3x410y20]+5000 W[x410y95]-5000 W [Ci7f1x70y3] Zweirichtungsz~80hler - 24 Stunden\ndt  [Ci1G2657:5:120:400:80:1440:0:5000:3Ci7f3x410y120]+5000 W[x410y195]0 W [Ci7f1x70y103] Wechselrichter 1-3 - 24 Stunden\ndt [Ci1G2658:5:120:400:80:1440:0:5000:16][Ci1G2659:5:120:400:80:1440:0:5000:5]\ndt [f1s1b0:260:260:100&amp;#8203;:50:2:11:4:2:Rel 1:b1:370:260:100&amp;#8203;:50:2:11:4:2:Dsp off:]\n=&gt;mp3volume 100\n=&gt;mp3track 4\n\n&gt;T\n; get some telemetry values\ntemp=BMP280#Temperature\npress=BMP280#Pressure\ntunit=TempUnit\npunit=PressureUnit\ndist=VL53L0X#Distance\n\n; check proximity sensor to turn display on and off to prevent burn-in\nif dist&gt;300\nthen\nif pwr[2]&gt;0\nthen\n=&gt;power2 0\nendif\nelse\nif pwr[2]==0\nthen\n=&gt;power2 1\nendif\nendif\n\n&gt;S\n; update graph every teleperiod\nif upsecs%tper==0\nthen\ndp2\ndt [f1Ci3x40y260w30Ci1]\ndt [Ci7x120y220t]\ndt [Ci7x180y220T]\ndt [Ci7p8x120y240]%temp% %tunit%\ndt [Ci7x120y260]%press% %punit%\ndt [Ci7x120y280]%dist% mm\ndp0\ndt [g0:%zwz%g1:%wr1%g2:%-wr2%g3:%-wr3%]\nif zwz0\nthen\ndt [p-8x410y55Ci2Bi0]%zwz% W\nelse\ndt [p-8x410y55Ci3Bi0]%zwz% W\nendif\ndt [p-8x410y140Ci3Bi0]%wr1% W\ndt [p-8x410y155Ci16Bi0]%-wr2% W\ndt [p-8x410y170Ci5Bi0]%-wr3% W\nendif\n\n; chime every full hour\nhour=int(time/60)\nif chg[hour]&gt;0\nthen -&gt;mp3track 4\nendif\n\n&gt;E\n\n&gt;R\n</code></pre>"},{"location":"Scripting-Language/#led-bar-display-with-ws2812-led-chain","title":"LED Bar Display with WS2812 LED Chain","text":"<p>Used to display home's solar power input/output (+-5000 Watts)</p> <pre><code>&gt;D\nm:array=0 60 ;defines array for 60 led pixels\ncnt=0\nval=0\nind=0\n; rgb values for grid\ncolr1=0x050000\ncolr2=0x050100\ncolg1=0x000300\ncolg2=0x020300\nledbar=0\nblue=64\npixels=60\nsteps=10\ndiv=0\ntog=0\nmax=5000\nmin=-5000\npos=0\n\n&gt;B\ndiv=pixels/steps\n=#prep\nws2812(array)\n\n; ledbar is set from broker\n\n&gt;S\nif ledbar&lt;min\nthen ledbar=min\nendif\n\nif ledbar&gt;max\nthen ledbar=max\nendif\n\npos=(ledbar/max)*(pixels/2)\nif ledbar&gt;0\nthen\npos+=(pixels/2)\nif pospixels-1\nthen pos=pixels\nendif\nelse\npos+=(pixels/2)+1\nif pospixels-1\nthen pos=1\nendif\nendif\n\nif pos&lt;1\nor pos&gt;pixels\nthen pos=1\nendif\n\n=#prep\nif ledbar==0\nthen\narray[pos]=blue\narray[pos-1]=blue\nelse\narray[pos]=blue\nendif\n\n; only used if power is off\n; so lets may be used normally if on\nif pwr[1]==0\nthen\nws2812(array)\nendif\n\n; subroutine for grid\n#prep\nfor cnt 1 pixels 1\nind+=1\nif ind&gt;div\nthen ind=1\ntog^=1\nendif\n\nif cnt&lt;=pixels/2\nthen\nif tog&gt;0\nthen val=colr1\nelse val=colr2\nendif\nelse\nif tog&gt;0\nthen val=colg1\nelse val=colg2\nendif\nendif\narray[cnt]=val\nnext\n\n&gt;R\n</code></pre>"},{"location":"Scripting-Language/#multiple-ir-receiver-synchronization","title":"Multiple IR Receiver Synchronization","text":"<p>Shows how a Magic Home with IR receiver works Synchronizes 2 Magic Home devices by also sending the commands to a second Magic Home via <code>WebSend</code></p>"},{"location":"Scripting-Language/#script-example-using-if-then-else","title":"Script example using <code>if then else</code>","text":"<pre><code>; expand default string length to be able to hold `WebSend [xxx.xxx.xxx.xxx]`\n\n&gt;D 25\nistr=\"\"\nws=\"WebSend [_IP_]\"\n\n; event section\n&gt;E\n; get ir data\nistr=IrReceived#Data\n\n; on\nif istr==\"0x00F7C03F\"\nthen\n-&gt;wakeup\n-&gt;%ws% wakeup\nendif\n\n; off\nif istr==\"0x00F740BF\"\nthen\n-&gt;power1 0\n-&gt;%ws% power1 0\nendif\n\n;white\nif istr==\"0x00F7E01F\"\nthen\n-&gt;color 000000ff\n-&gt;%ws% color 000000ff\nendif\n\n;red\nif istr==\"0x00F720DF\"\nthen\n-&gt;color ff000000\n-&gt;%ws% color ff000000\nendif\n\n;green\nif istr==\"0x00F7A05F\"\nthen\n-&gt;color 00ff0000\n-&gt;%ws% color 00ff0000\nendif\n\n;blue\nif istr==\"0x00F7609F\"\nthen\n-&gt;color 0000ff00\n-&gt;%ws% color 0000ff00\nendif\n\n; dimmer up\nif istr==\"0x00F700FF\"\nthen\n-&gt;dimmer +\n-&gt;%ws% dimmer +\nendif\n\n;dimmer down  \nif istr==\"0x00F7807F\"  \nthen  \n-&gt;dimmer -  \n-&gt;%ws% dimmer -  \nendif\n\nistr=\"\"\n</code></pre>"},{"location":"Scripting-Language/#script-example-using-switch-case-ends","title":"Script example using <code>switch case ends</code>","text":"<pre><code>; expand default string length to be able to hold `WebSend [xxx.xxx.xxx.xxx]`\n\n&gt;D 25\nistr=\"\"\nws=\"WebSend [_IP_]\"\n\n; event section\n&gt;E\n; get ir data\nistr=IrReceived#Data\n\nswitch istr\n; on\ncase \"0x00F7C03F\"\n-&gt;wakeup\n-&gt;%ws% wakeup\n\n;off\ncase \"0x00F740BF\"\n-&gt;power1 0\n-&gt;%ws% power1 0\n\n;white\ncase \"0x00F7E01F\"\n-&gt;color 000000ff\n-&gt;%ws% color 000000ff\n\n;red\ncase \"0x00F720DF\"\n-&gt;color ff000000\n-&gt;%ws% color ff000000\n\n;green\ncase \"0x00F7A05F\"\n-&gt;color 00ff0000\n-&gt;%ws% color 00ff0000\n\n;blue\ncase \"0x00F7609F\"\n-&gt;color 0000ff00\n-&gt;%ws% color 0000ff00\n\n; dimmer up\ncase \"0x00F700FF\"\n-&gt;dimmer +\n-&gt;%ws% dimmer +\n\n; dimmer down\ncase \"0x00F7807F\"\n-&gt;dimmer -\n-&gt;%ws% dimmer -\nends\n\nistr=\"\"\n</code></pre>"},{"location":"Scripting-Language/#fast-polling","title":"Fast Polling","text":"<pre><code>; expand default string length to be able to hold `WebSend [xxx.xxx.xxx.xxx]`  \n&gt;D 25\nsw=0\nws=\"WebSend [_IP_]\"\ntimer=0\nhold=0\ntoggle=0\n\n&gt;B\n; gpio 5 button input\nspinm(5,0)\n\n; fast section 100ms\n&gt;F\nsw=pin[5]\n; 100 ms timer\ntimer+=1\n\n; 3 seconds long press\n; below 0,5 short press\nif sw==0\nand timer5\nand timer&lt;30\nthen\n; short press\n;print short press\ntoggle^=1\n=&gt;%ws% power1 %toggle%\nendif\n\nif sw&gt;0\nthen\n;pressed\nif timer&gt;30\nthen\n; hold\nhold=1\n;print hold=%timer%\nif toggle&gt;0\nthen\n=&gt;%ws% dimmer +\nelse\n=&gt;%ws% dimmer -\nendif\nendif\nelse\ntimer=0\nhold=0\nendif\n</code></pre>"},{"location":"Scripting-Language/#web-ui","title":"Web UI","text":"<p>An example to show how to implement a web UI. This example controls a light via <code>WebSend</code></p> <pre><code>&gt;D\ndimmer=0\nsw=0\ncolor=\"\"\ncol1=\"\"\nred=0\ngreen=0\nblue=0\nww=0\n\n&gt;F\ncolor=hn(red)+hn(green)+hn(blue)+hn(ww)\nif color!=col1\nthen\ncol1=color\n=&gt;websend [192.168.178.75] color %color%\nendif\n\nif chg[dimmer]&gt;0\nthen  \n=&gt;websend [192.168.178.75] dimmer %dimmer%\nendif\n\nif chg[sw]&gt;0\nthen\n=&gt;websend [192.168.178.75] power1 %sw%\nendif\n\n&gt;W\nbu(sw \"Light on\" \"Light off\")\nck(sw \"Light on/off \u00a0\u00a0\")\nsl(0 100 dimmer \"0\" \"Dimmer\" \"100\")\nsl(0 255 red \"0\" \"red\" \"255\")\nsl(0 255 green \"0\" \"green\" \"255\")\nsl(0 255 blue \"0\" \"blue\" \"255\")\nsl(0 255 ww \"0\" \"warm white\" \"255\")\ntx(color \"color: \u00a0\u00a0\")\n</code></pre>"},{"location":"Scripting-Language/#hue-emulation","title":"Hue Emulation","text":"<p>An example to show how to respond to Alexa requests via Hue Emulation</p> <p>When Alexa sends on/off, dimmer, and color (via hsb), send commands to a MagicHome device</p> <pre><code>&gt;D\npwr1=0\nhue1=0\nsat1=0\nbri1=0\ntmp=0\n\n&gt;E\nif upd[hue1]&gt;0\nor upd[sat1]&gt;0\nor upd[bri1]&gt;0\nthen\ntmp=hue1/182\n-&gt;websend [192.168.178.84] hsbcolor %tmp%,%sat1%,%bri1%\nendif\n\nif upd[pwr1]&gt;0\nthen\n-&gt;websend [192.168.178.84] power1 %pwr1%\nendif\n\n&gt;H\n; on,hue,sat,bri,ct\nlivingroom,E,on=pwr1,hue=hue1,sat=sat1,bri=bri1\n</code></pre>"},{"location":"Scripting-Language/#alexa-controlled-mcp230xx-i2c-gpio-expander","title":"Alexa Controlled MCP230xx I<sup>2</sup>C GPIO Expander","text":"<p>Uses Tasmota's Hue Emulation capabilities for Alexa interface</p> <pre><code>; define vars\n&gt;D\np:p1=0\np:p2=0\np:p3=0\np:p4=0\n\n; init ports\n&gt;B\n-&gt;sensor29 0,5,0\n-&gt;sensor29 1,5,0\n-&gt;sensor29 2,5,0\n-&gt;sensor29 3,5,0\n-&gt;sensor29 0,%0p1%\n-&gt;sensor29 1,%0p2%\n-&gt;sensor29 2,%0p3%\n-&gt;sensor29 3,%0p4%\n\n; define Alexa virtual devices\n&gt;H\nport1,S,on=p1\nport2,S,on=p2\nport3,S,on=p3\nport4,S,on=p4\n\n; handle events\n&gt;E\nprint EVENT\n\nif upd[p1]&gt;0\nthen\n-&gt;sensor29 0,%0p1%\nendif\nif upd[p2]&gt;0\nthen\n-&gt;sensor29 1,%0p2%\nendif\nif upd[p3]&gt;0\nthen\n-&gt;sensor29 2,%0p3%\nendif\nif upd[p4]&gt;0\nthen\n-&gt;sensor29 3,%0p4%\nendif\n\n=#pub\n\n; publish routine\n#pub\n=&gt;publish stat/%topic%/RESULT {\"MCP23XX\":{\"p1\":%0p1%,\"p2\":%0p2%,\"p3\":%0p3%,\"p4\":%0p4%}}\nsvars\n\n; web interface\n&gt;W\nbu(p1 \"p1 on\" \"p1 off\")bu(p2 \"p2 on\" \"p2 off\")bu(p3 \"p3 on\" \"p3 off\")bu(p4 \"p4 on\" \"p4 off\")\n</code></pre>"},{"location":"Scripting-Language/#retrieve-network-gateway-ip-address","title":"Retrieve network gateway IP Address","text":"<pre><code>&gt;D\ngw=\"\"\n\n; Request Status information. The response will trigger the `U` section\n&gt;B\n+&gt;status 5\n\n; Read the status JSON payload\n&gt;U\ngw=StatusNET#Gateway\nprint %gw%\n</code></pre>"},{"location":"Scripting-Language/#send-e-mail","title":"Send e-mail","text":"<pre><code>&gt;D 25\nday1=0\net=0\nto=\"&lt;mrx@gmail.com&gt;\"\n\n&gt;T\net=ENERGY#Total\n\n&gt;S\n; send at midnight\nday1=day\nif chg[day1]&gt;0\nthen\n=&gt;sendmail [*:*:*:*:*:%to%:energy report]*\nendif\n\n&gt;m\nemail report at %tstamp%\nyour power consumption today was %et% kWh\n#\n</code></pre>"},{"location":"Scripting-Language/#send-power-reading-with-formatted-time-stamp-via-websend","title":"Send power reading with formatted time stamp via websend","text":"<p>Some web APIs require certain formats (e.g. date &amp; time) to be provided. This example illustrates how to reformat the timestamp and embed it in the get payload. On ESP8266 based devices this is limited to unsecured http (no \"s\") connections! Don't use this for sensitive data!</p> <pre><code>&gt;D 42\n;long string required for key\ny=0\nm=0\nd=0\nkey=\"yourkey\"\nid=\"yourSystemID\"\nws=\"WebSend [pvoutput.org]\"\net=0\np=0\n\n&gt;T\net=ENERGY#Total\np=ENERGY#Power\n; every 5 minutes\nif upsecs%300==0\nthen\ny=sb(tstamp 0 4)\nm=sb(tstamp 5 2)\nd=sb(tstamp 8 2)\n=&gt;%ws%/service/r2/addstatus.jsp?key=%key%&amp;sid=%id%&amp;d=%1.0(y)%%2.0(m)%%2.0(d)%&amp;t=%1(sb(tstamp 11 5))%&amp;v2=%s(2.0p)%\nendif\n</code></pre>"},{"location":"Scripting-Language/#switching-and-dimming-by-recognizing-mains-power-frequency","title":"Switching and Dimming By Recognizing Mains Power Frequency","text":"<p>Switching in Tasmota is usually done by High/Low (+3.3V/GND) changes on a GPIO. However, for devices like the Moes QS-WiFi-D01 Dimmer, this is achieved by a pulse frequency when connected to the GPIO, and these pulses are captured by <code>Counter1</code> in Tasmota.</p> <p></p> <ul> <li>When the light is OFF and there is a short period of pulses - then turn the light ON at the previous dimmer level.</li> <li>When the light is ON and there is a short period of pulses - then turn the light OFF.</li> <li>When there is a longer period of pulses (i.e., HOLD) - toggle dimming direction and then adjust the brightness level as long as the button is pressed or until the limits are reached.</li> </ul> <p>Issue 6085</p> <p>In the Data Section D at the beginning of the Script the following initialization variables may be changed:</p> <p>dim multiplier = <code>0..2.55</code> set the dimming increment value dim lower limit = range for the dimmer value for push-button operation (set according to your bulb); min 0 dim upper limit = range for the dimmer value for push-button operation (set according to your bulb); max 100 start dim level = initial dimmer level after power-up or restart; max 100</p> <pre><code>&gt;D\nsw=0\ntmp=0\ncnt=0\ntmr=0\nhold=0\npowert=0\nslider=0\ndim=\"\"\nshortprl=2 ;short press lo limit\nshortpru=10;short press up limit\ndimdir=0   ;dim direction 0/1\ndimstp=2   ;dim step/speed 1 to 5\ndimmlp=2.2 ;dim multiplier\ndimll=15   ;dim lower limit\ndimul=95   ;dim upper limit\ndimval=70  ;start dim level\n\n&gt;B\nprint \"WiFi-Dimmer-Script-v0.2\"\n=&gt;Counter1 0\n=&gt;Baudrate 9600\n; boot sequence\n=#senddim(dimval)\ndelay(1000)\n=#senddim(0)\n\n&gt;F\ncnt=pc[1]\nif chg[cnt]&gt;0\n; sw pressed\nthen sw=1\nelse sw=0\n; sw not pressed\nendif\n\n; 100ms timer\ntmr+=1\n\n; short press\nif sw==0\nand tmr&gt;shortprl\nand tmr&lt;shortpru\nthen\npowert^=1\n\n; change light on/off\nif powert==1\nthen\n=#senddim(dimval)\nelse\n=#senddim(0)\nendif\nendif\n\n\n; long press\nif sw&gt;0\nthen\nif hold==0\nthen\n\n; change dim direction\ndimdir^=1\nendif\nif tmr&gt;shortpru\nthen\nhold=1\nif powert&gt;0\n; dim when on &amp; hold\nthen\nif dimdir&gt;0\nthen\n\n; increase dim level\ndimval+=dimstp\nif dimval&gt;dimul  \nthen\n\n; upper limit\ndimval=dimul\nendif\n=#senddim(dimval)\nelse\n\n; decrease dim level\ndimval-=dimstp\nif dimval&lt;dimll\nthen\n\n; lower limit\ndimval=dimll\nendif\n=#senddim(dimval)\nendif\nendif\nendif\nelse\ntmr=0\nhold=0\nendif\n\n&gt;E\nslider=Dimmer\n\n; slider change\nif chg[slider]&gt;0\nthen\n\n; dim according slider\nif slider&gt;0\nthen\ndimval=slider\n=#senddim(dimval)\nelse\npowert=0\n=#senddim(0)\nendif\nendif\n\nif pwr[1]==1\n; on/off webui\nthen\npowert=1\n=#senddim(dimval)\nelse\npowert=0\n=#senddim(0)\nendif\n\n; subroutine dim\n#senddim(tmp)\ndim=\"FF55\"+hn(tmp*dimmlp)+\"05DC0A\"\n=&gt;SerialSend5 %dim%\n=&gt;Dimmer %tmp%\n#\n</code></pre>"},{"location":"Scripting-Language/#dual-display-example","title":"Dual display example","text":"<pre><code>&gt;D\n&gt;B\n; load sh1106 driver\ndt [S2/SH1106_desc.txt:]\n; clear screen, switch to LCD font; set auto draw\ndt [zf4s1D1]\ndt [S1:]\n&gt;S\n; switch to display 2\ndt [S2:]\n; show time\ndt [x20y20t]\n; switch back to display 1\ndt [S1:]\n</code></pre>"},{"location":"Scripting-Language/#read-i2c-example-axp192","title":"read I2C example (AXP192)","text":"<pre><code>&gt;D\nvolt=0\ncurr=0\nfound=0\n&gt;B\n; check device on I2C bus Nr.2\nfound=ia2(0x34)\n\n&gt;S\n; if found read registers, (this example takes 2ms to read both values)\nif found&gt;0 {\nvolt=ir(0x5a)&lt;&lt;4|ir(0x5b)*1.7/1000\ncurr=ir(0x58)&lt;&lt;4|ir(0x59)*0.625\n}\n\n&gt;W\n; show on webui\nBus Voltage{m}%volt% V\nBus Current{m}%curr% mA\n</code></pre>"},{"location":"Scripting-Language/#multiplexing-a-single-adc-with-cd4067-breakout","title":"Multiplexing a single adc with CD4067 breakout","text":"<pre><code>&gt;D\n; this script works with a CD4067 breakout to multiplex a single ADC channel\n; of an ESP\nIP=192.168.178.177\nSB=8192\nres=0\ncnt=0\nmcnt=0\nm:mux=0 16\n\n&gt;B\n; define output pins for multiplexer\nspinm(12 O)\nspinm(13 O)\nspinm(14 O)\nspinm(15 O)\n; define string array with 16 entries\nres=is1(16 \"\")\nis1[1]=\"Azalea\"\nis1[2]=\"Aster\"\nis1[3]=\"Bougainvillea\"\nis1[4]=\"Camellia\"\nis1[5]=\"Carnation\"\nis1[6]=\"Chrysanthemum\"\nis1[7]=\"Clematis\"\nis1[8]=\"Daffodil\"\nis1[9]=\"Dahlia\"\nis1[10]=\"Daisy\"\nis1[11]=\"Edelweiss\"\nis1[12]=\"Fuchsia\"\nis1[13]=\"Gladiolus\"\nis1[14]=\"Iris\"\nis1[15]=\"Lily\"\nis1[16]=\"Periwinkle\"\n\n&gt;F\n; get adc value into array, average 4 values\n; this is for ESP32 here on pin 32\nmux[mcnt+1]=adc(2 32)\n; this is for ESP8266 it has only 1 ADC input\n; mux[mcnt+1]=adc(2)\nmcnt+=1\nif mcnt&gt;=16\nthen\nmcnt=0\nendif\n; set multiplexer\nspin(12 mcnt)\nspin(13 mcnt/2)\nspin(14 mcnt/4)\nspin(15 mcnt/8)\n\n; display web UI\n#wsub\nif wm==0\nthen\nfor cnt 1 16 1\nwcs  {s}Ch %0cnt%: %is1[cnt]%{m}%mux[cnt]% %%{e}\nnext\nendif\n\n#rsub\nrapp ,\"CD4067\":{\nfor cnt 1 16 1\nrapp \"%is1[cnt]%\":%mux[cnt]%\nif cnt&lt;16\nthen\nrapp ,\nendif\nnext\nrapp }\n\n&gt;J\n; send to mqtt\n; call json subroutine\n%=#rsub\n\n&gt;W\n; call web subroutine\n%=#wsub\n</code></pre>"},{"location":"Scripting-Language/#accessing-tesla-powerwall-2-api","title":"accessing TESLA Powerwall 2 API","text":"<pre><code>This example fetches various values from Tesla Powerwall API\nand displays them in the WEB UI and on an ILI9341 LCD display\n\nyou will need these additional defines:\n#define USE_TLS\n#define TESLA_POWERWALL\n#define USE_SENDMAIL (because the SSL Library from email is needed)\n#define SCRIPT_GET_HTTPS_JP\n\nremark: since the Tasmota JSON parser has various limitations some TESLA JSON values had to be renamed to get a more compact response.\n\n&gt;D\ntmp=0\nres=0\ncnt=0\n\n;powerwall\npwl=8\n;Net\nsip=0\n;Solar\nsop=0\n;Battery\nbip=0\n;House\nhip=0\n;total cap\ntcap=0\n;remainig cap\nrcap=0\n;reserve percent\nrper=0\n\n;3 phases\nphs1=0\nphs2=0\nphs3=0\n\np1w=0\np2w=0\np3w=0\np4w=0\np5w=0\np6w=0\np7w=0\np8w=0\n\npwf=0\n\nxp=0\nyp=0\n\nhs1=\"{m}&lt;span style='color:\"\nhs5=\"&lt;/span&gt;\"\nps=\"\"\nstr=\"\"\ntm=\"\"\nperr=\"\"\n\n&gt;B\n;month\ntmp=is1(0 \"Jan|Feb|Mar|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dec|\")\n;weekdays\ntmp=is(0 \"So|Mo|Th|Wd|Th|Fr|Sa|\")\n;display labels\ntmp=is2(0 \"Battery %:|Grid:|Solar:|Battery:|Home:|Tot Cap:|Rem Cap:|Rcap Lim:|Solar 1:|Solar 2:|Phase 1:|Phase 2:|Phase 3:|\")\n\n;clr display\ndt [Bi0D0z]\n\n=#labels\n\n;draw all labels on display\n#labels\ndt [Ci5x0y20h70x170h70]\ndt [Ci16f1s1y18x90]Powerwall\ndt [f1s1Ci16]\nyp=60\nfor res 1 13 1\n    dt [x15y%0yp%]%is2[res]%\n    yp+=20\nnext\n\n&gt;BS\n;set powerwall ip and credentials (prefix @D), insert your credentials here\nres=gpwl(\"@D192.168.188.60,email,password\")\n;set powerwall serial numbers of CTS devices 1 and 2 (prefix @C)\nres=gpwl(\"@C0x000004714B006CCD,0x000004714B007969\")\n\n\n&gt;S\n;display time and date\ndt [Ci3x50y40T]\ndt [x150y40tS]\n\n;show powerwall values on display every 5 seconds\nif upsecs%5==0 {\n    dt [Ci5]\n    yp=60\n    dt [x150y%0yp%p-10]%2pwl% %%\n    yp+=20\n    dt [x150y%0yp%p-10]%1sip% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1sop% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1bip% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1hip% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1tcap% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1rcap% W\n    yp+=20\n    dt [x150y%0yp%p-10]%rper% %%\n    yp+=20\n    dt [x150y%0yp%p-10]%1p1w% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1p2w% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1p5w% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1p6w% W\n    yp+=20\n    dt [x150y%0yp%p-10]%1p7w% W\n    yp+=20  \n}\n\n;access powerwall api every 4 seconds\nif year&gt;2023 {\n    switch cnt\n        case 0\n            gpwl(\"/api/meters/aggregates\")\n        case 4\n            gpwl(\"/api/system_status/soe\")\n        case 8\n            gpwl(\"/api/system_status\")\n        case 12\n            gpwl(\"/api/operation\")\n        case 14\n            pwf=1\n            gpwl(\"/api/meters/readings\")\n        case 18\n            cnt=-1\n    ends\n    cnt+=1\n}\n\n;JSON fetch section\n&gt;jp\n;fetch powerwall JSON output\nsip=site#i_power\nbip=battery#i_power\nhip=load#i_power\nsop=solar#i_power\npwl=percentage\ntcap=f_p_e\nrcap=n_e_r\nrper=b_r_p\n\n;readings cannot be decoded by tasmota JSON\n;so use string search (\"gwr\")\nif pwf&gt;0 {\n    str=\"\"\n    str=PW_CTS1#error\n    perr=str\n    if str==\"\" {\n        p1w=gwr( \"\\\"p_W\\\":\" 2)\n        p2w=gwr( \"\\\"p_W\\\":\" 3)\n        p3w=gwr( \"\\\"p_W\\\":\" 4)\n        p4w=gwr( \"\\\"p_W\\\":\" 5)\n    }\n    str=\"\"\n    str=PW_CTS2#error\n    perr=str\n    if str==\"\" {\n        p5w=gwr( \"\\\"p_W\\\":\" 6)\n        p6w=gwr( \"\\\"p_W\\\":\" 7)\n        p7w=gwr( \"\\\"p_W\\\":\" 8)\n        p8w=gwr( \"\\\"p_W\\\":\" 9)\n        phs1=p5w\n        phs2=p6w\n        phs3=p7w\n    }\n\n    pwf=0\n    str=\"\"\n}\n\n#wtime\n;only in webmode 0\nif wm==0 {\n    ;show time, weekday and date\n    wcs {s}&lt;center&gt;&lt;h1 style=\"color:green;font-size:40px;\"&gt;%2.0hours%:%2.0mins%:%2.0secs%&lt;/h1&gt;{m}%is[wday]% %0day%. %is1[month]% &lt;br&gt;%0year%{e}\n    dp(2 0)\n    ps=s(int(sunrise/60))+\":\"+s(sunrise%60)\n    str=s(int(sunset/60))+\":\"+s(sunset%60)\n    res=sunset-sunrise\n    tm=s(int(res/60))+\":\"+s(res%60)\n    wcs {s}&lt;center&gt;&amp;#127774 %ps% &lt;--- %tm% ---&gt; %str% &amp;#127769{e}\n    dp(0 2)\n}\n\n&gt;W\n%=#wtime\n&lt;hr&gt;\nBattery Percent%hs1%yellow;'&gt;%pwl% %% (%2(pwl/100*(tcap/1000))% kWh)%hs5%\nGrid%hs1%yellow;'&gt;%sip% W %hs5%\nSolar%hs1%green;'&gt;%sop% W %hs5%\nBattery%hs1%yellow;'&gt;%bip% W %hs5%\nHouse%hs1%red;'&gt;%hip% W %hs5%\nTotal Capacity%hs1%yellow;'&gt;%3(tcap/1000)% kWh %hs5%\nRemaining Capacity%hs1%yellow;'&gt;%3(rcap/1000)% kWh %hs5%\nRcapLimit%hs1%yellow;'&gt;%rper% %% %hs5%\n&lt;hr&gt;\nSolar P1%hs1%yellow;'&gt;%1p1w% W %hs5%\nSolar P2%hs1%yellow;'&gt;%1p3w% W %hs5%\n&lt;hr&gt;\nNet P1%hs1%yellow;'&gt;%1p5w% W %hs5%\nNet P2%hs1%yellow;'&gt;%1p6w% W %hs5%\nNet P3%hs1%yellow;'&gt;%1p7w% W %hs5%\n&lt;hr&gt;\nCTS Error%hs1%yellow;'&gt;%perr%%hs5%\n&lt;hr&gt;\nheap:{m}%heap%\n&gt;R\nprint exit script\n</code></pre>"},{"location":"Scripting-Language/#image-gallery-of-various-tasmota-scripts","title":"Image gallery of various Tasmota scripts","text":"<pre><code>these are some examples of more complex scripts to show what is possible.\ncomplex scripts should be edited with the external source editor as they contain lots of comments and indents.\ni will provide the sources later.\n</code></pre>"},{"location":"Scripting-Language/#internet-radio","title":"Internet radio","text":""},{"location":"Scripting-Language/#webcam-with-multiple-options","title":"Webcam with multiple options","text":""},{"location":"Scripting-Language/#energy-collector","title":"Energy collector","text":""},{"location":"Scripting-Language/#energy-display-main-menu","title":"Energy display main menu","text":""},{"location":"Scripting-Language/#energy-display-one-day-of-database","title":"Energy display one day of database","text":""},{"location":"Scripting-Language/#energy-display-last-week-of-database","title":"Energy display last week of database","text":""},{"location":"Scripting-Language/#energy-display-last-weeks-of-database","title":"Energy display last weeks of database","text":""},{"location":"Scripting-Language/#environment-sensor","title":"environment sensor","text":""},{"location":"Scripting-Language/#timer-main-menu","title":"timer main menu","text":""},{"location":"Scripting-Language/#timer-setup","title":"timer setup","text":""},{"location":"Securing-your-IoT-from-hacking/","title":"Securing your IoT from hacking","text":""},{"location":"Securing-your-IoT-from-hacking/#general-weaknesses","title":"General Weaknesses","text":"<p>Whenever you add devices to your network, you generate additional points of potential intrusion. This is not only valid for your mobile phones and computers, but also for your Smart TV, your Alexa, or all of your SONOFF devices (ESP8266).</p> <p>There are following potential risks you have to mitigate:</p> <ul> <li>Someone is able to communicate with your device (Scenario 1)</li> <li>Someone hacks your device and is able to log in into your WLAN. (why is this a problem? Scenario 2)</li> <li>Someone hacks your device and is able to read and change any value on your MQTT server (why is this a problem? Scenario 3)</li> <li>Someone hacks your network and can interact with your devices (why is this a problem? Scenario 4)</li> <li>Someone hacks your device and use it for different things like mail bot or DOS (Denial of Service) device or WLAN jammer (why is this a problem? Scenario 5)</li> </ul>"},{"location":"Securing-your-IoT-from-hacking/#scenario-1","title":"Scenario 1","text":"<p>It is possible to set a password to the webadmin interface, however ESP8266 devices SHALL not be exposed to internet or accessible to other network clients. (e.g. users in the same network) [1] [2]. </p>"},{"location":"Securing-your-IoT-from-hacking/#scenario-2","title":"Scenario 2","text":"<p>If someone is able to get your WLAN key, they can login into your network.  If they are nearby, they can scan for any traffic and for any devices. Many communications are not encrypted on your WLAN by default. Therefore being part of your WLAN gives the attacker a greater opportunity to screw-up the rest of your infrastructure. Also being part of your WLAN does mean, that the attacker can use your IP-Address and your traffic to do nasty things.</p>"},{"location":"Securing-your-IoT-from-hacking/#scenario-3","title":"Scenario 3","text":"<p>If you can hack an ESP82xx device, you might get access to the keys stored in the device. For example, the MQTT password allows you to monitor and control ALL of your devices at any time. If you are using a publicly accessible MQTT Server and an attacker has captured your MQTT Server infomation (e.g. hostname, user, and password), an attacker can monitor and control your home from anywhere on the Internet.</p> <p>Update: Beginning with version 6.0.0, passwords are not directly exposed through the serial connection or web interface in configuration mode. Therefore it is now less simple, however still possible to obtain the MQTT or WLAN password from a device. Such can be accomplished by downloading a configuration backup via the web UI of the device and decoding it using the <code>decode-config.py</code> script found in the Tasmota <code>tools</code> folder.</p>"},{"location":"Securing-your-IoT-from-hacking/#scenario-4","title":"Scenario 4","text":"<p>It might happen, that e.g. your Samsung SmartTV is not as secure as it should be and an attacker gets access to your network. Now he can listen to any traffic and maybe can make changes on all of your IoT devices.</p>"},{"location":"Securing-your-IoT-from-hacking/#scenario-5","title":"Scenario 5","text":"<p>If someone uses your device to spam mail or do a DOS attack the impact at your home is minimal. You might have more outbound traffic, but maybe you don't recognize this either. But thousands of hacked IoT devices can generate tremendous trouble even at the largest internet providers.</p> <p>I hope these five typical scenarios ( the list is not complete) give you some idea, why you should take care, even if you're not a terrorist and normally nobody is interested into hacking you personally.</p>"},{"location":"Securing-your-IoT-from-hacking/#securing-your-wlan","title":"Securing your WLAN","text":"<p>That you should have a WLAN key and use WPA2 for encryption is a \"no brainer\". This is a minimum requirement. Now think about someone can extract the password from the device. E.g. because the device is in the garden and someone with a Laptop and some USB stuff can connect and extract information.  </p> <p>The hacker will get the key. The ONLY possible preventive action to mitigate worst case scenario is to have a second WLAN, like the \"FritzBox Guest WLAN\". Many other routers offer similar things. This guest WLAN has no access to your private WLAN. Additionally, there are some interesting switched you can configure for the WLAN.  </p> <p>At the FritzRouter you can configure \"network separation\". At Fritz this is done by DISABLE \"The wireless devices connected with the guest access can communicate with each other\". This does mean, that a device in the network can not interact with any other device in the WLAN. It can only communicate with the Internet. This simple configuration prevents any attacker to do nasty stuff on YOUR network. Now we have to take care, that the attacker is not creating a Bot-Net and sending e.g., Spam-Mails.  </p> <p>Normally a device in the \"guest WLAN\" can use any internet service. For our IoT devices and for any new device we can create a Router rule, that ONLY MQTT is allowed to our server and any other traffic is blocked. This is a great configuration because it limits the options what a hacker can do. If you have a FritzBox following configuration has to be created to get this working:</p> <ol> <li> <p>Create Profile to block all communication except MQTT and NTP Time services.    Internet -&gt; Filters -&gt; List -&gt; \"Add Network Application\"    \"New Protocol\" (Add four rules, This will block all but UDP123 for Timeserver and 8883 for MQTT Server)</p> </li> <li> <p>TCP from any to Port 1 to 8882</p> </li> <li>TCP from any to Port 8884 to 65636</li> <li>UDP from any to Port 1 to 122</li> <li> <p>UDP from any to Port 124 to 65636</p> </li> <li> <p>Create a list of \"websites\" your IoT devices are allowed to access.    Internet -&gt; Filters -&gt; List -&gt; \"Permitted web sites\" -&gt; EDIT    <pre><code>yourserver\n01.de.pool.ntp.org\n</code></pre>    Replace  with the full qualified name of your router in the Internet.    NTP server - Use the one you have defined in Tasmota to be the timeserver.   <li> <p>Create a profile you can attach to your IoT devices.    Internet -&gt; Filters -&gt; Access profiles -&gt; \"new Access profile\"    \"Filter Web sites\"    DISABLE \"Allow HTTPS queries\"    SELECT \"Permit web sites (whitelist)  </p> </li> <p>Now you will probably ask two questions:   </p> <ol> <li>How can I communicate with my MQTT Server in my personal WLAN if only traffic into the internet is allowed?  </li> <li>How can I access the WebConsole of my devices to upload new Firmware and/or make investigations?  </li> </ol> <p>The first topic will be solved by exposing your MQTT server to the Internet (no worries, can be done securely).  </p> <p>The second topic has only a workaround. If you want access to your devices you need to change the configuration temporary on your router and ENABLE \"The wireless devices connected with the guest access can communicate with each other\". Secondly, you must login with your Laptop into the GuestWLAN to be able to communicate. If the Webserver is running you should be able to connect and upload e.g. a new firmware.</p>"},{"location":"Securing-your-IoT-from-hacking/#securing-your-communication","title":"Securing your Communication","text":"<p>In the world of IoT devices and more and more devices in a network, it is essential to use encryption ALL the time. The Tasmota project is able to enable encryption for MQTT. This is great. But it cannot enable encryption on the WebServer. This is bad. As a conclusion, the Webserver must be switched OFF all the time and only be switched ON for administrative purpose. This also disables the feature to change the Relay Status with an HTTP REST call. But this option is insecure anyway and should be avoided.</p> <p>Now let's work on the MQTT configuration. Also here an attacker can get access to user and password. To minimize the impact EVERY and really EVERY device must have a unique USER and a unique password. If you don't follow this rule the attacker get one device he can control ALL devices. With the USER/PASSWORD he now can control the one device he already holds in his hands. ok, no big deal. How to configure Mosquitto?</p> <p>In general, Tasmota stores data in stat//+ and  tele//+. or cmnd//+ to control something. If we use the  as username we can make some quite nice and straight forward configuration. <p>Example: Topic: ESP_123456 User: ESP_123456 (must be the same to Topic) password: 987654321  </p> <p>Configuration file: /etc/mosquitto/conf.d/jp.acl <pre><code>user root\ntopic read #\ntopic write #\n\npattern read cmnd/%u/#\npattern write stat/%u/#\npattern write tele/%u/#\n</code></pre></p> <p>My user root is allowed to do everything. This is used in my home-automation to control all devices and listen to all devices. The \"pattern\" is used for ALL other users and the %u is a substitute. The great thing is that the device can read its configuration but cannot write to it. And the status information it posts to the /status/ but is not able to read it afterward. With this minimal configuration, Tasmota devices are running.</p> <p>To add the different user to Mosquitto the following two commands work fine. There is also a re-read available, but a restart works better for me.</p> <pre><code>sudo mosquitto_passwd -b /etc/mosquitto/conf.d/jp.pw ESP_123456 987654321\nsudo /etc/init.d/mosquitto restart\n</code></pre> <p>If this is running, we switch the Mosquitto to secure communication on Port 8883 and disable all insecure options. </p> <p>/etc/mosquitto/conf.d/user.conf <pre><code>#User Config\npassword_file /etc/mosquitto/conf.d/jp.pw\nacl_file /etc/mosquitto/conf.d/jp.acl\n\nallow_anonymous false\n\nlistener 8883\n\ncafile   /etc/mosquitto/certs/ca.crt\ncertfile /etc/mosquitto/certs/server.crt\nkeyfile  /etc/mosquitto/certs/server.key\nrequire_certificate false\n</code></pre></p> <p>How to generate the certificates in mosquitto please look at:</p> <ul> <li>Mosquitto SSL Configuration - MQTT TLS Security</li> <li>Adding TLS to connect to Mosquitto</li> <li>Internet of Things messaging MQTT with TLS</li> <li>Enable Secure Communication with TLS and the Mosquitto Broker</li> </ul>"},{"location":"Securing-your-IoT-from-hacking/#ssltls-on-tasmota","title":"SSL/TLS on Tasmota","text":"<p>TLS article explains how to set it up in Tasmota</p> <p>Self-signed-Mosquitto article explain how to set up Tasmota with certificate-based TLS authentication on a local installation of Mosquitto.</p>"},{"location":"Securing-your-IoT-from-hacking/#disable-unsecured-fallback-wifi-wifimanager","title":"Disable unsecured fallback WiFi (WifiManager)","text":"<p>Type WifiConfig into the tasmota console. If this parameter is set to 2, you might want to change it after completing the setup of your device since in case your Wifi SSID is not available (i.e. access point dies or WLAN jammer is used as in Scanario 5), the WiFiManager will jump into action and make your tasmota devices available using an unsecured access point.</p> <p>Some less risky options would be: 0/4/5. Currently the default WiFiConfig value is (WIFI_RETRY) which means that device retries other AP without rebooting.  (For details, see Wi-Fi commands).</p>"},{"location":"Securing-your-IoT-from-hacking/#home-assistant-os-mqtt-add-on","title":"Home Assistant OS MQTT Add-On","text":"<p>If you are using Home Assistant OS MQTT add-on with Tasmota integration the devices will need write access to the <code>tasmota/discovery/#</code> topic.</p> <p>Add the following to the ACL file (user section or general section): <code>topic write tasmota/discovery/#</code>.</p> <p>For completeness' sake, below is a snippet of the ACL file with the full recommended structure.</p> <pre><code>########\n######## General section\n# Commented out all general rules.\n# topic readwrite homeassistant/#\n# topic write tasmota/discovery/#\n########\n\n########\n######## User section\n\nuser sonoff-living-fan-2\n# This is used when SetOption19 1 is used.\ntopic readwrite homeassistant/#\n# This is used when SetOption19 0 is used.\ntopic write tasmota/discovery/#\n\n########\n\n########\n######## Pattern Section\n# https://tasmota.github.io/docs/Securing-your-IoT-from-hacking/\npattern read cmnd/%u/#\npattern write stat/%u/#\npattern write tele/%u/#\n########\n</code></pre>"},{"location":"Self-signed-Mosquitto/","title":"Self signed Mosquitto","text":"<p>This feature is not included in precompiled binaries</p> <p>To use it you must compile your build.</p> <p>The following guide will walk you through the setup of Tasmota with your own instance of Mosquitto Server with Certificate-based TLS encryption and a Self-signed CA (Certificate Authority).</p>"},{"location":"Self-signed-Mosquitto/#benefits","title":"Benefits","text":"<p>The following setup provides stronger security in communication between your devices and your MQTT server.</p>"},{"location":"Self-signed-Mosquitto/#-no-cloud-usage","title":"- No cloud usage","text":"<p>Many people might prefer cloud-based solutions, such as AWS IOT. Nonetheless, running local MQTT provides various benefits like no internet requirements, no data sharing with third parties and lower latencies.</p>"},{"location":"Self-signed-Mosquitto/#-maximum-security","title":"- Maximum security","text":"<p>This setup is designed with 'security first' in mind.</p> <p>Communication is done over TLS 1.2 tunnels, using client certificates to authenticate each device.</p> <p>Strong encryption is particularly valuable considering that ESP8266-based Tasmota devices can only connect using WPA2 with  preshared keys. Because WPA2 Personal has known security weaknesses, the MQTT strong TLS configuration is encouraged in this scenario.</p>"},{"location":"Self-signed-Mosquitto/#caveats","title":"Caveats","text":"<p>Certificate-based MQTT-TLS requires each Tasmota device to have its own distinct Private Key and Certificate (~800 bytes). Although you could imagine to use the same Private Key in all your devices, this is considered as a very bad practice. You are warned!</p> <p>During TLS handshake, a secondary stack of 5.3k is allocated on the heap to allow BearSSL to have enough stack room. Memory is freed at the end of the handshake. Allocating such big chunks of memory can cause issues when heap fragmentation gets too high. If you see memory going below 15KB, you may experience crashes.</p>"},{"location":"Self-signed-Mosquitto/#how-to-configure","title":"How to configure?","text":"<p>Ideally we will work on three systems: 1. CA machine: a secure, possibly air-gap system, where you generate your certificates; 2. Server Machine: the machine running your MQTT server. We will assume it is running some Debian-based distribution (i.e. Ubuntu Server), though the steps could be adapted to different OSes; 3. Compiling Machine: the machine used to compile your customized Tasmota firmware. This machine might be the same Server Machine, though I would not recommend it.</p> <p>!!! failure \"Security notice\" Private keys, and in particular the CA private key should reside on a secure, possibly air-gapped system. Securing your CA and procedures for managing private keys exceeds the scope of this guide, but we assume you follow best security practices.</p> <p>There are several figures below containing command sequences that need to be executed in a POSIX shell. The intention is that text in the figure windows will be selected and copied, then pasted into a terminal window. These commands will not work if pasted into a Windows command prompt.</p>"},{"location":"Self-signed-Mosquitto/#linux-and-windows","title":"Linux and Windows","text":"<p>The description below is written mainly from the perspective of someone using a Linux OS. Information is also provided for those working on a Windows OS, but a Linux command shell (e.g. <code>sh</code> or <code>bash</code>) is assumed for much of the work. Cygwin is a good choice for this purpose. It's not impossible to do perform these tasks in native Windows without a POSIX shell, although that is beyond the scope of this document.</p> <p>A Cygwin installation should include the git package (Devel category) and openssl package (Net category). Additional packages will be required as discussed later if BearSSL is to be installed.</p>"},{"location":"Self-signed-Mosquitto/#1-prepare-your-ca-on-server-machine","title":"1. Prepare your CA (on Server Machine)","text":"<p>We will use Easy-RSA for easy management of the CA and certificates. Some modification are required to match our configuration.</p>"},{"location":"Self-signed-Mosquitto/#11-prepare-easy-rsa","title":"1.1. Prepare Easy-RSA :","text":"<p>Get a copy of Easy-RSA and add a reduced x509 extension definition for Tasmota. Certificates obtained using standard client definitions are too big and results in failure when storing them on Tasmota devices. <pre><code>git clone https://github.com/OpenVPN/easy-rsa.git\ncd easy-rsa/easyrsa3\n\n# Define reduced x509 extension for Tasmota\ncat &lt;&lt;EOF &gt; x509-types/tasmota\n# X509 extensions for a Tasmota client\nbasicConstraints = critical,CA:FALSE\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always\nkeyUsage = critical,digitalSignature\nEOF\n</code></pre> Windows users may have trouble running EasyRSA natively. If that happens, it's also possible to install Cygwin, and work from a Cygwin terminal window.  One note of caution: The <code>easyrsa</code> shell script may wind up with the wrong line endings if git is not configured to checkout line endings \"as is\". When this happens, the shell script will not run in Cygwin, and this problem may be fixed by using the <code>tr</code> program to delete carriage returns in the script file: <pre><code>mv easyrsa tmprsa\ntr -d '\\r' &lt;tmprsa &gt;easyrsa\n</code></pre></p>"},{"location":"Self-signed-Mosquitto/#12-define-your-certificate-information","title":"1.2. Define your certificate information","text":"<p>The commands below may be copied and pasted into a terminal window, then the resulting file, <code>vars</code> edited as appropriate.</p> <pre><code># Define your info\ncat &lt;&lt;EOF &gt; vars\n# Define X509 DN mode.\n# This is used to adjust what elements are included in the Subject field as the DN\n# (this is the \"Distinguished Name.\")\n# Note that in cn_only mode the Organizational fields further below aren't used.\n#\n# Choices are:\n#   cn_only  - use just a CN value\n#   org      - use the \"traditional\" Country/Province/City/Org/OU/email/CN format\n\nset_var EASYRSA_DN \"org\"\n\n# Organizational fields (used with 'org' mode and ignored in 'cn_only' mode.)\n# These are the default values for fields which will be placed in the\n# certificate. Don't leave any of these fields blank, although interactively\n# you may omit any specific field by typing the \".\" symbol (not valid for\n# email.)\n\nset_var EASYRSA_REQ_COUNTRY \"UK\"\nset_var EASYRSA_REQ_PROVINCE \"London\"\nset_var EASYRSA_REQ_CITY \"London\"\nset_var EASYRSA_REQ_ORG \"myorg\"\nset_var EASYRSA_REQ_EMAIL \"info@myorg.com\"\nset_var EASYRSA_REQ_OU \"MQTT\"\n\n# Choose a size in bits for your keypairs. The recommended value is 2048. Using\n# 2048-bit keys is considered more than sufficient for many years into the\n# future. Larger keysizes will slow down TLS negotiation and make key/DH param\n# generation take much longer. Values up to 4096 should be accepted by most\n# software. Only used when the crypto alg is rsa (see below.)\n\nset_var EASYRSA_KEY_SIZE 2048\n\n# The default crypto mode is rsa; ec can enable elliptic curve support.\n# Note that not all software supports ECC, so use care when enabling it.\n# Choices for crypto alg are: (each in lower-case)\n#  * rsa\n#  * ec\n#  * ed\n\nset_var EASYRSA_ALGO rsa\n\n# Define the named curve, used in ec &amp; ed modes:\n\nset_var EASYRSA_CURVE prime256v1\n# In how many days should the root CA key expire?\n\nset_var EASYRSA_CA_EXPIRE 3650\n\n# In how many days should certificates expire?\n\nset_var EASYRSA_CERT_EXPIRE 1800\n# Cryptographic digest to use.\n# Do not change this default unless you understand the security implications.\n# Valid choices include: md5, sha1, sha256, sha224, sha384, sha512\n\n#set_var EASYRSA_DIGEST \"sha256\"\nEOF\n</code></pre> <p>This creates a configuration file named <code>vars</code> -- the default file which the <code>easyrsa</code> shell script looks for.</p> <p>If the configuration is to be changed there are two options. First, <code>vars</code> can simply be edited to reflect the new configuration.  However, if multiple configurations are often used, it may be easier to use a different file for each configuration, and the configuration specified on the command line. For example, to use a configuration file named <code>vars3</code>, the command would look like this (the config file spec must come before other arguments):</p> <pre><code>./easyrsa --vars=./vars3 &lt;remaining arguments&gt;\n</code></pre> <p>Note that the file is specified as <code>./&lt;filename&gt;</code>, not <code>&lt;filename&gt;</code>. This required because the specified file will be sourced in the EasyRSA shell script, and it's assumed that the current directory is not part of the search path (that would be a security concern).</p>"},{"location":"Self-signed-Mosquitto/#13-initialize-and-generate-the-ca-and-the-server-certificates","title":"1.3. Initialize and generate the CA and the server certificates:","text":"<p>When generating the server (aka broker) certificate, it is crucial that the Common Name (CN) be set correctly. Failing to do this will result in Tasmota devices refusing to make TLS connections to the server.</p> <p>Each Tasmota device needs to be configured with the host name of the server. This is done via the <code>MQTT_HOST</code> macro in <code>user_config_override.h</code>, and/or in the device's MQTT Configuration web page. The host name string must meet two requirements: - The Tasmota device must be able to resolve the name, which might require access to a DNS server. - This string must match the Common Name (CN) in the broker's certificate -- exactly.</p> <p>Consider a situation where the device is running on an isolated WiFi network with no access to a DNS server. In this case, it may be necessary to specify the MQTT Host as a numeric IP address (e.g. <code>192.168.2.3</code>). For this example, the CN in the host's certificate must be the string <code>192.168.2.3</code>.</p> <p>To generate the root CA and server certificates, issue these commands. This example assumes the server's hostname and server certificate CN is <code>mqtt.myorg.com</code>.</p> <pre><code># Reset PKI\n./easyrsa init-pki\n# Build CA following instructions\n./easyrsa build-ca\n# Request server certificate following instructions\n./easyrsa gen-req mqtt.myorg.com\n# Sign certificate for server\n./easyrsa sign-req server mqtt.myorg.com\n</code></pre>"},{"location":"Self-signed-Mosquitto/#14-change-key-types-ec-is-required-for-tasmota-devices","title":"1.4. Change key types (EC is required for tasmota devices)","text":"<p>This example shows editing of the <code>vars</code> file, although a second configuration file could be created for EC keys as explained previously.</p> <pre><code>sed -i '/^set_var\\ EASYRSA_ALGO/ s/rsa/ec/' vars\n</code></pre>"},{"location":"Self-signed-Mosquitto/#15-copy-the-following-files-to-the-server-machine","title":"1.5. Copy the following files to the Server Machine","text":"<pre><code>./pki/ca.crt --&gt; CA certificate file\n./pki/issued/mqtt.myorg.com.crt --&gt; Server certificate file\n./pki/private/mqtt.myorg.com.key --&gt; Server private Key file\n</code></pre>"},{"location":"Self-signed-Mosquitto/#16-optional-step-for-full-certificate-validation","title":"1.6. (Optional step for full certificate validation)","text":"<ul> <li>Copy <code>./pki/ca.crt</code>to your Compiling Machine</li> <li>Install and build BearSSL (see below for help with building BearSSL on Windows machines). <pre><code>git clone https://www.bearssl.org/git/BearSSL\ncd BearSSL\nmake tools\n</code></pre></li> <li>Convert the root certificate into a format suitable for inclusion in the Tasmota build. This will be easier if the <code>brssl</code> (<code>brssl.exe</code> in Cygwin) executable is copied into the the <code>easyrsa3</code> directory first. Then, these two commands may be executed from the <code>easyrsa3</code> directory verbatim to generate the required header files.</li> </ul> <pre><code>./brssl ta pki/ca.crt | sed -e 's/TA0/PROGMEM TA0/' -e '/br_x509/,+999 d' &gt; local_ca_data.h\n./brssl ta pki/ca.crt | sed -e '1,/br_x509/ d' -e '/};/,+999 d' &gt;local_ca_descriptor.h\n</code></pre>"},{"location":"Self-signed-Mosquitto/#2-configure-your-tasmotabuild-on-compiling-machine","title":"2. Configure your Tasmotabuild (on Compiling Machine)","text":"<p>Refer to your preferred way to custom compile Tasmota. Modify the default configuration following one of 2.1 or 2.2 solutions (Easier or Advanced):</p>"},{"location":"Self-signed-Mosquitto/#21-easier-using-fingerprint-validation","title":"2.1. Easier: Using fingerprint validation","text":"<p>Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n//  #define USE_MQTT_TLS_CA_CERT               // Force full CA validation instead of fingerprints, slower, but simpler to use. (+2.2k code, +1.9k mem during connection handshake)\n#define USE_MQTT_AWS_IOT                       // This includes the LetsEncrypt CA in tasmota_ca.ino for verifying server certificates\n#define MQTT_FINGERPRINT1      \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\"  // [MqttFingerprint1] (auto-learn)\n#define MQTT_FINGERPRINT2      \"DA 39 A3 EE 5E 6B 4B 0D 32 55 BF EF 95 60 18 90 AF D8 07 09\"  // [MqttFingerprint2] (invalid)\n#endif\n</code></pre>"},{"location":"Self-signed-Mosquitto/#22-advanced-using-full-certificate-validation","title":"2.2. Advanced: Using Full certificate validation","text":"<p>Add the following to <code>user_config_override.h</code>:</p> <p><pre><code>#ifndef USE_MQTT_TLS\n#define USE_MQTT_TLS\n#define USE_MQTT_TLS_CA_CERT                   // Force full CA validation instead of fingerprints, slower, but simpler to use. (+2.2k code, +1.9k mem during connection handshake)\n#define USE_MQTT_AWS_IOT                       // This will include LetsEncrypt CA, as well as our CA, in tasmota_ca.ino for verifying server certificates\n#define INCLUDE_LOCAL_CERT\n#endif\n</code></pre> Copy or move the files created in step 1.6 above (<code>local_ca_data.h</code> and <code>local_ca_descriptor.h</code>) to the <code>$TASMOTAROOT/tasmota/include</code> directory. If desired, the two built-in certificates for Let's Encrypt and Amazon AWS may be omitted from the build by defining these macros in <code>user_config_override.h</code>:</p> <pre><code>#define OMIT_LETS_ENCRYPT_CERT\n#define OMIT_AWS_CERT\n</code></pre>"},{"location":"Self-signed-Mosquitto/#3-build-your-tasmota-binaries-flash-and-configure-your-devices","title":"3. Build your Tasmota Binaries, flash and configure your devices","text":"<p>Initially at least, build the binaries with the web server enabled. Pull up the web page on each device and check the configuration.  In particular check the following settings.</p> <ul> <li>WiFi Host Name</li> <li>MQTT Host -- must be resolvable, and match the Common Name on the server's certificate</li> <li>MQTT Port -- this often does not come up as defined in the configuration file, and must be changed to 8883</li> <li>MQTT Topic</li> </ul>"},{"location":"Self-signed-Mosquitto/#4-configure-your-network","title":"4. Configure your network","text":"<p>The Common Name (CN) in the server's certificate will either be a resolvable name (like <code>mqtt.myorg.com</code>), or the IP address  string for the server (e.g. <code>192.168.2.3</code>). The host name assigned to the server must match this CN, unless an IP address string is used in the server certificate CN, in which case the host name can be anything. These next two items are only necessary where the CN is not an IP address string.</p> <ul> <li>Configure your router to resolve the Tasmota device's MQTT Host Name (e.g. <code>mqtt.myorg.com</code>) to your Server Machine.</li> <li>Configure your Server Machine hostname to the same name (e.g. <code>mqtt.myorg.com</code>).</li> </ul> <p>In all cases, check these Tasmota guidelines about Securing your IoT.</p>"},{"location":"Self-signed-Mosquitto/#5-install-and-configure-mosquitto-on-your-server","title":"5. Install and configure Mosquitto on your server","text":"<p>Install Mosquitto</p>"},{"location":"Self-signed-Mosquitto/#linux","title":"Linux","text":"<pre><code>sudo apt-get install Mosquitto\n</code></pre>"},{"location":"Self-signed-Mosquitto/#windows","title":"Windows","text":"<p>Download and run the Windows installer from <code>https://www.mosquitto.org/</code>. Mosquitto may be installed either as a program or service. The main difference is in how mosquitto is started. As a program, it must be started by a user every time, but as a service it can be automatically started by the OS during boot.</p>"},{"location":"Self-signed-Mosquitto/#51-configuration","title":"5.1 Configuration","text":"<p>Copy the files from CA Machine to the following locations on a Linux server machine:</p> <pre><code>/etc/mosquitto/ca_certificates/ca.crt\n/etc/mosquitto/certs/mqtt.myorg.com.crt\n/etc/mosquitto/certs/mqtt.myorg.com.key\n</code></pre> <p>and to here on a Windows server machine (requires Administrative privileges):</p> <p><pre><code>C:\\Program Files\\mosquitto\\ca.crt\nC:\\Program Files\\mosquitto\\mqtt.myorg.com.crt\nC:\\Program Files\\mosquitto\\mqtt.myorg.com.key\n</code></pre> On Windows, if preferred, one or two subdirectories within the mosquitto installation directory can be created to hold the certificates. That might make it easier to restrict access to a private key in plain text form.</p> <p>There are two options for configuring the server's private key. It can be converted to plain text form (<code>.pem</code>) as shown below, or left encrypted (<code>.key</code>). If left encrypted, the password will need to be entered by hand every time the server is started. This will not be feasible if mosquitto is to be run as a service. Security risks can be minimzed by setting tight permissions on the files, as shown below.</p> <p>Convert the private key to plain text format like this:</p> <p><code>openssl rsa -in mqtt.myorg.com.key -out mqtt.myorg.com.pem</code></p>"},{"location":"Self-signed-Mosquitto/#file-permissions-linux","title":"File Permissions: Linux","text":"<p>Ensure the files have owner <code>mosquitto:mosquitto</code> and permissions <code>-r--------</code>. Also ensure <code>ca_certificates</code> and <code>certs</code> directories have owner <code>mosquitto:mosquitto</code> and permissions <code>dr-x------</code>.</p>"},{"location":"Self-signed-Mosquitto/#file-permissions-windows","title":"File Permissions: Windows","text":"<p>It should be possible to configure permissions so that only the <code>SYSTEM</code> user can read the private key file, and when mosquitto is run as a service, it runs under the <code>SYSTEM</code> account. How to do this is currently beyond the scope of this guide.</p>"},{"location":"Self-signed-Mosquitto/#53-configure-and-start-the-server","title":"5.3 Configure and start the server","text":"<p>Edit <code>/etc/mosquitto/conf.d/default.conf</code> as following: <pre><code>protocol mqtt\nallow_anonymous false\nlistener 8883\nsocket_domain ipv4\n# Certs and Keys\ncafile /etc/mosquitto/ca_certificates/ca.crt\ncertfile /etc/mosquitto/certs/mqtt.myorg.com.crt\nkeyfile /etc/mosquitto/certs/mqtt.myorg.com.pem\nrequire_certificate true\nuse_identity_as_username true\n</code></pre></p> <p>On a Windows machine, the configuration file is <code>C:\\Program Files\\mosquitto\\mosquitto.conf</code>, and the paths to the certificate and key files should be set accordingly using standard Windows path syntax.</p> <p>To start Mosquitto on Linux:</p> <pre><code>sudo service mosquitto Start\n</code></pre> <p>To start Mosquitto on Windows, either use the services snap-in (<code>services.msc</code>), or from an Administrator command prompt:</p> <pre><code>net start mosquitto\n</code></pre>"},{"location":"Self-signed-Mosquitto/#6-generate-and-configure-certificates-for-your-devices","title":"6. Generate and configure certificates for your devices","text":"<p>!!! failure \"Repeated step\" Repeat the following 6.x steps once for every device, changing tasmota_name for each device. You will be prompted for a private key password for each device.</p> <p>After entering the new password (twice for verification), you will also be prompted for the private key password of the root CA certificate.</p>"},{"location":"Self-signed-Mosquitto/#61-generate-the-client-certificates","title":"6.1 Generate the client certificates","text":"<pre><code>export TAS=tasmota_name\n# Request tasmota certs (will ask for password)\n./easyrsa gen-req $TAS\n# Sign certificate for Tasmota\n./easyrsa sign-req tasmota $TAS\n</code></pre>"},{"location":"Self-signed-Mosquitto/#62-convert-certificate-keys-to-tasmota-compatible-format","title":"6.2 Convert certificate keys to Tasmota compatible format","text":"<p>The new certificate must be converted to Tasmota commands which can be entered into the device's web console.  Credentials are composed of two distinct parts:</p> <ul> <li>Private Key - this is the secret that will allow your device to prove its identity, and consists of 32 bytes (256 bits). Consider this as sensitive as a password.</li> <li>Public Key - this allows others to encrypt messages which can only be decrypted with the Private Key, and contains 256 bytes (2048 bits).</li> </ul> <p>Both of these must be loaded into flash in the Tasmota device. This is done by entering <code>TLSKey</code> commands in the device's web console. </p> <p>This step must be performed on the machine where the device certificates were created, from within the <code>easyrsa3</code> directory.  The following commands will generate a shell script, <code>gen-tlskeys</code>, which will perform the necessary work.</p> <pre><code>cat &gt;gen-tlskeys &lt;&lt;'EOF'\n# Decrypt private key (will ask for a password), then extract TLSKey1 (private) and TLSKey2 (public) values\nif [ \"$#\" -ne 1 ] ; then\n    echo \"Usage: gen-tasmota-cert &lt;device-certificate-name&gt;\"\n    exit 1\nfi\nif [ ! -f pki/private/$1.key ] ; then\n    echo \"Could not find private key file pki/private/$1.key\"\n    exit 1\nfi\nif [ ! -f pki/issued/$1.crt ] ; then\n    echo \"Could not find public key file pki/issued/$1.crt\"\n    exit 1\nfi\nopenssl ec -in ./pki/private/$1.key -outform PEM | \\\nopenssl ec -inform PEM -outform DER | openssl asn1parse -inform DER | \\\nhead -3 | tail -1 | awk -F':' '{ print $4 }' | xxd -r -p | base64 | \\\necho -e \"----\\n\\nCopy the following commands and paste them into the device's web console\\n\\n---\\n\\nTLSKey1 $(&lt;/dev/stdin)\" &amp;&amp; \\\nopenssl x509 -in ./pki/issued/$1.crt -inform PEM -outform DER | \\\nopenssl base64 -e -in - -A|echo -e \"\\n\\nTlskey2 $(&lt;/dev/stdin)\"\nEOF\nchmod 755 gen-tlskeys\n</code></pre> <p>Now, for each device, simply enter this command. As above, the variable (<code>$TAS</code>) is set to the name of the device's certificate.  Output will consist of two Tasmota device commands printed to the terminal window; these must be copied and pasted into the device's web console.</p> <pre><code>./gen-tlskeys $TAS\n</code></pre> <p>The <code>TLSKey1</code> command contains the device's private key in plain text (unencrypted) format, so don't keep it around any longer than necessary.</p>"},{"location":"Self-signed-Mosquitto/#63-access-your-devices-web-console-and-configure-the-keys","title":"6.3 Access your device's web console and configure the keys.","text":"<p>Run the <code>TLSKey1</code> and <code>TLSKey2</code> commands as obtained in the previous output. Open each of the files, copy the text and paste it into the web console.</p>"},{"location":"Self-signed-Mosquitto/#64-verify-the-device-is-connecting-as-expected","title":"6.4 Verify the device is connecting as expected.","text":""},{"location":"Self-signed-Mosquitto/#building-bearssl-on-windows-machines","title":"Building BearSSL on Windows machines","text":"<p>This can be a challenging task, and a method to accomplish this through Cygwin is described here. </p> <p>Here are the issues that need to be fixed before BearSSL will build under Cygwin. Many of them are related to the differences between Windows and Linux when it comes to programming socket I/O. - Commands for compiling and linking are <code>gcc</code>, not <code>cc</code> - Additional compiler flags are required to compile and link socket I/O code - A Windows socket library (<code>libws2_32</code>) must be included in the link edit step when building the brssl executable - A local implementation of a missing function (<code>inet_ntop</code>) must be added to the build</p> <p>The current git master branch of BearSSL is required -- the 0.6 version available as a gzipped tar archive will not work. An up-to-date version of gcc in Cygwin is also required -- old versions may experience an internal compiler error when building BearSSL.</p> <p>Start by installing Cygwin, selecting the <code>gcc</code> and <code>make</code> packages in the <code>Devel</code> category, and the <code>openssl</code> package in the <code>Net</code> category.</p> <p>Open a Cygwin terminal window and change to the directory where BearSSL source was cloned. To access a Windows letter drive such as <code>F:\\somepath</code> in Cygwin, use the path <code>/cygdrive/f/somepath</code>. </p> <p>All of the necessary patches are easily made by copying and pasting this set of commands into the Cygwin terminal window. This will create files needed to patch the BearSSL build. First, change to the top level BearSSL directory in the Cytwin window. After selecting the text in the window below, click in the Cygwin window and hit Control-Insert to paste, or right-click in the window and select Paste from the drop-down menu. You may need to hit Enter after doing this.</p> <pre><code>cat &gt;edit-Unix-mk.sed &lt;&lt;'EOF'\n1 a \\# Modified for building on Cygwin systems\n/^CC.*=.*cc/ c \\CC = gcc\n/^LDDLL.*=.*cc/ c \\LDDLL = gcc\n/^LD.*=.*cc/ c \\LD = gcc\n/^CFLAGS.*=/ s/-fPIC/-DWINVER=0x0501 -DEWOULDBLOCK=EAGAIN/\n/^LDOUT.*=/ a \\BRSSL_EXT_LIBS = -lws2_32\nEOF\n\ncat &gt;extraTargets &lt;&lt;'EOF'\n\n$(OBJDIR)$Pinet_ntop$O: tools$Pinet_ntop.c $(HEADERSTOOLS)\n    $(CC) $(CFLAGS) $(INCFLAGS) $(CCOUT)$(OBJDIR)$Pinet_ntop$O tools$Pinet_ntop.c\n\n$(BRSSL): $(BEARSSLLIB) $(OBJBRSSL)\n    $(LD) $(LDFLAGS) $(LDOUT)$(BRSSL) $(OBJBRSSL) $(BEARSSLLIB) $(BRSSL_EXT_LIBS)\nEOF\n\ncat &gt;tools/inet_ntop.c &lt;&lt;'EOF'\n#ifdef _WIN32\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;winsock2.h&gt;\n#include &lt;ws2tcpip.h&gt;\nconst char *inet_ntop(int af, const void *src, char *dst, int cnt)\n{\n        if (af == AF_INET)\n        {\n                struct sockaddr_in in;\n                memset(&amp;in, 0, sizeof(in));\n                in.sin_family = AF_INET;\n                memcpy(&amp;in.sin_addr, src, sizeof(struct in_addr));\n                getnameinfo((struct sockaddr *)&amp;in, sizeof(struct\nsockaddr_in), dst, cnt, NULL, 0, NI_NUMERICHOST);\n                return dst;\n        }\n        else if (af == AF_INET6)\n        {\n                struct sockaddr_in6 in;\n                memset(&amp;in, 0, sizeof(in));\n                in.sin6_family = AF_INET6;\n                memcpy(&amp;in.sin6_addr, src, sizeof(struct in_addr6));\n                getnameinfo((struct sockaddr *)&amp;in, sizeof(struct\nsockaddr_in6), dst, cnt, NULL, 0, NI_NUMERICHOST);\n                return dst;\n        }\n        return NULL;\n}\n#endif\nEOF\n\ncat &gt;patch-bearssl &lt;&lt;'EOF'\nsed -f edit-Unix-mk.sed conf/Unix.mk &gt;conf/Cygwin.mk\nsed -e '/^OBJBRSSL = / a \\ $(OBJDIR)$Pinet_ntop$O \\\\' mk/Rules.mk &gt;Rules.tmp\ncat Rules.tmp extraTargets &gt;mk/Rules.mk\nrm -f Rules.tmp\ncp -f tools/brssl.h brssl.tmp\nsed -e '/^#include.*bearssl\\.h/ a \\const char *inet_ntop(int,const void*,char*,int);' brssl.tmp &gt;tools/brssl.h\nrm -f brssl.tmp\nEOF\nchmod 755 patch-bearssl\n</code></pre> <p>Check to make sure that the file <code>extraTargets</code> contains a leading tab character, not spaces on the <code>$(CC)</code> and <code>$(LD)</code> lines. Executing the following commands should get the job done:</p> <pre><code>./patch-bearssl\nmake tools CONF=Cygwin\n</code></pre> <p>The resulting <code>brssl.exe</code> file will be found in the <code>build</code> directory, and should be copied to the top level EasyRSA directory.</p>"},{"location":"Sensor-API/","title":"Sensor API","text":"<p>Tasmota sensor API documentation for sensor driver development.</p>"},{"location":"Sensor-API/#important-things-to-consider","title":"Important things to consider","text":"<ul> <li>There are several I<sup>2</sup>C sensor examples you can take from the development codebase when writing your own and you are encouraged to do this as it is a quick and easy way to see how things fit together.</li> <li>The Tasmota firmware is essentially intended for ESP8266/ESP8285 Wi-Fi SoC based devices and commits to the main development branch will be subject to review based on whether or not what you intend to develop or add to the existing code is relevant to the general ESP device users.</li> <li>That being said, there is a lot of development going into the firmware which extends the functionality of standard off the shelf Sonoff devices. The firmware in itself is also useful for boards such as the WeMos ESP82xx boards. More technically inclined individuals who use generic ESP82xx modules in their own circuits to provide more access to pins and the ability to add more sensors and hardware external to the device or the generic ESP82xx module circuits can also take advantage of Tasmota.</li> <li>The resources on the ESP82xx are finite. Most devices ship with 1MByte SPI flash which means for the generic device users, the code generally needs to be less than 502KBytes to ensure that OTA (Over The Air) flash functionality (which is the main reason why people use this firmware) remains available. RAM is also limited to an absolute maximum of 80KBytes. This memory is divided into heap (used by global variables and Strings) and stack (used by local variables) where stack space is just 4KBytes.</li> <li>Given the above resource constraints it's important to keep your code as small as possible, as fast running as possible, and use as little RAM as possible.</li> <li>You need to think about these resource constraints all the time whilst doing any development you wish to add to the firmware functionality - Face the fact that microcontroller development isn't as close a relative to standard computer programming as you'd expect.</li> <li>You will be adding code to an existing framework which requires you to adhere to some simple but strict rules such as not having any infinite loops like you would have in your generic Arduino code and try to avoid using the delay() functions when writing your code as this will cause the entire firmware to be subjected to the delays you have added - Infinite loops will cause the firmware to lock up completely!</li> <li>If your sensor has configuration options please make these available by using the <code>SensorXX</code> framework which is already incorporated in the base code - This may not stop you from using a web-based configuration interface but since web-based configuration takes up a lot of code space in flash it is very important to make this optional by means of a compiler directive or a #define in the configuration file and as such something you need to keep in mind during your development and debugging - The more progressively optional additional features are in your driver the smaller the basic codebase can be for minimalist implementations.</li> <li>Whilst developing drivers for devices that use the I<sup>2</sup>C bus always consider other devices already supported in the codebase which may use the same address range. This could mean you need to find a unique way of differentiating your device detection from other devices on the same address range (e.g. querying a model-specific register) and/or disabling by #undef existing devices if yours is selected with a #define statement and in such cases always provide a warning to the user during compile time using the #warning pragma such as including <code>#warning **** Turned off conflicting drivers SHT and VEML6070 ****</code> in your code.</li> <li>DO NOT ADD WEB INTERFACE FOR SENSOR CONFIGURATION if your sensor requires additional user configuration. The reason for this is the additional program memory required but most importantly the amount of RAM required to even create minimal user interfaces. Running out of RAM during runtime will lead to abnormal behaviour of your driver and/or other drivers or the entire firmware! See sensors such as the MCP23008/MCP23017 driver on more information on how to implement <code>SensorXX</code> commands instead!</li> <li>While developing you might want to enable additional debugging provided by file <code>xdrv_99_debug.ino</code> using <code>#define USE_DEBUG_DRIVER</code> which provides some commands for managing configuration settings and CPU timing. In addition you can enable define <code>PROFILE_XSNS_SENSOR_EVERY_SECOND</code> to profile your drivers duration.</li> <li>Do not assume others will know immediately how to use your addition and know that you will need to write a Wiki for it in the end.</li> </ul>"},{"location":"Sensor-API/#managing-a-forked-branch","title":"Managing a Forked Branch","text":"<p>If you plan to submit a PR bigger than a simple change in one file, here is a short intro about how to do a clean PR.</p> <ul> <li>fork the Tasmota repository in Github</li> <li><code>git clone https://github.com/&lt;github_user&gt;/Tasmota.git</code> and work on your local copy</li> <li><code>git remote add upstream https://github.com/arendst/Tasmota.git</code></li> <li><code>git checkout development</code></li> <li><code>git checkout -b &lt;temp_branch&gt;</code> to create a working branch where you can push commits</li> <li><code>git push --set-upstream origin &lt;temp_branch&gt;</code></li> <li>work on your local version and push as many commits as you want</li> </ul> <p>When you think it is ready to merge and submit a PR:</p> <ul> <li><code>git checkout development</code> to go back to the main branch</li> <li><code>git pull upstream development</code> to update all the latest changes</li> <li><code>git push</code> to update your fork</li> <li><code>git checkout -b &lt;pr_branch&gt;</code> to create a new branch for the final PR</li> <li><code>git push --set-upstream origin &lt;pr_branch&gt;</code></li> <li>Merge the edits but be sure to remove the history of your local commits</li> <li><code>git merge --squash &lt;temp_branch&gt;</code></li> <li><code>git commit -m \"Message\"</code></li> </ul> <p>Now you have a clean single commit from which you can create the PR on the Tasmota Github.</p>"},{"location":"Sensor-API/#directoryfile-structure","title":"Directory/file structure","text":"<p>Sensor libraries are located in the <code>lib/</code> directory. Sensor drivers are located in the <code>tasmota/</code> directory. The filename of the sensor driver is <code>xsns_&lt;driver_ID&gt;_&lt;driver_name&gt;.ino</code>, e.g. <code>xsns_05_ds18b20.ino</code> where <code>&lt;driver_ID&gt;</code> is a unique number between 01 and 90 and <code>&lt;driver_name&gt;</code> is a human-readable name of the driver.</p> <p>Using generic libraries from external sources for sensors should be avoided as far as possible as they usually include code for other platforms and are not always written in an optimized way.</p>"},{"location":"Sensor-API/#api-structure","title":"API structure","text":""},{"location":"Sensor-API/#pre-processor-directives","title":"Pre-processor directives","text":"<p>Conditional compiling of a sensor driver is achieved by adding a pre-processor directive of the scheme <code>USE_&lt;driver_name&gt;</code> in <code>my_user_config.h</code>. Accordingly the driver code has to be wrapped in <code>#ifdef USE_&lt;driver_name&gt; ... #endif  // USE_&lt;driver_name&gt;</code>. Any Sensor driver must contain a pre-processor directive defining the driver ID by the scheme <code>#define XSNS_&lt;driver_ID&gt;</code>.</p>"},{"location":"Sensor-API/#callback-function","title":"Callback function","text":"<p>Any sensor driver needs a callback function following the scheme <pre><code>// Conditional compilation of driver\n#ifdef USE_&lt;driver_name&gt;\n\n// Define driver ID\n#define XSNS_&lt;driver_ID&gt;  &lt;driver_ID&gt;\n\n/**\n * The callback function Xsns&lt;driver_ID&gt;() interfaces Tasmota with the sensor driver.\n *\n * It provides the Tasmota callback IDs.\n *\n * @param   byte    callback_id  Tasmota function ID.\n * @return  boolean              Return value.\n * @pre     None.\n * @post    None.\n *\n */\nboolean Xsns&lt;driverID&gt;(byte callback_id) {\n\n  // Set return value to `false`\n  boolean result = false;\n\n  // Check if I2C interface mode\n// if(i2c_flg) {\n\n  // Check which callback ID is called by Tasmota\n  switch (callback_id) {\n    case FUNC_INIT:\n      break;\n    case FUNC_EVERY_50_MSECOND:\n      break;\n    case FUNC_EVERY_SECOND:\n      break;\n    case FUNC_JSON_APPEND:\n      break;\n#ifdef USE_WEBSERVER\n    case FUNC_WEB_APPEND:\n      break;\n#endif // USE_WEBSERVER\n    case FUNC_SAVE_BEFORE_RESTART:\n      break;\n    case FUNC_COMMAND:\n      break;\n  }\n// } // if(i2c_flg)\n\n  // Return boolean result\n  return result;\n}\n#endif // USE_&lt;driver_name&gt;\n</code></pre></p>"},{"location":"Sensor-API/#callback-ids","title":"Callback IDs","text":"<p><code>FUNC_INIT</code></p> <p>This callback ID is called when sensor drivers should be initialized.</p> <p><code>FUNC_EVERY_50_MSECOND</code></p> <p>This callback ID is called every 50 milliseconds, e.g. for near real-time operation</p> <p><code>FUNC_EVERY_SECOND</code></p> <p>This callback ID is called every second.</p> <p>It can be useful for anything that you need to do on a per second basis and is commonly used as an entry point to detect a driver or initialize an externally driven device such as a sensor, relay board or other forms of input/output required by your driver.</p> <p>You would normally want to make sure you've detected and initialised before it is used by <code>JSON_APPEND</code>, etc. so that it's ready to serve data.</p> <p>The generally accepted way to use this would be to detect your sensor and once this is done set a sensor value accordingly so that the function does not use unnecessary resources during future calls, for example: <pre><code>void MySensorDetect()\n{\n  if (MySensorDetected) { return; }\n  /*\n   * Perform the code which needs to be completed to\n   * detect your sensor and then set MySensorDetected to\n   * a non-zero value which will prevent this section\n   * of your code to re-run every time the function is\n   * called.\n   * \n   * Under normal circumstances you'd not need to do\n   * re-detect or initialise your sensor once it has been\n   * done\n   */\n}\n</code></pre></p> <p>Setting a flag that the driver was successful in detecting the attached chip/board via I<sup>2</sup>C or SPI will prevent it from continuously trying to initialize an already initialized device.</p> <p>When writing your function responsible for detecting an externally connected I<sup>2</sup>C device try to create a method by which you read or write to specific registers that would be applicable to that specific I<sup>2</sup>C device only as to confirm a positive detect for the device. If this is not done extensively it will lead to some drivers getting false detects for a different device type simply because it shares the same I<sup>2</sup>C address.</p> <p>Unless your driver is specifically going to use the entire array of addresses provisioned by the manufacturer please consider using a <code>#define USE_MYCHIPNAME_ADDR</code> in the <code>my_user_config.h</code> so that the user may specify the address on which to expect the device. This is of course only applicable to drivers that are not enabled by default in any of the pre-built binaries.</p> <p>I<sup>2</sup>C address auto-detection example <pre><code>#define MPR121_I2C_ADDR_1ST  0x5A    /** 1st I2C address of sensor model **/\n#define MPR121_I2C_ADDR_NUM  4       /** Number of sensors/I2C addresses **/\n#define MPR121_I2C_ID_REG    0x5D    /** Sensor model specific ID register **/\n#define MPR121_I2C_ID_VAL    0x24    /** Sensor model specific ID register value **/\n\n/* Sensor data struct type declaration/default definition */\ntypedef struct {\n    bool connected    = false;     /** Status if sensor is connected at I2C address */\n    bool running      = false;     /** Running state of sensor */\n        .\n        .\n        .\n} mpr121;\n\n// Declare array of sensor data structs\nmpr121 mpr121[MPR121_I2C_ADDR_NUM];\n\n// Sensor specific init function\nvoid mpr121_init() {\n    bool anyConnected = false;\n    // Loop through I2C addresses\n    for (uint8_t i = 0; i &lt; MPR121_I2C_ADDR_NUM); i++) {\n\n        // Check if sensor is connected on I2C address\n        mpr121[i].connected = (MPR121_I2C_ID_VAL == I2cRead8(MPR121_I2C_ADDR_1ST + i, MPR121_I2C_ID_REG);\n        if(mpr121[i].connected) {\n            anyConnected = true;\n\n            // Log sensor found\n            snprintf_P(log_data, sizeof(log_data), PSTR(D_LOG_I2C \"MPR121-%d \" D_FOUND_AT \" 0x%X\"), i, MPR121_I2C_ADDR_1ST + i);\n            AddLog(LOG_LEVEL_INFO);\n\n            // Initialize sensor\n            .\n            .\n            .\n\n            // Set running to true\n            mpr121[i].running = true;\n        }\n    }\n    if(!anyConnected){\n        snprintf_P(log_data, sizeof(log_data), PSTR(D_LOG_I2C \"MPR121: No sensors found\"));\n        AddLog(LOG_LEVEL_INFO);\n    }\n}\n</code></pre></p> <p>Four advanced methods to use <code>FUNC_EVERY_SECOND</code> (Food for thought) :</p> <ul> <li>If a sensor needs an action which takes a long time, like more than 100mS, the action will be started here for a future follow-up. Using the uptime variable for testing like (uptime &amp;1) will happen every 2 seconds. An example is the DS18B20 driver where readings (conversions they call it) can take up to 800mS from the initial request.</li> <li>If a sensor needed the previous action it is now time to gather the information and store it in a safe place to be used by <code>FUNC_JSON_APPEND</code> and/or <code>FUNC_WEB_APPEND</code>. Using the else function of the previous test (uptime &amp;1) will happen every 2 seconds too but just 1 second later than the previous action.</li> <li>If a sensor does not respond for 10 times the sensor detection flag could be reset which will stop further processing until the sensor is re-detected. This is currently not being used actively as some users complain about disappearing sensors for whatever reason - Could be hardware related but easier to make Tasmota a little more flexible.</li> <li>Making re-detection of a sensor possible by executing this once every 100 seconds (94 == (uptime %100)) a re-attached sensor can be detected without a restart of Tasmota. The 94 given in this example should be different for every sensor driver to make sure not all sensors start detection at the same time. Using the drivers index number should be a good starting point.</li> </ul> <p><code>FUNC_PREP_BEFORE_TELEPERIOD</code></p> <p>NOTE: This callback ID is deprecated as sensors should prepare for more regular updates due to \"realtime\" rule execution. Use <code>FUNC_EVERY_SECOND</code> instead. See examples used in xsns_05_ds18x20.ino and xsns_09_bmp.ino where updated sensor data is stored in preparation to calls to FUNC_JSON_APPEND and FUNC_WEB_APPEND.</p> <p><code>FUNC_JSON_APPEND</code></p> <p>This callback ID is called when <code>TelePeriod</code> is due to append telemetry data to the MQTT JSON string or at approximately every 2 seconds when a rule is checked, e.g. <pre><code>snprintf_P(mqtt_data, sizeof(mqtt_data), PSTR(\"{\\\"MPR121%c\\\":{\\\"Button%i\\\":%i}}\"), pS-&gt;id[i], j, BITC(i,j));\n</code></pre></p> <p><code>FUNC_WEB_APPEND</code></p> <p>This callback ID is called every  millisecond when HTML code should be added to the Tasmota web-interface main page, e.g., <pre><code>snprintf_P(mqtt_data, sizeof(mqtt_data), PSTR(\"%s{s}MPR121%c Button%d{m}%d{e}\"), mqtt_data, pS-&gt;id[i], j, BITC(i,j));\n</code></pre> It should be wrapped in <code>#ifdef USE_WEBSERVER ... #endif  // USE_WEBSERVER</code> <p><code>FUNC_SAVE_BEFORE_RESTART</code></p> <p>This callback ID is called to allow a sensor to prepare for saving configuration changes. To be used to save volatile data just before a restart. Variables can be appended to <code>struct SYSCFG {} Settings</code> in file <code>tasmota/settings.h</code>.</p> <p><code>FUNC_COMMAND</code></p> <p>This callback ID is called when a sensor specific command <code>Sensor&lt;xx&gt;</code> or <code>Driver&lt;xx&gt;</code> is executed where xx is the sensor index. <pre><code>        case FUNC_COMMAND:\n            if (XSNS_&lt;driver_ID&gt; == XdrvMailbox.index) {\n               result = &lt;driver_name&gt;Command() { ... };  // Return true on success\n            }\n            break;\n</code></pre> <pre><code>// Data struct of FUNC_COMMAND ID\nstruct XDRVMAILBOX {\n  uint16_t      valid;      // ???\n  uint16_t      index;      // Sensor index\n  uint16_t      data_len;   // Length of command string\n  uint16_t      payload16;  // 16 bit unsigned int of payload if it could be converted, otherwise 0\n  int16_t       payload;    // 16 bit signed int of payload if it could be converted, otherwise 0\n  uint8_t       grpflg;     // ???\n  uint8_t       notused;    // ???\n  char         *topic;      // Command topic\n  char         *data;       // Command string/value - length of which is defined by data_len\n} XdrvMailbox;\n</code></pre></p> <p>If your driver needs to accept multiple parameters for <code>SensorXX</code> and/or <code>DriverXX</code> please consider using comma delimited formatting and use the already written <code>subStr()</code> function declared in <code>support.ino</code> to parse through the parameters you need.</p> <p>An example of those could be <pre><code>SensorXX reset // The reset parameter may be intercepted using:\nif (!strcmp(subStr(sub_string, XdrvMailbox.data, \",\", 1),\"RESET\")) { // Note 1 used for param number\n    MyDriverName_Reset(); \n    return serviced;\n}\n</code></pre> Or in the case of multiple parameters <pre><code>SensorXX mode,1\nif (!strcmp(subStr(sub_string, XdrvMailbox.data, \",\", 1),\"MODE\")) { // Note 1 used for param number\n  uint8_t mode = atoi(subStr(sub_string, XdrvMailbox.data, \",\", 2);  // Note 2 used for param number\n}\n</code></pre></p>"},{"location":"Sensor-API/#useful-functions","title":"Useful functions","text":""},{"location":"Sensor-API/#mqtt","title":"MQTT","text":"<p><pre><code>void MqttPublishPrefixTopic_P(uint8_t prefix, const char* subtopic, boolean retained)\n</code></pre> This function publishes MQTT messages immediately, e.g., <pre><code>snprintf_P(mqtt_data, sizeof(mqtt_data), PSTR(\"{\\\"MPR121%c\\\":{\\\"Button%i\\\":%i}}\"), pS-&gt;id[i], j, BITC(i,j));\nMqttPublishPrefixTopic_P(RESULT_OR_STAT, mqtt_data);\n</code></pre></p>"},{"location":"Sensor-API/#logging","title":"Logging","text":"<p><pre><code>void AddLog(byte loglevel)\n</code></pre> This function adds log messages stored in <code>log_data</code> to the local logging system, e.g. <pre><code>snprintf_P(log_data, sizeof(log_data), PSTR(D_LOG_I2C \"MPR121(%c) \" D_FOUND_AT \" 0x%X\"), pS-&gt;id[i], pS-&gt;i2c_addr[i]);\nAddLog(LOG_LEVEL_INFO);\n</code></pre> <pre><code>void AddLogSerial(byte loglevel)\n</code></pre> This function adds a log message to the local logging system dumping the serial buffer as hex information, e.g. <pre><code>AddLogSerial(LOG_LEVEL_INFO);\n</code></pre> <pre><code>void AddLogMissed(char *sensor, uint8_t misses)\n</code></pre> This function adds a log message to the local logging system about missed sensor reads.</p>"},{"location":"Sensor-API/#i2c-interface","title":"I<sup>2</sup>C Interface","text":"<p><pre><code>bool I2cValidRead8(uint8_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidRead16(uint16_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidReadS16(int16_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidRead16LE(uint16_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidReadS16_LE(int16_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidRead24(int32_t *data, uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>bool I2cValidRead(uint8_t addr, uint8_t reg, uint8_t size)\n</code></pre> These functions return <code>true</code> if 1, 2, 3 or <code>size</code> bytes can be read from the I<sup>2</sup>C address <code>addr</code> and register <code>reg</code> into <code>*data</code>. Functions with a <code>S</code> read signed data types while functions without a <code>S</code> read unsigned data types. Functions with LE read little-endian byte order while functions without LE read machine byte order.</p> <p><pre><code>uint8_t I2cRead8(uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>uint16_t I2cRead16(uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>int16_t I2cReadS16(uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>uint16_t I2cRead16LE(uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>int16_t I2cReadS16_LE(uint8_t addr, uint8_t reg)\n</code></pre> <pre><code>int32_t I2cRead24(uint8_t addr, uint8_t reg)\n</code></pre> These functions return 1, 2 or 3 bytes from the I<sup>2</sup>C address <code>addr</code> and register <code>reg</code>. Functions with a <code>S</code> read signed data types while functions without a <code>S</code> read unsigned data types. Functions with LE read little endian byte order while functions without LE read machine byte order.</p> <p><pre><code>bool I2cWrite8(uint8_t addr, uint8_t reg, uint8_t val)\n</code></pre> <pre><code>bool I2cWrite16(uint8_t addr, uint8_t reg, uint16_t val)\n</code></pre> <pre><code>bool I2cWrite(uint8_t addr, uint8_t reg, uint32_t val, uint8_t size)\n</code></pre> These functions return true after successfully writing 1, 2 or <code>size</code> bytes to the I<sup>2</sup>C address <code>addr</code> and register <code>reg</code>.</p> <p><pre><code>int8_t I2cReadBuffer(uint8_t addr, uint8_t reg, uint8_t *reg_data, uint16_t len)\n</code></pre> <pre><code>int8_t I2cWriteBuffer(uint8_t addr, uint8_t reg, uint8_t *reg_data, uint16_t len)\n</code></pre> These functions copy <code>len</code> bytes from/to <code>*reg_data</code> starting at I<sup>2</sup>C address <code>addr</code> and register <code>reg</code>.</p> <p><pre><code>void I2cScan(char *devs, unsigned int devs_len)\n</code></pre> This functions writes a list of I<sup>2</sup>C addresses in use into the string <code>*dev</code> with maximum length <code>devs_len</code>.</p> <p><pre><code>bool I2cDevice(byte addr)\n</code></pre> This functions checks if the I<sup>2</sup>C address <code>addr</code> is in use.</p>"},{"location":"Sensor-API/#useful-pre-processor-directives","title":"Useful pre-processor directives","text":"<p><code>PSTR(\"string\")</code></p> <p>This pre-processor directive saves RAM by storing strings in flash instead of RAM.</p> <p><pre><code>const char MyTextStaticVariable[] PROGMEM = \"string\";\n</code></pre> This pre-processor directive saves RAM by storing strings in flash instead of RAM.</p> <p>You may then reference them directly (if the type matches the parameter required) or force it to 4 byte alignment by using the variable as <code>FPSTR(MyTextStaticVariable)</code></p>"},{"location":"Sensor-API/#keeping-esp8266-code-compact","title":"Keeping ESP8266 code compact","text":"<p>Below are various tips and tricks to keep ESP8266 code compact and save both Flash and Memory. Flash code is limited to 1024k but keep in mind that to allow OTA upgrade, you need Flash memory to contain two firmwares at the same time. To go beyond 512k, you typically use <code>tasmota-minimal</code> as an intermediate firmware. <code>tasmota-minimal</code> takes roughly 360k, so it's safe not to go <code>uint32_t</code> beyond 620k of Flash. Memory is even more limited: 80k. With Arduino Core and basic Tasmota, there are 25k-30k left of heap space. Heap memory is very precious, running out of memory will generally cause a crash.</p>"},{"location":"Sensor-API/#about-esp8266","title":"About ESP8266","text":"<p>ESP8266 is based on Xtensa instruction set. Xtensa is a 32 bits RISC processor core, containing 16 x 32 bits registers. ESP8266 supports integer operations, including 32x32 multiplication. It does not contain an FPU for floating point operations, nor integer divisions.</p> <p>Contrary to classical RISC processors, all instructions are 24 bits wide instead of 32 bits. To increase code compactness, some instructions have a 16 bits version used whenever possible by gcc.</p> <p>If you want to see what assembly is generated by gcc, in file <code>platform.ini</code>, at the section used to compile (ex: <code>[core_2_6_1]</code>) in section <code>build_flags</code> add:</p> <p><code>-save-temps=obj -fverbose-asm</code></p> <p>Gcc will store <code>&lt;file&gt;.s</code> in the same folder as the <code>.o</code> file, typically in <code>.pioenvs/</code>.</p>"},{"location":"Sensor-API/#first-example","title":"First example","text":"<p>Let's take a basic function:</p> <pre><code>uint32_t Example(uint32_t a, uint32_t b) {\n  return a + b;\n}\n</code></pre> <p>Below is the generated assembly. Function names are mangled using standard C++, i.e. their name derive from their arguments and return types:</p> <pre><code>_Z7Examplejj:\n    add.n   a2, a2, a3  #, a, b\n    ret.n\n</code></pre> <p>As you can see, this is the simplest function we can think of. Register A2 holds the first argument and is used for return value. A3 holds the second argument.</p>"},{"location":"Sensor-API/#uint8_t-or-uint32_t","title":"uint8_t or uint32_t ?","text":"<pre><code>uint32_t Example(uint32_t a, uint32_t b) {\n  uint8_t c = a + b;\n  return c;\n}\n</code></pre> <p>Assembly:</p> <pre><code>_Z7Examplejj:\n    add.n   a2, a2, a3  # tmp52, a, b\n    extui   a2, a2, 0, 8    #, tmp52\n    ret.n\n</code></pre> <p>Whenever gcc needs to convert from <code>uin32_t</code> to <code>uint8_t</code>, it uses an extra instruction <code>extui  &lt;reg&gt;, &lt;reg&gt;, 0, 8</code>.</p> <p>Whenever you allocate <code>uint8_t</code> as a local variable, it will anyways allocate 32 bits on the stack.</p> <p>In conclusion you can easily use <code>uint32_t</code> in many places in the code. The main reason to force <code>uint8_t</code> are:</p> <ul> <li>in structures, to save memory. This is the only place where  <code>uint8_t</code> will take 1 byte and the compiler will try to pack as much as 4 <code>uint8_t</code> in 32 bits</li> <li>when you want to ensure that the value can never exceed 255. Beware though that the compiler will just chunk the last 8 bits of a 32 bits value and will not report any overflow.</li> </ul>"},{"location":"Sensor-API/#loops","title":"Loops","text":"<p>Should you use <code>uint8_t</code> or <code>uint32_t</code> for loops?</p> <p>Let's try:</p> <pre><code>uint32_t Example(uint32_t a, uint32_t b) {\n  for (uint8_t i = 0; i &lt; 10; i++) {\n    a += b;\n  }\n  for (uint32_t j = 0; j &lt; 10; j++) {\n    a += b;\n  }\n  return a;\n}\n</code></pre> <p>Assembly:</p> <pre><code>_Z7Examplejj:\n    movi.n  a3, 0   # ivtmp$7334,                     &lt;- loop 1\n.L2031:\n    add.n   a2, a2, a3  # a, a, ivtmp$7334\n    addi.n  a3, a3, 1   # ivtmp$7334, ivtmp$7334,\n    bnei    a3, 10, .L2031  # ivtmp$7334,,\n    movi.n  a3, 0   # j,                              &lt;- loop 2\n.L2033:\n    add.n   a2, a2, a3  # a, a, j\n    addi.n  a3, a3, 1   # j, j,\n    bnei    a3, 10, .L2033  # j,,\n    ret.n\n</code></pre> <p>As you can see here, both loops generate the same assembly for fixed size loops.</p> <p>Let's now see for variable size loops.</p> <pre><code>uint32_t Example(uint32_t a, uint32_t b) {\n  for (uint8_t i = 0; i &lt; b; i++) {\n    a += i;\n  }\n  for (uint32_t j = 0; j &lt; b; j++) {\n    a += j;\n  }\n  return a;\n}\n</code></pre> <p>Assembly:</p> <pre><code>_Z7Examplejj:\n    movi.n  a4, 0   # i,                     &lt;- loop 1\n    j   .L2030  #\n.L2031:\n    add.n   a2, a2, a4  # a, a, i\n    addi.n  a4, a4, 1   # tmp48, i,\n    extui   a4, a4, 0, 8    # i, tmp48       &lt;- extra 32 to 8 bits conversion\n.L2030:\n    bltu    a4, a3, .L2031  # i, b,\n    movi.n  a4, 0   # j,                     &lt;- loop 2\n    j   .L2032  #\n.L2033:\n    add.n   a2, a2, a4  # a, a, j\n    addi.n  a4, a4, 1   # j, j,\n.L2032:\n    bne a4, a3, .L2033  # j, b,\n    ret.n\n</code></pre> <p>In the first loop, the register a4 needs to be converted from 32 bits to 8 bits in each iteration.</p> <p>Again, there is no definitive rule, but keep in mind that using <code>uint8_t</code> can sometimes increase code size compared to <code>uint32_t</code>.</p>"},{"location":"Sensor-API/#floats-not-doubles","title":"Floats, not doubles!","text":"<p>ESP8266 does not have a FPU (Floating Point Unit), all floating point operations are emulated in software and provided in <code>libm.a</code>. The linker removes any unused functions, so we need to limit the number of floating point function calls.</p> <p>Rule 1: use ints where you can, avoid floating point operations.</p> <p>Rule 2: if you really need floating point, always use <code>float</code>, never ever use <code>double</code>.</p> <p>Let's now see why.</p> <p><code>float</code>fits in 32 bits, with a mantissa of 20 bits, exponent of TODO. The mantissa is 20 bits wide, which provides enough precision for most of our needs.</p> <p><code>float</code> is 32 bits wide and fits in a single register, whereas <code>double</code> is 64 bits and requires 2 registers.</p> <pre><code>float Examplef(float a, float b) {\n  return sinf(a) * (b + 0.4f) - 3.5f;\n}\n</code></pre> <p>Assembly:</p> <pre><code>    .literal .LC1012, 0x3ecccccd      &lt;- 0.4f\n    .literal .LC1013, 0x40600000      &lt;- 3.5f\n_Z8Examplefff:\n    addi    sp, sp, -16 #,,       &lt;- reserve 16 bytes on stack\n    s32i.n  a0, sp, 12  #,        &lt;- save a0 (return address) on stack\n    s32i.n  a12, sp, 8  #,        &lt;- save a12 on stack, to free for local var\n    s32i.n  a13, sp, 4  #,        &lt;- save a13 on stack, to free for local var\n    mov.n   a13, a3 # b, b            &lt;- a3 holds 'b', save to a13\n    call0   sinf    #                 &lt;- calc sin of a2 (a)\n    l32r    a3, .LC1012 #,        &lt;- load 0.4f in a3\n    mov.n   a12, a2 # D.171139,       &lt;- save result 'sin(a)' to a12\n    mov.n   a2, a13 #, b              &lt;- move a13 (second arg: b) to a2\n    call0   __addsf3    #         &lt;- add floats a2 and a3, result to a2\n    mov.n   a3, a2  # D.171139,       &lt;- copy result to a3\n    mov.n   a2, a12 #, D.171139       &lt;- load a2 with a12: sin(a)\n    call0   __mulsf3    #         &lt;- multiply 'sin(a)*(b+0.4f)'\n    l32r    a3, .LC1013 #,        &lt;- load a3 with 3.5f\n    call0   __subsf3    #         &lt;- subtract\n    l32i.n  a0, sp, 12  #,        &lt;- restore a0 (return address)\n    l32i.n  a12, sp, 8  #,        &lt;- restore a12\n    l32i.n  a13, sp, 4  #,        &lt;- restore a13\n    addi    sp, sp, 16  #,,       &lt;- free stack\n    ret.n                             &lt;- return\n</code></pre> <p>Now with <code>double</code>:</p> <pre><code>double Exampled(double a, double b) {\n  return sin(a) * (b + 0.4) - 3.5;\n}\n</code></pre> <p>Assembly:</p> <pre><code>    .literal .LC1014, 0x9999999a, 0x3fd99999     &lt;- 0.4\n    .literal .LC1015, 0x00000000, 0x400c0000     &lt;- 3.5\n_Z8Exampleddd:\n    addi    sp, sp, -32 #,,\n    s32i.n  a0, sp, 28  #,\n    s32i.n  a12, sp, 24 #,\n    s32i.n  a13, sp, 20 #,\n    s32i.n  a14, sp, 16 #,\n    s32i.n  a15, sp, 12 #,\n    mov.n   a14, a4 #,\n    mov.n   a15, a5 #,\n    call0   sin #\n    l32r    a4, .LC1014 #,\n    l32r    a5, .LC1014+4   #,\n    mov.n   a12, a2 #,\n    mov.n   a13, a3 #,\n    mov.n   a2, a14 #,\n    mov.n   a3, a15 #,\n    call0   __adddf3    #\n    mov.n   a4, a2  #,\n    mov.n   a5, a3  #,\n    mov.n   a2, a12 #,\n    mov.n   a3, a13 #,\n    call0   __muldf3    #\n    l32r    a4, .LC1015 #,\n    l32r    a5, .LC1015+4   #,\n    call0   __subdf3    #\n    l32i.n  a0, sp, 28  #,\n    l32i.n  a12, sp, 24 #,\n    l32i.n  a13, sp, 20 #,\n    l32i.n  a14, sp, 16 #,\n    l32i.n  a15, sp, 12 #,\n    addi    sp, sp, 32  #,,\n    ret.n\n</code></pre> <p>As you can see the <code>double</code> needs to move many more registers around. Examplef (float) is 84 bytes, Exampled (double) is 119 bytes (+42% code size). Actually it's even worse, <code>sin</code> is larger than float version <code>sinf</code>.</p> <p>Also, never forget to explicitly tag literals as float: always put <code>1.5f</code> and not <code>1.5</code>. Let's see the impact:</p> <pre><code>float Examplef2(float a, float b) {\n  return sinf(a) * (b + 0.4) - 3.5;    // same as above with double literals\n}\n</code></pre> <p>Assembly:</p> <pre><code>    .literal .LC1014, 0x9999999a, 0x3fd99999\n    .literal .LC1015, 0x00000000, 0x400c0000\n    .align  4\n    .global _Z9Examplef2ff\n    .type   _Z9Examplef2ff, @function\n_Z9Examplef2ff:\n    addi    sp, sp, -16 #,,\n    s32i.n  a0, sp, 12  #,\n    s32i.n  a12, sp, 8  #,\n    s32i.n  a13, sp, 4  #,\n    s32i.n  a14, sp, 0  #,\n    mov.n   a14, a3 # b, b\n    call0   sinf    #\n    call0   __extendsfdf2   #        &lt;- extend float to double\n    mov.n   a12, a2 #,\n    mov.n   a2, a14 #, b\n    mov.n   a13, a3 #,\n    call0   __extendsfdf2   #        &lt;- extend float to double\n    l32r    a4, .LC1014 #,\n    l32r    a5, .LC1014+4   #,\n    call0   __adddf3    #        &lt;- add double\n    mov.n   a4, a2  #,\n    mov.n   a5, a3  #,\n    mov.n   a2, a12 #,\n    mov.n   a3, a13 #,\n    call0   __muldf3    #        &lt;- multiply double\n    l32r    a4, .LC1015 #,\n    l32r    a5, .LC1015+4   #,\n    call0   __subdf3    #        &lt;- subtract double\n    call0   __truncdfsf2    #        &lt;- truncate double to float\n    l32i.n  a0, sp, 12  #,\n    l32i.n  a12, sp, 8  #,\n    l32i.n  a13, sp, 4  #,\n    l32i.n  a14, sp, 0  #,\n    addi    sp, sp, 16  #,,\n    ret.n\n</code></pre> <p>The last example takes 143 bytes, which is even worse than the <code>double</code> version, because of conversions from <code>float</code> to <code>double</code> and back. Internally, if you don't force <code>float</code> literals, gcc will make all intermediate compute in <code>double</code> and convert to <code>float</code> in the end. This is usually what is wanted: compute with maximum precision and truncate at the last moment. But for ESP8266 we want the opposite: most compact code.</p>"},{"location":"Sensor-API/#string-concatenation","title":"String concatenation","text":"<p>Let's start with an easy example:</p> <pre><code>void ExampleStringConcat(String &amp;s) {\n  s += \"suffix\";\n}\n</code></pre> <p>Assembly (25 bytes):</p> <pre><code>.LC1024:\n    .string \"suffix\"\n    .literal .LC1025, .LC1024\n_Z19ExampleStringConcatR6String:\n    l32r    a3, .LC1025 #,\n    addi    sp, sp, -16 #,,\n    s32i.n  a0, sp, 12  #,\n    call0   _ZN6String6concatEPKc   #\n    l32i.n  a0, sp, 12  #,\n    addi    sp, sp, 16  #,,\n    ret.n\n</code></pre> <p>If you need to add more complex strings, do not concatenate using native c++ concat:</p> <pre><code>void ExampleStringConcat2(String &amp;s, uint8_t a, uint8_t b) {\n  s += \"[\" + String(a) + \",\" + String(b) + \"]\";\n}\n</code></pre> <p>Assembly (122 bytes!):</p> <pre><code>.LC231:\n    .string \",\"\n.LC1026:\n    .string \"[\"\n.LC1029:\n    .string \"]\"\n    .literal .LC1027, .LC1026\n    .literal .LC1028, .LC231\n    .literal .LC1030, .LC1029\n_Z20ExampleStringConcat2R6Stringhh:\n    addi    sp, sp, -64 #,,\n    s32i.n  a13, sp, 52 #,\n    extui   a13, a3, 0, 8   # a, a\n    l32r    a3, .LC1027 #,\n    s32i.n  a12, sp, 56 #,\n    mov.n   a12, a2 # s, s\n    addi.n  a2, sp, 12  #,,\n    s32i.n  a0, sp, 60  #,\n    s32i.n  a14, sp, 48 #,\n    extui   a14, a4, 0, 8   # b, b\n    call0   _ZN6StringC2EPKc    # .    &lt;- allocate String\n    movi.n  a4, 0xa #,\n    addi    a2, sp, 24  #,,\n    mov.n   a3, a13 #, a\n    call0   _ZN6StringC1Ehh #              &lt;- allocate String\n    addi    a3, sp, 24  #,,\n    addi.n  a2, sp, 12  #,,\n    call0   _ZplRK15StringSumHelperRK6String    #\n    l32r    a3, .LC1028 #,\n    call0   _ZplRK15StringSumHelperPKc  #\n    movi.n  a4, 0xa #,\n    mov.n   a13, a2 # D.171315,\n    mov.n   a3, a14 #, b\n    mov.n   a2, sp  #,\n    call0   _ZN6StringC1Ehh #              &lt;- allocate String\n    mov.n   a3, sp  #,\n    mov.n   a2, a13 #, D.171315\n    call0   _ZplRK15StringSumHelperRK6String    #\n    l32r    a3, .LC1030 #,\n    call0   _ZplRK15StringSumHelperPKc  #\n    mov.n   a3, a2  # D.171315,\n    mov.n   a2, a12 #, s\n    call0   _ZN6String6concatERKS_  #\n    mov.n   a2, sp  #,\n    call0   _ZN6StringD1Ev  #              &lt;- destructor\n    addi    a2, sp, 24  #,,\n    call0   _ZN6StringD1Ev  #              &lt;- destructor\n    addi.n  a2, sp, 12  #,,\n    call0   _ZN6StringD2Ev  #          &lt;- destructor\n    l32i.n  a0, sp, 60  #,\n    l32i.n  a12, sp, 56 #,\n    l32i.n  a13, sp, 52 #,\n    l32i.n  a14, sp, 48 #,\n    addi    sp, sp, 64  #,,\n    ret.n\n</code></pre> <p>Instead use native <code>String</code> concat:</p> <pre><code>void ExampleStringConcat3(String &amp;s, uint8_t a, uint8_t b) {\n  s += \"[\";\n  s += a;\n  s += \",\";\n  s += b;\n  s += \"]\";\n}\n</code></pre> <p>Assembly (69 bytes, -43%):</p> <pre><code>.LC231:\n    .string \",\"\n.LC1026:\n    .string \"[\"\n.LC1029:\n    .string \"]\"\n    .literal .LC1031, .LC1026\n    .literal .LC1032, .LC231\n    .literal .LC1033, .LC1029\n_Z20ExampleStringConcat3R6Stringhh:\n    addi    sp, sp, -16 #,,\n    s32i.n  a13, sp, 4  #,\n    extui   a13, a3, 0, 8   # a, a\n    l32r    a3, .LC1031 #,\n    s32i.n  a0, sp, 12  #,\n    s32i.n  a12, sp, 8  #,\n    s32i.n  a14, sp, 0  #,\n    mov.n   a12, a2 # s, s\n    extui   a14, a4, 0, 8   # b, b\n    call0   _ZN6String6concatEPKc   #       &lt;- native char* add\n    mov.n   a3, a13 #, a\n    mov.n   a2, a12 #, s\n    call0   _ZN6String6concatEh #       &lt;- native int add\n    l32r    a3, .LC1032 #,\n    mov.n   a2, a12 #, s\n    call0   _ZN6String6concatEPKc   #       &lt;- native char* add\n    mov.n   a3, a14 #, b\n    mov.n   a2, a12 #, s\n    call0   _ZN6String6concatEh #       &lt;- native int add\n    l32r    a3, .LC1033 #,\n    mov.n   a2, a12 #, s\n    call0   _ZN6String6concatEPKc   #       &lt;- native char* add\n    l32i.n  a0, sp, 12  #,\n    l32i.n  a12, sp, 8  #,\n    l32i.n  a13, sp, 4  #,\n    l32i.n  a14, sp, 0  #,\n    addi    sp, sp, 16  #,,\n    ret.n\n</code></pre>"},{"location":"Sensor-API/#extension-to-vsnprintf","title":"Extension to <code>(v)snprintf()</code>","text":"<p>Tasmota code uses extensively <code>snprintf()</code> to build Web UI, MQTT messages and logs.</p> <p>However there are some limitations. First we use a stripped down version of <code>(v)snprintf()</code> to save a big amount of code size; and types like <code>float</code> or <code>uint64</code> or not supported. Second Arduino core often uses high level objects like <code>IPAddress</code> that are not natively supported by <code>snprintf()</code>.</p> <p>GCC libc normally includes a way to extend <code>printf</code> to new data types, but again the reduced lib in Arduino does not provide such a standard extension mechanism.</p> <p>We have now build an extension mechanism to <code>snprintf()</code> to allow for simpler code and less flash space.</p>"},{"location":"Sensor-API/#how-to-use","title":"How to use","text":"<p>All extensions are using <code>%_&lt;x&gt;</code> where <code>&lt;x&gt;</code> is one of the following:</p> <p>Warning: most high-level values must be passed by address</p> <ul> <li><code>%_X</code>: support for <code>uint64_t</code>.</li> </ul> <p>Example:</p> <pre><code>uint64_t u64 = 0x1122334455667788LL;\next_snprintf(PSTR(\"Int64 = 0x%_X\"), &amp;u64);\n</code></pre> <ul> <li><code>%_I</code>: support for IPv4 ip address in the form of <code>uint32_t</code>. Note: it is passed by value, not by address.</li> </ul> <p>Example:</p> <pre><code>uint32_t ip = 0x10203040;\next_snprintf(PSTR(\"IP = 0x%_I\"), ip);\n</code></pre> <ul> <li><code>%_f</code> or <code>%*_f</code> or <code>%&lt;number&gt;_f</code>: support for <code>float</code>. Note: <code>float</code> must be passed by address (otherwise it is silently converted to double and creates alignment issues on the stack).</li> </ul> <p>When using <code>%*_f</code>, the first argument specifies the number <code>d</code> of decimal for the <code>float</code>, as a signed int. <code>d</code> can also be directly coded in the format ex: <code>%2_f</code> of <code>%-2_f</code>.</p> <p>If <code>d &gt; 0</code> we output exactly <code>d</code> decimals (even zeros), if <code>d &lt; 0</code> we output <code>d</code> decimals but remove any trailing zeros. Default value is <code>-2</code> (2 decimals).</p> <p>Example:</p> <pre><code>char s[128];\nfloat fl = 3.14;\next_snprintf(s, sizeof(s), PSTR(\"f1=%*_f f2=%*_f f3=%4_f f4=%-4_f\"), 4, &amp;fl, -4, &amp;fl, &amp;fl, &amp;fl);\n// outputs:\n// \"f1=3.1400 f2=3.14 f3=3.1400 f4=3.14\"\n</code></pre> <ul> <li><code>%*_H</code>: prints an array of bytes as Hex (uppercase). The first argument is the length in bytes of the array (if zero or negative, it outputs an empty string). The second argument is the pointer to the array of bytes. The pointer can be null if the length is zero or negative. The pointer can be in PROGMEM. Note: <code>%_H</code> will output an empty string because it is missing the length.</li> </ul> <p>Example:</p> <pre><code>char s[16];\nconst uint8_t b[] PROGMEM = { 0x00, 0x01, 0x80, 0xFF };\next_snprintf(s, sizeof(s), PSTR(\"Hex=%*_H\"), sizeof(b), b);\n// outputs:\n// \"Hex=000180FF\"\n</code></pre> <ul> <li><code>%_B</code>: this is equivalent to <code>%*_H</code> but directly takes an <code>SBuffer()</code> object.</li> </ul> <p>Example:</p> <pre><code>char s[16];\nSBuffer b(8);    // statically allocate 8 bytes\nb.add8(0x5A);\nb.add8(0xA5);\n\next_snprintf(s, sizeof(s), PSTR(\"Hex=%_B\"), &amp;b);\n// outputs:\n// \"Hex=5AA5\"\n</code></pre>"},{"location":"Sensor-API/#code-size-reduction","title":"Code size reduction","text":""},{"location":"Sensor-API/#floats","title":"Floats","text":"<p>It is not needed to call explicitly <code>dtostrfd()</code> anymore:</p> <p>Before:</p> <pre><code>int ResponseAppendTHD(float f_temperature, float f_humidity)\n{\n  char temperature[FLOATSZ];\n  dtostrfd(f_temperature, Settings.flag2.temperature_resolution, temperature);\n  char humidity[FLOATSZ];\n  dtostrfd(f_humidity, Settings.flag2.humidity_resolution, humidity);\n  char dewpoint[FLOATSZ];\n  dtostrfd(CalcTempHumToDew(f_temperature, f_humidity), Settings.flag2.temperature_resolution, dewpoint);\n\n  return ResponseAppend_P(PSTR(\"\\\"\" D_JSON_TEMPERATURE \"\\\":%s,\\\"\" D_JSON_HUMIDITY \"\\\":%s,\\\"\" D_JSON_DEWPOINT \"\\\":%s\"), temperature, humidity, dewpoint);\n}\n</code></pre> <p>Assembly (117 bytes):</p> <pre><code>_Z17ResponseAppendTHDff:\n    addi    sp, sp, -64 #,,\n    s32i.n  a0, sp, 60  #,\n    s32i.n  a12, sp, 56 #,\n    s32i.n  a13, sp, 52 #,\n    s32i.n  a14, sp, 48 #,\n    mov.n   a13, a3 # f_humidity, f_humidity\n    mov.n   a14, a2 # f_temperature, f_temperature\n    call0   __extendsfdf2   #\n    l32r    a12, .LC658 #, tmp57\n    addi    a5, sp, 32  #,,\n    addmi   a12, a12, 0x500 # tmp60, tmp57,\n    l32i    a4, a12, 188    # Settings, Settings\n    extui   a4, a4, 30, 2   #, Settings,\n    call0   _Z8dtostrfddhPc #\n    mov.n   a2, a13 #, f_humidity\n    call0   __extendsfdf2   #\n    l32i    a4, a12, 188    # Settings, Settings\n    addi    a5, sp, 16  #,,\n    extui   a4, a4, 28, 2   #, Settings,,\n    call0   _Z8dtostrfddhPc #\n    mov.n   a3, a13 #, f_humidity\n    mov.n   a2, a14 #, f_temperature\n    call0   _Z16CalcTempHumToDewff  #\n    call0   __extendsfdf2   #\n    l32i    a4, a12, 188    # Settings, Settings\n    mov.n   a5, sp  #,\n    extui   a4, a4, 30, 2   #, Settings,\n    call0   _Z8dtostrfddhPc #\n    l32r    a2, .LC659  #,\n    addi    a3, sp, 32  #,,\n    addi    a4, sp, 16  #,,\n    mov.n   a5, sp  #,\n    call0   _Z16ResponseAppend_PPKcz    #\n    l32i.n  a0, sp, 60  #,\n    l32i.n  a12, sp, 56 #,\n    l32i.n  a13, sp, 52 #,\n    l32i.n  a14, sp, 48 #,\n    addi    sp, sp, 64  #,,\n    ret.n\n</code></pre> <p>After:</p> <pre><code>int ResponseAppendTHD(float f_temperature, float f_humidity)\n{\n  float dewpoint = CalcTempHumToDew(f_temperature, f_humidity);\n\n  return ResponseAppend_P(PSTR(\"\\\"\" D_JSON_TEMPERATURE \"\\\":%*_f,\\\"\" D_JSON_HUMIDITY \"\\\":%*_f,\\\"\" D_JSON_DEWPOINT \"\\\":%*_f\"),\n                          Settings.flag2.temperature_resolution, &amp;f_temperature,\n                          Settings.flag2.humidity_resolution, &amp;f_humidity,\n                          Settings.flag2.temperature_resolution, &amp;dewpoint);\n}\n</code></pre> <p>Assembly (61 bytes):</p> <pre><code>_Z17ResponseAppendTHDff:\n    addi    sp, sp, -64 #,,\n    s32i.n  a0, sp, 60  #,\n    s32i.n  a3, sp, 36  # f_humidity, f_humidity\n    s32i.n  a2, sp, 32  # f_temperature, f_temperature\n    call0   _Z16CalcTempHumToDewff  #\n    s32i.n  a2, sp, 16  # dewpoint,\n    l32r    a2, .LC658  #, tmp51\n    addi    a4, sp, 32  #,,\n    addmi   a2, a2, 0x500   # tmp54, tmp51,\n    l32i    a5, a2, 188 # Settings, Settings\n    addi    a2, sp, 16  # tmp68,,\n    extui   a7, a5, 30, 2   # D.156427, Settings,\n    s32i.n  a2, sp, 0   #, tmp68\n    l32r    a2, .LC659  #,\n    addi    a6, sp, 36  #,,\n    mov.n   a3, a7  #, D.156427\n    extui   a5, a5, 28, 2   #, Settings,,\n    call0   _Z16ResponseAppend_PPKcz    #\n    l32i.n  a0, sp, 60  #,\n    addi    sp, sp, 64  #,,\n    ret.n\n</code></pre>"},{"location":"Serial-to-TCP-Bridge/","title":"Serial to TCP Bridge","text":"This feature is included only in <code>tasmota-zbbridge</code> and <code>tasmota-zbbrdgpro</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_TCP_BRIDGE \n#define USE_TCP_BRIDGE          //  Add support for Serial to TCP bridge (+1.3k code)\n#endif\n</code></pre></p> <p>Connect to a serial device over the network, also known as ser2net</p> <p>This feature can be used to add a \"serial to network\" functionality to a device that is otherwise serial only. You connect the device to a ESP8266/ESP32 and Tasmota will bridge between serial and network.</p> <p>This is commonly used with a CCxxxx Zigbee based module to connect it to a remote ZHA or zigbee2mqtt instance.</p>"},{"location":"Serial-to-TCP-Bridge/#commands","title":"Commands","text":"<ul> <li><code>TCPBaudRate &lt;x&gt;</code>: sets the baud rate for serial (only 8N1 mode), min <code>1200</code>, max <code>115200</code> by 1200 increments.</li> <li><code>TCPStart &lt;port&gt;</code>: listens to port <code>&lt;port&gt;</code>. This features supports 2 parallel TCP connections, which can be useful if you need a terminal + a specific protocol (like XMODEM). The 3rd connection will disconnect a previous connection. The number of parallel connections is a compile-time option. Note that this can be accessed by any host on the network and may have security implications.</li> <li><code>TCPStart &lt;port&gt;,&lt;ip address&gt;</code>: listens to port <code>&lt;port&gt;</code>, but only allows connections from the provided IPv4 address. Any connections from a different host will be immediately closed.</li> <li><code>TCPStart 0</code> or <code>TCPStart</code>: shuts down the TCP server and disconnects any existing connection(s).</li> </ul> <p>For security reasons, the TCP bridge is not started at boot, and requires an explicit TCPStart command (this can be automated with Rules).</p>"},{"location":"Serial-to-TCP-Bridge/#configuration","title":"Configuration","text":"<p>First assign two GPIOs to <code>TCP Tx (208)</code> and <code>TCP Rx (209)</code> types in the \"Configure Module\" page. The Rx/Tx are relative to the ESP device. For example with ESP01's hardware serial, set GPIO1 as TCP Tx and GPIO3 as TCP Rx.</p> <p>Then set baud rate with <code>TCPBaudRate</code> and port with <code>TCPStart</code>.</p> <p>You can add a rule to start the TCP server at boot. To do this for port <code>8888</code> and allow connections only from host <code>192.168.0.10</code>, run <code>Rule1 ON System#Boot do TCPStart 8888,192.168.0.10 endon</code> then enable with <code>Rule1 1</code> and restart the device.</p>"},{"location":"Serial-to-TCP-Bridge/#additional-resources","title":"Additional resources","text":"<p>PR Sonoff ZBBridge reference</p>"},{"location":"SetOption37/","title":"SetOption37","text":"<p>SetOption37 is used for re-mapping the RGBW<sub>c</sub>W<sub>w</sub> channels. This transformation happens right before the hardware-specific output, so all the advanced features (schemes, hsb setting, etc.) works with the original, un-mapped values.</p> <p>The main reason for this option is to provide support for bulbs whose physical wiring is almost the usual/standard one, but the channels are arranged in a different way.</p> <p>For technical reasons this transformation isn't a full N-to-N mapping, it can only the re-arrange the channels, which is equivalent to map the (R,G,B,W<sub>c</sub>,W<sub>w</sub>) channels to one of their permutations.</p> <p>The required permutation can be configured via <code>SetOption37 n</code>, where <code>n</code> is the systematic index of the permutation, a number from the [0 .. 119] interval, from 0=(R,G,B,W<sub>c</sub>,W<sub>w</sub>) to 119=(W<sub>w</sub>,W<sub>c</sub>,B,G,R):</p> Idx Perm. Idx Perm. Idx Perm. Idx Perm. 0 R,G,B,W<sub>c</sub>,W<sub>w</sub> 1 R,G,B,W<sub>w</sub>,W<sub>c</sub> 2 R,G,W<sub>c</sub>,B,W<sub>w</sub> 3 R,G,W<sub>c</sub>,W<sub>w</sub>,B 4 R,G,W<sub>w</sub>,B,W<sub>c</sub> 5 R,G,W<sub>w</sub>,W<sub>c</sub>,B 6 R,B,G,W<sub>c</sub>,W<sub>w</sub> 7 R,B,G,W<sub>w</sub>,W<sub>c</sub> 8 R,B,W<sub>c</sub>,G,W<sub>w</sub> 9 R,B,W<sub>c</sub>,W<sub>w</sub>,G 10 R,B,W<sub>w</sub>,G,W<sub>c</sub> 11 R,B,W<sub>w</sub>,W<sub>c</sub>,G 12 R,W<sub>c</sub>,G,B,W<sub>w</sub> 13 R,W<sub>c</sub>,G,W<sub>w</sub>,B 14 R,W<sub>c</sub>,B,G,W<sub>w</sub> 15 R,W<sub>c</sub>,B,W<sub>w</sub>,G 16 R,W<sub>c</sub>,W<sub>w</sub>,G,B 17 R,W<sub>c</sub>,W<sub>w</sub>,B,G 18 R,W<sub>w</sub>,G,B,W<sub>c</sub> 19 R,W<sub>w</sub>,G,W<sub>c</sub>,B 20 R,W<sub>w</sub>,B,G,W<sub>c</sub> 21 R,W<sub>w</sub>,B,W<sub>c</sub>,G 22 R,W<sub>w</sub>,W<sub>c</sub>,G,B 23 R,W<sub>w</sub>,W<sub>c</sub>,B,G 24 G,R,B,W<sub>c</sub>,W<sub>w</sub> 25 G,R,B,W<sub>w</sub>,W<sub>c</sub> 26 G,R,W<sub>c</sub>,B,W<sub>w</sub> 27 G,R,W<sub>c</sub>,W<sub>w</sub>,B 28 G,R,W<sub>w</sub>,B,W<sub>c</sub> 29 G,R,W<sub>w</sub>,W<sub>c</sub>,B 30 G,B,R,W<sub>c</sub>,W<sub>w</sub> 31 G,B,R,W<sub>w</sub>,W<sub>c</sub> 32 G,B,W<sub>c</sub>,R,W<sub>w</sub> 33 G,B,W<sub>c</sub>,W<sub>w</sub>,R 34 G,B,W<sub>w</sub>,R,W<sub>c</sub> 35 G,B,W<sub>w</sub>,W<sub>c</sub>,R 36 G,W<sub>c</sub>,R,B,W<sub>w</sub> 37 G,W<sub>c</sub>,R,W<sub>w</sub>,B 38 G,W<sub>c</sub>,B,R,W<sub>w</sub> 39 G,W<sub>c</sub>,B,W<sub>w</sub>,R 40 G,W<sub>c</sub>,W<sub>w</sub>,R,B 41 G,W<sub>c</sub>,W<sub>w</sub>,B,R 42 G,W<sub>w</sub>,R,B,W<sub>c</sub> 43 G,W<sub>w</sub>,R,W<sub>c</sub>,B 44 G,W<sub>w</sub>,B,R,W<sub>c</sub> 45 G,W<sub>w</sub>,B,W<sub>c</sub>,R 46 G,W<sub>w</sub>,W<sub>c</sub>,R,B 47 G,W<sub>w</sub>,W<sub>c</sub>,B,R 48 B,R,G,W<sub>c</sub>,W<sub>w</sub> 49 B,R,G,W<sub>w</sub>,W<sub>c</sub> 50 B,R,W<sub>c</sub>,G,W<sub>w</sub> 51 B,R,W<sub>c</sub>,W<sub>w</sub>,G 52 B,R,W<sub>w</sub>,G,W<sub>c</sub> 53 B,R,W<sub>w</sub>,W<sub>c</sub>,G 54 B,G,R,W<sub>c</sub>,W<sub>w</sub> 55 B,G,R,W<sub>w</sub>,W<sub>c</sub> 56 B,G,W<sub>c</sub>,R,W<sub>w</sub> 57 B,G,W<sub>c</sub>,W<sub>w</sub>,R 58 B,G,W<sub>w</sub>,R,W<sub>c</sub> 59 B,G,W<sub>w</sub>,W<sub>c</sub>,R 60 B,W<sub>c</sub>,R,G,W<sub>w</sub> 61 B,W<sub>c</sub>,R,W<sub>w</sub>,G 62 B,W<sub>c</sub>,G,R,W<sub>w</sub> 63 B,W<sub>c</sub>,G,W<sub>w</sub>,R 64 B,W<sub>c</sub>,W<sub>w</sub>,R,G 65 B,W<sub>c</sub>,W<sub>w</sub>,G,R 66 B,W<sub>w</sub>,R,G,W<sub>c</sub> 67 B,W<sub>w</sub>,R,W<sub>c</sub>,G 68 B,W<sub>w</sub>,G,R,W<sub>c</sub> 69 B,W<sub>w</sub>,G,W<sub>c</sub>,R 70 B,W<sub>w</sub>,W<sub>c</sub>,R,G 71 B,W<sub>w</sub>,W<sub>c</sub>,G,R 72 W<sub>c</sub>,R,G,B,W<sub>w</sub> 73 W<sub>c</sub>,R,G,W<sub>w</sub>,B 74 W<sub>c</sub>,R,B,G,W<sub>w</sub> 75 W<sub>c</sub>,R,B,W<sub>w</sub>,G 76 W<sub>c</sub>,R,W<sub>w</sub>,G,B 77 W<sub>c</sub>,R,W<sub>w</sub>,B,G 78 W<sub>c</sub>,G,R,B,W<sub>w</sub> 79 W<sub>c</sub>,G,R,W<sub>w</sub>,B 80 W<sub>c</sub>,G,B,R,W<sub>w</sub> 81 W<sub>c</sub>,G,B,W<sub>w</sub>,R 82 W<sub>c</sub>,G,W<sub>w</sub>,R,B 83 W<sub>c</sub>,G,W<sub>w</sub>,B,R 84 W<sub>c</sub>,B,R,G,W<sub>w</sub> 85 W<sub>c</sub>,B,R,W<sub>w</sub>,G 86 W<sub>c</sub>,B,G,R,W<sub>w</sub> 87 W<sub>c</sub>,B,G,W<sub>w</sub>,R 88 W<sub>c</sub>,B,W<sub>w</sub>,R,G 89 W<sub>c</sub>,B,W<sub>w</sub>,G,R 90 W<sub>c</sub>,W<sub>w</sub>,R,G,B 91 W<sub>c</sub>,W<sub>w</sub>,R,B,G 92 W<sub>c</sub>,W<sub>w</sub>,G,R,B 93 W<sub>c</sub>,W<sub>w</sub>,G,B,R 94 W<sub>c</sub>,W<sub>w</sub>,B,R,G 95 W<sub>c</sub>,W<sub>w</sub>,B,G,R 96 W<sub>w</sub>,R,G,B,W<sub>c</sub> 97 W<sub>w</sub>,R,G,W<sub>c</sub>,B 98 W<sub>w</sub>,R,B,G,W<sub>c</sub> 99 W<sub>w</sub>,R,B,W<sub>c</sub>,G 100 W<sub>w</sub>,R,W<sub>c</sub>,G,B 101 W<sub>w</sub>,R,W<sub>c</sub>,B,G 102 W<sub>w</sub>,G,R,B,W<sub>c</sub> 103 W<sub>w</sub>,G,R,W<sub>c</sub>,B 104 W<sub>w</sub>,G,B,R,W<sub>c</sub> 105 W<sub>w</sub>,G,B,W<sub>c</sub>,R 106 W<sub>w</sub>,G,W<sub>c</sub>,R,B 107 W<sub>w</sub>,G,W<sub>c</sub>,B,R 108 W<sub>w</sub>,B,R,G,W<sub>c</sub> 109 W<sub>w</sub>,B,R,W<sub>c</sub>,G 110 W<sub>w</sub>,B,G,R,W<sub>c</sub> 111 W<sub>w</sub>,B,G,W<sub>c</sub>,R 112 W<sub>w</sub>,B,W<sub>c</sub>,R,G 113 W<sub>w</sub>,B,W<sub>c</sub>,G,R 114 W<sub>w</sub>,W<sub>c</sub>,R,G,B 115 W<sub>w</sub>,W<sub>c</sub>,R,B,G 116 W<sub>w</sub>,W<sub>c</sub>,G,R,B 117 W<sub>w</sub>,W<sub>c</sub>,G,B,R 118 W<sub>w</sub>,W<sub>c</sub>,B,R,G 119 W<sub>w</sub>,W<sub>c</sub>,B,G,R <p>Source: this spreadsheet</p>"},{"location":"Smart-Meter-Interface/","title":"Smart Meter Interface","text":"<p>"},{"location":"Smart-Meter-Interface/#smart-meter-interface","title":"Smart Meter Interface","text":"<p>This driver extracts selected values from Smart Meters over various protocols, filters and publishes them to MQTT as regular sensors.</p> <p>This feature is not included in precompiled binaries</p> <p>Based on Tasmota's scripting language. To use it you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_SCRIPT\n#define USE_SCRIPT\n#endif\n#ifndef USE_SML_M\n#define USE_SML_M\n#endif\n#ifdef USE_RULES\n#undef USE_RULES\n#endif\n</code></pre> <p>Additional features can be enabled by adding the following <code>#define</code> compiler directive parameters and then compiling the firmware. These parameters are explained further below in the article. Most features are now enabled by default, others may be set in the descriptor per meter.  </p> Feature Description SML_BSIZ n (default 48) Maximum number of characters per line in serial input buffer. Complete chunk of serial data must fit into this size, so include any CR/LF if that applies. can now be defined per meter in descriptor, see special options MAX_METERS n (default 5) Maximum number of meters. Decrease this to 1 for example if you have a meter with many lines and lots of characters per descriptor line. TMSBSIZ n (default 256) Maximum number of characters in serial IRQ buffer (should always be larger than SML_BSIZ and even larger on high baud rates).can now be defined per meter in descriptor, see special options SML_DUMP_SIZE n (default 128) Maximum number of characters per line in dump mode. Only use if you have long strings comin in and they truncate. SML_PREFIX_SIZE n (default 8) Maximum number of characters + 1 for SML jsonPrefix. USE_ESP32_SW_SERIAL enables additional software serial channels for ESP32, (receive only), define pin with '-' sign to assign to software serial NO_USE_SML_SPECOPT disables special decoder entry to specify direction bit for some SML meters NO_USE_SML_SCRIPT_CMD disables some special SML script cmds and allows access to sml vars in other parts of the script. Is needed by some of the examples below. NO_SML_REPLACE_VARS disables replacement of any text in descriptor by script text variables. Useful if several occurrences of a text occupies a lot of space and you get short of script buffer. Readability may get worse so only makes sense on large descriptors. Note: to use <code>%</code> symbol un measurement units, you need to escape it like <code>%%</code>. NO_USE_SML_DECRYPT disables decoding of encrypted ams meters. decrypting needs TLS, so must define USE_TLS also. USE_SML_AUTHKEY enables authentication, this is not needed by most energy meters. NO_USE_SML_TCP disables TCP MODBUS support. NO_USE_SML_CANBUS disables CANBUS support. USE_SML_CRC enables CRC support for binary SML. Must still be enabled via line like \"1,=soC,1024,15\". See special options."},{"location":"Smart-Meter-Interface/#general-description","title":"General description","text":"<p>To use this interface, connect the meter to available GPIO pins. These GPIOs must be set as <code>None</code> in Tasmota. If the interface detects that a script driven meter descriptor GPIO conflicts with a Tasmota GPIO setting, the interface will generate a <code>duplicate GPIO defined</code> error in the log and the meter descriptor will be ignored. </p> <p>Note</p> <p>When changing GPIO configurations, especially in conjunction with other Tasmota drivers, a restart may be required.</p> <p>Note</p> <p>On an ESP32, due to a different implementation, serial ports may not be used in conjunction with other Tasmota serial devices.  </p> <p>Note</p> <p>when using bidirectional serial IO (receive and transmit), hardware serial is recommended.</p> <p>The Smart Meter Interface provides a means to connect many kinds of meters to Tasmota. The following types of meter protocols are supported:</p> Protocol Description OBIS ASCII telegrams emitted from many smart meters, including P1 Smart Meters OBIS Binary SML telegrams emitted from many smart meters MODBus Binary telegrams used by many power meters and industrial devices (serial and TCP master and slave) CANBus Binary telegrams used by battery monitoring systems and industrial devices Kamstrup Binary telegrams used by many power meters from Kamstrup EBus Binary telegrams emitted by many heaters and heat pumps  (e.g. Vaillant, Wolf) VBus Binary telegrams emitted by many solar thermal systems boilers (e.g. Resol, Viessmann) RAW Binary decodes all kinds of binary data eg EMS heater bus Counter interface uses Tasmota counter storage (for e.g. REED contacts either in polling or IRQ mode) <p>There are many different meters that use the same protocol. There are multitudes of variants and use cases. This interface provides a means of specifying these definitions through meter descriptors. This method uses the scripting language editor to define the descriptors. In this way, only one firmware binary version is required and a modification can be made easily on the fly.  </p> <p>For meters that follow the German 'Basisz\u00e4hler' standard, which is often referenced in their manuals as \"Lastenheft Basisz\u00e4hler Funktionale Merkmale\", the SML OBIS codes for the datapoints can be found in this central VDE document from page 41 onwards. Please note that not all meters emit all of these datapoints, especially the per-phase information is sometimes omitted. Total consumption, feed and momentary power should always be available though.</p> <p>Note</p> <p>Additional hardware may be required to read certain measuring devices. For example: RS485toTTL adapter for Modbus, IR transistor for electricity meters. Sometimes an additional IR diode and resistors.  </p> <p>By default, a SENSOR telegram is sent to MQTT every 300 seconds. This can be adjusted by changing the TelePeriod.</p>"},{"location":"Smart-Meter-Interface/#descriptor-syntax","title":"Descriptor Syntax","text":"<p>This section must be present, even if it's empty. If compiled with <code>SML_REPLACE_VARS</code>, here is the place where text variables can be defined for the script:</p> <p><code>&gt;D</code> </p> <p>Declare <code>&gt;B</code> (boot) section to inform the interface to read the meter descriptor(s):</p> <p><code>&gt;B</code> =&gt;sensor53 r</p> <p>(Optional) declare <code>&gt;S</code> section with additional scripting commands:</p> <p><code>&gt;S &lt;n&gt;</code></p> <p>Declare <code>&gt;M</code> section with the number of connected meters (n = <code>1..5</code>):</p> <p><code>&gt;M &lt;n&gt;</code> </p> <p>Note</p> <p>If no <code>&gt;M</code> section is found in the script or if the scripting language is not compiled, the driver reverts to the default hardcoded <code>#define</code> definitions. If no meter script is defined, the default hardcoded descriptor interface (deprecated) uses <code>RX GPIO3</code> for receiving data and thus may interfere with other Tasmota Definitions without warning. </p> <p>Note</p> <p>Software serial only supports 8N1 serial format. Must use hardware serial for e.g. 8E1!  </p>"},{"location":"Smart-Meter-Interface/#meter-definition","title":"Meter Definition","text":"<p><code>+&lt;M&gt;,&lt;rxGPIO&gt;,&lt;type&gt;,&lt;flag&gt;,&lt;parameter&gt;,&lt;jsonPrefix&gt;{,&lt;txGPIO&gt;,&lt;txPeriod&gt;,&lt;cmdTelegram&gt;}</code> </p> Parameter Description <code>+&lt;M&gt;</code> Meter number. The number must be increased with each additional Meter (default 1 to 5). <code>&lt;rxGPIO&gt;</code> The GPIO pin number where meter data is received.  [xxx.xxx.xxx.xxx] IP number instead of pin number enables MODBUS TCP mode, the tcp port number is given at the baudrate position. (tx pin can be any number and is ignored) <code>&lt;type&gt;</code> The type of meter: - <code>o</code> - OBIS ASCII type of coding- <code>s</code> - SML binary smart message coding- <code>e</code> - EBus binary coding- <code>v</code> - VBus binary coding- <code>m</code> - MODBus binary coding with serial mode 8N1- <code>M</code> - MODBus binary coding with serial mode 8E1- <code>k</code> - Kamstrup binary coding with serial mode 8N1- <code>C</code> - CANBus type- <code>c</code> - Counter type- <code>r</code> - Raw binary coding (any binary telegram) <code>&lt;flag&gt;</code> Options flag:- <code>0</code> - counter without pullup- <code>1</code> - counter with pullup- <code>16</code> - enable median filter for that meter. Can help with sporadic dropouts, reading errors (not available for counters). this option is enabled by default #define USE_SML_MEDIAN_FILTER, if you are low on memory and dont use this feature you may outcomment this define in the driver- <code>32</code> - Disable FastExit for binary SML parsing. See #21497 for details <code>&lt;parameter&gt;</code> Parameters according to meter type:- for <code>o,s,e,v,m,M,k,r</code> types: serial baud rate e.g. <code>9600</code> (or port# for Modbus TCP).- for type <code>C</code> Canbus Baudrates and Number of receive buffers (*100). (see example R4850G2)- 0 = 25 KBITS- 1 = 50 KBITS- 2 = 100 KBITS- 3 = 125 KBITS- 4 = 250 KBITS- 5 = 500 KBITS- 6 = 800 KBITS- 7 = 1 MBITS- for <code>c</code> type: a positive value = counter poll interval (not really recommended) or a negative value = debounce time (milliseconds) for irq driven counters. <code>&lt;jsonPrefix&gt;</code> Prefix for Web UI and MQTT JSON payload. Up to 7 characters. <code>&lt;txGPIO&gt;</code> The GPIO pin number where meter command is transmitted (optional). <code>&lt;tx enable&gt;</code> The GPIO pin number to enable transmitter (RS485) may follow the TX pin in bracket (pin) without a colon an 'i' in front of the pin number means 'inverted' (optional). <code>&lt;txPeriod&gt;</code> Period to repeat the transmission of commands to the meter (optional). Number of 100ms increments (n * 100ms). <code>&lt;cmdTelegram&gt;</code> Comma separated hex coded byte blocks to send to meter device. For MODBus each comma separated block is a command to retrieve a certain register from the meter (optional: only required for measuring devices that have to be triggered with a certain character string). TRX code lines ending with a comma are continued at next line <p>Note</p> <p>for other serial protocols you may specify the exact mode (only for hardware serial) by the following code after the type specifier:  </p> <p>N =no parity E =even parity O =odd parity and number of stop-bits  </p> <p>e.g for Modbus:  mN1,mN2,mE1,mE2,mO1,mO2  </p> <p>Example</p> <pre><code>+1,3,o,0,9600,OBIS1,1,2,2F3F210D0A\n+1,3,o,0,9600,OBIS1,1(i4),2,2F3F210D0A  with pin 4 as inverted TX enable\n+1,3,o,16,115200,NormalTariff,1\n+1,3,s,16,9600,SML1\n+1,12,c,1,-10,H20_Cnt\n+1,3,v,0,9600,Solar\n</code></pre> <p>Example</p> <p>For MODBus: <code>+1,3,m,0,9600,MODBUS,1,1,01040000,01040002,01040004,01040006,01040008,0104000a,0104000c,0104000e,01040010</code>  Components of the character string: <code>...01040000,01040002,...</code> <code>01</code> = Modbus slave device ID <code>04</code> = Instruction to read an Input Register (alternatively, <code>03</code> = Instruction to read a Holding Register) <code>0000</code>/<code>0002</code> = Register # (as Hexadecimal codification, without the prefix <code>0x</code>. Example: <code>0x0079</code> -&gt; <code>0079</code>) the number of requested registers is fixed to 2, however with the char 'r' before the hex string the complete request string may be specified <code>...r010400000001,r010400020003,...</code> Note: <code>ID</code>, <code>Instruction</code> to read the register value (Input vs Holding) and <code>Register#</code> may differ depending on the measuring device.  </p>"},{"location":"Smart-Meter-Interface/#meter-metrics","title":"Meter Metrics","text":"<p>Each meter typically provides multiple metrics (energy, voltage, power, current etc.) which it measures. An entry for each metric to be collected must be specified. An entry defines how to decode the data and put it into variables.</p> <p><code>&lt;M&gt;,&lt;decoder&gt;@&lt;scale&gt;&lt;offs&gt;,&lt;label&gt;,&lt;UoM&gt;,&lt;var&gt;,&lt;precision&gt;</code> </p> Parameter Description <code>&lt;M&gt;</code> The meter number to which this decoder belongs <code>&lt;decoder&gt;</code> Decoding specification: OBIS as ASCII; SML, EBus, VBus, MODBus, RAW as HEX ASCII etc. No space characters allowed in this section! OBIS: ASCII OBIS code terminated with <code>(</code> character which indicates the start of the meter valueCounter: ASCII code 1-0:1.8.0*255 for counter value, code 1-0:1.7.0*255 for pulse rate (e.g. for actual power value) SML: SML binary OBIS as hex terminated with <code>0xFF</code> indicating start of SML encoded valueEBus, MODBus, RAW - hex values of data blocks to compare: - <code>xx</code> = ignore value  (1 byte) or <code>xN</code> = ignore N bytes - <code>ss</code> = extract a signed byte - <code>uu</code> = extract an unsigned byte  - <code>UUuu</code> = extract an unsigned word (high order byte first) - <code>uuUU</code> = extract an unsigned word (low order byte first) - <code>UUuuUUuu</code> or <code>U32</code> = extract an unsigned long word (high order byte first) - <code>uuUUuuUU</code> or <code>u32</code> = extract an unsigned long word (low order byte first) - <code>SSss</code> = extract a signed word (high order byte first) - <code>ssSS</code> = extract a signed word (low order byte first) - <code>SSssSSss</code> or <code>S32</code> = extract a signed long word (high order byte first) - <code>ssSSssSS</code> or <code>s32</code> = extract a signed long word (low order byte first) - on long word values, if a trailing s is added at the end of the mask, word order is reversed- <code>U64</code> = extract an unsigned 64 long word- <code>u64</code> = extract an unsigned 64 long word (low order byte first) - <code>bcdN</code> = extract a binary coded decimal N=2..12 - <code>ffffffff</code> = extract a float value - IEEE754 decode - <code>FFffFFff</code> = extract a reverse float value - IEEE754 decode- <code>kstr</code> = decode KAMSTRUP data- <code>pm(x.y.z)</code> = pattern match(asci obis code)- <code>pm(hHHHHHH)</code> = pattern match(hex obis code)- <code>pm(rHHHHHH)</code> = pattern match(any hex pattern)if using VBus - hex values of data blocks to compare: - <code>AAffffaddrff0001ffff</code> = VBus-specific hex header: <code>AA</code>-sync byte, <code>addr</code>-the reversed address of the device. To find his out first look up the known hex address of the device. E.g. Resol DeltaSol BS Plus is <code>0x4221</code>. Reverse it (without <code>0x</code>) and you will get <code>21 42</code> hex characters. Now turn on raw dump mode using command <code>sensor53 d1</code> and look for rows starting with <code>aa</code>, containing your reversed address at position 4 and 5 and <code>00 01</code> hex characters at position 7 and 8. If found, the entire header will be 10 hex characters long including <code>aa</code> (20 ascii chars without space, e.g. for Resol DeltaSol BS Plus this will be <code>AA100021421000010774</code>). At position 9 you see the number of frames containing readable data. To turn off raw dump use <code>sensor53 d0</code>. - <code>v</code> = VBus protocol indicator - <code>oN</code> = extract data from offset <code>N</code> (see offsets of your device in VBus protocol documentation) - <code>u</code> or <code>s</code> = extract unsigned or signed data - <code>w</code> or <code>b</code> = extract word or byteEnd of decoding: <code>@</code> indicates termination of the decoding procedure.- <code>(</code> following the <code>@</code> character in case of obis decoder indicates to fetch the 2. value in brackets, not the 1. value.  (e.g. to get the second value from an obis like <code>0-1:24.2.3(210117125004W)(01524.450*m3)</code>)- decoding multiple values coming in brackets after each other is possible with <code>(@(0:1</code>, <code>(@(1:1</code>, <code>(@(2:1</code> and so on  (e.g. to get values from an obis like <code>0-0:98.1.0(210201000000W)(000000.000*kWh)(000000.000*kWh)</code>)- <code>s</code> delimiter index colon selects an entry of special obis line (Kamstrup heatmeter) separated by delmiter e.g. <code>s 0:</code> - decoding a 0/1 bit is indicated by a <code>@</code> character followed by <code>bx:</code> (x = <code>0..7</code>) extracting the corresponding bit from a byte. (e.g.: <code>1,xxxx5017xxuu@b0:1,Solarpump,,Solarpump,0</code>)- in case of MODBus/Kamstrup, <code>ix:</code> designates the index (x = <code>0..n</code>) referring to the requested block in the transmit section of the meter definition <code>&lt;scale&gt;</code> scaling factor (divisor) or string definitionThis can be a fraction (e.g., <code>0.1</code> = result * 10), or a negative value. When decoding a string result (e.g. meter serial number), use <code>#</code> character for this parameter (Note: only one string can be decoded per meter!). For OBIS, you need a <code>)</code> termination character after the <code>#</code> character. <code>&lt;offs&gt;</code> optional offset must precede with + or - sign, note: offset is applied before scale! <code>&lt;label&gt;</code> web UI label (max. 23 characters) <code>&lt;UoM&gt;</code> unit of measurement (max. 7 characters) <code>&lt;var&gt;</code> MQTT label (max. 23 characters) <code>&lt;precision&gt;</code> number of decimal places. Add <code>16</code> to transmit the data immediately. Otherwise it is transmitted on <code>TelePeriod</code> only. <p>Use <code>;</code> character to comment lines in the script.</p> <p>Put <code>#</code> character at the end to terminate <code>M</code> section of the script.</p> <p>Example</p> <p>(OBIS/SML/MODBus): <pre><code>1,1-0:1.8.1*255(@1,Total consumption,kWh,Total_in,4`  \n1,77070100010801ff@1000,W1,kWh,w1,4`  \n1,010304UUuuxxxxxxxx@i0:1,Spannung L1,V,Voltage_L1,0`  \n1,0:98.1.0(@(0:1,Havi adat, kWh,havi1,3`\n1,0:98.1.0(@(1:1,Havi adat, kWh,havi2,3`\n1,0:98.1.0(@(2:1,Havi adat, kWh,havi3,3`\n</code></pre></p> <p>OBIS: <code>1,1-0:0.0.0*255(@#),Meter Nr,, Meter_number,0</code></p> <p>Counter: <code>1,1-0:1.8.0*255(@1000,consumption,kWh,Total_in,3)</code> precision of 3, scale for 1000 pulses/kWh <code>1,1-0:1.7.0*255(@0.01667, power,W,Power_actual,0)</code> actual power from pulse rate (in pulses/min) of counter meter, scale for 1 pulse/Wh (1 pulse/min =&gt; 60W; 1/60(=0.01667) (pulses/min)/W)</p> <p>SML: <code>1,77078181c78203ff@#,Service ID,,Meter_id,0</code> <code>1,1-0:1.8.0*255(@1,consumption,kWh,Total_in,4</code> precision of 4, transmitted only on <code>TelePeriod</code> <code>1,1-0:1.8.0*255(@1,consumption,kWh,Total_in,20</code> precision of 4, transmitted immediately (4 + 16 = 20)</p> <p>MODBus: <code>+1,3,M,1,9600,SBC,1,2,01030023,01030028...</code> <code>1,010304UUuuxxxxxxxx@i0:1,Voltage L1,V,Voltage_L1,0</code> the <code>i0:1</code> refers to: <code>01030023</code> with a scaling factor (<code>:1</code>) for 1 <code>1,010304UUuuxxxxxxxx@i1:10,Current L1,V,Current_L1,2</code> the <code>i1:10</code> refers to: <code>01030028</code> with a scaling factor (<code>:10</code>) for 10</p> <p>Tip</p> <p>Use: <code>sensor53 dM</code> to output the received data in the console. <code>M</code> = the number of the meter in the definition line. During the output of the data in the console, the data in the WEB UI are not updated. To return write: <code>sensor53 d0</code> </p> <p>Tip</p> <p>You can monitor the serial activity at a GPIO with a connected LED. This function is useful for debugging purposes and also to see data is coming in during normal operation. Usage: Enter the command <code>sensor53 lx</code> to activate this function (Lowercase <code>L</code> for <code>LED</code>). <code>x</code> is the number of the GPIO where the LED is connected. For example you can use <code>sensor53 l2</code> for the onboard LED on a Wemos D1-mini or <code>sensor53 l13</code> on a Sonoff Basic. <code>sensor53 l255</code> turns the function off. This is the default value. With <code>sensor53 mx</code> you can choose which serial meter (<code>x</code>) will be monitored. Set <code>sensor53 m0</code> will monitor all serial meters. This is the default value. To start the monitoring at boot-time, simply add the necessary entries in the boot-section (<code>&gt;B</code>) of the script:</p> <p>Example</p> <pre><code>&gt;B\n=&gt;sensor53 r\n=&gt;sensor53 l13\n</code></pre>"},{"location":"Smart-Meter-Interface/#special-commands","title":"Special Commands","text":"<p>With <code>=</code> character at the beginning of a line you can do some special decoding. With <code>*</code> character fields can be hidden or skipped. The term decoder entries refer to the relative line number (starting with 1) in the decoder section. Special options and e.g math calculations are not counted as a decoder entry and have to be skipped in counting.</p> Command Description <code>M,=m</code> Perform arithmetic (<code>+,-,*,/</code>) on the measured data. Use <code>#</code> before a number to designate a constant value, evaluation is from left to right, no brackets supported, first paramter must be a decoder entry, not a constante.g. <code>1,=m 3+4+5/#3 @100,Voltage L1+L2+L3/3,V,Volt_avg,2</code> to sum results of decoder entries 3,4,5 and divide by 3 (average) <code>M,=d</code> Calculate difference between metric values decoded at time intervals (up to 10 =d lines possible) e.g. <code>1,=d 3 10</code> calculate 10 second interval difference of decoder entry 3, this is meant for meters that lack current power, therefore result is rescaled to hours (KWh) <code>M,=h</code> Insert text on the web interface (html text up to 30 chars). These lines do not count as decoder entry. e.g. <code>1,=h&lt;hr/&gt;</code> to insert a separator line on the web UI <code>*</code> character To hide fields from result output or disable output completely. Compiling with <code>USE_SML_SCRIPT_CMD</code> required.  - as single character in <code>&lt;label&gt;</code> of the metrics line will hide that value from the web UI  - as single character in <code>&lt;label&gt;</code> of the meter definition line will suppress the entire JSON output on MQTT <code>M,=so1</code> special SML option for meters that use a bit in the status register to sign import or export like ED300L, AS2020 or DTZ541 e.g. 1,=so1,00010800,65,11,65,11,00100700 for DTZ541 1. obis code that holds the direction bit, 2. Flag identifier, 3. direction bit, 4. second Flag identifier (some meters use 2 different flags), 5. second bit, 6 obis code of value to be inverted on direction bit. <code>M,=so2</code> if 1 fixes the bug introduced by meter DWS74, if 2 enabled OBIS line compare mode instead of shift compare mode, if 4 invert hardware serial line, if 8 disable UART pullup on hardware serial rec line, if 20 disable Parity calculation on obis sende.g. 1,=so2,2 enable obis line compare. <code>M,=so3</code> Adjust buffer sizes, spec: 1,=so3,\\&lt;serial buffer&gt;[,\\&lt;serial IRQ buffer&gt;][,\\&lt;dump buffer&gt;] where serial buffer size is required and defaults to 48 bytes, serial IRQ buffer size is optional and defaults to 256 bytes and serial dump buffer size is optional and defaults to 128 bytes.Enter as a new descriptor line e.g. <code>1,=so3,48,512</code> which keeps serial buffer size at 48 bytes but increases serial IRQ buffer size to 512 bytes and does not change dump buffer size.Note: size should fit to the maximum length of a single line of decoding description; too big buffer sizes lead to delayed WebUI/MQTT updates <code>M,=so4</code> sets AES decrytion key for encrypted meters.must define exactly 16 hexadecimal charse.g. 1,=so4,deabcd0020a0cfdedeabcd0020a0cfde sets decryption key and enables decrypt mode for that meter. <code>M,=so5</code> sets AES authentication key for encrypted meters.must define exactly 16 hexadecimal charse.g. not needed by most energy meters (needs USE_SML_AUTHKEY). <code>M,=so6</code> sync time in milliseconds for serial block detection with AMS meters (defaults to 1000). <code>M,=so7</code> on ESP32 force selection of UART Nr. X (0,1,2) allows coexistence with other serial drivers  <code>M,=so8</code> CAN bus filter mask  <code>M,=so9</code> CAB bus filter  <code>M,=soC</code>  CRC check for binary SML. exp: 1,=soC,1024,15spec: 1,=soC,\\&lt;buffersize&gt;,\\&lt;cr-cmode&gt;  For buffersize 1024 is a good starting point. crc-modes are: 15:auto-detect, 0:x25, 1:ccitt, 2:kermit 3:modbus, 4:xmodem,5:mcrf4xx auto-detect works by simply trying all available algorithms. starting with x25 (crcmode=0). If 4 consecutive correct files are received auto-detecting will choose this algorithm until next restart. <p>Example</p> <p>To get the value of one of the descriptor lines, use <code>sml[X]</code>. <code>X</code> = Line number. Starts with <code>1</code>. (compiling with <code>USE_SML_SCRIPT_CMD</code> required) <pre><code>&gt;D\nv1=0\nv2=0\n&gt;S\n;Writes the value of Descriptorline 1 to v1\nv1=sml[1] \n;Writes the value of Descriptorline 2 to v2\nv2=sml[2]\n</code></pre></p> <p>Example</p> <p>To disable and enable publishing of MQTT data on TelePeriod, use <code>smlj=0</code> and <code>smlj|=1</code>, respectively. For example to skip first MQTT publishing after boot (may contain erroneous data at after restart if meter is slow, see Sanxing SX6x1): <pre><code>&gt;D\n&gt;B\n;disable publishing at MQTT teleperiod, on boot\nsmlj=0\n&gt;S\n;re-enable publishing at MQTT teleperiod, after 10 seconds of uptime\nif upsecs&gt;10\nthen\nsmlj|=1\nendif\n</code></pre> the variable smlj also switches to obis_line_mode if bit 1 = 1, default is 0 </p> <p>Example</p> <p>If you have large meter descriptors and want to extract multiple values from the same descriptor, you can save flash space using <code>SML_REPLACE_VARS</code> at compile time (see Resol Deltasol BS Plus): <pre><code>&gt;D\n;define a text variable\nr=\"1,AA100021421000010774\"\n&gt;M 1\n;in your meter definitions you can use your variable for the same descriptor\n+1,3,v,0,9600,Solar\n%r%vo12ut@#,time,,zeit,1\n%r%vo0uw@10,S1 COL,\u00b0C,sens1,1\n%r%vo2uw@10,S2 TST1,\u00b0C,sens2,1\n%r%vo4uw@10,S3 TST2,\u00b0C,sens3,1\n%r%vo6uw@10,S4 TR,\u00b0C,sens4,1\n;%r% inserts the text variable and saves script storage space (3 instead of 22 chars for each line)\n</code></pre></p> <p>Attention</p> <p>With a few meters, it is necessary to request the meter to send data using a specific character string. This string has to be sent at a very low baud rate (300Baud). If you reply the meter with an acknowledge and ask the it for a new baud rate of 9600 baud, the baud rate of the SML driver has to be changed, too (see Landis + Gyr ZMR120AR).</p> <p>To change the baud rate:</p> <p>sml(<code>METERNUMBER</code> 0 <code>BAUDRATE</code>)  </p> <p>For sending a specific character string:</p> <p>sml(<code>METERNUMBER</code> 1 <code>STRING</code>)</p> <p>And it works like this: <pre><code>&gt;D\nres=0  \nscnt=0    \n;For this Example in the &gt;F section  \n&gt;F\n;count 100ms   \nscnt+=1  \nswitch scnt  \ncase 6  \n;set sml driver to 300 baud and send /?! as HEX to trigger the Meter   \nres=sml(1 0 300)  \nres=sml(1 1 \"2F3F210D0A\")  \n;1800ms later \\&gt; Send ACK and ask for switching to 9600 baud  \ncase 18  \nres=sml(1 1 \"063035300D0A\")  \n;2000ms later \\&gt; Switching sml driver to 9600 baud    \ncase 20  \nres=sml(1 0 9600)   \n;Restart sequence after 50x100ms    \ncase 50  \n; 5000ms later \\&gt; restart sequence    \nscnt=0  \nends        \n&gt;M 1\n+1,3,o,0,9600, ,1  \n;...etc.  \n</code></pre></p> <p>Note: This procedure is only necessary, if the meter explicitly asks for 300 baud. The most meters work directly with 9600 baud. Therefore it is easier to give this method a try (see Iskra MT 174):  </p> <p><code>Meter#,GPIO# Input,TYPE,FLAG,Baudrate,JSONNAME,GPIO# Output,TX Period,Character string</code> <code>+1,3,o,0,9600,energy,1,4,2F3F210D0A</code></p> <p>Tip</p> <p>If you use a Wemos D1 Mini you could compile a 4M flash image with filesystem support so your script will survive upgrades and factory resets. To do this, create a new entry in <code>platformio_tasmota_env.ini</code>: <pre><code>[env:tasmota-4mb]\nboard_build.ldscript    = eagle.flash.4m2m.ld\n</code></pre> Add <code>tasmota-4mb</code> to <code>platformio.ini</code>'s build variants.</p> <p>Add the following to <code>user_config_override.h</code>: <pre><code>#undef  MODULE\n#define MODULE WEMOS\n#define USE_UFILESYS\n#define GUI_TRASH_FILE\n</code></pre> Also recommended, if you use lots of vars and increased buffer sizes to free up the image from unused drivers. You should get some inspiration from the <code>tasmota-lite</code> image definition in <code>tasmota_configurations.h</code>. </p> <p>Tip</p> <p>You can dump to your PC the raw data coming in if you use the module's hardware serial ports (1 and 3) as GPIOs of the script, using Serial to TCP Bridge. Compile your firmware with <code>USE_TCP_BRIDGE</code>, disable the script and configure in module parameters <code>TCP Tx</code> and <code>TCP Rx</code>. After module reboot, start the server with command <code>TCPStart 8888</code>. Connect to this port from your PC to see or dump the data, in Linux it's as easy as <code>cat &lt; /dev/tcp/IP.OF.YOUR.TASMOTA/8888 &gt; rawdump.txt</code>. To revert to SML you need to set back both GPIO ports to <code>None</code>, enable the script and restart.</p>"},{"location":"Smart-Meter-Interface/#commands","title":"Commands","text":"<ul> <li>sensor53 r = resets the sml driver, must be applied in script &gt;B section  </li> <li>sensor53 cx num = sets counter x (1 or 2) to number (persistent change)  </li> <li>sensor53 dm = sets dump mode for meter m (1...N), must be set to 0 for normal operation  </li> <li>sensor53 l x = set an optional LED GPIO pin to indicate serial activity of a meter, set to 255 for disable  </li> <li>sensor53 m x = sets the meter from which to show activity via the l cmd  </li> </ul>"},{"location":"Smart-Meter-Interface/#web-requests","title":"Web Requests","text":"<p>In addition to the MQTT publishing, the sensor data can be polled using web requests with the status 10 command, e.g. <code>http:/&lt;IP&gt;/cm?cmnd=status%2010</code>.</p> <p>It is also possible to directly access certain lines of the script. Example:</p> <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,powermeter\n1,77070100010800FF@1,Input Total,Wh,input_total,1\n1,77070100020800FF@1,Output Total,Wh,output_total,1\n1,770701000E0700FF@1,Net Frequency,Hz,net_frequency,2\n1,77070100100700FF@1,Current Power,W,current_power,0\n#\n</code></pre> <p>To access the fourth line <code>current_power</code> use the following URL: <code>http://&lt;IP&gt;/cm?cmnd=script?sml[4]</code> which will result in a short JSON string like <code>{\"script\":{\"sml[4]\":280}}</code>.</p>"},{"location":"Smart-Meter-Interface/#smart-meter-descriptors","title":"Smart Meter Descriptors","text":""},{"location":"Smart-Meter-Interface/#abb-b23-modbus","title":"ABB B23 (MODBus)","text":"<p>Meter is basically the same as Janitza B23 with the same interface. It's just missing whole section of registers which are used in Janitza B23 example.</p> <p>Beware that A and B MODBus connectors are switched!</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,0,9600,ABB,1,10,01035B00,01035B02,01035B04,01035B14,01035B16,01035B18,01035B1A,r010350080004,r010350000004,r010350040004\n1,010304UUuuUUuu@i0:10,Voltage L1-N,V,Voltage_L1,1\n1,010304UUuuUUuu@i1:10,Voltage L2-N,V,Voltage_L2,1\n1,010304UUuuUUuu@i2:10,Voltage L3-N,V,Voltage_L3,1\n1,010304SSssSSss@i3:100,Active power Total,W,Active_power_Total,2\n1,010304SSssSSss@i4:100,Active power L1-N,W,Active_power_L1,2\n1,010304SSssSSss@i5:100,Active power L2-N,W,Active_power_L2,2\n1,010304SSssSSss@i6:100,Active power L3-N,W,Active_power_L3,2\n1,010308xxxxxxxxSSssSSss@i7:100,Real energy,kWh,Real_energy,2\n1,010308xxxxxxxxUUuuUUuu@i8:100,Real energy consumed,kWh,Real_energy_consumed,2\n1,010308xxxxxxxxUUuuUUuu@i9:100,Real energy delivered,kWh,Real_energy_delivered,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#abb-b-series-like-b21-b23-m-bus-over-infrared-port","title":"ABB B-Series (like B21, B23) (M-Bus over Infrared port)","text":"<p>Using the IR Port on left side of the device. The IR interface does NOT support MODBUS, only M-Bus (Meter Bus) and EQ-Bus protocol.  Configure the IR output at the device menu. This example is using 9600 baud and address 10h (16 decimal) for the meter. The meter is using equal parity 1 stop bit 9600E1 The upper diode is TX the lower RX. My device is sending always 2 telegrams. I tried to add additional values by sending SND_UD telegram. I only receive the e5 response showing that the request was accepted. No change in response. The last telegram will end on a \"0F xx 16\" instead of a \"1F xx 16\", which will show that additional telegrams are available. If you can receive more telegrams, add alternating  107b108b16 - 105b106b16. One for each telegram.  This example will only work with address 10! the second last byte is a check sum. For this REQ_UD2 it is the sum of the 2 bytes before (Address and VIF). </p> View script <pre><code>&gt;M 1\n+1,3,rE1,0,9600,ABB,1,10,1040105016,107b108b16,105b106b16[,107b108b16[,105b106b16]] \n1,081072bcd8@1,Meter ID,,ID,0 ; meter ID (BCD-8)\n1,0E8400bcd8@100,E Imp total,kWh,Imp,2 ; Total imported energy 0.01 kWh\n1,04A900ssSSssSSs@100,P total,W,P_tot,2 ; Total Power 0.01 W\n1,04A9FF8100ssSSssSSs@100,P L1,W,P_L1,2 ; L1 Power 0.01 W\n1,04A9FF8200ssSSssSSs@100,P L2,W,P_L2,2 ; L2 Power 0.01 W\n1,04A9FF8300ssSSssSSs@100,P L3,W,P_L3,2 ; L3 Power 0.01 W\n1,04FDC8FF8100uuUUuuUUs@10,U L1,V,U_L1,1 ; Voltage L1 0.1 V\n1,04FDC8FF8200uuUUuuUUs@10,U L2,V,U_L2,1 ; Voltage L2 0.1 V\n1,04FDC8FF8300uuUUuuUUs@10,U L3,V,U_L3,1 ; Voltage L3 0.1 V\n1,0AFFD900bcd4@100,*,Hz,F,2 ; Frequency\n1,0E84FF8100bcd8@100,E Imp L1,kWh,Imp-L1,2 ; L1 imported energy 0.01 kWh\n1,0E84FF8200bcd8@100,E Imp L2,kWh,Imp-L2,2 ; L2 imported energy 0.01 kWh \n1,0E84FF8300bcd8@100,E Imp L3,kWh,Imp-L3,2 ; L3 imported energy 0.01 kWh\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-12ec3","title":"Apator 12EC3","text":"<p>Energy provider supplied a PIN code to enable output of additional data.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,Strom,1,30,2F3F210D0A,063030300D0A\n1,1.8.0*00(@1,Gesamtverbrauch,kWh,Pges,2\n1,1.8.1*00(@1,Tagesverbrauch,kWh,Total_day,2\n1,1.8.2*00(@1,Nachtverbrauch,kWh,Total_night,2\n1,2.8.0*00(@1,Einspeisung,kWh,Total_out,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-12ec3g","title":"Apator 12EC3G","text":"<p>No PIN code needed for output data. It can only display total consumption.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,Strom,1,30,2F3F210D0A,063030300D0A\n1,1.8.0*00(@1,Gesamtverbrauch,kWh,Pges,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-apox-sml","title":"Apator APOX+ (SML)","text":"<p>Energy provider supplied a PIN code to enable output of additional data.</p> View script <pre><code>&gt;D  \n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,s,0,9600,SML\n1,77070100010801ff@1000,Verbrauch_Tarif_1,kWh,Total_Tarif1,3\n1,77070100010802ff@1000,Verbrauch_Tarif_2,kWh,Total_Tarif2,3\n1,77070100010800ff@1000,Verbrauch_Summe,kWh,Total_Summe,3\n1,77070100020800ff@1000,Einspeisung_Summe,kWh,Total_Einsp,3\n1,77070100100700ff@1,Current consumption,W,Power_curr,3\n1,=h   ----  \n1,770701001f0700ff@1,Current L1,A,Curr_p1,3  \n1,77070100330700ff@1,Current L2,A,Curr_p2,3  \n1,77070100470700ff@1,Current L3,A,Curr_p3,3  \n1,=h   ----  \n1,77070100200700ff@1,Voltage L1,V,Volt_p1,3 \n1,77070100340700ff@1,Voltage L2,V,Volt_p2,3  \n1,77070100480700ff@1,Voltage L3,V,Volt_p3,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-lepus-3060-sml","title":"Apator Lepus 3.060 (SML)","text":"<p>Instructions for Activating the Instantaneous Power Display and Disabling the PIN Protection. For more details and additional instructions, you can download the user manual from the internet.</p> <p>Important Note: Entering the PIN with a flashlight is not sufficient to permanently display the instantaneous power or disable the PIN protection.</p> <p>Please follow the steps below. For more details, refer to the user manual of the meter, which is available for download online.</p> <ol> <li> <p>To start, press and hold the left arrow button for more than 5 seconds to access the parameter menu. A display test will briefly show the top and bottom lines of the display.</p> </li> <li> <p>If PIN protection is active, you will be prompted to enter the PIN. Use short button presses to select the correct digits. After about 2 seconds of no input, the cursor will automatically move to the next digit.</p> </li> <li> <p>To activate the instantaneous power display, navigate to the \"Inf\" menu option and press and hold the left arrow button for more than 5 seconds. This will enable the \"Inf on\" setting, which will display the instantaneous power on the second line of the display permanently.</p> </li> <li> <p>To disable PIN protection, navigate to the \"Pin\" menu option and press and hold the left arrow button for more than 5 seconds. This will turn off the PIN protection.</p> </li> </ol> <p>After following these steps, the instantaneous power will be displayed permanently in the second line of the display.</p> View script in English <pre><code>    &gt;D  \n    &gt;B  \n    -&gt;sensor53 r\n    &gt;M 1  \n    +1,3,s,1,9600,SML  \n    1,77070100100700FF@1,Power Consumption,W,Current_Active_Power,16\n    1,77070100240700FF@1,Phase 1,W,Active_Power_L1,0\n    1,77070100380700FF@1,Phase 2,W,Active_Power_L2,0\n    1,770701004C0700FF@1,Phase 3,W,Active_Power_L3,0\n    1,=h ----\n    1,77070100010800FF@1,Total Consumption,Wh,Total_Consumption,1\n    1,77070100020800FF@1,Feed-in,Wh,Total_Active_Energy,1\n    1,=h ----\n    1,770701000E0700FF@1,Grid Frequency,Hz,Grid_Frequency,1\n    1,770701001F0700FF@1,Current L1,A,Current_L1,2\n    1,77070100330700FF@1,Current L2,A,Current_L2,2\n    1,77070100470700FF@1,Current L3,A,Current_L3,2\n    1,77070100200700FF@1,Voltage L1,V,Voltage_L1,1\n    1,77070100340700FF@1,Voltage L2,V,Voltage_L2,1\n    1,77070100480700FF@1,Voltage L3,V,Voltage_L3,1\n    1,77070100510701FF@1,Delta Phi U L1/L2,\u00b0,Delta_Phi_U_L1_L2,0\n    1,77070100510702FF@1,Delta Phi U L1/L3,\u00b0,Delta_Phi_U_L1_L3,0\n    1,77070100510704FF@1,Delta Phi I/U L1,\u00b0,Delta_Phi_I_U_L1,0\n    1,7707010051070FFF@1,Delta Phi I/U L2,\u00b0,Delta_Phi_I_U_L2,0\n    1,7707010051071AFF@1,Delta Phi I/U L3,\u00b0,Delta_Phi_I_U_L3,0\n    1,77070100600100ff@#,Server ID,,Server_ID,0\n    1,7707010060320101@#,Service ID,,Meter_ID,0\n    1,77070100605a0201@1,Firmware Checksum,,FwCheck,0\n    #\n</code></pre> View script in German <pre><code>    &gt;D  \n    &gt;B  \n    -&gt;sensor53 r\n    &gt;M 1  \n    +1,3,s,1,9600,SML\n    1,77070100100700FF@1,Stromverbrauch,W,aktuelle_Wirkleistung,16\n    1,77070100240700FF@1,Leiter 1,W,Wirkleistung_L1,0\n    1,77070100380700FF@1,Leiter 2,W,Wirkleistung_L2,0\n    1,770701004C0700FF@1,Leiter 3,W,Wirkleistung_L3,0\n    1,=h   ----\n    1,77070100010800FF@1,Z\u00e4hler Verbrauch,Wh,Zaehlerstand_total,1\n    1,77070100020800FF@1,Z\u00e4hler Einspeisung,Wh,Wirkenergie_total,1\n    1,=h   ----\n    1,770701000E0700FF@1,Netz Frequenz,Hz,Netz_Frequenz,1\n    1,770701001F0700FF@1,Strom L1,A,Strom_L1,2\n    1,77070100330700FF@1,Strom L2,A,Strom_L2,2\n    1,77070100470700FF@1,Strom L3,A,Strom_L3,2\n    1,77070100200700FF@1,Spannung L1,V,Spannung_L1,1\n    1,77070100340700FF@1,Spannung L2,V,Spannung_L2,1\n    1,77070100480700FF@1,Spannung L3,V,Spannung_L3,1\n    1,77070100510701FF@1,delta phi U L1/L2,\u00b0,delta_phi_U_L1-L2,0\n    1,77070100510702FF@1,delta phi U L1/L3,\u00b0,delta_phi_U_L1-L3,0\n    1,77070100510704FF@1,delta phi I/U  L1,\u00b0,delta_phi_I_U_L1,0\n    1,7707010051070FFF@1,delta phi I/U L2,\u00b0,delta_phi_I_U_L2,0\n    1,7707010051071AFF@1,delta phi I/U L3,\u00b0,delta_phi_I_U_L3,0\n    1,77070100600100ff@#,Server ID,,Server_ID,0\n    1,7707010060320101@#,Service ID,,Meter_ID,0\n    1,77070100605a0201@1,Firmware Checksum,,FwCheck,0\n    #\n</code></pre> <p>For further support, visit the APATOR LEPUS Discussion Thread.</p>"},{"location":"Smart-Meter-Interface/#apator-norax-1d-sml","title":"Apator Norax 1D+ (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,1,9600,SML\n1,77070100010800ff@1000,Total consumption,kWh,total_in,4\n1,77070100020800ff@1000,Total Feed,kWh,total_out,4\n1,770701000b0700ff@1,Amperage,A,amperage,1\n1,770701000c0700ff@1,Voltage,V,voltage,1\n1,770701000e0700ff@1,Frequency,Hz,frequency,0\n1,77070100100700ff@1,Current consumption,W,power_curr,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-norax-3d-sml","title":"Apator Norax 3D (SML)","text":"<p>To get all information with the scrpit below you need to enter the PIN. In the following menu you then turn \"Pin\" to \"off\" and \"InF\" to \"on\". Now all values are submitted through the SML script.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,SML\n1,77070100010800ff@1000,Total consumption,kWh,Total_in,4\n1,77070100020800ff@1000,Total Feed,kWh,Total_out,4\n1,77070100100700ff@1,Current consumption,W,Power_curr,0\n1,77070100200700ff@1,Voltage L1,V,Volt_p1,1\n1,77070100340700ff@1,Voltage L2,V,Volt_p2,1\n1,77070100480700ff@1,Voltage L3,V,Volt_p3,1\n1,770701001f0700ff@1,Amperage L1,A,Amperage_p1,1\n1,77070100330700ff@1,Amperage L2,A,Amperage_p2,1\n1,77070100470700ff@1,Amperage L3,A,Amperage_p3,1\n1,77070100510704ff@1,Phaseangle I-L1/U-L1,deg,phase_angle_p1,1 \n1,7707010051070fff@1,Phaseangle I-L27I-L2,deg,phase_angle_p2,1  \n1,7707010051071aff@1,Phaseangle I-L3/I-L3,deg,phase_angle_p3,1 \n1,770701000e0700ff@1,Frequency,Hz,frequency,0\n#\n</code></pre> SML with daily values <pre><code>&gt;D  \npin=0  \npout=0  \npi_d=0  \npo_d=0  \nhr=0  \n; permanent midnight values  \np:pi_m=0  \np:po_m=0  \n&gt;B  \n-&gt;sensor53 r  \n&gt;T  \n; get total consumption and total feed  \npin=SML#Total_in  \npout=SML#Total_out  \n&gt;S  \n; at midnight, save meter total values  \nhr=hours  \nif chg[hr]&gt;0  \nand hr==0  \nthen  \npi_m=pin  \npo_m=pout  \nsvars  \nendif  \n; on teleperiod calculate current daily values from midnight  \nif upsecs%tper==0  \nthen  \npi_d=pin-pi_m  \npo_d=pout-po_m  \nendif  \n; show these values on WEB UI  \n&gt;W  \nTagesverbrauch: {m} %pi_d% kWh  \nTageseinspeisung: {m} %po_d% kWh    \n; transmit these values with MQTT  \n&gt;J  \n,\"daily_consumption\":%pi_d%,\"daily_feed\":%po_d%  \n; meter definition  \n&gt;M 1  \n+1,3,s,0,9600,SML  \n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,4  \n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,4  \n1,77070100100700ff@1,Current Consumption,W,Power_curr,0  \n1,77070100000009ff@#,Meter Number,,Meter_number,0  \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-norax-3d-sml_1","title":"Apator Norax 3D+ (SML)","text":"<p>This script gives also the wattage per phase. Make sure to get the PIN from your grid operator! Tested on a WeMos D1 mini with an IR Head from https://agalakhov.github.io/ir-interface connected to the RX pin (3). The meter also outputs the phase angles, but i left them out since i do not need them. You can easily find additional values by activating the debug mode (\"sensor53 d1\" for the first meter, switch off after a few seconds with \"sensor53 d0\").</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,1,9600,SML\n1,77070100010800ff@1000,Total consumption,kWh,Total_in,4\n1,77070100020800ff@1000,Total Feed,kWh,Total_out,4\n1,77070100100700ff@1,Current consumption,W,Power_curr,0\n1,77070100200700ff@1,Voltage L1,V,Volt_p1,1\n1,77070100340700ff@1,Voltage L2,V,Volt_p2,1\n1,77070100480700ff@1,Voltage L3,V,Volt_p3,1\n1,770701001f0700ff@1,Amperage L1,A,Amperage_p1,1\n1,77070100330700ff@1,Amperage L2,A,Amperage_p2,1\n1,77070100470700ff@1,Amperage L3,A,Amperage_p3,1\n1,77070100240700ff@1,Current consumption L1,W,Power_curr_p1,0\n1,77070100380700ff@1,Current consumption L2,W,Power_curr_p2,0\n1,770701004c0700ff@1,Current consumption L3,W,Power_curr_p3,0\n1,770701000e0700ff@1,Frequency,Hz,frequency,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#apator-picus-ehz060dj-sml","title":"Apator Picus eHZ.060.D/J (SML)","text":"<p>Make sure to acquire the PIN from your energyprovider.  After unlocking the meter, you can run the following script</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,PICUS\n1,77070100100700ff@1,Consumption (Current),W,curr_w,0\n1,77070100010800ff@1000,Consumption (Total),Kwh,total_kwh,2\n1,77070100020800ff@1000,feed (Total),Kwh,total_kwh_out,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#carlo-gavazzi-em340-modbus-rtu","title":"Carlo Gavazzi EM340 (MODBus RTU)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n;-&gt;sensor53 d1\n&gt;M 1\n+1,13,m,0,115200,MODBUS,12,2,01030000,01030002,01030004,0103000C,0103000E,01030010,01030012,01030014,01030016,01030018,0103001A,0103001C,0103001E,01030020,01030022,01030034,01030038,0103002e,0103002f,01030030,0103004e\n1,010304SSssSSsss@i0:10,Voltage L1,V,Voltage_L1,1\n1,010304SSssSSsss@i1:10,Voltage L2,V,Voltage_L2,1\n1,010304SSssSSsss@i2:10,Voltage L3,V,Voltage_L3,1\n1,010304SSssSSsss@i3:1000,Current L1,A,Current_L1,3\n1,010304SSssSSsss@i4:1000,Current L2,A,Current_L2,3\n1,010304SSssSSsss@i5:1000,Current L3,A,Current_L3,3\n1,010304SSssSSsss@i6:10,Power L1,W,Power_L1,1\n1,010304SSssSSsss@i7:10,Power L2,W,Power_L2,1\n1,010304SSssSSsss@i8:10,Power L3,W,Power_L3,1\n1,010304SSssSSsss@i9:10,Power VA L1,VA,Power_va_L1,1\n1,010304SSssSSsss@i10:10,Power VA L2,VA,Power_va_L2,1\n1,010304SSssSSsss@i11:10,Power VA L3,VA,Power_va_L3,1\n1,010304SSssSSsss@i12:10,Power var L1,var,Power_var_L1,1\n1,010304SSssSSsss@i13:10,Power var L2,var,Power_var_L2,1\n1,010304SSssSSsss@i14:10,Power var L3,var,Power_var_L3,1\n1,010304SSssSSsss@i15:10,Energy Tot,kWh,Energy_Tot,1\n1,010304SSssSSsss@i16:10,Energy Demand,W,Energy_Demand,1\n1,010304SSss@i17:1000,PF L1,PF,PF_L1,1\n1,010304SSss@i18:1000,PF L2,PF,PF_L2,1\n1,010304SSss@i19:1000,PF L3,PF,PF_L3,1\n1,010304SSssSSsss@i20:10,Energy Tot Export,kWh,Energy_Tot_Export,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#combo-meter-water-gas-sml","title":"COMBO Meter (Water, Gas, SML)","text":"View script <pre><code>&gt;D  \n&gt;B  \n-&gt;sensor53 r\n&gt;M 3  \n+1,1,c,0,10,H20  \n+2,4,c,0,50,GAS  \n+3,3,s,0,9600,SML  \n1,1-0:1.8.0*255(@10000,Water reading,cbm,Count,4  \n2,=h==================  \n2,1-0:1.8.0*255(@100,Gas reading,cbm,Count,3  \n3,77070100010800ff@1000,Total consumption,kWh,Total_in,3  \n3,=h==================  \n3,77070100100700ff@1,Current consumption,W,Power_curr,2  \n3,=h   ----  \n3,=m 10+11+12 @100,Currents L1+L2+L3,A,Curr_summ,2  \n3,=m 13+14+15/#3 @100,Voltage L1+L2+L3/3,V,Volt_avg,2  \n3,=h==================  \n3,77070100240700ff@1,Consumption P1,W,Power_p1,2  \n3,77070100380700ff@1,Consumption P2,W,Power_p2,2  \n3,770701004c0700ff@1,Consumption P3,W,Power_p3,2  \n3,=h   ----  \n3,770701001f0700ff@100,Current L1,A,Curr_p1,2  \n3,77070100330700ff@100,Current L2,A,Curr_p2,2  \n3,77070100470700ff@100,Current L3,A,Curr_p3,2  \n3,=h   ----  \n3,77070100200700ff@100,Voltage L1,V,Volt_p1,2  \n3,77070100340700ff@100,Voltage L2,V,Volt_p2,2  \n3,77070100480700ff@100,Voltage L3,V,Volt_p3,2  \n3,=h==================  \n3,77070100000009ff@#,Service ID,,Meter_id,0  \n3,=h     \n#  \n</code></pre>"},{"location":"Smart-Meter-Interface/#ddm18sd-modbus","title":"DDM18SD (MODBus)","text":"<p>This script, based on tasmota scripting language, is to read data on a unsupported DDM18SD  power meter. It has 8E1 parity and the slave ID address is n 5. On a Nodemcu or Wemos D1 board, put wires between GPIO3 and GPIO1 to the RX and  TX pinout of a RS485 to TTL board, but leave empty (none) the GPIO Tasmota software settings.  A &amp; B connected to the meter pinout. </p> View script <pre><code>&gt;D\n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,M,0,9600,DDM,1,2,05040000,05040008,05040012,0504001A,05040036,0504002A,05040100,05040400\n1,050404ffffffff@i0:1,Tensione,V,DDM_Voltage,2  \n1,050404ffffffff@i1:1,Corrente,A,DDM_Current,2  \n1,050404ffffffff@i2:1,Consumo Ist.,W,DDM_Power,2\n1,050404ffffffff@i3:1,Reactive power,Var,DDM_React_Power,2\n1,050404ffffffff@i4:1,Frequenza,Hz,DDM_Frequency,2 \n1,050404ffffffff@i5:1,Power factor,,DDM_PF,2\n1,050404ffffffff@i6:1,Consumi tot.,Kwh,DDM_Tot_Power,2\n1,050404ffffffff@i7:1,Tot. react. power,Kvarh,DDM_Reac_Power,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#deye-modbus","title":"DEYE (MODBus)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M1\n+1,4,m,0,9600,Deye,2,1,01030271,0103028D,\n0103024C,0103024E,010302A0,010302A1,0103029B,01030298,01030299,0103029A\n1,010304SSss@i0:1,Total Grid Power,W,Total_Grid_Power,0\n1,010304SSss@i1:1,Total Load Power,W,Total_Load_Power,0\n1,010304SSss@i2:1,Battery SOC,%%,Battery_SOC,0\n1,010304SSss@i3:1,Battery Power,W,Battery_Power,0\n1,010304SSss@i4:1,PV1 Power,W,PV1_Power,0\n1,010304SSss@i5:1,PV2 Power,W,PV2_Power,0\n1,010304SSss@i6:1,Total Gen Power,W,Total_Gen_Power,0\n1,010304SSss@i7:1,Gen Power L1,W,Gen_Power_L1,0\n1,010304SSss@i8:1,Gen Power L2,W,Gen_Power_L2,0\n1,010304SSss@i9:1,Gen Power L3,W,Gen_Power_L3,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#digimeto-gs303-sml","title":"Digimeto GS303 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,GS303\n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,3\n1,77070100100700ff@1,Current Consumption,W,Power_cur,0\n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,3\n1,7707010060320101@#,Service ID,,Meter_id,0\n#    \n</code></pre>"},{"location":"Smart-Meter-Interface/#dzg-dwze122g2-dvze-sml","title":"DZG DWZE12.2.G2 (DVZE) (SML)","text":"<p>A bidirectional metering device from DZG Metering GmbH.</p> View script for the extended dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWZE12\n1,77070100010800ff@1000,Total Energy In,kWh,TotalIn,3\n1,77070100020800ff@1000,Total Energy Out,kWh,TotalOut,3\n1,77070100100700ff@1,Current Power,W,CurrPower,3\n1,77070100600100ff@#,Meter Id,,MeterId,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#dzg-dws74102vg2-sml-and-dzg-dvs74202-sml","title":"DZG DWS7410.2V.G2 (SML) and DZG DVS7420.2 (SML)","text":"<p>A bidirectional metering device from DZG Metering GmbH.</p> <p>Once unlocked with a PIN and set to <code>Inf on</code>, the meter returns not only an integer of the total consumption, but an extended dataset which also includes decimals as well as the current power.</p> View script for the extended dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7410\n1,77070100010800ff@1000,Energie,kWh,energy,4\n1,77070100020800ff@1000,Lieferung,kWh,en_out,4\n1,77070100100700ff@1,Leistung,W,power,2\n1,7707010060320101@#,SID,,meter_id,0\n#\n</code></pre> <p>The script was derived from the DZG DWS76 (SML) device below and extended by the delivered energy. The lines for <code>meter_id</code>, <code>unknown</code> and <code>meter_number</code> were reduced to one line for <code>meter_id</code> because all values were identical.</p> <p>For <code>Inf off</code>, a simplified dataset is returned only.</p> Alternative script for the simplified dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7410\n1,77070100010800ff@1000,Energie,kWh,energy,0\n1,7707010060320101@#,Service ID,,meter_id,0\n1,77010b0a01445a47@#,Unbekannt,,unknown,0\n1,77070100600100ff@#,Z\u00e4hlernummer,,meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#dzg-dws74121g2-sml","title":"DZG DWS7412.1.G2 (SML)","text":"<p>A uni-directional metering device from DZG Metering GmbH.</p> <p>Once unlocked with a PIN and set to <code>Inf on</code>, the meter returns not only an integer of the total consumption, but an extended dataset which also includes decimals as well as the current power.</p> View script for the extended dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7412\n1,77070100010800ff@1000,Energy,kWh,energy,4\n1,77070100240700ff@1,Power,W,power,2\n1,7707010060320101@#,Service ID,,meter_id,0\n#\n</code></pre> <p>For <code>Inf off</code>, a simplified dataset is returned only.</p> Alternative script for the simplified dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7412\n1,77070100010800ff@1000,Energy,kWh,energy,4\n1,7707010060320101@#,Service ID,,meter_id,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#dzg-dws76-sml","title":"DZG DWS76 (SML)","text":"<p>Should also be applicable to many other DZG Metering GmbH meters, like DVS76, DVS74, DWS74 or in general DxS7x - not tested though. Succesfully tested with DWS7612.1T</p> <p>Once unlocked with a PIN and set to <code>Inf on</code>, the meter returns not only an integer of the total consumption, but an extended dataset which also includes decimals as well as the current power. Further values unknown yet.</p> View script for the extended dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7612\n1,77070100010800ff@1000,Energie,kWh,energy,4\n1,77070100100700ff@1,Leistung,W,power,2\n1,7707010060320101@#,Service ID,,meter_id,0\n1,77010b0a01445a47@#,Unbekannt,,unknown,0\n1,77070100600100ff@#,Z\u00e4hlernummer,,meter_number,0\n#  \n</code></pre> <p>For <code>Inf off</code>, a simplified dataset is returned only.</p> Alternative script for the simplified dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWS7612\n1,77070100010800ff@1000,Energie,kWh,energy,0\n1,7707010060320101@#,Service ID,,meter_id,0\n1,77010b0a01445a47@#,Unbekannt,,unknown,0\n1,77070100600100ff@#,Z\u00e4hlernummer,,meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#dzg-dwsb122-sml","title":"DZG DWSB12.2 (SML)","text":"<p>This is a 2-way-meter, so it features both an import- (incoming) and an export-register (e.g. for photovoltaic installations). In default configuration, the meter only outputs a simplified dataset, excluding the momentary effective power and decimals for both imported and exported energy. In order to enable the full dataset, one has to ask their energy provider for the Pin and change the \"Inf off\" setting to \"Inf on\" (see meter manual).</p> Script for the simplified dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWSB122\n1,77070100010800ff@1000,Energy Imported,kWh,energy_imported,0\n1,77070100020800ff@1000,Energy Exported,kWh,energy_exported,0\n1,7707010060320101@#,Server ID,,meter_id,0\n1,77010b0a01445a47@#,Unknown,,unknown,0\n1,77070100600100ff@#,Meter Number,,meter_number,0\n#\n</code></pre> Script for the full dataset <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,DWSB122\n1,77070100100700ff@1,Effective Power,W,effective_power,2\n1,77070100010800ff@1000,Energy Imported,kWh,energy_imported,2\n1,77070100020800ff@1000,Energy Exported,kWh,energy_exported,2\n1,7707010060320101@#,Server ID,,meter_id,0\n1,77010b0a01445a47@#,Unknown,,unknown,0\n1,77070100600100ff@#,Meter Number,,meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#easymeter-q3a-apator-apox-sml","title":"EasyMeter Q3A / Apator APOX+ (SML)","text":"<p>A 2-Tariff Meter which for Example SWM (Stadtwerke M\u00fcnchen) oder DGY (Discovergy) uses. Unfortunately this Version sends only whole kWh (precision 0) without PIN. With PIN behaviour changes and high resolution is available as seen below (e.g. precision 7 for consumption/kWh, precision 2 for power/W, precision 1 for voltage/V).</p> <p>Apator APOX+ behaves same as the EasyMeter while pin locked, just precision 0 without additional data. After calling the energy provider they send a letter with the unlock pin. </p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,SML\n1,77070100010801ff@1000,Verbrauch_Tarif_1,kWh,Verbrauch_T1,7\n1,77070100010802ff@1000,Verbrauch_Tarif_2,kWh,Verbrauch_T2,7\n1,77070100010800ff@1000,Verbrauch_Summe,kWh,Verbrauch_Summe,7\n1,77070100020800ff@1000,Einspeisung_Summe,kWh,Einspeisung_Summe,7\n1,=h-- \n1,77070100240700ff@1,Leistung_L1,W,Watt_L1,2\n1,77070100380700ff@1,Leistung_L2,W,Watt_L2,2\n1,770701004c0700ff@1,Leistung_L3,W,Watt_L3,2\n1,77070100100700ff@1,Leistung_Summe,W,Watt_Summe,2\n1,=h-- \n1,77070100200700ff@1,Spannung_L1,V,Volt_L1,1\n1,77070100340700ff@1,Spannung_L2,V,Volt_L2,1\n1,77070100480700ff@1,Spannung_L3,V,Volt_L3,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#easymeter-q3b-sml","title":"EasyMeter Q3B (SML)","text":"<p>Two separate 2-Tariff meters (e.g. from Fairenergie Reutlingen) are readout by the same Tasmota device. The first one is for general purpose and is connected to <code>GPIO14</code>. The JSON prefix is set to <code>Power</code>. The second one is for the heat pump and connected to <code>GPIO13</code>. The JSON prefix is set to <code>Pump</code>. For both meters, tariff 1 &amp; 2 are rounded kWh (precision 0), actual consumption in W has a higher precision (1).</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 2\n+1,14,s,0,9600,Power\n1,77070100010801ff@1000,Tarif 1,kWh,Power_T1,0\n1,77070100010802ff@1000,Tarif 2,kWh,Power_T2,0\n1,77070100010800ff@1000,Summe,kWh,Power_Sum,0\n1,77070100010700ff@1000,Verbrauch,W,Power_Use_Sum,1\n+2,13,s,0,9600,Pump\n2,77070100010801ff@1000,Tarif 1,kWh,HP_T1,0\n2,77070100010802ff@1000,Tarif 2,kWh,HP_T2,0\n2,77070100010800ff@1000,Summe,kWh,HP_Sum,0\n2,77070100010700ff@1000,Verbrauch,W,HP_Use_Sum,1 \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#easymeter-q3d-q3da1024-obis","title":"EasyMeter Q3D, Q3DA1024 (OBIS)","text":"<p>The Q3D is a three-phase model energy meter, which was sold in a number of different configurations. This is a legacy device, however still available new in some shops. The most popular model seems to be the two-direction model for solar power metering. The D0 port is read-only with a fixed time interval of two seconds. The communication settings are unusual: 7 data bits, even parity, one stop bit, 9600 baud (9600 7E1).</p> <p>Because the 7E1 serial mode is not supported by Tasmota software serial, the hardware serial port must be used, i.e. GPIO 3. This will /not/ work using GPIO 0 or 2.</p> <p>Also, the source code has to be patched from 8N1 to 7E1 mode for the hardware serial in file src/TasmotaSerial.cpp, please see the patch further down below. Since Tasmota 9.5.0 the serial mode can be changed in the console by typing <code>SerialConfig 7E1</code> without having to patch TasmotaSerial.</p> Example reading of the two-direction model using GPIO 3 - P_in power reading will be negative in case of inverse power flow: <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,12,o,0,9600,SML,1\n1,1-0:1.7.255*255(@1,P_in,W,P_in,18\n1,1-0:21.7.255*255(@1,L1,W,L1,18\n1,1-0:41.7.255*255(@1,L2,W,L2,18\n1,1-0:61.7.255*255(@1,L3,W,L3,18\n1,1-0:1.8.0*255(@1,E_in,kWh,E_in,19\n1,1-0:2.8.0*255(@1,E_out,kWh,E_out,19\n1,1-0:0.0.0*255(@1,Netzbetreiber-ID,,NetID,0\n1,0-0:96.1.255*255(@#),Seriennummer,,serial,0\n#\n</code></pre> Alternative script running on a Wemos D1 mini on hardware serial pin 3 for the Q3DB1024 two direction <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,9600,Haupt,1\n1,1-0:1.7.0*255(@1,P_in,W,P_in,18\n1,1-0:1.8.0*255(@1,E_in,kWh,E_in,19\n1,1-0:2.8.0*255(@1,E_out,kWh,E_out,19\n1,1-0:21.7.0*255(@1,L1,W,L1,18\n1,1-0:41.7.0*255(@1,L2,W,L2,18\n1,1-0:61.7.0*255(@1,L3,W,L3,18\n1,1-0:0.0.0*255(@1,Netzbetreiber-ID,,NetID,0\n1,0-0:96.1.255*255(@#),Seriennummer,,serial,0\n#    \n</code></pre> Apply following patch to src/TasmotaSerial.cpp <pre><code>--- a/lib/default/TasmotaSerial-3.2.0/src/TasmotaSerial.cpp\n+++ b/lib/default/TasmotaSerial-3.2.0/src/TasmotaSerial.cpp\n@@ -117,7 +117,7 @@ bool TasmotaSerial::begin(long speed, int stop_bits) {\n    if (2 == m_stop_bits) {\n    Serial.begin(speed, SERIAL_8N2);\n    } else {\n-      Serial.begin(speed, SERIAL_8N1);\n+      Serial.begin(speed, SERIAL_7E1);\n    }\n    if (m_hardswap) {\n    Serial.swap();\n</code></pre>"},{"location":"Smart-Meter-Interface/#ebz-dd3-obissml","title":"eBZ DD3 (OBIS/SML)","text":"<p>The eBZ DD3 by eBZ GmbH is a three-phase model energy meter, which is sold in a number of different configurations. The D0 port is read-only with a fixed time interval of one second. </p> <p>There are two communication interfaces:</p> <ul> <li>The INFO interface on the front, with a metal backplate. Pushes a reduced OBIS ASCI/SML binary datagram every second.</li> <li>The MSB interface on the top, no metal backplate. Pushes a full OBIS ASCI/SML binary datagram every second.    </li> </ul> <p>There are two types available using different communication settings: </p> <ul> <li>OD-type: 7 data bits, even parity, one stop bit, 9600 baud (9600 7E1) - OBIS ASCI protocol</li> <li>SM-type: 8 data bits, no parity, one stop bit, 9600 baud (9600 8N1) - SML binary protcol</li> </ul> <p>Tested with an eBZ DD3 2R06 ODZ1 (two-direction model for e. g. solar power metering).</p> <p>Because the 7E1 serial mode is not supported by Tasmota software serial, the hardware serial port must be used, i.e. GPIO 3. This will /not/ work using GPIO 0 or 2.</p> <p>Change the serial mode in the console by typing <code>SerialConfig 7E1</code>.</p> <p>Example reading of the two-direction model using GPIO 3:</p> <ul> <li>\"TelePeriod 30\" sets telemetry period to 30 seconds (remove if not needed/wanted)</li> <li>Values for ?6.7.0 (power) are transmitted immediately (precision + 16)    </li> <li>power readings will be negative in case of inverse power flow</li> </ul> View script <pre><code>&gt;D\n&gt;B\nTelePeriod 30\n=&gt;sensor53 r\n&gt;M 1\n; Device: eBZ DD3 2R06 ODZ1\n; protocol is D0 OBIS ASCII\n; 9600@7E1 for OP-type devices, 9600@8N1 for SM-type devices\n+1,3,o,0,9600,SM,1\n; Z\u00e4hlerstand zu +A, tariflos, \n; Z\u00e4hlerst\u00e4nde Aufl\u00f6sung 10 \u00b5W*h (6 Vorkomma- und 8 Nachkommastellen)\n1,1-0:1.8.0*255(@0.001,Energie Bezung,Wh,1_8_0,8\n; Z\u00e4hlerstand zu +A, Tarif 1\n1,1-0:1.8.1*255(@0.001,Energie Bezung T1,Wh,1_8_1,8\n; Z\u00e4hlerstand zu +A, Tarif 2\n1,1-0:1.8.2*255(@0.001,Energie Bezung T2,Wh,1_8_2,8\n; Z\u00e4hlerstand zu -A, tariflos\n1,1-0:2.8.0*255(@0.001,Energie Export,Wh,2_8_0,8\n; Summe der Momentan-Leistungen in allen Phasen, Aufl\u00f6sung 0,01W (5 Vorkomma- und 2 Nachkommastellen)\n1,1-0:16.7.0*255(@1,Leistung,W,16_7_0,18\n; Momentane Leistung in Phase Lx, Aufl\u00f6sung 0,01W (5 Vorkomma- und 2 Nachkommastellen)\n1,1-0:36.7.0*255(@1,Leistung L1,W,36_7_0,18\n1,1-0:56.7.0*255(@1,Leistung L2,W,56_7_0,18\n1,1-0:76.7.0*255(@1,Leistung L3,W,76_7_0,18\n; Spannung in Phase Lx, Aufl\u00f6sung 0,1V (nur \u00fcber MSB)\n1,1-0:32.7.0*255(@1,Spannung L1,V,32_7_0,1\n1,1-0:52.7.0*255(@1,Spannung L2,V,52_7_0,1\n1,1-0:72.7.0*255(@1,Spannung L3,V,72_7_0,1\n; Statuswort, 4 Byte Information \u00fcber den Betriebszustand, HEX string\n; tasmota can decode one string per device only!\n;1,1-0:96.5.0*255(@#),Status1,,96_5_0,0\n;1,1-0:96.8.0*255(@#),Status2,,96_8_0,0\n; Ger\u00e4te-Identifikation, Nach DIN 43863-5 \n1,1-0:96.1.0*255(@#),Identifikation,,96_1_0,0\n;1,1-0:0.0.0*255(@#),Identifikation,,0_0_0,0\n#\n</code></pre> For the SM-type meter DD3 2R06 DTA SMZ1 the following script worked without having to apply the above patch, because it uses 8N1 for communication <pre><code>&gt;D\n&gt;B\n;TelePeriod 30\n=&gt;sensor53 r\n&gt;M 1\n; Device: eBZ DD3 2R06 DTA SMZ1\n; protocol is D0 SML HEX\n; 9600@7E1 for OD-type devices, 9600@8N1 for SM-type devices\n+1,13,s,0,9600,SML\n; Z\u00e4hlerstand zu +A, tariflos, \n; Aufl\u00f6sung 10 \u00b5W*h (6 Vorkomma- und 8 Nachkommastellen)\n1,77070100010800FF@100000000,Energie Bezug,kWh,1_8_0,8\n; Z\u00e4hlerstand zu +A, Tarif 1\n; Aufl\u00f6sung 1 W*h (6 Vorkomma- und 3 Nachkommastellen)\n1,77070100010801FF@1000,Energie Bezug NT,kWh,1_8_1,3\n; Z\u00e4hlerstand zu +A, Tarif 2\n; Aufl\u00f6sung 1 W*h (6 Vorkomma- und 3 Nachkommastellen)\n1,77070100010802FF@1000,Energie Bezug HT,kWh,1_8_2,3\n; Z\u00e4hlerstand zu -A, tariflos\n; Aufl\u00f6sung 10 \u00b5W*h (6 Vorkomma- und 8 Nachkommastellen)\n1,77070100020800FF@100000000,Energie Export,kWh,2_8_0,8\n; Summe der Momentan-Leistungen in allen Phasen, Aufl\u00f6sung 0,01W (5 Vorkomma- und 2 Nachkommastellen)\n1,77070100100700FF@1,Leistung,W,16_7_0,18\n; Momentane Leistung in Phase Lx, Aufl\u00f6sung 0,01W (5 Vorkomma- und 2 Nachkommastellen)\n1,77070100240700FF@1,Leistung L1,W,36_7_0,18\n1,77070100380700FF@1,Leistung L2,W,56_7_0,18\n1,770701004C0700FF@1,Leistung L3,W,76_7_0,18\n; Spannung in Phase Lx, Aufl\u00f6sung 0,1V (nur \u00fcber MSB)\n1,77070100200700FF@1,Spannung L1,V,32_7_0,1\n1,77070100340700FF@1,Spannung L2,V,52_7_0,1\n1,77070100480700FF@1,Spannung L3,V,72_7_0,1\n; Statuswort, 4 Byte Information \u00fcber den Betriebszustand, HEX string\n; tasmota can decode one string per device only!\n;1,1-0:96.5.0*255@#),Status1,,96_5_0,0\n;1,1-0:96.8.0*255@#),Status2,,96_8_0,0\n; Hersteller-Identifikation, Hersteller-Kennung und Typ mit Software Version\n;1,77078181C78203FF@#),Herstellerkennung,,Typ,0\n; Eigentumsnummer nach Kundenwunsch, sonst nach DIN 43863-5\n;1,77070100000000FF@#),Eigentumsnummer,,0_0_0,0\n; Ger\u00e4te-Identifikation, Nach DIN 43863-5 \n;1,77070100000009FF@#),Identifikation,,96_1_0,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#ebz-md3-sml","title":"eBZ MD3 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Smartmeter\n1,77070100010800ff@100000000,Total consumption,kWh,Total_in,3\n1,77070100020800ff@100000000,Total generation,kWh,Total_out,3\n1,77070100100700ff@1,Power L1+L2+L3,W,P_L1_L2_L3,18\n1,77070100240700ff@1,Power L1,W,P_L1,18\n1,77070100380700ff@1,Power L2,W,P_L2,18\n1,770701004C0700ff@1,Power L3,W,P_L3,18\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#easymeter-q1a-sml","title":"EasyMeter Q1A (SML)","text":"<p>The Q1A series of EasyMeter is available as one- or two-way meter, with and without backstop respectively. It is also available as single or dual tariff meter. The script below works for the Q1Ax1054 variant. This variant is a single-tariff one-way meter with a backstop mechanism. The script only reads two values: the energy counter value and the current power value.</p> <p>The meter has no bidirectional IR-communication port, only an \"INFO-DSS\" send-only IR-LED. It also has no metal plate to attach a magnet so the IR reader has to be attached in another way.</p> <p>The current power and counter in high resolution are available after PIN entry with a flashlight, see manual.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,SML\n1,77070100010800ff@1000,Zaehlerstand,kWh,Counter,6\n1,77070100100700ff@1,Verbrauch,W,Power,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#easymeter-q1d-ascii-obis","title":"EasyMeter Q1D (ASCII OBIS)","text":"<p>This script is for the EasyMeter Q1DB1004 variant of the Q1D series. This variant is a one-phase one-way electricity counter with a backstop mechanism. </p> <p>Therefore the script reads only two values: the energy counter value and the power value. The power value is positive when you are drawing power from the public grid, and negative when you are feeding power to the public grid. Due to the backstop mechanism, the energy counter value will not decrease when you feed power to the public grid.</p> <p>The meter's manufacturer's datasheet neatly explains the serial message format used, so you can easily adapt the code below to your EasyMeter Q1D, e.g. if you have a two-way counter variant like the EasyMeter Q1DA1026.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,9600,SML\n1,1-0:1.8.0*255(@1,EC_CounterVal,kWh,EC_CounterVal,4\n1,1-0:61.7.255*255(@1,EC_PowerVal,W,EC_PowerVal,0\n#\n</code></pre> <p>According to the manufacturer's datasheet, the serial parameters are 9600 baud and 7E1. </p> <p>For Tasmota versions that are built with a TasmotaSerial.cpp of version 3.5.0 (and probably all higher versions, too), no modification of the TasmotaSerial.cpp source code (as suggested in other entries of this documentation) is necessary to set the serial parameters to 7E1: By configuring the meter type as OBIS (\"o\") in line 5 of the above code, you implicitly tell Tasmota to set the serial parameters to 7E1 (probably the same applies to all other meters in this documentation where a modification of TasmotaSerial.cpp has previously been recommended).</p>"},{"location":"Smart-Meter-Interface/#efr-sgm-dd-4a92t-sml","title":"EFR SGM-DD-4A92T (SML)","text":"<p>Energy provider supplied a PIN code to enable output of additional data.</p> View script <pre><code>&gt;D\n&gt;B\nspinm(4 1)\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,sml\n1,77070100010800FF@1000,Bezug,kWh,Bezug,19\n1,77070100010801FF@1000,Bezug T1,kWh,t1_Bezug,19\n1,77070100010802FF@1000,Bezug T2,kWh,t2_Bezug,19\n1,77070100020800FF@1000,Einspeisung,kWh,Einspeisung,19\n1,77070100020801FF@1000,Einspeisung T1,kWh,t1_Einspeisung,19\n1,77070100020802FF@1000,Einspeisung T2,kWh,t2_Einspeisung,19\n1,77070100100700FF@1,aktuelle Wirkleistung,W,Leistung,16\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#efr-sgm-c2c4d4-sml","title":"EFR SGM-C2/C4/D4 (SML)","text":"<p>By default, the energy meter only sends the total energy values. To be able to read all the other values, you need to enter the PIN and set <code>InF on</code>. The PIN must be requested from the metering provider, which is usually your local grid provider and not your energy provider (but they know whom to ask). After entering the PIN and setting <code>InF on</code>, all the values will be available. The jsonPrefix <code>ENERGY</code> and variable names (between second to last and last <code>,</code>) Total, Power, Voltage and Current are chosen to match the regular MQTT message format, used by tasmota powerplugs. For SGM-C4 or SGM-D4, double-tariff variants or meters measuring supply remove the appropriate leading <code>;</code> to uncomment and enable the values you are interested in.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,ENERGY\n1,77070100010800ff@1000,Comsumption,kWh,Total,4\n;for meters measuring feed-in SGM-Cx-xxx2xx\n;1,77070100020800ff@1000,Supply,kWh,Supply,4\n;next 4 lines for double-tariff meters SGM-Cx-xxxxTx\n;1,77070100010801ff@1000,Comsumption_t1,kWh,Total_t1,4\n;1,77070100010802ff@1000,Comsumption_t2,kWh,Total_t2,4\n;1,77070100020801ff@1000,Supply_t1,kWh,Supply_t1,4\n;1,77070100020802ff@1000,Supply_t2,kWh,Supply_t2,4\n;all commented lines from here on for 3-phase meter SGM-C4\n1,77070100100700ff@1,Actual Power,W,Power,0\n1,77070100200700ff@1,Voltage L1,V,Voltage,1\n;1,77070100340700ff@1,Voltage L2,V,Voltage_L2,1\n;1,77070100480700ff@1,Voltage L3,V,Voltage_L3,1\n1,770701001f0700ff@1,Current L1,A,Current,2\n;1,77070100330700ff@1,Current L2,A,Current_L2,2\n;1,77070100470700ff@1,Current L3,A,Current_L3,2\n;1,77070100510701ff@1,Phaseangle L2-L1,deg,phase_angle_L2_L1,0\n;1,77070100510702ff@1,Phaseangle L3-L1,deg,phase_angle_L3_L1,0\n1,77070100510704ff@1,Phaseangle I/U L1,deg,phase_angle_L1,1 \n;1,7707010051070fff@1,Phaseangle I/U L2,deg,phase_angle_L2,1  \n;1,7707010051071aff@1,Phaseangle I/U L3,deg,phase_angle_L3,1 \n1,770701000e0700ff@1,Frequency,Hz,Freq,1\n;all commented lines from here on just for completeness\n;1,7707010000020000@1,Firmware Version,,FwVer,0\n;1,77070100605a0201@1,Firmware Checksum,,FwCheck,0\n;1,7707010061610000@1,Error Register,,ErrorReg,0\n;1,7707010060320101@1,Hardware Version,,HwVer,0\n;1,7707010060320104@1,Parameter Version,,ParamVer,0\n1,77070100600100ff@#,Server-ID,,ID,0\n;You can find your server-id printed on your meter. If you want you can also convert it to your Identifikationsnummer with some ASCII, DEC and HEX encoding. 0A-01-45-46-52-ST-UV-WX-YZ = 1EFR + string(S) + string(T) + hexToDec(UVWXYZ)\n#\n</code></pre> <p>Overview of the codes </p>"},{"location":"Smart-Meter-Interface/#efr-sgm-d4a920n","title":"EFR SGM-D4A920N","text":"<p>By default, the energy meter only sends the total energy values. To be able to read all the other values, you need to enter the PIN and set <code>InF on</code>. (can be done with \"optical\" button) The PIN must be requested from the metering provider, which is usually your local grid provider and not your energy provider (but they know whom to ask). After entering the PIN and setting <code>InF on</code>, all the values will be available. A few values I wasn't able to figure out, but the most relevant are there. If you want to try this parameters you have to comment out the lines (remove leading ;)</p> View script <pre><code>&gt;D\n&gt;B\nspinm(4 1)\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,sml\n1,77070100010800FF@1000,Bezug (180),kWh,zaehlerstand_180,3\n;1,77070100010801FF@1,Tarif 1 (180),Wh,zaehlerstand_tarif_1_180,3\n;1,77070100010802FF@1,Tarif 2 (180),Wh,zaehlerstand_tarif_2_180,3\n1,77070100020800FF@1000,Einspeisung (280),kWh,zaehlerstand_280,3\n;1,77070100020801FF@1,Tarif 1 (280),Wh,zaehlerstand_tarif_1_280,3\n;1,77070100020802FF@1,Tarif 2 (280),Wh,zaehlerstand_tarif_2_280,3\n1,770701000E0700FF@1,Netz Frequenz,Hz,netz_frequenz,1\n1,77070100100700FF@1,aktuelle Wirkleistung,W,aktuelle_wirkleistung,0\n1,770701001F0700FF@1,Strom L1,A,strom_l1,2\n1,77070100200700FF@1,Spannung L1,V,spannung_l1,1\n1,77070100240700FF@1,Wirkleistung L1,W,wirkleistung_l1,0\n1,77070100330700FF@1,Strom L2,A,strom_l2,2\n1,77070100340700FF@1,Spannung L2,V,spannung_l2,1\n1,77070100380700FF@1,Wirkleistung L2,W,wirkleistung_l2,0\n1,77070100470700FF@1,Strom L3,A,strom_l3,2\n1,77070100480700FF@1,Spannung L3,V,spannung_l3,1\n1,770701004C0700FF@1,Wirkleistung L3,W,wirkleistung_l3,0\n1,77070100510701FF@1,Phasenwinkel U L1/L2,\u00b0,phasenwinkel_u_l1_l2,0\n1,77070100510702FF@1,Phasenwinkel U L1/L3,\u00b0,phasenwinkel_u_l1_l3,0\n1,77070100510704FF@1,Phasenwinkel I/U L1,\u00b0,phasenwinkel_i_u_l1,0\n1,7707010051070FFF@1,Phasenwinkel I/U L2,\u00b0,phasenwinkel_i_u_l2,0\n1,7707010051071AFF@1,Phasenwinkel I/U L3,\u00b0,phasenwinkel_i_u_l3,0\n;1,77070100600100FF@#,Seriennummer,,seriennummer,0\n;1,7707010060320101@#,Hersteller,,hersteller,0\n;1,7707010060320104@#,HW Version,,hw_version,0\n;1,7707010060320204@#,HW Version PCB2,,hw_version,0\n;1,7707010060320404@#,Parameter Version,,parameter_version,0\n;1,77070100605A0201@#,FW Checksum,,fw_checksum,0\n;1,77070100605A0202@#,Unbekannt 2,,unbekanntes_mqtt_topic_2,0\n;1,7707010000020000@#,Firmware Version,,firmwareversion,0\n;1,7707010000020001@#,Unbekannt 1,,unbekanntes_mqtt_topic_1,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#ehzb","title":"eHZB","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,ENERGY\n1,77070100600100FF@#,Meter ID,,ID,0\n1,77070100010800FF@1000,Meter Reading Total,kWh,meter_reading_total,1\n1,77070100020800FF@1000,Negative Active Energy,kWh,neg_active_total,1\n1,770701000E0700FF@1,Net Frequency,Hz,net_frequency,1\n1,77070100100700FF@1,Actual Power,W,actual_power,0\n1,770701001F0700FF@1,Current L1,A,current_l1,2\n1,77070100200700FF@1,Voltage L1,V,voltage_l1,1\n1,77070100240700FF@1,Effective Power L1,W,eff_power_l1,0\n1,77070100330700FF@1,Current L2,A,current_l2,2\n1,77070100340700FF@1,Voltage L2,V,voltage_l2,1\n1,77070100380700FF@1,Effective Power L2,W,eff_power_l2,0\n1,77070100470700FF@1,Current L3,A,current_l3,2\n1,77070100480700FF@1,Voltage L3,V,voltage_l3,1\n1,770701004C0700FF@1,Effective Power L3,W,eff_power_l3,0\n1,77070100510701FF@1,Phase L1/L2,deg,phase_l1_l2,0\n1,77070100510702FF@1,Phase L1/L3,deg,phase_l1_l3,0\n1,77070100510704FF@1,Phase L1,deg,phase_l1,0\n1,7707010051070FFF@1,Phase L2,deg,phase_l2,0\n1,7707010051071AFF@1,Phase L3,deg,phase_l3,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#elster-honeywell-as1440-obis","title":"Elster / Honeywell AS1440 (OBIS)","text":"<p>Based on Landis script with changed timings in the &gt;F section, as AS1440 seems to be slower in responding.</p> <p>This defines metrics for totals and current power usage for both incoming and outgoing power. Just delete the lines you don't need from the last sections. Current power values get published to mqtt immediately when received from the meter.</p> View script <pre><code>&gt;D\nscnt=0\nres=0\n\n&gt;B\n=&gt;sensor53 r\n\n&gt;F\n; count 100ms\nscnt+=1\nswitch scnt\n\n;300ms after start: set sml driver to 300 baud and send /?! as HEX to trigger the Meter\ncase 3\nres=sml(1 0 300)\nres=sml(1 1 \"2F3F210D0A\")\n\n;1700ms later: Ack and ask for switching to 9600 baud\ncase 20\nres=sml(1 1 \"063035300D0A\")\n\n;300ms later: switch sml driver to 9600 baud\ncase 23\nres=sml(1 0 9600)\n\n;6000ms after start: Restart sequence\ncase 60\nscnt=0\n\nends\n\n&gt;M 1\n+1,3,o,0,9600,AS1440,1\n1,1.7.0(@0.001,Power In,W,power_in,16\n1,1.8.1(@1,Total In,kWh,Total_in,1\n1,2.7.0(@0.001,Power Out,W,power_out,16\n1,2.8.1(@1,Total Out,kWh,Total_out,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#elster-f96-plus-sharky-775-ditech-integral-v-ultralite-pro-m-bus","title":"Elster F96 Plus (Sharky 775) (Ditech Integral-V UltraLite PRO) M-Bus","text":"<p>This heat meter needs a wakeup sequence with 2400 Baud 8N1, wheras communication is done by 2400 Baud 8E1. The script will therefore only rund starting with Tasmota 12.2 where switching parity is implemented. For compiling, add the following to your <code>user_config_override.h</code> to increase serial communication buffer size and enable MQTT and Web publishing:</p> View user_config_override.h <pre><code>#ifndef USE_SCRIPT\n#define USE_SCRIPT\n#endif\n#ifndef USE_SML_M\n#define USE_SML_M\n#endif\n#ifdef USE_RULES\n#undef USE_RULES\n#endif\n#ifndef SML_BSIZ\n#define SML_BSIZ 200\n#endif\n#ifndef USE_SML_SCRIPT_CMD\n#define USE_SML_SCRIPT_CMD\n#endif\n#ifndef USE_SCRIPT_JSON_EXPORT\n#define USE_SCRIPT_JSON_EXPORT\n#endif\n#ifndef USE_SCRIPT_WEB_DISPLAY\n#define USE_SCRIPT_WEB_DISPLAY\n#endif\n</code></pre> <p>Delta calculation for previous day is included as the meter shall not be read often when operated with a battery.</p> View script <pre><code>&gt;D\n;start, define variables\ncnt=1\ntimer=1\nw_new=0\nw_delta=0\np:w_last=0\n\n&gt;B\n;setup sensor\n-&gt;sensor53 r\n\n&gt;T\nw_new=WAERME#w_total\n\n&gt;S\ntimer=int(time)\nif chg[timer]&gt;0 \nthen\nswitch timer\ncase 0\nprint It is midnight\nprint wakeup start\nsml(-1 1 \"2400:8N1\")\nfor cnt 1 72 1\nsml(1 1 \"55555555555555555555\")\nnext\nprint wakeup end\nprint wait for the meter\ndelay(350)\nsml(-1 1 \"2400:8E1\")\nprint request data\nsml(1 1 \"105BFE5916\")\ncase 1\nprint It is a minute after midnight\nprint calculating daily value\nprint w_last %0w_last%\nw_delta=w_new-w_last\nw_last=w_new\nsvars\nprint w_new %0w_new%\nprint w_delta %0w_delta%\nends\nendif\n\n&gt;J  \n,\"w_delta\":%w_delta% \n\n&gt;W\n===============\nVortagsverbrauch:    {m} %3w_delta% kWh \n\n&gt;M 1\n+1,3,rE1,0,2400,WAERME,1\n1,0C06bcd8@1,Total Energy,kWh,w_total,0\n1,0C13bcd8@1000,Total volume,m\u00b3,v_total,2\n1,0C2Bbcd8@1,Current power,W,p_act,0\n1,0B3Bbcd6@1000,Current flow,m\u00b3/h,F_akt,3\n1,0A5Abcd4@10,Flow temp,\u00b0C,t_flow,1\n1,0A5Ebcd4@10,Return temp,\u00b0C,t_return,1\n1,0A62bcd4@10,Temp diff,\u00b0C,t_diff,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#elster-honeywell-as2020-sml","title":"Elster / Honeywell AS2020 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,,1\n1,77070100600100ff@#,Server-ID,,Wert,0\n1,77070100010800ff@1000,Total Consumed,kWh,total_consumed_kwh,1\n1,77070100020800ff@1000,Total Delivered,kWh,total_delivered_kwh,1\n1,77070100100700ff@0.1,Current Consumption,W,current_consumption,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#elster-t510-obis","title":"Elster T510 (OBIS)","text":"<p>It seems you can not read the total power like <code>1,1.7.0(@0.001,Leistung,W,Power_curr,0</code>, as the value just alternates between the values of the three phases. So in this script the three phases get added and published as <code>Power_total</code>.</p> View script <pre><code>&gt;D\n;Var for baudrate changing\nres=0\n;Var for counter see &gt;F=ms  \nscnt=0  \n\n&gt;B\n-&gt;sensor53 r\n;Set teleperiod to 20sec  \n;tper=10\n\n&gt;F\n; count 100ms   \nscnt+=1  \nswitch scnt  \ncase 6  \n;set sml driver to 300 baud and send /?! as HEX to trigger the Meter   \nres=sml(1 0 300)  \nres=sml(1 1 \"2F3F210D0A\")  \n\n;1800ms later \\&gt; Ack and ask for switching to 9600 baud  \ncase 18  \nres=sml(1 1 \"063035300D0A\")  \n\n;2000ms later \\&gt; Switching sml driver to 9600 baud    \ncase 20  \nres=sml(1 0 9600)  \n\n;Restart sequence after 50x100ms    \ncase 50  \n; 5000ms later \\&gt; restart sequence    \nscnt=0  \nends  \n\n&gt;M 1\n\n+1,3,o,0,9600,,1\n1,0.0.0(@1,Z\u00e4hlernummer,,Meter_number,0\n1,0.9.1(@#),Zeitstempel,Uhr,timestamp,0\n1,1.8.0(@1,Z\u00e4hlerstand,kWh,Total_in,3\n1,21.7.0(@0.001,Leistung Phase 1,W,Power_L1,0\n1,41.7.0(@0.001,Leistung Phase 2,W,Power_L2,0\n1,61.7.0(@0.001,Leistung Phase 3,W,Power_L3,0\n1,=m 4+5+6 @1,Leistung,W,Power_total,0\n1,31.7.0(@1,Strom Phase 1,A,Current_L1,2\n1,51.7.0(@1,Strom Phase 2,A,Current_L2,2\n1,71.7.0(@1,Strom Phase 3,A,Current_L3,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-ebzd-sml","title":"EMH eBZD (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Main\n1,77070100100700ff@1,Power,W,power,0\n1,77070100010800ff@1000,Total Consumed,kWh,counter_pos,3\n1,77070100020800ff@1000,Total Feed,kWh,counter_neg,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-ed300l-sml","title":"EMH ED300L (SML)","text":"View script <pre><code>&gt;D    \n&gt;B   \n-&gt;sensor53 r  \n&gt;M 2  \n+1,13,s,0,9600,Haus  \n+2,12,s,0,9600,Heizung  \n1,770701000F0700FF@1,Aktuell,W,Power_curr,0  \n1,77070100010800FF@1000,Z\u00e4hlerstand Verb.,kWh,Tariflos,2  \n1,77070100020800FF@1000,Z\u00e4hlerstand Einsp.,kWh,Tariflos,2  \n2,=h==================  \n2,770701000F0700FF@1,Aktuell,W,Power_curr,0  \n2,77070100010800FF@1000,Z\u00e4hlerstand Verb.,kWh,Tariflos,2  \n2,77070100020800FF@1000,Z\u00e4hlerstand Einsp.,kWh,Tariflos,2  \n#    \n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-ed300s-sml","title":"EMH ED300S (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Main\n1,77070100100700ff@1,Power,W,power,0\n1,77070100010800FF@1000,Counter,kWh,counter,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-ehz-generation-k-sml","title":"EMH eHZ Generation K (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,\n1,77070100010800ff@1000,Total consumption,kWh,total_in,2\n1,77070100020800ff@1000,Total feed-in,kWh,total_out,2\n1,77070100100700ff@1,Power,W,power_curr,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-ehzm-sml","title":"EMH eHZM (SML)","text":"<p>Website</p> <p>Datasheet </p> <p>Manual (+OBIS Registers)</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,\n1,77070100600100FF@#,Zaehlernummer,,serialnr,16\n1,77070100010800FF@1000,Pos Wirkenergie tariflos,kWh,pos_wirk_tariflos,1\n1,77070100010801FF@1000,Pos Wirkenergie Tarif 1,kWh,pos_wirk_tarif_1,1\n1,77070100010802FF@1000,Pos Wirkenergie Tarif 2,kWh,pos_wirk_tarif_2,1\n1,77070100020800FF@1000,Neg Wirkenergie tariflos,kWh,neg_wirk_tariflos,1\n1,77070100020801FF@1000,Neg Wirkenergie Tarif 1,kWh,neg_wirk_tarif_1,1\n1,77070100020802FF@1000,Neg Wirkenergie Tarif 2,kWh,neg_wirk_tarif_2,1\n1,77070100100700FF@1,Momentanwirkleistung,W,momentanwirkleistung,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-mme40-sml","title":"EMH mMe4.0 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Main,1,10\n1,77070100010800FF@1000,Total Consumed,kWh,counter_pos,3\n1,77070100020800FF@1000,Total Feed,kWh,counter_neg,3\n1,77070100100700FF@1,Power,W,power,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-diz-w1el-00-km0-0m-200010-e50k-m-bus","title":"EMH DIZ-W1EL-00-KM0-0M-200010-E50/K (M-Bus)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n; ***************************************\n; * EMH DIZ-W1EL-00-KM0-0M-200010-E50/K *\n; ***************************************\n; Serial: 2400 baud\n; Device parity: EVEN\n; Slave address: 001\n; ***************************************\n+1,3,rE1,0,2400,MBUS,1,10,1040014116,105b015c16\n1,68282868080272bcd8@1@1,Z\u00e4hler-Nr.,,0_0_0,0\n1,68282868080272xxxxxxxxa8150002xxxx00008c1006bcd8@1,total energy,kWh,1_8_0,0\n1,68282868080272xxxxxxxxa8150002xxxx00008c1006xxxxxxxx8c2006xxxxxxxxc4002auuUUuuUUs@10000,instantaneous power,kW,1_7_0,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-eiz-gdwl739b-m-bus","title":"EMH EIZ-GDWL739B (M-Bus)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n; ***************************************\n; *   EMH EIZ-GDWL739B                  *\n; ***************************************\n; Serial: 2400 baud\n; Device parity: EVEN\n; Slave address: 001\n; ***************************************\n+1,3,rE1,0,2400,MBUS,1,10,1040014116,105b015c16\n1,68363668080172bcd8@1@1,Z\u00e4hler-Nr.,,0_0_0,0\n1,68363668080172xxxxxxxxa8150002xxxx0000046dxxxxxxxx0422xxxxxxxx0405uuUUuuUUs@10,total energy,kWh,1_8_0,1\n1,68363668080172xxxxxxxxa8150002xxxx0000046dxxxxxxxx0422xxxxxxxx0405xxxxxxxx042auuUUuuUUs@10000,instantaneous power,kW,1_7_0,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#emh-lzqj-xc-obis","title":"EMH LZQJ-XC (OBIS)","text":"<p>Script to read a EMH metering LZQJ-XC smart meter.</p> <p>This script is for a smart meter that is set to \"Protocol mode A\" IEC 62056-21:2002(E) 6.4.1 by the supplier. Therefore it is set to a fixed baud rate of 300 and can not be switched to a higher baudrate.</p> View script <pre><code>&gt;D\nres=0\nscnt=0\n\n&gt;B\n=&gt;sensor53 r\n\n&gt;F\n;F section is executed every 100ms\nscnt+=1\nswitch scnt\n;300ms after start: set sml driver to 300 baud and send /?! as HEX to trigger the Meter.\ncase 3\n;Statt in &gt;M Sektion hier den Z\u00e4hler alle 300s triggern. \n;Denn das Kommando \"+1,5,o,0,300,METER,4,3000,2F3F210D0A\" in &gt;M Sektion funktioniert nicht richtig - &lt;txPeriod&gt; = 3000 wird nicht angewendet. \n;Der Z\u00e4hler wird sofort nach dem Auslesen (nach 261s) erneut getriggert, was zu einem Versatz in den Messwerten f\u00fchrt.\nres=sml(1 0 300)\nres=sml(1 1 \"2F3F210D0A\")\n;300000ms after start: Restart sequence\ncase 3000\nscnt=0\nends\n\n&gt;M 1\n; Device: EMH metering LZQJ-XC\n; protocol is OBIS ASCII\n; Ger\u00e4t mit hex \"2F3F210D0A\" = ASCII \"/?!\" aufwecken.\n; Zaehler EMH LZQJ-XC arbeitet im \"Protocol mode A\" IEC 62056-21:2002(E) 6.4.1\n; mit einer festen Baudrate von 300 Baud und kann nicht umgeschaltet werden\n; Zaehler EMH LZQJ-XC auslesen dauert 4:21 Minuten. Kuerzere TelePeriod als 300sek/5min daher nicht sinnvoll.\n\n+1,5,o,0,300,METER,4\n1,0.0.0(@1,Z\u00e4hler-Nr.,,0_0_0,0\n1,0.0.9(@#),Z\u00e4hler-ID,,0_0_9,0\n1,0.9.1(@1),Uhrzeit,,0_9_1,0\n1,0.9.2(@1),Datum,,0_9_1,0\n\n1,1.6.1(@1,MaxBezugT1,kW,1_6_1,3\n1,1.6.2(@1,MaxBezugT2,kW,1_6_2,3\n\n1,1.8.0(@1,WirkEnBezug,kWh,1_8_0,3\n1,1.8.1(@1,WirkEnBezugNT,kWh,1_8_1,3\n1,1.8.2(@1,WirkEnBezugHT,kWh,1_8_2,3\n\n1,2.6.1(@1,MaxEinspT1,kW,2_6_1,3\n1,2.6.2(@1,MaxEinspT2,kW,2_6_2,3\n\n1,2.8.0(@1,WirkEnEinsp,kWh,2_8_0,3\n1,2.8.1(@1,WirkEnEinspNT,kWh,2_8_1,3\n1,2.8.2(@1,WirkEnEinspHT,kWh,2_8_2,3\n\n1,3.8.0(@1,BlindEnBezug,kvarh,3_8_0,3\n1,3.8.1(@1,BlindEnBezugT1,kvarh,3_8_1,3\n1,3.8.2(@1,BlindEnBezugT2,kvarh,3_8_2,3\n\n1,4.8.0(@1,BlindEnEinsp,kvarh,4_8_0,3\n1,4.8.1(@1,BlindEnEinspT1,kvarh,4_8_1,3\n1,4.8.2(@1,BlindEnEinspT2,kvarh,4_8_2,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#finder-7m38-series-bi-directional-multi-functional-energy-meter","title":"Finder 7M.38 Series bi-directional multi-functional energy meter","text":"<p>A Finder 7M.38 series energy meter can be read out using Modbus. To use it, a RS485 converter is needed to interface to an ESPs serial IOs.</p> <p>Official Product Finder 7M.38 Series</p> <p>The amount of values collected by this energy meter is huge, any value offered can be added by adding the adresses in the script. For further values and their corresponding adresses consult the official manual.</p>"},{"location":"Smart-Meter-Interface/#modbus-serial-configuration","title":"Modbus Serial Configuration","text":"<p>Make sure you set the correct parameters on your meter. Either via NFC (Finder Toolbox App) or directly with the touch button on the device.</p> <p>The following sample scripts will use this parameters - Baudrate 115200 - Stopbits 1 - Parity even</p> <p>In short: 115200 baud, 8E1</p>"},{"location":"Smart-Meter-Interface/#hardware-connection","title":"Hardware connection","text":"<p>Connect the hardware with an ESP8266 as follows, make sure GPIO1 and GPIO3 are not assigned so the script can use them.</p> <p></p> <p>Connect the hardware with an ESP32-C3 as follows, make sure GPIO20 and GPI21 are not assigned so the script can use them.</p> <p></p>"},{"location":"Smart-Meter-Interface/#script-explanation","title":"Script explanation","text":"<p>The following line should ouput apparent power of phase 2. This value is given as in the registers 2548 and 2549. Encoding is T_float meaning a IEEE 754 Floating-Point Single Precision Value (32 bit). The leading 45 is 0x45 (0d69) the address of the Modbus device. 04 refers to the Modbus function code. ffffffff converts the values into a float. i14 is the 15th value (count from 0) requested in the main meter line (see 450409F2) where 0x09F2 (0d2548) is the starting address of the desired register.</p> <pre><code>```\n1,450404ffffffff@i14:1,Apparent_Power_S_L2,var,sl2,3\n```\n</code></pre> <p>Breakdown</p> <ul> <li>1 refers to meter 1</li> <li>450404 refers to Modbus device address 0x45 (0d69) and Modbus function code 04</li> <li>ffffffff converts the register contents to float</li> <li>i14 refers to the index 14 of all requested registers (see first meter line 15th entry (count from 0) -&gt; 450409F2)</li> <li>1 is scaling with 1, here with no effect</li> <li>Apparent_Power_S_L2 is the label in the web ui</li> <li>var is the unit in the web ui</li> <li>sl2 is the label for the measurement</li> </ul>"},{"location":"Smart-Meter-Interface/#sample-script-three-phase-system","title":"Sample script three phase system","text":"<p>Full script using a three phase system with L1, L2, L3</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,M,0,115200,Finder,1,10,450300CA,45040A62,450409C2,450409C4,450409C6,450409C8,450409D4,450409D6,450409D8,450409EA,450409EC,450409EE,450409F0,450409F2,450409F4,450409F6,450409F8,450409E2,450409E4,450409E6,450409BA,450409FA,450409FC,450409FE,45040A00,45040AC0,45040AC2\n1,450304UUuu@i0:1,Modbus_Address,,MBaddress,0\n1,450404ffffffff@i1:1,Temperature,\u00b0C,temperature,2\n1,450404ffffffff@i2:1,Frequency,Hz,freq,3\n1,450404ffffffff@i3:1,Voltage_L1,V,U1,2\n1,450404ffffffff@i4:1,Voltage_L2,V,U2,2\n1,450404ffffffff@i5:1,Voltage_L3,V,U3,2\n1,450404ffffffff@i6:1,Current_L1,A,i1,3\n1,450404ffffffff@i7:1,Current_L2,A,i2,3\n1,450404ffffffff@i8:1,Current_L3,A,i3,3\n1,450404ffffffff@i9:1,Reactive_Power_Q_L1,VAR,ql1,3\n1,450404ffffffff@i10:1,Reactive_Power_Q_L2,VAR,ql2,3\n1,450404ffffffff@i11:1,Reactive_Power_Q_L3,VAR,ql3,3\n1,450404ffffffff@i12:1,Reactive_Power_Total,VAR,qt,3\n1,450404ffffffff@i13:1,Apparent_Power_S_L1,VA,sl1,3\n1,450404ffffffff@i14:1,Apparent_Power_S_L2,VA,sl2,3\n1,450404ffffffff@i15:1,Apparent_Power_S_L3,VA,sl3,3\n1,450404ffffffff@i16:1,Apparent_Power_Total,VA,st,3\n1,450404ffffffff@i17:1,Active_Power_L1,W,pl1,3\n1,450404ffffffff@i18:1,Active_Power_L2,W,pl2,3\n1,450404ffffffff@i19:1,Active_Power_L3,W,pl3,3\n1,450404ffffffff@i20:1,Active_Power_Total,W,pt,3\n1,450404ffffffff@i21:1,Power_Factor_L1,,pfl1,3\n1,450404ffffffff@i22:1,Power_Factor_L2,,pfl2,3\n1,450404ffffffff@i23:1,Power_Factor_L3,,pfl3,3\n1,450404ffffffff@i24:1,Power_Factor_Total,,pft,3\n1,450404ffffffff@i25:1000,Energy_Total_In_1_8_0,kWh,eti180,2\n1,450404ffffffff@i26:1000,Energy_Total_Out_2_8_0,kWh,eto280,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sample-script-single-phase-system","title":"Sample script single phase system","text":"<p>Using a three phase energy meter in a single phase system requires using phase 3 only. See Finder 7M.38 Series manual, page 12 image 6.</p> <p>Full script using a single phase system with L3 as single phase</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,M,0,115200,Finder,1,10,450300CA,45040A62,450409C2,450409C8,450409D8,450409F0,450409F8,450409BA,45040A00,45040AC0,45040AC2\n1,450304UUuu@i0:1,Modbus_Address,,MBaddress,0\n1,450404ffffffff@i1:1,Temperature,\u00b0C,temperature,2\n1,450404ffffffff@i2:1,Frequency,Hz,freq,3\n1,450404ffffffff@i3:1,Voltage_L3,V,U3,2\n1,450404ffffffff@i4:1,Current_L3,A,i3,3\n1,450404ffffffff@i5:1,Reactive_Power_Total,VAR,qt,3\n1,450404ffffffff@i6:1,Apparent_Power_Total,VA,st,3\n1,450404ffffffff@i7:1,Active_Power_Total,W,pt,3\n1,450404ffffffff@i8:1,Power_Factor_Total,,pft,3\n1,450404ffffffff@i9:1000,Energy_Total_In_1_8_0,kWh,eti180,2\n1,450404ffffffff@i10:1000,Energy_Total_Out_2_8_0,kWh,eto280,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#fronius-symo-100-3-m-modbus-tcp","title":"Fronius Symo 10.0-3-M (MODBus TCP)","text":"<p>Fronius inverter, using Modbus TCP feature.</p> <p>For this script the inverter must be configured to use Sunspec Model Type \"int+SF\"</p> View script <pre><code>&gt;D 48\n&gt;B\n=&gt;sensor53 r\n&gt;M 2\n+1,[192.168.3.38],m,0,502,mod1,1,10,r01039C870015\n1,=so3,128\n1,01032aUUuu@i0:1,AC Current,A,AC_Current,0\n1,01032ax2UUuu@i0:1,Phase 1 Current,A,Phase_1_Current,0\n1,01032ax4UUuu@i0:1,Phase 2 Current,A,Phase_2_Current,0\n1,01032ax6UUuu@i0:1,Phase 3 Current,A,Phase_3_Current,0\n1,01032ax8SSss@i0:1,Curr Scale Fctr,SF,Curr_SF,0\n1,01032ax16UUuu@i0:1,Phase 1 Voltage,A,Phase_1_Voltage,0\n1,01032ax18UUuu@i0:1,Phase 2 Voltage,A,Phase_2_Voltage,0\n1,01032ax20UUuu@i0:1,Phase 3 Voltage,A,Phase_3_Voltage,0\n1,01032ax22SSss@i0:1,Vltg Scale Fctr,SF,Vltg_SF,0\n1,01032ax24UUuu@i0:1,Output Power,W,Output_Power,0\n1,01032ax26SSss@i0:1,Pwr Scale Fctr,SF,Pwr_SF,0\n1,01032ax28UUuu@i0:1,Frequency,Hz,Frequency,0\n1,01032ax30SSss@i0:1,Freq Scale Fctr,SF,Freq_SF,0\n1,01032ax36UUuu@i0:1,Temperature,C,Temperature,0\n1,01032ax38SSss@i0:1,Temp Scale Fctr,SF,Temp_SF,0\n+2,[192.168.3.23],m,0,502,mod2,1,10,r01039C870015\n2,=so3,128\n2,01032aUUuu@i0:1,AC Current,A,AC_Current,0\n2,01032ax2UUuu@i0:1,Phase 1 Current,A,Phase_1_Current,0\n2,01032ax4UUuu@i0:1,Phase 2 Current,A,Phase_2_Current,0\n2,01032ax6UUuu@i0:1,Phase 3 Current,A,Phase_3_Current,0\n2,01032ax8SSss@i0:1,Curr Scale Fctr,SF,Curr_SF,0\n2,01032ax16UUuu@i0:1,Phase 1 Voltage,A,Phase_1_Voltage,0\n2,01032ax18UUuu@i0:1,Phase 2 Voltage,A,Phase_2_Voltage,0\n2,01032ax20UUuu@i0:1,Phase 3 Voltage,A,Phase_3_Voltage,0\n2,01032ax22SSss@i0:1,Vltg Scale Fctr,SF,Vltg_SF,0\n2,01032ax24UUuu@i0:1,Output Power,W,Output_Power,0\n2,01032ax26SSss@i0:1,Pwr Scale Fctr,SF,Pwr_SF,0\n2,01032ax28UUuu@i0:1,Frequency,Hz,Frequency,0\n2,01032ax30SSss@i0:1,Freq Scale Fctr,SF,Freq_SF,0\n2,01032ax36UUuu@i0:1,Temperature,C,Temperature,0\n2,01032ax38SSss@i0:1,Temp Scale Fctr,SF,Temp_SF,0\n#\n</code></pre> <p>Use this script when the inverter is configured to use Sunspec Model Type \"float\":</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n\n&gt;M 1\n+1,[192.168.2.251],m,0,502,FRONIUS,0,100,r01039C870020\n1,=so3,80\n1,010340ffffffff@i0:1,AC Current,A,11_7_0,3\n1,010340x4ffffffff@i0:1,L1 Current,A,31_7_0,3\n1,010340x8ffffffff@i0:1,L2 Current,A,51_7_0,3\n1,010340x12ffffffff@i0:1,L3 Current,A,71_7_0,3\n1,010340x28ffffffff@i0:1,L1 Voltage,V,32_7_0,2\n1,010340x32ffffffff@i0:1,L2 Voltage,V,52_7_0,2\n1,010340x36ffffffff@i0:1,L3 Voltage,V,72_7_0,2\n1,010340x40ffffffff@i0:1000,Output Power,kW,2_7_0,3\n1,010340x44ffffffff@i0:1,Frequency,Hz,14_7_0,3\n1,010340x48ffffffff@i0:1000,Apparent Power,kVA,9_7_0,3\n1,010340x52ffffffff@i0:1000,Reactive Power,kVAr,4_7_0,3\n1,010340x56ffffffff@i0:1,Power Factor,,13_7_0,3\n1,010340x60ffffffff@i0:1000,AC Lifetime En,kWh,2_8_0,3\n#    \n</code></pre>"},{"location":"Smart-Meter-Interface/#growatt-max4200-modbus","title":"Growatt MAX4200 (MODBus)","text":"<p>Growatt solar inverter. this example also shows how to send cmds to modbus  </p> View script <pre><code>&gt;D 22\n\ncstr=\"\"\ngl=0\ntmp=0\n\n&gt;B\n=&gt;sensor53 r\n\n\n&gt;S\nif chg[gl]&gt;0 {\n    ; change limit\n    tmp=int(gl/42)\n    cstr=\"r0106000300\"+hn(tmp)\n    sml(1 3 cstr)\n}\n\n&gt;M 1\n+1,18,m,0,9600,GRW,19,5,01040026,01040028,01040005,01040009,01030003\n1,010404UUuu@i0:10,Netzspannung,V,mainsv,1\n1,010404xxxxUUuu@i0:10,Einspeisestrom,A,mainsc,1\n1,010404UUuuUUuu@i1:10,Einspeiseleistung,W,mainsw,1\n1,010404UUuuUUuu@i2:10,string 1 unten,W,s1w,1\n1,010404UUuuUUuu@i3:10,string 2 oben,W,s2w,1\n1,010304UUuu@i4:1,limit,%,limit,0\n#\n\n&gt;W\n&lt;hr&gt;\nnm(1000 3600 10 gl \"Growatt limit (W) \" 80 0) \n</code></pre>"},{"location":"Smart-Meter-Interface/#hager-ehz161-ehz361-obis","title":"Hager EHZ161 / EHZ361 (OBIS)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,9600,OBIS\n1,1-0:0.0.0*255(@#),Meter Number,,meter_number,0\n1,1-0:1.8.0*255(@1,Power Consumption A+,kWh,zaehler_a+,4\n1,1-0:2.8.0*255(@1,Power Feed A-,kWh,zaehler_a-,4\n1,1-0:32.7.0*255(@1,Volt_L1,V,volt_l1,2\n1,1-0:52.7.0*255(@1,Volt_L2,V,volt_l2,2\n1,1-0:72.7.0*255(@1,Volt_L3,V,volt_l3,2\n1,1-0:31.7.0*255(@1,Ampere_L1,A,volt_l1,2\n1,1-0:51.7.0*255(@1,Ampere_L2,A,volt_l2,2\n1,1-0:71.7.0*255(@1,Ampere_L3,A,volt_l3,2\n1,1-0:21.7.0*255(@1,Watt_L1,W,watt_l1,0\n1,1-0:41.7.0*255(@1,Watt_L2,W,watt_l2,0\n1,1-0:61.7.0*255(@1,Watt_L3,W,watt_l3,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#hager-ehz363","title":"Hager EHZ363","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,SML\n1,77070100010800ff@1000,Total consumption,kWh,Total_in,4\n1,77070100020800ff@1000,Total Feed,kWh,Total_out,4\n1,77070100100700ff@1,Current consumption,W,Power_curr,0\n1,77070100200700ff@1,Voltage L1,V,Volt_p1,1\n1,77070100340700ff@1,Voltage L2,V,Volt_p2,1\n1,77070100480700ff@1,Voltage L3,V,Volt_p3,1\n1,770701001f0700ff@1,Amperage L1,A,Amperage_p1,1\n1,77070100330700ff@1,Amperage L2,A,Amperage_p2,1\n1,77070100470700ff@1,Amperage L3,A,Amperage_p3,1\n1,77070100510704ff@1,Phaseangle I-L1/U-L1,deg,phase_angle_p1,1 \n1,7707010051070fff@1,Phaseangle I-L27I-L2,deg,phase_angle_p2,1  \n1,7707010051071aff@1,Phaseangle I-L3/I-L3,deg,phase_angle_p3,1 \n1,770701000e0700ff@1,Frequency,Hz,frequency,0\n#\n</code></pre> SML with daily values <pre><code>&gt;D  \npin=0  \npout=0  \npi_d=0  \npo_d=0  \nhr=0  \n; permanent midnight values  \np:pi_m=0  \np:po_m=0  \n&gt;B  \n-&gt;sensor53 r  \n&gt;T  \n; get total consumption and total feed  \npin=SML#Total_in  \npout=SML#Total_out  \n&gt;S  \n; at midnight, save meter total values  \nhr=hours  \nif chg[hr]&gt;0  \nand hr==0  \nthen  \npi_m=pin  \npo_m=pout  \nsvars  \nendif  \n; on teleperiod calculate current daily values from midnight  \nif upsecs%tper==0  \nthen  \npi_d=pin-pi_m  \npo_d=pout-po_m  \nendif  \n; show these values on WEB UI  \n&gt;W  \nTagesverbrauch: {m} %pi_d% kWh  \nTageseinspeisung: {m} %po_d% kWh    \n; transmit these values with MQTT  \n&gt;J  \n,\"daily_consumption\":%pi_d%,\"daily_feed\":%po_d%  \n; meter definition  \n&gt;M 1  \n+1,3,s,0,9600,SML  \n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,4  \n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,4  \n1,77070100100700ff@1,Current Consumption,W,Power_curr,0  \n1,77070100000009ff@#,Meter Number,,Meter_number,0  \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#hiking-dds238-2-zns3-4x-modbus","title":"Hiking DDS238-2 ZN/S3 4x (MODBus)","text":"<p>This is an example for 4 MODBus devices on the same bus (at different addresses).</p> Wiring diagram <p></p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,1,9600,Hiking,1,10,0103000c,0103000e,0303000c,0303000e,0403000c,0403000e,0503000c,0503000e\n;---&gt; two groups of registers for each device --&gt; default 2 registers returned ---&gt; 4 values per device\n1,=h Contatore 1\n1,010304UUuu@i0:10,C1_Voltage,V,C1Voltage,1\n;---&gt; decoder for the first registry returned for the first group\n1,010304xxxxUUuu@i0:1000,C1_Current,A,C1Current,3\n;---&gt; decoder for the second registry returned for the first group\n1,010304SSss@i1:1,C1_ActivePower,W,C1ActivePower,0\n1,010304xxxxUUuu@i1:1,C1_ReactivePower,Var,C1ReactivePower,0\n1,=h Contatore 3\n1,030304UUuu@i2:10,C3_Voltage,V,C3Voltage,1\n1,030304xxxxUUuu@i2:1000,C3_Current,A,C3Current,3\n1,030304SSss@i3:1,C3_ActivePower,W,C3ActivePower,0\n1,030304xxxxUUuu@i3:1,C3_ReactivePower,Var,C3ReactivePower,0\n1,=h Contatore 4\n1,040304UUuu@i4:10,C4_Voltage,V,C4Voltage,1\n1,040304xxxxUUuu@i4:1000,C4_Current,A,C4Current,3\n1,040304SSss@i5:1,C4_ActivePower,W,C4ActivePower,0\n1,040304xxxxUUuu@i5:1,C4_ReactivePower,Var,C4ReactivePower,0\n1,=h Contatore 5\n1,050304UUuu@i6:10,C5_Voltage,V,C5Voltage,1\n1,050304xxxxUUuu@i6:1000,C5_Current,A,C5Current,3\n1,050304SSss@i7:1,C5_ActivePower,W,C5ActivePower,0\n1,050304xxxxUUuu@i7:1,C5_ReactivePower,Var,C5ReactivePower,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#holley-dtz541-sml","title":"Holley DTZ541 (SML)","text":"<p>This script reads pretty much all given information. Make sure to enable <code>info</code> in the settings, otherwise you only get total / current consuption and total export.</p> <p>This script was used and tested on a WeMos D1 mini with an IR Head connected to the RX pin (3).</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,SML\n1,77070100600100ff@#,Server ID,,server_id,0\n1,77070100020800ff@1000,Export (Total),kWh,export_total_kwh,4\n1,77070100010800ff@1000,Consumption (Total),kWh,total_kwh,4\n1,77070100100700ff@1,Consumption (Current),W,curr_w,0\n1,77070100200700ff@1,Voltage L1,V,volt_p1,1\n1,77070100340700ff@1,Voltage L2,V,volt_p2,1\n1,77070100480700ff@1,Voltage L3,V,volt_p3,1\n1,770701001f0700ff@1,Amperage L1,A,amp_p1,1\n1,77070100330700ff@1,Amperage L2,A,amp_p2,1\n1,77070100470700ff@1,Amperage L3,A,amp_p3,1\n1,77070100510701ff@1,Phase angle U-L2/U-L1,deg,phase_angle_l2_l1,1\n1,77070100510702ff@1,Phase angle U-L3/U-L1,deg,phase_angle_l3_l1,1\n1,77070100510704ff@1,Phase angle I-L1/U-L1,deg,phase_angle_p1,1\n1,7707010051070fff@1,Phase angle I-L2/U-L2,deg,phase_angle_p2,1\n1,7707010051071aff@1,Phase angle I-L3/U-L3,deg,phase_angle_p3,1\n1,770701000e0700ff@1,Frequency,Hz,freq,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#holley-dtz541-zdba-sml","title":"Holley DTZ541-ZDBA (SML)","text":"<p>This meter differatiates between day and night time consumption. The script is based on the DTZ541. Look above for more information. </p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,SML\n1,77070100600100ff@#,Server ID,,server_id,0\n1,77070100020800ff@1000,Export (Total),kWh,export_total_kwh,4\n1,77070100010802ff@1000,Night (Total),kWh,total_night_kwh,4\n1,77070100010801ff@1000,Day (Total),kwH,total_day_kwh,4\n1,77070100100700ff@1,Consumption (Current),W,curr_w,0\n1,77070100200700ff@1,Voltage L1,V,volt_p1,1\n1,77070100340700ff@1,Voltage L2,V,volt_p2,1\n1,77070100480700ff@1,Voltage L3,V,volt_p3,1\n1,770701001f0700ff@1,Amperage L1,A,amp_p1,1\n1,77070100330700ff@1,Amperage L2,A,amp_p2,1\n1,77070100470700ff@1,Amperage L3,A,amp_p3,1\n1,77070100510701ff@1,Phase angle U-L2/U-L1,deg,phase_angle_l2_l1,1\n1,77070100510702ff@1,Phase angle U-L3/U-L1,deg,phase_angle_l3_l1,1\n1,77070100510704ff@1,Phase angle I-L1/U-L1,deg,phase_angle_p1,1\n1,7707010051070fff@1,Phase angle I-L2/U-L2,deg,phase_angle_p2,1\n1,7707010051071aff@1,Phase angle I-L3/U-L3,deg,phase_angle_p3,1\n1,770701000e0700ff@1,Frequency,Hz,freq,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#holley-ehz541-be-sml","title":"Holley EHZ541-BE (SML)","text":"<p>This Meter is sending negative values similiar to the DTZ541 model, you have to use the special option 1 (so1) as described in the 'special commands' section. Make sure to acquire the PIN from your energyprovider. </p> <p>After unlocking the meter, you can run the following script</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,SML\n1,77070100600100ff@#,Server ID,,server_id,0\n1,77070100010800ff@1000,Consumption (Total),kWh,total_kwh,4\n1,=so1,00010800,65,11,65,11,00100700\n1,77070100100700ff@1,Consumption (Current),W,curr_w,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#huawei-sun2000-10ktl-modbus","title":"Huawei SUN2000-10KTL (MODBus)","text":"<p>For writing 32-bit registers like 40126, use ModBus Bridge driver and send two 16-bit numbers. i.e. <code>modbussend {\"deviceaddress\": 1, \"functioncode\": 16, \"startaddress\":40126, \"type\":\"int16\", \"count\":2, \"values\":[\"0\",\"6666\"]}</code> </p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,0,9600,modbus,1,10,r01037D100004,01037D00,01037D08,01037D40,r01037D450003,r01037D48000A,01037D55,01037D57,01037D59,01037D6A,01037D72\n1,010308SSss@i0:10,PV1 Voltage,V,PV1_Voltage,1\n1,010308x2SSss@i0:100,PV1 Current,A,PV1_Current,2\n1,010308x4SSss@i0:10,PV2 Voltage,V,PV2_Voltage,1\n1,010308x6SSss@i0:100,PV2 Current,A,PV2_Current,2\n1,010304UUuu@i1:1,State Code,SC,State_Code,0\n1,010304UUuuUUuu@i2:1,Error Code,EC,Error_Code,0\n1,010304SSssSSss@i3:1,Input Power,W,Input_Power,0\n1,010306UUuu@i4:10,Phase 1 Voltage,V,Phase_1_Voltage,1\n1,010306x2UUuu@i4:10,Phase 2 Voltage,V,Phase_2_Voltage,1\n1,010306x4UUuu@i4:10,Phase 3 Voltage,V,Phase_3_Voltage,1\n1,010314SSssSSss@i5:1000,Phase 1 Current,A,Phase_1_Current,2\n1,010314x4SSssSSss@i5:1000,Phase 2 Current,A,Phase_2_Current,2\n1,010314x8SSssSSss@i5:1000,Phase 3 Current,A,Phase_3_Current,2\n1,010314x16SSssSSss@i5:1,Active Power,W,Active_Power,0\n1,010304UUuu@i6:100,Frequency,Hz,Frequency,2\n1,010304SSss@i7:10,Internal Temperature,c,Internal_Temperature,1\n1,010304UUuu@i8:1,Status Code,SC,Status_Code,0\n1,010304UUuuUUuu@i9:100,Total Yield,TY,Total_Yield,2\n1,010304UUuuUUuu@i10:100,Daily Yield,DY,Daily_Yield,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#inepro-pro380-mod-modbus","title":"inepro PRO380-Mod (MODBus)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n\n&gt;M 1    \n+1,3,M,0,9600,MODBUS,1,1,01035002,01035004,01035006,01035008,0103500C,0103500E,01035010,01035012,01035014,01035016,01035018,0103501A,0103501C,0103501E,01035020,01035022,01035024,01035026,01035028,0103502A,0103502C,0103502E,01035030,0103600C,01036018,01036030,0103603C\n; ***************************************\n; *   inepro PRO380-Mod Energy Meter    *\n; ***************************************\n; Serial: 9600\n; Device parity: EVEN\n; Slave address: 0x01\n; ***************************************\n1,010304ffffffff@i0:1,L1 Voltage,V,32_7_0,3\n1,010304ffffffff@i1:1,L2 Voltage,V,52_7_0,3\n1,010304ffffffff@i2:1,L3 Voltage,V,72_7_0,3\n1,010304ffffffff@i3:1,Grid frequency,Hz,14_7_0,3\n1,010304ffffffff@i4:1,L1 Current,A,31_7_0,3\n1,010304ffffffff@i5:1,L2 Current,A,51_7_0,3\n1,010304ffffffff@i6:1,L3 Current,A,71_7_0,3\n1,010304ffffffff@i7:1,Tot act power,kW,1_7_0,3\n1,010304ffffffff@i8:1,L1 Act power,kW,21_7_0,3\n1,010304ffffffff@i9:1,L2 Act power,kW,41_7_0,3\n1,010304ffffffff@i10:1,L3 Act power,kW,61_7_0,3\n1,010304ffffffff@i11:1,Tot react power,kvar,3_7_0,3\n1,010304ffffffff@i12:1,L1 react power,kvar,23_7_0,3\n1,010304ffffffff@i13:1,L2 react power,kvar,43_7_0,3\n1,010304ffffffff@i14:1,L3 react power,kvar,63_7_0,3\n1,010304ffffffff@i15:1,Tot appar power,kVA,9_7_0,3\n1,010304ffffffff@i16:1,L1 appar power,kVA,29_7_0,3\n1,010304ffffffff@i17:1,L2 appar Power,kVA,49_7_0,3\n1,010304ffffffff@i18:1,L3 appar Power,kVA,69_7_0,3\n1,010304ffffffff@i19:1,Power factor,,13_7_0,3\n1,010304ffffffff@i20:1,L1 Power factor,,33_7_0,3\n1,010304ffffffff@i21:1,L2 Power factor,,53_7_0,3\n1,010304ffffffff@i22:1,L3 Power factor,,73_7_0,3\n1,010304ffffffff@i23:1,Forw act en,kWh,1_8_0,3\n1,010304ffffffff@i24:1,Rev act en,kWh,2_8_0,3\n1,010304ffffffff@i25:1,Forw react en,kvarh,3_8_0,3\n1,010304ffffffff@i26:1,Rev react en,kvarh,4_8_0,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-am550","title":"Iskra AM550","text":"<p>(Wiener Netze)</p> <p>Based on the spec found at Wiener Netze</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,r,0,9600,HHStrom\n1,=so3,256\n1,=so4,&lt;your key&gt;\n1,0209090cUUuu@1,year,,year,0\n1,0209090cx2ss@1,month,,month,0\n1,0209090cx3ss@1,day,,day,0\n1,0209090cx5ss@1,hh,,hh,0\n1,0209090cx6ss@1,mm,,mm,0\n1,0209090cx7ss@1,ss,,ss,0\n1,0209090cx13UUuuUUuu@1000,Z\u00e4hlerstand,kWh,Zaehlerstand,3\n1,0209090cx18UUuuUUuu@1000,Einspeisung,kWh,Einspeisung,3\n1,0209090cx23UUuuUUuu@1000,Blindenergie,varh,Blindenergie,3\n1,0209090cx28UUuuUUuu@1000,Blindenergie einsp,varh,Blindenergie einsp,3\n; Letzter Paramater (Precision) = add 16 to send data immediately 0 + 16 = 16\n1,0209090cx33UUuuUUuu@1,Momentanleistung,W,Momentanleistung,16\n1,0209090cx38UUuuUUuu@1,Einspeiseleistung,W,Einspeiseleistung,0\n1,0209090cx43UUuuUUuu@1,Blindleistung,var,Blindleistung,0\n1,0209090cx48UUuuUUuu@1,Blindleistung einsp,var,Blindleistung einsp,0\n#\n</code></pre> <p>You need to adapt the identifier string at the beginning of the decoding lines ('0209090c' here) to the code shown in your dump.</p> <p>To start the dump enter 'sensor53 d1' in the Console, to stop it 'sensor53 d0'. The dump delivers something like:</p> <pre><code>18:12:11.474 SML: decrypted block: 56 bytes\n18:12:11.476 :&gt;02 09 09 0c 07 e8 0b 0e 04 12 0c 0c 00 ff c4 00 \n18:12:11.477 :&gt;06 00 01 5a b1 06 00 03 db c9 06 00 00 3d 1b 06 \n18:12:11.479 :&gt;00 02 7b e4 06 00 00 00 11 06 00 00 00 00 06 00 \n18:12:11.481 :&gt;00 00 00 06 00 00 00 ba \n18:12:11.523 :&gt;00 00 00 06 00 00 00 ba \n</code></pre> <p>As long as you don't get this dump, either the interface is not operational or the provided code from your provider is wrong.</p> <p>Take the first four bytes from your dump ('02 09 09 0c\u00b4 here) and adapt the script.</p> <p>Be aware that the data sent has separator-bytes between the values (`04' and \u00b406'). And the last line seems repeated.</p> <p>This is the interpreted dump:</p> Obis Data Value Key(?) 02 09 09 0c year 07 e8 2024 month 0b 11 day 0e 14 sep 04 hh 12 18 mm 0c 12 ss 0c 12 (??) 00 ff c4 00 06 +A 00 01 5a b1 06 88753 -A 00 03 db c9 06 252873 +R 00 00 3d 1b 06 15643 -R 00 02 7b e4 06 16278817 +P 00 00 00 11 06 17 -P 00 00 00 00 06 0 +Q 00 00 00 00 06 0 -Q 00 00 00 ba 186"},{"location":"Smart-Meter-Interface/#iskra-mt-174-obis","title":"Iskra MT 174 (OBIS)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,STROM,1,100,2F3F210D0A\n1,1-0:1.8.1*255(@1,Total Consumed,kWh,Total_in,3\n1,1-0:2.8.1*255(@1,Total Delivered,kWh,Total_out,3\n1,1-0:0.0.0*255(@#),Meter Number,,Meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-mt-175-sml","title":"Iskra MT 175 (SML)","text":"<p>This meter needs a PIN to unlock the current power usage. You need to ask your provider.  </p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,16,9600,MT175\n1,77070100010800ff@1000,E_in,kWh,E_in,1\n1,77070100020800ff@1000,E_out,kWh,E_out,1\n1,77070100100700ff@1,P,W,P,18\n1,77070100240700ff@1,L1,W,L1,18\n1,77070100380700ff@1,L2,W,L2,18\n1,770701004C0700ff@1,L3,W,L3,18\n1,77070100000009ff@#,Server_ID,,Server_ID,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-mt-631-sml","title":"Iskra MT 631 (SML)","text":"<p>This meter requires a PIN to unlock the current power usage details. To obtain the PIN, you'll need to contact your utility provider. Once you have the PIN, deactivate it on the meter and enable the detailed information display to also get the \"Current Consumption\". Please note that the \"Total Delivered\" value may show as zero on some devices.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,MT631\n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,2\n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,2\n1,77070100100700ff@1,Current Consumption,W,Power_cur,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-mt-681-sml","title":"Iskra MT 681 (SML)","text":"<p>This is script for a two-direction meter (consumption and delivery) for the Isra MT 681, that is widely used in Germany. If you don't deliver energy, just delete the \"Total Delivered\" line. If the meter provides the consumption values for the 3 phases depends also on the configuration by your local energy provider.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,MT681\n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,3\n1,77070100100700ff@1,Current Consumption,W,Power_cur,0\n1,77070100240700ff@1,Current Consumption P1,W,Power_p1,0\n1,77070100380700ff@1,Current Consumption P2,W,Power_p2,0\n1,770701004c0700ff@1,Current Consumption P3,W,Power_p3,0\n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,3\n1,77070100000009ff@#,Service ID,,Meter_id,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-ehz-mt681-d4a51-k0p","title":"Iskra eHZ-MT681-D4A51-K0p","text":"<p>2012 version of the Iskra MT 681 with slightly different OBIS codes for the power values.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,MT681\n1,77070100010800ff@1000,Gesamtverbrauch,kWh,Total_in,3\n1,770701000f0700ff@1,Leistung,W,Power_cur,0\n1,77070100150700ff@1,Leistung P1,W,Power_p1,0\n1,77070100290700ff@1,Leistung P2,W,Power_p2,0\n1,770701003d0700ff@1,Leistung P3,W,Power_p3,0\n1,77070100020800ff@1000,Gesamteinspeisung,kWh,Total_out,3\n1,77070100000009ff@#,Service ID,,Meter_id,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-ehz-mt681-d4a52-k0p","title":"Iskra eHZ-MT681-D4A52-K0p","text":"<p>2023 Version Zweiwegez\u00e4hler</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,MT681\n1,77070100010800ff@1000,Verbrauch,kWh,Total_in,4\n1,77070100100700ff@1,Leistung,W,Power_cur,0\n1,77070100020800ff@1000,Erzeugung,kWh,Total_out,4\n1,77070100000009ff@#,Service ID,,Meter_id,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#iskra-ehz-ms2020-mt691-d4a52-kdy-h03-grid","title":"Iskra eHZ-MS2020 MT691-D4A52-KDy-H03 GRID","text":"<p>\"Moderne Messeinrichtung\" installed in 2024 </p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,MT691\n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,3\n1,77070100100700ff@1,Current Consumption,W,Power_cur,0\n1,77070100240700ff@1,Current Consumption P1,W,Power_p1,0\n1,77070100380700ff@1,Current Consumption P2,W,Power_p2,0\n1,770701004c0700ff@1,Current Consumption P3,W,Power_p3,0\n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#itron-sml-v104","title":"Itron (SML V1.04)","text":"<p>The Itron electrical meter is a German end-user meter installed by EnBW. You can read values using an IR Sensor. The following script shows the meter number and the consuption and the generation of a Photovoltaik generator. </p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,12,s,0,9600,ELZ\n1,77070100600100ff@#,Z\u00e4hlernummer,,Wert,0\n1,77070100010800ff@1000,Verbrauch,kWh,ELZ_PV_1.8.0,1\n1,77070100020800ff@1000,Erzeugung,kWh,ELZ_PV_2.8.0,1\n#\n</code></pre> This script additionally reads the power in watts <p>It has enhanced precision of 4 decimal places for the total consumption. Be sure to turn on the full precision at the meter using a flashlight (if you see <code>inF=Off</code>, hold for 5 seconds until you see <code>inF=On</code>)</p> <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n;Set teleperiod to 20sec  \ntper=10  \n&gt;M 1\n+1,3,s,0,9600,Power\n1,77070100600100ff@#,Z\u00e4hlernummer,,Meter_Number,0\n1,77070100010800ff@1000,Verbrauch,kWh,Total_in,4\n1,77070100100700ff@1,Leistung,W,Power_curr,0\n1,77070100020800ff@1000,Erzeugung,kWh,Total_out,4\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#janitza-b23-modbus","title":"Janitza B23 (MODBus)","text":"View script <pre><code>&gt;D\n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,m,0,9600,Janitza,1,1,01034A38,01034A3A,01034A3C,01034A4C,01034A4E,01034A50,01034A72,01034A7A,01034A82  \n1,010304ffffffff@i0:1,Voltage L1-N,V,Voltage_L1-N,2  \n1,010304ffffffff@i1:1,Voltage L2-N,V,Voltage_L2-N,2  \n1,010304ffffffff@i2:1,Voltage L3-N,V,Voltage_L3-N,2  \n1,010304ffffffff@i3:1,Real power L1-N,W,Real_power_L1-N,2  \n1,010304ffffffff@i4:1,Real power L2-N,W,Real_power_L2-N,2  \n1,010304ffffffff@i5:1,Real power L3-N,W,Real_power_L3-N,2  \n1,010304ffffffff@i6:1,Real energy L3,Wh,Real_energy_L3,2  \n1,010304ffffffff@i7:1,Real energy L3-consumed,Wh,Real_energy_L3_consumed,2  \n1,010304ffffffff@i8:1,Real energy L3-delivered,Wh,Real_energy_L3_delivered,2   \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#janz-c3801-modbus","title":"JANZ C3801 (MODBus)","text":"<p>This is an example for one of the many quite similar smart meters implemented in Portugal, by EDP Distribui\u00e7\u00e3o S.A. May be valid for many more models, as stated.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,14,m,1,9600,EB,5,50,0104006C,01040079,0104007A,0104007F,01040026,01040027,01040028,0104000B,01040084\n1,=hVALORES T\u00c9CNICOS\n1,010404UUuuxxxx@i0:10,Tens\u00e3o,V,Voltage_P1,17\n1,010404xxxxUUuu@i0:10,Corrente,A,Current_P1,17\n1,010408UUuuUUuuxxxxxxxxxxxx@i1:1,Pot\u00eancia ativa,W,Power_P1,16\n1,010406xxxxxxxxUUuu@i2:1000,Fator de pot\u00eancia,pu,PFactor_P1,19\n1,01040aUUuuxxxx@i3:10,Frequ\u00eancia,Hz,Frequency_P1,17\n1,=h&amp;#8205;\n1,=hTOTALIZADORES DE ENERGIA\n1,010408UUuuUUuuxxxxxxxxxxxx@i4:1000,Vazio (1),kWh,Energy_P1_R1,17\n1,010408UUuuUUuuxxxxxxxxxxxx@i5:1000,Ponta (2),kWh,Energy_P1_R2,17\n1,010408UUuuUUuuxxxxxxxxxxxx@i6:1000,Cheia (3),kWh,Energy_P1_R3,17\n1,=h&amp;#8205;\n1,=hESTADOS\n1,010406uuxxxxxxxx@i7:1,Tarifa,,Tariff_P1,16\n1,010406uuxxxxxxxx@i8:1,DCP,,DCP_P1,16\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#kaifa-mb310h4bde","title":"KAIFA MB310H4BDE","text":"<p>By default, the KAIFA MB310H4BDE will only deliver the Total_in and Total_out values (without decimals). In order to get precise values, and especially in order to receive Power_curr, you have to login to configure it: Press the button besides the display. When asked for pin, enter it with a flashlight or by pressing the same button repeatedly. (If you don't have a PIN, get it from your grid operator.) If that was successful, you will see accurate values in the meters display already. To activate them on the SML interface, press the button repeatedly for 13 times, until \"INF OFF\" is displayed. Now press and hold the button, until it switches to INF ON. After that, you should receive all values.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Haus\n1,77070100010800ff@1000,Zaehlerstand In,kWh,Total_in,2\n1,77070100020800ff@1000,Zaehlerstand Out,kWh,Total_out,2\n1,77070100100700ff@1,Leistung-akt.,W,Power_curr,0\n1,77070100600100ff@#,Server-ID,,Meter_Number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#kamstrup-382lx7","title":"Kamstrup 382Lx7","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;S\n&gt;M 1\n+1,5,k,0,9600,K382Lx7,4,10,3F100200010002,3F1003041E041F0420,3F1003043404350436,3F100203ff0400,\n1,3F100001kstr@i0:1,EnergyIn,kWh,EnergyIn,16\n1,3F10x08xx0002kstr@i0:1,EnergyOut,kWh,EnergyOut,16\n1,3F10041ekstr@i1:1,VoltageP1,V,VoltageP1,16\n1,3F10x06xx041fkstr@i1:1,VoltageP2,V,VoltageP2,16\n1,3F10x13xx0420kstr@i1:1,VoltageP3,V,VoltageP3,16\n1,3F100434kstr@i2:100,CurrentP1,A,CurrentP1,18\n1,3F10x08xx0435kstr@i2:100,CurrentP2,A,CurrentP2,18\n1,3F10x17xx0436kstr@i2:100,CurrentP3,A,CurrentP2,18\n1,3F1003ffkstr@i3:1,PowerIN,W,PowerIN,16\n1,3F10x08xx0400kstr@i3:1,PowerOUT,W,PowerOUT,16\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#kamstrup-multical-4xx-6xx-8xx","title":"Kamstrup Multical 4xx / 6xx / 8xx","text":"<p>Those meters provide several registers via optical interface called D0 interface. Baudrate is only 1200 thus reading multiple registers simultaneously takes some time (e.g. one: ~300ms, six ~750ms). Size of response varies depending on register type and needs to be considered when reading more than one with a single telegram. Analyze length with <code>sensor53 d1</code>. Responses have format of <code>3F10&lt;rg&gt;&lt;response&gt;&lt;rg&gt;&lt;response&gt;</code>. So asking for 0x003C and 0x0056 with telegram <code>3F10 02 003C 0056</code> could be responded with <code>3F10 003C xxXXxxXXxxXXxx 0056 xxXXxxXXxx</code>.</p> <p>Default buffer size suffices for four values at once. The following example reads seven values at once so please <code>#define SML_BSIZ 90</code>. SML allows only one date value per meter at the moment.</p> View script (seven at once, needs #define SML_BSIZ 90) <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,kN2,0,1200,KSMC403,1,10,3F1007003C005600570059004A0044007B\n1,3F10003Ckstr@i0:1000,W\u00e4rmemenge,MWh,HeatEnergyE1,3\n1,3F10x08xx0056kstr@i0:100,Vorlauftemp.,\u00b0C,PreTemp,2\n1,3F10x15xx0057kstr@i0:100,R\u00fccklauftemp.,\u00b0C,AftTemp,2\n1,3F10x22xx0059kstr@i0:100,Temp.diff.,\u00b0C,DifTemp,2\n1,3F10x29xx004Akstr@i0:1,Flie\u00dfgeschw.,l/h,Flow,0\n1,3F10x36xx0044kstr@i0:100,Volumenstrom,m\u00b3,Volume,2\n1,3F10x45xx007Bkstr@#,max. Fluss am,,MaxFlowDate,0\n#\n</code></pre> View script (same as above with two telegrams and default SML_BSIZ) <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,kN2,0,1200,KSMC403,1,5,3F1004003C005600570059,3F1003004A0044007B\n1,3F10003Ckstr@i0:1000,W\u00e4rmemenge,MWh,HeatEnergyE1,3\n1,3F10x08xx0056kstr@i0:100,Vorlauftemp.,\u00b0C,PreTemp,2\n1,3F10x15xx0057kstr@i0:100,R\u00fccklauftemp.,\u00b0C,AftTemp,2\n1,3F10x22xx0059kstr@i0:100,Temp.diff.,\u00b0C,DifTemp,2\n1,3F10004Akstr@i1:1,Flie\u00dfgeschw.,l/h,Flow,0\n1,3F10x06xx0044kstr@i1:100,Volumenstrom,m\u00b3,Volume,2\n1,3F10x15xx007Bkstr@#,max. Fluss am,,MaxFlowDate,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landis-gyr-e220-sml","title":"Landis + Gyr E220 (SML)","text":"<p>For read-out of \"current power\" the advanced data set has to be enabled in user menu</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n;Set teleperiod to 20sec  \ntper=10  \n&gt;M 1\n+1,3,s,0,9600,Power\n1,77070100600100ff@#,Server-ID,,Meter_Number,0\n1,77070100010800ff@1000,Verbrauch,kWh,Total_in,4\n1,77070100100700ff@1,Leistung-akt.,W,Power_curr,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landis-gyr-e320-sml","title":"Landis + Gyr E320 (SML)","text":"<p>For read-out of \"Current power\" the advanced data set has to be enabled in user menu</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,20,9600,E320\n1,77070100020800ff@1000,Total Delivered,kWh,Total_out,3\n1,77070100010800ff@1000,Total Consumed,kWh,Total_in,3\n1,77070100100700ff@1,Current power,W,Power_in,3\n1,77070100600100ff@#,Server-ID,,Meter_Number,0    \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landis-gyr-e350-obis","title":"Landis + Gyr E350 (OBIS)","text":"<p>Requesting data with a baud rate change during operation.</p> <p>According to its manual the meter seems to support many more metrics that were not tested, and are not listed here because of that.</p> View script <pre><code>&gt;D\nscnt=0\nres=0\n\n&gt;B\n-&gt;sensor53 r\ntper=20\n\n&gt;F\nscnt+=1\nswitch scnt\ncase 6\nres=sml(1 0 300)\nres=sml(1 1 \"2F3F210D0A\")\n\ncase 18\nres=sml(1 1 \"063035300D0A\")\n\ncase 20\nres=sml(1 0 9600)\n\ncase 50\nscnt=0\nends\n\n&gt;M 1\n+1,3,o,0,9600,,1\n;1,C.1.0(@1,Server-ID,,Meter_number,0\n1,=h===================\n1,1.8.0(@1,Total Consumed,kWh,Total_in,3\n;1,1.8.1(@1,Primary Consumed,kWh,P_Total_in,3\n;1,1.8.2(@1,Secondary Consumed,kWh,S_Total_in,3\n1,=h===================\n1,16.7(@1,Current power,kW,Power_in,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landis-gyr-zmb120-t213cs-obis","title":"Landis + Gyr ZMB120 T213CS (OBIS)","text":"<p>This meter may need a PIN to unlock the current power usage - ask your provider. </p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,STROM,1,10,2F3F210D0A,063030300D0A\n1,0(@1,Z\u00e4hlernummer,,Meter_number,0  \n1,=h===================  \n1,8.0(@1,Total T1 &amp; T2,kWh,Total,2  \n1,8.1(@1,T1 aktuell,kWh,Total_T1,2  \n1,8.2(@1,T2 aktuell,kWh,Total_T2,2  \n1,=h===================  \n1,8.1.1(@1,T1 letzte Saison,kWh,Total_T1-1,2   \n1,8.2.1(@1,T2 letzte Saison,kWh,Total_T2-1,2   \n1,8.1.2(@1,T1 vorletzte Saison,kWh,Total_T1-2,2\n1,8.2.2(@1,T2 vorletzte Saison,kWh,Total_T2-2,2     \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landis-gyr-zmr120ares2r2sfcs-obis","title":"Landis + Gyr ZMR120AReS2R2sfCS (OBIS)","text":"<p>Example: Changing the baud rate during operation.</p> View script <pre><code>&gt;D  \n;Var Power consumption total HT+NT  \nv1=0  \n;HT Main electricity tariff consumption total   \nv2=0  \n;NT Night electricity tariff consumption total  \nv3=0  \n; Energie L1+L2+L3  \nv4=0  \n;recent Energie L1  \nv5=0  \n;recent Energie L2  \nv6=0  \n;recent Energie L3  \nv7=0  \n\n;Var minute   \nmin=0  \n;Var hour  \nhr=0  \n;Var begin of the month 01.xx.20xx 0:00 Uhr  \nmd=0  \n;Var begin of the year 01.01. 0:00 Uhr  \nyr=0  \n;Var for counter see &gt;F=ms  \nscnt=0  \n;Var for baudrate changing\nres=0  \n\n;Permanent Var Meter1 0:00   \np:sm=0  \np:HT_sm=0  \np:NT_sm=0  \n;Var for daily =0  \nsd=0  \nHT_sd=0  \nNT_sd=0  \n;Permanent Var for month begin  \np:sma=0  \np:HT_sma=0  \np:NT_sma=0  \n;Var for monthly =0  \nsmn=0  \nHT_smn=0  \nNT_smn=0  \n;Permanent Var for year begin  \np:sya=0  \np:HT_sya=0  \np:NT_sya=0  \n;Var for yearly =0  \nsyn=0  \nHT_syn=0  \nNT_syn=0  \n\n;Fill vars with content on teleperiod    \n&gt;T  \nv1=#Total_in  \nv2=#HT_Total_in  \nv3=#NT_Total_in  \nv4=#kW_L1+L2+L3  \nv5=#kw_L1  \nv6=#kw_L2  \nv7=#kw_L3  \n\n&gt;B  \n;Restart driver  \n-&gt;sensor53 r  \n;Set teleperiod to 20sec  \ntper=20  \n\n&gt;F  \n; count 100ms   \nscnt+=1  \nswitch scnt  \ncase 6  \n;set sml driver to 300 baud and send /?! as HEX to trigger the Meter   \nres=sml(1 0 300)  \nres=sml(1 1 \"2F3F210D0A\")  \n\n;1800ms later \\&gt; Ack and ask for switching to 9600 baud  \ncase 18  \nres=sml(1 1 \"063035300D0A\")  \n\n;2000ms later \\&gt; Switching sml driver to 9600 baud    \ncase 20  \nres=sml(1 0 9600)  \n\n;Restart sequence after 50x100ms    \ncase 50  \n; 5000ms later \\&gt; restart sequence    \nscnt=0  \nends  \n\n&gt;S  \n;daily usage  \nhr=hours  \nif chg[hr]&gt;0  \nand hr==0  \nand v1&gt;0  \nthen  \nsm=v1  \nHT_sm=v2  \nNT_sm=v3  \nsvars  \nendif  \n\nif upsecs%tper==0{  \nsd=v1-sm  \nHT_sd=v2-HT_sm  \nNT_sd=v3-NT_sm  \n}  \n\n;Monthly usage  \nmd=day  \nif chg[md]&gt;0  \nand md==1  \nand v1&gt;0  \nthen  \nsma=v1  \nHT_sma=v2  \nNT_sma=v3  \nsvars  \nendif  \n\nif upsecs%tper==0{  \nsmn=v1-sma  \nHT_smn=v2-HT_sma  \nNT_smn=v3-NT_sma  \n}  \n\n;Yearly usage  \nyr=year  \nif chg[yr]&gt;0  \nand v1&gt;0  \nthen  \nsya=v1  \nHT_sya=v2  \nNT_sya=v3  \nsvars  \nendif  \n\nif upsecs%tper==0{  \nsyn=v1-sya  \nHT_syn=v2-HT_sya  \nNT_syn=v3-NT_sya  \n\n; Json payload \\&gt; send on teleperiod  \n&gt;J  \n,\"Strom_Vb_Tag\":%3sd%  \n,\"HT_Strom_Vb_Tag\":%3HT_sd%  \n,\"NT_Strom_Vb_Tag\":%3NT_sd%  \n,\"Strom_Vb_M\":%1smn%  \n,\"HT_Strom_Vb_M\":%1HT_smn%  \n,\"NT_Strom_Vb_M\":%1NT_smn%  \n,\"Strom_Vb_Jahr\":%0syn%  \n,\"HT_Strom_Vb_Jahr\":%0HT_syn%  \n,\"NT_Strom_Vb_Jahr\":%0NT_syn%  \n,\"Strom_0:00 _Uhr\":%1sm%  \n,\"HT_Strom_0:00 _Uhr\":%1HT_sm%  \n,\"NT_Strom_0:00 _Uhr\":%1NT_sm%  \n,\"Strom_Ma\":%3sma%  \n,\"HT_Strom_Ma\":%3HT_sma%  \n,\"NT_Strom_Ma\":%3NT_sma%  \n,\"Strom_Ja\":%3sya%  \n,\"HT_Strom_Ja\":%3HT_sya%  \n,\"NT_Strom_Ja\":%3NT_sya%  \n\n;Webdisplay stuff  \n&gt;W  \n\n0:00 Uhr \u03a3 HT+NT: {m} %0sm% kWh  \nHT: {m} %0HT_sm% kWh  \nNT: {m} %0NT_sm% kWh  \n\nMonatsanfang: {m} %1sma% kWh  \nHT: {m} %1HT_sma% kWh  \nNT: {m} %1NT_sma% kWh  \n\nJahresanfang: {m} %0sya% kWh  \nHT: {m} %0HT_sya% kWh  \nNT: {m} %0NT_sya% kWh  \n.............................  \nTagesverbrauch: {m} %1sd% kWh  \nHT: {m} %1HT_sd% kWh  \nNT: {m} %1NT_sd% kWh  \n\nMonatsverbrauch: {m} %0smn% kWh  \nHT: {m} %0HT_smn% kWh  \nNT: {m} %0NT_smn% kWh  \n    -  \nJahresverbrauch: {m} %0syn% kWh  \nHT: {m} %0HT_syn% kWh  \n0:00 Uhr \u03a3 HT+NT: {m} %0sm% kWh  \nHT: {m} %0HT_sm% kWh  \nNT: {m} %0NT_sm% kWh  \n\nMonatsanfang: {m} %1sma% kWh  \nHT: {m} %1HT_sma% kWh  \nNT: {m} %1NT_sma% kWh  \n\nJahresanfang: {m} %0sya% kWh  \nHT: {m} %0HT_sya% kWh  \nNT: {m} %0NT_sya% kWh  \n.............................  \nTagesverbrauch: {m} %1sd% kWh  \nHT: {m} %1HT_sd% kWh  \nNT: {m} %1NT_sd% kWh  \n\nMonatsverbrauch: {m} %0smn% kWh  \nHT: {m} %0HT_smn% kWh  \nNT: {m} %0NT_smn% kWh  \n    -  \nJahresverbrauch: {m} %0syn% kWh  \nHT: {m} %0HT_syn% kWh  \nNT: {m} %0NT_syn% kWh  \n\n&gt;M 1  \n+1,3,o,0,9600,,1  \n1,0.0.1(@1,Z\u00e4hlernummer,,Meter_number,0  \n1,0.9.1(@#),Zeitstempel,Uhr,time-stamp,0  \n1,=h===================  \n1,1.8.0(@1,HT+NT Z\u00e4hlerstand,kWh,Total_in,3  \n1,1.8.1(@1,HT,kWh,HT_Total_in,3  \n1,1.8.2(@1,NT,kWh,NT_Total_in,3  \n1,=h===================  \n1,36.7.0(@1,Power_L1,kW,kW_L1,2  \n1,56.7.0(@1,Power_L2,kW,kW_L2,2  \n1,76.7.0(@1,Power_L3,kW,kW_L3,2  \n1,16.7.0(@1,\u03a3_L1+L2+L3,kW,kW_L1+L2+L3,2  \n1,=h===================  \n1,31.7.0(@1,Strom_L1,A,I_L1,2  \n1,51.7.0(@1,Strom_L2,A,I_L2,2  \n1,71.7.0(@1,Strom_L3,A,I_L3,2  \n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#2-landisgyr-e450-encrypted","title":"2 * Landis+Gyr E450 (encrypted)","text":"View script <pre><code>&gt;D\n&gt;B\nsmlj=0\n=&gt;sensor53 r\n&gt;R\nsmlj=0\n&gt;S\nif upsecs&gt;22\nthen\nsmlj|=1\nendif\n&gt;M 2\n+1,17,r,0,2400,Heizung\n1,=so3,512\n1,=so4,GUEK\n1,pm(1.8.0)@1000,kWh_IN,kWh,kWh_IN,3;Wirkenergie Lieferung (+A)\n1,pm(1.8.1)@1000,kWh_IN_T1,kWh,kWh_IN_T1,3;Wirkenergie Lieferung (+A) Tarif 1\n1,pm(1.8.2)@1000,kWh_IN_T2,kWh,kWh_IN_T2,3;Wirkenergie Lieferung (+A) Tarif 2\n1,pm(1.7.0)@1000,kW_IN,kW,kW_IN,3;Momentane Wirkleistung Lieferung (+A)\n;1,pm(2.8.0)@1000,kWh_OUT,kWh,kWh_OUT,3;Wirkenergie Bezug (-A)\n;1,pm(2.8.1)@1000,kWh_OUT_T1,kWh,kWh_OUT_T1,3;Wirkenergie Bezug (-A) Tarif 1\n;1,pm(2.8.2)@1000,kWh_OUT_T2,kWh,kWh_OUT_T2,3;Wirkenergie Bezug (-A) Tarif 2\n;1,pm(.2.7.0)@1000,kW_OUT,kW,kW_OUT,3;Momentane Wirkleistung Bezug (-A)\n1,pm(3.8.0)@1000,kvarh_IN,kvarh,kvarh_IN,3;Blindenergie Lieferung (+R)\n1,pm(.3.8.1)@1000,kvarh_IN_T1,kvarh,kvarh_IN_T1,3;Blindenergie Lieferung (+R) Tarif 1\n1,pm(.3.8.2)@1000,kvarh_IN_T2,kvarh,kvarh_IN_T2,3;Blindenergie Lieferung (+R) Tarif 2\n1,pm(.3.7.0)@1000,kvar_IN,kvar,kvar_IN,3;Momentane Blindleistung Lieferung (+R)\n1,pm(4.8.0)@1000,kvarh_OUT,kvarh,kvarh_OUT,3;Blindenergie Bezug (-R)\n1,pm(.4.8.1)@1000,kvarh_OUT_T1,kvarh,kvarh_OUT_T1,3;Blindenergie Bezug (-R) Tarif 1\n1,pm(.4.8.2)@1000,kvarh_OUT_T2,kvarh,kvarh_OUT_T2,3;Blindenergie Bezug (-R) Tarif 2\n1,pm(.4.7.0)@1000,kvar_OUT,kvar,kvar_OUT,3;Momentane Blindleistung Bezug (-R)\n\n+2,16,r,0,2400,Haus\n2,=so3,512\n2,=so4,GUEK\n2,pm(1.8.0)@1000,kWh_IN,kWh,kWh_IN,3;Wirkenergie Lieferung (+A)\n2,pm(1.8.1)@1000,kWh_IN_T1,kWh,kWh_IN_T1,3;Wirkenergie Lieferung (+A) Tarif 1\n2,pm(1.8.2)@1000,kWh_IN_T2,kWh,kWh_IN_T2,3;Wirkenergie Lieferung (+A) Tarif 2\n2,pm(1.7.0)@1000,kW_IN,kW,kW_IN,3;Momentane Wirkleistung Lieferung (+A)\n;2,pm(2.8.0)@1000,kWh_OUT,kWh,kWh_OUT,3;Wirkenergie Bezug (-A)\n;2,pm(2.8.1)@1000,kWh_OUT_T1,kWh,kWh_OUT_T1,3;Wirkenergie Bezug (-A) Tarif 1\n;2,pm(2.8.2)@1000,kWh_OUT_T2,kWh,kWh_OUT_T2,3;Wirkenergie Bezug (-A) Tarif 2\n;2,pm(2.7.0)@1000,kW_OUT,kW,kW_OUT,3;Momentane Wirkleistung Bezug (-A)\n2,pm(.3.8.0)@1000,kvarh_IN,kvarh,kvarh_IN,3;Blindenergie Lieferung (+R)\n2,pm(3.8.1)@1000,kvarh_IN_T1,kvarh,kvarh_IN_T1,3;Blindenergie Lieferung (+R) Tarif 1\n2,pm(3.8.2)@1000,kvarh_IN_T2,kvarh,kvarh_IN_T2,3;Blindenergie Lieferung (+R) Tarif 2\n2,pm(3.7.0)@1000,kvar_IN,kvar,kvar_IN,3;Momentane Blindleistung Lieferung (+R)\n2,pm(4.8.0)@1000,kvarh_OUT,kvarh,kvarh_OUT,3;Blindenergie Bezug (-R)\n2,pm(4.8.1)@1000,kvarh_OUT_T1,kvarh,kvarh_OUT_T1,3;Blindenergie Bezug (-R) Tarif 1\n2,pm(4.8.2)@1000,kvarh_OUT_T2,kvarh,kvarh_OUT_T2,3;Blindenergie Bezug (-R) Tarif 2\n2,pm(4.7.0)@1000,kvar_OUT,kvar,kvar_OUT,3;Momentane Blindleistung Bezug (-R)\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#landisgyr-e650-obis","title":"Landis+Gyr E650 (OBIS)","text":"<p>The script switches to a higher baud rate as the data set is pretty big and takes minutes to complete at 300 baud. The usable speed for my setup/hardware was 4800 baud.</p> <p>The script requires tasmota version 12+ so it supports variables.</p> <p>Switching to different baud rates requires changing the ack sequence 06303x300D0A, the baud rate in 2 places 4800-&gt;x and the case 200 (20x100ms) so the cycle can complete before restarting.</p> View script <pre><code>&gt;D\n; Script needs v12+\nres=0\nscnt=0\n&gt;F\n;F section is executed every 100ms\nscnt+=1\nswitch scnt\ncase 6\n;set sml driver to 300 baud and send /?! as HEX to trigger the Meter\nres=sml(1 0 300)\nres=sml(1 1 \"2F3F210D0A\")\n;1800ms later \\&gt; Send ACK and ask for switching to 4800 baud\ncase 18\nres=sml(1 1 \"063034300D0A\")\nres=sml(1 0 4800)\ncase 200\n; 20s later \\&gt; restart sequence\nscnt=0\nends      \n&gt;M 1\n+1,3,o,0,4800,data,1\n\n1,1-1:1.8.0(@1,energy_import,kWh,1-8-0,1\n1,1-1:2.8.0(@1,energy_export,kWh,2-8-0,1\n1,1-1:36.7.0(@1,power_L1,kWh,36-7-0,2\n1,1-1:56.7.0(@1,power_L2,kWh,56-7-0,2\n1,1-1:76.7.0(@1,power_L3,kWh,76-7-0,2\n1,1-1:31.7.0(@1,current_L1,A,31-7-0,2\n1,1-1:51.7.0(@1,current_L2,A,51-7-0,2\n1,1-1:71.7.0(@1,current_L3,A,71-7-0,2\n1,1-1:16.7.0(@1,power_total,W,16-7-0,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk11bl-obis","title":"Logarex LK11BL (OBIS)","text":"<pre><code>This script keeps optical communication on the initial 300 baud speed and reject to switch any other speed smart meter requests.\n\nIn my case, smart meter wanted to switch to 9600 baud but I felt it is better to follow the 'keep it simple' principle at the script's level and use 300 baud through the whole communication.\n\nIf you know the meaning of the below unnamed OBIS codes please update the script.\n</code></pre> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,zm,1,100,2F3F210D0A,060000D0A\n\n1,15.8.0(@1,total,kWh,total,3\n1,0.0.0(@1,serial,,serial,0\n1,F.F(@1,F.F,,F.F,0\n1,C.8.0(@1,C.8.0,,C.8.0,0\n1,0.2.0(@#),ver,,ver,3\n1,0.3.0(@1,0.3.0,imp/kWh,0.3.0,0\n1,.8.1(@1,.8.1,,.8.1,0\n1,C.7.1(@1,C.7.1,,C.7.1,0\n1,C.2.1(@1,C.2.1,,C.2.1,0\n1,C.2.9(@1,C.2.9,,C.2.9,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk13be-obis","title":"Logarex LK13BE (OBIS)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,9600,LK13BE,13,30,2F3F210D0A,063035310D0A\n\n1,1-0:1.8.0*255(@1,Gesamtverbrauch,kWh,total,4\n1,1-0:1.8.0*96(@1,Verbrauch 1 Tag,kWh,total_1d,4\n1,1-0:1.8.0*97(@1,Verbrauch 7 Tage,kWh,total_7d,4\n1,1-0:1.8.0*98(@1,Verbrauch 30 Tage,kWh,total_30d,4\n1,1-0:1.8.0*99(@1,Verbrauch 365 Tage,kWh,total_365d,4\n1,1-0:16.7.0*255(@1,Verbrauch aktuell,W,power,20\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk13be803039","title":"Logarex LK13BE803039","text":"<p>The Logarex LK13BE803039 does publish the data automatically. Do not poll this can lead to missreadings</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,9600,LK13BE\n\n1,1-0:1.8.0*255(@1,Gesamtverbrauch,kWh,total,4\n1,1-0:1.8.0*96(@1,Verbrauch 1 Tag,kWh,total_1d,4\n1,1-0:1.8.0*97(@1,Verbrauch 7 Tage,kWh,total_7d,4\n1,1-0:1.8.0*98(@1,Verbrauch 30 Tage,kWh,total_30d,4\n1,1-0:1.8.0*99(@1,Verbrauch 365 Tage,kWh,total_365d,4\n1,1-0:16.7.0*255(@1,Verbrauch aktuell,W,current,20\n1,1-0:2.8.0*255(@1,Gesamteinspeisung,kWh,total_out,4\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk13be803319-obis","title":"Logarex LK13BE803319 (OBIS)","text":"<p>setupline for the  HichiIR WiFi module (GPIO1: send, GPIO3: receive)</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n; setupline\n+1,3,o,0,9600,LK13BE,1,30,2F3F210D0A,063035310D0A\n; available without PIN, remove the semicolon the enable some optional values\n; only one string (@#) can be decoded per meter\n1,1-0:96.1.0*255(@#),Z\u00e4hlernummer,,id,0\n;1,1-0:0.2.0*255(@#),Firmware,,fw,0\n1,1-0:1.8.0*255(@1,Gesamtverbrauch,kWh,total,4\n; available with PIN\n1,1-0:1.8.0*96(@1,Verbrauch 1 Tag,kWh,total_1d,4\n1,1-0:1.8.0*97(@1,Verbrauch 7 Tage,kWh,total_7d,4\n1,1-0:1.8.0*98(@1,Verbrauch 30 Tage,kWh,total_30d,4\n1,1-0:1.8.0*99(@1,Verbrauch 365 Tage,kWh,total_365d,4\n1,1-0:1.8.0*100(@1,Verbrauch ab reset,kWh,total_reset,4\n1,1-0:16.7.0*255(@1,Verbrauch aktuell,W,power,20\n; available with PIN and full dataset enabled\n1,1-0:32.7.0*255(@1,Spannung L1,V,voltage_l1,1\n1,1-0:52.7.0*255(@1,Spannung L2,V,voltage_l2,1\n1,1-0:72.7.0*255(@1,Spannung L3,V,voltage_l3,1\n1,1-0:31.7.0*255(@1,Strom L1,A, amperage_l1,1\n1,1-0:51.7.0*255(@1,Strom L2,A, amperage_l2,1\n1,1-0:71.7.0*255(@1,Strom L3,A, amperage_l3,1\n1,1-0:81.7.1*255(@1,UL2 zu UL1,deg,angle_ul2_ul1,0\n1,1-0:81.7.2*255(@1,UL3 zu UL1,deg,angle_ul3_ul1,0\n1,1-0:81.7.4*255(@1,IL1 zu UL1,deg,angle_il1_ul1,0\n1,1-0:81.7.15*255(@1,IL2 zu UL2,deg,angle_il2_ul2,0\n1,1-0:81.7.26*255(@1,IL3 zu UL3,deg,angle_il2_ul3,0\n1,1-0:14.7.0*255(@1,Frequenz,Hz,frequency,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk13be-sml-lk13be904639","title":"Logarex LK13BE (SML) (LK13BE904639)","text":"<p>This meter does not provide detailed information regarding phase etc.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n; Monitor Sensor at GPIO25\n=&gt;sensor53 l25\n&gt;M 1\n+1,3,s,0,9600,LK13BE,1,10,2F3F210D0A,063035310D0A\n\n1,77070100010800ff@1000,Energie gesamt,kWh,energy_sum,3 \n1,77070100010801ff@1000,Energie Tarif 1,kWh,energy_tarif1,3 \n1,77070100010802ff@1000,Energie Tarif 2,kWh,energy_tarif2,3\n1,77070100020800ff@1000,Einspeisung,kWh,energy_supply,3\n1,=h --------------\n1,77070100100700ff@1,Leistung,W,power,16\n1,=h --------------\n1,77070100600100ff@#,Server ID,,meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#logarex-lk13be-sml-eg-lk13be6067x9","title":"Logarex LK13BE (SML) (e.g. LK13BE6067x9)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,LK13BE,1,10,2F3F210D0A,063035310D0A\n\n1,77070100010800ff@1000,Gesamt kWh bezogen,kWh,Power_total_in,1\n1,77070100020800ff@1000,Gesamt kWh geliefert,kWh,Power_total_out,1\n1,77070100100700ff@1,Verbrauch aktuell,W,Power_curr,0\n1,77070100240700ff@1,Power L1,W,Power_L1_curr,0\n1,77070100380700ff@1,Power L2,W,Power_L2_curr,0\n1,770701004C0700ff@1,Power L3,W,Power_L3_curr,0\n1,77070100200700ff@1,Voltage L1,V,Volt_L1_curr,1\n1,77070100340700ff@1,Voltage L2,V,Volt_L2_curr,1\n1,77070100480700ff@1,Voltage L3,V,Volt_L3_curr,1\n1,770701001f0700ff@1,Amperage L1,A,Amperage_L1_curr,2\n1,77070100330700ff@1,Amperage L2,A,Amperage_L2_curr,2\n1,77070100470700ff@1,Amperage L3,A,Amperage_L3_curr,2\n1,770701000e0700ff@1,Frequency,Hz,HZ,2\n1,77070100510704ff@1,Phaseangle I-L1/U-L1,deg,phase_angle_p1,1 \n1,7707010051070fff@1,Phaseangle I-L2/I-L2,deg,phase_angle_p2,1  \n1,7707010051071aff@1,Phaseangle I-L3/I-L3,deg,phase_angle_p3,1 \n1,77070100510701ff@1,Phase angle U-L2/U-L1,deg,phase_angle_l2_l1,1\n1,77070100510702ff@1,Phase angle U-L3/U-L1,deg,phase_angle_l3_l1,1\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#metcom-mcs301","title":"MetCom MCS301","text":"<p>Reading the data (at 300 baud!) takes longer than a minute!</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,H37,1,600,2F3F210D0A,063030300D0A\n1,0.0.0(@1),Counter number,,znr,0\n1,0.0.1(@#),Counter ID,,zid,0\n1,1.7.0(@0.001,Import Act. Power,W,pimport,1\n1,1.6.1(@0.001,Import Act. Max. Power,Wpeak,maximport,1\n1,1.8.0(@0.001,Import Act. Energy,Wh,import,1\n1,1.8.1(@0.001,Import Act. Energy Tar.1,Wh,importht,1\n1,1.8.2(@0.001,Import Act. Energy Tar.2 NT,Wh,importnt,1\n1,2.7.0(@0.001,Export Act. Power,W,pexport,1\n1,2.6.1(@0.001,Export Act. Max. Power,Wpeak,maxexport,1\n1,2.8.0(@0.001,Export Act. Energy,Wh,export,1\n1,2.8.1(@0.001,Export Act. Energy Tar.1,Wh,exportht,1\n1,2.8.2(@0.001,Export Act. Energy Tar.2,Wh,exportnt,1\n1,31.7.0(@1,Current L1,A,il1,3\n1,51.7.0(@1,Current L2,A,il2,3\n1,51.7.0(@1,Current L3,A,il3,3\n1,32.7.0(@1,Voltage L1,V,ul1,2\n1,52.7.0(@1,Voltage L2,V,ul2,2\n1,52.7.0(@1,Voltage L3,V,ul3,2\n1,14.7.0(@0.001,Frequency,Hz,freq,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#pafal-20ec3gr","title":"PAFAL 20EC3gr","text":"<p>Documentation for this Counter is very small. This informations were collected across the internet.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,PAFAL,1,30,2F3F210D0A,063030300D0A\n1,1.8.1*00(@1),Gesamtverbrauch_HT,kWh,Total_IN,2\n1,1.8.2*00(@1),Gesamtverbrauch_NT,kWh,Total_IN,2\n1,2.8.0*00(@1),Einspeisung,kWh,Total_OUT,2\n#\n</code></pre> Dump of the script <pre><code>15:48:40.855 : \ufffdH/PAF5EC3gr00006\n15:48:45.643 : \ufffd0.0.0(serialnumber)\n15:48:46.260 : 0.0.1(PAF)\n15:48:46.768 : F.F(00)\n15:48:47.405 : 0.2.0(1.27)\n15:48:48.314 : 1.8.1*00(071354.27)\n15:48:49.228 : 1.8.2*00(070726.91)\n15:48:50.149 : 2.8.0*00(013640.33)\n15:48:52.730 : C.2.1(000000000000)(                                                )\n15:48:53.542 : 0.2.2(:::::G11)!\n</code></pre>"},{"location":"Smart-Meter-Interface/#peacefair-pzem004tv30-modbus","title":"Peacefair PZEM004TV30 (MODBus)","text":"<p>PZEM004T V30 multiple meters on Modbus</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,0,9600,ENERGY,1,1,02040000,02040001,02040003,02040005,02040007,02040008,03040000,03040001,03040003,03040005,03040007,03040008,05040000,05040001,05040003,05040005,05040007,05040008\n1,=h&lt;hr/&gt;Sensor-2\n1,020404UUuuxxxxxxxx@i0:10,Voltage,V,Sensor-1-V,2\n1,020404UUuuUUuusxxxx@i1:1000,Current,A,Sensor-1-A,2\n1,020404UUuuUUuusxxxx@i2:10,Power,W,Sensor-1-W,2\n1,020404UUuuUUuusxxxx@i3:1000,Energy,kWh,Sensor-1-kWh,4\n1,020404UUuuxxxxxxxx@i4:10,Frequency,Hz,Sensor-1-hz,2\n1,020404UUuuxxxxxxxx@i5:100,Power Factor,PF,Sensor-1-PF,2\n1,=h&lt;hr/&gt;Sensor-3\n1,030404UUuuxxxxxxxx@i6:10,Voltage,V,Sensor-2-V,2\n1,030404UUuuUUuusxxxx@i7:1000,Current,A,Sensor-2-A,2\n1,030404UUuuUUuusxxxx@i8:10,Power,W,Sensor-2-W,2\n1,030404UUuuUUuusxxxx@i9:1000,Energy,kWh,Sensor-2-kWh,4\n1,030404UUuuxxxxxxxx@i10:10,Frequency,Hz,Sensor-2-hz,2\n1,030404UUuuxxxxxxxx@i11:100,Power Factor,PF,Sensor-2-PF,2\n1,=h&lt;hr/&gt;Sensor-5\n1,050404UUuuxxxxxxxx@i12:10,Voltage,V,Sensor-05-V,2\n1,050404UUuuUUuusxxxx@i13:1000,Current,A,Sensor-05-A,2\n1,050404UUuuUUuusxxxx@i14:10,Power,W,Sensor-05-W,2\n1,050404UUuuUUuusxxxx@i15:1000,Energy,kWh,Sensor-05-kWh,4\n1,050404UUuuxxxxxxxx@i16:10,Frequency,Hz,Sensor-05-hz,2\n1,050404UUuuxxxxxxxx@i17:100,Power Factor,PF,Sensor-05-PF,2\n\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#peacefair-pzem004tv40-modbus","title":"Peacefair PZEM004TV4.0 (MODBus)","text":"<p>PZEM004T V4.0 multiple meters on Modbus</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,0,9600,modbus,1,3,r010400000009,r020400000009,r030400000009\n1,010412UUuu@i0:10,Voltage,V,Volt_2,1\n1,010412x2UUuuUUuus@i0:1000,Current,A,Curr_1,3\n1,010412x6UUuuUUuus@i0:10,Power,W,Pow_1,1\n1,010412x14UUuu@i0:10,Frequency,Hz,Freq_1,1\n1,010412x16UUuu@i0:100,Power Factor,PF,PF_1,2\n1,020412UUuu@i1:10,Voltage,V,Volt_2,1\n1,020412x2UUuuUUuus@i1:1000,Current,A,Curr_2,3\n1,020412x6UUuuUUuus@i1:10,Power,W,Pow_2,1\n1,020412x14UUuu@i1:10,Frequency,Hz,Freq_2,1\n1,020412x16UUuu@i1:100,Power Factor,PF,PF_2,2\n1,030412UUuu@i2:10,Voltage,V,Volt_3,1\n1,030412x2UUuuUUuus@i2:1000,Current,A,Curr_3,3\n1,030412x6UUuuUUuus@i2:10,Power,W,Pow_3,1\n1,030412x14UUuu@i2:10,Frequency,Hz,Freq_3,1\n1,030412x16UUuu@i2:100,Power Factor,PF,PF_3,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#resol-deltasol-bs-plus-vbus","title":"Resol Deltasol BS Plus (VBus)","text":"<p>This is a controller for standard solar thermal systems equipped with VBus data interface. Outputs data every second at 9600 baud 8N1. To connect to this and read data from the bus a level shifting is needed as the voltage is around 8V. Although this is a symmetric connection supporting long wires for our purposes it's enough to measure its polarity with a voltmeter and adapt the level appropriately to 3.3V using the below circuit (many others exist but this is simple and works). Do not connect the GND pin of Wemos with the ground of Resol unit as that may damage the output port of it. The Wemos module needs its own power supply (double insulated recommended). </p> <p></p> The script (compile firmware with <code>SML_REPLACE_VARS</code>) <pre><code>&gt;D\nr=\"1,AA100021421000010774\"\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,v,0,9600,Solar\n%r%vo12ut@#,time,,zeit,1\n%r%vo0sw@10,S1 COL,\u00b0C,sens1,1\n%r%vo2sw@10,S2 TST1,\u00b0C,sens2,1\n%r%vo4sw@10,S3 TST2,\u00b0C,sens3,1\n%r%vo6sw@10,S4 TR,\u00b0C,sens4,1\n%r%vo10ub@b0:1,R1 PUMP,,relay1,0\n%r%vo10ub@b1:1,R2 VALVE,,relay2,0\n%r%vo8ub@1,Pump1 speed,%%,pump1,0\n%r%vo9ub@1,Pump2 speed,%%,pump2,0\n%r%vo20uw@1,p1,Wh,p1,0\n%r%vo22uw@1,p1000,Wh,p2,0\n%r%vo24uw@1,p1000000,Wh,p3,0\n%r%vo15ub@b0:1,Col Max,,col1,0\n%r%vo15ub@b1:1,Col Min,,col2,0\n%r%vo15ub@b2:1,Col Frost,,col3,0\n%r%vo15ub@b3:1,Col Opt,,col4,0\n%r%vo15ub@b4:1,Col Rueck,,col5,0\n%r%vo15ub@b5:1,Col WMZ,,col6,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sanxing-sx6x1-sxxu1x-ascii-obis","title":"Sanxing SX6x1 (SxxU1x) (Ascii OBIS)","text":"<p>Tested on SX631 (S34U18). Needs an RJ12 cable and a small adaptor circuit:  (Note how power for the Wemos module is drawn directly from the meter. No external power supply needed)</p> <p>This meter sends bursts of data at 115200 baud every 10 seconds. Some data lines exceed 1038 characters. To adapt to these conditions, compile firmware with: <pre><code>#define SML_BSIZ 1060\n#define MAX_METERS 1\n#define TMSBSIZ 2048\n#define USE_SML_SCRIPT_CMD\n#define SML_REPLACE_VARS\n</code></pre></p> View script <pre><code>&gt;D\nr=\"1,0-0:98.1.0(@(\"\n;use a variable to store the decode string\n&gt;B\nsmlj=0\n;don't send teleperiod MQTT at boot, because we can have 0 values (meter didn't send data yet)\n-&gt;sensor53 r\n&gt;R\nsmlj=0\n;don't send teleperiod MQTT at script restart, because we can have 0 values (meter didn't send data yet)\n&gt;S\nif upsecs&gt;22\nthen\nsmlj|=1\nendif\n;only send teleperiod MQTT if 22 seconds passed since boot (during this time meter most probably sent data)\n&gt;M 1\n+1,3,o,16,115200,Name,1\n1,1-0:32.7.0(@1,L1 Voltage,V,volts_l1,1\n1,1-0:52.7.0(@1,L2 Voltage,V,volts_l2,1\n1,1-0:72.7.0(@1,L3 Voltage,V,volts_l3,1\n1,1-0:14.7.0(@1,Frequency,Hz,freq,2\n1,0-0:96.14.0(@1,Current tariff,,tariff,0\n1,=h&lt;hr/&gt;\n1,1-0:1.8.0(@1,Energy import,kWh,enrg_imp,3\n1,1-0:2.8.0(@1,Energy export,kWh,enrg_exp,3\n1,1-0:1.8.1(@1,Energy import T1,kWh,enrg_imp_t1,3\n1,1-0:1.8.2(@1,Energy import T2,kWh,enrg_imp_t2,3\n1,1-0:2.8.1(@1,Energy export T1,kWh,enrg_exp_t1,3\n1,1-0:2.8.2(@1,Energy export T2,kWh,enrg_exp_t2,3\n1,1-0:1.7.0(@1,Power import,kW,pwr_imp,3\n1,1-0:2.7.0(@1,Power export,kW,pwr_exp,3\n1,1-0:13.7.0(@1,Power factor,,factor,3\n1,=h&lt;hr/&gt;\n1,1-0:3.8.0(@1,Reactive nrg import,kvarh,nrg_reac_imp,3\n1,1-0:4.8.0(@1,Reactive nrg export,kvarh,nrg_reac_exp,3\n1,1-0:5.8.0(@1,Reactive energy QI,kvarh,nrg_reac_q1,3\n1,1-0:6.8.0(@1,Reactive energy QII,kvarh,nrg_reac_q2,3\n1,1-0:7.8.0(@1,Reactive energy QIII,kvarh,nrg_reac_q3,3\n1,1-0:8.8.0(@1,Reactive energy QIV,kvarh,nrg_reac_q4,3\n1,1-0:5.7.0(@1,Reactive power QI,kvar,pwr_reac_q1,3\n1,1-0:6.7.0(@1,Reactive power QII,kvar,pwr_reac_q2,3\n1,1-0:7.7.0(@1,Reactive power QIII,kvar,pwr_reac_q3,3\n1,1-0:8.7.0(@1,Reactive power QIV,kvar,pwr_reac_q4,3\n1,=h&lt;hr/&gt;\n1,=hPrevious month stats:\n%r%1:1,Energy import,kWh,mo_enrg_imp,3\n%r%2:1,Energy import T1,kWh,mo_enrg_impt1,3\n%r%3:1,Energy import T2,kWh,mo_enrg_impt2,3\n%r%4:1,Energy export,kWh,mo_enrg_exp,3\n%r%5:1,Energy export T1,kWh,mo_enrg_expt1,3\n%r%6:1,Energy export T2,kWh,mo_enrg_expt2,3\n%r%7:1,Reactive nrg import,kvarh,mo_nrg_reac_imp,3\n%r%8:1,Reactive nrg export,kvarh,mo_nrg_reac_exp,3\n%r%9:1,Reactive energy QI,kvarh,mo_nrg_reac_q1,3\n%r%10:1,Reactive energy QII,kvarh,mo_nrg_reac_q2,3\n%r%11:1,Reactive energy QIII,kvarh,mo_nrg_reac_q3,3\n%r%12:1,Reactive energy QIV,kvarh,mo_nrg_reac_q4,3\n%r%13:1,Reactive energy SUM?,kvarh,mo_nrg_reac_sum,3\n%r%14:1,Peak power import L1,kW,mo_pw_pk_in_l1,3\n%r%15:1,Peak power import L2,kW,mo_pw_pk_in_l2,3\n%r%16:1,Peak power import L3,kW,mo_pw_pk_in_l3,3\n%r%17:1,Peak power export L1,kW,mo_pw_pk_ex_l1,3\n%r%18:1,Peak power export L2,kW,mo_pw_pk_ex_l2,3\n%r%19:1,Peak power export L3,kW,mo_pw_pk_ex_l3,3\n#\n</code></pre> Sample data <pre><code>/1234567890123\n\n0-0:1.0.0(202056789012W)\n0-0:42.0.0(AUX1234567890123)\n0-0:96.1.0(1234567890)\n0-0:96.14.0(0001)\n0-0:96.50.68(ON)\n0-0:17.0.0(90.000*kW)\n1-0:1.8.0(000258.072*kWh)\n1-0:1.8.1(000103.782*kWh)\n1-0:1.8.2(000154.290*kWh)\n1-0:1.8.3(000000.000*kWh)\n1-0:1.8.4(000000.000*kWh)\n1-0:2.8.0(000048.367*kWh)\n1-0:2.8.1(000032.813*kWh)\n1-0:2.8.2(000015.554*kWh)\n1-0:2.8.3(000000.000*kWh)\n1-0:2.8.4(000000.000*kWh)\n1-0:3.8.0(000003.513*kvarh)\n1-0:4.8.0(000156.910*kvarh)\n1-0:5.8.0(000003.498*kvarh)\n1-0:6.8.0(000000.015*kvarh)\n1-0:7.8.0(000027.718*kvarh)\n1-0:8.8.0(000129.192*kvarh)\n1-0:15.8.0(000306.440*kWh)\n1-0:32.7.0(233.0*V)\n1-0:52.7.0(230.6*V)\n1-0:72.7.0(228.7*V)\n1-0:31.7.0(002*A)\n1-0:51.7.0(002*A)\n1-0:71.7.0(001*A)\n1-0:13.7.0(0.758)\n1-0:33.7.0(0.615)\n1-0:53.7.0(0.746)\n1-0:73.7.0(0.937)\n1-0:14.7.0(49.98*Hz)\n1-0:1.7.0(00.000*kW)\n1-0:2.7.0(00.854*kW)\n1-0:5.7.0(00.000*kvar)\n1-0:6.7.0(00.000*kvar)\n1-0:7.7.0(00.735*kvar)\n1-0:8.7.0(00.000*kvar)\n0-0:98.1.0(210301000000W)(000249.070*kWh)(000100.816*kWh)(000148.254*kWh)(000047.903*kWh)(000032.349*kWh)(000015.554*kWh)(000003.513*kvarh)(000150.665*kvarh)(000003.498*kvarh)(000000.015*kvarh)(000027.119*kvarh)(000123.546*kvarh)(000296.974*kWh)(04.872*kW)(04.872*kW)(04.072*kW)(01.844*kW)(01.672*kW)(01.844*kW)\n0-0:96.13.0(\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\n!DA6A\n</code></pre>"},{"location":"Smart-Meter-Interface/#sbc-ale3-modbus","title":"SBC ALE3 (MODBus)","text":"View script <pre><code>&gt;DH\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,M,1,9600,SBC,1,1,02030023,02030028,0203002d,02030025,0203002a,0203002f,02030032,02030027,0203002c,02030031,02030021,02030015,02030018\n1,020304UUuu@i0:1,Spannung L1,V,Voltage_L1,0\n1,020304UUuu@i1:1,Spannung L2,V,Voltage_L2,0\n1,020304UUuu@i2:1,Spannung L3,V,Voltage_L3,0\n1,020304xxxxUUuu@i0:10,Strom L1,A,Current_L1,2\n1,020304xxxxUUuu@i1:10,Strom L2,A,Current_L2,2\n1,020304xxxxUUuu@i2:10,Strom L3,A,Current_L3,2\n1,=h=\n1,020304UUuu@i3:100,Leistung L1,kW,Power_L1,3\n1,020304UUuu@i4:100,Leistung L2,kW,Power_L2,3\n1,020304UUuu@i5:100,Leistung L3,kW,Power_L3,3\n1,020304UUuu@i6:100,Leistung Total,kW,Power_Total,3\n1,020304xxxxSSss@i3:100,BlindLeistung L1,kVAr,ReaktivePower_L1,3\n1,020304xxxxSSss@i4:100,BlindLeistung L2,kVAr,ReaktivePower_L2,3\n1,020304xxxxSSss@i5:100,BlindLeistung L3,kVAr,ReaktivePower_L3,3\n1,020304xxxxSSss@i6:100,BLeistung Total,kVAr,ReaktivePower_Total,3\n1,=h=\n1,020304UUuu@i7:100,CosPhi L1,,CosPhi_L1,2\n1,020304UUuu@i8:100,CosPhi L2,,CosPhi_L2,2\n1,020304UUuu@i9:100,CosPhi L3,,CosPhi_L3,2\n1,=h=\n1,020304UUuuUUuu@i10:100,T2 Wert,kWh,T2_Value,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sbc-ale3-2x-modbus","title":"SBC ALE3 2x (MODBus)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,M,1,9600,Meter,1,1,01030023,01030028,0103002d,01030025,0103002a,0103002f,01030032,01030027,0103002c,01030031,0103001B,0103001d,03030023,03030028,0303002d,03030025,0303002a,0303002f,03030032,03030027,0303002c,03030031,0303001B,0303001d\n1,=h Domestic Electricity:\n1,010304UUuuUUuu@i10:100,1 Tariff 1 total,kWh,M1_T1_total,2\n1,010304UUuuUUuu@i11:100,1 Tariff 1 partial,kWh,M1_T1_par,2\n1,=h Readings:\n1,010304UUuu@i0:1,1 Voltage L1,V,M1_Voltage_L1,0\n1,010304UUuu@i1:1,1 Voltage L2,V,M1_Voltage_L2,0\n1,010304UUuu@i2:1,1 Voltage L3,V,M1_Voltage_L3,0\n1,010304xxxxUUuu@i0:10,1 Current L1,A,M1_Current_L1,2\n1,010304xxxxUUuu@i1:10,1 Current L2,A,M1_Current_L2,2\n1,010304xxxxUUuu@i2:10,1 Current L3,A,M1_Current_L3,2\n1,010304UUuu@i3:100,1 Active Power L1,kW,M1_PRMS_L1,3\n1,010304UUuu@i4:100,1 Active Power L2,kW,M1_PRMS_L2,3\n1,010304UUuu@i5:100,1 Active Power L3,kW,M1_PRMS_L3,3\n1,010304UUuu@i6:100,1 Active Power total,kW,M1_PRMS_total,3\n1,010304xxxxSSss@i3:100,1 Reactive Power L1,kVAr,M1_QRMS_L1,3\n1,010304xxxxSSss@i4:100,1 Reactive Power L2,kVAr,M1_QRMS_L2,3\n1,010304xxxxSSss@i5:100,1 Reactive Power L3,kVAr,M1_QRMS_L3,3\n1,010304xxxxSSss@i6:100,1 Reactive Power total,kVAr,M1_QRMS_total,3\n1,010304UUuu@i7:100,1 CosPhi L1,,M1_CosPhi_L1,2\n1,010304UUuu@i8:100,1 CosPhi L2,,M1_CosPhi_L2,2\n1,010304UUuu@i9:100,1 CosPhi L3,,M1_CosPhi_L3,2\n1,=h________________________________________________\n; meter 2 +12 offset\n1,=h Heat Pump\n1,030304UUuuUUuu@i22:100,2 Tariff 1 total,kWh,M2_T1_total,2\n1,030304UUuuUUuu@i23:100,2 Tariff 1 partial,kWh,M2_T1_par,2\n1,=h Readings:\n1,030304UUuu@i12:1,2 Voltage L1,V,M2_Voltage_L1,0\n1,030304UUuu@i13:1,2 Voltage L2,V,M2_Voltage_L2,0\n1,030304UUuu@i14:1,2 Voltage L3,V,M2_Voltage_L3,0\n1,030304xxxxUUuu@i12:10,2 Current L1,A,M2_Current_L1,2\n1,030304xxxxUUuu@i13:10,2 Current L2,A,M2_Current_L2,2\n1,030304xxxxUUuu@i14:10,2 Current L3,A,M2_Current_L3,2\n1,030304UUuu@i15:100,2 Active Power L1,kW,M2_PRMS_L1,3\n1,030304UUuu@i16:100,2 Active Power L2,kW,M2_PRMS_L2,3\n1,030304UUuu@i17:100,2 Active Power L3,kW,M2_PRMS_L3,3\n1,030304UUuu@i18:100,2 Active Power total,kW,M2_PRMS_total,3\n1,030304xxxxSSss@i15:100,2 Reactive Power L1,kVAr,M2_QRMS_L1,3\n1,030304xxxxSSss@i16:100,2 Reactive Power L2,kVAr,M2_QRMS_L2,3\n1,030304xxxxSSss@i16:100,2 Reactive Power L3,kVAr,M2_QRMS_L3,3\n1,030304xxxxSSss@i18:100,2 Reactive Power total,kVAr,M2_QRMS_total,3\n1,030304UUuu@i19:100,2 CosPhi L1,,M2_CosPhi_L1,2\n1,030304UUuu@i20:100,2 CosPhi L2,,M2_CosPhi_L2,2\n1,030304UUuu@i21:100,2 CosPhi L3,,M2_CosPhi_L3,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#schneider-iem3150-modbus","title":"Schneider iEM3150 (MODBus)","text":"<p>Set device parity to EVEN. Set device serial baud rate to 9600.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n\n&gt;M 1\n+1,3,M,0,9600,MODBUS,1,1,0103B02B,01030BB7,01030BB9,01030BBB,01030BC1,01030BCB,01030BCD,01030BCF,01030BD1,01030BD3,01030BD5,01030BD7,01030BDB,01030BED,01030BEF,01030BF1,01030BF3,01030C0B,01030C25\n; ***************************************\n; *   Schneider iEM3150 Energy Meter    *\n; ***************************************\n; Serial: 9600\n; Device parity: EVEN\n; Slave address: 0x01\n; ***************************************\n1,010304ffffffff@i0:1,Wirkenergie,kWh,1_8_0,3\n1,010304ffffffff@i1:1,Strom L1,A,31_7_0,3\n1,010304ffffffff@i2:1,Strom L2,A,51_7_0,3\n1,010304ffffffff@i3:1,Strom L3,A,71_7_0,3\n1,010304ffffffff@i4:1,Strom Avg,A,11_7_0,3\n1,010304ffffffff@i5:1,Spannung L1-L2,V,V_L1-L2,3\n1,010304ffffffff@i6:1,Spannung L2-L3,V,V_L2-L3,3\n1,010304ffffffff@i7:1,Spannung L3-L1,V,V_L3-L1,3\n1,010304ffffffff@i8:1,Spannung L-L,V,V_L-L_sum,3\n1,010304ffffffff@i9:1,Spannung L1-N,V,32_7_0,3\n1,010304ffffffff@i10:1,Spannung L2-N,V,52_7_0,3\n1,010304ffffffff@i11:1,Spannung L3-N,V,72_7_0,3\n1,010304ffffffff@i12:1,Spannung L-N,V,12_7_0,3\n1,010304ffffffff@i13:1,Wirkleistung L1,kW,21_7_0,3\n1,010304ffffffff@i14:1,Wirkleistung L2,kW,41_7_0,3\n1,010304ffffffff@i15:1,Wirkleistung L3,kW,61_7_0,3\n1,010304ffffffff@i16:1,Wirkleistung,kW,1_7_0,3\n1,010304ffffffff@i17:1,Leistungsfaktor,,13_7_0,3\n1,010304ffffffff@i18:1,Frequenz,Hz,14_7_0,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#schneider-iem3155-modbus","title":"Schneider iEM3155 (MODBus)","text":"<p>Set device parity to NONE</p> View script <pre><code>&gt;D  \n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,m,0,19200,iEM3155,1,1,0103B02D,0103B02B,01030BF3,01030BED,01030BEF,01030BF1,01030BD3,01030BD5,01030BD7,01030BB7,01030BB9,01030BBB,01030C0B,01030C25\n; ***************************************\n; *   Schneider iEM3155 Energy Meter    *\n; ***************************************\n; Serial: 19200\n; Set device parity to NONE\n; Slave address: 0x01\n; https://download.schneider-electric.com/files?p_Doc_Ref=DOCA0005EN&amp;p_enDocType=User+guide&amp;p_File_Name=DOCA0005EN-13.pdf\n1,010304ffffffff@i0:1,Gesamteinspeisung,kWh,Gesamteinspeisung,0\n1,010304ffffffff@i1:1,Gesamtverbrauch,kWh,Gesamtverbrauch,0\n1,010304ffffffff@i2:0.001,Momentanverbrauch,W,Momentanverbrauch,0\n1,010304ffffffff@i3:1,L1 Wirkenergie,kW,L1Wirkenergie,3\n1,010304ffffffff@i4:1,L2 Wirkenergie,kW,L2Wirkenergie,3\n1,010304ffffffff@i5:1,L3 Wirkenergie,kW,L3Wirkenergie,3\n1,010304ffffffff@i6:1,L1 Spannung,V,L1Spannung,0\n1,010304ffffffff@i7:1,L2 Spannung,V,L2Spannung,0\n1,010304ffffffff@i8:1,L3 Spannung,V,L3Spannung,0\n1,010304ffffffff@i9:1,L1 Strom,A,L1Strom,2\n1,010304ffffffff@i10:1,L2 Strom,A,L2Strom,2\n1,010304ffffffff@i11:1,L3 Strom,A,L3Strom,2\n1,010304ffffffff@i12:1,Leistungsfaktor,,Leistungsfaktor,2\n1,010304ffffffff@i13:1,Frequenz,Hz,Frequenz,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sdm230-modbus","title":"SDM230 (MODBus)","text":"View script <pre><code>&gt;D  \nms=\"1,010404ffffffff@\"  \n&gt;B  \n-&gt;sensor53 r  \n&gt;M 1  \n+1,3,m,0,9600,PV,1,2,01040000,01040006,0104000C,01040012,01040018,0104001E,01040024,01040046,01040048,0104004A,0104004C,0104004E,01040054,01040056,01040058,0104005A,0104005C,0104005E,01040102,01040108,01040152,01040158,01040180,01040182  \n%ms%i0:1,Volt,V,Volt,2  \n%ms%i1:1,Strom P1,A,Strom,3  \n%ms%i2:1,*,W,Leistung,2  \n%ms%i3:1,Scheinleistung,VA,ScheinLeistung,2  \n%ms%i4:1,Blindleistung,VAr,Blindleistung,2  \n%ms%i5:1,P-Faktor,,P_Faktor,1  \n%ms%i6:1,cosPhi,\u00b0,cosPhi,2  \n%ms%i7:1,Frequenz,Hz, Frequenz,1  \n%ms%i8:1,Wirkleistung Import,kWh,Wirkleistung_Im1,3  \n%ms%i9:1,Wirkleistung Export,kWh,Wirkleistung_Ex,3  \n%ms%i10:1,Blindleistung Import,VkkVARh,Blindleistung_Im,3  \n%ms%i11:1,Blindleistung Export,VkkVARh,Blindleistung_Ex,3  \n%ms%i12:1,Gesamtleistungsbedarf,W,GesLeistBed,2  \n%ms%i13:1,GesamtLeistung Max,W,GesLeistMax,2  \n%ms%i14:1,Akt.Nachfrage,W,AktNachfrage,2  \n%ms%i15:1,R\u00fcckleistungs Bed,W,RueckLeistBed,2  \n%ms%i16:1,R\u00fcckleistungs Bed Max,W,RueckLeistBedMax,2  \n%ms%i17:1,Strom Nachfrage,A,StromNachfrage2,2  \n%ms%i19:1,Max Strombedarf,A,StromBedMax,2  \n%ms%i20:1,Wirkleistung Gesamt,kWh,Wirkleistung_total,2  \n%ms%i21:1,Blindleistung Gesamt,kVARh,Blindleistung_total,2  \n%ms%i22:1,Temp Gesamtleistung,kWh,TempGesamtLeist,2  \n#  \n</code></pre>"},{"location":"Smart-Meter-Interface/#sdm530-modbus","title":"SDM530 (MODBus)","text":"View script <pre><code>&gt;D  \n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,m,0,9600,MODBUS,1,1,01040000,01040002,01040004,01040006,01040008,0104000a,0104000c,0104000e,01040010  \n1,010404ffffffff@i0:1,Voltage P1,V,Voltage_P1,2  \n1,010404ffffffff@i1:1,Voltage P2,V,Voltage_P2,2  \n1,010404ffffffff@i2:1,Voltage P3,V,Voltage_P3,2  \n1,010404ffffffff@i3:1,Current P1,A,Current_P1,2  \n1,010404ffffffff@i4:1,Current P2,A,Current_P2,2  \n1,010404ffffffff@i5:1,Current P3,A,Current_P3,2  \n1,010404ffffffff@i6:1,Active Power P1,W,Power_P1,2  \n1,010404ffffffff@i7:1,Active Power P2,W,Power_P2,2  \n1,010404ffffffff@i8:1,Active Power P3,W,Power_P3,2  \n#  \n</code></pre>"},{"location":"Smart-Meter-Interface/#sdm630-modbus","title":"SDM630 (MODBus)","text":"<p>Show how to request multiple registers.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n\n; multiple float register request, 9 at once\n&gt;M 1\n+1,3,m,0,9600,SDM630,1,20,r010400000012\n1,010424ffffffff@i0:1,Voltage P1,V,Voltage_P1,2\n1,010424x4ffffffff@i0:1,Voltage P2,V,Voltage_P2,2\n1,010424x8ffffffff@i0:1,Voltage P3,V,Voltage_P3,2\n1,010424x12ffffffff@i0:1,Current P1,A,Current_P1,2\n1,010424x16ffffffff@i0:1,Current P2,A,Current_P2,2\n1,010424x20ffffffff@i0:1,Current P3,A,Current_P3,2\n1,010424x24ffffffff@i0:1,Active Power P1,W,Power_P1,2\n1,010424x28ffffffff@i0:1,Active Power P2,W,Power_P2,2\n1,010424x32ffffffff@i0:1,Active Power P3,W,Power_P3,2\n#\n\n; multiple float register request, 3 at once\n&gt;xM 1\n+1,3,m,0,9600,SDM630,1,10,r010400000006,r010400060006,r0104000c0006\n1,01040cffffffff@i0:1,Voltage P1,V,Voltage_P1,2\n1,01040cx4ffffffff@i0:1,Voltage P2,V,Voltage_P2,2\n1,01040cx8ffffffff@i0:1,Voltage P3,V,Voltage_P3,2\n1,01040cffffffff@i1:1,Current P1,A,Current_P1,2\n1,01040cx4ffffffff@i1:1,Current P2,A,Current_P2,2\n1,01040cx8ffffffff@i1:1,Current P3,A,Current_P3,2\n1,01040cffffffff@i2:1,Active Power P1,W,Power_P1,2\n1,01040cx4ffffffff@i2:1,Active Power P2,W,Power_P2,2\n1,01040cx8ffffffff@i2:1,Active Power P3,W,Power_P3,2\n#\n\n; single float register request\n&gt;xM 1\n+1,3,m,0,960,SDM630,1,5,01040000,01040002,01040004,01040006,01040008,0104000a,0104000c,0104000e,01040010,,01040048,0104004a\n1,010404ffffffff@i0:1,Voltage P1,V,Voltage_P1,2\n1,010404ffffffff@i1:1,Voltage P2,V,Voltage_P2,2\n1,010404ffffffff@i2:1,Voltage P3,V,Voltage_P3,2\n1,010404ffffffff@i3:1,Current P1,A,Current_P1,2\n1,010404ffffffff@i4:1,Current P2,A,Current_P2,2\n1,010404ffffffff@i5:1,Current P3,A,Current_P3,2\n1,010404ffffffff@i6:1,Active Power P1,W,Power_P1,2\n1,010404ffffffff@i7:1,Active Power P2,W,Power_P2,2\n1,010404ffffffff@i8:1,Active Power P3,W,Power_P3,2\n1,010404ffffffff@i9:1,Total Import,KWh,Timp,3\n1,010404ffffffff@i10:1,Total Export,KWh,Texp,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sdm72d-modbus","title":"SDM72D (MODBus)","text":"<p>Script to extract readings from Eastron SDM72D Series devices (tested on SDM72D-M). Manual with comprehensive documentation about all Modbus registers available here.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,25,mN1,0,9600,SDM72D,26,1,01040000,01040002,01040004,01040006,01040008,0104000a,0104000c,0104000e,01040010,01040012,01040014,01040016,01040018,0104001a,0104001c,0104001e,01040020,01040022,0104002a,0104002e,01040030,01040034,01040038,0104003c,0104003e,01040046,01040048,0104004A,01040156,01040158,0104018c,01040500,01040502\n1,010404ffffffff@i0:1,Voltage P1,V,voltage_phase1,2\n1,010404ffffffff@i1:1,Voltage P2,V,voltage_phase2,2\n1,010404ffffffff@i2:1,Voltage P3,V,voltage_phase3,2\n1,010404ffffffff@i3:1,Current P1,A,current_phase1,2\n1,010404ffffffff@i4:1,Current P2,A,current_phase2,2\n1,010404ffffffff@i5:1,Current P3,A,current_phase3,2\n1,010404ffffffff@i6:1,Power P1,W,power_phase1,2\n1,010404ffffffff@i7:1,Power P2,W,power_phase2,2\n1,010404ffffffff@i8:1,Power P3,W,power_phase3,2\n1,010404ffffffff@i9:1,Power Apparent P1,VA,power_apparent_phase1,2\n1,010404ffffffff@i10:1,Power Apparent P2,VA,power_apparent_phase2,2\n1,010404ffffffff@i11:1,Power Apparent P3,VA,power_apparent_phase3,2\n1,010404ffffffff@i12:1,Power Reactive P1,VAr,power_reactive_phase1,2\n1,010404ffffffff@i13:1,Power Reactive P2,VAr,power_reactive_phase2,2\n1,010404ffffffff@i14:1,Power Reactive P3,VAr,power_reactive_phase3,2\n1,010404ffffffff@i15:1,Power Factor P1,,power_factor_phase1,2\n1,010404ffffffff@i16:1,Power Factor P2,,power_factor_phase2,2\n1,010404ffffffff@i17:1,Power Factor P3,,power_factor_phase3,2\n1,010404ffffffff@i18:1,Average Voltage,V,voltage_avg,2\n1,010404ffffffff@i19:1,Average Current,A,current_avg,2\n1,010404ffffffff@i20:1,Current Total,A,current_total,2\n1,010404ffffffff@i21:1,Power Total,W,power_total,2\n1,010404ffffffff@i22:1,Power Apparent Total,VA,power_apparent_total,2\n1,010404ffffffff@i23:1,Power Reactive Total,VAr,power_reactive_total,2\n1,010404ffffffff@i24:1,Power Factor Total,,power_factor_total,2\n1,010404ffffffff@i25:1,Frequency,Hz,frequency,2\n1,010404ffffffff@i26:1,Energy Imported,kWh,energy_imported,3\n1,010404ffffffff@i27:1,Energy Exported,kWh,energy_exported,3\n1,010404ffffffff@i28:1,Energy Total,kWh,energy_total,3\n1,010404ffffffff@i29:1,Energy Reactive Total,kVArh,energy_reactive_total,3\n1,010404ffffffff@i30:1,Net Energy,kWh,energy_net,3\n1,010404ffffffff@i31:1,Import Power,W,power_import,2\n1,010404ffffffff@i32:1,Export Power,W,power_export,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#shelly-pro-3em-emulation","title":"Shelly PRO 3EM emulation","text":"<p>script to emulate a shelly pro 3em to use with solar storage devices e.g. marstek</p> View script <pre><code>&gt;D 250\n; this script emulates a shelly pro, with small modifications may also emulate an ecotracker\n; proven to work an marstek Venus, Jupiter and B2500\nres=0\nc1p=0\nc2p=0\nc3p=0\nc1c=0\nc2c=0\nc3c=0\ncpwr=0\nstr=\"\"\ntstr=\"\"\ncstr=\"\"\nmstr1=\"\"\nmstr2=\"\"\nmstr3=\"\"\nheader=\"\"\nonce=0\n\n&gt;B\n=&gt;sensor53 r\n; if you modify this section you must restart tasmota \n\n&gt;ah\n; http rpc handler\nres=won(1 \"/rpc/*\")\n; http status\nres=won(2 \"/status\")\n; http ecotacker status\nres=won(3 \"/v1/json\")\n\n&gt;on1\n;print here comes http rpc request\nstr=warg\nres=ins(str \"EM.GetStatus\")\nif res&gt;=0 {\nwcs so(4)\n=#htph\nwcs %mstr1%\n=#getsrc\nwcs %header%\n=#getstat\nwcs %mstr1%\nwcs %mstr2%\nwcf\nbreak\n}\nres=ins(str \"Shelly.GetDeviceInfo\")\nif res&gt;=0 {\nwcs so(4)\n=#htph\nwcs %mstr1% \n=#getsrc\n=#getdefi\nwcs %header%\nwcs %mstr1%\nwcs %mstr2%\nwcf\nbreak\n}\nres=ins(str \"EM.GetConfig\")\nif res&gt;=0 {\nwcs so(4)\n=#htph\nwcs %mstr1%\n=#getsrc\n=#getcfg\nwcs %header%\nwcs %mstr1%\nwcf\nbreak\n}\nres=ins(str \"EMData.GetStatus\")\nif res&gt;=0 {\nwcs so(4)\n=#htph\nwcs %mstr1%\n=#getsrc\n=#egetstat\nwcs %header%\nwcs %mstr1%\nwcf\nbreak\n}\n\nprint unknown http equest: %str%\n\n&gt;on2\n;print here comes the status request\nwcs so(4)\n=#htph\nwcs %mstr1%\ndp(0 2)\nwcs {\"Power\": %cpwr%,\"E_in\":%sml[1]%,\"E_out\":%sml[2]%}\nwcf\n\n&gt;on3\n;print here comes the v1/json for ecotracker\nwcs so(4)\n=#htph\nwcs %mstr1%\ndp(0 2)\nwcs {\"energyCounterIn\":%sml[1]%,\"energyCounterOut\":%sml[2]%,\"powerAvg\":%cpwr%,\"energyCounterInT1\":0,\nwcs \"energyCounterInT2\":0,\"power\":%cpwr%}\nwcf\n\n#htph\nmstr1=\"HTTP/1.1 200 OK\\r\\nContent-type: application/json\\r\\n\\r\\n\"\n\n#getcfg\nmstr1=\"{\\\"id\\\":0,\\\"name\\\":null,\\\"blink_mode_selector\\\":\\\"active_energy\\\",\\\"phase_selector\\\":\\\"a\\\",\\\"monitor_phase_sequence\\\":true,\\\"ct_type\\\":\\\"120A\\\"}}\"\n\n#getdefi\nmstr1=\"{\\\"name\\\":\\\"\"+tstr+\"\\\",\\\"id\\\":\\\"\"+tstr+\"\\\",\\\"mac\\\":\\\"\"+maca+\"\\\",\\\"slot\\\":1,\\\"model\\\":\\\"SPEM-003CEBEU\\\",\"\nmstr2=\"\\\"gen\\\":2,\\\"fw_id\\\":\\\"20241011-114455/1.4.4-g6d2a586\\\",\"\nmstr2+=\"\\\"ver\\\":\\\"1.4.4\\\",\\\"app\\\":\\\"Pro3EM\\\",\\\"auth_en\\\":0,\\\"profile\\\":\\\"triphase\\\"}}\"\n\n#getstat\ndp(0 2)\nmstr1=\"{\\\"id\\\":0,\\\"a_current\\\":\"+s(c1c)+\",\\\"a_voltage\\\":230,\\\"a_act_power\\\":\"+s(c1p)+\",\\\"a_aprt_power\\\":\"+s(c1p)+\",\\\"a_pf\\\":1,\\\"a_freq\\\":50,\"\nmstr1+=\"\\\"b_current\\\":\"+s(c2c)+\",\\\"b_voltage\\\":230,\\\"b_act_power\\\":\"+s(c2p)+\",\\\"b_aprt_power\\\":\"+s(c2p)+\",\\\"b_pf\\\":1,\\\"b_freq\\\":50,\"\nmstr2=\"\\\"c_current\\\":\"+s(c3c)+\",\\\"c_voltage\\\":230,\\\"c_act_power\\\":\"+s(c3p)+\",\\\"c_aprt_power\\\":\"+s(c3p)+\",\\\"c_pf\\\":1,\\\"c_freq\\\":50,\"\nmstr2+=\"\\\"total_current\\\":\"+s(c1c+c2c+c3c)+\",\\\"total_act_power\\\":\"+s(cpwr)+\",\\\"total_aprt_power\\\":\"+s(cpwr)+\"}}\"\n\n#egetstat\ndp(0 2)\nmstr1=\"{\\\"id\\\":0,\\\"a_total_act_energy\\\":\"+s(c1p)+\",\\\"a_total_act_ret_energy\\\":\"+s(c1p)+\",\\\"b_total_act_energy\\\":\"+s(c2p)+\",\\\"b_total_act_ret_energy\\\":\"+s(c2p)+\",\\\"c_total_act_energy\\\":\"+s(c3p)+\",\\\"c_total_act_ret_energy\\\":\"+s(c3p)+\",\\\"total_act\\\":\"+s(cpwr)+\",\\\"total_act_ret\\\":\"+s(cpwr)+\"}}\"\n\n#getsrc\ntstr=\"shellypro3em-\"+maca\nheader=\"{\\\"id\\\":0,\\\"src\\\":\\\"\"+tstr+\"\\\",\\\"result\\\":\"\n\n&gt;S\nif year&lt;2000 {\nbreak\n}\n\n; adapt this to your meter\n; update every 3 seconds\nif upsecs%3==0 {\ncpwr=sml[3]\nc1p=sml[4]\nc2p=sml[5]\nc3p=sml[6]\n}\n\n; use this if you only have only one phase meter values\n;c1p=cpwr/3\n;c2p=cpwr/3\n;c3p=cpwr/3\n\n; calculate phase currents\nc1c=c1p/230\nc2c=c2p/230\nc3c=c3p/230\n\nif once==0 {\n; start mdns for Shelly second parameter \"-\" means use device mac\nres=mdns(\"shellypro3em-\" \"-\" \"shelly\")\n; start udp rpc handler on port 1010 or on port 2220 (for b2500)\nres=udp(0 1010)\n;res=udp(0 2220)\nonce=1\n}\n\n; evaluate udp input\nstr=udp(1)\nif str!=\"\" {\n;print udp rpc payload=%str%\nres=ins(str \"EM.GetStatus\")\nif res&gt;=0 {\n=#getsrc\n=#getstat\nudp(2 header mstr1 mstr2)\n;print &gt;&gt; %header%\n;print &gt;&gt; %mstr1%\n;print &gt;&gt; %mstr2%\nbreak\n}\n\nres=ins(str \"Shelly.GetDeviceInfo\")\nif res&gt;=0 {\n=#getsrc\n=#getdefi\nudp(2 header mstr1 mstr2)\n;print &gt;&gt; 1 %mstr1%\n;print &gt;&gt; 2 %mstr2%\nbreak\n}\n\nres=ins(str \"EM.GetConfig\")\nif res&gt;=0 {\n=#getsrc\n=#getcfg\nudp(2 header mstr1)\n;print &gt;&gt; 1 %mstr1%\nbreak\n}\n\nres=ins(str \"EMData.GetStatus\")\nif res&gt;=0 {\n=#getsrc\n=#egetstat\nudp(2 header mstr1)\n;print &gt;&gt; 1 %mstr1%\nbreak\n}\n}\n\n; adapt your own meter descriptor here\n&gt;M 1\n+1,5,o,16,9600,eBZ,4\n1,1-0:1.8.0*255(@1,Verbrauch,kWh,E_in,3\n1,1-0:2.8.0*255(@1,Einspeisung,kWh,E_out,3\n1,1-0:16.7.0*255(@1,akt. Leistung,W,Power,0\n1,1-0:36.7.0*255(@1,Leistung L1,W,36_7_0,0\n1,1-0:56.7.0*255(@1,Leistung L2,W,56_7_0,0\n1,1-0:76.7.0*255(@1,Leistung L3,W,76_7_0,0\n1,1-0:32.7.0*255(@1,Spannung L1,V,32_7_0,1\n1,1-0:52.7.0*255(@1,Spannung L2,V,52_7_0,1\n1,1-0:72.7.0*255(@1,Spannung L3,V,72_7_0,1\n1,1-0:96.1.0*255(@#),Identifikation,,96_1_0,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sorel-ltdc-canbus","title":"Sorel LTDC (CANBus)","text":"<p>Compile firmware with #define <code>USE_SML_CANBUS</code>. Use a proper CAN transceiver. You need a 120Ohms resistor in the second CAN port of the controller, otherwise ESP32 device will not decode anything on the bus, the baudrate is 250 KBITS.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n; SOREL LTDC\n; params -&gt; 04 = baudrate 250kb + number of receive buffers * 100\n+1,3,C,0,3204,CAN,1,5\n1,100124800500uuUU@10,Temp S1,\u00baC,S1,0\n1,100124800501uuUU@10,Temp S2,\u00baC,S2,0\n1,100124800502uuUU@10,Temp S3,\u00baC,S3,0\n1,100124800503uuUU@10,Temp S4,\u00baC,S4,0\n1,10022480050000ss@-0.01,Relay R1,,R1,0\n1,10022480050100ss@-0.01,Relay R2,,R2,0\n1,10022480050200ss@-0.01,Relay R3,,R3,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sorel-xhcc-canbus","title":"Sorel XHCC (CANBus)","text":"<p>Compile firmware with #define <code>USE_SML_CANBUS</code>. Use a proper CAN transceiver. You need a 120Ohms resistor in the second CAN port of the controller, otherwise ESP32 device will not decode anything on the bus, the baudrate is 250 KBITS.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n; SOREL XHCC\n; params -&gt; 04 = baudrate 250kb + number of receive buffers * 100\n; character 5 and 6 (in the example below \"8b\") is the can-bus id of your sorel device\n; you need to replace it with your xhcc can-bus id converted to hex format\n; you will find your can-bus id (in decimal) in Special Functions (7) -&gt; Network (31) -&gt; CAN-bus ID (4)\n; in the example below, the can-bus id of the xhcc device was \"139\"\n+1,26,C,0,3204,XHCC,25,5\n1,10018b800500ssSS@10,Temp S1,\u00baC,S1,1\n1,10018b800501ssSS@10,Temp S2,\u00baC,S2,1\n1,10018b800502ssSS@10,Temp S3,\u00baC,S3,1\n1,10018b800503ssSS@10,Temp S4,\u00baC,S4,1\n1,10018b800504ssSS@10,Temp S5,\u00baC,S5,1\n1,10018b800505ssSS@10,Temp S6,\u00baC,S6,1\n1,10018b800506ssSS@10,Temp S7,\u00baC,S7,1\n1,10018b800507ssSS@10,Temp S8,\u00baC,S8,1\n1,10018b800508ssSS@10,Temp S9,\u00baC,S9,1\n1,10028b80050000ss@-1,Relay R1,,R1,0\n1,10028b80050100ss@-1,Relay R2,,R2,0\n1,10028b80050200ss@-1,Relay R3,,R3,0\n1,10028b80050300ss@-1,Relay R4,,R4,0\n1,10028b80050400ss@-1,Relay R5,,R5,0\n1,10028b80050500ss@-1,Relay R6,,R6,0\n1,10028b80050600ss@-1,Relay R7,,R7,0\n1,10028b80050702ss@-1,Relay V1,,V1,0\n1,10028b80050802ss@-1,Relay V2,,V2,0\n1,10028b80050902ss@-1,Relay V3,,V3,0\n1,10028b80050a02ss@-1,Relay V4,,V4,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#siemens-im-350","title":"Siemens IM-350","text":"<p>This device is used in the grid of Wiener Netze. Insert your Key into the script.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,r,0,9600,Home\n1,=so3,256\n1,=so4,KEY\n1,020909x14UUuuUUuu@1000,Z\u00e4hlerstand,kWh,Zaehlerstand,2\n1,020909x34UUuuUUuu@1000,Bezug aktuell,kwh,Bezug,3 \n1,020909x24UUuuUUuu@1000,BL Bezug,kvarh,BL_Bezug,3 \n1,020909x19UUuuUUuu@1000,Einspeisung Gesamt,kWh,Einspeisung_ges,2 \n1,020909x39UUuuUUuu@1000,Einspeisung aktuell ,kW,Einspeisung_akt,3 \n1,020909x29UUuuUUuu@1000,BL Einspeisung,kvarh,BL_Einspeisung,3\n1,020909x19UUuu@1,year,,year,0\n1,020909x21ss@1,month,,month,0\n1,020909x22ss@1,day,,day,0\n1,020909x24ss@1,hh,,hh,0\n1,020909x25ss@1,mm,,mm,0\n1,020909x26ss@1,ss,,ss,0\n1,020909x32UUuuUUuu@1000,+A,kWh,+A,3\n1,020909x37UUuuUUuu@1000,-A,kWh,-A,3\n1,020909x42UUuuUUuu@1000,+R,varh,+R,3\n1,020909x47UUuuUUuu@1000,-R,varh,-R,3\n1,020909x52UUuuUUuu@1,+P,W,+P,3\n1,020909x57UUuuUUuu@1,-P,W,-P,3\n1,020909x62UUuuUUuu@1,+Q,var,+Q,3\n1,020909x67UUuuUUuu@1,-Q,var,-Q,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#siemens-im-350-raw","title":"Siemens IM-350 (RAW)","text":"<p>This device is used in the grid of Wels Strom in Upper Austria. Insert your KEY into the script.</p> <p>You may need to adapt the IDENTIFIER string in the text variable 'r' ('020a0906' here) to the code shown in your dump. For explanation see Iskra AM550 (Wiener Netze).</p> <p>Connection is via the RJ11 port which also works with 3V3 but needs a transistor on the dataline to invert the signal (like Sanxing SX6x1). An external power supply is required.</p> <p>The website https://www.smartcircuits.de/wattwaechter-wifi-usb/flashen/ (in German) allows to directly flash Tasmota with the included Smart Meter Interface to your device through your Chrome or Edge browser.</p> View script <pre><code>&gt;D\n;define text variable: \"MeterNbr,IDENTIFIER\"\nr=\"1,020a0906\"\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,r,0,115200,Meter\n1,=so3,256\n1,=so4,KEY\n%r%x24UUuu@1,year,,year,0\n%r%x26ss@1,month,,month,0\n%r%x27ss@1,day,,day,0\n%r%x18ss@1,hh,,hh,0\n%r%x19ss@1,mm,,mm,0\n%r%x20ss@1,ss,,ss,0\n%r%x30UUuuUUuu@1000,Energy A+,kWh,1_8_0,3\n%r%x35UUuuUUuu@1000,Energy A-,kWh,2_8_0,3\n%r%x40UUuuUUuu@1000,reactive E. R+,kVarh,3_8_0,3\n%r%x45UUuuUUuu@1000,reactive E. R-,kVarh,4_8_0,3\n%r%x50UUuuUUuu@1,active P+,W,1_7_0,0\n%r%x55UUuuUUuu@1,active P-,W,2_7_0,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#siemens-td-3511","title":"Siemens TD-3511","text":"<p>This device is used in the grid of EGTF - Elektrizit\u00e4ts-Genossenschaft Tacherting-Feichten eG. Read uses IEC 62056-21 data mode \"C\" without acknowledgement by the reading device.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,o,0,300,STROM,1,600,2F3F210D0A\n1,1.8.1(@1,Total Consumed,kWh,Total_in,3\n1,2.8.1(@1,Total Delivered,kWh,Total_out,3\n1,0.0.0(@#),Meter Number,,Meter_number,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#trovis-557x-modbus","title":"Trovis 557x (MODBus)","text":"<p>These heating regulators have a lot of registers. If your station number is different from standard (247 ==&gt; 0xF7) you have got to change every first byte accordingly.</p> View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,m,0,19200,Trovis,1,2,rF7030009000E,rF703001C0004,F703006A\n1,F7031CSSss@i0:10,Au\u00dfentemp.,\u00b0C,Temp_Outside,1\n1,F7031CxxxxxxxxxxxxSSss@i0:10,Vorlauftemp.,\u00b0C,Temp_Flow,1\n1,F7031CxxxxxxxxxxxxxxxxxxxxxxxxxxxxSSss@i0:10,R\u00fccklauftemp.,\u00b0C,Temp_Return,1\n1,F7031CxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxSSss@i0:10,Speichertemp.,\u00b0C,Temp_Vessel,1\n1,F70308UUuu@i1:1,MesswertImp-h,imp/h,Metric_ImpH,0\n1,F70308xxxxUUuu@i1:100,Messwertm3-h,m\u00b3/h,Metric_M3H,2\n1,F70308xxxxxxxxUUuu@i1:10,AA10-10V,V,Metric_AA10,1\n1,F70308xxxxxxxxxxxxUUuu@i1:10,AA20-10V,V,Metric_AA20,1\n1,F70304UUuu@i2:1,StellsignalRk1,%,CtrlSig_RK1,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#wolf-csz-11300-heater-ebus","title":"WOLF CSZ 11/300 Heater (EBus)","text":"View script <pre><code>&gt;D  \n&gt;B  \n-&gt;sensor53 r\n&gt;M 1  \n+1,3,e,0,2400,EBUS  \n1,xxxx0503xxxxxxxxxxxxxxxxss@1,Outside temperature,C,Outsidetemp,0  \n1,xxxx5014xxxxxxxxxxuu@1,Romm temperature,C,Roomtemp,0  \n1,xxxx0503xxxxxxxxxxxxxxuu@1,Warmwater,C,Warmwater,0  \n1,xxxx0503xxxxxxxxxxuu@1,Boiler,C,Boiler,0  \n1,03fe0503xxxxxxxxxxxxuu@1,Returns,C,Returns,0  \n1,03fe0503xxxxuu@1,Status,,Status,0  \n1,03fe0503xxxxxxuu@b3:1,Burner on,,Burner,0  \n1,xxxx5017xxxxxxuuuu@16,Solar collektor,C,Collector,1  \n1,xxxx5017xxxxxxxxxxuuuu@16,Solar storage,C,Solarstorage,1  \n1,xxxx5017xxuu@b0:1,Solar pump on,,Solarpump,0  \n#  \n</code></pre>"},{"location":"Smart-Meter-Interface/#zpa-gh302-sml","title":"ZPA GH302 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,Strom\n1,77070100010800ff@1000,Bezug,kWh,Total_in,0\n1,77070100020800ff@1000,Einspeisung,kWh,Total_out,0\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#zpa-gh305-sml","title":"ZPA GH305 (SML)","text":"View script <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r\n&gt;M 1\n+1,3,s,0,9600,SML\n1,77070100010800ff@1000,Total Verbrauch,kWh,Total_in,3\n1,77070100020800ff@1000,Total Einspeisung,kWh,Total_out,3\n1,=h==================\n1,77070100100700ff@1,Actual load,W,Power_curr,0\n1,=h==================\n1,=m 9+10+11 @1,Currents L1+L2+L3,A,Curr_summ,3\n1,=m 12+13+14/#3 @1,Voltage L1+L2+L3/3,V,Volt_avg,3\n1,=h==================\n1,77070100240700ff@1,Consumption P1,W,Power_p1,2\n1,77070100380700ff@1,Consumption P2,W,Power_p2,2\n1,770701004c0700ff@1,Consumption P3,W,Power_p3,2\n1,=h   ----\n1,770701001f0700ff@1,Current L1,A,Curr_p1,3\n1,77070100330700ff@1,Current L2,A,Curr_p2,3\n1,77070100470700ff@1,Current L3,A,Curr_p3,3\n1,=h   ----\n1,77070100200700ff@1,Voltage L1,V,Volt_p1,3\n1,77070100340700ff@1,Voltage L2,V,Volt_p2,3\n1,77070100480700ff@1,Voltage L3,V,Volt_p3,3\n1,=h==================\n1,77070100510701ff@1,Phaseangle L2-L1,deg,phase_angle_L2_L1,0\n1,77070100510702ff@1,Phaseangle L3-L1,deg,phase_angle_L3_L1,0\n1,77070100510704ff@1,Phaseangle I/U L1,deg,phase_angle_L1,1 \n1,7707010051070fff@1,Phaseangle I/U L2,deg,phase_angle_L2,1  \n1,7707010051071aff@1,Phaseangle I/U L3,deg,phase_angle_L3,1 \n1,770701000e0700ff@1,Frequency,Hz,Freq,1\n;1,=h=======UNBEKANNT===========\n;1,77070100000009FF@#,unbekannt1,,Power_Use_Sum,3\n;1,77070100000000FF@#,unbekannt2,,Power_Use_Sum,3\n;1,7707010060320101@#,unbekannt3,,Meter_id,0\n;1,77010b0a01445a47@#,unbekannt4,,Meter_id,0\n;1,77070100600100ff@#,unbekannt5,,Meter_id,0\n1,=h\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#inepro-metering-pro380-mb-m-bus","title":"inepro Metering PRO380-MB (M-Bus)","text":"<p>This is a controller for standard solar thermal systems equipped with VBus data interface. Outputs data every second at 9600 baud 8N1. To connect to this and read data from the bus a level shifting is needed as the voltage is around 8V. Although this is a symmetric connection supporting long wires for our purposes it's enough to measure its polarity with a voltmeter and adapt the level appropriately to 3.3V using the below circuit (many others exist but this is simple and works). Do not connect the GND pin of Wemos with the ground of Resol unit as that may damage the output port of it. The Wemos module needs its own power supply (double insulated recommended). </p> The script (compile firmware with <code>USE_SML_M</code>) <p> </p> <pre><code>&gt;D\n&gt;B\n-&gt;sensor53 r \n; -&gt;sensor53 d1 ; Dump mode for console debug\n&gt;M 1\n+1,16,rE1,0,2400,,17,100,680303685300b40716,105b005b16,680303685300B10416\n1,4BFD47bcd6@100,L1 voltage,V,L1_V,2\n1,8B01FD47bcd6@100,L2 voltage,V,L2_V,2\n1,CB01FD47bcd6@100,L3 voltage,V,L3_V,2\n1,4BFD59bcd6@100,L1 current,A,L1_I,2\n1,8B01FD59bcd6@100,L2 current,A,L2_I,2\n1,CB01FD59bcd6@100,L3 current,A,L3_I,2\n1,4C2Abcd5@1000,L1 active power,kW,L1_P,3\n1,8C012Abcd5@1000,L2 active power,kW,L2_P,3\n1,CC012Abcd5@1000,L3 active power,kW,L3_P,3\n1,0C2Abcd6@1000,Total active power,kW,T_P,3\n1,4C04bcd8@100,L1 total energy,kWh,L1_TE,2\n1,8C0104bcd8@100,L2 total energy,kWh,L2_TE,2\n1,CC0104bcd8@100,L3 total energy,kWh,L3_TE,2\n1,000C04bcd8@100,Total active energy,kWh,TE,2\n1,6C04bcd8@100,L1 reverse energy,kWh,L1_TRE,2\n1,AC0104bcd8@100,L2 reverse energy,kWh,L2_TRE,2\n1,EC0104bcd8@100,L3 reverse energy,kWh,L3_TRE,2\n1,2C04bcd8@100,Total reverse energy,kWh,TRE,2\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#aeconversion-solar-inverter-invxxx-raw","title":"AEConversion solar inverter INVXXX (RAW)","text":"<p>Tested on an AEConversion INV500-90 with RS485 interface.</p> View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n; Monitor Sensor at GPIO25\n=&gt;sensor53 l255\n&gt;M 1\n+1,13,r,0,9600,aec,15,50,2101B203FD4D0D\n\n1,212717UUuux7@1,Leistung,W,power,0\n1,212717x4UUuux4@1000,Energie,kWh,energy_sun,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sma-solar-inverter-modbus-tcp","title":"SMA Solar Inverter (MODBus TCP)","text":"View script <pre><code>&gt;D\n&gt;B\n=&gt;sensor53 r\n&gt;M1\n+1,[192.168.56.91],m,0,502,SMA,0,10,03047741,03047747,03047777,03047831,03047833,03047835,030478ED,030478EF,030478F1,03047893,030478E9,0304787D,03047881,r03047AA50004,r03047AA90004\n1,030404U32@i0:1000,Gesamtertrag,kWh,v1,3\n1,030404U32@i1:1000,Tagesertrag,kWh,v2,3\n1,030404U32@i2:1000,Einspeisung_ges,kWh,v3,3\n1,030404S32@i3:100,DC Str. A,A,v4,2\n1,030404S32@i4:100,DC Sp. A,V,v5,2\n1,030404S32@i5:100,DC Le. A,W,v6,2\n1,030404S32@i6:100,DC Str. B,A,v7,2\n1,030404S32@i7:100,DC Sp. B,V,v8,2\n1,030404S32@i8:100,DC Le. B,W,v9,2\n;\n1,030404S32@i9:100,AC Le.,W,v10,2\n;\n1,030404S32@i10:10,WR_Temp,\u00b0C,v11,2\n;\n1,030404U32@i11:1,Batterieladung,%%,v12,0\n1,030404S32@i12:10,Batt_Temp,\u00b0C,v13,2\n;\n1,030408U64@i13:1000,Batt_Ladung,kWh,v14,3\n1,030408U64@i14:1000,Batt_EntLadung,kWh,v15,3\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#huawei-r4850g2-lipo-charger-canbus","title":"HUAWEI R4850G2 Lipo Charger (CANBus)","text":"View script <pre><code>&gt;D 40\nIP=192.168.188.117\novolt=45\nmaxc=30\ncstr=\"\"\n&gt;B\n=&gt;sensor53 r\n&gt;S\nif chg[ovolt]&gt;0 {\n; change voltage 41.5 - 58.5\ncstr=\"908180FE0801000000\"+hx(ovolt*1024)\nsml(1 3 cstr)\n}\nif chg[maxc]&gt;0 {\n; change max current 0-60A\ncstr=\"908180FE0801030000\"+hx(maxc*20)\nsml(1 3 cstr)\n}\n&gt;M 1\n; Huawei R4850G2\n; params -&gt; 03 = baudrate 125kb + number of receive buffers * 100\n+1,7,C,0,3203,CAN,6,10,908040FE080000000000000000\n1,1081407f0801700000UUuuUUuu@1024,Input Power,W,ipwr,1\n1,1081407f0801710000UUuuUUuu@1024,Input Frequency,Hz,freq,1\n1,1081407f0801780000UUuuUUuu@1024,Input Voltage,V,ivolt,1\n1,1081407f0801720000UUuuUUuu@1024,Input Current,A,icurr,1\n1,1081407f0801750000UUuuUUuu@1024,Output Voltage,V,ovolt,1\n1,1081407f0801810000UUuuUUuu@1024,Output Current,A,ocurr,1\n1,1081407f0801760000UUuuUUuu@20,Output Max Current,A,mcurr,1\n1,1081407f0801800000UUuuUUuu@1024,Input Temp,C,itmp,1\n1,1081407f08017f0000UUuuUUuu@1024,Output Temp,C,otmp,1\n1,1081407f0801740000UUuuUUuu@1024,Efficiency,%%,eff,1\n1,=so8,00000000\n1,=so9,1081407f\n#\n&gt;W\n&lt;hr&gt;\nnm(41.5 58.5 0.1 ovolt \"Output Voltage (V): \" 80 1) \nnm(0 60 0.1 maxc \"Max Current (A): \" 80 1) \n</code></pre>"},{"location":"Smart-Meter-Interface/#kamstrup-multical-m401","title":"Kamstrup Multical M401","text":"View script <pre><code>&gt;D\nscnt=0\nres=0\n&gt;B\n=&gt;sensor53 r\n&gt;F\n; count 100ms\nscnt+=1\nswitch scnt\n;100ms after start: set sml driver to 300 baud \ncase 1\nres=sml(1 0 300)\n;1600ms send /#1 as HEX to trigger\ncase 16\nres=sml(1 1 \"2F23310D0A\")\n;2200ms later: switch sml driver to 1200 baud\ncase 22\nres=sml(1 0 1200)\n;1000ms after start: Restart sequence\ncase 100\nscnt=0\nends\n\n&gt;M 1\n+1,3,o,0,1200,MC401,1\n1,@s 0:1,Gesammt Verbrauch,kwh,total_in,0\n1,@s 1:100,Gesammt Durchfluss,m3,total_flow,2\n1,@s 2:1,Laufzeit,h,time,0\n1,@s 3:100,Vorlauf Temperatur,C\u00b0,temp_in,2\n1,@s 4:100,R\u00fccklauf Temperatur,C\u00b0,temp_out,2\n1,@s 5:100,Temperatur differenz,C\u00b0,delta_t,2\n1,@s 6:10,Aktuelle Leistung,kW,power,1\n1,@s 7:1,Durchlfuss,l/h,flow,0\n1,@s 8:10,maximale Leistung,kWP,max_power,1\n1,@s 9:1,Info,,info,0\n1,=so3,256\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sensus-pollucom-f-warmemengenzahler-heatmeter-used-with-hichi-ir-interface","title":"Sensus Pollucom F (W\u00e4rmemengenz\u00e4hler, HeatMeter; used with Hichi IR interface)","text":"View script <pre><code>&gt;D\n;start, define variables\nwkup=1\n&gt;B\n;setup sensor\n-&gt;sensor53 r\n-&gt;sensor53 d0\n-&gt;sensor53 l255\n;tper=300 \n&gt;S\n; this device is powered by battery\n; frequent requests will lead to blocking and reduces lifetime\n; starting sequence:\n;- press button on device once\n;- restart Tasmota with script sctivated (you have 5 minutes to do this)\n;- after 30s first data is retrieved and logged (including SYSLOG depending on Tasmota log config)\n    ;- after 60s WebUI is updated first time\n;- now every 45min a new request is done, updated in WebUI (and transferred by MQTT every TPER period); polling period needs to be less 60min to avoid sleep mode of device!\nif upsecs==30 {\n    -&gt;sensor53 d1\n    print read meter (debug log 30s)\n    =#readmeter\n}\nif upsecs==60 {\n    -&gt;sensor53 d0\n    print read meter (WebUI update 60s)\n    =#readmeter\n}\nif upsecs%2700==0 {\n    print read meter (modulo 2700s)\n    =#readmeter\n}\n\n&gt;M 1\n+1,3,rE1,0,2400,WAERME,1\n; note that maximum of chars per line is 8 so set buffer to 8 to get non-delayed decoding\n1,=so3,8\n1,68080072bcd8@1,Z\u00e4hlernummer,,Z\u00e4hlernummer,0\n; note that 16 = 0+16 means that this particular value has 0 comma places but is transferred immediately by MQTT\n1,0c06bcd8@1,Energie,kWh,Energie,16\n1,0c13bcd8@1000,Volumen,m\u00b3,Volumen,0\n1,0c3bbcd8@1,Durchfluss,l/h,Durchfluss,0\n1,0c2bbcd8@1,Leistung,W,Leistung,0\n1,025auuUU@10,Durchflusstemperatur,\u00b0C,Durchflusstemperatur,1\n1,025euuUU@10,R\u00fccklauftemperatur,\u00b0C,R\u00fccklauftemperatur,1\n1,0360uuUU@1000,Temperaturdifferenz,K,Temperaturdifferenz,3\n#\n\n#readmeter\nprint wakeup start\n;set serial protocol\nsml(-1 1 \"2400:8N1\")\n;send 0x55 for 2,2 seconds with 8N1 (53x), 2400 baud (wakeup sequence)\nfor wkup 1 53 1\nsml(1 1 \"55555555555555555555\")\nnext\nprint wakeup end\nwkup=1\nprint wait for the meter\n;wait for the meter to wake up\ndelay(350)\n;switch serial protocol\nsml(-1 1 \"2400:8E1\")\nprint Init MBus 1040004016; SCAN for Device 00\nsml(1 1 \"1040004016\")\ndelay(350)\nprint request data 107BFE7916 aktuelle Werte!!!\nsml(1 1 \"107BFE7916\")\n;print request data 105BFE5916\n;sml(1 1 \"105BFE5916\")\nprint request data finished\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#engelmann-sensostar-e-heat-meter-used-with-hichi-ir-interface","title":"Engelmann SensoStar E (Heat meter, used with Hichi IR interface)","text":"View script <pre><code>&gt;D\nwkup=1\n\n&gt;B\n;setup sensor\n-&gt;sensor53 d0\n-&gt;sensor53 r\n\n&gt;S\n; this device is powered by battery\n; frequent requests will lead to blocking and reduces lifetime\n; starting sequence:\n;- press button on device once\n;- restart Tasmota with script activated (you have 5 minutes to do this)\n;- after 30s data is retrieved and logged (including SYSLOG depending on Tasmota log config)\n;- now every 45min a new request is done, updated in WebUI (and transferred by MQTT every TPER period); polling period needs to be less 60min to avoid sleep mode of device!\n\nif ((upsecs==1) or (upsecs%2700==0)) {\n    print read meter\n    =#readmeter\n}\n\nif upsecs==30 {\n    -&gt;sensor53 d1\n    print read meter (dump)\n    =#readmeter\n}\n\nif upsecs==60 {\n    ; disable dump\n    -&gt;sensor53 d0\n}\n\n\n&gt;M 1\n+1,3,rE1,0,2400,WAERME,1\n1,=so3,32\n1,0478u32s@1,Z\u00e4hlernummer,,Z\u00e4hlernummer,0\n1,0406u32s@1000,Energie,MWh,Energie,3\n1,0413u32s@1000,Volumen,m\u00b3,Volumen,3\n1,042bu32s@1,Leistung,W,Leistung,0\n1,142bu32s@1,Max. Leistung,W,Max. Leistung,0\n1,043bu32s@1000,Volumenstrom,m\u00b3/h,Volumenstrom,3\n1,143bu32s@1000,Max. Volumenstrom,m\u00b3/h,Max. Volumenstrom,3\n1,025buuUU@1,Vorlauftemperatur,\u00b0C,Vorlauftemperatur,0\n1,025fuuUU@1,R\u00fccklauftemperatur,\u00b0C,R\u00fccklauftemperatur,0\n1,0261ssSS@100,Temperaturdifferenz,\u00b0C,Temperaturdifferenz,2\n1,0223uuUU@1,Betriebsdauer,Tage,Betriebsdauer,0\n1,4406u32s@1000,Stichtag Energie,MWh,Letzter Stichtag Energie,3\n1,4413u32s@1000,Stichtag Volumen,m\u00b3,Letzter Stichtag Volumen,3\n#\n\n#readmeter\nprint wakeup start\n;set serial protocol\nsml(-1 1 \"2400:8N1\")\n;send 0x55 for 2,2 seconds with 8N1 (53x), 2400 baud (wakeup sequence)\nfor wkup 1 53 1\nsml(1 1 \"55555555555555555555\")\nnext\nprint wakeup end\nwkup=1\nprint wait for the meter\ndelay(350)\n;switch serial protocol\nsml(-1 1 \"2400:8E1\")\nprint init MBus (1040004016); scan for device 00\nsml(1 1 \"1040004016\")\ndelay(350)\nprint request current data (107BFE7916)\nsml(1 1 \"107BFE7916\")\nprint request current data finished\n#\n</code></pre>"},{"location":"Smart-Meter-Interface/#sagemcom-ma105ma304-single-phase3-phase-smart-meter-obis-ascii","title":"Sagemcom MA105/MA304 single phase/3-phase smart meter (OBIS ASCII)","text":"<p>Read the comments for 1/3-phase arrangements. Last month summary is not decoded as I find it useless but it can be added, see Sanxing SX6x1.</p> View script <pre><code>&gt;D\n; Sagemcom MA105/MA304 smart meters - Tasmota script for OBIS ASCII\n\n&gt;B\n; don't send teleperiod MQTT at boot\nsmlj=0\n-&gt;sensor53 r\n\n&gt;R\n; don't send teleperiod MQTT at script restart\nsmlj=0\n\n&gt;S\n; only send teleperiod MQTT if 22 seconds passed since boot\nif upsecs&gt;22\nthen\nsmlj|=1\nendif\n\n&gt;M 1\n; meter definition\n+1,35,o,16,115200,ma105\n; invert the HW serial line as the P1 port uses inverse signaling\n; no external signal inverter circuit is needed\n1,=so2,4\n; instantaneous metrics\n1,1-0:32.7.0(@1,Voltage,V,voltage_l1,17\n; uncomment for 3-phase meters\n; 1,1-0:52.7.0(@1,Voltage,V,voltage_l2,17\n; 1,1-0:72.7.0(@1,Voltage,V,voltage_l3,17\n1,1-0:1.7.0(@1,Power import (+A),kW,power_import,19\n1,1-0:2.7.0(@1,Power export (-A),kW,power_export,19\n1,1-0:31.7.0(@1,Current,A,current_l1,16\n; uncomment for 3-phase meters\n; 1,1-0:51.7.0(@1,Current,A,current_l2,16\n; 1,1-0:71.7.0(@1,Current,A,current_l3,16\n1,1-0:14.7.0(@1,Frequency,Hz,frequency,18\n; comment out for 3-phase meters\n1,1-0:13.7.0(@1,Power factor,,power_factor,19\n; uncomment for 3-phase meters\n; 1-0:33.7.0(@1,Power factor,,power_factor1,19\n; 1-0:53.7.0(@1,Power factor,,power_factor2,19\n; 1-0:73.7.0(@1,Power factor,,power_factor3,19\n1,1-0:5.7.0(@1,Reactive power (QI),kVAr,power_reactive_q1,19\n1,1-0:6.7.0(@1,Reactive power (QII),kVAr,power_reactive_q2,19\n1,1-0:7.7.0(@1,Reactive power (QIII),kVAr,power_reactive_q3,19\n1,1-0:8.7.0(@1,Reactive power (QIV),kVAr,power_reactive_q4,19\n1,=h&lt;hr/&gt;\n; teleperiod metrics\n1,0-0:96.14.0(@1,Current tariff,,tariff,0\n1,1-0:1.8.0(@1,Import energy (+A),kWh,energy_import,3\n1,1-0:1.8.1(@1,Import energy (+A) - T1,kWh,energy_import_t1,3\n1,1-0:1.8.2(@1,Import energy (+A) - T2,kWh,energy_import_t2,3\n1,1-0:1.8.3(@1,Import energy (+A) - T3,kWh,energy_import_t3,3\n1,1-0:1.8.4(@1,Import energy (+A) - T4,kWh,energy_import_t4,3\n1,1-0:2.8.0(@1,Export energy (-A),kWh,energy_export,3\n1,1-0:2.8.1(@1,Export energy (-A) - T1,kWh,energy_export_t1,3\n1,1-0:2.8.2(@1,Export energy (-A) - T2,kWh,energy_export_t2,3\n1,1-0:2.8.3(@1,Export energy (-A) - T3,kWh,energy_export_t3,3\n1,1-0:2.8.4(@1,Export energy (-A) - T4,kWh,energy_export_t4,3\n1,1-0:15.8.0(@1,Combined energy,kWh,energy_active,3\n1,1-0:3.8.0(@1,Reactive imp. nrg (+R),kVArh,power_import_reactive,3\n1,1-0:4.8.0(@1,Reactive exp. nrg (-R),kVArh,power_export_reactive,3\n1,1-0:5.8.0(@1,Reactive energy (QI),kVArh,energy_active_q1,3\n1,1-0:6.8.0(@1,Reactive energy (QII),kVArh,energy_active_q2,3\n1,1-0:7.8.0(@1,Reactive energy (QIII),kVArh,energy_active_q3,3\n1,1-0:8.8.0(@1,Reactive energy (QIV),kVArh,energy_active_q4,3\n1,1-0:31.4.0(@1,Current limit 1 thresh.,A,current_limit_1,2\n#\n</code></pre> <p>Some extra status and textual metrics can be added per the following.</p> View script <pre><code>; extra metrics\n1,0-0:96.50.68(@1,Breaker 1 status,,breaker_1_status,0\n1,0-0:96.3.10(@1,Breaker 2 status,,breaker_2_status,0\n1,0-0:17.0.0(@1,Limiter threshold,A,limiter_threshold,0\n\n; extra textual metrics - only one can be used at a time\n1,0-0:1.0.0(@#),Time,time,time,0\n1,0-0:42.0.0(@#),COSEM device name,text,cosem_name,0\n1,0-0:96.1.0(@#),Meter serial number,text,meter_serial,0\n1,0-0:98.1.0(@#),Last month data,text,history_last_month,0\n1,0-0:96.13.0(@#),Utility company msg,text,message,0\n</code></pre>"},{"location":"SolaX-X1/","title":"SolaX X1","text":"<p>"},{"location":"SolaX-X1/#solax-power-single-phase-string-inverter-x1","title":"SolaX Power - Single phase string inverter X1","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_SOLAX_X1\n#define USE_SOLAX_X1\n#endif\n</code></pre></p> <p>There are additional <code>#define</code> compiler directive parameters which can be used, if they are necessary for your setup. Set an other serial speed than the default value of 9600: <pre><code>#undef  SOLAXX1_SPEED\n#define SOLAXX1_SPEED  9600\n</code></pre> If your inverter has two PV-inputs, you can activate the 2nd one: <pre><code>#ifndef SOLAXX1_PV2\n#define SOLAXX1_PV2\n#endif\n</code></pre> By using the standard firmware variant with Solax-X1 on top, the resulting binary fits into a normal 1M chip. If you need more space, e.g for other modules, you can disable the <code>ReadConfig</code> command to save about 3k1 bytes of code. To do this, simply remove the compiler directive: <pre><code>#define SOLAXX1_READCONFIG\n</code></pre> This module works as energy sensor. So be sure to define this, if not already done: <pre><code>#ifndef USE_ENERGY_SENSOR\n#define USE_ENERGY_SENSOR\n#endif\n</code></pre></p>"},{"location":"SolaX-X1/#general","title":"General","text":"<p>This module reads runtime values from a Solax X1 device via RS485 Modbus interface and publishes them to MQTT.  The communication of this module is based on the description of the communication protocol version 1.8.</p>"},{"location":"SolaX-X1/#wiring","title":"Wiring","text":"<p>To connect the inverter to the Tasmota-device, you have to use a breakout board to adapt the RS485 interface of the inverter to serial interface of the ESP.</p>"},{"location":"SolaX-X1/#breakout-boards","title":"Breakout boards","text":"<p>There are many RS485-to-TTL modules, aka breakout boards, available. They may work or not. You should have attention on the operation voltage. The ESP-devices work with 3 volts. Because of that be careful experimenting with 5 volts. In the best case nothing works. In the worst case it will destroy your ESP or breakout board. Here are two examples of tested breakout boards. Recommended is a board with a SP3485 chip, because it is designed for operating at 3 volts.</p>"},{"location":"SolaX-X1/#sp3485","title":"SP3485","text":"<p>The SP3485 breakout board is specially made to work with only 3 volts. It has a separate RTS-pin and works with a voltage from 3 to 5 volts. </p>"},{"location":"SolaX-X1/#hw-0519","title":"HW-0519","text":"<p>The HW-0519 breakout board does not need a separate RTS-pin, because it automatically switches between sending and receiving. The recommended voltage is 5 volts, but it should also work with 3 volts. </p>"},{"location":"SolaX-X1/#esp-breakout-board","title":"ESP \u2b0c breakout board","text":"<p>The RX-, TX- and RTS- (if needed) lines have to be connected to the ESP matching the module configuration.</p> ESP SP3485 HW-0519 3.3V 3-5V VCC GND GND GND RX TX-O RXD TX RX-I TXD RTS RTS -"},{"location":"SolaX-X1/#breakout-board-inverter","title":"Breakout board \u2b0c inverter","text":"<p>The RS485 interface is a 2-wire-connection. The wires are called <code>A+</code> and <code>B-</code>. The big advantage of the interface is, beside of needing only two wires, that it can reach a length up to 1200 meters. The inverter has a RJ45-jack, where the interface is accessible. Please consult the manual of your inverter where it is located.</p> <p>Tip: You can use an ethernet cable and cut off one connector. The RS485 interface uses the blue wire pair.</p> <p></p> Breakout board RJ45 inverter Wire color (T568B) A (+) Pin 4 blue B (-) Pin 5 blue-white G / Ground Pin 7 brown-white <p>Info</p> <p>In many cases two wires are enough to keep it working without errors. When your environment has electrical interferences or your cable is quiet long, you should use a third wire to establish a common signal reference. This wire has to be connected to the <code>Ground</code> pins.</p>"},{"location":"SolaX-X1/#configuration","title":"Configuration","text":"<p>You have to configure the module or the template. Select <code>SolaxX1 Tx</code> and <code>SolaxX1 Rx</code> for the RS485 communication. If you have a breakout board which needs the RTS line, you must also select <code>SolaxX1 RTS</code>. </p>"},{"location":"SolaX-X1/#operation","title":"Operation","text":""},{"location":"SolaX-X1/#result","title":"Result","text":"<p>When every thing works you will see the current data on the main page. They are also provided via MQTT. </p> <p>Tips</p> <ul> <li>To send a MQTT telemetry message immediately on every change of power, you can set a <code>PowerDelta</code> value. E.g. <code>PowerDelta 101</code> for every change of at least 1 W.</li> <li>Set <code>SetOption72</code> to <code>1</code> for displaying the value of total energy reported from the inverter.</li> </ul>"},{"location":"SolaX-X1/#console-commands","title":"Console commands","text":"<p>There are two special console commands for the X1 converter: <code>EnergyConfig ReadIDinfo</code> reads and displays ID-data from the inverter <code>EnergyConfig ReadConfig</code> reads and displays the configuration from the inverter  </p>"},{"location":"SolaX-X1/#inverter-status","title":"Inverter status","text":"<p>The inverter status field represents the value reported by the inverter, when the inverter is sending data. In the case when no data is received, it will be display <code>off</code>. As the converter is only working, when the sun is shining, you will see <code>off</code> normally at night or too low light.  </p> <p>Tip</p> <p>When the inverter is working and <code>off</code> is displayed, so you have to check your hard- and software setup.</p>"},{"location":"SolaX-X1/#meter-mode","title":"Meter Mode","text":"<p>The Meter Mode can be used to easily build a zero injection solution. When the export control is enabled in the inverter settings, it requests the momentary grid consumption from an attached meter. This driver emulates the meter and reports back the requested values. Based on this values and the integrated export control algorithm, the inverter can limit the output to only be sufficient to the load, so as to achieve zero injection to the grid.  </p> <p>The grid load consumption can be measured by any device, like a meter, smart meter, etc. and transmitted to the driver. Please consult the commands.</p> <p>The driver automatically detects when the inverter requests the meter mode. Only one mode is possilbe at the same time.</p> <p>Tip</p> <p>To avoid problems, be sure the \"normal\" mode works completely flawlessly.</p>"},{"location":"SolaX-X1/#enable-export-control","title":"Enable export control","text":"<p>Setting up the inverters export control function can be done via LCD. As an example, the steps are as follows:  For more information have a look at the user manual of the inverter.</p>"},{"location":"SolaX-X1/#commands-meter-mode","title":"Commands (Meter Mode)","text":"<p>The meter values can be communicated to the driver via this commands: <code>EnergyConfig MeterPower</code> current imported or exported power in W (required) <code>EnergyConfig MeterImport</code> imported energy in kWh to be displayed on the inverter (optional) <code>EnergyConfig MeterExport</code> exported energy in kWh to be displayed on the inverter (optional)  </p> <p>A good way for operation is to subscribe to the (smart) meter MQTT topics directly. Therefore compile with <code>#define SUPPORT_MQTT_EVENT</code>. </p> <p>A sample rule subscribing to values of the SML driver can look like this:  <pre><code>Rule1\nON mqtt#connected DO Subscribe PwrEvt, MT175/tele/SENSOR ENDON\nON Event#PwrEvt#SML#Power_all DO EnergyConfig MeterPower %value% ENDON\nON Event#PwrEvt#SML#Total_in DO EnergyConfig MeterImport %value% ENDON\nON Event#PwrEvt#SML#Total_out DO EnergyConfig MeterExport %value% ENDON\n</code></pre></p>"},{"location":"Sonoff-DIY/","title":"Sonoff DIY","text":"<p>Some new Sonoff devices support the new Itead DIY architecture which allows OTA firmware upload. With Sonoff DIY, a user has more control over the hardware features of the device and also allows for upgrading the firmware without additional hardware. The following procedure upgrades Sonoff eWelink firmware to Tasmota.</p> <p>There are many reports this procedure has changed with newer versions of Sonoff DIY</p> <p>Tasmota does not provide any kind of support for flashing using this method. Please contact Sonoff Support for help. Version 3.7.6 firmware requires that deviceid be included in the post command to the unit, otherwise it will ignore it. When the device creates its wifi network, note the number after ITEAD-, this is the device id.</p> <p>IMPORTANT: There are some reports suggesting that the Windows version of Sonoff DIY Tool contains a trojan. It is not clear if it actually contains the malicious code or these are just false positives due to the way Python code was converted to native executables. Nevertheless, proceed with care.</p>"},{"location":"Sonoff-DIY/#compatible-devices","title":"Compatible devices","text":"<p>Currently the following devices officially support Sonoff DIY: - Sonoff Basic R3 - Sonoff RF R3 - Sonoff Mini</p> <p>As Sonoff DIY is enabled by connecting GPIO16 to GND it may well be possible that other Sonoff devices running eWelink will support it.</p> <p>Note</p> <p>The OTA process Sonoff provides through the Sonoff DIY procedure does not create a backup of the Itead firmware on the device. If you use this OTA method to flash Tasmota on the Sonoff device, you will not be able to revert to the original factory firmware. </p>"},{"location":"Sonoff-DIY/#flash-procedure","title":"Flash procedure","text":"<p>Guide originally from @Brunas</p> <ol> <li>Pair the device with the eWeLink app and update firmware. Note the Device ID in Device Settings. The wifi network you connect to during this step will need to be reachable in order to enter DIY mode.</li> <li> <p>Follow instructions how to enter DIY mode from Sonoff. This is the excerpt from it:</p> <ol> <li>Long press the button for 5 seconds to enter pairing mode, then press another 5 seconds to ender Compatible Pairing Mode (AP). The LED indicator should blink continuously.</li> <li>From mobile phone or PC WiFi setting, an Access Point of the device named ITEAD-XXXXXXXX will be found, connect it with default password 12345678</li> <li>Open the browser and access http://10.10.7.1/</li> <li>Next, Fill in WiFi SSID and password. Once successfully connected, the device is in DIY mode.</li> </ol> </li> </ol> <p>Note: I needed to manually change IP address to 10.10.7.2, 255.0.0.0 with gateway 10.10.7.1 in adapter TCP/IPv4 settings to access that IP address.</p> <ol> <li>Use Fing or any similar local network scanning app on your smartphone or PC to find IP address of your Sonoff Mini device. MAC Vendor most likely is Espressif and the device has 8081 port open.</li> <li>Check that diy mode is working properly.</li> </ol> <p><code>$SONOFF_IP</code> must be defined with the IP or FQDN of the intended Sonoff device before running the <code>curl</code> command. With curl or with PowerShell (Windows): <pre><code># curl\nSONOFF_IP=\"10.0.0.2\"\ncurl -XPOST --header \"Content-Type: application/json\" --data-raw '{\"deviceid\": \"\", \"data\": {}}' http://$SONOFF_IP:8081/zeroconf/info\n</code></pre></p> <pre><code># powershell\n$SONOFF_IP='10.0.0.2'\nInvoke-RestMethod -Method POST -Body '{\"deviceid\": \"\", \"data\": {}}' -Uri \"http://$($SONOFF_IP):8081/zeroconf/info\" | ConvertTo-Json\n</code></pre>  Or with the Rester browser extension:    Install **Rester** extension in Chrome or Firefox or any other preferred tool to perform REST API operations.  To test your device DIY mode create new request in **Rester**:       1. Method: **POST**     2. URL: http://&lt;*IP of your device*&gt;:8081/zeroconf/info     3. Body: `{\"data\": {}}`     4. You might need to add Header **Content-Type** with value **application/json**     5. Press **SEND**  <p>If all is OK, status code 200 should be returned with bunch of data: <pre><code>{\n    \"seq\": 1,\n    \"error\": 0,\n    \"data\": {\n        \"switch\": \"off\",\n        \"startup\": \"off\",\n        \"pulse\": \"off\",\n        \"pulseWidth\": 2000,\n        \"ssid\": \"YourWiFi\",\n        \"otaUnlock\": false,\n        \"fwVersion\": \"3.6.0\",\n        \"deviceid\": \"YourDeviceId\",\n        \"bssid\": \"YourBSSId\",\n        \"signalStrength\": -52\n    }\n}\n</code></pre> If that doesn't return 200, try going back to 5s+5s reset above. 4. If all above works, let's unlock OTA:</p> <p>With curl or PowerShell (Windows):</p> <pre><code># curl\ncurl -XPOST --header \"Content-Type: application/json\" --data-raw '{\"deviceid\": \"\", \"data\": {}}' http://$SONOFF_IP:8081/zeroconf/ota_unlock\n</code></pre> <pre><code># powershell\nInvoke-RestMethod -Method POST -Body '{\"deviceid\": \"\", \"data\": {}}' -Uri \"http://$($SONOFF_IP):8081/zeroconf/ota_unlock\" | ConvertTo-Json\n</code></pre>  Or with the Rester browser extension:       1. Method: **POST**     2. URL: http://&lt;*IP of your device*&gt;:8081/zeroconf/ota_unlock     3. Body: `{\"data\": {}}`     4. You might need to add Header **Content-Type** with value **application/json**     5. Press **SEND**     6. You should get status code *200*  <p>Optionally for curiosity you could retry info query to check if otaUnlock value now is true 5. Download the appropriate binary from http://ota.tasmota.com/tasmota/release and flash it. NOTE: The maximum firmware size is 508kb, which precludes the standard release binary. Absolutely do not use tasmota-minimal at this stage, this would brick your device.</p> <p>!!! There are a number of reported issues with the stock      firmware's OTA behavior, so it may be easier to use an existing server that works around these issues.  </p> <p>!!! Please note: if you have 3.5.0 or 3.6.0 firmware, maybe others (see version in <code>/info</code> response), firmware has a bug: it connects to specified server, but always sends dl.itead.cn as server name.     That is why you have to update from server that supports serving files with server name <code>dl.itead.cn</code>     * <code>ota.tasmota.com</code> is NOT suitable for this.     * Use <code>sonoff-ota.aelius.com</code> or set up your local web server</p> <p><code>$HASH</code> must be defined with the <code>sha256sum</code> of the intended firmware file (the <code>.bin</code> file) before running the <code>curl</code> command.  If using PowerShell, it is not necessary. !!! There are a number of reported issues with the stock      firmware's OTA behavior, so it may be easier to use an existing server that works around these issues.  </p> <p>!!! Please note: if you have 3.5.0 or 3.6.0 firmware, maybe others (see version in <code>/info</code> response), firmware has a bug: it connects to specified server, but always sends dl.itead.cn as server name.     That is why you have to update from server that supports serving files with server name <code>dl.itead.cn</code>     * <code>ota.tasmota.com</code> is NOT suitable for this.     * Use <code>sonoff-ota.aelius.com</code> or set up your local web server</p> <p><code>$HASH</code> must be defined with the <code>sha256sum</code> of the intended firmware file (the <code>.bin</code> file) before running the <code>curl</code> command.  If using PowerShell, it is not necessary. For example: <pre><code># curl\nHASH=\"5c1aecd2a19a49ae1bec0c863f69b83ef40812145c8392eebe5fd2677a6250cc\"\ncurl -XPOST --data \"{\\\"deviceid\\\":\\\"\\\",\\\"data\\\":{\\\"downloadUrl\\\": \\\"http://sonoff-ota.aelius.com/tasmota-latest-lite.bin\\\", \\\"sha256sum\\\": \\\"$HASH\\\"} }\" http://$SONOFF_IP:8081/zeroconf/ota_flash\n</code></pre></p> <pre><code># powershell\n$FW_URL = 'http://sonoff-ota.aelius.com/tasmota-latest-lite.bin'\n$HASH = [BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Net.WebClient]::new().DownloadData($FW_URL))).Replace('-','').ToLower()\nInvoke-RestMethod -Method POST -Body ('{\"deviceid\":\"\",\"data\":{\"downloadUrl\": \"' + $FW_URL + '\", \"sha256sum\": \"' + $HASH +'\"} }') -Uri \"http://$($SONOFF_IP):8081/zeroconf/ota_flash\" | ConvertTo-Json\n</code></pre>  Or with the Rester browser extension:        1. Method: **POST**     2. URL: http://&lt;*IP of your device*&gt;:8081/zeroconf/ota_flash     3. Body: `{\"data\": {\"downloadUrl\": \"http://sonoff-ota.aelius.com/tasmota-latest-lite.bin\", \"sha256sum\": \"5c1aecd2a19a49ae1bec0c863f69b83ef40812145c8392eebe5fd2677a6250cc\"}}`     4. Header: **Content-Type** with value **application/json**     5. Press **SEND**     6. You should get status code *200*  <p>!!! Flashing can take up to few minutes, as device downloads firmware part-by-part. There is high risk of bricking device if you reboot it or if internet connection fails.</p> <p>Note: If flashing is successful, a new tasmota-XXXXXXXX access point will be created. Connect to this AP to configure Tasmota to connect to your WiFi network. </p> <p>You're now ready to configure tasmota.</p>"},{"location":"Sonoff-DIY/#video-tutorials","title":"Video tutorials","text":"<ul> <li>Andreas Spiess</li> <li>DrZzs</li> <li>Paul Hibbert</li> </ul>"},{"location":"Sonoff-DIY/#more-info","title":"More info:","text":"<ul> <li>Michel Deslierres</li> </ul>"},{"location":"Sonoff-SPM/","title":"Sonoff SPM","text":"This feature is included only in <code>tasmota32</code> binaries <p>Do not use this device as safety fuse!</p> <p>Info</p> <p>For ARM firmware upgrades it's advised to make a full backup of the SPM-Main ESP 4M flash firmware before flashing Tasmota.</p> <p>The Sonoff Smart Stackable Power Meter uses a SPM-Main unit with ESP32 providing Wi-Fi and ethernet connections. A serial interface and a SPI interface connects to an ARM MCU which in turn provides a RS-485 bus to up to 32 SPM-4Relay modules. The SPM-4Relay module contains an ARM MCU too providing independent power management for four bi-stable relays rated for 20A at 240V for a total of 4400W.</p> <p>Note</p> <p>As of this writing Tasmota v11.1.0.3 supports ARM firmware versions 1.0.0 and 1.2.0.</p> <p>The firmware monitors the attached SPM-4Relay modules and stores energy usage history for up to 180 days on an optional SD-Card accessible by the ARM MCU only. The ARM firmware provides numerous un-documented functions allowing the ESP32 to send and receive information.</p>"},{"location":"Sonoff-SPM/#background-information","title":"Background information","text":"<p>More information about the SPM can be obtained here:</p> <ul> <li>Sonoff tech product documentation</li> <li>SPM HTTP API</li> <li>Sonoff DIY mode API</li> </ul>"},{"location":"Sonoff-SPM/#tasmota","title":"Tasmota","text":"<p>Tasmota, installed on the ESP32, can connect to the SPM-Main ARM MCU using the serial interface and provides the following functionality:</p> <ul> <li>Support for up to 8 SPM-4Relays limited by current register usage</li> <li>Power control of all 32 relays using standard features</li> <li>Energy usage using standard features</li> <li>Overload detection using ARM firmware</li> <li>GUI display of rotating relays or a user selected 4Relay module</li> <li>Fix firmware max 180 days energy usage by storing daily Energy Total in Tasmota's filesystem</li> <li>Mapping physical relays to scanned relays</li> </ul>"},{"location":"Sonoff-SPM/#limitations","title":"Limitations","text":"<p>The following notes currently apply:</p> <ul> <li>Tasmota is unable to upgrade the ARM firmware. In case an upgrade is wanted install the backed-up sonoff firmware and perform the upgrade using the eWeLink app. Once upgraded make another backup before restoring Tasmota for future ARM firmware upgrades.</li> </ul>"},{"location":"Sonoff-SPM/#configuration","title":"Configuration","text":"<p>In addition to installing the <code>tasmota32.bin</code> image some configuration might be needed.</p>"},{"location":"Sonoff-SPM/#relay-mapping","title":"Relay mapping","text":"<p>After a restart the ARM firmware starts to scan for available 4Relay modules. Every module has a unique id which is send to Tasmota in random order. For a user to pinpoint a physical set of four relays it is therefor needed to \"map\" the scanned modules once. Tasmota stores the id's in a mapping table build using the command <code>SSPMMap &lt;scanned module number&gt;,&lt;scanned module number&gt;,..</code> where the first entry will map to physical relays 1 to 4, the second entry will map to physical relays 5 to 8 etc. The scanned module information needed is displayed on the console during restart or on request by executing command <code>SSPMScan</code> with a <code>weblog 2</code> setting.</p> <p>Note</p> <p>Scanning takes over 20 seconds so be patient</p> <p>Look for the below information during a restart for a two 4Relay module system:</p> <pre><code>00:00:00.123 Project tasmota - Sspm2 Version 11.0.0.1(tasmota)-2_0_2_2(2022-02-18T12:09:05)\n00:00:05.191 CFG: SPM loaded from file\n00:00:08.305 SPM: Main version 1.0.0 found\n13:54:05.392 SPM: 4Relay 1 (mapped to 2) type 130 version 1.0.0 found with id 8B343237393734134B353637\n13:54:05.401 SPM: 4Relay 2 (mapped to 1) type 130 version 1.0.0 found with id 6B7E3237393734134B353637\n</code></pre> <p>In this case the two modules are mapped using command <code>SSPMMap 2,1</code>. As Tasmota does store the ids of the 4Relay modules a future hussle of the received modules will keep the physical mapping correct.</p>"},{"location":"Sonoff-SPM/#commands-list","title":"Commands List","text":"<p>The following SPM specific commands are supported.</p> Command Parameters SspmDisplay Change GUI display between rotating display of all scanned relays, of all scanned relays that are powered on or select a group of four relays using a tab<code>0</code> = Display all relays<code>1</code> = Display powered on relays<code>2</code> = Provide user selectable tabs to display four relays within a 4Relay module SspmEnergyTotal&lt;x&gt; (P)reset total energy in kWh without today's energy for relay &lt;x&gt;<code>0</code> = preset with total of history<code>0.01..262143.99</code> = set value in kWh SspmEnergyYesterday&lt;x&gt; (P)reset energy yesterday in kWh for relay &lt;x&gt;<code>0.01..262143.99</code> = set value in kWh SspmHistory&lt;x&gt; Show daily energy for relay &lt;x&gt; of up to 180 days SspmIAmHere&lt;x&gt; Blink SPM-4Relay module error light containing relay &lt;x&gt; SspmLog&lt;x&gt; Show relay &lt;x&gt; power state change and cause SspmMap Map scanned SPM-4Relay modules to physical location. Use unique numbers for all fields<code>0</code> = rescan modbus for SPM-4Relay modules and reset mapping to default. This takes at least 20 seconds<code>3,4,1,2</code> = map scanned module 1 to physical module 3 containing relays 9 to 12, module 2 to 4 with relays 13 to 16, module 3 to 1 with relays 1 to 4 and module 4 to 2 with relays 5 to 8 SspmOverload&lt;x&gt; Set overload detection criteria for relay &lt;x&gt; <code>0</code> = reset and disable overload detection to scanned module criteria<code>&lt;delay&gt;,&lt;min_power&gt;,&lt;max_power&gt;,&lt;min_voltage&gt;,&lt;max_voltage&gt;,&lt;max_current&gt;</code> = set any or all overload detection criteria<code>0,0.10,4400.00,0.10,240.00,20.00</code> = enable overload detection with default values<code>9,0,22.1</code> = enable max_power over 22.1W detection after 9 seconds<code>0,0,0,0,235.2</code> = enable immediate max_voltage over 235.2V detection SspmPowerOnState&lt;x&gt; Set v1.2.0 relay &lt;x&gt; power on state overruling Tasmota global power on state<code>0</code> = off, <code>1</code> = on, <code>2</code> = saved state SspmScan Rescan modbus for SPM-4Relay modules. This takes at least 20 seconds"},{"location":"Supported-Modules/","title":"Supported Modules","text":"<ul> <li>Sonoff 4CH</li> <li>Sonoff 4CH Pro</li> <li>Sonoff 4CH DIY</li> <li>Sonoff B1 / B1 R2</li> <li>Sonoff Basic R1/R2/R3</li> <li>Sonoff Dual</li> <li>Sonoff Dual R2</li> <li>Sonoff iFan02</li> <li>Sonoff iFan03</li> <li>Sonoff Mini</li> <li>Sonoff Pow</li> <li>Sonoff Pow R2</li> <li>Sonoff PSA</li> <li>Sonoff RF</li> <li>Sonoff RF R3</li> <li>Sonoff RF Bridge 433</li> <li>Sonoff S20 Smart Socket</li> <li>Sonoff S26 Smart Socket</li> <li>Sonoff S31</li> <li>Sonoff SC</li> <li>Sonoff Slampher</li> <li>Sonoff SV</li> <li>Sonoff T1</li> <li>Sonoff Touch</li> <li>Sonoff TH</li> <li>Arilux LC02</li> <li>Armtronix Dimmers</li> <li>Blitzwolf BW-SHP2</li> <li>Blitzwolf BW-SHP4</li> <li>Blitzwolf BW-SHP6</li> <li>Digoo DG-SP202</li> <li>Geekcreit 2CH</li> <li>Gosund SP1</li> <li>H801 LED Controller</li> <li>HuaFan Smart Socket</li> <li>Luminea LED Controller</li> <li>MagicHome LED Controller (ESP-12S/ESP-2M.md)</li> <li>MagicHome LED Controller (ESP8285.md)</li> <li>Mi Desk Lamp</li> <li>PS-16-DZ Dimmer</li> <li>OBI Socket</li> <li>OBI Socket 2</li> <li>OBI Socket IP44 (Black.md)</li> <li>SeedStudio SenseCAP D1</li> <li>Shelly 1</li> <li>Shelly 1PM</li> <li>Shelly 2</li> <li>Shelly 2.5</li> <li>Shelly RGBW2</li> <li>SK03 Outdoor Smart Plug</li> <li>Teckin SP10 Smart Socket</li> <li>Teckin SP22</li> <li>YTF IR Bridge</li> <li>WT003-EU 4 AC + 4 USB Outlet Tuya Power Strip EU</li> <li>Wemos D1 R1 &amp; R2</li> <li>Wemos D1 Mini</li> <li>Other Devices</li> </ul>"},{"location":"Supported-Peripherals/","title":"Supported Peripherals","text":"Name Description Connection 74x595 74x595 shift register gpio A4988 Stepper motor controller ADC Analog input over A0 pin analog ADS111x A/D Converter I<sup>2</sup>C AHT1x Asair AHT10/AHT15 temperature and humidity sensor I<sup>2</sup>C AHT2x Asair AHT20/AHT21/AHT25/AM2301B temperature and humidity sensor I<sup>2</sup>C AM2301 / DHT21 AM2302 / DHT22AM2321 Temperature and humidity sensor gpio AM2301B Temperature and humidity sensorUses same driver as AHT2X I<sup>2</sup>C AM2320 Temperature and humidity sensor gpio AS608 AS608 pptical and R503 capacitive fingerprint sensors serial AS3935 Franklin lightning sensor serial APDS-9960 Ambient light, RGB color and proximity sensor with gesture detection I<sup>2</sup>C AZ 7798 CO<sub>2</sub> meter datalogger BH1750 Luminosity sensor BMP280BMP085BMP180) Pressure sensor BME280 temperature, humidity and pressure sensor I<sup>2</sup>C BME680BME688 temperature, humidity, pressure and gas sensor I<sup>2</sup>C Buzzer Audio signalling device gpio CC2530 TI CC2530 Zigbee adapter serial CCS811 Gas and air quality sensor I<sup>2</sup>C Chirp! Soil Moisture sensor Moisture sensor I<sup>2</sup>C DFR0299 DFRobot DFPlayer mini MP3 player serial DHT11 Temperature and humidity sensor gpio DHT12 Temperature and humidity sensor gpio DY-SV17F DY-SV17F MP3 player serial DYP-ME007 Ultrasonic distance sensor serial DS18x20 Temperature sensor 1-Wire DS1624DS1621 Temperature sensor 1-Wire DS3231 Real time clock I<sup>2</sup>C DS3502 Digital potentiometer I<sup>2</sup>C EZO EZO series of chemical sensors I<sup>2</sup>C F&amp;F LE-01MR F&amp;F LE-01MR single phase Modbus energy meter GDK101 Gamma radiation sensor I<sup>2</sup>C GGreg20_V3 Ionizing radiation detector gpio (ESP32 only) GM861 Barcode and QR code reader serial GPS-NTP-server GPS NTP server serial ENS161 Air quality sensor I<sup>2</sup>C HDC1080 Texas Instruments HDC1080 humidity and temperature sensor I<sup>2</sup>C HDC2010 Texas Instruments HDC2010 humidity and temperature sensor I<sup>2</sup>C HM-10 BLE Bluetooth gateway serial HM-17HM-16 Bluetooth iBeacon reader serial HMC5883L 3-channels magnetic field sensor I<sup>2</sup>C HP303B Barometric pressure sensor I<sup>2</sup>C HYTxx Temperature and humidity sensor I<sup>2</sup>C HR-E Water meter encoder interface serial HRG-15 Hydreon RG-15 rain gauge sensor serial HRXL MaxBotix HRXL line of sonar ranging sensors gpio HC-SR04HC-SR04PJSN-SR04T) Ultrasonic sensor gpio HM330x SeedStudio Grove HM3301 particulate matter sensor I<sup>2</sup>C HMC5883L 3-Axis digital compass sensor I<sup>2</sup>C HLK-LD2410HLK-LD2410B 24GHz mmWave presence sensor serial HLK-LD2410S Low energy 24GHz mmWave presence sensor serial Honeywell HIH Temperature and humidity sensor I<sup>2</sup>C Honeywell HPMA115xx Particulate matter sensor serial HTU21 Temperature and humidity sensor I<sup>2</sup>C HX711 Load cell sensor gpio HRG15 Solid state rain sensor serial I2S Audio  I2S audio DAC and microphone I2s iAQ-Core Indoor air quality sensor I<sup>2</sup>C iEM3000 Schenider Electric Modbus energy meter serial INA219ISL28022 High-side DC current and voltage sensor I<sup>2</sup>C INA226 High-side or Low-side DC current and voltage sensor I<sup>2</sup>C IR Remote IR transmitter and receiver K30, K70, S8 SenseAir CO<sub>2</sub> sensors serial [LM75ADSTDS75(LM75AD) Temperature sensor I<sup>2</sup>C LMT01 Temperature sensor gpio MAX17043 LiPo fuel gauge I<sup>2</sup>C MAX31855MAX6675 Thermocouple sensor SPI MAX31865 RTD temperature sensor amplifier SPI MAX44009 Ambient light sensor I<sup>2</sup>C MCP23008MCP23017MCP23S17 I/O expander I<sup>2</sup>C MCP2515 CAN bus controller SPI MCP9808 Temperature sensor I<sup>2</sup>C ME007 Ultrasonic distance sensor gpio MFRC522 NFC tag reader SPI MGC3130 3D tracking and gesture Controller MH-Z19B CO<sub>2</sub> sensor MLX90614 MLX9061X infrared thermometer I<sup>2</sup>C MLX90640 MLX90640 far infrared thermal sensor array I<sup>2</sup>C MPR121 Proximity capacitive touch sensor controller (I<sup>2</sup>C) MPU6050 3-axis gyroscope and 3-axis accelerometer sensor (I<sup>2</sup>C) MQ MQ sensors (MQ-02, MQ-03, MQ-04, MQ-05, MQ-06, MQ-07, MQ-08, MQ-09, MQ-131, MQ-135) analog MS01 Moisture sensor from Sonoff 1wire NeoPool Sugar Valley NeoPool controller serial NRF24L01 NRF24L01 as BLE-bridge for Mijia BT sensors SPI OpenTherm OpenTherm adapter serial P1 Smart Meter Energy meter serial PAJ7620 Gesture &amp; proximity detection sensor PIR Passive infrared sensor gpio PCA9557 I/O expander I<sup>2</sup>C PCA9685 16-channel, 12-bit PWM LED controller I<sup>2</sup>C PCA9632 4-channel, 8-bit PWM LED controller I<sup>2</sup>C PCF8574(A) 8-port I/O expander I<sup>2</sup>C PMS3003PMS5003PMS7003PMSx003T Particle concentration sensor serial PMSA003I Air quality sensor I<sup>2</sup>C PN532 NFC/RFID controller PZEM-004PZEM-016 Energy monitor serial QMC5883L Magnetic field sensor I<sup>2</sup>C RCWL-0516 Microwave radar presence detection RDM6300 125Khz RFID module RF Transceiver IR receiver and/or transmitter RX-4M50RR30SFRX-AM8SF RF sensor receiver gpio SCD30 CO<sub>2</sub> sensor I<sup>2</sup>C SCD40SCD41 CO<sub>2</sub> sensor I<sup>2</sup>C Eastron SDM72 Modbus energy meter serial Eastron SDM120 Modbus energy meter serial Eastron SDM220 Modbus energy meter serial Eastron SDM230 Modbus energy meter serial Eastron SDM630 Modbus energy meter serial YF-DN50 Flow rate meter gpio SDS011SDS021 Laser dust sensor SEN0390 Ambient light sensor I<sup>2</sup>C SEN5X All-in-one environmental sensor I<sup>2</sup>C SGP30 Gas and air Quality sensor I<sup>2</sup>C SGP40 Gas and air Quality sensor I<sup>2</sup>C SGP41 VOC and NOx sensor I<sup>2</sup>C SHT1x Temperature and humidity sensor I<sup>2</sup>C SHT30 Temperature and humidity sensor I<sup>2</sup>C SHT4x Temperature and humidity sensor I<sup>2</sup>C SI114x UV index, IR and visible light sensor I<sup>2</sup>C Si7021 Temperature and humidity sensor I<sup>2</sup>C SK6812 Addressable LEDs Smart Meter Interface Smart Meter Interface serial, gpio SolaX X1 SolaX Power X1 inverter serial SPS30 Particulate matter sensor T6703T6713 Telaire T6700 series CO<sub>2</sub> sensor I<sup>2</sup>C TC74 Temperature sensor I<sup>2</sup>C T\u00e9l\u00e9info French energy measuring system serial TFMini TFmini, TFmini Plus, TFmini Plus (indoor Version), TFmini-S LiDAR module serial TM1638 8 Switch, LED and 7-segment unit sensor gpio TSL2561 Luminosity sensor I<sup>2</sup>C TSL2591 Luminosity sensor I<sup>2</sup>C TX20TX23WS2300 La Crosse TX2x / Technoline WS2300-15 anemometer (wind sensor) gpio VEML6070 UV sensor I<sup>2</sup>C VEML6075 UVA/UVB/UVINDEX sensor I<sup>2</sup>C VEML7700 Ambient light intensity sensor I<sup>2</sup>C VL53L0x Time of flight sensor I<sup>2</sup>C VL53L1x Time of flight sensor I<sup>2</sup>C VINDRIKTNING IKEA VINDRIKTNING particle concentration sensor serial WindMeter Analog cup anemometer Winsen ZH03B Particle concentration sensor serial WS2812B Wemos shield with addressable LED WS2812BWS2813B Addressable LEDs Xadow Grove Mutichannel Gas sensor Gas sensor I<sup>2</sup>C InvenSense ICP-10125 Barometer/pressure sensor I<sup>2</sup>C <p>Google Sheet list of supported peripherals</p> <p>sensor API Documentation</p>"},{"location":"Supported-Peripherals/#expanding-specific-devices","title":"Expanding Specific Devices","text":"<ul> <li>LEGO nightstand switch using Sonoff SV</li> <li>Add a physical button to Sonoff Basic</li> <li>Remote button for Sonoff</li> <li>Expand Sonoff S20 with a jack plug</li> <li>Expand Sonoff 4CH with a jack plug</li> <li>Modify KaKu to WKaKu Power Socket</li> <li>GPIO Locations for some devices</li> </ul>"},{"location":"TFL/","title":"TensorFlow Lite","text":"This feature is not included in precompiled binaries <p>add as a build flag to your build environment in <code>platformio_tasmota_cenv.ini</code>: <pre><code>build_flags             = ${env:tasmota32_base.build_flags}\n                        -DUSE_BERRY_TF_LITE\n                        -DESP_NN ; use optimized kernels for ESP32/ESP32-S3\n                        -DUSE_I2S_ALL ; add only for speech/microphone use\nlib_extra_dirs          = lib/libesp32, lib/libesp32_div, lib/lib_basic, lib/lib_i2c, lib/lib_div, lib/lib_ssl, lib/libesp32_ml\n; lib/libesp32_ml is important to include \n</code></pre></p> <p>Currently supported targets: ESP32 and ESP32-S3.  </p>"},{"location":"TFL/#different-levels-of-tensorflow","title":"Different Levels of TensorFlow","text":"<p>TensorFlow is an open-source machine-learning platform that is widely adopted and thus is a whole ecosystem with tools, libraries and a huge community. It is not application specific and can be used for all kind of tasks. Initially it was only usable on fully fledged computers but over time technical advances in software and hardware made it possible to step down the stairs and make it usable on weaker devices. So the next smaller thing is called TensorFlow Lite that was targeted for smaller devices like the famous ARM-based 'RaspberryPi'.  </p> <p>But - you guessed it - this was not the end of the line and the whole armada of microcontrollers reached out to be part of the machine learning world. The name of this stripped down platform is TensorFlow Lite for Microcontrollers. Tasmota uses a fork from Espressif with optimized functions for maximal performance.  </p>"},{"location":"TFL/#machine-learning-is-what-exactly-again","title":"Machine Learning ... is what exactly again?","text":"<p>Machine learning, deep learning, KI, AI, ... - these are very blurry defined words, that mean more or less the same and scale from pretty complex up to extremely complex software constructs. Let's try to have a very simplified look at it.</p> <p>In ancient times (like 20 years ago) problems where solved on computers by finding an algorithm to compute input data and thus getting output data. With machine learning the process is still to have input data, but to use known good output data to let a piece of software find the algorithm to get from the known input data to the known output data - and hope that this still works with unknown input data. The mixture of algorithms and found parameters will be put into a structure which is called a model and the process of building it is usually named training. The model is created programmatically, although this process can be hidden behind a GUI and at this stage the number of inputs and outputs will be defined. Although it would be technically possible to feed raw sensor data into the model, this is not how it is done in most cases. The very common step in between is called feature extraction, which reduces the amount of data and often the dimensionality to make the whole process more efficient and thus even possible for some applications. A good feature extraction will help to later run a successful inference and there are tools to show, how different input entities form clusters of feature data. After feeding the model with sensible data it is time to press a virtual \"go button\" and invoke an inference, that does the magic computations inside the model. After that the outputs will get populated with some values, that have to be interpreted as probabilities. It can be required to add some complex logic in order interpret this data or do some averaging of real-time data. </p> <p>The processed data is historically typically in the floating point format, but for weak devices like MCU's it is a very common thing to shrink the 4 bytes of a float32 to 1 byte of an int8 by quantization. This happens on various places and will lead to a loss of precision, but is very often nearly on par in the final result.  </p>"},{"location":"TFL/#design-considerations-for-tasmota","title":"Design Considerations for Tasmota","text":"<p>The understandable way to optimize machine learning applications for MCU's is to build and later flash one monolithic firmware, where everything has to be done at/before compile time. This makes sense and is fundamentally the only way to quench out every little bit of performance and memory optimization.  </p> <p>Nonetheless for Tasmota we do not really want to build one-trick-pony firmwares and the idea is to be able to run all kinds of TensorFlow applications with one firmware, that has enough generic capabilities to dynamically load models and extra code at runtime. On the other hand we can optimize the program flow for the ESP chips and Free-RTOS. The API shall be quite slim with as few boilerplate code as possible, but can be extended as needed and use Berry to add additional logic in the first place.  </p> <p>Accelerate your development workflow for machine learning</p> <p>Usually developing machine learning applications on MCU's means that every small change to the model and/or application code will need a firmware compilation and flashing. With Tasmota this is now independent to each other. You can retrain and reupload the model to the file system as often as needed at runtime. The same is valid for refining the Berry code.</p> <p>In order to get things done like speech recognition, where especially realtime feature extraction is not possible to achieve with Berry (with the knowledge of today), additional specialized functionality is included.  </p> <p>Before you proceed, check you expectations!!</p> <p>The most important prerequisite for speech recognition on MCU's is to have the right mindset. It is totally impossible to reach the level of recognition of a commercial product (Alexa, Siri, Cortana, ... you name it) on much stronger hardware. The usual cheap I2S MEMS microphone alone is a severe problem and the tuning of the various variables of the model is trial and error in many cases. It will make the final application fail with wrong but similar sounding words or mumbling.  Be happy if it works and just don't do it, if you can not handle frustration! You will have to invest some time to fine tune every specific application!</p> <p>This sums up to these steps:  </p> <ol> <li> <p>Create a TensorFlow lite model (including collecting data, finding good parameters, final training).  Use Edgeimpulse to make this easy or create your own training pipeline.</p> </li> <li> <p>Create a Berry application (loading the model, running inference, interpret the result, acting on the result).  Use building blocks from this page to get started.</p> </li> </ol>"},{"location":"TFL/#speech-recognition","title":"Speech Recognition","text":"<p>For the specific task of speech recognition a big hurdle lies in the way in the form of \"How to create a model\"?. Although there are numerous ways published on various places, that sound quite similar to each other, this is a very non-trivial task. While the same principles apply to all examples that you may find, the implementation differences under the hood are quite substantial. The hardest part here is to do the feature extraction of the audio data in a compatible(!!!) way for training and inference on the device. Usually the raw audio data is processed using mel frequency conversion, FFT and some kind of logarithm. You may find words like power spectrum, mel frequency energies and mel frequency cepstral coefficients, which sadly are very implementation specific and not interchangeable. So it is utterly important to use the same (= compatible) implementations for the whole pipeline of <code>Training-&gt;Deployment-&gt;Usage</code>.  </p> <p>For convenience reasons and after extended testing it was decided to be compatible with Speechpy (with small differences). Thus it is possible to use Edge Impulse as the training platform for model creation, which uses Speechpy too and is a development platform for machine learning on small devices, that shares some similarities to GitHub with regards to costs. Everything that we need for Tasmota is free, the enterprise solution they offer for money is not needed. Technically it is definitely possible to build a complete offline training pipeline as basically everything on Edgeimpulse is open source and can be recreated by a motivated user for local usage.  </p> <p>If you use Edge Impulse for online training, you do not have to create a new firmware image for your Tasmota device. Instead of choosing one of the deployment options from Edge Impulse, you only have to download the binary TensorFlow Lite model (usually the <code>int8 quantized</code> version) from the <code>Dashboard</code>, give it a suitable name and upload it to Tasmotas filesystem in order to use it with Berry afterwards.  </p> Example -  speech recognition using MFCC: <p></p>"},{"location":"TFL/#usage","title":"Usage","text":"<p>Functionality is provided by the module <code>TFL</code>, so always start with <code>import TFL</code>.</p> TFL Function Parameters and details begin <code>(type:string, descriptor:bytes)</code>First step creates an internal context of type\"BUF\" - generic session with arbitrary byte buffers for input and output\"MIC\" - for voice recognition and capturing training data\"CAM\" - not implemented yet\"\" - stops a running session, can be used to init the internal log buffer<code>`descriptor</code>a byte array with specific meaning for every type load <code>(model:bytes, output:bytes, memory:int)</code>Will load and run the model<code>model</code> a bytes buffer that holds the model data for the entire lifecycle<code>output</code> a byte buffer that matches the output size of the model<code>memory</code> optional (default: 2000), a model specific memory size in bytes that will be allocated, find by trial-end-error input <code>(input:bytes)</code>Feed the input of the model with values, must match the size of the model input. Will invoke an inference. output <code>(output:bytes) -&gt; bool</code>Returns true if function was not called yet on actual output data. stats <code>() -&gt; string</code>Returns a JSON string with some metrics of the current session. log <code>() -&gt; string</code>Returns a log message, typically for debugging. <p>Use Netron to check your model</p> <p>https://netron.app shows the inner structure of a tensorflow model including format and size of the inputs and outputs. Online and offline versions of the application available for every major platform.</p>"},{"location":"TFL/#hello-world-sort-of","title":"\"Hello World\" Sort Of...","text":"<p>Perhaps THE starter project is the in itself pretty useless \"sinewave example\", which is nicely explained in these videos.</p> <p>Of course we can run this model perfectly fine inside Tasmota, with a Berry code snippet:</p> <pre><code>import TFL\nTFL.begin(\"BUF\")  # generic TFL session \nvar i = bytes(-4) # holds one float, size must match the model\nvar o = bytes(-4) # dito\n\nvar model = open(\"sine_model.tflite\").readbytes() # this binary file must have been saved in the FS before\nTFL.load(model,o,3000) # load and run\n\nvar count = 0.0\ndef cb() \n    if TFL.output(o)\n        # \"draw\" a bar\n        var v =  int((o.getfloat(0) + 1) * 15)\n        var bar_el = \"=\"\n        var bar = \"\"\n        for i:0..v bar+=bar_el end\n        print(bar)\n\n        # or print the value\n        # print(o.getfloat(0))\n\n        # prepare new input in the range of 0..6\n        count+= 0.1 \n        if count&gt;6 count=0 end\n        i.setfloat(0,count) \n        TFL.input(i) # and feed it into the model\n    end\n    var s = TFL.log() # receive log messages from the TF lite tasks\n    if s print(s) end \n    tasmota.set_timer(50, cb) \nend\ncb()\n\n# initiate loop \nTFL.input(i)\n</code></pre> <p>This will pollute your Tasmota console with a moving bar resembling a sine wave.</p> <p>In fact this shows a very generic application, where the format and size as well as the meaning of the in- and outputs must be known, but the model itself can remain a \"black box\". We do not need to know, which kernels or parameters are used.  </p> <p>Use 'TFL.stats()' to find memory size</p> <p>The metrics will show the used bytes of the model. So start with a large value and tune down, but leave a margin above the number in the output of the command.</p>"},{"location":"TFL/#speech-recognition-keyword-spotting","title":"Speech Recognition / Keyword Spotting","text":"<p>Training can be done entirely with Edgeimpulse. See their documentation for Responding to your voice.  </p> <p>It is important to have a basic understanding of the process of speech recognition in order to set and tune the configuration: An audio stream is processed in small slices, which have a duration and a stride. They can overlap or run one after the other.  </p> <p>Tasmota will process every audio slice and immediately extract the features with support for the modes: MFE and MFCC. For performance reasons, we do not support every setting Edgeimpulse provides. Do not use <code>Window size</code> for MFCC mode by setting it to 0. More on this later.</p> <p>We use the following fixed audio settings:  </p> Setting Value Sample length 1 second - means the word to train should be shorter (you might get away with training a shorter part of a longer word) Sample frequency 16kHz - a proven compromise of sound quality, that is just enough for voice recognition, but can be handled by the ESP32 Sample format 16 bit, mono Low frequency 300 Hz - default in Edgeimpulse High frequency 8000 Hz - Sample frequency/2 and default too. Higher values would not make sense because of the NYQUIST theorem."},{"location":"TFL/#create-training-data","title":"Create Training Data","text":"<p>A working microphone setup for recording training data and later audio recognition is needed. We reuse the setup of the I2S driver of Tasmota, that must be configured according to I2S-Audio for ESP32.  </p> <p>Currently supported are 16 bits per sample at a rate of 16000 Hz. This can be set with: <pre><code>i2sconfig {\"Rx\":{\"SampleRate\":16000}}\n</code></pre> The required preamplification factor is usually quite high (often around 16 - 32) and can be set with: <pre><code>i2sconfig {\"Rx\":{\"Gain\":30}}\n</code></pre> Too high values will lead to clipping. The audio output of most I2S microphone is very low. Check your setup by recording a WAV file and analyze in Edgeimpulse or use an audio tool like Audacity.</p> <p>Although you can use the microphone of your computer or smartphone, it is highly recommended to use your ESP32 microphone at least for a large amount of samples in order to train the model with the same pure sound quality, that it later has to run inference on. A working SD card config is the best way to capture training data.</p> <p>You can use a simple Berry driver from Tasmotas example collection to get this done: wavrec.be </p> <p>Usage: <code>waverec5 /test</code> - &gt; record 5 seconds to /test.wav</p> <p>Then you can talk into the microphone with around 1 word per second and later upload this file to your Edge Impulse project via your computer.</p>"},{"location":"TFL/#general-strategies","title":"General strategies","text":"<ol> <li>Mix input samples from different microphones. Using the computer or phone for audio recording is way more user friendly, so add some samples the easy way. But without enough samples from your ESP32 microphone the final performance will be mediocre at best.</li> <li>Input samples from different speakers will very likely lead to a more robust model. So ask family and friends for help.</li> <li>More is more. Almost always adding more samples will result in a better performing model. Don't give up, if testing performance degrades in the early stages of audio harvesting. Just make sure to only add valid audio data with correct labels and the final result will improve with more audio data.</li> </ol>"},{"location":"TFL/#edge-impulse","title":"Edge Impulse","text":"<p>For training on Edge Impulse some post processing is usually necessary.  </p> <p>If you have uploaded a sample containing many repetitions of one word, there is a convenient split function, that slices the long mega-sample into one-second samples. For very short words this works automatically pretty well, for longer words close to one second it is recommended to check and fix possible errors immediately. You can check the resulting simple sample including the correct label:  </p> 16-bit-sample with label \"computer\": <p></p> <p>The feature extraction step needs some parameters and will happen in the same way before training and later on-device.  </p> MFCC parameters: <p></p> <p>This will create a feature array, which will stack the features of every slice on each other. This will be visualized as a heat map, where a slice is a column (oldest left) and the lines represent the frequency banks.  Thus this \"picture\" holds the data of one second of audio, that the ML model will later \"see\" to do inference.   </p> MFCC features for 1 second of audio: <p></p> <p>Configuring the neural network architecture can be done in a GUI. Following the rule to go deep (more layers) and not too wide (less neurons) results in smaller models.  </p> \"Deep\" model for 7 keywords (plus unknown and noise) with size of only 14 kB: <p></p> <p>After training and configuring the model on Edgeimpulse we can simply download the TensorFlow Lite model from the dashboard (the int8 version) and upload it to the ESP32 filesystem.  </p>"},{"location":"TFL/#tasmota-side","title":"Tasmota Side","text":"<p>On the Tasmota side the feature settings have to be translated in Berry with a descriptor. The descriptor settings may change in the future!  </p> number property value 0 i2s_channel_fmt_t this is an old setting and ignored now, maybe used differently in the future 1 amplification factor this is an old setting and ignored now, maybe used differently in the future 2 slice durationor Frame length A slice of audio data in milliseconds. With the fixed audio settings 32 milliseconds translate to 512 samples, which as a power of 2 is a good fit for FFT. 3 slice strideor Frame stride Time in milliseconds between the starts of 2 adjacent slices. No overlap happens if duration and stride are equal. Lower values create more stress for the system. Values around and below 20 milliseconds may leads to problems. Bad Wifi will worsen things earlier!! 4 Filter number Number of captured mel energies. For MFE mode these are the feature values for one slice. 5 MFCC coefficientsor Number of coefficients If not 0, this means we use MFCC mode and these are the feature values for one slice. 6 FFT sizeor FFT length In powers of 2. For now must be equal or greater than sample size, means slice duration of 32 ms -&gt; sample size 512 -&gt; 2^9 -&gt; 9 7 Inferences per second Typical values 4-10. More values need more averaging in post-processing, but will likely show less missed words. 8 Noisefloor In dB for MFE mode. Sound data with level below that threshold will be discarded. 9 preemphassis Factor will be divided by 100, so 98 -&gt; 0.98. It is recommended to not use this, as Edgeimpulse and Speechpy compute this over the whole sample, while Tasmota does this per slice, which is way more efficient but creates a difference. There is a way to overcome this. More later ... <p>The Berry driver for the speech recognition must be adapted for every model and use case. A plain old ESP32 without extra PS-RAM is enough to \"hear\" with about 10 inferences per per second.</p> <p>Demo example: <pre><code># globals\nvar key_words = [\"down\", \"left\", \"noise\", \"right\", \"up\"] # must match your trained model!! Edgeimpulse sorts them alphabetically\nvar thresholds = [700,710,680,680,720] # same indices as key_words, increase against false positives, decrease against misses, \n                                       # max. theoretical value = 256 * number of averages for int8_t output tensor\n\nclass PREDICTOR\n    var avgs, sz, time_out\n    var out_buf, out_buf_idx\n\n    def init(sz, averages)\n        self.out_buf = bytes(-(averages * sz)) # creates circular buffer for averaging\n        self.out_buf_idx = 0 \n        self.time_out = 0 # after successful word finding, make a break to avoid \"noise findings\"\n        self.sz = sz # size of word list/output tensor\n        self.avgs = averages # number of averaging/oversampling steps\n    end\n\n    def clear() # clear oversampling buffer after word was found\n        for i:0..size(self.out_buf)-1\n            self.out_buf[i] = 0\n        end\n    end\n\n    def run(data)\n        if self.time_out &gt; 0\n            self.time_out -= 1\n            return 255 # return some error code = no result\n        end\n\n        for i:0..(self.sz-1)\n            self.out_buf[self.out_buf_idx+i] = data[i]\n        end\n        self.out_buf_idx += self.sz\n        if self.out_buf_idx&gt;(self.avgs-1) * self.sz\n            self.out_buf_idx = 0 \n        end\n\n        var average\n        for i:0..(self.sz-1)\n            average = 0\n            for j:0..self.avgs-1\n                average +=  self.out_buf[i+(j*self.sz)]\n            end\n            # if i == 4\n            #     print(average) # test the threshold for single words while developing, needed in the next step\n            # end\n            if average &gt; thresholds[i] # find the threshold stored in the global list by trial and error\n                if i != 2 # this is the non-noise/unknown output - you must infer this from your model\n                    self.clear() # only clear the buffer after finding a keyword, not for noise/unknown\n                    self.time_out = 10 # find the value by trial and error - good starting point is one second\n                                       # lower number allows faster speech, but might increase false positives\n                    print(average)\n                end\n                return i\n            end\n        end\n        return 255 # return some error code = no result\n    end\nend\n\nclass MICROSPEECH : Driver\n    var o, o_sz  # output tensor, size of output tensor\n    var p        # predictor instance\n    var model    # this var really holds the model data for the entire session\n    var new_out  # current output sensor converted to uint8_t\n\n    def init()\n        import TFL\n        self.o_sz = size(key_words) # this value must be correctly taken from the model/training pipeline\n        self.new_out = []\n        self.new_out.resize(self.o_sz)\n        self.o = bytes(-self.o_sz) # size must match the model\n        self.p = PREDICTOR(self.o_sz,4) # second arg is number of averages for prediction\n\n        var descriptor = bytes(-10)\n        descriptor[0] = 4  # ignored\n        descriptor[1] = 16 # ignored\n        descriptor[2] = 32 # slice_dur in ms \n        descriptor[3] = 32 # slice_stride in ms\n        descriptor[4] = 26 # mfe filter (= features if MFE mode)\n        descriptor[5] = 13 # mfcc coefficients, if 0 -&gt; compute MFE only\n        descriptor[6] = 9  # 2^9 = 512 fft_bins\n        descriptor[7] = 10 # max. invocations per second - find best value by testing on device\n        descriptor[8] = 52 # db noisefloor -&gt; negative value\n        descriptor[9] = 0 # preemphasis\n        TFL.begin(\"MIC\",descriptor)\n        self.model = open(\"mfcc.lite\").readbytes() # file must be present on the ESP\n        if self.model\n            TFL.load(self.model,self.o,28000)\n        end\n    end\n\n    def every_50ms()\n        import TFL\n        if TFL.output(self.o)\n            for i:0..(self.o_sz-1)\n                self.new_out[i] = self.o.geti(i,1) + 128\n            end\n            #print(self.new_out)\n            var r = self.p.run(self.new_out)\n            if r != 2 &amp;&amp; r != 255 # in this example not noise/unknown/error code - can be more complex\n                print(key_words[r])\n                # do something useful\n            end\n        end\n        var s = TFL.log()\n        if s print(s) end\n    end\nend\n\nvar mic = MICROSPEECH()\n\ntasmota.add_driver(mic)\n</code></pre></p>"},{"location":"TFL/#image-classification","title":"Image classification","text":"<p>This is really a huge task for any ESP32 and needs some \"treatment\" to make life as easy as possible for this tiny and weak platform. Do not expect easy success. As other projects have shown before it is important to create an optimal photo capture setup, which typically involves 3D printed housing. Excellent and extensive information can be found here: AI-on-the-edge-device</p> <p>In Tasmota we use a generic and flexible approach, which does not use a special mode of the TFL module. The biggest chunk of work goes into model creation and the hardware setup. Once this is solved, running inference on the ESP with a Berry script should not be a showstopper.  </p>"},{"location":"TFL/#ml-learning-by-doing","title":"ML-learning by doing","text":"<p>Let's walk through a simple example step by step. The object to observe has a very common 7-segment display, which could show any type of data, but here it is just a clock.  </p>"},{"location":"TFL/#camera-setup","title":"Camera setup","text":"<p>First step is to create the capture setup. If we would change this later, most of the next step will need to be done again. As the main problem of any ESP is the lack of memory, it is important to use the lowest camera resolution, that get's the job done. Orthographic projection wil produce the least artifacts, so we try to come as close to this as possible.  </p>"},{"location":"TFL/#roi-creation","title":"ROI creation","text":"<p>Now we must create definitions of regions of interest for every digit, that will be used later in the Berry script. This can be done with the help of a web tool right here in the docs: ROI  editor</p> ROI editor -  create 2D affine matrix: <p></p> <p>You can select-copy-paste the matrix definition for later use as it is already valid Berry code.  The ROI pictures can be saved (with chrome based browser) to be used in the training process later.  </p> <p>After we have a feasible construction, we can think about the model.  </p>"},{"location":"TFL/#model-training","title":"Model training","text":"<p>A ready made model \"from somewhere\" is the fastest option, but here we create one from scratch.  </p> <p>To train it, we typically need thousands of photos. This would be a pretty insane task to shoot by hand. That's why the demo model was created with the help of synthetic image creation, which includes a so called \"image augmentation\". This means the creation of multiple slight abbreviations of one source image, which typically involves scaling, shearing, blurring, noise addition, contrast variation and in this case image inversion. Very likely we must add some original pictures from the observed display, which we can get from the ROI editor.   </p> <p>Again we use Edgeimpulse to finally create the model. The demo project can be found here: 7-segment Here we can see the uploaded images and model design - similar to the speech recognition example from above.</p> <p>From the dashboard we can download the final model file with the type <code>TensorFlow Lite (int8 quantized)</code> which is about 17 KB in size.  </p>"},{"location":"TFL/#berry-implementation","title":"Berry implementation","text":"<p>Finally we must put it all together. We need the model binary file and write the Berry script to use it. For demo purposes the following script can run inference on the demo image from the docs: dt.jpg, which must be uploaded to the ESP. Download the model, name it <code>7d.lite</code> and upload it too.</p> <p>Now save the Berry script as <code>digits.be</code> and start with <code>br load(\"digits\")</code> from the normal console or with <code>load(\"digits\")</code> from the Berry console.  </p> <pre><code>class ROI_DSC\n    var _dsc\n\n    def init()\n        self._dsc = []\n        var d1 = { \"width\": 32, \"height\": 32, \"scaleX\": 1, \"shearY\": 0, \"transX\": 189, \"scaleY\": 2.5161290322580645, \"shearX\": 0, \"transY\": 213 }\n        self._dsc.push(self.roi_dsc(d1))\n        var d2 = { \"width\": 32, \"height\": 32, \"scaleX\": 1.4193548387096775, \"shearY\": 0, \"transX\": 215, \"scaleY\": 2.5161290322580645, \"shearX\": 0, \"transY\": 210 }\n        self._dsc.push(self.roi_dsc(d2))\n        var d3 = { \"width\": 32, \"height\": 32, \"scaleX\": 1.4193548387096775, \"shearY\": 0, \"transX\": 269, \"scaleY\": 2.5161290322580645, \"shearX\": 0, \"transY\": 205 }\n        self._dsc.push(self.roi_dsc(d3))\n        var d4 = { \"width\": 32, \"height\": 32, \"scaleX\": 1.4193548387096775, \"shearY\": 0, \"transX\": 315, \"scaleY\": 2.5161290322580645, \"shearX\": 0, \"transY\": 200 }\n        self._dsc.push(self.roi_dsc(d4))\n    end\n\n    def get(idx)\n        if idx &gt; (size(self._dsc) - 1)\n            return nil\n        end\n        return self._dsc[idx]\n    end\n\n    def roi_dsc(m)\n        var d = bytes(-24)\n        d.setfloat(0,m[\"scaleX\"])\n        d.setfloat(4,m[\"shearX\"])\n        d.setfloat(8,m[\"shearY\"])\n        d.setfloat(12,m[\"scaleY\"])\n        d.seti(16,m[\"transX\"],2)\n        d.seti(18,m[\"transY\"],2)\n        d.seti(20,m[\"width\"],2)\n        d.seti(22,m[\"height\"],2)\n        return d\n    end\nend\n\nclass DIGITS : Driver\n    var out, model\n    var cam_img\n    var dsc\n    var result, idx, idx_step, need_input\n\n\n    def init()\n        self.initTFL()\n        self.cam_img = img()\n        self.dsc = ROI_DSC()\n        self.result = [-1,-1,-1,-1]\n        self.idx = 0\n        self.idx_step = 0\n        self.need_input = true\n\n        self.initCam() \n        self.initFromFile() # for the demo\n        # self.updateImg() # really take picture from cam\n        tasmota.add_driver(self)\n    end\n\n    def stop()\n        self.tasmota.remove_driver(self)\n    end\n\n    def initCam()\n        import cam\n        cam.setup(8) # 640 * 480\n    end\n\n    def initFromFile() # utility method for demo testing/debugging\n        var f = open(\"/dt.jpg\",\"r\")\n        var b = f.readbytes()\n        f.close()\n        self.cam_img.from_jpg(b,img.GRAYSCALE)\n        b = nil\n        tasmota.gc()\n    end\n\n    def updateImg()\n        import cam\n        cam.get_image(self.cam_img,img.GRAYSCALE)\n    end\n\n    def initTFL()\n        import TFL\n        TFL.begin(\"BUF\")  # generic TFL session \n        self.out = bytes(-10) # one output for every digit\n        self.model = open(\"/7d.lite\").readbytes() # this binary file must have been saved in the FS before\n        TFL.load(self.model,self.out,20000) # load and run, find value for memory allocation by trial and error\n    end\n\n    def handle_inference()\n        import mqtt\n        var digit = self.predict()\n        if digit == nil\n            self.result[self.idx] = -1\n            # mqtt.publish(\"tele/display\",format('{\"time\":\"error\"}'))\n        else\n            self.result[self.idx] = digit\n        end\n        self.idx += 1\n        if self.idx == size(self.result) # full run over 4 digits complete\n            self.idx = 0\n\n            # self.updateImg() # now we might take the next picture\n\n            log(f\"Complete result: {self.result[0]}{self.result[1]}:{self.result[2]}{self.result[3]}\") # or mqtt publish\n            # mqtt.publish(\"tele/clock\",format('{\"time\":\"%i%i:%i%i\"}',self.result[0],self.result[1],self.result[2],self.result[3]))\n        end\n        log(f\"DIG: result of inference: {digit} for {self.idx}\",3)\n        self.need_input = true\n    end\n\n    def update_input()\n        import TFL\n        var next_dsc = self.dsc.get(self.idx)\n        var roi = self.cam_img.get_buffer(next_dsc)\n        if TFL.input(roi, true)\n            self.need_input = false\n        end\n    end\n\n    def every_100ms() # not aiming at \n        import TFL\n        if self.need_input\n            self.update_input()\n        elif TFL.output(self.out)\n            self.handle_inference()\n        end\n        var log_msg = TFL.log() # receive log messages from the TF lite tasks\n        if log_msg log(f\"TFL: {log_msg}\",3) end \n    end\n\n    def predict()\n        # very simple implementation\n        var max_val = -128\n        var threshold = 0 # find out empirically\n        var digit = nil\n        for idx : 0..(size(self.out)-1)\n            var score = self.out.geti(idx,1)\n            if max_val &lt; score\n                if score &gt; threshold\n                    digit = idx\n                end\n                max_val = score\n            end\n        end\n        return digit\n    end\nend\n\ndigits = DIGITS()\n</code></pre> <p>This will print the clock string to the console and can be used as a starting point for real world use cases.</p>"},{"location":"TLS/","title":"TLS Secured MQTT","text":"This feature is included only in <code>tasmota32</code> and <code>tasmota-zbbridge</code> binaries <p>Starting with version 10.0.0.4, TLS now support dual mode, depending of the value of <code>SetOption132</code>:</p> <ul> <li><code>SetOption132 0</code> (default): the server's identity is checked against pre-defined Certificate Authorities. There is no further configuration needed. Tasmota includes the following CAs:</li> <li>Let's Encrypt ISRG Root X1, RSA 4096 bits SHA 256, valid until 20300604, starting with Tasmota version 13.4.1.2</li> <li>Amazon Root CA, RSA 2048 bits SHA 256, valid until 20380117, used by AWS IoT</li> <li><code>SetOption132 1</code>: Fingerprint validation. This method works for any server certificate, including self-signed certificates. The server's public key is hashed into a fingerprint and compared to a pre-recorded value. This method is more universal but requires an additional configuration (see below)</li> </ul> <p>There is no performance difference between both modes.</p> <p>Because of changes in the Let's Encrypt certificate chain, Tasmota needs to be updated to at least version 13.4.1.2 to validate certificates issued by Let's Encrypt after June 6th, 2024.</p>"},{"location":"TLS/#fingerprint-validation","title":"Fingerprint Validation","text":"<p>The fingerprint is now calculated on the server's Public Key and no longer on its Certificate. The good news is that Public Keys tend to change far less often than certificates, i.e. LetsEncrypt triggers a certificate renewal every 3 months, the Public Key fingerprint will not change after a certificate renewal. The bad news is that there is no <code>openssl</code> command to retrieve the server's Public Key fingerprint.</p> <p>The following tool can be used to calculate the Fingerprint from your certificate using the new V2 algorithm.</p> <p>Important: The original Fingerprint V1 algorithm had a security potential vulnerability, it has been replaced by a new more robust method v2. </p> <p>To simplify your task, we have added two more options: 1/ auto-learning of the fingerprint, 2/ disabling of the fingerprint validation altogether.</p>"},{"location":"TLS/#option-1-fingerprint-auto-learn","title":"Option 1: Fingerprint auto-learn","text":"<p>If set, Tasmota will automatically learn the fingerprint during the first connection and will set the Fingerprint settings to the target fingerprint. To do so, use one of the following commands:</p> <p><pre><code>#define MQTT_FINGERPRINT1      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n</code></pre> or <pre><code>#define MQTT_FINGERPRINT2      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n</code></pre></p>"},{"location":"TLS/#option-2-disable-fingerprint","title":"Option 2: Disable Fingerprint","text":"<p>You can completely disable server fingerprint validation, which means that Tasmota will not check the server's identity. This also means that your traffic can possibly be intercepted and read/changed, so this option should only be used on trusted networks, i.e. with an MQTT on your local network. YOU HAVE BEEN WARNED!</p> <p>To do so, set one of the Fingerprints to all 0xFF:</p> <p><pre><code>#define MQTT_FINGERPRINT1      0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF\n</code></pre> Tasmota also provide an option to authenticate clients using an x509 certificate and a public key for authentication, instead of username/password.</p> <p>For details on how to set up your local instance of Mosquitto, check the article Self-signed-Mosquitto.</p>"},{"location":"TLS/#compiling-tls-for-esp8266","title":"Compiling TLS for ESP8266","text":"<p>To use it you must compile your build. Add the following to <code>user_config_override.h</code>:</p> <pre><code>#ifndef USE_MQTT_TLS \n#define USE_MQTT_TLS                             // Use TLS for MQTT connection (+34.5k code, +7.0k mem and +4.8k additional during connection handshake)\n#define MQTT_TLS_ENABLED       true              // [SetOption103] Enable TLS mode (requires TLS version)\n//  #define USE_MQTT_TLS_CA_CERT                   // Force full CA validation instead of fingerprints, slower, but simpler to use.  (+2.2k code, +1.9k mem during connection handshake)\n                                                   // This includes the LetsEncrypt CA in tasmota_ca.ino for verifying server certificates\n#endif\n</code></pre>"},{"location":"TLS/#change-port-to-8883","title":"Change port to 8883","text":"<pre><code>#define MQTT_PORT              8883              // [MqttPort] MQTT port (10123 on CloudMQTT)\n</code></pre>"},{"location":"TLS/#ensure-that-for-the-environment-you-have-selected-liblib_ssl-is-included-on-platformio_tasmota_envini","title":"Ensure that for the environment you have selected, <code>lib/lib_ssl</code> is included on <code>platformio_tasmota_env.ini</code> :","text":"<pre><code>lib_extra_dirs          = lib/lib_ssl\n</code></pre> <p>TLS offers increased security between your connected devices and your MQTT server, providing server authentication and encryption. Please refer to the general discussion in Securing-your-IoT-from-hacking</p> <p>Starting version 6.5.0.15, there are major changes to TLS to make it lighter in memory and easier to use. It has now reduced flash and memory requirements that makes it compatible with Web and Hue Emulation.</p> <p>If you are upgrading from a previous TLS activated version, there are breaking changes in the way Fingerprints are calculated</p> <p>At the Tasmota configuration, you need to enable to use the TLS Version. This is done by enable <code>#define USE_MQTT_TLS</code> in <code>user_config_override.h</code> and </p> <p>If you are using LetsEncrypt to generate your server certificates, you should activate <code>#define USE_MQTT_TLS_CA_CERT</code>. Tasmota will transparently check the server's certificate with LetsEncrypt CA. If you are generating self-signed certificates or prefer fingerprints, read below.</p>"},{"location":"TLS/#limitations","title":"Limitations","text":"<p>On ESP8266, starting with 6.5.0.15, AxTLS has been replaced with BearSSL. This uses less memory, typically 6.0k constantly, and an additional 6.8k during TLS connection.</p> <p>On ESP32, BearSSL provides a much lighter footprint than MbedTLS (~45kB instead of ~150kB) and continues to be used by Tasmota.</p> <p>Main limitations are:</p> <ul> <li>Your SSL/TLS server must support TLS 1.2 and the <code>ECDHE_</code> cipher - which is the case with the default Mosquitto configuration</li> <li>The server certificate must have an RSA private key (max 2048 bits) and the certificate must be signed with RSA and SHA256 hash. This is the case with default LetsEncrypt certificates. ESP32 supports by default RSA private keys up to 4096 bits, ESP8266 must be compiled with option <code>-DUSE_4K_RSA</code> to support 4096 private keys.</li> <li>Your SSL/TLS should support TLS 1.2 MFLN to limit buffer to 1024 bytes. If MFLN is not supported, it will still work well, as long as the server does not send any message above 1024 bytes. On ESP32 buffers are raised to 2048 bytes.</li> <li>If you are using certbot with Letsencrypt: starting with v2.0.0 certbot requests ECDSA certificates by default. Make sure you explicitly add <code>--key-type rsa</code> and <code>--rsa-key-size 2048</code> (or <code>--rsa-key-size 4096</code>).</li> </ul>"},{"location":"TLS/#implementation-notes","title":"Implementation Notes","text":"<p>Arduino Core switched from AxTLS to BearSSL in 2.4.2, allowing further optimization of the TLS library footprint. BearSSL is designed for compactness, both in code size and memory requirements. Furthermore it is modular and allows for inclusion of only the code necessary for the subset of crypto-algorithms you want to support.</p> <p>All numbers below are for ESP8266</p> <p>Thanks to BearSSL's compactness and aggressive optimization, the minimal TLS configuration requires just 34.5k of Flash and 6.7k of Memory. The full-blown AWS IoT version with full certificate validation requires 48.3k of Flash and 9.4k of Memory.</p> <p>Here are the tips and tricks used to reduce Flash and Memory:</p> <ul> <li>MFLN (Maximum Fragment Length Negotiation): TLS normally uses 16k buffers for send and receive. 32k looks very small on a server, but immensely huge for ESP8266. TLS 1.2 introduced MFLN, which allows the TLS Client to reduce both buffers down to 512 bytes. MFLN is not widely supported yet, but it is by recent OpenSSL versions and by AWS IoT. This is a huge improvement in memory footprint. If your server does not support MFLN, it will still work as long as the messages sent by the server do not exceed the buffer length. In Tasmota the buffer length is 1024 bytes for send buffer and 1024 bytes for receive buffer. Going below creates message fragmentation and much longer TLS connection times (above 3s). If your server does not support MFLN, you'll see a message to that effect in the logs.</li> <li>Max Certificate size: BearSSL normally supports server certificates of up to RSA 4096 bits and EC 521 bits. These certificates are very uncommon currently. To save extra memory, the included BearSSL library is trimmed down to maximum RSA 2048 bit certificate and EC 256 bit certificate. This should not have any impact for you.</li> </ul> <p>Tasmota will crash if the server serves a 4096 bit RSA certificate. The crash will likely be in <code>br_rsa_i15_pkcs1_vrfy</code>. Enable <code>USE_4K_RSA</code> to avoid this behaviour.</p> <ul> <li>EC private key: AWS IoT requires the client to authenticate with its own Private Key and Certificate. By default AWS IoT will generate an RSA 2048 bit private key. In Tasmota, we moved to an EC (Elliptic Curve) Private Key of 256 bits. EC keys are much smaller, and handshake is significantly faster. Note: the key being 256 bits does not mean it's less secure than RSA 2048, it's actually the opposite.</li> <li>Single Cipher: to reduce code size, we only support a single TLS cipher and embed only the code strictly necessary. When using TLS (e.g. LetsEncrypt on Mosquitto) the supported cipher is <code>ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>. Additionally, ECDHE offers Perfect Forward Secrecy which means extra security.</li> <li>Adaptive Thunk Stack: BearSSL does not allocate memory on its own. It's either the caller's responsibility or memory is taken on the Stack. Stack usage can go above 5k, more than the ESP8266 stack. Arduino created a Thunk Stack, a secondary stack of 5.6k, allocated on Heap, and activated when a TLS connection is active. Actually the stack is mostly used during TLS handshake, and much less memory is required during TLS message processing. Tasmota only allocates the Thunk Stack during TLS handshake and switches back to the normal Stack afterwards. See below for details of actual memory usage.</li> <li>Keys and CA in PROGMEM: BearSSL was adapted from original source code to push most on the tables and static data into PROGMEM: https://github.com/earlephilhower/bearssl-esp8266. Additional work now allows us to put the Client Private Key, Certificate and CA in PROGMEM too, saving at least 3k of Memory.</li> </ul>"},{"location":"TLS/#memory-usage","title":"Memory Usage","text":"<p>TLS on Tasmota has been aggressively optimized to use as little memory (heap) as possible. It was also optimized to limit code size.</p> <p>Memory consumption (nominal):</p> <ul> <li>BearSSL lib: 1424 bytes (or 1024 bytes with LetsEncrypt or regular TLS)</li> <li>BearSSL ClientContext: 3440 bytes</li> <li>Buffers (1024 bytes in + 1024 bytes out + overhead): 2528 bytes</li> <li>Total = 7.4k (or 7.0k with LetsEncrypt or regular TLS)</li> </ul> <p>Note: if you use <code>USE_WEBSERVER</code>, your impact is lowered by 2k since the Web log buffer is reduced from 4k to 2k. Overall, when activating <code>USE_WEBSERVER</code>, you just see a memory impact of 5.4k.</p> <p>Memory needed during connection (TLS handshake - fingerprint validation):</p> <ul> <li>ThunkStack = 5308 bytes (or 3608 bytes with LetsEncrypt or regular TLS)</li> <li>DecoderContext = 1152 bytes</li> <li>Total for connection = 6.5k (or 4.8k with LetsEncrypt or regular TLS)</li> </ul> <p>Memory needed during connection (TLS handshake - full CA validation):</p> <ul> <li>ThunkStack = 5308 bytes (or 3608 bytes with LetsEncrypt or regular TLS)</li> <li>DecoderContext = 3072 bytes</li> <li>Total for connection = 8.4k (or 6.7k with LetsEncrypt or regular TLS)</li> </ul>"},{"location":"TLS/#connection-time","title":"Connection Time","text":"<p>ESP8266 is quite slow compared to modern processors when it comes to SSL handshakes. Here are observed performance times when connecting to an SSL/TLS server, depending on CPU frequency (80MHz or 160MHz):</p> <p>AWS IoT Connection, with EC Private Key, simple fingerprint validation:</p> <ul> <li>0.7s at 160MHz</li> <li>1.3s at 80 MHz</li> </ul> <p>AWS IoT Connection, with EC Private Key, full CA validation (easier to configure than fingerprints):</p> <ul> <li>1.0s at 160MHz</li> <li>1.8s at 80 MHz</li> </ul> <p>LetsEncrypt based server (Mosquitto for ex), simple fingerprint validation:</p> <ul> <li>0.3s at 160MHz</li> <li>0.4s at 80MHz</li> </ul> <p>LetsEncrypt based server (Mosquitto for ex), with full CA validation (easier to configure than fingerprint):</p> <ul> <li>0.4s at 160MHz</li> <li>0.7s at 80MHz</li> </ul>"},{"location":"TLS/#tls-troubleshooting","title":"TLS Troubleshooting","text":"<p>Here are most common TLS errors:  </p> Error code Description -1005 Time-out during TLS handshake -1004 Missing CA (deprecated) -1003 Missing EC private key (deprecated) -1002 Cannot connect to TCP port -1001 Cannot resolve IP address -1000 Out of memory error 1 Bad fingerprint 2 \u00a0BR_ERR_BAD_STATE 3 BR_ERR_UNSUPPORTED_VERSION 4 \u00a0BR_ERR_BAD_VERSION 5 \u00a0BR_ERR_BAD_LENGTH 6 \u00a0BR_ERR_TOO_LARGE 7 \u00a0BR_ERR_BAD_MAC 8 BR_ERR_NO_RANDOM 9 BR_ERR_UNKNOWN_TYPE\u00a0 10 BR_ERR_UNEXPECTED 12 BR_ERR_BAD_CCS 13 \u00a0BR_ERR_BAD_ALERT 14 BR_ERR_BAD_HANDSHAKE 15 \u00a0BR_ERR_OVERSIZED_ID 16 \u00a0BR_ERR_BAD_CIPHER_SUITE 17 BR_ERR_BAD_COMPRESSION 18 \u00a0BR_ERR_BAD_FRAGLEN 19 BR_ERR_BAD_SECRENEG 20 \u00a0BR_ERR_EXTRA_EXTENSION 21 BR_ERR_BAD_SNI 22 BR_ERR_BAD_HELLO_DONE\u00a0 23 BR_ERR_LIMIT_EXCEEDED: the server's public key is too large. Tasmota TLS is limited to 2048 RSA keys 24 \u00a0BR_ERR_BAD_FINISHED\u00a0 25 \u00a0BR_ERR_RESUME_MISMATCH 26 \u00a0BR_ERR_INVALID_ALGORITHM 27 \u00a0BR_ERR_BAD_SIGNATURE 28 BR_ERR_WRONG_KEY_USAGE 29 BR_ERR_NO_CLIENT_AUTH 31 BR_ERR_IO 54 BR_ERR_X509_EXPIRED X.509 status: certificate is expired or not yet valid. 56 BR_ERR_X509_BAD_SERVER_NAME X.509 status: expected server name was not found in the chain. 62 X509 not trusted, the server certificate is not signed by the CA (AWS IoT or LetsEncrypt) 266 SSL3_ALERT_UNEXPECTED_MESSAGE 276 TLS1_ALERT_BAD_RECORD_MAC 277 \u00a0TLS1_ALERT_DECRYPTION_FAILED 278 TLS1_ALERT_RECORD_OVERFLOW 286 SSL3_ALERT_DECOMPRESSION_FAIL 296 SSL3_ALERT_HANDSHAKE_FAILURE 298 TLS1_ALERT_BAD_CERTIFICATE: Missing or bad client private key 299 TLS1_ALERT_UNSUPPORTED_CERT 300 \u00a0TLS1_ALERT_CERTIFICATE_REVOKED 301 \u00a0TLS1_ALERT_CERTIFICATE_EXPIRED 302 \u00a0TLS1_ALERT_CERTIFICATE_UNKNOWN 303 \u00a0SSL3_ALERT_ILLEGAL_PARAMETER 304 \u00a0TLS1_ALERT_UNKNOWN_CA\u00a0 305 TLS1_ALERT_ACCESS_DENIED 306 \u00a0TLS1_ALERT_DECODE_ERROR 307 TLS1_ALERT_DECRYPT_ERROR 316 \u00a0TLS1_ALERT_EXPORT_RESTRICTION 326 \u00a0TLS1_ALERT_PROTOCOL_VERSION 327 \u00a0TLS1_ALERT_INSUFFIENT_SECURITY 336 \u00a0TLS1_ALERT_INTERNAL_ERROR 346 \u00a0TLS1_ALERT_USER_CANCELED 356 TLS1_ALERT_NO_RENEGOTIATION 366 TLS1_ALERT_UNSUPPORTED_EXT <p>Additional <code>BR_ERR*</code> error codes </p>"},{"location":"TM163x/","title":"TM1637, TM1638 and MAX7219 Seven-Segment Display","text":"This feature is included only in <code>tasmota*-display.bin</code> precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_DISPLAY\n#define USE_DISPLAY\n#endif\n\n#ifndef USE_DISPLAY_TM1637\n#define USE_DISPLAY_TM1637\n#endif\n</code></pre> In case you want MAX7219 also add: <pre><code>#ifndef USE_DISPLAY_MAX7219\n#define USE_DISPLAY_MAX7219\n#endif\n</code></pre> In order to use TM1368 leds and buttons, see instructions in TM1638 leds and buttons</p> TM1637 TM1638 MAX7219 <p>The TM1637, TM1638 and MAX7219 display modules are small (~ 10mm high digits) 7-segment, LED-based display units with 4/6 digits (TM1637), 8 digits and 8 digits (TM1638 and MAX7219) respectively. They use a two-wire (TM1637) or three-wire (TM1638 and MAX7219) I2C-like (but not exactly) protocol for communication with MCUs like the ESP8266 / ESP32 / Arduino etc., </p> <p>These modules are a great way to add a simple numeric display to any MCU project.  </p> <p>(In case a 8x8 dot matrix module is connected to the MAX7219 see: Support of MAX7219 for 8x8 LED dot matrix)</p>"},{"location":"TM163x/#features","title":"Features","text":"<p>The Tasmota support for these modules can --</p> <ul> <li>display Numbers and Floats with control over position and leading zeros.</li> <li>display basic Text, for example, sending the text <code>22.5^</code> will display: </li> <li>display Raw segments.</li> <li>display Level, like a bar graph</li> <li>display  Scrolling text</li> <li>display a Clock in 12 hr and 24 hr format</li> <li>set Brightness (8 levels) and Clear the display.</li> </ul>"},{"location":"TM163x/#configuration","title":"Configuration","text":""},{"location":"TM163x/#wiring","title":"Wiring","text":"<p>The TM1637 module needs to be connected to two GPIO pins and a 3.3V-5V power supply.  </p> TM1637 ESP based module CLK GPIOx DIO GPIOy VCC 3.3V (e.g., ESP-01) or 5V (e.g., Wemos D1 Mini) GND GND <p>The TM1638 module needs to be connected to three GPIO pins and a 5V power supply. </p> TM1638 ESP based module CLK GPIOx DIO GPIOy STB GPIOz VCC 5V GND GND <p>The MAX7219 module needs to be connected to three GPIO pins and a 5V power supply. </p> MAX7219 ESP based module CLK GPIOx DIN GPIOy CS GPIOz VCC 5V GND GND"},{"location":"TM163x/#tasmota-settings","title":"Tasmota Settings","text":"<p>In Tasmota's Configuration -&gt; Configure Module page, assign:</p> <p>For TM1637</p> <ol> <li><code>GPIOx</code> to <code>TM1637 CLK</code></li> <li><code>GPIOy</code> to <code>TM1637 DIO</code></li> </ol> <p>For TM1638</p> <ol> <li><code>GPIOx</code> to <code>TM1638 CLK</code></li> <li><code>GPIOy</code> to <code>TM1638 DIO</code></li> <li><code>GPIOz</code> to <code>TM1638 STB</code></li> </ol> <p>For MAX7219</p> <ol> <li><code>GPIOx</code> to <code>MAX7219 CLK</code></li> <li><code>GPIOy</code> to <code>MAX7219 DIN</code></li> <li><code>GPIOz</code> to <code>MAX7219 CS</code> </li> </ol> <p>For example, if x=0 and y=2, z=4 then the module configuration would look like the following: TM1637 TM1638 MAX7219 </p>"},{"location":"TM163x/#initial-setup","title":"Initial Setup","text":"<p>The power toggle button in webUI turns the display on or off. However, if there are additional relays defined, resulting in multiple power toggle buttons in WebUI, display power will create and map to the last button. Thus, it is necessary to ensure that relays are numbered from 1, otherwise a conflict will occur with the display power.</p> <p>In the console, turn ON the display with the command <code>Power 1</code>.</p>"},{"location":"TM163x/#displaymodel","title":"DisplayModel","text":"<p>Once the GPIO configuration is saved and the ESP8266 / ESP32 module restarts, set the Display Model to 15 using the command:  </p> <p><code>DisplayModel 15</code> </p>"},{"location":"TM163x/#displaywidth","title":"DisplayWidth","text":"<p>If you have a TM1637 with 6 digits, set the number of digits using the command:  </p> <p><code>DisplayWidth 6</code> </p>"},{"location":"TM163x/#displaytype","title":"DisplayType","text":"<p>The 6-digit TM1637 has 2 known variants with different hardware wiring for the digit ordering. You can switch between these two variants with the following commands:  </p> <p><code>DisplayType 0</code>  - Use this for the Type 0 variant, with wiring similar to the TM1637 4-digit modules <code>DisplayType 1</code>  - Use this for the Type 1 variant, with a different wiring that causes the text 123456 to appear as 321654 </p> <p>After the ESP8266/ESP32 module restarts again, the display module is ready to accept commands.</p>"},{"location":"TM163x/#displaymodes","title":"DisplayModes","text":"<p>DisplayModes <code>0..3</code> are supported. The firmware default is <code>DisplayMode 1</code>.  </p> <p>To use the Seven-Segment specific Display- commands described below, set the <code>DisplayMode</code> to <code>0</code> with:  </p> <p><code>DisplayMode 0</code> </p>"},{"location":"TM163x/#displaydimmer","title":"DisplayDimmer","text":"<p>The brightness of the display can be set using the <code>DisplayDimmer</code> command.  </p> <p><code>DisplayDimmer 0..100</code> maps the brightness value to 8 steps from <code>0..7</code> </p> <p>For a minimum brightness, make sure this value is at least about <code>13</code> </p>"},{"location":"TM163x/#7-segment-specific-commands","title":"7-Segment specific Commands","text":"<p>The Display- commands listed below can be used from the Tasmota web-console, MQTT, and from Tasmota  Rules </p>"},{"location":"TM163x/#tm1638-leds-and-buttons","title":"TM1638 leds and buttons","text":"<p>In order to use the TM1638 leds and buttons, you must self-compile <code>tasmota</code> with the following in your <code>user_config_override.h</code>:</p> <pre><code>#define USE_DISPLAY\n#define USE_DISPLAY_TM1637\n\n#define USE_TM1638 // Add support for TM1638 switches copying Switch1 .. Switch8 (+1k code)\n// #define TM1638_USE_AS_BUTTON // Add support for buttons\n#define TM1638_USE_AS_SWITCH // Add support for switches (default)\n#define TM1638_MAX_DISPLAYS 8 // Add support for power control 8 displays\n#define TM1638_MAX_KEYS 8 // Add support for 8 keys\n#define TM1638_MAX_LEDS 8 // Add support for 8 leds    \n</code></pre> <p>This will define the buttons as <code>Switches</code>. If you want to use them as <code>Buttons</code>, invert the comments on the lines: <pre><code>#define TM1638_USE_AS_BUTTON // Add support for buttons\n//#define TM1638_USE_AS_SWITCH // Add support for switches (default)\n</code></pre></p> <p>The 8 leds will be created as <code>Relay</code>s. If no other relays are defined, they will start as <code>Relay1</code>  up to <code>Relay8</code>. A 9th relay is assigned to the 7-segment display.</p> <p>The 8 buttons will be created by default as <code>Switch</code>es with all the features of switches including  debouncing and all Switchmodes.</p> <p>Alternatively, using <code>#define TM1638_USE_AS_BUTTON</code> they would be created as <code>Button</code>s fully equivalent  to a native Tasmota Button on a GPIO.</p> <p>In all cases, leds, switches or buttons index will be assigned after native relays, switches or  buttons get assigned. Other drivers providing relays, buttons or switchs initialized before TM1368 will be also get index assigned before TM1638. So actual indexes may depends on what other GPIO/drivers are configured on your system.</p> <p>See rule sample below.</p>"},{"location":"TM163x/#commands-and-usage","title":"Commands and Usage","text":"Console/MQTT Commands Description values DisplayClear Clears the display DisplayNumber Clears and then displays number without decimal. command e.g., \"DisplayNumber 1234\".  Control <code>position</code>, <code>leading zeros</code>, and <code>length</code>.  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most),  <code>leading zeros</code> can be <code>1</code> or <code>0</code> (default),  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6).   Command example: <code>DisplayNumber 12, 1, 1, 3</code>  This will display: <code>num</code> [, <code>position</code>[, <code>leading_zeros</code>[, <code>length</code>]]] DisplayNumberNC Display integer number as above, but without clearing first. e.g., \"DisplayNumberNC 1234\". Usage is same as above. same as above DisplayFloat Clears and then displays float (with decimal point)  command e.g., \"DisplayFloat 12.34\".  Control <code>position</code>, <code>precision</code>, <code>length</code> and <code>alignment</code>.  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most),  <code>precision</code> can be <code>0</code> to <code>NUM_DIGITS</code> (default),  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6).   <code>alignment</code> can be 0 for left and 1 for right.  Command example: <code>DisplayFloat 2.48, 1, 1, 2</code>  This will display: <code>num</code>[, <code>position</code>[, <code>precision</code>[, <code>length</code> [, <code>alignment</code>]]]] DisplayFloatNC Displays float (with decimal point) as above, but without clearing first. command e.g., \"DisplayFloatNC 12.34\" same as above DisplayRaw Takes up to <code>NUM_DIGITS</code> comma-separated integers (0-255) and displays raw segments.  Each number represents a 7-segment digit. Each 8-bit number represents individual segments of a digit.  Segment a=1, b=2, c=4, d=8, e=16, f=32, g=64 and h (decimal point)=128. To turn on all segments, the number would be 1+2+4+8+16+32+64+128 = 255 For example, the command <code>DisplayRaw 0, 2, 255, 255</code> would display: <code>position</code>, <code>length</code>,  <code>num1</code> [, <code>num2</code>[, <code>num3</code>[, <code>num4</code>[, ...up to <code>NUM_DIGITS</code> numbers]]...] DisplayText Clears and then displays basic text.  Command e.g., <code>DisplayText a.b12</code>  Control <code>length</code> and <code>position</code> of the displayed text.  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> ,  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most)   A caret(<code>^</code>) symbol in the text input is displayed as the degrees(<code>\u00b0</code>) symbol. This is useful for displaying Temperature (or angle)!  For example, the command <code>DisplayText 22.5^</code> will display: <code>text</code>[, <code>position</code>[, <code>length</code>]] DisplayTextNC Displays text without first clearing the display. Usage is same as above. same as above DisplayScrollText Displays scrolling text, up to 50 characters. If <code>num_iterations</code> is not specified, it scrolls indefinitely, until another Display- command is issued. Optionally, specifying <code>num_iterations</code> causes the scrolling to stop after the specified number of iterations.Command examples: <code>DisplayScrollText tasmota is awesome</code>   -- causes indefinite scrolling<code>DisplayScrollText tasmota is awesome, 5</code>   -- causes scrolling to stop after 5 iterations <code>text</code> [, <code>num_iterations</code>] DisplayScrollDelay Sets the speed of text scroll. Smaller delay = faster scrolling. 0 to 15 DisplayLevel Display a horizontal bar graph. Command e.g., <code>DisplayLevel 50</code> will display: 0 to 100 DisplayClock Displays a clock.  <code>DisplayClock 1</code> displays a clock in 12-hour format.  <code>DisplayClock 2</code> displays a clock in 24-hour format.  <code>DisplayClock 0</code> turns off the clock and clears the display 1 or 2 or 0"},{"location":"TM163x/#usage-in-rules","title":"Usage in Rules","text":"<p>All the above commands can be used in Tasmota Rules, as usual. </p> <p>For example, a simple digital thermometer can be implemented by connecting a DHT22 Temperature-Humidity Sensor and a TM1637 to a Wemos D1 Mini, and writing a Rule like the following:</p> <p><pre><code>Rule1\nON Tele-AM2301#Temperature DO DisplayText %value%^ ENDON\n</code></pre> Another example, using a MAX7219 and a SHT3X temp/humidity sensor, with value comparison so displaytext only fires when the value changes. The first four digits display the temperature and the second four digits display the humidity. The DisplayTextNC command is used to leave unused digits illuminated, so both numbers can be independently updated. <pre><code>Rule1\non sht3x#Temperature!=%var1% do backlog displaytextnc %value%^;var1 %value% endon on sht3x#Humidity!=%var2% do backlog displaytextnc %value%h,4;var2 %value% endon on system#init do power 1 endon\n</code></pre></p>"},{"location":"TM163x/#tm1638-in-rules","title":"TM1638 in rules","text":"<p>As the leds and buttons are fully equivalent to Relays and Buttons/Switches, they can be used in  rules in exactly the same way as native Relay/Power, Buttons/Switches.</p> <p>Here is a little ruleset which implement a 8-digit code entry (using only digit 1 to 8).</p> <p>At start Time is displayed (DisplayMode 1) but as soon as you type in the 1st key, it starts the  entry mode. After each digit entry the user has up to 5 seconds to enter the next digit.  It (s)he fails, the state machine is reset and the display reverts showing Time.</p> <p>Once all 8 digits are entered, the resulting string is stored in <code>var3</code> as a text message.</p> <p>This is only a sample which can be adapted for example to send the code through MQTT.</p> <pre><code>DisplayModel 15\nDisplayWidth 8\n\nrule1 \n  on system#init do event reset endon \n  on event#reset do backlog ruletimer1 0; displaymode 1; var1 1; var2 \" endon\n  on button1#state do event key=1 endon\n  on button2#state do event key=2 endon \n  on button3#state do event key=3 endon \n  on button4#state do event key=4 endon \n  on button5#state do event key=5 endon \n  on button6#state do event key=6 endon \n  on button7#state do event key=7 endon \n  on button8#state do event key=8 endon \n  on event#key do backlog var2 %var2%%value%; displaymode 0; displaytext %var2%%value%; ruletimer1 5; add1 1 endon \n  on rules#timer=1 do event reset endon \n  on var1#state==9 do backlog ruletimer1 5; var3 The Code is %var2% endon\n\nrule1 1\n</code></pre>"},{"location":"TM163x/#tm1637-images","title":"TM1637 Images","text":"<p> The TM1637 4-digit module (front and back)  TM1637 4-digit module with Wemos D1 Mini</p>"},{"location":"TM1650/","title":"TM1650 Seven-Segment Display","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_I2C\n#define USE_I2C\n#endif\n\n#ifndef USE_DISPLAY\n#define USE_DISPLAY\n#endif\n#ifndef USE_DISPLAY_MODES1TO5\n#define USE_DISPLAY_MODES1TO5\n#endif\n#ifndef USE_DISPLAY_TM1650\n#define USE_DISPLAY_TM1650\n#endif\n\n// ONLY XY-Clock\n#ifndef USE_RTC_CHIPS \n#define USE_RTC_CHIPS\n#endif\n#ifndef USE_DS3231\n#define USE_DS3231\n#endif\n</code></pre></p> TM1650 - XY-Clock TM1650 - 303WiFiLC01 <p>The TM1650 display modules are usually found in \"cheap\" Wifi LED clock. They manage 7-segment LED displays (~ 27 mm high) with 4 digits. They use two wire I2C protocol to communicate with MCU such as ESP8266/ESP32/Arduino etc.,  </p>"},{"location":"TM1650/#features","title":"Features","text":"<p>The Tasmota support for these modules can --</p> <ul> <li>display Numbers and Floats with control over position and leading zeros.</li> <li>display basic Text, for example, sending the text <code>22.5^</code> will display: </li> <li>display Raw segments.</li> <li>display Level, like a bar graph</li> <li>display  Scrolling text</li> <li>display a Clock in 12 hr and 24 hr format</li> <li>set Brightness (8 levels) and Clear the display.</li> </ul>"},{"location":"TM1650/#configuration","title":"Configuration","text":""},{"location":"TM1650/#wiring","title":"Wiring","text":"<p>The TM1650 module needs to be connected to I<sup>2</sup>C GPIO pins and a 3.3V-5V power supply.  </p> TM1650 ESP based module SCL GPIOx SDA GPIOy VCC 3.3V (e.g., ESP-01) or 5V (e.g., Wemos D1 Mini) GND GND"},{"location":"TM1650/#tasmota-settings","title":"Tasmota Settings","text":"<p>In Tasmota's Configuration -&gt; Configure Module page, assign:</p> <p>For TM1650</p> <ol> <li><code>GPIOx</code> to <code>I2C SCL</code></li> <li><code>GPIOy</code> to <code>I2C SDA</code></li> </ol> <p></p> <p>For example, with XY-Clock hardware, the module configuration would look like the following: TM1650 - XY-Clock </p>"},{"location":"TM1650/#initial-setup","title":"Initial Setup","text":"<p>The power toggle button in webUI turns the display on or off. However, if there are additional relays defined, resulting in multiple power toggle buttons in WebUI, display power will create and map to the last button. Thus, it is necessary to ensure that relays are numbered from 1, otherwise a conflict will occur with the display power.</p> <p>In the console, turn ON the display with the command <code>Power 1</code>.</p>"},{"location":"TM1650/#displaymodel","title":"DisplayModel","text":"<p>Once the GPIO configuration is saved and the ESP8266 / ESP32 module restarts, set the Display Model to 20 using the command:  </p> <p><code>DisplayModel 20</code> </p>"},{"location":"TM1650/#displaytype","title":"DisplayType","text":"<p>The 6-digit TM1637 has 2 known variants with different hardware wiring for the digit ordering. You can switch between these two variants with the following commands:  </p> <p><code>DisplayType 0</code>  - Use this for the Type 0 variant XY-Clock, with wiring is equal to datasheet <code>DisplayType 2</code>  - Use this for the Type 2 variant 303WifiLC01, with a different wiring </p> <p>After the ESP8266/ESP32 module restarts again, the display module is ready to accept commands.</p>"},{"location":"TM1650/#displaymodes","title":"DisplayModes","text":"<p>DisplayModes <code>0..3</code> are supported. The firmware default is <code>DisplayMode 1</code>.  </p> <p>To use the Seven-Segment specific Display- commands described below, set the <code>DisplayMode</code> to <code>0</code> with:  </p> <p><code>DisplayMode 0</code> </p>"},{"location":"TM1650/#displaydimmer","title":"DisplayDimmer","text":"<p>The brightness of the display can be set using the <code>DisplayDimmer</code> command.  </p> <p><code>DisplayDimmer 0..100</code> maps the brightness value to 8 steps from <code>0..7</code> </p> <p>For a minimum brightness, make sure this value is at least about <code>13</code> </p>"},{"location":"TM1650/#7-segment-specific-commands","title":"7-Segment specific Commands","text":"<p>The Display- commands listed below can be used from the Tasmota web-console, MQTT, and from Tasmota  Rules </p>"},{"location":"TM1650/#commands-and-usage","title":"Commands and Usage","text":"Console/MQTT Commands Description values DisplayClear Clears the display DisplayNumber Clears and then displays number without decimal. command e.g., \"DisplayNumber 1234\".  Control <code>position</code>, <code>leading zeros</code>, and <code>length</code>.  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most),  <code>leading zeros</code> can be <code>1</code> or <code>0</code> (default),  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6).   Command example: <code>DisplayNumber 12, 1, 1, 3</code>  This will display: <code>num</code> [, <code>position</code>[, <code>leading_zeros</code>[, <code>length</code>]]] DisplayNumberNC Display integer number as above, but without clearing first. e.g., \"DisplayNumberNC 1234\". Usage is same as above. same as above DisplayFloat Clears and then displays float (with decimal point)  command e.g., \"DisplayFloat 12.34\".  Control <code>position</code>, <code>precision</code>, and <code>length</code>.  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most),  <code>precision</code> can be <code>0</code> to <code>NUM_DIGITS</code> (default),  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> (4 or 6).   Command example: <code>DisplayFloat 2.48, 1, 1, 2</code>  This will display: <code>num</code>[, <code>position</code>[, <code>precision</code>[, <code>length</code>]]] DisplayFloatNC Displays float (with decimal point) as above, but without clearing first. command e.g., \"DisplayFloatNC 12.34\" same as above DisplayRaw Takes up to <code>NUM_DIGITS</code> comma-separated integers (0-255) and displays raw segments.  Each number represents a 7-segment digit. Each 8-bit number represents individual segments of a digit.  Segment a=1, b=2, c=4, d=8, e=16, f=32, g=64 and h (decimal point)=128. To turn on all segments, the number would be 1+2+4+8+16+32+64+128 = 255 For example, the command <code>DisplayRaw 0, 2, 255, 255</code> would display: <code>position</code>, <code>length</code>,  <code>num1</code> [, <code>num2</code>[, <code>num3</code>[, <code>num4</code>[, ...up to <code>NUM_DIGITS</code> numbers]]...] DisplayText Clears and then displays basic text.  Command e.g., <code>DisplayText a.b12</code>  Control <code>length</code> and <code>position</code> of the displayed text.  <code>length</code> can be <code>1</code> to <code>NUM_DIGITS</code> ,  <code>position</code> can be <code>0</code> (left-most) to <code>NUM_DIGITS-1</code> (right-most)   A caret(<code>^</code>) symbol in the text input is displayed as the degrees(<code>\u00b0</code>) symbol. This is useful for displaying Temperature (or angle)!  For example, the command <code>DisplayText 22.5^</code> will display: <code>text</code>[, <code>position</code>[, <code>length</code>]] DisplayTextNC Displays text without first clearing the display. Usage is same as above. same as above DisplayScrollText Displays scrolling text, up to 50 characters. If <code>num_iterations</code> is not specified, it scrolls indefinitely, until another Display- command is issued. Optionally, specifying <code>num_iterations</code> causes the scrolling to stop after the specified number of iterations.Command examples: <code>DisplayScrollText tasmota is awesome</code>   -- causes indefinite scrolling<code>DisplayScrollText tasmota is awesome, 5</code>   -- causes scrolling to stop after 5 iterations <code>text</code> [, <code>num_iterations</code>] DisplayScrollDelay Sets the speed of text scroll. Smaller delay = faster scrolling. 0 to 15 DisplayLevel Display a horizontal bar graph. Command e.g., <code>DisplayLevel 50</code> will display: 0 to 100 DisplayClock Displays a clock.  <code>DisplayClock 1</code> displays a clock in 12-hour format.  <code>DisplayClock 2</code> displays a clock in 24-hour format.  <code>DisplayClock 0</code> turns off the clock and clears the display 1 or 2 or 0"},{"location":"TM1650/#usage-in-rules","title":"Usage in Rules","text":"<p>All the above commands can be used in Tasmota Rules, as usual. </p> <p>For example, a simple digital thermometer can be implemented by connecting a DHT22 Temperature-Humidity Sensor and a TM1650 to a Wemos D1 Mini, and writing a Rule like the following:</p> <pre><code>Rule1\nON Tele-AM2301#Temperature DO DisplayText %value%^ ENDON\n</code></pre>"},{"location":"TSL2561/","title":"TSL2561 light sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_TSL2561\n#define USE_TSL2561         // [I2cDriver16] Enable TSL2561 sensor (I2C address 0x29, 0x39 or 0x49) using library Joba_Tsl2561 (+2k3 code)\n#endif\n</code></pre></p> <p>The TSL2561 luminosity sensor is an advanced digital light I<sup>2</sup>C sensor, ideal for use in a wide range of light situations.</p>"},{"location":"TSL2561/#configuration","title":"Configuration","text":""},{"location":"TSL2561/#wiring","title":"Wiring","text":"TSL2561 ESP GND GND VCC 3.3V SCL GPIOy SDA GPIOx INT not used"},{"location":"TSL2561/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p>After a reboot the driver will detect TSL2561 automatically and display Illuminance.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\"Time\":\"2019-11-03T21:04:05\",\"TSL2561\":{\"Illuminance\":21.180}}\n</code></pre>"},{"location":"TSL2561/#breakout-boards","title":"Breakout Boards","text":""},{"location":"TWAI/","title":"TWAI","text":"This ESP32 only feature is included in tasmota32 binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_ESP32_TWAI\n#define USE_ESP32_TWAI  // Add support for TWAI/CAN interface (+7k code)\n#endif\n</code></pre></p>"},{"location":"TWAI/#what-is-twai","title":"What is TWAI?","text":"<p>Two-Wire Automotive Interface (TWAI) or Controller Area Network (CAN) is a real-time serial communication protocol suited for automotive and industrial applications. It is compatible with ISO11898-1 Classical frames, thus can support Standard Frame Format (11-bit ID) and Extended Frame Format (29-bit ID).</p> <p>The ESP32 series contains 1 to 3 TWAI controller(s) that can be configured to communicate on a TWAI bus via an external transceiver.</p> Platform TWAI busses ESP8266 0 ESP32 (ESP32solo1) 1 ESP32-S2 1 ESP32-S3 1 ESP32-C2 (ESP8684) 0 ESP32-C3 (ESP8685) 1 ESP32-C5 2 ESP32-C6 2 ESP32-C61 2 ESP32-H2 1 ESP32-P4 3 The TWAI controller is not compatible with ISO11898-1 FD Format frames, and will interpret such frames as errors."},{"location":"TWAI/#hardware-needed","title":"Hardware needed","text":"<p>TWAI needs only 2 GPIOs connected to an external tranceiver like M5 Unit CAN with isolation or M5 Mini CAN Unit without isolation.</p>"},{"location":"TWAI/#configuration","title":"Configuration","text":"<p>Parameters to configure the driver need to be entered using a berry script. See examples below.</p> <p>The following table shows the supported Interface Speed.</p> Code Speed 0 25Kbit/s 1 50Kbit/s 2 100Kbit/s 3 125Kbit/s 4 250Kbit/s 5 500Kbit/s 6 800Kbit/s 7 1Mbit/s <p>The following table shows the supported Operating Modes.</p> Code Mode 0 Normal Mode 1 No Ack Mode 2 Listen Only Mode"},{"location":"TWAI/#command","title":"Command","text":"<p>Without a berry configuration and decoding script the driver is configured for 100Kbit/s and Normal Mode. The received data is output as logging messages in debug log level 3.</p> <p>The amount of CAN data can be very high AND decoding this data is specific to every implementation. Therefor it was decided to implement both functions as a berry script. See below for examples.</p> <p>The driver has one command for sending data.</p> Command Parameters TwaiSend&lt;bus&gt; Send zero or up to eigth data bytes to an 11-bit or 29-bit identifier.<code>&lt;id&gt;</code> = Send no data to identifier where identifier is an 11-bit id if bit 31 is 0, ex. <code>0x284</code>. If bit 31 is 1 then a 29-bit id is expected, ex. <code>0x80001234</code>.<code>&lt;id&gt;,&lt;byte1&gt;[..,&lt;byte8&gt;]</code> = Send one or more data bytes.<code>{\"ID\":0x284,\"DATA\":[0x44,3,0x1E,0xFF]}</code> = Alternative using JSON sending four data bytes."},{"location":"TWAI/#example","title":"Example","text":""},{"location":"TWAI/#basic-configuration","title":"Basic configuration","text":"<p>A minimal berry script should look like this: <pre><code>class twai_cls\n  var twai_speed, twai_mode    # (int, int)\n\n  def init()\n    self.twai_speed = 4        # 0 = 25K, 1 = 50K, 2 = 100K, 3 = 125K, 4 = 250K, 5 = 500K, 6 = 800K, 7 = 1Mbits\n    self.twai_mode = 2         # 0 = TWAI_MODE_NORMAL, 1 = TWAI_MODE_NO_ACK, 2 = TWAI_MODE_LISTEN_ONLY\n  end\n\n  #----------------------------------------------------------------------------------------------\n  Allow TWAI driver configuration on restart (if this file is installed by preinit.be)\n  ----------------------------------------------------------------------------------------------#\n  def config(bus)                                    # This function name (config) is called by the TWAI driver!\n    return self.twai_mode &lt;&lt; 3 | self.twai_speed     # Initial configure TWAI driver\n  end\n\n  #----------------------------------------------------------------------------------------------\n  This example decodes nothing but allows for the driver to show message logging in log level 4\n  ----------------------------------------------------------------------------------------------#\n  def decode(param, ident, data1, data2)             # This function name (decode) is called by the TWAI driver!\n    var bus = param &amp; 0xF                            # Bus number (1..3)\n    var len = param &gt;&gt; 4 &amp; 0xF                       # Number of data bytes (0..8)\n    var extended = ident &gt;&gt; 31 &amp; 0x1                 # Extended identifier flag (0..1)\n    var id = ident &amp; 0x1fffffff\n\n  end\nend\n\ntwai = twai_cls()                                    # This class name (twai) is used by the TWAI driver!\ntasmota.add_driver(twai)\n</code></pre> Save the file as <code>twai_minimal.be</code> and add a line <code>load('twai_minimal.be')</code> to file <code>preinit.be</code>. This will execute the file at restart and prepare the driver for 250Kbit/s and Listen Only Mode.</p>"},{"location":"TWAI/#remeha-calenta-ace-sniffer-for-domoticz","title":"Remeha Calenta Ace sniffer for Domoticz","text":"<p>  The Remeha boiler provides a RJ12 connector for a Service Tool. The communication between the boiler and the Service Tool takes place using CAN-bus in 11-bit identifier mode. A dongle consisting of a M5 Mini CAN Unit and a M5Atom (ESP32/ESP32S3) or M5Nano (ESP32C6) with Tasmota can be used as sniffer sending important data to a Home Automation tool like Domoticz.</p> To make the M5 Mini CAN Unit compliant with the CAN-bus standard you'll need to remove the internal 120 Ohm resistor as the Remeha L-Bus is already terminated with two 120 Ohm resistors. When using the M5 Mini CAN Unit DO NOT CONNECT ANY USB CABLE TO THE M5ATOM OR M5NANO. It likely blows (one of) the ESD diodes (as mine did). If USB connection is needed use M5 Unit CAN. <p>As an alternative you can use the M5 Unit CAN which has no internal 120 Ohm termination resistor. In that case you'll need to power the M5Atom or M5Nano externally with a USB power supply as the CAN-bus is isolated.</p> <p>The RJ12 6-pin usage as shown from the front of the boiler</p> <pre><code>             Pin   1    2    3    4    5    6\n      Remeha Ace  24V   nc  Gnd   nc   Tx   Rx\nM5 Mini CAN Unit   HV        G         L    H\n     M5 Unit CAN             G         L    H\n</code></pre>"},{"location":"TWAI/#berry-class","title":"Berry class","text":"<p>This berry class supports a Remeha Calenta Ace boiler sending some data to Domoticz home automation for logging.  <pre><code>class twai_cls\n  var active, pressure_next                          # (bool, bool)\n  var twai_speed, twai_mode                          # (int, int)\n  var am012_status, am014_substatus, am024_power     # (int, int, int)\n  var dz_am012_status, dz_am014_substatus            # (int, int)\n  var pressure, setpoint, flow_temp                  # (float, float, float)\n  var dz_pressure, dz_flow_temp                      # (float, float)\n\n  def init()\n    self.twai_speed = 7        # 0 = 25K, 1 = 50K, 2 = 100K, 3 = 125K, 4 = 250K, 5 = 500K, 6 = 800K, 7 = 1Mbits\n    self.twai_mode = 2         # 0 = TWAI_MODE_NORMAL, 1 = TWAI_MODE_NO_ACK, 2 = TWAI_MODE_LISTEN_ONLY\n    self.active = 0\n    self.am012_status = 0\n    self.am014_substatus = 0\n    self.dz_am012_status = 0\n    self.dz_am014_substatus = 0\n    self.am024_power = 0\n    self.pressure_next = 0\n    self.pressure = 0\n    self.dz_pressure = 0\n    self.setpoint = 0\n    self.flow_temp = 0\n    self.dz_flow_temp = 0\n  end\n\n  #----------------------------------------------------------------------------------------------\n  Allow TWAI driver configuration on restart (if this file is installed by preinit.be)\n  ----------------------------------------------------------------------------------------------#\n  def config(bus)\n#    if bus != 1 return nil end                       # Exit if not my bus\n    return self.twai_mode &lt;&lt; 3 | self.twai_speed     # Initial configure TWAI driver\n  end\n\n  #----------------------------------------------------------------------------------------------\n  This example decodes Remeha Calenta Ace CAN-bus messages and sends it to predefined Domoticz idx\n  ----------------------------------------------------------------------------------------------#\n  def decode(param, ident, data1, data2)\n    var bus = param &amp; 0xF                            # Bus number (1..3)\n#    if bus != 1 return nil end                       # Exit if not my bus\n    var len = param &gt;&gt; 4 &amp; 0xF                       # Number of data bytes (0..8)\n    var extended = ident &gt;&gt; 31 &amp; 0x1                 # Extended identifier flag (0..1)\n    if extended == 1 return nil end                  # Remeha uses 11-bit Standard Frame Format\n    var id = ident &amp; 0x1fffffff\n    if id == 0x076                                   # Incremental counter from 0 to 255\n#      tasmota.log(f\"RMH: 0x{id:03x} Count {data1}\", 3)\n#    elif id == 0x080                                 # Heartbeat every second\n    elif id == 0x100                                 # Date and Time\n      var epoch = 441763200 + (data2 * 24 * 60 * 60) + (data1 / 1000)\n#      tasmota.log(f\"RMH: 0x{id:03x} Time {tasmota.time_str(epoch)}\", 3)\n    elif id == 0x1C1                                 # Many different data1/2\n      if data1 &amp; 0x00ffffff == 0x503f41              # Next time it's pressure\n        self.pressure_next = 1\n      elif self.pressure_next == 1\n        self.pressure = (data2 &amp; 0xff00)/2560.0      # This must be pressure\n        self.pressure_next = 0\n      end\n    elif id == 0x382\n      self.am024_power = data1 &amp; 0xff                # Relative power\n      self.setpoint = (data1 &amp; 0xffff00)/25600.0     # Setpoint\n#      tasmota.log(f\"RMH: 0x{id:03x} Busy {self.am024_power}%, Setpoint {self.setpoint}\", 3)\n    elif id == 0x282\n      self.flow_temp = (data1 &amp; 0xffff00)/25600.0\n#      tasmota.log(f\"RMH: 0x{id:03x} DHW temp {self.flow_temp}\", 3)\n    elif id == 0x481                                 # Status information\n      self.am012_status = data1 &amp; 0xff\n      self.am014_substatus = (data1 &amp; 0xff00)/256\n    else      \n      return\n    end\n    self.active = 1                                  # At least one valid decode\n  end\n\n  #----------------------------------------------------------------------------------------------\n  Add sensor value to teleperiod\n  ----------------------------------------------------------------------------------------------#\n  def json_append()\n    if !self.active return nil end                   # Exit if never decoded something\n    import string\n    var msg = string.format(\",\\\"Calenta\\\":{\\\"AM012\\\":%i,\\\"AM014\\\":%i,\\\"Pressure\\\":%.1f,\\\"Setpoint\\\":%.1f,\\\"Flow\\\":%.1f}\",\n                             self.am012_status, self.am014_substatus, self.pressure, self.setpoint, self.flow_temp)\n    tasmota.response_append(msg)\n  end\n\n  #----------------------------------------------------------------------------------------------\n  Perform action just after teleperiod (not used)\n  ----------------------------------------------------------------------------------------------#\n#  def after_teleperiod() \n  #----------------------------------------------------------------------------------------------\n  Perform action every second\n\n  As many datagrams can occur sending at teleperiod time takes too long\n  Also only send if changed to reduce TWAI wait time \n  ----------------------------------------------------------------------------------------------#\n  def every_second()\n    if self.dz_pressure != self.pressure\n      tasmota.cmd('_DzSend1 523,' .. self.pressure)   # Send pressure to Domoticz\n    end\n    self.dz_pressure = self.pressure\n\n    if self.dz_flow_temp != self.flow_temp\n      tasmota.cmd('_DzSend1 526,' .. self.flow_temp)  # Send flow temp to Domoticz\n    end\n    self.dz_flow_temp = self.flow_temp\n\n    if self.dz_am012_status != self.am012_status\n      tasmota.cmd('_DzSend1 536,' .. self.am012_status)  # Send status to Domoticz\n    end\n    self.dz_am012_status = self.am012_status\n\n    if self.dz_am014_substatus != self.am014_substatus\n      tasmota.cmd('_DzSend1 537,' .. self.am014_substatus)  # Send substatus to Domoticz\n    end\n    self.dz_am014_substatus = self.am014_substatus\n  end\n\n  #----------------------------------------------------------------------------------------------\n  Display sensor value in the web UI\n  ----------------------------------------------------------------------------------------------#\n  def web_sensor()\n    if !self.active return nil end                   # Exit if never decoded something\n    import string\n    var msg = string.format(\"{s}AM012/AM014 State{m}%i/%i{e}\"..\n                            \"{s}AM024 Relative Power{m}%i %%{e}\"..\n                            \"{s}Pressure{m}%.1f{e}\"..\n                            \"{s}Setpoint Temperature{m}%.1f{e}\"..\n                            \"{s}Flow Temperature{m}%.1f{e}\",\n                            self.am012_status, self.am014_substatus, self.am024_power, self.pressure, self.setpoint, self.flow_temp)\n    tasmota.web_send_decimal(msg)\n  end\nend\n\ntwai = twai_cls()\ntasmota.add_driver(twai)\n</code></pre> Save the file as <code>calenta.be</code> and add a line <code>load('calenta.be')</code> to file <code>preinit.be</code>. This will execute the file a restart and prepare the driver for 1Mbit/s and Listen Only Mode.</p>"},{"location":"TWAI/#result-of-monitoring-boiler-pressure-over-time","title":"Result of monitoring boiler pressure over time","text":""},{"location":"TX2x/","title":"TX20/TX23/WS2300-15 anemometer","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>:   For TX20 sensor <pre><code>#ifndef USE_TX20_WIND_SENSOR\n#define USE_TX20_WIND_SENSOR      // Add support for La Crosse TX20 anemometer (+2k6/0k8 code)\n#endif\n</code></pre> For TX23 sensor <pre><code>#ifndef USE_TX23_WIND_SENSOR\n#define USE_TX23_WIND_SENSOR      // Add support for La Crosse TX20 anemometer (+2k6/0k8 code)\n#endif\n</code></pre> For WS2300-15 sensor <pre><code>#ifndef USE_WS2300_WIND_SENSOR\n#define USE_WS2300_WIND_SENSOR    // Add support for Technoline WS2300-15 anemometer\n#endif\n</code></pre></p> <p>This setting  compiles Tasmota with sensor statistical values (needs the higher value size of code), which are useful for the wind sensor, since the measured values naturally change very quickly. The values generated in addition to the wind speed and wind direction are:</p> <ul> <li>Wind speed min/max</li> <li>Wind speed average (\u2205)</li> <li>Wind direction average (\u2205)</li> <li>Wind direction range (\u2220) and min/max</li> </ul> <p>The average (\u2205) values are continuously calculated values. The range (\u2220) and min/max values are held for the time TelePeriod and reset after MQTT SENSOR message has been output.</p> <p>If you do not want the statistical calculation having speed and direction value only, use</p> <pre><code>#ifndef USE_TX2X_WIND_SENSOR_NOSTATISTICS\n#define USE_TX2X_WIND_SENSOR_NOSTATISTICS\n#endif\n</code></pre> <p>in your <code>user_config_override.h</code>. This will save approx. 1k8 bytes of code.</p> <p></p> <p>The TX20 (retired) and TX23 sensor supplies the two measured values wind speed and wind direction.</p> <p>The TX23 sensor is still available under various brand names such as \"La Crosse\", \"Technoline\". Unfortunately, the TX20 (at least in Europe) is almost impossible to get. However, the two sensors differ only in the protocol used, but deliver the same measured values.</p>"},{"location":"TX2x/#configuration","title":"Configuration","text":""},{"location":"TX2x/#wiring","title":"Wiring","text":""},{"location":"TX2x/#tx20-ws2300-15","title":"TX20 / WS2300-15","text":"Pin Color Description ESP 1 Brown/Black TxD GPIOx 2 Red 3.3V 3.3V 3 Green DTR GND 4 Yellow GND GND"},{"location":"TX2x/#tx23","title":"TX23","text":"Pin Color Description ESP 1 Brown/Black TxD GPIOx 2 Red 3.3V 3.3V 3 Green - - 4 Yellow GND GND"},{"location":"TX2x/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign: GPIOx to <code>TX2x (104)</code></p> <p>The TX2 pin needs a pull-up resistor. The internal pull-up is activated for this so you can use any useful GPIO except GPIO15 and GPIO16 (GPIO15 is always pulled low, GPIO16 has a built-in pull-down resistor).  </p> <p>To be on the save side you can add an additional external 10k pull-up to TX2x GPIOx.</p> <p>After a reboot the driver will detect TX20/TX23/WS2300 automatically and display the wind data:</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <pre><code>{\n  \"Time\": \"2020-03-03T00:00:00+00:00\",\n  \"TX23\": {\n    \"Speed\": {\n      \"Act\": 14.8,\n      \"Avg\": 8.5,\n      \"Min\": 12.2,\n      \"Max\": 14.8\n    },\n    \"Dir\": {\n      \"Card\": \"WSW\",\n      \"Deg\": 247.5,\n      \"Avg\": 266.1,\n      \"AvgCard\": \"W\",\n      \"Min\": 247.5,\n      \"Max\": 247.5,\n      \"Range\": 0\n    }\n  },\n  \"SpeedUnit\": \"km/h\"\n}\n</code></pre>"},{"location":"TX2x/#commands","title":"Commands","text":"<p>The wind speed unit is set to km/h as default. You can change the unit using the command <code>SpeedUnit &lt;x&gt;</code> where &lt;x&gt; = <code>1\u20266</code>: - 1 = m/s (meter per second) - 2 = km/h (kilometer per hour) - 3 = kn (knots) - 4 = mph (miles per hour) - 5 = ft/s (foot per second) - 6 = yd/s (yard per second)</p> <p>The changed unit will appear in the webUI and via MQTT SENSOR messages.</p>"},{"location":"TasUI/","title":"TasUI","text":"<p>Warning</p> <p>Development of TasUI has stopped!!!</p> <p>TasUI is a zero-install device management interface web application for all your Tasmota devices.  It will discover your deployed devices and allow you to set up and configure every device from a single dashboard.  This initial version includes multiple views (Control, Health, Firmware, Wi-Fi, &amp; MQTT) to allow you to quickly assess the state of your devices. There is also a detailed view (e.g., SetOptions, Status, etc.) available. </p> <p>TasUI provides a syntax-aware command interface for every Tasmota command by category (e.g., Configuration, Timers, Sensors, Lights, etc.) as well as the \"familiar\" Console interface to enter commands directly. This is a beta version (i.e., we expect you to find some unexpected features). As these issues are fixed, it will not require you to reinstall any software to get these fixes. This also applies to new features as they are added to the app.</p> <p>Join us on Discord! </p>"},{"location":"TasUI/#docker","title":"Docker","text":"<p>For those who prefer to have everything installed locally, a Docker image for linux <code>amd64</code>, <code>arm32v7</code>, <code>arm64v8</code> and <code>i386</code> is available for download.</p> <pre><code>docker pull iotreboot/tasui:latest\ndocker run -p [PORT]:80 iotreboot/tasui:latest\n</code></pre>"},{"location":"TasUI/#home-assistant","title":"Home Assistant","text":"<p>The add-on can be installed on <code>amd64</code>, <code>arm32v7</code>, <code>arm64v8</code> and <code>i386</code> builds. Simply add the TasUI repository on your addons list: https://github.com/iotreboot/TasUI</p> <p>No configuration is required.</p> <p></p>"},{"location":"TasmoAdmin/","title":"TasmoAdmin","text":"<p>TasmoAdmin is an administrative Website for Devices flashed with Tasmota. You can find it here: TasmoAdmin GitHub. It supports running on Windows, Linux and as Docker container.</p>"},{"location":"TasmoAdmin/#features","title":"Features","text":"<ul> <li>Login protected</li> <li>Multi Update Process<ul> <li>Select devices to update</li> <li>Automatic Modus downloads latest firmware bin from Tasmota GitHub</li> </ul> </li> <li>Show device information</li> <li>Mobile Responsive (Bootstrap4)</li> <li>Config devices</li> <li>SelfUpdate function for TasmoAdmin (disabled for Docker)</li> <li>NightMode (Enable/Disable/Auto) in settings</li> <li>AutoScan to find Tasmota Devices</li> <li>Support for multiple sensors</li> <li>chat (beta)</li> </ul>"},{"location":"TasmoAdmin/#installation","title":"Installation","text":""},{"location":"TasmoAdmin/#docker","title":"Docker","text":"<p>TasmoAdmin is available as a Docker image on GitHub packages.</p> <p>This is a Linux Alpine  based image with Nginx and PHP7 installed. It supports multiple architectures, amd64 (i.e. Synology DSM), arm (i.e. Raspberry PI3) and  arm64 (i.e. Pine64). Check out the Guide for TasmoAdmin on Docker for setup instructions.</p> <p>This is the recommended way to get up and running.</p>"},{"location":"TasmoAdmin/#linux","title":"Linux","text":"<p>Running TasmoAdmin on a Linux/Unix hosts requires the following:</p> <ul> <li>A Webserver<ul> <li>apache2 recommended</li> <li>php7 recommended (works with php5 too)</li> <li>php-curl php-zip Modules installed</li> </ul> </li> </ul> <p>You need to install a web server with php-zip and php-curl modules installed. Also mod_rewrite must be enabled. I suggest to look in the Guide for Ubuntu Server 16.04 and try to adjust it to your server OS.</p>"},{"location":"TasmoAdmin/#example-images","title":"Example Images","text":""},{"location":"TasmoAdmin/#login-page","title":"Login Page","text":""},{"location":"TasmoAdmin/#start-page","title":"Start Page","text":""},{"location":"TasmoAdmin/#devices-page","title":"Devices Page","text":""},{"location":"TasmoAdmin/#devices-addedit-page","title":"Devices Add/Edit Page","text":""},{"location":"TasmoAdmin/#config-general-page","title":"Config General Page","text":""},{"location":"TasmoAdmin/#config-network-page","title":"Config Network Page","text":""},{"location":"TasmoAdmin/#update-devices-page","title":"Update Devices Page","text":""},{"location":"TasmoAdmin/#settings-page","title":"Settings Page","text":""},{"location":"TasmoAdmin/#mobile","title":"Mobile","text":""},{"location":"Tasmota-Application/","title":"Tasmota Application Files","text":"<p>Easily import any configuration or script using the <code>.tapp</code> file extension </p> <p>Any file with <code>.tapp</code> (Tasmota Application) extension will be considered as an uncompressed ZIP, and if it contains a sub-file <code>autoexec.be</code> it will be executed. In parallel <code>tasmota.wd</code> (working dir) contains the archive tapp prefix to easily load other assets from the same archive.</p> <p>Example</p> <p><code>heating.tapp</code> contains: <code>autoexec.be</code> and <code>html.json</code>. The sub-file <code>html.json</code> can be opened with <code>f = open(tasmota.wd + \"html.json\", \"r\")</code></p> <p>Berry allow imports from files inside a Tasmota App (.tapp file). Also enabled <code>sys</code> module.</p> <p>Here is the code you should add in your <code>autoexec.be</code> inside tapp file:</p> <pre><code>import sys\nvar wd = tasmota.wd\nif size(wd) sys.path().push(wd) end\n\n# [...] you can import files from within the archive\n\nif size(wd) sys.path().pop() end\n</code></pre>"},{"location":"Tasmota-Application/#tapps","title":"TAPP's","text":""},{"location":"Tasmota-Application/#lcdoled-anti-screen-burn","title":"LCD/OLED Anti Screen Burn","text":"<ul> <li>copy Antiburn.tapp to file system</li> <li>Either issue Tasmota command <code>Antiburn</code> or programmatically using <code>lv.antiburn()</code> in Berry</li> </ul> <p>The LVGL screen will change from black to red to green to blue to white each second for 30 seconds. The anti-burn cleaning can be cancelled by touching the screen or it will complete after 30 seconds. Once complete the previous screen will be reloaded.</p>"},{"location":"Tasmota-Application/#partition-management","title":"Partition Management","text":"<p>Partition Wizard</p> <p>Partition Manager</p> <p>To run either of these apps, simply upload the .tapp file to the filesystem and reboot the board.  After doing so, the app will appear on the consoles page in the GUI.</p> <p></p>"},{"location":"Tasmota-Application/#display-calibration","title":"Display Calibration","text":"<p>Tasmota Application useful for Touch Screen calibration (resistive touchscreens only). This application guides you through simple steps and generates automatically the required settings in <code>display.ini</code> (the ':M' line).</p> <ol> <li> <p>First download <code>DisplayCalibrate.tapp</code> application and upload it in the file system, and restart.</p> </li> <li> <p>Make sure you are in orientation <code>DisplayRotate 0</code></p> </li> <li> <p>In the console, type the command <code>DisplayCalibrate</code></p> </li> </ol> <p>You will see the following screens. Click on all 4 crosses near corners.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Note: measures are taken every 50 ms and are averaged, and requires at least 3 measures (150ms).</p> <p>If everything went well, you will see the following screen. After reboot, your touchscreen is ready and calibrate.</p> <p></p> <p>If the geometry is wrong, you will see the following screen and no change is done to <code>display.ini</code></p> <p></p>"},{"location":"Tasmota-Device-Manager/","title":"Tasmota Device Manager","text":"<p>Tasmota Device Manager or TDM is a GUI application written in Python for discovery and monitoring of Tasmota flashed devices.</p> <p></p>"},{"location":"Tasmota-Device-Manager/#features","title":"Features","text":"<ul> <li>clean, readable interface</li> <li>autodetection of devices following the default topic template for Tasmota (%prefix%/%topic%/) and for HomeAssistant Auto Discovery protocol (%topic%/%prefix%/)</li> <li>module and GPIO configuration</li> <li>rules editor</li> <li>devices with different syntax can be added manually</li> <li>clean retained MQTT topic messages</li> <li>toggleable active querying of telemetry</li> <li>passive monitoring of state and telemetry (currently supported sensors are listed in \"status8.json\")</li> <li>relay control via context menu on device list (all ON/OFF, or individual)</li> <li>MQTT console with payload preview (dbl-click an entry to display), sorting and filtering</li> <li>selectable detail columns in device list</li> <li>BSSID aliasing for larger deployments</li> </ul>"},{"location":"Tasmota-Device-Manager/#installation","title":"Installation","text":"<p>Python 3.6+ is required. Clone the repo or download zip and extract, install prerequisites and run tdm.py using Python binary.</p>"},{"location":"Tasmota-Device-Manager/#prerequisites","title":"Prerequisites","text":"<p>PyQt5: <pre>pip install PyQt5</pre></p> <p>paho-mqtt: <pre>pip install paho-mqtt</pre></p>"},{"location":"Tasmota-Extension/","title":"Tasmota Extension","text":"<p>An extensible way to load and unload extensions dynamically </p> <p>Tasmota Extension is a new option for all ESP32&lt;x&gt; variants. It provides an online \"Extension Store\", similar to App Stores, so you can install and uninstall extension at will. Once installed, each Extension can be started and stopped (hence freeing memory) without rebooting; or configured at auto-start at boot.</p> <p>Extensions includes features like:</p> <ul> <li>Partition Wizard</li> <li>Display Calibration for resistive touchscreens</li> <li>WebUI mirroring of Led Strips or LVGL/HASPmota</li> <li>enhanced display in tag bar (upper line in WebUI)</li> </ul>"},{"location":"Tasmota-Extension/#quickstart","title":"Quickstart","text":"<p>\"Extension Manager\" is in the \"Tools\" menu. When you first click on it, you see an empty list of installed extensions, followed by the list of extensions available in the online store:</p> <p></p> <p>Then click on \"Wifi Heap Sticker\" in the Online Store to show the details and actions:</p> <p></p> <p>Then click on \"Install+Run\" button, and confirm:</p> <p></p> <p>The page refreshes itself and shows the list of extensions:</p> <p></p> <p>You may go back to the main page to see the Ticker showing on the top left corner:</p> <p></p>"},{"location":"Tasmota-Extension/#how-it-works","title":"How it works","text":"<p>Tasmota Extension relies on the Berry scripting language and on Tasmota Application <code>.tapp</code> files. Each <code>.tapp</code> includes all the necessary resources for the extension. Once installed, extensions are copied in the hidden <code>/.extensions/</code> folder.</p> <p>By default, all extensions present in the <code>/.extensions/</code> folder are run at boot. You can switch off autorun when you rename the file with the <code>.tapp_</code> file suffix (add a trailing underscore); this is handled automatically via the WebUI.</p>"},{"location":"Tasmota-Extension/#creating-extensions-for-developers","title":"Creating Extensions (for developers)","text":"<p>The section below is intended for extension creators who want to package their code into a new extension and possibly publish them into the online store.</p> <p>Extension are regular <code>.tapp</code> files with some specificities:</p> <ul> <li>they contain a <code>manifest.json</code> file with mandatory fields</li> <li>they contain an <code>autoexec.be</code> file with specificities</li> <li>they must guarantee that all resources are freed when <code>unload()</code> is called (this is probably the most delicate step)</li> </ul>"},{"location":"Tasmota-Extension/#manifestjson","title":"<code>manifest.json</code>","text":"<p>Note: All version numbers are published as 32 bits integers in the format <code>'0xAABBCCDD'</code> where the human readable is <code>vA.B.C.D</code> with decimal numbers. For example:</p> <ul> <li><code>0x19090100</code> converts to <code>v25.9.1.0</code> - referred as the date version meaning it was released in 2025-Sep-1</li> <li><code>0x0E060001</code> converts to <code>v14.6.0.1</code> - refers as classical version like used in Tasmota firmware version</li> <li>you can choose whatever numbering scheme you want as long as the numbers increase when converted to signed 32 bit integers.</li> </ul> <p>Extensions must include a mandatory <code>manifest.json</code> file with the mandatory and optional fields:</p> Field details name mandatory the display name of the extension, keep it very short version mandatory the version of the extension using the 32-bit integer format (see above) description mandatory a longer description of what the extension is doing author optional name of the author and/or maintainer min_tasmota optional the minimum version of Tasmota required to run this extension; older Tasmota version will not be able to install it <p>Full example of <code>manifest.json</code>:</p> <pre><code>{\n  \"name\": \"Wifi Memory Sticker\",\n  \"version\": \"0x19090100\",\n  \"description\": \"Display top left sticker with Wifi strength and memory heap.\",\n  \"author\": \"Stephan Hadinger\",\n  \"min_tasmota\": \"0x0F000100\"\n}\n</code></pre>"},{"location":"Tasmota-Extension/#autoexecbe","title":"<code>autoexec.be</code>","text":"<p>Extensions must follow some very strict rules for <code>autoexec.be</code> that must have the following structure:</p> <pre><code>do\n  import introspect\n  var my_ext = introspect.module('&lt;main_file&gt;', true)     # load module but don't cache\n  tasmota.add_extension(my_ext)\nend\n</code></pre> <p>Here are the details:</p> <ul> <li>the whole statement is enclosed in <code>do ... end</code> to avoid having <code>my_ext</code> polluting the global namespace. <code>do ... end</code> creates a local scope.</li> <li><code>introspect.module('&lt;main_file&gt;', true)</code>: this is equivalent to <code>import &lt;main_file&gt;</code> except it does not keep the loaded module into cache, which allows to eventually unload the entire code</li> <li><code>tasmota.add_extension(my_ext)</code>: registers the Berry driver as an extension. Tasmota will call the <code>unload()</code> method of the driver to remove it from memory</li> </ul> <p>Example for Leds Panel:</p> <pre><code>do                          # embed in `do` so we don't add anything to global namespace\n  import introspect\n  var wifi_memory_sticker = introspect.module('wifi_memory_sticker', true)     # load module 'wifi_memory_sticker.be' but don't cache\n  tasmota.add_extension(wifi_memory_sticker)\nend\n</code></pre>"},{"location":"Tasmota-Extension/#berry-driver","title":"Berry driver","text":"<p>A Tasmota extension is in essence a Berry driver with an <code>unload()</code> method.</p> <p>The tricky part is that when Tasmota calls <code>unload()</code> on the driver, it must ensure the following:</p> <ul> <li>unregister itself with <code>tasmota.remove_driver(self)</code> - this is a safeguard although the driver will be deregistered anyways</li> <li>free any resource allocated, for example close any file, port or network connection</li> <li>clear any global variable referring to code or data of the driver. Optionally deregister any global variable with <code>global.undef()</code></li> </ul> <p>You need to deeply test that all references to code and data are cleared. Sometimes reference can hide in hard to find places. The process is very simple: run <code>tasmota.gc()</code> without the extension, run <code>tasmota.gc()</code> after running the extension, finally unload the extension and run <code>tasmota.gc()</code> again; if you don't fall back to a similar value then you need to investigate.</p> <p>Here is an example of a minimal Tasmota Extension:</p> <pre><code>#######################################################################\n# Minimal Tasmota Extension\n\nclass Minimal_Tasmota_Extension\n\n  # init - constructor\n  def init()\n    tasmota.add_driver(self)\n  end\n\n  # called when the extension is unloaded from memory\n  def unload()\n    tasmota.remove_driver(self)\n  end\n\n  # [...] implement the logic here\nend\n\nreturn Minimal_Tasmota_Extension()    # return an instance of the driver\n</code></pre>"},{"location":"Tasmota-Extension/#publishing-extensions-to-this-repository","title":"Publishing Extensions to this Repository","text":"<p>To publish a new extension to this repository and make it available in the online store, follow these steps:</p>"},{"location":"Tasmota-Extension/#1-prepare-your-extension-files","title":"1. Prepare Your Extension Files","text":"<p>Create a new folder in the <code>raw/</code> directory with your extension name (use underscores instead of spaces). Your extension must include these required files:</p> <ul> <li><code>manifest.json</code> - Extension metadata</li> <li><code>autoexec.be</code> - Extension loader script  </li> <li><code>&lt;your_extension&gt;.be</code> - Main extension code (Berry script)</li> </ul>"},{"location":"Tasmota-Extension/#2-create-the-manifestjson","title":"2. Create the manifest.json","text":"<p>Your <code>manifest.json</code> must include these mandatory fields:</p> <pre><code>{\n  \"name\": \"Your Extension Name\",\n  \"version\": \"0x19090100\",\n  \"description\": \"Brief description of what your extension does\",\n  \"author\": \"Your Name\",\n  \"min_tasmota\": \"0x0E060001\"\n}\n</code></pre> <p>Version Format: Use 32-bit integer format <code>0xAABBCCDD</code> where human readable is <code>vA.B.C.D</code>:</p> <ul> <li><code>0x19090100</code> = v25.9.1.0 (date-based: 2025-Sep-1)</li> <li><code>0x0E060001</code> = v14.6.0.1 (semantic versioning)</li> </ul>"},{"location":"Tasmota-Extension/#3-create-the-autoexecbe","title":"3. Create the autoexec.be","text":"<p>Your <code>autoexec.be</code> must follow this exact structure:</p> <pre><code>do\n  import introspect\n  var your_extension = introspect.module('your_extension_file', true)\n  tasmota.add_extension(your_extension)\nend\n</code></pre> <p>Replace <code>your_extension_file</code> with the name of your main Berry script (without <code>.be</code> extension).</p>"},{"location":"Tasmota-Extension/#4-directory-structure-example","title":"4. Directory Structure Example","text":"<pre><code>raw/\n\u2514\u2500\u2500 Your_Extension_Name/\n    \u251c\u2500\u2500 manifest.json\n    \u251c\u2500\u2500 autoexec.be\n    \u2514\u2500\u2500 your_extension.be\n</code></pre>"},{"location":"Tasmota-Extension/#5-build-and-test","title":"5. Build and Test","text":"<p>The repository includes an automated build system:</p> <ol> <li>Local Testing: Run <code>python3 gen.py</code> to build your extension into a <code>.tapp</code> file</li> <li>Validation: The script will validate your <code>manifest.json</code> and check for required files</li> <li>Output: Generated <code>.tapp</code> files appear in <code>extensions/tapp/</code> directory</li> </ol>"},{"location":"Tasmota-Extension/#6-submit-your-extension","title":"6. Submit Your Extension","text":"<ol> <li>Fork this repository</li> <li>Add your extension folder to the <code>raw/</code> directory</li> <li>Test locally with <code>python3 gen.py</code></li> <li>Copy manually the <code>.tapp</code> file in the <code>/.extensions/</code> directory on your Tasmota device (click on \"Show hidden files\" to show the hidden directory)</li> <li> <p>Create a pull request with:</p> </li> <li> <p>Clear description of your extension</p> </li> <li>Screenshots if applicable</li> <li>Testing notes</li> </ol>"},{"location":"Tasmota-Extension/#7-automated-processing","title":"7. Automated Processing","text":"<p>Once merged, GitHub Actions will automatically:</p> <ul> <li>Build your extension into a <code>.tapp</code> file</li> <li>Update the <code>extensions.jsonl</code> manifest</li> <li>Make your extension available in the online store</li> </ul>"},{"location":"Tasmota-IR/","title":"IR Communication","text":"<p>The default Tasmota firmware variants include support for IR send/receive for a limited set of protocols (see IR Remote commands).</p> <p>Tasmota uses the IRremoteESP8266 library that supports numerous protocols. Each protocol consumes some memory, especially air conditioner protocols (up to 81k of flash size). Also, every protocol included increases the time to decode the IR signal. </p> <p>There are two additional Tasmota firmware variants that provide almost all IRremoteESP8266 protocols. This requires disabling some other features to keep code size manageable.</p> <ul> <li><code>tasmota-ir</code> is pre-packaged for IR bridge devices such as Automate Things IRBR, Eachen or YTF. Choose <code>tasmota-ir</code> if you are using an IR blaster. </li> <li><code>tasmota-ircustom</code> is used if you want to customize your features (additional sensors, language, etc.). See compile your own firmware.</li> </ul> <p>You can flash the binary or upgrade your existing one.</p> <p>To test that you have the correct firmware on your device  issue the following command in the web UI Console: </p> <p><code>IRHVAC {\"Vendor\":\"xx\"}</code></p> <p>The output should be a list of the supported protocols/vendors. For example: <pre><code>RESULT = {\"IRSend\":\"Wrong Protocol (RC5|RC6|NEC|SONY|PANASONIC|JVC|SAMSUNG|WHYNTER|AIWA_RC_T501|MITSUBISHI|DISH|SHARP|DENON|SHERWOOD|RCMM|SANYO_LC7461|RC5X|NEC_LIKE|NIKAI|MAGIQUEST|LASERTAG|CARRIER_AC|MITSUBISHI2|HITACHI_AC2|GICABLE|LUTRON|PIONEER|SAMSUNG36|LEGOPF|INAX|SONY_38K|EPSON|SYMPHONY|HITACHI_AC3|DOSHISHA|MULTIBRACKETS|CARRIER_AC40|MIDEA24|ZEPEAL|METZ|ELITESCREENS|MILESTAG2|XMP|BOSE|ARRIS|COOLIX48|KELON168|DAIKIN200|CARRIER_AC128|TOTO|CLIMABUTLER|TCL96AC|SANYO_AC152|DAIKIN312|GORENJE|WOWWEE|CARRIER_AC84\n</code></pre></p> <p>See Codes for IR Remotes.</p>"},{"location":"Tasmota-IR/#sending-ir-commands","title":"Sending IR Commands","text":"<p>Send an IR remote control code as a decimal or hexadecimal string in a JSON payload. In order to send IR data, you must configure one of the free device GPIO as <code>IRSend (8)</code>. Neither GPIO01 nor GPIO03 can be used. </p> Command Parameters IRSend<code>&lt;x&gt;</code> <code>&lt;x&gt;</code> [optional] = number of times the IR message is sent. If not specified or <code>0..1</code>, the message is sent only once (i.e., not repeated) (default)<code>&gt;1</code> = emulate a long-press on the remote control, sending the message <code>&lt;x&gt;</code> times, or sending a repeat message for specific protocols (like NEC)<code>{\"Protocol\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Data\":&lt;value&gt;,\"DataLSB\":&lt;value&gt;,\"Repeat\":&lt;value&gt;}</code><code>\"Protocol\"</code> or <code>\"Vendor\"</code> (select one of the following): <code>RC5, RC6, NEC, SONY, PANASONIC, JVC, SAMSUNG, WHYNTER, AIWA_RC_T501, MITSUBISHI, DISH, SHARP, DENON, SHERWOOD, RCMM, SANYO_LC7461, RC5X, NEC_LIKE, NIKAI, MAGIQUEST, LASERTAG, CARRIER_AC, MITSUBISHI2, HITACHI_AC2, GICABLE, LUTRON, PIONEER, SAMSUNG36, LEGOPF, INAX, SONY_38K, EPSON, SYMPHONY, HITACHI_AC3, DOSHISHA, MULTIBRACKETS, CARRIER_AC40, MIDEA24, ZEPEAL, METZ, ELITESCREENS, MILESTAG2, XMP, BOSE, ARRIS, COOLIX48, KELON168, DAIKIN200, CARRIER_AC128, TOTO, CLIMABUTLER, TCL96AC, SANYO_AC152, DAIKIN312, GORENJE, WOWWEE, CARRIER_AC84</code><code>\"Bits\":1..64</code> = required number of data bits\u00a0\u00a0\u00a0\u00a0for PANASONIC protocol this parameter is the the address, not the number of bits<code>\"Data\":0x1..0xFFFFFFFFFFFFFFFF</code> = data frame as 64 bit hexadecimal.\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x8166817E}</code>Or<code>\"DataLSB\":0x1..0xFFFFFFFFFFFFFFFF</code> = data frame as 64 bit hexadecimal with LSB (each byte with bits reversed).\u00a0\u00a0\u00a0\u00a0e.g., <code>IRSend {\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":0x8166817E}</code><code>DataLSB</code> comes handy with LSB-first (Least Significant Bit First) protocols like NEC, and makes decoding/encoding easier.<code>\"Repeat\":0..&lt;x&gt;</code> if <code>0</code> send the frame once, if <code>&gt;0</code> simulates a long press; Note: <code>\"Repeat\":1</code> sends the message twice.<code>\"Channel\":x</code> [optional] to specifiy which channel to use. You can use up to 16 channels and they are defined when you define the GPIO.Alternatively, you can send IR remote control codes using RAW command encoding. See also <code>SetOption29</code>  - Set IR received data format<code>SetOption38</code>  - Set IR received protocol sensitivity<code>SetOption58</code> - IR Raw data in JSON payload"},{"location":"Tasmota-IR/#sending-irhvac-commands","title":"Sending IRHVAC Commands","text":"Command Parameters IRHVAC Send HVAC IR remote control code as JSON payload<code>IRHVAC {\"Vendor\":\"Mitsubishi_Heavy_152\", \"Power\":\"On\",\"Mode\":\"Hot\",\"FanSpeed\":3,\"Temp\":22.5}</code><code>\"Protocol\"</code> or <code>\"Vendor\"</code> (select one of the following): <code>LG, COOLIX, DAIKIN, KELVINATOR, MITSUBISHI_AC, GREE, ARGO, TROTEC, TOSHIBA_AC, FUJITSU_AC, MIDEA, HAIER_AC, HITACHI_AC, HITACHI_AC1, HAIER_AC_YRW02, WHIRLPOOL_AC, SAMSUNG_AC, ELECTRA_AC, PANASONIC_AC, LG2, DAIKIN2, VESTEL_AC, TECO, TCL112AC, MITSUBISHI_HEAVY_88, MITSUBISHI_HEAVY_152, DAIKIN216, SHARP_AC, GOODWEATHER, DAIKIN160, NEOCLIMA, DAIKIN176, DAIKIN128, AMCOR, DAIKIN152, MITSUBISHI136, MITSUBISHI112, HITACHI_AC424, DAIKIN64, AIRWELL, DELONGHI_AC, CARRIER_AC64, HITACHI_AC344, CORONA_AC, SANYO_AC, VOLTAS, TRANSCOLD, TECHNIBEL_AC, MIRAGE, PANASONIC_AC32, ECOCLIM, TRUMA, HAIER_AC176, TEKNOPOINT, KELON, TROTEC_3550, SANYO_AC88, RHOSS, AIRTON, HITACHI_AC264, HITACHI_AC296, HAIER_AC160, BOSCH144, YORK</code><code>\"Model\":</code> Some HVAC have variants in protocols, this field allows to specify the variant, see detailed list.<ul><li><code>Fujitsu_AC</code>: <code>ARRAH2E|ARDB1</code></li><li><code>Panasonic_AC</code>: <code>LKE|NKE|DKE|JKE|CKP|RKR</code></li><li><code>Whirlpool_AC</code>: <code>DG11J13A|DG11J104|DG11J1-04|DG11J191</code></li></ul><code>\"Power\"</code>:<ul><li><code>On, Yes, True, 1</code></li><li><code>Off, No, False, 0</code></li></ul><code>\"Mode\"</code>:<ul><li><code>Off, Stop</code></li><li><code>Auto, Automatic</code></li><li><code>Cool, Cooling</code></li><li><code>Heat, Heating</code></li><li><code>Dry, Drying, Dehumidify</code></li><li><code>Fan, Fanonly, Fan_Only</code></li></ul><code>\"FanSpeed\"</code>:<ul><li><code>Auto, Automatic</code></li><li><code>Min, Minimum, Lowest, 1</code></li><li><code>Low, 2</code></li><li><code>Med, Medium, Mid, 3</code></li><li><code>High, Hi, 4</code></li><li><code>Max, Maximum, Highest, 5</code></li></ul><code>\"SwingV\"</code>: vertical swing of Fan<ul><li><code>Auto, Automatic, On, Swing</code></li><li><code>Off, Stop</code></li><li><code>Min, Minimum, Lowest, Bottom, Down</code></li><li><code>Low</code></li><li><code>Mid, Middle, Med, Medium, Centre, Center</code></li><li><code>High, Hi</code></li><li><code>Highest, Max, Maximum, Top, Up</code></li></ul><code>\"SwingH\"</code>: horizontal swing of Fan<ul><li><code>Auto, Automatic, On, Swing</code></li><li><code>Off, Stop</code></li><li><code>LeftMax, Left Max, MaxLeft, Max Left, FarLeft, Far Left</code></li><li><code>Left</code></li><li><code>Mid, Middle, Med, Medium, Centre, Center</code></li><li><code>Right</code></li><li><code>RightMax, Right Max, MaxRight, Max Right, FarRight, Far Right</code></li><li><code>Wide</code></li></ul><code>\"Celsius\"</code>: temperature is in Celsius (<code>\"On\"</code>) or Fahrenheit (<code>\"Off\"</code>)<code>\"Temp\"</code>: Temperature, can be float if supported by protocol<code>\"Quiet\"</code>: Quiet mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Turbo\"</code>: Turbo mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Econo\"</code>: Econo mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Light\"</code>: Light (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Filter\"</code>: Filter active (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Clean\"</code>: Clean mode (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Beep\"</code>: Beep active (<code>\"On\"</code> / <code>\"Off\"</code>)<code>\"Sleep\"</code>: Timer in seconds<code>\"StateMode\"</code>:<ul><li><code>SendOnly</code> (default)</li><li><code>StoreOnly</code></li><li><code>SendStore</code></li></ul>"},{"location":"Tasmota-IR/#controlling-acs-with-toggle-fields","title":"Controlling ACs with toggle fields","text":"<p>Some ACs such as Airwell, Whirlpool and others use a differential IR protocol for some properties. If \"power\" is a toggle property, then value of '1' in the protocol will mean \"turn off\" if the AC is currently \"on\" and it will mean \"turn on\" if the AC is currently \"off\". This could also be the case for other properties such as \"light\", \"swing\", etc. Since Tasmota and IRRemote8266 send and receive absolute states (i.e. the HVAC JSON object has a field called 'Power' not 'PowerToggle'), some functionality was added to keep track of the predicted state of the AC. This way, if the predicted state is in-sync with the actual state, the device can transmit a correct IR packet to transition the AC from the previous state to the desired state. This logic is controlled by the <code>StateMode</code> HVAC property. If your AC IR protocol sends absolute values you can ignore this property. If your AC has a differential protocol Tasmota will be able to control the AC assuming the Tasmota IR device has at most one differential AC in IR range. If you would like to also control your AC with the physical remote your Tamsota IR device will need to have an IR receiver so that it can sync with the actual state.</p> <p>If at some point the state in Tasmota and the actual state get out of sync, you can specify <code>StateMode=StoreOnly</code> to update Tasmota with the actual state. This will update state but not send an IR command.</p> <p>Normally when receiving an IR command via the IR receiver the command will be processed and the state will be updated. As a result it is not needed to store state when sending as it will cause duplication and the toggle will happen twice. The most common operation mode, and default, therefore is <code>StateMode=SendOnly</code>.</p> <p>If your Tasmota device does not have an IR receiver you can still control a differential AC with it by specifying <code>StateMode=SendStore</code> but you will not be able to use a physical remote without loosing sync between the actual and predicted states.</p>"},{"location":"Tasmota-IR/#receiving-ir-commands","title":"Receiving IR Commands","text":"<p>If you have an IR receiver, a message will be logged each time an IR message is seen. IR driver will try to decode the message against all supported protocols. If unrecognized, the <code>\"Protocol\":\"UNKNOWN\"</code> will be shown. In this case, the <code>\"Data\"</code> field contains a hash of the received message. The hash can't be used to send the a message, but the same hash will be produced by the same message.  </p> <p>An inexpensive IR sensor such as a TSOP1838 can be connected to a device running Tasmota. Configure a free device GPIO as 'IRrecv (51)'. When Tasmota receives an IR message, the data portion of the payload has the same format as the <code>IRsend</code> parameter.</p> <pre><code>{\"IrReceived\":{\"Protocol\":\"&lt;value&gt;\",\"Bits\":&lt;value&gt;,\"Data\":&lt;value&gt;}}\n</code></pre> <p>This JSON payload data can be used in a rule such as:</p> <pre><code>ON IrReceived#Data=&lt;value&gt; DO &lt;command&gt; ENDON\n</code></pre> <p>If the data is received on an unknown protocol use <code>SetOption58 1</code>. See here.</p> <p>Examples: Pioneer Vol+ <code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55A50AFA55A50AF\",\"DataLSB\":\"0xA55A0AF5A55A0AF5\",\"Repeat\":0}}</code></p> <p>Pioneer Vol- <code>tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"PIONEER\",\"Bits\":64,\"Data\":\"0xA55AD02FA55AD02F\",\"DataLSB\":\"0xA55A0BF4A55A0BF4\",\"Repeat\":0}}</code></p> <p>Toshiba (NEC): Channel 1 <code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x02FD807F\",\"DataLSB\":\"0x40BF01FE\",\"Repeat\":0}}</code></p> <p>Toshiba (NEC): Channel 2 <code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x02FD40BF\",\"DataLSB\":\"0x40BF02FD\",\"Repeat\":0}}</code></p> <p>Toshiba (NEC): Channel 3 <code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"NEC\",\"Bits\":32,\"Data\":\"0x02FDC03F\",\"DataLSB\":\"0x40BF03FC\",\"Repeat\":0}}</code></p> <p>As you can see above, <code>\"DataLSB\"</code> are easier to decode than <code>\"Data\"</code>. The third byte contains the command, and the fourth byte is the third with all bits reversed.</p> <p>Example of HVAC message: <code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"MITSUBISHI_HEAVY_152\",\"Bits\":152,\"Data\":\"0xAD513CE51A08F705FA02FDC03F08F700FF807F\",\"Repeat\":0,\"IRHVAC\":{\"Vendor\":\"MITSUBISHI_HEAVY_152\",\"Model\":-1,\"Power\":\"on\",\"Mode\":\"auto\",\"Celsius\":\"on\",\"Temp\":22,\"FanSpeed\":\"medium\",\"SwingV\":\"off\",\"SwingH\":\"off\",\"Quiet\":\"off\",\"Turbo\":\"off\",\"Econo\":\"off\",\"Light\":\"off\",\"Filter\":\"off\",\"Clean\":\"off\",\"Beep\":\"off\",\"Sleep\":-1}}}</code></p> <p><code>MQT: tele/tasmota/IR1/RESULT = {\"IrReceived\":{\"Protocol\":\"COOLIX\",\"Bits\":24,\"Data\":\"0xB25F78\",\"DataLSB\":\"0x4DFA1E\",\"Repeat\":0,\"IRHVAC\":{\"Vendor\":\"COOLIX\",\"Model\":-1,\"Power\":\"on\",\"Mode\":\"auto\",\"Celsius\":\"on\",\"Temp\":22,\"FanSpeed\":\"medium\",\"SwingV\":\"off\",\"SwingH\":\"off\",\"Quiet\":\"off\",\"Turbo\":\"off\",\"Econo\":\"off\",\"Light\":\"on\",\"Filter\":\"off\",\"Clean\":\"on\",\"Beep\":\"off\",\"Sleep\":-1}}}</code></p> <p><code>RSL: RESULT = {\"Time\":\"2019-09-09T21:52:35\",\"IrReceived\":{\"Protocol\":\"PANASONIC_AC\",\"Bits\":216,\"Data\":\"0x0220E004000000060220E00400032C805F06000EE0000081000089\",\"Repeat\":0,\"IRHVAC\":{\"Vendor\":\"PANASONIC_AC\",\"Model\":2,\"Power\":\"on\",\"Mode\":\"auto\",\"Celsius\":\"on\",\"Temp\":22,\"FanSpeed\":\"medium\",\"SwingV\":\"auto\",\"SwingH\":\"middle\",\"Quiet\":\"off\",\"Turbo\":\"off\",\"Econo\":\"off\",\"Light\":\"off\",\"Filter\":\"off\",\"Clean\":\"off\",\"Beep\":\"off\",\"Sleep\":-1}}}</code></p>"},{"location":"TasmotaClient/","title":"Arduino MCU","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_TASMOTA_CLIENT\n#define USE_TASMOTA_CLIENT    // Enable the driver\n#endif\n\n#ifndef USE_TASMOTA_CLIENT_FLASH_SPEED\n#define USE_TASMOTA_CLIENT_FLASH_SPEED 57600    // Configure the baud rate of the bootloader\n#endif\n\n#ifndef USE_TASMOTA_CLIENT_SERIAL_SPEED 57600  \n#define USE_TASMOTA_CLIENT_SERIAL_SPEED 57600    // Configure the baud rate at which the client microcontroller will be interfacing to Tasmota\n#endif\n</code></pre></p> <p>It is possible to amend your existing Arduino Uno/Mini/Nano project to interface with a Tasmota powered ESP8266/ESP8285 generic development boards such as the Wemos D1 or NodeMCU branded hardware boards.</p> <p>The creation of a client driver interface implemented since Tasmota 7.0.0.2 enables this possibility.</p> <p>Please note that the <code>USE_TASMOTA_CLIENT_FLASH_SPEED</code> will depend on the variant of Arduino Uno/Mini/Nano board you are using - The general observation is that the 3.3V devices usually run at 57600 whereas the 5V devices usually run on 115200 but this is provided for guidance only as it has been found that some boards will not necessarily adhere to this. The main driving factor behind the baud rate is the crystal oscillator on the board which is usually 8Mhz for 3.3V variants and 16Mhz for 5V variants - hence 57600 being 1/2 of 115200.</p> <p>It should also be noted that this option is only really applicable if you're actually using an Arduino UNO/Mini/Nano as a client device and you want to be able to update the firmware on the Arduino OTA via the Tasmota Web UI. </p> <p>If you are using another type of microcontroller, obviously the OTA update functionality will not work (for now, until support is added for other microcontrollers). But if you are able to program the device manually there is no reason why you cannot use any microcontroller or development board as a client to your Tasmota powered ESP8266/8285 hardware.</p> <p>Once you have compiled your own variant with the correct settings and flashed the self-compiled binary to your Tasmota device it is time to make the necessary configuration within Tasmota.</p>"},{"location":"TasmotaClient/#configuring-tasmota-to-use-the-tasmotaclient-functionality","title":"Configuring Tasmota to use the TasmotaClient functionality","text":"<p>The communication interface between Tasmota and your client micro-controller will be over serial communication. To make this possible you will need to configure two of the GPIO pins to <code>Client TX</code> and <code>Client RX</code> respectively. In addition to this you also need to define the GPIO which will be used to pull the reset pin of your client microcontroller down to GND or up to 3.3V, so either <code>Client RST</code> for normal reset behaviour (active low) or <code>Client RSTi</code> for inverted reset behaviour (active high)</p> <p></p> <p>As mentioned above it is possible to connect any microcontroller of your choice but for the purpose of this article, only the implementation of an Arduino Pro Mini (3.3V) will be covered.</p>"},{"location":"TasmotaClient/#getting-things-wired-up","title":"Getting things wired up","text":"<p>With Tasmota GPIO configuration provided above you may now proceed to make the necessary electrical connections between the ESP8266/ESP8285 and your client device, for example:</p> ESP Arduino Pro Mini (3.3V) VCC VCC GND GND D2 (GPIO4) RX (0) D1 (GPIO5) TX (1) D4 (GPIO2) Reset (RST) <p>So to visualize the above:</p> <p></p> <p>Please verify your specific board's pin naming as they are not always exactly the same depending on where they came from!</p>"},{"location":"TasmotaClient/#compiling-a-test-sketch-for-the-client","title":"Compiling a test sketch for the client","text":"<p>The TasmotaClient driver requires your client to operate within specific parameters allowed by the driver itself so head over to the TasmotaClient Library and install the library in your local Arduino development environment.</p> <p>Once installed you should be able to access the examples from the menu system:</p> <p></p> <p>Make sure you have the correct board and speed selected:</p> <p></p> <p>Now that everything is set, it's time to export the compiled binary by selecting it from the Arduino menu:</p> <p></p> <p>Once completed head over to the known folder you chose in previous steps and locate the <code>.hex</code> file which should be in the same folder as where your sketch was originally saved to.</p> <p>You will most likely see a file listing like this:</p> <p></p> <p>You are interested in <code>Blink.ino.eightanaloginputs.hex</code> and can ignore the one which has <code>bootloader</code> as part of the file name since the Arduino Pro Mini already has the bootloader flashed. Take note of the location and name of this file as you will need it in the next step to upload the compiled file to your client device.</p>"},{"location":"TasmotaClient/#uploading-a-new-hex-file-to-your-client-device","title":"Uploading a new hex file to your client device","text":"<p>If you are using an Arduino Pro Mini as is the case in this example you would have created a <code>.hex</code> file in the previous step. This file can be flashed directly to the Arduino Pro Mini via the Tasmota Web UI.</p> <p>Navigate to the Firmware Upgrade page where you would normally upload a new binary file to upgrade Tasmota. The same method is used to upload a <code>HEX</code> file to the client device. Tasmota will automatically decide where it will flash the upload based on whether you're uploading a <code>.bin</code> file or a <code>.hex</code> file.</p> <p></p> <p>Tasmota will prompt you for the firmware file you wish to upload - You need to navigate to the previously known location folder you chose in earlier steps and select the <code>.hex</code> file previously identified:</p> <p></p> <p>After selecting the hex file you may proceed to click the Start Upgrade button:</p> <p></p> <p>The <code>hex</code> file will upload to Tasmota and Tasmota will flash the new client firmware onto the Arduino Pro Mini and present you with the following web page:</p> <p></p> <p>After the device completes a restart you should now have an Arduino Pro Mini running as a client where the blink is controlled from Tasmota's internal one-second callback.</p>"},{"location":"Telegram/","title":"Telegram","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_TELEGRAM \n#define USE_TELEGRAM                 // Support for Telegram protocol (+49k code, +7.0k mem and +4.8k additional during connection handshake)\n#endif\n\n#ifndef USE_TELEGRAM_FINGERPRINT\n#define USE_TELEGRAM_FINGERPRINT \"\\x4E\\x7F\\xF5\\x6D\\x1E\\x29\\x40\\x58\\xAB\\x84\\xDE\\x63\\x69\\x7B\\xCD\\xDF\\x44\\x2E\\xD2\\xF6\" // Telegram api.telegram.org TLS public key fingerpring\n#endif\n</code></pre></p> <p>With this feature you can control your device from Telegram using Tasmota commands. You can also send messages from Tasmota to Telegram.</p> <p>You'll need to configure a Telegram Bot using it's BotFather. This will provide the <code>API token</code> needed to communicate between Telegram and your device.</p>"},{"location":"Telegram/#commands","title":"Commands","text":"<ul> <li><code>TmFingerprint 1</code>: use default fingerprint 4E 7F F5 6D 1E 29 40 58 AB 84 DE 63 69 7B CD DF 44 2E D2 F6 as defined by USE_TELEGRAM_FINGERPRINT</li> <li><code>TmFingerprint &lt;fp&gt;</code>: set fingerprint</li> <li><code>TmToken &lt;API token&gt;</code>: add your BotFather created bot API token (default none)</li> <li><code>TmChatId &lt;chat_id&gt;</code>: add your BotFather created bot chat id (default none)</li> <li><code>TmPoll &lt;seconds&gt;</code>: Telegram receive poll time (default 10 seconds)</li> <li><code>TmState 0</code>: disable telegram sending (default)</li> <li><code>TmState 1</code>: enable telegram sending (needs valid TmChatId)</li> <li><code>TmState 2</code>: disable telegram listener (default)</li> <li><code>TmState 3</code>: enable telegram listener</li> <li><code>TmState 4</code>: disable telegram response echo (default)</li> <li><code>TmState 5</code>: enable telegram response echo</li> <li><code>TmState 6</code>: enable telegram auto fingerprint fix (default)</li> <li><code>TmState 7</code>: disable telegram auto fingerprint fix but present new fingerprint to user</li> <li><code>TmSend &lt;data&gt;</code>: if telegram sending is enabled AND a chat id is present then send data</li> </ul>"},{"location":"Telegram/#usage","title":"Usage","text":"<p>Once you have the Telegram bot configured and Telegram compiled in your binary it's time to try it out.</p>"},{"location":"Telegram/#receive-data-in-your-telegram-app","title":"Receive data in your Telegram App","text":"<p>Perform the following commands in your Tasmota console:</p> <pre><code>TmToken &lt;your API token as received from the BotFather&gt;\nTmState 3\n</code></pre> <p>Now go over to your Telegram APP and type <code>Status</code>. Within ten seconds, depending on the <code>TmPoll</code> value, you'll receive a response in your App and in the Tasmota console.</p>"},{"location":"Telegram/#send-a-message-from-tasmota","title":"Send a message from Tasmota","text":"<p>Before you can send a message to Telegram you'll need a <code>chat_id</code>. This can be found in the received response from the command above. To see it enable logging level 4 (<code>seriallog 4</code> or <code>weblog 4</code>) and perform the same command <code>Status</code> in your Telegram APP. You should receive a message like:</p> <pre><code>18:17:36.117-016 TGM: Response '{\"ok\":true,\"result\":[{\"update_id\":14354552,\n\"message\":{\"message_id\":379,\"from\":{\"id\":101234293,\"is_bot\":false,\"first_name\":\"Theo\",\"last_name\":\"Arends\",\"username\":\"user\",\"language_code\":\"nl\"},\"chat\":{\"id\":101234293,\"first_name\":\"Theo\",\"last_name\":\"Arends\",\"username\":\"user\",\"type\":\"private\"},\"date\":1716913055,\"text\":\"Status\"}}]}'\n</code></pre> <p>Notice the provided <code>\"chat\":{\"id\":101234293</code>.</p> <p>Perform the following commands in your Tasmota console:</p> <pre><code>TmChatId 101234293\nTmState 1\nTmSend Greetings from Tasmota\n</code></pre> <p>In the Telegram APP the message \"Greetings from Tasmota\" should be shown.</p>"},{"location":"Telegram/#to-continue","title":"To continue","text":"<p>The <code>TmState</code>, <code>TmToken</code> and <code>TmChatId</code> commands need to be performed only once. They will be remembered after a restart.</p>"},{"location":"Telegram/#background-information","title":"Background information","text":"<p>Communication between Tasmota and Telegram is using HTTPS. It needs a so called <code>Fingerprint</code> for this to work. The initial fingerprint is provided by you as <code>#define USE_TELEGRAM_FINGERPRINT</code>. Over time Telegram might change this fingerprint. The default Tasmota configuration will try to adopt the new Telegram fingerprint and continue to work without your interaction. </p> <p>If for any reason this <code>auto-fingerprint</code> doesn't work you can disable it with command <code>TmState 7</code> and enter the correct fingerprint using command <code>TmFingerprint 4E 7F F5 6D 1E 29 40 58 AB 84 DE 63 69 7B CD DF 44 2E D2 F6</code>.</p>"},{"location":"Telegram/#resources","title":"Resources","text":"<p>Telegram BotFather tutorial</p>"},{"location":"Teleinfo/","title":"Teleinfo","text":"<p>This feature is not included in precompiled binaries.</p> <p>See below how to build you own Tasmota with Teleinfo enabled.</p>"},{"location":"Teleinfo/#overview","title":"Overview","text":"<p>Teleinfo is a Tasmota ENERGY driver for energy meters installed by French national electricity grid manager Enedis in all households. Teleinfo driver works with either legacy meters or the new Linky meters. It is based on Charles Hallard's LibTeleinfo.</p> <p>Teleinfo driver features:</p> <ul> <li>Support for Legacy mode (mode Historique at 1200 baud) or Standard mode (9600 baud)</li> <li>Extract fields to feed Tasmota standard ENERGY module allowing Tasmota to report standard  SENSOR.ENERGY messages and all related features (PowerDelta, margins, ...)</li> <li>Publish raw Teleinfo frame to MQTT for processing by the backend </li> </ul> <p>Support in french is available on Charles Hallard forums.</p>"},{"location":"Teleinfo/#compiling-with-support-for-teleinfo","title":"Compiling with support for Teleinfo","text":"<p>As the feature is not included by default, you must compile your build.</p> <p>To enable Teleinfo, add the following line in your <code>user_config_override.h</code> and compile <code>tasmota</code> or <code>tasmota32</code>.  <pre><code>#define USE_TELEINFO\n</code></pre></p> <p>But as I'm testing lot of boards, my preference goes to add my custom boards section into the file <code>platformio_tasmota_cenv.ini</code></p> <p>For example on ESP8266 board with teleinfo and I2C display to display Energy data <pre><code>[env:tasmota-tic-display]\nextends                     = env:tasmota\nplatform_packages           = ${common.platform_packages}\nbuild_unflags               = ${common.build_unflags}\nbuild_flags                 = ${common.build_flags}\n                             -DUSE_TELEINFO\n                             -DUSE_DISPLAY\n</code></pre></p>"},{"location":"Teleinfo/#configure-gpios-for-teleinfo","title":"Configure GPIOs for Teleinfo","text":""},{"location":"Teleinfo/#serial-reception","title":"Serial reception","text":"<p>Once you have flashed Tasmota with the support for Teleinfo, you need to configure the proper GPIO to receive the Teleinfo serial data with \"TInfo RX\"</p> <p>On ESP8266, suitable pins are</p> <ul> <li>Standard UART0 RX pin on GPIO3 </li> <li>Alternate UART0 RX pin on GPIO13 (D7) </li> </ul> <p>On ESP32, most of the pins can be used since uart can be mapped on almost all pins.</p> <p>On Denky boards it's connected to GPIO33 and on new DenkyD4 it's on GPIO8.</p>"},{"location":"Teleinfo/#optional-enable-pin","title":"Optional enable pin","text":"<p>An optional Enable GPIO can be configured as \"TInfo EN\". Any GPIO output can be used for that purpose.  Enable pin is for low power future use and avoid to have any consumption when there is nothing to do.</p> <p>For example schematic on custom Denky board (ESP32) is as follow</p> <p></p> <p>Resistors values R3 and R4 need to be changed to work with <code>standard</code> and <code>historique</code>. New official values for R3 is 220ohm and R4 is 3.3Kohm. If you still have issues in Standard mode try to increase R3 up to 1Kohm</p> <p>As you can see GPIO33 is used for RX and GPIO4 for Enable (need set to 1 to be able to receive data) </p> <p>Setup in this case is </p> <ul> <li>Enable pin on GPIO4 </li> <li>RX pin on GPIO33 </li> </ul> <p>Another example on ESP8266 could be D5/GPIO14:</p> <p></p> <p>After selecting the GPIOs, click on \"SAVE\" and Tasmota will reboot.</p>"},{"location":"Teleinfo/#configuring-teleinfo","title":"Configuring Teleinfo","text":"<p>You can customize Teleinfo with the command <code>EnergyConfig &lt;command&gt; &lt;parameter&gt;</code>. The list of supported commands and parameters are:</p> Subcommand Parameters Without any command and parameter, displays the current active configuration. Historique Set Teleinfo in legacy (historique) mode at 1200 baud. Standard Set Teleinfo in standard mode at 9600 baud. NoRaw Disable sending of raw frame (see below). Full Enable sending of all frames in raw mode. Changed Enable sending raw frames only when data has changed. Skip n Skips n frames before sending raw frame. Limit Limit raw frames to values subject to fast change (Power, Current, ...) Stats Show Teleinfo frames errors statistics <p>Changing mode from historique to standard and vice-versa will restart tamota.</p>"},{"location":"Teleinfo/#check-current-configuration","title":"Check current configuration","text":"<p>First thing is to see how teleinfo is configured, for this you need to use <code>EnergyConfig</code> command from console</p> <pre><code>17:24:56.758 CMD: EnergyConfig\n17:24:56.766 TIC: Settings Mode:historique, RX:GPIO23, EN:None, Raw:noraw, Skip:0, Limit:0, Stats:0\n17:24:56.783 MQT: emoncms/ch2i/factory/denky_D6C0C0/stat/RESULT = {\"EnergyConfig\":\"Done\"}\n</code></pre> <p>In this case we can see we are in historique mode, RX data is coming on GPIO32 (it's an ESP32) and Enable Pin is not used. No MQTT raw frame will be sent (noraw) on teleinfo frame reception, so keeping default config of telemetry. Statistics are disabled, so won't be displayed on WEB UI but still available on console.</p>"},{"location":"Teleinfo/#energy-from-teleinfo","title":"Energy from Teleinfo","text":"<p>If correct mode and GPIO configuration are set, you'll be able to see on main tasmota screen something like that </p> <p></p> <p>It's happening only as soon as tasmota was able to read one valid frame from Teleinfo.</p> <p>Data received from teleinfo is used by tasmota in real time to display information but also to calculate daily energy consumption. Of course as Teleinfo is returning lot of data (such as kWh indexes) all interesting information is displayed on the Web interface. Since we know (because it's on teleinfo frame) the current contract we can display bargraph of charge (in %). This can help to see when main house smartmeter will shut down due to over consumption (for example)</p>"},{"location":"Teleinfo/#default-data","title":"Default data","text":"<p>If configuration is left by default (and if you have configured MQTT of course) you will receive a frame each time telemtry happens (menu configuration -&gt; configure logging -&gt; telemetry period) which is by default every 5 minutes.</p> <p>You can check on console, the frame received is sent every 5 minutes under <code>SENSOR</code> topic as a JSON string. This frame as all default tasmota fields and also a object ENERGY related to tasmota Energy module.</p> <pre><code>17:28:45.907 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"Time\":\"2021-10-26T17:28:45\",\"ENERGY\":{\"TotalStartTime\":\"2021-10-25T15:22:04\",\"Total\":9098.245,\"Yesterday\":6822.685,\"Today\":2275.560,\"Period\": 9,\"Power\":170,\"Current\":1.000,\"Load\":6},\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275560,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":170,\"HHPHC\":\"A\",\"MOTDETAT\":0},\"ESP32\":{\"Temperature\":36.1},\"TempUnit\":\"C\"}\n17:33:45.906 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"Time\":\"2021-10-26T17:33:45\",\"ENERGY\":{\"TotalStartTime\":\"2021-10-25T15:22:04\",\"Total\":9098.255,\"Yesterday\":6822.685,\"Today\":2275.570,\"Period\":10,\"Power\":190,\"Current\":1.000,\"Load\":6},\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275570,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":190,\"HHPHC\":\"A\",\"MOTDETAT\":0},\"ESP32\":{\"Temperature\":36.1},\"TempUnit\":\"C\"}\n17:38:45.905 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"Time\":\"2021-10-26T17:38:45\",\"ENERGY\":{\"TotalStartTime\":\"2021-10-25T15:22:04\",\"Total\":9098.265,\"Yesterday\":6822.685,\"Today\":2275.579,\"Period\": 9,\"Power\":170,\"Current\":1.000,\"Load\":6},\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275579,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":170,\"HHPHC\":\"A\",\"MOTDETAT\":0},\"ESP32\":{\"Temperature\":36.7},\"TempUnit\":\"C\"}\n</code></pre> <p>But in our case we have also a TIC object which contains all the frame received on teleinfo frame (last reveived value), for example in the frame above the TIC object is the following.</p> <pre><code>{\n  \"TIC\":{\n    \"ADCO\":\"021528603314\",\n    \"OPTARIF\":\"HC..\",\n    \"ISOUSC\":15,\n    \"HCHC\":920750,\n    \"HCHP\":2275579,\n    \"PTEC\":\"HP..\",\n    \"IINST\":1,\n    \"IMAX\":2,\n    \"PAPP\":170,\n    \"HHPHC\":\"A\",\n    \"MOTDETAT\":0\n  }\n}\n</code></pre>"},{"location":"Teleinfo/#sending-data-to-other","title":"Sending data to other","text":"<p>Teleinfo is a very powerful tool to monitor house energy consumption that many of you may need to send these date to backend for other treatment. For example receiving power value every 5 minutes may be an issue to real time monitoring house consuption, this is why we introduced option to send data in real time.</p> <p>Best would be sending full received frame to MQTT for example, let's do that.</p>"},{"location":"Teleinfo/#raw-frame-going-outside-mqtt","title":"Raw Frame going outside (MQTT)","text":"<p>To enable real time raw teleinfo frame to be sent to MQTT you need to use <code>EnergyConfig Full</code> command from console</p> <pre><code>17:57:04.579 TIC: Raw to 'full'\n17:57:04.594 MQT: emoncms/ch2i/factory/denky_D6C0C0/stat/RESULT = {\"EnergyConfig\":\"Done\"}\n17:57:05.038 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275613,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":180,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n17:57:06.693 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275613,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":180,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n17:57:08.183 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275614,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":170,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n17:57:09.684 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275614,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":200,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n</code></pre> <p>Then each frame received is sent immediately thru MQTT</p>"},{"location":"Teleinfo/#skip-frames","title":"Skip frames","text":"<p>Depending on what you want to do on backend side it may be too much data and flood your database so we introduced <code>Skip</code> flag. For example we may need only one frame up to 10 to be send on backend (so free up some network traffic). To limit teleinfo frame to one each 10 frames, you need to use <code>EnergyConfig Skip 10</code> command from console</p> <pre><code>18:04:43.210 CMD: EnergyConfig Skip 10\n18:04:43.214 TIC: Raw each 11 frame(s)\n18:04:43.226 MQT: emoncms/ch2i/factory/denky_D6C0C0/stat/RESULT = {\"EnergyConfig\":\"Done\"}\n18:05:00.438 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275628,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":170,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n18:05:17.438 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"ADCO\":\"021528603314\",\"OPTARIF\":\"HC..\",\"ISOUSC\":15,\"HCHC\":920750,\"HCHP\":2275629,\"PTEC\":\"HP..\",\"IINST\":1,\"IMAX\":2,\"PAPP\":170,\"HHPHC\":\"A\",\"MOTDETAT\":0}}\n</code></pre> <p>As you can see we now send one full frame every approx 17s, choose your limit depending on frame length (of course) and serial speed. In historique mode a frame takes about 1.2s to be received.</p> <p>This works only if Raw mode has been selected with <code>EnergyConfig Full</code>.</p>"},{"location":"Teleinfo/#relevant-data","title":"Relevant data","text":"<p>We can also going further, in previous mode, even if we limited the number of frames sent, a complete frame with all data was send. And this is not optimized because some fields in the frame may vary only once or twice a day <code>PTEC</code> or even never <code>ADCO</code>, <code>ISOUSC</code>, ... So we indroduced the <code>Changed</code> mode where only data changed from one frame to another is sent. To enable this mode, you need to use <code>EnergyConfig Changed</code> command from console</p> <pre><code>18:28:57.610 CMD: EnergyConfig Changed\n18:28:57.615 TIC: Raw to 'changed'\n18:28:57.627 MQT: emoncms/ch2i/factory/denky_D6C0C0/stat/RESULT = {\"EnergyConfig\":\"Done\"}\n18:29:00.425 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"PAPP\":160}}\n18:29:17.745 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"PAPP\":190}}\n18:29:34.689 MQT: emoncms/ch2i/factory/denky_D6C0C0/tele/SENSOR = {\"TIC\":{\"PAPP\":170}}\n</code></pre> <p>As you can see we now only data changed is sent.</p> <p>This works only if Raw mode has been selected with <code>EnergyConfig Full</code> and <code>Skip</code> mode should be disabled <code>EnergyConfig Skip 0</code> for this to works properly.</p> <p>Don't worry about other fields, they will be send on each telemetry data as usual.</p>"},{"location":"Teleinfo/#errors-statistics","title":"Errors Statistics","text":"<p>You can check classic frame reception errors (checksum, size, format, ...), with <code>EnergyConfig Stats x</code> command. Setting to <code>1</code> allow to display statistics on WEB UI while setting to <code>0</code> disable this option, but you will be able to always see stats on console with command <code>EnergyConfig Stats</code>.</p> <p>You can clear Stats counters with <code>EnergyConfig Stats 2</code></p>"},{"location":"Teleinfo/#tasmota-rules-examples","title":"Tasmota Rules examples","text":""},{"location":"Teleinfo/#raw-frame-going-outside-http","title":"Raw Frame going outside (HTTP)","text":"<p>TBD, example to post HTTP data every 5 minutes</p>"},{"location":"Teleinfo/#driving-rgb-led-depending-on-power","title":"Driving RGB Led depending on power","text":"<p>TBD, example to manage Led from Green (no charge) to Red (full charge)</p>"},{"location":"Teleinfo/#tasmota-berry-script-examples","title":"Tasmota Berry script examples","text":"<p>TBD, any idea is welcome</p>"},{"location":"Teleinfo/#display-info-on-display","title":"Display info on display","text":"<p>TBD, any idea is welcome</p>"},{"location":"Teleinfo/#raw-frames-examples","title":"Raw frames examples","text":"<p>You can find various raw frames for standard and historique mode and different contracts on Teleinfo replay tool here </p>"},{"location":"Teleinfo/#hardware-information","title":"Hardware information","text":""},{"location":"Teleinfo/#basic-schematics","title":"Basic Schematics","text":"<p>Classic connectivity of teleinfo can be done with following schematic, works with historique and standard mode.</p> <p></p>"},{"location":"Teleinfo/#diy-or-ready-made-shields","title":"DIY or ready made Shields","text":""},{"location":"Teleinfo/#wemos","title":"WeMos","text":"<p>Wemos Mini D1 (ESP8266) and MH-ET Live ESP32 Mini Kit </p> <p></p> <p>You can get more information about this shield on github repository</p>"},{"location":"Teleinfo/#raspberry-pi-bare-pcb","title":"Raspberry Pi (Bare PCB)","text":"<p>You can also use or buy tiny Raspberry Pi shield to connect Teleinfo output signal to Tasmota device RX Pin</p> <p></p> <p>Documentation and reference of this shield are available on tindie</p>"},{"location":"Teleinfo/#references","title":"References","text":"<p>You can find a lot of information, such as schematics and wiring diagrams, on Charles' blog</p>"},{"location":"Templates/","title":"Templates","text":"<p>Template is a definition of a device and how its GPIOs are assigned.</p> <p>Templates provide an easy way for you to create, modify and share configurations for various devices that have features supported in Tasmota. </p> <p>Bug</p> <p>Tasmota 9.1 completely redesigned template layout to allow for future expansion. Read more about the GPIO Conversion. </p> <p>To provide easy processing by Tasmota a template is written as a JSON string and looks like this: <pre><code>{\"NAME\":\"Example Template\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45}\n</code></pre></p> <p>Tip</p> <p>Tasmota Supported Devices Repository has a complete list of supported devices. We encourage everyone who creates a template for a new unknown device to submit it using Add New Template form.</p>"},{"location":"Templates/#how-to-use","title":"How to Use","text":"<p>Go to Configuration - Configure Template ...</p> <p></p> <p>... and you'll end up looking at this screen.</p> <p></p> <p>Time to create your template.</p>"},{"location":"Templates/#creating-your-template","title":"Creating Your Template","text":"<ol> <li>Change  the template name (also defines the name for the module).</li> <li>Select a module to BASE your template on. If you're not sure, <code>Module 18</code> is the best choice. In this example the device is based on Blitzwolf SHP (45) module.</li> <li> <p>Configure the components assigned to the GPIOs to match your device. If you do not know what pins your device uses, read about the new device configuration procedure to determine the correct pin assignments. </p> <ul> <li>Any unused GPIO that has cannot have a peripheral connected should be set to <code>None</code> (0). In our example the device has no exposed GPIO's so the unused ones are set to <code>0</code> compared to the original BlitzWolf module.     </li> <li>GPIOs that can have peripherals connected to (exposed GPIOs) should be set to <code>User</code> (1). This allows future configuration through the Configure Module dialog without the need to create a new template.  </li> </ul> <p>Example</p> <p>Sonoff TH has a jack connected to GPIO4 that allows a user to plug in a sensor. Assigning GPIO4 as <code>User</code> allows a Template to have correct GPIOs for this device even if nothing is plugged in. But, when a user decides to connect a sensor using the jack, GPIO4 can be set to the type of sensor through the Configure Module page.</p> </li> <li> <p>Click on Save and you'll see this message     </p> </li> <li> <p>Finally, the device will reboot with the new template name      </p> </li> </ol>"},{"location":"Templates/#exporting-your-template","title":"Exporting Your Template","text":"<p>Now that you've set up your previously unsupported device in Tasmota it is time to share the knowledge:</p> <ol> <li>Check that <code>Module 0</code> is selected in the Configuration - Configure Module menu. </li> <li>Open up Console and issue command <code>Template</code> which will output a string with the configuration of your currently active template. Our example gives the following:</li> </ol> <pre><code>MQT: stat/tasmota/RESULT = {\"NAME\":\"Merged\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45}\n</code></pre> <p>Copy the string <code>{\"NAME\":\"Merged\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45}</code> and share it on the Tasmota Supported Devices Repository.</p>"},{"location":"Templates/#importing-templates","title":"Importing Templates","text":"<p>Go to Configuration - Configure Other</p> <p></p> <p>When there:</p> <ol> <li>Paste the template string into the Template field</li> <li>Make sure you check Activate</li> <li>Click on Save. </li> </ol> <p></p> <p>The device will reboot with a name reflecting your template name and <code>Module 0</code> selected which has your new template stored.</p> <p>If your device was previously configured you will have to manually change to <code>Module 0</code> in *Configuration -&gt; Configure Module*.</p> <p></p>"},{"location":"Templates/#commands","title":"Commands","text":"<p>A user provided template can be stored in Tasmota using the <code>Template</code> command. It has the following parameters.</p> Parameter Description <code></code> Show current Template <code>0</code> Create template from active module <code>1..71</code> Create template from a supported module <code>{ ... }</code> Store template written in a JSON string <code>255</code> Merge configured template and current module <p><code>Template {\"NAME\":\"Example Template\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45}</code> stores a complete template based on the Generic module</p> <p><code>Template {\"NAME\":\"AnotherModuleName\"}</code> updates the name of a stored template</p> <p><code>Template {\"FLAG\":0}</code> changes FLAG value</p> <p><code>Template {\"BASE\":18}</code> updates the base of a stored template to Generic</p> <p><code>Template {\"CMND\":\"LedTable 1\"}</code> adds <code>LedTable 1</code> command to the stored template</p> <p>After setting a template in command line it is necessary to issue <code>Module 0</code> command if the device doesn't reboot on its own.</p>"},{"location":"Templates/#merge-template-with-module","title":"Merge Template with Module","text":"<p>You can set up your device in module *Configuration -&gt; Configure Module* and use command <code>Template 255</code> to merge the settings of the Module with current template into a new Template named \"Merged\".</p>"},{"location":"Templates/#anatomy-of-a-template","title":"Anatomy of a Template","text":"<p>Let's look again at our example template:</p> <pre><code>{\"NAME\":\"Example Template\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45}\n</code></pre> <p>The four properties with UPPERCASE property names have the following functionality:</p> Property name Property value description NAME Up to 60 characters for the Module name GPIO Numbers from 0 to 65535 representing GPIO0 to GPIO5, GPIO09, GPIO10 and GPIO12 to GPIO16 and GPIO17 for A0 pin for ESP8266. ESP32 has more configurable GPIO's FLAG *Deprecated Replaced with GPIO17. 8 bit mask flag register. BASE Module number of a hard-coded device to be used when device specific functionality is needed CMND (Optional) Commands executed after activating the template"},{"location":"Templates/#gpio","title":"GPIO","text":""},{"location":"Templates/#gpio-order","title":"GPIO order","text":"<pre><code>GPIO# |00| 01|02| 03|04| 05| 09| 10| 12| 13| 14| 15| 16| 17 \nCODE  [416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0] \n</code></pre>"},{"location":"Templates/#gpio-functionality","title":"GPIO functionality","text":"<p>The GPIO functionality numbers are the same as shown by command <code>GPIOs</code>. In addition code 1 is added to select a GPIO as user configurable via the GUI Configure Module menu.</p> <p>Example</p> <p>In our example the GPIO 12 data element is <code>32</code> which corresponds to the <code>Button1</code> component, according to the components table. If you change that template element to <code>160</code> it would then be assigned as a <code>Switch1</code> component instead.</p>"},{"location":"Templates/#components","title":"Components","text":"<p>See Components for a complete list or use command <code>Gpios 255</code> in console.</p>"},{"location":"Templates/#flag","title":"FLAG","text":"<p>Before Tasmota 9.1 used to configure the ADC type. In new templates this should be set to <code>0</code> and the analog pin should be configured on GPIO17</p> FLAG Feature description 0 No features 1 Analog value 2 Temperature 3 Light 4 Button 5 Buttoni 15 User configured (same as <code>User</code>)"},{"location":"Templates/#base","title":"BASE","text":"<p>BASE is the starting module setup for the custom template. Some modules include special programming. If your device is similar to an existing built-in module it is best to use that as a starting point. When you're not sure which BASE module is suitable for your device use the <code>Generic (18)</code> module. A list of hard-coded devices can be found in Modules.</p> <p>Example</p> <p>In the RGB Smart Plug template we used the <code>BlitzWolf SHP (45)</code> module as BASE since the power monitoring circuitry is identical but GPIO00 and GPIO02 were changed and an unused GPIO04 was added to enable the RGB LED function. Using that specific module we took advantage of that module's calibrated power monitoring special programming which the <code>Generic (18)</code> module does not use.</p>"},{"location":"Templates/#cmnd","title":"CMND","text":"<p>CMND is an optional field in the template JSON string. It is used to embed commands for configuring the device instead of needing to type them in console. Multiple commands are separated with <code>|</code>. </p> <p><code>\"CMND\":\"&lt;any template related command&gt;|&lt;any template related command&gt;|...\"</code></p> <p>Commands will only be executed if the template is enabled (device module is set to 0), either before the template is loaded, when the activate box in the UI is selected or if the module 0 command is included in the CMND string itself.</p> <p>Disable LED gamma correction and remap RGB channels</p> <pre><code>{\"NAME\":\"Example\",\"GPIO\":[416,0,418,0,417,2720,0,0,2624,32,2656,224,0,0],\"FLAG\":0,\"BASE\":45,\"CMND\":\"LedTable 1|ChannelRemap 36\"}\n</code></pre> <p>Total size of the template string should not exceed 500 chars. </p>"},{"location":"Thermal-considerations/","title":"Thermal considerations","text":"<p>Even though LEDs consume far less energy than incandescent bulbs, these devices contain more complex circuitries and sometimes they still produce more heat than they can handle. The produced heat is proportional to the LED intensities, and if it builds up faster than how it dissipates from the chassis, then the temperature will rise.</p> <p>The circuitries usually (but not necessarily) contain some last-resort countermeasure that shuts down the device when it is critically overheated, but it shouldn't be relied upon.</p> <p>When testing the device for the first time, especially at higher light intensities, monitor its temperature for some time, like for at least half an hour, and if it rises rapidly, then please consider:</p> <ul> <li>Reducing the overall brightness</li> <li>Using only one of the light sources (i.e. either the color LEDs, or the high-power white ones)</li> </ul> <p>For such a test use an electrically safe lamp in which you can access the bulb, and which you can easily disconnect from the mains anytime. For measuring the temperature the best tool is an IR thermometer: aim it at the heatsink part of the chassis from a direction perpendicular to it, from such a distance that its cone of sensitivity is fully on the chassis. If you choose to test the temperature by hand, then be prepared that it may be hot, so approach it slowly, and if you already feel its heat, then don't touch it.</p> <p>During this check please also consider that a bulb standing on your desk in a test socket has considerably better cooling than one in a closed armature right below your ceiling, so try to 'model' the operating conditions in which you plan to use the device.</p> <p>If you have found a solution that keeps the temperature stable, don't forget to configure a limit in your home automation system so you (or anyone else) won't accidentally set the device to overheating when it'll be already installed.</p> <p>Some of the devices' original firmwares do contain such software throttling, but as the thermal behaviour differs from one model to another, there is no generic way to apply the right amount of throttling that would be both required and enough for everyone, so \"your mileage may vary\".</p>"},{"location":"Thermal-considerations/#technical-background","title":"Technical background","text":"<p>Light bulb circuitries consist of 3 main stages:</p> <ul> <li>A small power supply unit that converts the 230V or 110V mains to approx. 20V for the LEDs and 3.3V for the controller.    This is a small switching-mode power supply, but usually of a parsimonius design, so it's usually barely adequate for the average power requirement, and sometimes not enough for the maximum.</li> </ul> <p>The main problem is not the transformer, but the voltage regulators: they produce heat proportionally to the current that's drawn through them, and they aren't connected to the heatsink, so all their heat goes just into the air within the bulb.</p> <ul> <li> <p>The controller module, usually a SoC that contains the CPU, memory, flash and wifi.    It is a logic circuit, its heat production is negligible compared to the other stages.</p> </li> <li> <p>The LED circuitry, meaning the LEDs themselves and their driver chips, usually on a separate board.    They produce a lot of heat, but they are always connected to the chassis via either thermal grease or thermally conductive glue.</p> </li> </ul> <p>So the problems are: - Voltage regulators produce heat proportional to light intensity - Their thermal coupling to the chassis is terrible: via a huge air gap - The chassis is not an effective heatsink (for aesthetic reasons it can't be) - The overall system is designed for the average conditions and not for the maximum.</p> <p>Thus our goal is to limit the power consumption to such a level that the heat produced can be dissipated by the chassis heatsink, and the way to achieve this is throttling down the light intensity and/or limiting the switched-on time.</p>"},{"location":"Thermal-considerations/#measured-values","title":"Measured values","text":""},{"location":"Thermal-considerations/#syf05-fcmilasunyesmart","title":"SYF05 (Fcmila/Sunyesmart)","text":"<ul> <li>At start: 23\u00b0C</li> <li>After 10 minutes: 40\u00b0C (warm)</li> <li>After 20 minutes: 48\u00b0C (hot)</li> <li>After 30 minutes: 53\u00b0C (barely touchable)</li> <li>After 40 minutes: 55\u00b0C</li> </ul> <p>At this point the thermal protection has shut the device down, and the local temperatures were: - Chassis: 55\u00b0C - RGB LED driver chip: 73\u00b0C - White LED driver chip: 76\u00b0C - Controller module: 76\u00b0C - Transformer: 85\u00b0C - Area around the voltage regulator: 91\u00b0C</p>"},{"location":"Thermal-considerations/#sonoff-b1","title":"Sonoff B1","text":"<ul> <li>At start: 26\u00b0C</li> <li>After 10 minutes: 33\u00b0C</li> <li>After 20 minutes: 40\u00b0C</li> <li>After 30 minutes: 44\u00b0C</li> <li>After 40 minutes: 47\u00b0C</li> <li>After 50 minutes: 48\u00b0C</li> <li>After 1 hour: 50\u00b0C</li> </ul> <p>The bulb was operational at this point, but I considered this temperature too high for sustained use.</p>"},{"location":"Thermostat/","title":"Thermostat","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_THERMOSTAT                           // Add support for Thermostat\n    #define THERMOSTAT_CONTROLLER_OUTPUTS         1         // Number of outputs to be controlled independently\n    #define THERMOSTAT_SENSOR_NAME                \"DS18B20\" // Name of the local sensor to be used\n    #define THERMOSTAT_SENSOR_NUMBER              1         // Number of local sensors to be used\n    #define THERMOSTAT_RELAY_NUMBER               1         // Default output relay number for the first controller (+i for following ones)\n    #define THERMOSTAT_SWITCH_NUMBER              1         // Default input switch number for the first controller (+i for following ones)\n    #define THERMOSTAT_TIME_ALLOW_RAMPUP          300       // Default time after last target update to allow ramp-up controller phase in minutes\n    #define THERMOSTAT_TIME_RAMPUP_MAX            960       // Default time maximum ramp-up controller duration in minutes\n    #define THERMOSTAT_TIME_RAMPUP_CYCLE          30        // Default time ramp-up cycle in minutes\n    #define THERMOSTAT_TIME_SENS_LOST             30        // Maximum time w/o sensor update to set it as lost in minutes\n    #define THERMOSTAT_TEMP_SENS_NUMBER           1         // Default temperature sensor number\n    #define THERMOSTAT_TIME_MANUAL_TO_AUTO        60        // Default time without input switch active to change from manual to automatic in minutes\n    #define THERMOSTAT_TIME_RESET                 12000     // Default reset time of the PI controller in seconds\n    #define THERMOSTAT_TIME_PI_CYCLE              30        // Default cycle time for the thermostat controller in minutes\n    #define THERMOSTAT_TIME_MAX_ACTION            20        // Default maximum thermostat time per cycle in minutes\n    #define THERMOSTAT_TIME_MIN_ACTION            4         // Default minimum thermostat time per cycle in minutes\n    #define THERMOSTAT_TIME_MIN_TURNOFF_ACTION    3         // Default minimum turnoff time in minutes, below it the thermostat will be held on\n    #define THERMOSTAT_PROP_BAND                  4         // Default proportional band of the PI controller in degrees celsius\n    #define THERMOSTAT_TEMP_RESET_ANTI_WINDUP     8         // Default range where reset antiwindup is disabled, in tenths of degrees celsius\n    #define THERMOSTAT_TEMP_HYSTERESIS            1         // Default range hysteresis for temperature PI controller, in tenths of degrees celsius\n    #define THERMOSTAT_TEMP_FROST_PROTECT         40        // Default minimum temperature for frost protection, in tenths of degrees celsius\n    #define THERMOSTAT_TEMP_RAMPUP_DELTA_IN       4         // Default minimum delta temperature to target to get into rampup mode, in tenths of degrees celsius\n    #define THERMOSTAT_TEMP_RAMPUP_DELTA_OUT      2         // Default minimum delta temperature to target to get out of the rampup mode, in tenths of degrees celsius\n    #define THERMOSTAT_TEMP_PI_RAMPUP_ACC_E       200       // Default accumulated error when switching from ramp-up controller to PI in hundredths of degrees celsius\n    #define THERMOSTAT_TIME_OUTPUT_DELAY          180       // Default output delay between state change and real actuation event (f.i. valve open/closed)\n    #define THERMOSTAT_TEMP_INIT                  180       // Default init target temperature for the thermostat controller\n    #define THERMOSTAT_TIME_MAX_OUTPUT_INCONSIST  3         // Default maximum time where the input and the output shall differ (for diagnostic) in minutes\n    #define THERMOSTAT_TIME_MAX_AUTOTUNE          21600     // Maximum time for the PI autotune function to complete in seconds\n    #define THERMOSTAT_DUTYCYCLE_AUTOTUNE         35        // Default duty cycle (in % over PI cycle time) for the step response of the autotune PI function\n    #define THERMOSTAT_PEAKNUMBER_AUTOTUNE        8         // Default number of peak temperatures (max or min) to be used for the autotune PI function\n    #define THERMOSTAT_TEMP_BAND_NO_PEAK_DET      1         // Default temperature band in thenths of degrees celsius within no peak will be detected\n    #define THERMOSTAT_TIME_STD_DEV_PEAK_DET_OK   10        // Default standard deviation in minutes of the oscillation periods within the peak detection is successful    \n</code></pre></p> <p>Control over heating and cooling as a true HVAC unit</p> <p>The Thermostat driver allows a Tasmota device to follow control heating/cooling strategies to reach the desired setpoint. In order to accomplish this it must be provided with the present temperature either via MQTT or a locally connected sensor. The thermostat offers similar functions as the feature rich commercial models found below:</p> <p></p>"},{"location":"Thermostat/#typical-setup-heating-floor-system","title":"Typical setup: Heating floor system","text":"<p>A typical setup for heating room systems can be found in the picture below. A conventional room thermostat is connected to a heating floor valve actuator, both running at AC voltage (e.g., 220V). The thermostat is connected to neutral as well as to the phase, the actuator to the same neutral connection of the thermostat and to its actuation signal. The actuation signal will switch between the neutral voltage (actuation Off) and the phase voltage (actuation On).</p> <p>Conventional room thermostats offer nowadays either 2 point control with hysteresis or a more advanced PI (Proportional-Integral) control. While the result of the PI control is an analog value, in order to control a digital devices such as a relay, it is typically transformed into a PWM signal with a pre-defined period and a variable duty cycle.</p> <p></p>"},{"location":"Thermostat/#use-of-tasmota-switch-to-bypass-an-existing-wall-thermostat","title":"Use of tasmota switch to bypass an existing wall thermostat","text":"<p>A tasmota switch can be installed in conjunction with an existing wall thermostat. The advantage of this setup is that the thermostat driver offers the possibility of following the output of the existing wall thermostat or of acting autonomously. This setup allows a seamless integration with existing wall thermostats and gives the user the freedom to still use them.</p> <p>Below you can find an example of a Shelly switch bypassing a wall thermostat:</p> <p></p>"},{"location":"Thermostat/#configuration-for-standalone-application-or-bypass-of-existing-wall-thermostat","title":"Configuration for standalone application or bypass of existing wall thermostat","text":"<p>The driver by default ignores the input switch states, making it completely standalone (independently of any existing wall thermostat). The bypass function is specially useful to allow the user to bypass the TASMOTA thermostat driver and allow the wall thermostat to take over instead. To enable this bypass function, the following command is to be sent to the tasmota device:</p> <pre><code>cmnd/Tasmota_Name/INPUTSWITCHUSE 1\n</code></pre> <p>Note</p> <p>Some devices (such as the Sonoff 4CH Pro R2) even if having input buttons to manually switch the state of the output, report always its inputs in active state no matter if the button is pressed or not. For these devices the parameter above needs to be set to 0, otherwise the thermostat driver will activate the output continuously and stay permanently in manual mode.</p> <p>Once active, the thermostat, in case of its input being active, will switch to manual mode and set as output the same state of its input. The thermostat will switch back from manual to automatic mode after a defined time where the input is inactive. The following parameter can be set to modify the time window in minutes to switch back to automatic in case the input is inactive:</p> <pre><code>cmnd/Tasmota_Name/TIMEMANUALTOAUTOSET 60\n</code></pre> <p>The default value for the time window to switch from manual to automatic is 60 minutes.</p>"},{"location":"Thermostat/#temperature-input-setpoint","title":"Temperature input / setpoint","text":""},{"location":"Thermostat/#local-temperature-sensor","title":"Local temperature sensor","text":"<p>The tasmota driver can receive the temperature either via the related MQTT command or via a local temperature sensor (see example of a DS18B20 temperature sensor and a shelly temperature sensor addon below).</p> <p></p> <p>The default temperature input is MQTT. The following command can be used to select the local sensor as default input:</p> <pre><code>cmnd/Tasmota_Name/SENSORINPUTSET 1\n</code></pre> <p>Note</p> <p>The default local temperature sensor is a DS18B20. In case a different Tasmota supported sensor is used, the following define in <code>my_user_config.h</code> is to be changed (or redefined in <code>user_config_override.h</code>) and a user specific tasmota software needs to be compiled:</p> <pre><code>#define THERMOSTAT_SENSOR_NAME                \"DS18B20\" // Name of the local sensor to be used\n</code></pre>"},{"location":"Thermostat/#mqtt-temperature-value-and-setpoint","title":"MQTT temperature value and setpoint","text":"<p>The following commands can be used to provide the driver with the temperature value of the room and the desired setpoint:</p> <pre><code>cmnd/Tasmota_Name/TEMPTARGETSET 22.5\n</code></pre> <pre><code>cmnd/Tasmota_Name/TEMPMEASUREDSET 21.8\n</code></pre> <p>Examples for room temperature of 21.8\u00b0C and temperature setpoint of 22.5\u00b0C</p> <p>There are several ways to send the MQTT room temperature. For the development and testing of this driver, a Raspberry Pi with Domoticz and a Z-Wave stick has been used to gather all room temperatures from Z-Wave sensors and send them to the respective Tasmota room thermostats.</p>"},{"location":"Thermostat/#customization-of-the-controller-for-best-results","title":"Customization of the controller for best results","text":"<p>The thermostat controller includes a default parameter set that targets a typical floor heating application for mid-sized rooms (&lt; 20m2) with one heating circuit. The controller is however highly configurable via MQTT. The following sections will guide the user to adapt the main parameters to improve the performance of the thermostat controller via customization.</p>"},{"location":"Thermostat/#enable-the-thermostat-driver","title":"Enable the thermostat driver","text":"<p>The thermostat driver is by default disabled. To enable it the following command can be used:</p> <pre><code>cmnd/Tasmota_Name/THERMOSTATMODESET 1\n</code></pre>"},{"location":"Thermostat/#set-the-controller-in-degrees-celsius-or-fahrenheit","title":"Set the controller in degrees Celsius or Fahrenheit","text":"<p>The default temperature format is degrees Celsius. The format can be easily switched to degrees Fahrenheit via MQTT command, see below:</p> <pre><code>cmnd/Tasmota_Name/TEMPFORMATSET 1\n</code></pre>"},{"location":"Thermostat/#set-the-control-strategy","title":"Set the control strategy","text":"<p>The control strategy by default is a Hybrid one. The hybrid control strategy mixes a so called \"Ramp-Up\" strategy (invention during the development of this driver, initially as a LUA script and ported to Tasmota later) and a PI one. The \"Ramp-Up\" strategy is typically used to reach as fast as possible the setpoint for big deltas between desired temperature and setpoint, the PI on the other hand for most part of the normal thermostat operation.</p> <p>The control strategy can be however modified, if the Hybrid one is not desired, the PI or \"Ramp-Up\" mode, can be forced. For that purpose the following command can be used:</p> <pre><code>cmnd/Tasmota_Name/CONTROLLERMODESET 1\n</code></pre> <p>The value 1 forces the PI operation and the value 2 the \"Ramp-Up\" one.</p>"},{"location":"Thermostat/#pi-controller-main-parameters","title":"PI controller main parameters","text":""},{"location":"Thermostat/#cycle-time","title":"Cycle time","text":"<p>Depending on the heating system, the cycle time (PMW period) can be adapted. Very slow systems (high time constants) such as heating floor systems might need higher values (default value is 30 minutes), faster systems might need smaller cycle times. Below the command to adapt the cycle time can be found:</p> <pre><code>cmnd/Tasmota_Name/TIMEPICYCLESET 30\n</code></pre>"},{"location":"Thermostat/#proportional-band","title":"Proportional Band","text":"<p>Depending on the dimensioning of your heating system, the proportional band of the controller might be increased (if it takes too long to reach setpoint) or reduced (very high overshoot). The default proportional gain is 4, which means that the duty cycle due to the proportional part of the PI controller will be 100% for temperature deltas between setpoint and room temperature equal or bigger than 4\u00b0C. Below the command to adapt the proportional band can be found:</p> <pre><code>cmnd/Tasmota_Name/PROPBANDSET 1\n</code></pre> <p>Note</p> <p>With the command above, the PI controller will output a proportional time equivalent to 100% of the duty cycle for delta temperatures between setpoint and room temp. above 1\u00b0C (e.g., for big rooms with weak dimensioned heating circuit).</p>"},{"location":"Thermostat/#reset-time","title":"Reset Time","text":"<p>The reset time is the time the PI controller takes to overcome steady-state errors. The default value for the reset time is 12000 seconds. This value can be for instance increased in case a stronger integral reaction of the controller is desired. Below the command to adapt the proportional band can be found:</p> <pre><code>cmnd/Tasmota_Name/TIMERESETSET 1800\n</code></pre>"},{"location":"Thermostat/#temperature-for-the-anti-windup-reset","title":"Temperature for the anti-windup reset","text":"<p>To avoid the accumulated error and therefore integral component of the PI controller to grow too much and produce a high overshoot, a temperature delta can be defined within the integrator will work. Outside this range the accumulated error and integral part will be set to 0. The default value for the integrator to work is 0.8\u00b0C. Below the command to adapt the anti-windup temperature can be found:</p> <pre><code>cmnd/Tasmota_Name/TEMPANTIWINDUPRESETSET 0.8\n</code></pre>"},{"location":"Thermostat/#temperature-hysteresis","title":"Temperature hysteresis","text":"<p>A temperature hysteresis can be set to avoid any PI controller actions within a certain value around the setpoint. The default value for the hysteresis is 0.1\u00b0C. In well configured controller this value should be as low as possible to avoid unwanted temperature oscillations which reduce efficiency and therefore increase costs. Below the command to adapt the anti-windup temperature can be found:</p> <pre><code>cmnd/Tasmota_Name/TEMPHYSTSET 0.1\n</code></pre>"},{"location":"Thermostat/#maximum-action-of-the-controller","title":"Maximum action of the controller","text":"<p>The maximum On time (Duty Cycle) in minutes within a cycle can be set by this parameter. The default value is 20 minutes. This represents for the default cycle time of 30 minutes 2 thirds of the complete cycle. In case the controller takes too long to reach the setpoint, this value can be increased to values closer to the cycle time. Below the command to adapt the maximum action time can be found:</p> <pre><code>cmnd/Tasmota_Name/TIMEMAXACTIONSET 20\n</code></pre>"},{"location":"Thermostat/#minimum-action-of-the-controller","title":"Minimum action of the controller","text":"<p>The minimum On time (Duty Cycle) in minutes within a cycle can be set by this parameter. The default value is 4 minutes. Below the command to adapt the minimum action time can be found:</p> <pre><code>cmnd/Tasmota_Name/TIMEMINACTIONSET 4\n</code></pre> <p>It is very important to adapt this value to your heating system to obtain accurate temperature control</p> <p>If the value is very low, in case of floor heating systems for instance, the heating actuators might not have enough time to open the valves and the temperature will drop (depending on the actuator open/close time could take from 1 to 3 minutes) if it is too high, there will be unwanted oscillations around the setpoint. One way to configure this value in heating mode is to manually tune it in worst case conditions (highest typically desired room temperature and lower winter temperature outside) checking that the proportional action generated by the controller is sufficient to raise slightly the temperature. If the temperature still goes down after the pulse plus delay time of the system and rises just once the accumulated error triggers integral actions then the value set is too low.</p>"},{"location":"Thermostat/#ramp-up-controller-main-parameters","title":"Ramp-Up controller main parameters","text":""},{"location":"Thermostat/#temperature-delta-to-get-into-ramp-up-mode","title":"Temperature delta to get into \"Ramp-Up\" mode","text":"<p>When the controller is configured in Hybrid mode (default), the control strategy will be a mix  between \"Ramp-Up\" (for big deltas between room temperature and setpoint) and PI (around the setpoint). The following parameter can be set to define the delta temperature (between measured and setpoint) above which the \"Ramp-Up\" controller will be active:</p> <pre><code>cmnd/Tasmota_Name/TEMPRUPDELTINSET 0.3\n</code></pre> <p>The default value is 0.4\u00b0C.</p>"},{"location":"Thermostat/#time-passed-after-latest-setpoint-change-to-get-into-ramp-up-mode","title":"Time passed after latest setpoint change to get into \"Ramp-Up\" mode","text":"<p>When the controller is configured in Hybrid mode (default), the activation of the \"Ramp-Up\" mode will not just depend on the defined temperature delta between measured and setpoint, but as well on the time in minutes passed since the last setpoint change occurred. This strategy matches the purpose of the \"Ramp-Up\" controller, which was developed to reach the desired temperature as fast as possible in very specific scenarios, e.g., after a night keeping the room temperature low. In hybrid mode, the controller active most part of the time should be the PI one. The following parameter can be used to define the time to allow switching to \"Ramp-Up\" in minutes.</p> <pre><code>cmnd/Tasmota_Name/TIMEALLOWRAMPUPSET 300\n</code></pre> <p>The default value is 300 minutes.</p>"},{"location":"Thermostat/#cycle-time_1","title":"Cycle time","text":"<p>Depending on the heating system, the cycle time (PMW period) can be adapted. Very slow systems (high time constants) such as heating floor systems might need higher values (default value is 30 minutes), faster systems might need smaller cycle times. The following parameter can be used to define the cycle time in minutes:</p> <pre><code>cmnd/Tasmota_Name/TIMERAMPUPCYCLESET 45\n</code></pre>"},{"location":"Thermostat/#maximum-ramp-up-time","title":"Maximum Ramp-Up time","text":"<p>The maximum time the ramp-up phase of the controller shall be active can be configured (default value is 960 minutes). The following parameter can be used to define the ramp-up time in minutes:</p> <pre><code>cmnd/Tasmota_Name/TIMERAMPUPMAXSET 180\n</code></pre>"},{"location":"Thermostat/#thermostat-persistent-storage-for-configuration","title":"Thermostat persistent storage for configuration","text":"<p>The thermostat driver stores all configured parameters over MQTT exclusively in RAM, it does not use flash due to the amount of the parameters. This means that at every restart the default parameters will be set again. To avoid this behavior rules can be set-up to reconfigure desired parameters at every restart. See below an example:</p> <pre><code>ON Power1#boot DO Backlog sensorinputset 1;controllermodeset 2;thermostatmodeset 1;temptargetset %mem1% ENDON\nON mqtt#connected DO Publish2 stat/TestTopic/targetTempValue {\"Temp\":%mem1%} ENDON\nON mem1#state DO Backlog temptargetset %value%;Publish2 stat/TestTopic/targetTempValue {\"Temp\":%mem1%} ENDON\n</code></pre>"},{"location":"Thermostat/#detecting-an-opened-window-by-temperature-drop","title":"Detecting an opened window by temperature drop","text":"<p>When opening windows, temperature will drop significantly faster than is normal. During that period, heating is usually not desired. Following rules will detect a .3C drop in 1min and send the thermostat into a 15min timeout. Replace <code>HTU21</code> with your sensor's name, if your <code>Teleperiod</code> is &lt; 1min, consider using <code>Tele-HTU21#Temperature</code>.</p> <pre><code>ON Event#windowstop DO Backlog EnableOutputSet 0; Power 0; RuleTimer1 900 ENDON\nON Rules#Timer=1 DO EnableOutputSet 1 ENDON\nON HTU21#Temperature DO Var1 %value% ENDON\nON Time#Minute DO Backlog Var3 %Var2%; Sub3 .3; Var2 %Var1% ENDON\nON Var2#State&lt;=%Var3% DO Event windowstop ENDON\n</code></pre>"},{"location":"Thermostat/#preventing-stuck-valves-by-forcing-actuation","title":"Preventing stuck valves by forcing actuation","text":"<p>When left in place for too long, radiator valves might seize. Following rules will force actuation every week in order to prevent this. A time of <code>600</code> seconds should be long enough for slow actuators to open fully, adjust yours as needed. If using above <code>windowstop</code> code, skip <code>Rules#Timer=1</code> as you already have it set.</p> <p><pre><code>ON Event#forceactuate DO Backlog EnableOutputSet 0; Power 1; RuleTimer1 600 ENDON\nON Rules#Timer=1 DO EnableOutputSet 1 ENDON\nON Clock#Timer=1 DO Event forceactuate ENDON\n</code></pre> <pre><code>Timers 1\nTimer1 {\"Enable\":1,\"Mode\":0,\"Time\":\"08:00\",\"Window\":0,\"Days\":\"0100000\",\"Repeat\":1,\"Output\":1,\"Action\":3}\n</code></pre></p> <p>If you have a button on your controller, consider using it to trigger the <code>forceactuate</code> event. This allows you to request instant heating when feeling cold. Add to your rule: <pre><code>ON Button1#State DO Event forceactuate ENDON\n</code></pre></p>"},{"location":"Thermostat/#advanced-features","title":"Advanced features","text":""},{"location":"Thermostat/#multi-controller","title":"Multi-controller","text":"<p>The tasmota driver can be compiled to be used in devices with more than one output, allowing independent controllers for each one of the outputs. This feature has been successfully tested with a Sonoff 4CH PRO R2.</p> <p></p> <p>To increase the number of controller outputs, modify the value of the thermostat controller outputs in <code>my_user_config.h</code> or redefine it in <code>user_config_override.h</code> and compile a customized tasmota software.</p> <pre><code>#define THERMOSTAT_CONTROLLER_OUTPUTS         1         // Number of outputs to be controlled independently\n</code></pre>"},{"location":"Thermostat/#alternative-outputs-pwm-duty-cycle","title":"Alternative outputs: PWM duty cycle","text":"<p>The driver provides the possibility to read the duty cycle in % (0-100) of the actuated relay. Below the command to read the duty cycle can be found:</p> <pre><code>cmnd/Tasmota_Name/CTRDUTYCYCLEREAD\n</code></pre> <p>The physical switch of the output can as well be disabled via command. Below the command to disable it can be found:</p> <pre><code>cmnd/Tasmota_Name/ENABLEOUTPUTSET 0\n</code></pre>"},{"location":"Thermostat/#future-improvements","title":"Future improvements","text":""},{"location":"Thermostat/#cooling","title":"Cooling","text":"<p>The controller offers the possibility to switch from heating to cooling. Due to lack of cooling setup at the time of the development of the driver, this feature has however not been properly tested. Testers for cooling are therefore welcomed.</p> <p>The following MQTT command can be used to switch from heating (default) to cooling:</p> <pre><code>cmnd/Tasmota_Name/CLIMATEMODESET 1\n</code></pre>"},{"location":"Thermostat/#self-learning-process-of-the-ramp-up-controller-to-reduce-overshoot","title":"Self learning process of the \"Ramp-Up\" controller to reduce overshoot","text":"<p>The \"Ramp-Up\" controller evaluates the time constant of the system and predicts when to switch off the actuator to reach the desired temperature as fast as possible. This controller offers the best speed to reach the Setpoint. This controller will be improved by a learning process to evaluate how accurate the target value has been reached and therefore minimize gradually the overshoot. This feature will improve the behavior of the current controller which depending on the application and thermal capacity of the system might produce some overshoot. By default the controller set is the Hybrid one, enabling \"Ramp-Up\" for big temperature deltas between Setpoint and measured temperature and PI for smaller ones. If you are not satisfied with the performance of this controller in your system, you can disable it by MQTT and force the use of the PI controller exclusively (see Controller configuration section above).</p>"},{"location":"Thermostat/#pi-autotune","title":"PI Autotune","text":"<p>A PI autotune feature following the Zigler-Nichols closed loop algorithm has been implemented. This feature is untested and will be further developed soon. To enable it for testing purposes add the following define in <code>user_config_override.h</code> and compile a customized tasmota software.</p> <pre><code>#define USE_PI_AUTOTUNING // (Ziegler-Nichols closed loop method)\n</code></pre>"},{"location":"Thermostat/#example","title":"Example","text":"<p>The following chart shows the thermostat behavior in a forced air heated house:</p> <p></p> <p>The red shaded areas are where the thermostat commanded heat and the green line is the temperature. The temperature setpoint is 18 C at night and is then increased to 22.5 in the morning.  This step demonstrates the ramp part of the hybrid control algorithm of the thermostat.  Once the temperature is near the set point the thermostat switches to he PI algorithm.  In the evenings the temperature is increased to 23.5 C.</p>"},{"location":"Time-Proportioned-Output-support/","title":"Time Proportioned Output support","text":"<p>This extension adds a Time Proportioned Digital Output feature into the Tasmota software.</p> <p>The relay output on a Sonoff device provides (obviously) just on/off control.  Often it is desirable to be able to get a value between off and on, for example 25% power.  The conventional way to achieve this with devices such as electrical heaters or hot water radiators is to switch the device on for a period and then off for a period.  This extension allows a required power value between 0 and 1 to be specified via MQTT and the code will automatically cycle the relay on/off to achieve this power.  The s/w is configured with a Cycle Time that specifies the period.  So for example if a power value of 0.25 is specified with a cycle time of 12 minutes then the relay will be on for 3 minutes and off for 9 minutes every 12 minute period.</p> <p>The s/w includes a safety mechanism where the maximum time expected between MQTT power updates is specified. If this time is exceeded with no value being received then the power will revert to a specified fallback value.</p> <p>Instructions for setting it up and using it are in <code>xdrv_48_timeprop.ino</code>. The feature adds about 1.2k to the compiled code.</p> <p>Currently all configuration parameters must be setup at build time. If anyone wanted to add these to the MQTT and/or web interfaces a PR would be gratefully received.</p>"},{"location":"Timers/","title":"Timers","text":"<p>Timers allow you to automate your device based on time triggers</p> <p>To control a device locally 16 timers are programmable. They can be configured with the <code>Timer&lt;x&gt;</code> command followed by a JSON payload with optional parameters. For example:</p> <p>Timer 1 will ENABLE output of POWER1 at exactly 2:23 every Tue/Wed and Sat <pre><code>Timer1 {\"Enable\":1,\"Time\":\"02:23\",\"Window\":0,\"Days\":\"--TW--S\",\"Repeat\":1,\"Output\":1,\"Action\":1}\n</code></pre></p> <p>Timer 4 will TOGGLE output of POWER2 within a 30 minute window centered around 16:23 each Sunday, Monday, Thursday and Friday and will disable (disarm) after executing. <pre><code>Timer4 {\"Enable\":1,\"Time\":\"16:23\",\"Window\":15,\"Days\":\"SM00TF0\",\"Repeat\":0,\"Output\":2,\"Action\":2}\n</code></pre></p> <p>When <code>Mode 1</code> or <code>Mode 2</code> is used, <code>Latitude</code> and <code>Longitude</code> are required. In that case the <code>Time</code> value is always used as an offset from sunrise or sunset, so make sure to set it to <code>00:00</code> if no offset is wanted. Timer 1 will ENABLE output of POWER1 2 hours and 23 minutes before sunset every day of the week. <pre><code>Timer1 {\"Enable\":1,\"Mode\":2,\"Time\":\"-2:23\",\"Window\":0,\"Days\":\"11TW11S\",\"Repeat\":1,\"Output\":1,\"Action\":1}\n</code></pre></p>"},{"location":"Timers/#commands","title":"Commands","text":"Command Parameters Latitude <code>&lt;value&gt;</code> = set latitude Longitude <code>&lt;value&gt;</code> = set longitude Sunrise Sunrise/Sunset type<code>0</code> = Normal (default)<code>1</code> = Civil<code>2</code> = Nautical<code>3</code> = Astronomicalintroduced in version 12.1.1.5 Timers Timers control<code>0</code> = disable all timers\u2003  \u00bb v6.2.0<code>1</code> = enable all timers<code>2</code> = toggle all timers Timer&lt;x&gt; Parameters for Timer&lt;x&gt; where x = <code>1..16</code><code>0</code> = clear parameters for Timer&lt;x&gt;\u2003  \u00bb v6.2.0<code>1..16</code> = copy Timer&lt;y&gt; parameters to Timer&lt;x&gt;<code>{ \"name\":value ; .. }</code> = set all or individual parameters using JSON payload with names and values of data pairs from the table below"},{"location":"Timers/#json-payload-anatomy","title":"JSON Payload Anatomy","text":"JSON Name JSON Value Enable <code>0</code> = disarm or disable timer<code>1</code> = arm or enable timer Mode <code>0</code> = use clock time<code>1</code> = Use local sunrise time using <code>Longitude</code>, <code>Latitude</code> and <code>Time</code> offset<code>2</code> = use local sunset time using <code>Longitude</code>, <code>Latitude</code> and <code>Time</code> offset Time When <code>Mode 0</code> is active&gt;\u2002<code>hh:mm</code> = set time in hours <code>0 .. 23</code> and minutes <code>0 .. 59</code>When <code>Mode 1</code> or <code>Mode 2</code> is active&gt;\u2002<code>+hh:mm</code> or <code>-hh:mm</code> = set offset in hours <code>0 .. 11</code> and minutes <code>0 .. 59</code> from the time defined by sunrise/sunset. Window <code>0..15</code> = add or subtract a random number of minutes to <code>Time</code> Days <code>SMTWTFS</code> = set day of weeks mask where <code>0</code> or <code>-</code> = OFF and any different character = ON Repeat <code>0</code> = allow timer only once<code>1</code> = repeat timer execution Output <code>1..16</code> = select an output to be used if no rule is enabled Action <code>0</code> = turn output OFF <code>1</code> = turn output ON<code>2</code> = TOGGLE output<code>3</code> = RULE/BLINKIf the Tasmota Rules feature has been activated by compiling the code (activated by default in all pre-compiled Tasmota binaries), a rule with <code>Clock#Timer=&lt;timer&gt;</code> will be triggered if written and turned on by the user.If Rules are not compiled, BLINK output using BlinkCount parameters."},{"location":"Timers/#sunrise","title":"Sunrise","text":"<p>In order to set a timer to use the automatically calculated sunrise or sunset time, the latitude and longitude of the location as decimal degrees needs to be entered using the respective commands.</p> <p>By default, Tasmota calculates the times of the actual sunrise and sunset. Starting with version 12.1.1.5, it is possible instead to use the beginning and ending times of civil, nautical or astronomical twilight. In particular, civil twilight is the period of time when the sun is below the horizon, but artificial lighting is not yet needed.</p>"},{"location":"Timezone-Table/","title":"Timezone Table","text":""},{"location":"Timezone-Table/#tasmota-timezone-table","title":"Tasmota Timezone Table","text":"<p>Use this table to look up the correct <code>Timezone</code>, <code>TimeStd</code>, and <code>TimeDst</code> commands to configure a Tasmota device for your local timezone.</p> Timezone Commands Africa/Abidjan <code>Timezone +0:00</code> Africa/Accra <code>Timezone +0:00</code> Africa/Addis_Ababa <code>Timezone +3:00</code> Africa/Algiers <code>Timezone +1:00</code> Africa/Asmara <code>Timezone +3:00</code> Africa/Asmera <code>Timezone +3:00</code> Africa/Bamako <code>Timezone +0:00</code> Africa/Bangui <code>Timezone +1:00</code> Africa/Banjul <code>Timezone +0:00</code> Africa/Bissau <code>Timezone +0:00</code> Africa/Blantyre <code>Timezone +2:00</code> Africa/Brazzaville <code>Timezone +1:00</code> Africa/Bujumbura <code>Timezone +2:00</code> Africa/Cairo <code>Timezone +2:00</code> Africa/Casablanca <code>Timezone +1:00</code> Africa/Ceuta <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Africa/Conakry <code>Timezone +0:00</code> Africa/Dakar <code>Timezone +0:00</code> Africa/Dar_es_Salaam <code>Timezone +3:00</code> Africa/Djibouti <code>Timezone +3:00</code> Africa/Douala <code>Timezone +1:00</code> Africa/El_Aaiun <code>Timezone +1:00</code> Africa/Freetown <code>Timezone +0:00</code> Africa/Gaborone <code>Timezone +2:00</code> Africa/Harare <code>Timezone +2:00</code> Africa/Johannesburg <code>Timezone +2:00</code> Africa/Juba <code>Timezone +2:00</code> Africa/Kampala <code>Timezone +3:00</code> Africa/Khartoum <code>Timezone +2:00</code> Africa/Kigali <code>Timezone +2:00</code> Africa/Kinshasa <code>Timezone +1:00</code> Africa/Lagos <code>Timezone +1:00</code> Africa/Libreville <code>Timezone +1:00</code> Africa/Lome <code>Timezone +0:00</code> Africa/Luanda <code>Timezone +1:00</code> Africa/Lubumbashi <code>Timezone +2:00</code> Africa/Lusaka <code>Timezone +2:00</code> Africa/Malabo <code>Timezone +1:00</code> Africa/Maputo <code>Timezone +2:00</code> Africa/Maseru <code>Timezone +2:00</code> Africa/Mbabane <code>Timezone +2:00</code> Africa/Mogadishu <code>Timezone +3:00</code> Africa/Monrovia <code>Timezone +0:00</code> Africa/Nairobi <code>Timezone +3:00</code> Africa/Ndjamena <code>Timezone +1:00</code> Africa/Niamey <code>Timezone +1:00</code> Africa/Nouakchott <code>Timezone +0:00</code> Africa/Ouagadougou <code>Timezone +0:00</code> Africa/Porto-Novo <code>Timezone +1:00</code> Africa/Sao_Tome <code>Timezone +0:00</code> Africa/Timbuktu <code>Timezone +0:00</code> Africa/Tripoli <code>Timezone +2:00</code> Africa/Tunis <code>Timezone +1:00</code> Africa/Windhoek <code>Timezone +2:00</code> America/Adak <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-600; TimeDst 0,2,3,1,2,-540</code> America/Anchorage <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/Anguilla <code>Timezone -4:00</code> America/Antigua <code>Timezone -4:00</code> America/Araguaina <code>Timezone -3:00</code> America/Argentina/Buenos_Aires <code>Timezone -3:00</code> America/Argentina/Catamarca <code>Timezone -3:00</code> America/Argentina/ComodRivadavia <code>Timezone -3:00</code> America/Argentina/Cordoba <code>Timezone -3:00</code> America/Argentina/Jujuy <code>Timezone -3:00</code> America/Argentina/La_Rioja <code>Timezone -3:00</code> America/Argentina/Mendoza <code>Timezone -3:00</code> America/Argentina/Rio_Gallegos <code>Timezone -3:00</code> America/Argentina/Salta <code>Timezone -3:00</code> America/Argentina/San_Juan <code>Timezone -3:00</code> America/Argentina/San_Luis <code>Timezone -3:00</code> America/Argentina/Tucuman <code>Timezone -3:00</code> America/Argentina/Ushuaia <code>Timezone -3:00</code> America/Aruba <code>Timezone -4:00</code> America/Asuncion <code>Backlog0 Timezone 99; TimeStd 1,4,3,1,0,-240; TimeDst 1,1,10,1,0,-180</code> America/Atikokan <code>Timezone -5:00</code> America/Atka <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-600; TimeDst 0,2,3,1,2,-540</code> America/Bahia <code>Timezone -3:00</code> America/Bahia_Banderas <code>Timezone -6:00</code> America/Barbados <code>Timezone -4:00</code> America/Belem <code>Timezone -3:00</code> America/Belize <code>Timezone -6:00</code> America/Blanc-Sablon <code>Timezone -4:00</code> America/Boa_Vista <code>Timezone -4:00</code> America/Bogota <code>Timezone -5:00</code> America/Boise <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Buenos_Aires <code>Timezone -3:00</code> America/Cambridge_Bay <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Campo_Grande <code>Timezone -4:00</code> America/Cancun <code>Timezone -5:00</code> America/Caracas <code>Timezone -4:00</code> America/Catamarca <code>Timezone -3:00</code> America/Cayenne <code>Timezone -3:00</code> America/Cayman <code>Timezone -5:00</code> America/Chicago <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Chihuahua <code>Timezone -6:00</code> America/Ciudad_Juarez <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Coral_Harbour <code>Timezone -5:00</code> America/Cordoba <code>Timezone -3:00</code> America/Costa_Rica <code>Timezone -6:00</code> America/Creston <code>Timezone -7:00</code> America/Cuiaba <code>Timezone -4:00</code> America/Curacao <code>Timezone -4:00</code> America/Danmarkshavn <code>Timezone +0:00</code> America/Dawson <code>Timezone -7:00</code> America/Dawson_Creek <code>Timezone -7:00</code> America/Denver <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Detroit <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Dominica <code>Timezone -4:00</code> America/Edmonton <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Eirunepe <code>Timezone -5:00</code> America/El_Salvador <code>Timezone -6:00</code> America/Ensenada <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> America/Fort_Nelson <code>Timezone -7:00</code> America/Fort_Wayne <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Fortaleza <code>Timezone -3:00</code> America/Glace_Bay <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> America/Godthab <code>Timezone -2:00</code> America/Goose_Bay <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> America/Grand_Turk <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Grenada <code>Timezone -4:00</code> America/Guadeloupe <code>Timezone -4:00</code> America/Guatemala <code>Timezone -6:00</code> America/Guayaquil <code>Timezone -5:00</code> America/Guyana <code>Timezone -4:00</code> America/Halifax <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> America/Havana <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,1,-300; TimeDst 0,2,3,1,0,-240</code> America/Hermosillo <code>Timezone -7:00</code> America/Indiana/Indianapolis <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indiana/Knox <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Indiana/Marengo <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indiana/Petersburg <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indiana/Tell_City <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Indiana/Vevay <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indiana/Vincennes <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indiana/Winamac <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Indianapolis <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Inuvik <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Iqaluit <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Jamaica <code>Timezone -5:00</code> America/Jujuy <code>Timezone -3:00</code> America/Juneau <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/Kentucky/Louisville <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Kentucky/Monticello <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Knox_IN <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Kralendijk <code>Timezone -4:00</code> America/La_Paz <code>Timezone -4:00</code> America/Lima <code>Timezone -5:00</code> America/Los_Angeles <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> America/Louisville <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Lower_Princes <code>Timezone -4:00</code> America/Maceio <code>Timezone -3:00</code> America/Managua <code>Timezone -6:00</code> America/Manaus <code>Timezone -4:00</code> America/Marigot <code>Timezone -4:00</code> America/Martinique <code>Timezone -4:00</code> America/Matamoros <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Mazatlan <code>Timezone -7:00</code> America/Mendoza <code>Timezone -3:00</code> America/Menominee <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Merida <code>Timezone -6:00</code> America/Metlakatla <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/Mexico_City <code>Timezone -6:00</code> America/Miquelon <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-180; TimeDst 0,2,3,1,2,-120</code> America/Moncton <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> America/Monterrey <code>Timezone -6:00</code> America/Montevideo <code>Timezone -3:00</code> America/Montreal <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Montserrat <code>Timezone -4:00</code> America/Nassau <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/New_York <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Nipigon <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Nome <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/Noronha <code>Timezone -2:00</code> America/North_Dakota/Beulah <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/North_Dakota/Center <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/North_Dakota/New_Salem <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Nuuk <code>Timezone -2:00</code> America/Ojinaga <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Panama <code>Timezone -5:00</code> America/Pangnirtung <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Paramaribo <code>Timezone -3:00</code> America/Phoenix <code>Timezone -7:00</code> America/Port-au-Prince <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Port_of_Spain <code>Timezone -4:00</code> America/Porto_Acre <code>Timezone -5:00</code> America/Porto_Velho <code>Timezone -4:00</code> America/Puerto_Rico <code>Timezone -4:00</code> America/Punta_Arenas <code>Timezone -3:00</code> America/Rainy_River <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Rankin_Inlet <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Recife <code>Timezone -3:00</code> America/Regina <code>Timezone -6:00</code> America/Resolute <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Rio_Branco <code>Timezone -5:00</code> America/Rosario <code>Timezone -3:00</code> America/Santa_Isabel <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> America/Santarem <code>Timezone -3:00</code> America/Santiago This timezone uses a DST start/end rule that Tasmota does not support. America/Santo_Domingo <code>Timezone -4:00</code> America/Sao_Paulo <code>Timezone -3:00</code> America/Scoresbysund <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,1,-60; TimeDst 0,0,3,1,0,0</code> America/Shiprock <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> America/Sitka <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/St_Barthelemy <code>Timezone -4:00</code> America/St_Johns <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-210.0; TimeDst 0,2,3,1,2,-150.0</code> America/St_Kitts <code>Timezone -4:00</code> America/St_Lucia <code>Timezone -4:00</code> America/St_Thomas <code>Timezone -4:00</code> America/St_Vincent <code>Timezone -4:00</code> America/Swift_Current <code>Timezone -6:00</code> America/Tegucigalpa <code>Timezone -6:00</code> America/Thule <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> America/Thunder_Bay <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Tijuana <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> America/Toronto <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> America/Tortola <code>Timezone -4:00</code> America/Vancouver <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> America/Virgin <code>Timezone -4:00</code> America/Whitehorse <code>Timezone -7:00</code> America/Winnipeg <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> America/Yakutat <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> America/Yellowknife <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> Antarctica/Casey <code>Timezone +11:00</code> Antarctica/Davis <code>Timezone +7:00</code> Antarctica/DumontDUrville <code>Timezone +10:00</code> Antarctica/Macquarie <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Antarctica/Mawson <code>Timezone +5:00</code> Antarctica/McMurdo <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,720; TimeDst 1,0,9,1,2,780</code> Antarctica/Palmer <code>Timezone -3:00</code> Antarctica/Rothera <code>Timezone -3:00</code> Antarctica/South_Pole <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,720; TimeDst 1,0,9,1,2,780</code> Antarctica/Syowa <code>Timezone +3:00</code> Antarctica/Troll <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,0; TimeDst 0,0,3,1,1,120</code> Antarctica/Vostok <code>Timezone +6:00</code> Arctic/Longyearbyen <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Asia/Aden <code>Timezone +3:00</code> Asia/Almaty <code>Timezone +6:00</code> Asia/Amman <code>Timezone +3:00</code> Asia/Anadyr <code>Timezone +12:00</code> Asia/Aqtau <code>Timezone +5:00</code> Asia/Aqtobe <code>Timezone +5:00</code> Asia/Ashgabat <code>Timezone +5:00</code> Asia/Ashkhabad <code>Timezone +5:00</code> Asia/Atyrau <code>Timezone +5:00</code> Asia/Baghdad <code>Timezone +3:00</code> Asia/Bahrain <code>Timezone +3:00</code> Asia/Baku <code>Timezone +4:00</code> Asia/Bangkok <code>Timezone +7:00</code> Asia/Barnaul <code>Timezone +7:00</code> Asia/Beirut <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,0,120; TimeDst 0,0,3,1,0,180</code> Asia/Bishkek <code>Timezone +6:00</code> Asia/Brunei <code>Timezone +8:00</code> Asia/Calcutta <code>Timezone +5:30</code> Asia/Chita <code>Timezone +9:00</code> Asia/Choibalsan <code>Timezone +8:00</code> Asia/Chongqing <code>Timezone +8:00</code> Asia/Chungking <code>Timezone +8:00</code> Asia/Colombo <code>Timezone +5:30</code> Asia/Dacca <code>Timezone +6:00</code> Asia/Damascus <code>Timezone +3:00</code> Asia/Dhaka <code>Timezone +6:00</code> Asia/Dili <code>Timezone +9:00</code> Asia/Dubai <code>Timezone +4:00</code> Asia/Dushanbe <code>Timezone +5:00</code> Asia/Famagusta <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Asia/Gaza This timezone uses a DST start/end rule that Tasmota does not support. Asia/Harbin <code>Timezone +8:00</code> Asia/Hebron This timezone uses a DST start/end rule that Tasmota does not support. Asia/Ho_Chi_Minh <code>Timezone +7:00</code> Asia/Hong_Kong <code>Timezone +8:00</code> Asia/Hovd <code>Timezone +7:00</code> Asia/Irkutsk <code>Timezone +8:00</code> Asia/Istanbul <code>Timezone +3:00</code> Asia/Jakarta <code>Timezone +7:00</code> Asia/Jayapura <code>Timezone +9:00</code> Asia/Jerusalem This timezone uses a DST start/end rule that Tasmota does not support. Asia/Kabul <code>Timezone +4:30</code> Asia/Kamchatka <code>Timezone +12:00</code> Asia/Karachi <code>Timezone +5:00</code> Asia/Kashgar <code>Timezone +6:00</code> Asia/Kathmandu <code>Timezone +5:45</code> Asia/Katmandu <code>Timezone +5:45</code> Asia/Khandyga <code>Timezone +9:00</code> Asia/Kolkata <code>Timezone +5:30</code> Asia/Krasnoyarsk <code>Timezone +7:00</code> Asia/Kuala_Lumpur <code>Timezone +8:00</code> Asia/Kuching <code>Timezone +8:00</code> Asia/Kuwait <code>Timezone +3:00</code> Asia/Macao <code>Timezone +8:00</code> Asia/Macau <code>Timezone +8:00</code> Asia/Magadan <code>Timezone +11:00</code> Asia/Makassar <code>Timezone +8:00</code> Asia/Manila <code>Timezone +8:00</code> Asia/Muscat <code>Timezone +4:00</code> Asia/Nicosia <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Asia/Novokuznetsk <code>Timezone +7:00</code> Asia/Novosibirsk <code>Timezone +7:00</code> Asia/Omsk <code>Timezone +6:00</code> Asia/Oral <code>Timezone +5:00</code> Asia/Phnom_Penh <code>Timezone +7:00</code> Asia/Pontianak <code>Timezone +7:00</code> Asia/Pyongyang <code>Timezone +9:00</code> Asia/Qatar <code>Timezone +3:00</code> Asia/Qostanay <code>Timezone +6:00</code> Asia/Qyzylorda <code>Timezone +5:00</code> Asia/Rangoon <code>Timezone +6:30</code> Asia/Riyadh <code>Timezone +3:00</code> Asia/Saigon <code>Timezone +7:00</code> Asia/Sakhalin <code>Timezone +11:00</code> Asia/Samarkand <code>Timezone +5:00</code> Asia/Seoul <code>Timezone +9:00</code> Asia/Shanghai <code>Timezone +8:00</code> Asia/Singapore <code>Timezone +8:00</code> Asia/Srednekolymsk <code>Timezone +11:00</code> Asia/Taipei <code>Timezone +8:00</code> Asia/Tashkent <code>Timezone +5:00</code> Asia/Tbilisi <code>Timezone +4:00</code> Asia/Tehran <code>Timezone +3:30</code> Asia/Tel_Aviv This timezone uses a DST start/end rule that Tasmota does not support. Asia/Thimbu <code>Timezone +6:00</code> Asia/Thimphu <code>Timezone +6:00</code> Asia/Tokyo <code>Timezone +9:00</code> Asia/Tomsk <code>Timezone +7:00</code> Asia/Ujung_Pandang <code>Timezone +8:00</code> Asia/Ulaanbaatar <code>Timezone +8:00</code> Asia/Ulan_Bator <code>Timezone +8:00</code> Asia/Urumqi <code>Timezone +6:00</code> Asia/Ust-Nera <code>Timezone +10:00</code> Asia/Vientiane <code>Timezone +7:00</code> Asia/Vladivostok <code>Timezone +10:00</code> Asia/Yakutsk <code>Timezone +9:00</code> Asia/Yangon <code>Timezone +6:30</code> Asia/Yekaterinburg <code>Timezone +5:00</code> Asia/Yerevan <code>Timezone +4:00</code> Atlantic/Azores <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,1,-60; TimeDst 0,0,3,1,0,0</code> Atlantic/Bermuda <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> Atlantic/Canary <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Atlantic/Cape_Verde <code>Timezone -1:00</code> Atlantic/Faeroe <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Atlantic/Faroe <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Atlantic/Jan_Mayen <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Atlantic/Madeira <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Atlantic/Reykjavik <code>Timezone +0:00</code> Atlantic/South_Georgia <code>Timezone -2:00</code> Atlantic/St_Helena <code>Timezone +0:00</code> Atlantic/Stanley <code>Timezone -3:00</code> Australia/ACT <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/Adelaide <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,570.0; TimeDst 1,1,10,1,2,630.0</code> Australia/Brisbane <code>Timezone +10:00</code> Australia/Broken_Hill <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,570.0; TimeDst 1,1,10,1,2,630.0</code> Australia/Canberra <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/Currie <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/Darwin <code>Timezone +9:30</code> Australia/Eucla <code>Timezone +8:45</code> Australia/Hobart <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/LHI <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,2,630.0; TimeDst 1,1,10,1,2,660</code> Australia/Lindeman <code>Timezone +10:00</code> Australia/Lord_Howe <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,2,630.0; TimeDst 1,1,10,1,2,660</code> Australia/Melbourne <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/NSW <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/North <code>Timezone +9:30</code> Australia/Perth <code>Timezone +8:00</code> Australia/Queensland <code>Timezone +10:00</code> Australia/South <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,570.0; TimeDst 1,1,10,1,2,630.0</code> Australia/Sydney <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/Tasmania <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/Victoria <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,600; TimeDst 1,1,10,1,2,660</code> Australia/West <code>Timezone +8:00</code> Australia/Yancowinna <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,570.0; TimeDst 1,1,10,1,2,630.0</code> Brazil/Acre <code>Timezone -5:00</code> Brazil/DeNoronha <code>Timezone -2:00</code> Brazil/East <code>Timezone -3:00</code> Brazil/West <code>Timezone -4:00</code> CET <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> CST6CDT <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> Canada/Atlantic <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-240; TimeDst 0,2,3,1,2,-180</code> Canada/Central <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> Canada/Eastern <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> Canada/Mountain <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> Canada/Newfoundland <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-210.0; TimeDst 0,2,3,1,2,-150.0</code> Canada/Pacific <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> Canada/Saskatchewan <code>Timezone -6:00</code> Canada/Yukon <code>Timezone -7:00</code> Chile/Continental This timezone uses a DST start/end rule that Tasmota does not support. Chile/EasterIsland <code>Backlog0 Timezone 99; TimeStd 1,1,4,7,22,-360; TimeDst 1,1,9,7,22,-300</code> Cuba <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,1,-300; TimeDst 0,2,3,1,0,-240</code> EET <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> EST <code>Timezone -5:00</code> EST5EDT <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> Egypt <code>Timezone +2:00</code> Eire <code>Backlog0 Timezone 99; TimeStd 1,0,3,1,1,60; TimeDst 1,0,10,1,2,0</code> Etc/GMT <code>Timezone +0:00</code> Etc/GMT+0 <code>Timezone +0:00</code> Etc/GMT+1 <code>Timezone -1:00</code> Etc/GMT+10 <code>Timezone -10:00</code> Etc/GMT+11 <code>Timezone -11:00</code> Etc/GMT+12 <code>Timezone -12:00</code> Etc/GMT+2 <code>Timezone -2:00</code> Etc/GMT+3 <code>Timezone -3:00</code> Etc/GMT+4 <code>Timezone -4:00</code> Etc/GMT+5 <code>Timezone -5:00</code> Etc/GMT+6 <code>Timezone -6:00</code> Etc/GMT+7 <code>Timezone -7:00</code> Etc/GMT+8 <code>Timezone -8:00</code> Etc/GMT+9 <code>Timezone -9:00</code> Etc/GMT-0 <code>Timezone +0:00</code> Etc/GMT-1 <code>Timezone +1:00</code> Etc/GMT-10 <code>Timezone +10:00</code> Etc/GMT-11 <code>Timezone +11:00</code> Etc/GMT-12 <code>Timezone +12:00</code> Etc/GMT-13 <code>Timezone +13:00</code> Etc/GMT-14 This timezone has a UTC offset outside the range Tasmota supports. Etc/GMT-2 <code>Timezone +2:00</code> Etc/GMT-3 <code>Timezone +3:00</code> Etc/GMT-4 <code>Timezone +4:00</code> Etc/GMT-5 <code>Timezone +5:00</code> Etc/GMT-6 <code>Timezone +6:00</code> Etc/GMT-7 <code>Timezone +7:00</code> Etc/GMT-8 <code>Timezone +8:00</code> Etc/GMT-9 <code>Timezone +9:00</code> Etc/GMT0 <code>Timezone +0:00</code> Etc/Greenwich <code>Timezone +0:00</code> Etc/UCT <code>Timezone +0:00</code> Etc/UTC <code>Timezone +0:00</code> Etc/Universal <code>Timezone +0:00</code> Etc/Zulu <code>Timezone +0:00</code> Europe/Amsterdam <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Andorra <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Astrakhan <code>Timezone +4:00</code> Europe/Athens <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Belfast <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Belgrade <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Berlin <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Bratislava <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Brussels <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Bucharest <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Budapest <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Busingen <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Chisinau <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,120; TimeDst 0,0,3,1,2,180</code> Europe/Copenhagen <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Dublin <code>Backlog0 Timezone 99; TimeStd 1,0,3,1,1,60; TimeDst 1,0,10,1,2,0</code> Europe/Gibraltar <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Guernsey <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Helsinki <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Isle_of_Man <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Istanbul <code>Timezone +3:00</code> Europe/Jersey <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Kaliningrad <code>Timezone +2:00</code> Europe/Kiev <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Kirov <code>Timezone +3:00</code> Europe/Kyiv <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Lisbon <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Ljubljana <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/London <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Europe/Luxembourg <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Madrid <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Malta <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Mariehamn <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Minsk <code>Timezone +3:00</code> Europe/Monaco <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Moscow <code>Timezone +3:00</code> Europe/Nicosia <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Oslo <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Paris <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Podgorica <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Prague <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Riga <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Rome <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Samara <code>Timezone +4:00</code> Europe/San_Marino <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Sarajevo <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Saratov <code>Timezone +4:00</code> Europe/Simferopol <code>Timezone +3:00</code> Europe/Skopje <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Sofia <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Stockholm <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Tallinn <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Tirane <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Tiraspol <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,120; TimeDst 0,0,3,1,2,180</code> Europe/Ulyanovsk <code>Timezone +4:00</code> Europe/Uzhgorod <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Vaduz <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Vatican <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Vienna <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Vilnius <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Volgograd <code>Timezone +3:00</code> Europe/Warsaw <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Zagreb <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Europe/Zaporozhye <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,4,120; TimeDst 0,0,3,1,3,180</code> Europe/Zurich <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Factory <code>Timezone +0:00</code> GB <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> GB-Eire <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> GMT <code>Timezone +0:00</code> GMT+0 <code>Timezone +0:00</code> GMT-0 <code>Timezone +0:00</code> GMT0 <code>Timezone +0:00</code> Greenwich <code>Timezone +0:00</code> HST <code>Timezone -10:00</code> Hongkong <code>Timezone +8:00</code> Iceland <code>Timezone +0:00</code> Indian/Antananarivo <code>Timezone +3:00</code> Indian/Chagos <code>Timezone +6:00</code> Indian/Christmas <code>Timezone +7:00</code> Indian/Cocos <code>Timezone +6:30</code> Indian/Comoro <code>Timezone +3:00</code> Indian/Kerguelen <code>Timezone +5:00</code> Indian/Mahe <code>Timezone +4:00</code> Indian/Maldives <code>Timezone +5:00</code> Indian/Mauritius <code>Timezone +4:00</code> Indian/Mayotte <code>Timezone +3:00</code> Indian/Reunion <code>Timezone +4:00</code> Iran <code>Timezone +3:30</code> Israel This timezone uses a DST start/end rule that Tasmota does not support. Jamaica <code>Timezone -5:00</code> Japan <code>Timezone +9:00</code> Kwajalein <code>Timezone +12:00</code> Libya <code>Timezone +2:00</code> MET <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> MST <code>Timezone -7:00</code> MST7MDT <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> Mexico/BajaNorte <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> Mexico/BajaSur <code>Timezone -7:00</code> Mexico/General <code>Timezone -6:00</code> NZ <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,720; TimeDst 1,0,9,1,2,780</code> NZ-CHAT This timezone has a UTC offset outside the range Tasmota supports. Navajo <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> PRC <code>Timezone +8:00</code> PST8PDT <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> Pacific/Apia <code>Timezone +13:00</code> Pacific/Auckland <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,720; TimeDst 1,0,9,1,2,780</code> Pacific/Bougainville <code>Timezone +11:00</code> Pacific/Chatham This timezone has a UTC offset outside the range Tasmota supports. Pacific/Chuuk <code>Timezone +10:00</code> Pacific/Easter <code>Backlog0 Timezone 99; TimeStd 1,1,4,7,22,-360; TimeDst 1,1,9,7,22,-300</code> Pacific/Efate <code>Timezone +11:00</code> Pacific/Enderbury <code>Timezone +13:00</code> Pacific/Fakaofo <code>Timezone +13:00</code> Pacific/Fiji <code>Timezone +12:00</code> Pacific/Funafuti <code>Timezone +12:00</code> Pacific/Galapagos <code>Timezone -6:00</code> Pacific/Gambier <code>Timezone -9:00</code> Pacific/Guadalcanal <code>Timezone +11:00</code> Pacific/Guam <code>Timezone +10:00</code> Pacific/Honolulu <code>Timezone -10:00</code> Pacific/Johnston <code>Timezone -10:00</code> Pacific/Kanton <code>Timezone +13:00</code> Pacific/Kiritimati This timezone has a UTC offset outside the range Tasmota supports. Pacific/Kosrae <code>Timezone +11:00</code> Pacific/Kwajalein <code>Timezone +12:00</code> Pacific/Majuro <code>Timezone +12:00</code> Pacific/Marquesas <code>Timezone -9:30</code> Pacific/Midway <code>Timezone -11:00</code> Pacific/Nauru <code>Timezone +12:00</code> Pacific/Niue <code>Timezone -11:00</code> Pacific/Norfolk <code>Backlog0 Timezone 99; TimeStd 1,1,4,1,3,660; TimeDst 1,1,10,1,2,720</code> Pacific/Noumea <code>Timezone +11:00</code> Pacific/Pago_Pago <code>Timezone -11:00</code> Pacific/Palau <code>Timezone +9:00</code> Pacific/Pitcairn <code>Timezone -8:00</code> Pacific/Pohnpei <code>Timezone +11:00</code> Pacific/Ponape <code>Timezone +11:00</code> Pacific/Port_Moresby <code>Timezone +10:00</code> Pacific/Rarotonga <code>Timezone -10:00</code> Pacific/Saipan <code>Timezone +10:00</code> Pacific/Samoa <code>Timezone -11:00</code> Pacific/Tahiti <code>Timezone -10:00</code> Pacific/Tarawa <code>Timezone +12:00</code> Pacific/Tongatapu <code>Timezone +13:00</code> Pacific/Truk <code>Timezone +10:00</code> Pacific/Wake <code>Timezone +12:00</code> Pacific/Wallis <code>Timezone +12:00</code> Pacific/Yap <code>Timezone +10:00</code> Poland <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,3,60; TimeDst 0,0,3,1,2,120</code> Portugal <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> ROC <code>Timezone +8:00</code> ROK <code>Timezone +9:00</code> Singapore <code>Timezone +8:00</code> Turkey <code>Timezone +3:00</code> UCT <code>Timezone +0:00</code> US/Alaska <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-540; TimeDst 0,2,3,1,2,-480</code> US/Aleutian <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-600; TimeDst 0,2,3,1,2,-540</code> US/Arizona <code>Timezone -7:00</code> US/Central <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> US/East-Indiana <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> US/Eastern <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> US/Hawaii <code>Timezone -10:00</code> US/Indiana-Starke <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-360; TimeDst 0,2,3,1,2,-300</code> US/Michigan <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-300; TimeDst 0,2,3,1,2,-240</code> US/Mountain <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-420; TimeDst 0,2,3,1,2,-360</code> US/Pacific <code>Backlog0 Timezone 99; TimeStd 0,1,11,1,2,-480; TimeDst 0,2,3,1,2,-420</code> US/Samoa <code>Timezone -11:00</code> UTC <code>Timezone +0:00</code> Universal <code>Timezone +0:00</code> W-SU <code>Timezone +3:00</code> WET <code>Backlog0 Timezone 99; TimeStd 0,0,10,1,2,0; TimeDst 0,0,3,1,1,60</code> Zulu <code>Timezone +0:00</code> <p>This table was generated from the IANA Time Zone Database, version <code>2022g</code>.</p>"},{"location":"TouchPin/","title":"Capacitive Touch GPIO","text":"<p>The ESP32 has 10 capacitive touch GPIOs. It is possible to use a maximum number of 4 as a touch button.  </p> <p>Note</p> <p>Only special pins are usable and not all of these 10 pins are exposed on every dev-board. More info in this article</p> <p>After wiring a cable or electrode to a supported pin you have to configure it in Configure Module as \"button_tc\".  </p> <p>It is helpful to understand, what is going on under the hood: The continuous pin reading gives a unitless value, that will decrease (ESP32) or increase (ESP32-S2 and S3) when the pin (or connected cable) is touched.  As a result the touch pin driver will report a button touch when the pin reading crosses a threshold value which can be modified at runtime. The default values are very conservative in order to rule out unwanted actions. In most cases it will be desirable to do a calibration.   </p>"},{"location":"TouchPin/#commands","title":"Commands:","text":"Command Description TouchCal x x=button 1 .. 4. This plots the sensor values to the console, to get information regarding the setting of the <code>TouchThres</code> value. 0 will turn off calibration 255 will turn on calibration for all buttons TouchThres x Set touch threshold for all touch buttons, as determined via the <code>TouchCal</code> command. <p>While the calibration process is running, the raw data values will be printed in the console in the format:  PLOT: g, v, h,   <p>g - number of the graph (= number of the button) v - raw value of the corresponding touch pin h - number of continuous hits below current threshold, useful to see the number and length of \"spikes\", should be 0 without touching</p>"},{"location":"TouchPin/#tasmota-serial-plotter","title":"Tasmota Serial Plotter","text":"<p>This little tool should be helpful to get a feel for the touch values. It is located in the /tools folder of the Tasmota repository and needs the installation of \"mathplotlib\" and \"pyserial\" in the active python environment. It is confirmed to work under Windows 10 and macOS Catalina.  </p> <p>Example: <code>./serial-plotter.py --port /dev/XXX --baud 115200</code></p> <p>You can send commands to Tasmota via SEND-box.  </p> <p>For the touch button driver:</p> <p><code>TouchCal 255</code> - turns on calibration mode for all buttons  </p> <p> </p>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":""},{"location":"Troubleshooting/#debugging","title":"Debugging","text":""},{"location":"Troubleshooting/#logs","title":"Logs","text":"<p>For debugging purposes you can use Level 4 or Level 5 logging to the <code>MqttLog</code>, <code>WebLog</code>, <code>SerialLog</code>, or remote <code>SysLog</code>.  </p> <p>The logging level is set separately for each log destination. Log levels range from <code>0</code> to <code>5</code>. The higher the log level, the more information is logged. When troubleshooting your device it's recommended to set the logging level to <code>4</code>.</p>"},{"location":"Troubleshooting/#web-logging","title":"Web Logging","text":"<p>These show up in the Web UI Console (http://deviceip/cs). The default logging level for WebLog logging is 2.</p>"},{"location":"Troubleshooting/#serial-logging","title":"Serial Logging","text":"<p>Warning</p> <p>Never connect to serial while the device is connected to mains power. You can still collect the logs, but only when powering it via your serial connection.  </p> <p>Some devices use the serial port to control the relays or an MCU, so serial logging might interfere with control and even switch relays or lights.  </p> <p>The default logging level for SerialLog logging is 2. Unless explicitly set by a command (e.g., user input in the Console, a System#Boot triggered rule), SerialLog will be disabled automatically 10 minutes after the device reboots.</p> <p>Through a terminal program set the baud rate to 115200 (19200 for Sonoff Dual), both NL &amp; CR, and disable hardware flow control.  </p> <ul> <li>Debugging the Sonoff Pow is a bit tricky as the serial interface has a direct connection to one of the AC power lines. The schematic below uses two optocouplers separating the AC connection on the left from the low voltage connection on the right allowing for serial control at 115200 baud and uploading of firmware up to 57600 baud while AC is connected.  </li> </ul>"},{"location":"Troubleshooting/#crashdumps","title":"Crashdumps","text":"<p>If the ESP8266 crashes, it frequently dumps information about the crash out the serial port, so the process listed above to see serial logs can provide extremely useful information</p>"},{"location":"Troubleshooting/#syslog-logging","title":"Syslog Logging","text":"<p>If you have a Linux system, it is probably already running syslog. You just need to configure it to listen on the network. SysLog logging is disabled in Tasmota by default.</p> <p>On systems running rsyslog (most linux distros), edit the <code>/etc/rsyslog.conf</code> file. Adding (or uncommenting) the following lines will probably start making the logs show up in some file under <code>/var/log</code> <pre><code>$ModLoad imudp  \n$UDPServerRun 514  \n</code></pre></p> <p>If you do not have access to a Linux system, there are Microsoft Windows Syslog server options.</p>"},{"location":"Troubleshooting/#mqtt-logging","title":"MQTT Logging","text":"<p>These log messages show up as MQTT messages. MqttLog logging is disabled by default.  </p>"},{"location":"Troubleshooting/#mqtt-traffic","title":"MQTT traffic","text":"<p>To check the flow of MQTT traffic you can use MQTT Explorer which shows your entire MQTT traffic in an organised and structured way.</p> <p>Tasmota Device Manager offers an overview of all your Tasmota devices using MQTT protocol. You can manage them, use device features and do basic troubleshooting with ease. It also cleanly displays if your device is dropping from the network often or reboots unexpectedly.</p>"},{"location":"Troubleshooting/#running-out-of-ram","title":"Running out of RAM","text":"<p>This typically shows up in the device working when it first starts up (hitting the button toggles the relay), but some time later it either reboots or some function won't work.</p> <p>For example, you can't load the module configuration page.</p> <p>The only fix for this is to recompile the firmware and disable features you don't need. Known large features are web server and TLS, but other things to consider disabling if you don't need them are emulation support, Domoticz support and WS8212 support.</p>"},{"location":"Troubleshooting/#program-memory","title":"Program Memory","text":"<p>A 512K firmware binary size is a good \"target\" and rule of thumb for allowing future OTA firmware updates. Flashing over the air (OTA) requires that there is enough free program memory available to upload the new firmware along with the existing copy before the old copy is deleted. If your firmware binary is larger than the available free program memory, you can replace the existing firmware with a minimal functionality version of Tasmota (roughly 375K). This leaves enough free in the 1024K program memory for the final copy of the firmware (i.e., larger than 512K).</p> <p>Flashing Tasmota makes it simpler to update to newer versions because it is built for OTA upgrades. In fact, if the new firmware is larger than the available free memory, Tasmota's OTA process will, automatically, first replace the existing firmware with  \"minimal\" to then have enough space to put the new firmware in.</p> <p>If one is loading firmware only via the serial interface (i.e., wired), then theoretically you could load firmware as large at the program memory size. since you can erase the flash and then fill it to the rim with the new firmware. But then you'd be left with performing upgrades by having to have physical access to the device each time.</p>"},{"location":"Tutorials/","title":"Projects and Tutorials","text":"<p>Find more projects and share them in Show and Tell!</p>"},{"location":"Tutorials/#gallery-of-projects-running-tasmota","title":"Gallery of projects running Tasmota","text":"Click on name for larger image TrDA's 3xINA219 (Solar+Sensor+Display) TrDA's Motorised Roller Blinds Solar and battery power monitoring stationSchematic Water tank monitor Multisensor Aquarium controller"},{"location":"Tutorials/#external-links-to-coolamazing-projects-made-with-tasmota","title":"External Links to cool/amazing projects made with Tasmota","text":"<ul> <li>LEGO Nightstand Switch </li> <li>Tasmota based drop pin door lock</li> </ul>"},{"location":"Tutorials/#installation-tutorials","title":"Installation Tutorials","text":"<ul> <li>Installing Tasmota using Tasmotizer</li> </ul>"},{"location":"Tutorials/#video-tutorials","title":"Video tutorials","text":"<ul> <li>Tasmota and Tasmotizer Easy Flashing Guide for ESP8266 devices</li> <li>Installation tutorial of Tasmota using PlatformIO made by QuickPi.</li> <li>True 3-Way Smart Switch</li> <li>Make a motion activated switch with temperature and humidity sensor</li> <li>Sonoff Basic as UK Light Switch</li> </ul>"},{"location":"Tutorials/#3d-printed-cases","title":"3D Printed Cases","text":"<p>Don't have 3D printer? Depending on where you live, you may be able to find a third party to print the model for you. Some schools and public libraries provide printing services. Search for a printing service using 3D Hubs or send your design to a service like Shapeways. - Thingiverse - Yeggi</p>"},{"location":"Tutorials/#related-youtube-channels","title":"Related YouTube Channels","text":"<ul> <li>DigiblurDIY - Great and Easy Tasmota related Videos</li> <li>DrZzs - Great and Easy Tasmota related Videos</li> <li>Super House - Home Automation Tutorials</li> <li>The Hook Up - Home Automation Tutorials</li> <li>BRUH Automation - Home Automation Tutorials</li> <li>Burns Home Automation - Home Automation Tutorials</li> <li>Step to Step Tutorials - Hobbytronics Tutorials</li> <li>Kiril Peyanski - Tasmota Tutorials</li> </ul>"},{"location":"Tutorials/#non-english-tutorials","title":"Non-English Tutorials","text":"<ul> <li>ES - Cayetano YouTube Channel</li> <li>DE - Tuya Ger\u00e4te Flashen</li> <li>DE - ESP8266 flashen von A - Z</li> <li>FR - Ajouter un bouton physique au Sonoff basic</li> <li>IT - Installazione firmware Tasmota su Sonoff Basic</li> <li>IL - Hebrew - Install Tasmota firmware on all Sonoff devices</li> <li>?? - Yuval Mejahez - Tasmota Flash tutorials Channel</li> </ul>"},{"location":"Tuya-Convert/","title":"Tuya Convert","text":"<p>Tuya devices are sold under numerous brand names but they're all identifiable by the fact that they connect with these phone apps: \"Smart Life\" or \"Tuya Smart\". They incorporate different types of Tuya Wi-Fi modules internally.</p> <p>Tuya has begun manufacturing some Wi-Fi modules using a Realtek RTL8710BN Wi-Fi SOC instead of an ESP82xx chip. Tasmota cannot run on Realtek devices and there are no plans on supporting them.  </p> <p>Tuya-Convert is the most successful method of flashing Tuya modules without opening the device and soldering. </p> <p>Tuya-Convert comes with <code>tasmota-lite.bin</code> build which includes basic Tasmota features required for normal operation with Tuya devices, while removing sensors, IR, RF and home automation integration support for reduced filesize. It is recommended to upgrade to a full build of the firmware (<code>tasmota.bin</code>) if needed.</p> <p>To ensure Tasmota runs reliably execute the command <code>reset 5</code> after Tuya-Convert is finished and Tasmota is up and running. Doing this removes fragments of the original firmware left in flash which can create issues in the future. After all that is done you can proceed with the needed configuration of your device.</p> <p>Help and troubleshooting for Tuya-Convert is done on Tuya-Convert's Github.</p> <p>Danger</p> <p>The fact that you can flash Tasmota on your device does not mean all of its features are currently supported. Please research before     purchasing to see if other users have successfully flashed the device and are able to use it fully</p> <ul> <li>Tuya-Convert video walkthrough</li> <li>TuyOTA walkthrough</li> <li>Mock Tuya Cloud - A general purpose framework for interacting with Tuya devices without the Tuya operated cloud.</li> <li>Tuya API - A library for communicating with devices that use the Tuya cloud network.</li> </ul>"},{"location":"TuyaMCU-Devices/","title":"TuyaMCU Devices","text":"<p>There are several Tuya dimmer and switch variants made by various manufacturers. The switches range from 1 to 8 gangs. The dimmers are usually 1 gang. They dim mains voltage for various lighting types: incandescent, CFL, and LED. Consult the specific device for the type of bulbs and capacity it supports as well as the bulbs themselves to verify they support dimming.</p>"},{"location":"TuyaMCU-Devices/#identification-and-technical-details","title":"Identification and Technical details","text":"<p>The basic identification of a Tuya device is when the device information references the \"Tuya Smart\", \"SmartLife\", or \"Smart Living\" app. These switches and dimmers are based on a Tuya TYWE3S Wi-Fi PCB module along with an MCU. TYWE3S is based on the ESP8266 which is supported by Tasmota.</p> <p>Wiki page for TYWE3S</p> <p>The TYWE3S module mostly takes care of Wi-Fi and software features while the MCU controls the actual hardware (buttons, relays, dimmer, power measurement, etc). The MCU is interfaced to TYWE3S using the serial interface which connects to the Rx and Tx pins.</p> <p>The easiest way to identify if your switch or dimmer uses MCU is by using a continuity tester (multimeter, ohmmeter) and checking continuity from the Rx and Tx pins on TYWE3S to any other chip. Then check the datasheet of that chip to see if it is an MCU.</p>"},{"location":"TuyaMCU-Devices/#flashing-preparation","title":"Flashing - Preparation","text":"<p>To boot the TYWE3S in flashing mode, GPIO0 needs to be connected to GND while powering up. It can be left grounded for the entire process. Flashing a TYWE3S connected to a MCU is a bit trickier than one without MCU. This is due the same Rx Tx pins used by MCU and serial programmer for flashing. The TYWE3S cannot be booted to flash mode with MCU sending data over the same pins. To be able to do that, we need to disable MCU from sending data over Rx and Tx pins. There are few ways to do it:  </p> <ol> <li>Disconnect TYWE3S module from the rest of board. (Naah, too much work)</li> <li>Just break the Rx track from MCU to TYWE3S, flash and then reconnect. (Messy work, we want cleaner approach)</li> <li>Just keep MCU disabled while flashing TYWE3S without any soldering / cutting. (We like that)</li> </ol> <p>The easiest is to keep MCU disabled is by identifying the NRST/RST (Reset) pin of the MCU from its datasheet and connect it to GND for the entire flashing process. This will keep MCU disabled while you flash TYWE3S. If there are some contacts or test points in switches that connect to the MCU, you might be lucky to find contacts for RST that you can easily solder onto. For some devices you need to disconnect RST after boot. An example for such a device is the Ketotek KTEM06.</p>"},{"location":"TuyaMCU-Devices/#tywe3s-connection-options","title":"TYWE3S Connection Options","text":"<ol> <li>3D print a flashing Jig and use pogo pins to make nice and easy to use flashing jig</li> <li>Solder wires directly onto TYWE3S</li> <li>Use a jumper header like the one below and bend the pins to match VCC, Rx Tx GPIO0 and GND. You can just press the jumper header to the contacts during the flashing process</li> </ol>"},{"location":"TuyaMCU-Devices/#flashing-process","title":"Flashing - Process","text":"<p>Once you are done identifying the pins and ready to connect, BEFORE connecting USB to PC you need to connect them as follows: NOTE : Use 3.3V NOT 5V </p> TYWE3S SerialProgrammer RX TX TX RX GPIO0 GND GND GND VCC 3.3V <p>If an MCU is present, bridge RST to GND on the MCU</p> <p>Use a 6.6.0.10 Tasmota version or higher. There are lots of Tuya Serial fixes / features added in there and the tutorial below expects them.</p> <p>Now you need to follow the commands explained in the flashing tutorial.</p> <p>TIP: If you are using jumper headers use <code>sleep 15 &amp;&amp;</code> before your commands, this would free your hand and give you some time to set the jumper pins and connect the USB to PC.</p>"},{"location":"TuyaMCU-Devices/#configuration","title":"Configuration","text":"<ol> <li>Once Tasmota is flashed on the TYWE3S, just disconnect GND -&gt; GPIO0 (and RST if there is an MCU), and power your device again from USB. </li> <li>On your PC, you should see a Wi-Fi network named <code>sonoff-xxxx</code> where <code>xxxx</code> is a number from the ESP's MAC address.</li> <li>Connect to it and go to 192.168.4.1 in your browser. Enter the Wi-Fi credentials for your network and click save.</li> <li>Connect your PC back to your network. Now you need to find the IP of newly connected Tasmota device. Refer to this very good video from SuperHouseTV (ignore flashing information) about configuring Tasmota.</li> <li>Once you get to the Tasmota configuration you need to select <code>TuyaMCU</code> module assign GPIO components as indicated below depending on your hardware. You already know the pin connections to the MCU.</li> </ol> GPIO Component 01 Tuya Rx (108) 03 Tuya Tx (107) 13 Tuya Rx (108) 15 Tuya Tx (107) <ol> <li>If the device is connecting fine to your network, now is the time to power it down and re-assemble it. Connect a test bulb (or to the final place if you don't mind testing there)</li> <li>Once this is saved and device is rebooted. Open the Tasmota configuration page and you should be able to use the Toggle button to toggle the dimmer or at least one of the gangs in a multi gang switch.</li> <li>Follow the process here depending on switch or dimmer.</li> </ol>"},{"location":"TuyaMCU-Devices/#product-specific-guides","title":"Product Specific guides","text":""},{"location":"TuyaMCU-Devices/#otim-dimmer","title":"Otim Dimmer","text":"<p>This Device is based on a Tuya Wi-Fi Module. Refer to \"MCU Based Tuya Dimmers and Switches\" for details.  </p> <p> </p> <p>Flashing and Setup Video Guide</p> <p>These devices use a Tuya TYWE3S Wi-Fi PCB module.  Once the switch is carefully popped open you will need to remove the ribbon cables for flashing and ease of soldering.  An easy soldering method is to take several Dupont style jumper wires, cut one end off, and apply a bit of solder to each stripped end. This will keep the wire flexible and prevent any circuit board pads from ripping off. Apply a bit of solder to each pad necessary to flash (double check your pin-outs).  Once the wire and pad have solder simply put the two together and apply a bit of heat and they will join together.  </p> <p> </p> <p>Attach the GPIO0 wire to ground during initial boot to flash. You may need to also connect MCU RST to GND during initial boot to get it into programming mode as described here. A 3-pin header bridged together works great with GPIO0, GND and the GND from the USB flasher attached. (TX pin to RX pin and RX pin to TX pin on USB flash adapter). Verify that you are using 3.3volts to flash, NOT 5V!</p>"},{"location":"TuyaMCU-Devices/#product-links","title":"Product Links","text":"<ul> <li>Oittm</li> <li>Moes DS01 (Template)</li> <li>Konesky</li> <li>Heygo</li> </ul>"},{"location":"TuyaMCU-Devices/#costco-charging-essentials","title":"Costco Charging Essentials","text":"<p>This devices use a Tuya TYWE1S Wi-Fi PCB module. And it uses U1TX (GPIO15) and U1RX (GPIO13) to communicate between ESP8266 and MCU, no other GPIO is used in this device.</p>"},{"location":"TuyaMCU-Devices/#flashing","title":"Flashing","text":"<p>The CE dimmer uses standard Tuya GPIO</p>"},{"location":"TuyaMCU-Devices/#touch-eu-and-us-multiple-manufacturers","title":"Touch (EU and US) - Multiple manufacturers","text":""},{"location":"TuyaMCU-Devices/#flashing_1","title":"Flashing","text":"<p>The procedure is similar to above, additionally NRST must be connected to GND during flashing.</p>"},{"location":"TuyaMCU-Devices/#optional-configuration-recommended","title":"Optional configuration (recommended)","text":"<p><code>LedState 0</code> Only use the green LED for Wi-Fi/MQTT connectivity status.  </p>"},{"location":"TuyaMCU-Devices/#product-links_1","title":"Product Links","text":"<ul> <li>AIGLEN</li> <li>ALLOMN</li> <li>MakeGood</li> </ul>"},{"location":"TuyaMCU-Devices/#zemismart-curtain-motor","title":"Zemismart Curtain Motor","text":"<p>Curtain motors come in a confusing array. This one has a little Wi-Fi dongle, that looks like a USB stick. But it talks using <code>9600 8N1</code>, not USB. This means we can unplug the Tuya Dongle and flash it without worrying about the PCI micro. Excellent.</p> <p></p> <p></p> <p><code>U1RX</code> and <code>U1TX</code>, top right of the module are connected to the USB plug on <code>D-</code> and <code>D+</code> respectively. This dongle uses a Tuya TYWE1S, which is an ESP8266 with 2MB flash. USB3 pin <code>R-</code> connects the onboard LED to the MCU via a 4k7 resistor. <code>R+</code>, <code>T+</code>, and <code>T-</code> are all unused and unconnected on the motor PCB, so I liberated them for soldering to <code>GPIO0</code>, <code>U0RX</code> and <code>U0TX</code>, to flash the chip.</p> <p></p> <ul> <li>short GPIO0 and flash Tasmota</li> <li>Connect to your Wi-Fi and get MQTT and SSL working</li> <li>change to TuyaMCU with <code>module 54</code> (will reboot)</li> <li>Switch from U0RX/TX to U1RX/TX with <code>backlog gpio1 0; gpio3 0; gpio15 107; gpio13 108</code> (will reboot)</li> <li>Treat DpId 0x65 as a Dimmer with <code>tuyamcu 21,101</code></li> <li>Allow the dimmer to get down to 1% with <code>setoption69 0</code></li> </ul> <p>And done. The curtain motor now presents as a Dimmer, with 100% full brightness = fully closed, and 0% full darkness = fully open. </p> <p>The curtain motor also presents DpId 0x66 as a single event \"Full Open\" <code>00</code>, \"Full Close\" <code>01</code>, and \"Stop\" <code>02</code> command; but as of September 2019, I can't see how to get that working.</p> <p>The curtain motor also presents DpId 0x67 as a Boolean. I have only seen value 0x01 in all my prodding. <code>55 aa 00 07 00 05 67 01 00 01 01 75</code> = 07 Status, 0005 length, 67 DpId, 01 type, 0001 length, 01 value, 75 checksum</p>"},{"location":"TuyaMCU-Devices/#product-links_2","title":"Product Links","text":"<ul> <li>ZemiSmart</li> </ul>"},{"location":"TuyaMCU-Devices/#dm_wf_mdv4-leading-edge-dimmer","title":"DM_WF_MDV4 Leading edge dimmer","text":"<p>This is a 240V Leading Edge Dimmer with a TYWE3S controller and an STM8 MCU</p>"},{"location":"TuyaMCU-Devices/#flashing_2","title":"Flashing","text":"<p>The simplest approach is to use Tuya-Convert to flash the device</p> <p>In order to flash via serial, the NRST pin of the STM8 needs to be grounded upon boot to disable it, this is brought out to a header pin, along with ground and VCC from the TYWE3S. Confirm by checking continuity with a multimeter</p> <p>IO0 from the TYWE3s also needs to be grounded upon boot, otherwise it's normal tasmota flashing procedure.</p> <p>Header J3 (STM8 debug interface) pins from left to right (Pin 1 is the square shaped) *VCC *STM8 SWIM (Pin 18) *Ground *STM8 NRST (Pin 4)</p> <p></p> <p></p> <p></p>"},{"location":"TuyaMCU-Devices/#config","title":"Config","text":"<p>As per main TuyaMCU page using</p> GPIO Component 01 Tuya Rx (108) 03 Tuya Tx (107) <p>Note that the push button is wired to the MCU (PA3 Pin 10) so it cannot be used by Tasmota. Similarly the devices has a bi-color LED where one color (green) is wired to the TYWE3S (GPIO14) and the other one (red) to the MCU (PC5 Pin15).</p>"},{"location":"TuyaMCU-Devices/#more-information","title":"More information","text":"<p>Bought from ebay</p> <p>More information on TYWE3S]</p>"},{"location":"TuyaMCU-Devices/#ketotek-ktem06","title":"Ketotek KTEM06","text":"<p>The KTEM06 is a single phase energy meter with a relay for switching for DIN rail mounting. This device is identical in construction with the TYWE3S-based version of HIKING DDS238-2.</p> <p></p>"},{"location":"TuyaMCU-Devices/#flashing_3","title":"Flashing","text":"<p>Open the case to see the board with the display and the TYWE3S module on the backside. Remove the board and flip it around.</p> <p></p> <p>There is no need to unsolder the module from the MCU for flashing. You need to solder 6 wires to the module at the marked pins.</p> <p></p> PIN Description G GND V 3.3V TXD to RXD of programmer RXD to TXD of programmer GPIO0 connect to GND while flashing RST connect to GND for booting, disconnect for flashing <p>Flashing procedure</p> <ol> <li> <p>As usual, connect GND (G), RXD and TXD with the serial programmer. Connect GPIO0 to GND and keep it connected while flashing.</p> </li> <li> <p>Connect RST to GND</p> </li> <li> <p>Prepare Tasmotizer or your preferred tool for flashing.</p> </li> <li> <p>Connect V to 3.3V</p> </li> <li> <p>After 2-3 seconds disconnect RST</p> </li> <li> <p>Start flashing</p> </li> </ol>"},{"location":"TuyaMCU-Devices/#configuration_1","title":"Configuration","text":"<p>The ESP will not boot if you try to supply it with power from the serial programmer and having the display board unmounted. Unsolder the wires, mount the display board and close the case. Apply power to the connectors #1 and #3. Configure Wifi and complete the configuration with the information on Ketotek Single Phase Energy Monitor DIN Relay (KTEM06)</p>"},{"location":"TuyaMCU-Devices/#remarks","title":"Remarks","text":"<p>Different than described elsewhere it was not helpful to connect EN to 3.3V. </p> <p>RST needed to be disconnected from GND to start flashing.</p> <p>Some users report that flashing does not work because the serial programmer does not supply enough power. Using serial programmers based on CH340 seem to work. A workaround is to use an additional power supply.</p>"},{"location":"TuyaMCU-Devices/#product-links_3","title":"Product Links","text":"<p>KETOTEK Smart 1 Phasen Stromz\u00e4hler HIKING DDS238-2</p>"},{"location":"TuyaMCU/","title":"TuyaMCU","text":"<p>TuyaMCU - Module (54) is configured for devices with a Tuya Wi-Fi module and a secondary MCU. </p> <p>Originally, in those devices, the Wi-Fi module takes care of network and software features. Meanwhile, the MCU controls the hardware based on commands received from the Wi-Fi module or built-in controls (buttons, switches, remotes and similar) and reports the status back to the Wi-Fi module. </p> <p>TuyaMCU module facilitates communication between Tasmota and the MCU using Tuya Serial Port Communication Protocol:</p> <ul> <li><code>TuyaMCU</code> command maps device functions to Tasmota components </li> <li><code>TuyaSend&lt;x&gt;</code> command calculates and sends complex serial commands using only two parameters</li> <li><code>TuyaReceived</code> MCU response interpreted and publishes as status message and a JSON payload to an MQTT topic </li> </ul>"},{"location":"TuyaMCU/#tuyamcu-command","title":"TuyaMCU Command","text":"<p>Command <code>TuyaMCU</code> is used to map Tasmota components to Tuya device dpId's. </p> <p>Warning</p> <p>Used only if your device is defined as module <code>TuyaMCU (54)</code>.</p> <p>Command value consists of two comma separated parameters: fnId and dpId.  <pre><code>TuyaMCU &lt;fnId&gt;,&lt;dpId&gt;\n</code></pre> where <code>&lt;fnId&gt;</code> is a Tasmota component and <code>&lt;dpId&gt;</code> is the dpId to map the function to.</p> <p>Example</p> <p><code>TuyaMCU 11,1</code> maps Relay1 (fnId 11) to dpId 1.</p> <p>If any existing entry with same <code>fnId</code> or <code>dpId</code> is already present, it will be updated to the new value.    </p> <p>Entry is removed when <code>fnId</code> or <code>dpId</code> is <code>0</code>.     </p> <p>When no parameters are provided <code>TuyaMCU</code> prints the current mapped values.    </p>"},{"location":"TuyaMCU/#dpid","title":"dpId","text":"<p>All the device functions controlled by the MCU are identified by a dpId.   Whenever a command is sent to the MCU, this dpId determines which component needs to be controlled and the applies when the status is received from MCU. </p> <p>There is no way to autodetect dpId's and their functions.</p> <p>To assist in the process of determining what dpId does what, there is a bookmarklet available that can be used on the console screen. This will send the <code>weblog</code> and other required commands automatically, and present the TuyaMCU information in a single table allowing for easier testing.</p> <p>Use this procedure to determine which dpId's are available:</p> <ol> <li>Go to <code>Configure</code> -&gt; <code>Console</code> option in Tasmota web interface.</li> <li>Use command <code>weblog 4</code> to enable verbose logging in web interface.</li> <li>Observe the log. After every 9-10 seconds you should see Tuya specific messages labelled as <code>TYA:</code>.</li> </ol> <pre><code>{\"TuyaReceived\":{\"Data\":\"55AA0107000501010001000F\",\"Cmnd\":7,\"CmndData\":\"0101000100\",\"DpType1Id1\":0,\"1\":{\"DpId\":1,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=11 is set for dpId=1\nTYA: RX Relay-1 --&gt; MCU State: Off Current State:Off\n{\"TuyaReceived\":{\"Data\":\"55AA01070005020100010010\",\"Cmnd\":7,\"CmndData\":\"0201000100\",\"DpType1Id2\":0,\"2\":{\"DpId\":2,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=2\n{\"TuyaReceived\":{\"Data\":\"55AA01070005030100010011\",\"Cmnd\":7,\"CmndData\":\"0301000100\",\"DpType1Id3\":0,\"3\":{\"DpId\":3,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=3\n{\"TuyaReceived\":{\"Data\":\"55AA01070005040100010012\",\"Cmnd\":7,\"CmndData\":\"0401000100\",\"DpType1Id4\":0,\"4\":{\"DpId\":4,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=4\n</code></pre> <ol> <li>Observe all lines printed as <code>TYA: FnId=0 is set for dpId=XXX</code> and note all dpId values. </li> </ol> <p>Now that you have a list of usable dpId's you need to determine what their functions are:</p> <ol> <li>Consulting our list of commonly used dpId's and existing device configurations</li> <li>Observing Tasmota logs while activating features of the device (with a remote or on device controls) and correlating log messages and looking at the DpIdType and DpIdData values (eg: boolean vs value)</li> <li>Extrapolating possible function of the dpId based on Data Type and Function Command, then testing using <code>TuyaSend&lt;x&gt;</code></li> </ol>"},{"location":"TuyaMCU/#fnid","title":"fnId","text":"<p>Identifier used in <code>TuyaMCU</code> command to map a dpId to a Tasmota component.</p> Component FnId Note Switch1 to Switch4 1 to 4 Map only to dpId with on / off function Relay1 to Relay8 11 to 18 Map only to dpId with on / off function Lights 21 to 28 21 for Dimmer22 for Dimmer223 for CCT Light24 for RGB light25 for white light26 for light mode set (0 = white and 1 = color)27 to report the state of Dimmer128 to report the state of Dimmer2 Power Monitoring 31 to 33 31 for Power (in deci Watt)32 for Current (in milli Amps)33 for Voltage (in deci Volt) Relay1i to Relay8i 41 to 48 Map only to dpId with on / off function Battery powered sensor mode 51 Battery powered devices use a slightly different protocol Enum dpId 61 to 64 Range for each enum is 0 to 31 Sensors 71 to 79 Range of sensors (temperature, humidity, co2, gas, etc) Timers 81 to 84 Manage integer based timers Extra functions 97 to 99 97 for motor direction98 for error logging (report only)99 as a dummy function <p>Note</p> <p>This component is under active development which means the function list may expand in the future.</p> <p>Since the majority of devices have a power on/off functions on dpId 1 it's mapped to fnId 11 (Relay1) by default. If you don't need it, map it to fnId 99  with <code>TuyaMcu 99,1</code></p> <p>Danger</p> <p>Mapping a relay or switch to a dpId that is not a simple on/off function (data Type 1) might result in unwanted power toggling (i.e. dpId sends value of 4 which toggles the relay to Power 4 aka blink mode)</p>"},{"location":"TuyaMCU/#tuyasend-command","title":"TuyaSend Command","text":"<p>Command <code>TuyaSend</code> is used to send commands to dpId's. It is required for dpId's that shouldn't be mapped to a fnId. </p> <p>With this command it is possible to control every function of the dpId that is controllable, providing you know its data type and data length. With them provided, the rest of the protocol command is calculated.</p> <p>Command's value consists of two comma separated parameters: dpId and data. </p> <p><code>TuyaSend&lt;x&gt; dpId,data</code></p>"},{"location":"TuyaMCU/#tuyasend0","title":"<code>TuyaSend0</code>","text":"<p>Used without payload to query states of dpID's.</p>"},{"location":"TuyaMCU/#tuyasend1","title":"<code>TuyaSend1</code>","text":"<p>Sends boolean (Type 1) data (<code>0/1</code>) to dpId (Max data length 1 byte)</p> <p>Example</p> <p><code>TuyaSend1 1,0</code> sends value <code>0</code> to dpId=1 switching the device off</p>"},{"location":"TuyaMCU/#tuyasend2","title":"<code>TuyaSend2</code>","text":"<p>Sends integer or 4 byte (Type 2) data to dpId (Max data length 4 bytes)</p> <p>Example</p> <p><code>TuyaSend2 14,100</code> sends value <code>100</code> to dpId=14 setting timer to 100 minutes</p>"},{"location":"TuyaMCU/#tuyasend3","title":"<code>TuyaSend3</code>","text":"<p>Sends an ASCII string (Type 3) data to dpId (Max data length? Not known at this time).  </p> <p>Warning</p> <p>Note that when sending color values, the MCU may interpret lower case and upper case hex codes differently. You may need to test with your specific MCU to ensure that the values sent properly render the color you desire.  </p> <p>Example</p> <p><code>TuyaSend3 108,ff0000646464ff</code> sends a 14 char hex string to dpId=108 (Type 3) containing RGBHSV values to control a light</p>"},{"location":"TuyaMCU/#tuyasend4","title":"<code>TuyaSend4</code>","text":"<p>Sends enum (Type 4) data (<code>0/1/2/3/4/5</code>) to dpId (Max data length 1 bytes)</p> <p>Example</p> <p><code>TuyaSend4 103,2</code> sends value <code>2</code> to dpId=103 to set fan speed to high</p>"},{"location":"TuyaMCU/#tuyasend5","title":"<code>TuyaSend5</code>","text":"<p>Sends an HEX string (Type 3) data to dpId (Max data length? Not known at this time). Does NOT require <code>0x</code> prefix.</p> <p>Example</p> <p><code>TuyaSend5 108, ABCD</code> sends a string of 2 bytes defined by hex codes to dpId=108</p> <p>Differences between <code>TuyaSend3</code> and <code>TuyaSend5</code>:</p> <ul> <li><code>TuyaSend3 108, ABCD</code> sends <code>55aa000600086c030004414243448a</code> where the payload is <code>41424344</code> which is the ASCII bytes representing the string <code>ABCD</code></li> <li><code>TuyaSend5 108, ABCD</code> sends <code>55aa000600066c030002abcdf4</code> where the payload is a <code>abcd</code> which is a string of 2 bytes 0xAB and 0xCD </li> </ul>"},{"location":"TuyaMCU/#tuyasend6","title":"<code>TuyaSend6</code>","text":"<p>Sends payload with raw data (type 0) to dpId (Max data length? Not known at this time). Does NOT require <code>0x</code> prefix.</p> <p>Example</p> <p><code>TuyaSend6 37, 060000DC08000096</code> sends raw data defined by hex codes to dpId=37</p> <p>Differences between <code>TuyaSend3</code>, <code>TuyaSend5</code> and <code>TuyaSend6</code>: * <code>TuyaSend3 and TuyaSend5</code> sends payload with the data type 0x03 = string * <code>TuyaSend6</code> sends payload with the data type 0x00 = raw </p>"},{"location":"TuyaMCU/#tuyasend8","title":"<code>TuyaSend8</code>","text":"<p>Used without payload to get device information and dpId states.  Replaces <code>SerialSend5 55aa000100000</code></p>"},{"location":"TuyaMCU/#tuyasend9","title":"<code>TuyaSend9</code>","text":"<p>Use without any payload to toggle a new <code>STAT</code> topic reporting changes to a dpId, for example:</p> <pre><code>17:45:38 MQT: stat/TuyaMCU/DPTYPE1ID1 = 1\n</code></pre>"},{"location":"TuyaMCU/#tuyareceived","title":"TuyaReceived","text":"<p>Every status message from the MCU gets a JSON response named <code>TuyaReceived</code> which contains the MCU protocol status message inside key/value pairs which are hidden from the user by default.</p> <p>To publish them to a MQTT Topic of <code>tele/%topic%/RESULT</code> you need to enable <code>SetOption66 1</code>.</p> <p>To avoid some cyclic MCU &lt;-&gt; ESP messages published via MQTT to the topic <code>tele/%topic%/RESULT</code> you need to enable <code>SetOption137 1</code>.</p> <p>If <code>SetOption137</code> set to <code>1</code> the following cmds will not forwarded: - the heartbeat between the MCU &lt;-&gt; ESP (every 10 seconds, <code>TUYA_CMD_HEARTBEAT</code>) - the Wifi-State between the MCU &lt;-&gt; ESP (during start-up and wifi events, <code>TUYA_CMD_WIFI_STATE</code>) - the local time info query of the MCU (every minute, <code>TUYA_CMD_SET_TIME</code>) - the received update package info from MCU (during firmware update of Tuya MCU, <code>TUYA_CMD_UPGRADE_PACKAGE</code>)</p> <p>If <code>SetOption137</code> set to <code>0</code> all received Tuya MCU messages will be published. <code>SetOption137</code> is very useful to reduce the MQTT-traffic.</p>"},{"location":"TuyaMCU/#example","title":"Example","text":"<p>After issuing serial command <code>55aa0006000501010001010e</code> (Device power (dpId=1) is mapped to Relay1 (fnId=11)) we get the following console output (with <code>weblog 4</code>):</p> <p><pre><code>19:54:18 TYA: Send \"55aa0006000501010001010e\"\n19:54:18 MQT: stat/GD-30W/STATE = {\"Time\":\"2019-10-25T19:54:18\",\"Uptime\":\"0T01:45:51\",\"UptimeSec\":6351,\"Heap\":27,\"SleepMode\":\"Dynamic\",\"Sleep\":0,\"LoadAvg\":999,\"MqttCount\":1,\"POWER1\":\"ON\",\"POWER2\":\"OFF\",\"POWER3\":\"ON\",\"POWER4\":\"OFF\",\"POWER5\":\"ON\",\"Dimmer\":100,\"Fade\":\"OFF\",\"Speed\":1,\"LedTable\":\"OFF\",\"Wifi\":{\"AP\":1,\"SSId\":\"HTPC\",\"BSSId\":\"50:64:2B:5B:41:59\",\"Channel\":10,\"RSSI\":24,\"LinkCount\":1,\"Downtime\":\"0T00:00:08\"}}\n19:54:18 MQT: stat/GD-30W/RESULT = {\"POWER1\":\"ON\"}\n19:54:18 MQT: stat/GD-30W/POWER1 = ON\n19:54:18 MQT: stat/GD-30W/RESULT = {\"TuyaReceived\":{\"Data\":\"55AA0007000501010001010F\",\"ChkSum\":\"0x0F\",\"Cmnd\":7,\"CmndDataLen\":5,\"CmndData\":\"0101000101\",\"DpId\":1,\"DpIdType\":1,\"DpIdLen\":1,\"DpIdData\":\"01\"}}\n19:54:18 TYA: fnId=11 is set for dpId=1\n19:54:18 TYA: RX Relay-1 --&gt; MCU State: On Current State:On\n</code></pre> Above <code>TYA: fnId=11 is set for dpId=1</code> you can see the JSON response for that dpId. This JSON string displays the response MCU gave to our command.</p> <p>\"Data\" field contains the complete response and the rest of the key/value pairs show the protocol broken into parts. \"DpId\", \"DpIdData\" and \"DpIdType\" are the ones we're most interested in since we can use them for <code>TuyaSend</code>.</p> <p>Tip</p> <p>Use command <code>TuyaSend8</code> and/or <code>TuyaSend0</code> at any time to request statuses of all dpId's from the MCU. </p>"},{"location":"TuyaMCU/#use-in-rules","title":"Use in Rules","text":"<p>This data can also be used as a trigger for rules using <code>TuyaReceivedData#Data=hex_string</code></p> <p><pre><code>Rule1 on TuyaReceived#Data=55AA000700056E040001007E do publish2 stat/tuya_light/effect rgb_cycle endon\n</code></pre> will publish a status message to a custom topic when <code>55AA000700056E040001007E</code> appears in \"Data\" field of the response.</p>"},{"location":"TuyaMCU/#device-configurations","title":"Device Configurations","text":"<p>Before proceeding identify dpId's and their function.</p>"},{"location":"TuyaMCU/#dimmer","title":"Dimmer","text":"<p>We need to configure four functions of a dimmer: </p> <ol> <li>Dimming dpId </li> <li>Dimming Range    </li> <li>Dimming less than 10%    </li> </ol>"},{"location":"TuyaMCU/#dimming-dpid","title":"Dimming dpId","text":"<p>The dimmer FunctionId is <code>21</code>. On a dimmer dpId generally is <code>2</code> or <code>3</code>. Try both.      </p> <ol> <li>Go to the Tasmota Console and type <code>TuyaMCU 21,2</code> and wait for it to reboot. </li> <li>Enter <code>Backlog Dimmer 10; Dimmer 100</code> in the Console.    </li> <li>If your bulb responds to <code>Dimmer</code> commands, you have successfully configured the dimmer FunctionId. Make note of it.   </li> <li>If not try id <code>3</code> and if even <code>3</code> doesn't work keep trying Ids from all unknown Ids from the log until one works.  </li> </ol>"},{"location":"TuyaMCU/#dimming-range","title":"Dimming Range","text":"<p>Once you have figured out the dimming functionId, we need to find the maximum dimming range. Once the dimming Id is set, the logs will continue </p> <pre><code>TYA: Heartbeat  \nTYA: RX Packet: \"55aa03070005010100010011\"  \nTYA: RX Relay-1 --&gt; MCU State: Off Current State:Off    \nTYA: RX Packet: \"55aa03070008020200040000000720\"    \nTYA: FnId=21 is set for dpId=2  \nTYA: RX Dim State=7 \n</code></pre> <p>Now using the hardware buttons increase the dimmer to its maximum and observe the log. The <code>Dim State=XXX</code> shows the current dimmer level reported by MCU. Once the dimmer is at max, note this number. Again using hardware buttons decrease dimmer to minimum and note the number for minimum.   Now we need to tell Tasmota to use maximum and minimum values. This controlled by DimmerRange command. We can set it using <code>DimmerRange &lt;Min&gt;,&lt;Max&gt;</code> where <code>&lt;Min&gt;</code> is the minimum dimmer state and <code>&lt;Max&gt;</code> maximum dimmer state reported in logs.    </p> <p>Once set, try <code>dimmer 100</code> in the Console and check if the brightness of bulb is same is the same as when the maximum was set using hardware buttons.   </p> <p>Warning</p> <p>Some Tuya devices automatically send the state of a dimmer after a power off. Tasmota could misunderstand the command and try to turn on the light even with <code>SetOption20</code> and <code>SetOption54</code> enabled.</p>"},{"location":"TuyaMCU/#dual-dimmer","title":"Dual Dimmer","text":"<p>To enable a dual dimmer setup assign fnId's:</p> <ul> <li><code>21</code> as Dimmer1</li> <li><code>22</code> as Dimmer2</li> <li><code>11</code> as Relay1</li> <li><code>12</code> as Relay2</li> </ul> <p>Tasmota will automatically enable <code>SetOption68</code> and the dimmers will respond to <code>Channel1</code> and <code>Channel2</code> commands.</p> <p>Warning</p> <p>The use of SetOption68 is limited to two channels and will be automatically disabled if any other combination of lights is used.</p>"},{"location":"TuyaMCU/#lights","title":"Lights","text":""},{"location":"TuyaMCU/#cct-light","title":"CCT Light","text":"<p>To enable a CCT light assign fnId's:</p> <ul> <li><code>21</code> as Dimmer1</li> <li><code>11</code> as Relay1</li> <li><code>23</code> as CT channel</li> </ul>"},{"location":"TuyaMCU/#rgb-light","title":"RGB Light","text":"<p>To enable an RGB light assign fnId's:</p> <ul> <li><code>21</code> as Dimmer1</li> <li><code>11</code> as Relay1</li> <li><code>24</code> as RGB controller</li> </ul> <p>TuyaMCU uses different types of RGB Hex format where the most recent is <code>0HUE0SAT0BRI0</code> (type 1) and the older being <code>RRGGBBFFFF6464</code> (type 2). Depending on the MCU, code can be case sensitive.</p> <p>After enabling the RGB function check the TuyaReceived information and use <code>TuyaRGB</code> to configure and store the correct (or the closest) format:</p> <ul> <li><code>TuyaRGB 0</code> - Type 1, 12 characters uppercase. Example: <code>00DF00DC0244</code> (default)</li> <li><code>TuyaRGB 1</code> - Type 1, 12 characters lowercase. Example: <code>008003e8037a</code></li> <li><code>TuyaRGB 2</code> - Type 2, 14 characters uppercase. Example: <code>00FF00FFFF6464</code></li> <li><code>TuyaRGB 3</code> - Type 2, 14 characters lowercase. Example: <code>00e420ffff6464</code></li> </ul> <p><code>TuyaRGB</code> without payload will return the actual configured format.</p>"},{"location":"TuyaMCU/#rgbx-light","title":"RGB+X Light","text":"<p>To enable an RGB+W light use RGB Light configuration and assign fnId <code>25</code> as white color.</p> <p>To enable an RGB+CCT light use RGB Light configuration and assign fnId <code>23</code> as CT channel.</p>"},{"location":"TuyaMCU/#light-mode-selector","title":"Light mode selector","text":"<p>The majority of \u00a0TuyaMCU devices with an RGB+W or an RGB+CCT light have a button or app function to switch between White and Colored light. </p> <p>To do the same in Tasmota, assign function (fnId) <code>26</code> to the mode select dpId. The possible values are 0 (white) and 1 (colorful). A button on the WebUI will be available once configured.</p> <p>When the ModeSet function is enabled it is not  possible to update both lights at the same time. Only the currently selected light mode will be updated. </p> <p>Warning</p> <p>Use of <code>SetOption68</code> for more than two channels and the light split option (<code>SetOption37 &gt;= 128</code>) are not supported in TuyaMCU mode.</p>"},{"location":"TuyaMCU/#enums","title":"Enums","text":"<p>Better control over Type4 or enum dpId's. Up to four can be added, with a range from 0 to 31.</p> <ul> <li><code>61</code> as Enum1</li> <li><code>62</code> as Enum2</li> <li><code>63</code> as Enum3</li> <li><code>64</code> as Enum4</li> </ul> <p>After an enum is configured, use <code>TuyaEnumList</code> to declare the range it must respect (note <code>0</code> is always the first item in range).</p> <p><code>TuyaEnumlist &lt;enum&gt;,&lt;range&gt;</code> where <code>&lt;enum&gt;</code> is declared using <code>TuyaMCU</code> and <code>&lt;range&gt;</code> is <code>0..31</code>.</p> <p>Example: configure Enum 1 with a range from 0 to 8. <pre><code>21:14:52 CMD: tuyaenumlist 1,8\n21:14:52 MQT: stat/TuyaMCU/RESULT = {\"TuyaEnumList\":{\"Enum1\":8,\"Enum2\":9,\"Enum4\":1}}\n</code></pre></p> <p>Entering a value greater than <code>31</code> will return an error</p> <p><code>TuyaEnumList</code> without payload will return the configuration of all the enums enabled in the list.</p> <p>To update an enum use the command <code>TuyaEnum</code>:</p> <p>Usage <code>TuyaEnum [1|2|3|4],[TuyaEnumList range]</code></p> <p>Example: update Enum 2 to 4. <pre><code>21:14:12 CMD: tuyaenum2 4\n21:14:12 MQT: stat/TuyaMCU/RESULT = {\"TuyaEnum2\":4}\n</code></pre></p> <p>Entering a value not in range will return an error</p> <p><code>TuyaEnum</code> without payload will return the state of all the enums configured.</p>"},{"location":"TuyaMCU/#sensors","title":"Sensors","text":"<p>These are the currently available sensors:</p> <ul> <li><code>71</code> as Temperature Sensor</li> <li><code>73</code> as Humidity Sensor</li> <li><code>75</code> as Illuminance Sensor</li> <li><code>76</code> as TVOC Sensor</li> <li><code>77</code> as CO<sub>2</sub> Sensor</li> <li><code>78</code> as ECO<sub>2</sub> Sensor</li> <li><code>79</code> as %LEL gas Sensor</li> </ul> <p>If your device has a dpId for setting a specific Temperature and/or Humidity:</p> <ul> <li><code>72</code> for Temperature Set</li> <li><code>74</code> for Humidity Set</li> </ul> <p>Use <code>TuyaSend2</code> to manage them.</p> <p>Temperature and Temperature Set default to <code>\u00b0C</code>. If you need <code>\u00b0F</code> change <code>SetOption8</code> to <code>1</code>.</p> <p>The TuyaMCU driver sends the temperature as a byte integer. As of 9.3.x, the integer is converted by Tasmota to a float based on the \"TempRes\" setting which indicates the number of places after the decimal. The TempRes setting is by default \"1\" which means a device which sends 101 will be interpreted as 10.1. If your device normally returns an integer temperature, you may need to set TempRes to \"0\".</p> <p>If your device requires the temperature to be divided (eg. increases in .5\u00b0 increments), you may need to use the rules functionality to convert the temperature value.</p> <p>Please note this will not update the value sent by the MCU but will just change the unit of measure reported on <code>/SENSOR</code> topic. You have to find a dpid to set the correct unit and change reported values (if it exists) or perhaps use the rules functionality to do the conversion.</p>"},{"location":"TuyaMCU/#timers","title":"Timers","text":"<p>4 Type2 (integer) timers can be managed directly from Tasmota</p> <ul> <li><code>81</code> as Timer1</li> <li><code>82</code> as Timer2</li> <li><code>83</code> as Timer3</li> <li><code>84</code> as Timer4</li> </ul> <p>Timers can be managed with <code>TuyaSend2</code> and are visible in the WebUI.</p>"},{"location":"TuyaMCU/#covers","title":"Covers","text":"<p>Single shutter or double shutters devices can be managed with a dimmer setup For devices that are reporting position to another dpId assign fnId's:</p> <ul> <li><code>27</code> to report the state of Dimmer1</li> <li><code>28</code> to report the state of Dimmer2</li> </ul> <p>If your cover device has a motor direction change option assign fnId <code>97</code> for motor direction.</p>"},{"location":"TuyaMCU/#switches","title":"Switches","text":"<p>There is currently no way to detect the number of relays present in an MCU based switch. We need to tell the number of relays to Tasmota using FunctionIDs 12 to 18 for Relay2 to Relay4.</p> <p>Example</p> <p>For a 4 gang switch set <code>TuyaMCU 12,2</code>, <code>TuyaMCU 13,3</code> and <code>TuyaMCU 14,4</code> if the dpIds for Relays 2-4 are <code>2</code>,<code>3</code>,<code>4</code>.  </p> <p>Tip</p> <p>You can configure all at once by using <code>Backlog TuyaMCU 12,2; TuyaMCU 13,3; TuyaMCU 14,4</code> </p>"},{"location":"TuyaMCU/#power-metering","title":"Power Metering","text":"<p>Some Tuya MCU devices support Power measurement support over serial. For this it is better to use a bulb with known wattage rating.     </p> <p>Observe the logs in the Console     </p> <pre><code>TYA: Heartbeat\n{\"TuyaReceived\":{\"Data\":\"55AA0107000501010001000F\",\"Cmnd\":7,\"CmndData\":\"0101000100\",\"DpType1Id1\":0,\"1\":{\"DpId\":1,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=11 is set for dpId=1\nTYA: RX Relay-1 --&gt; MCU State: Off Current State:Off\n{\"TuyaReceived\":{\"Data\":\"55AA01070005020100010111\",\"Cmnd\":7,\"CmndData\":\"0201000101\",\"DpType1Id2\":1,\"2\":{\"DpId\":2,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=2\n{\"TuyaReceived\":{\"Data\":\"55AA01070005030100010011\",\"Cmnd\":7,\"CmndData\":\"0301000100\",\"DpType1Id3\":0,\"3\":{\"DpId\":3,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=3\n{\"TuyaReceived\":{\"Data\":\"55AA01070005040100010113\",\"Cmnd\":7,\"CmndData\":\"0401000101\",\"DpType1Id4\":1,\"4\":{\"DpId\":4,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=4\n{\"TuyaReceived\":{\"Data\":\"55AA0107000807020004000000001C\",\"Cmnd\":7,\"CmndData\":\"0702000400000000\",\"DpType2Id7\":0,\"7\":{\"DpId\":7,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=7\n{\"TuyaReceived\":{\"Data\":\"55AA0107000808020004000000001D\",\"Cmnd\":7,\"CmndData\":\"0802000400000000\",\"DpType2Id8\":0,\"8\":{\"DpId\":8,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=8\n{\"TuyaReceived\":{\"Data\":\"55AA0107000809020004000000001E\",\"Cmnd\":7,\"CmndData\":\"0902000400000000\",\"DpType2Id9\":0,\"9\":{\"DpId\":9,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=9\n{\"TuyaReceived\":{\"Data\":\"55AA010700080A020004000000001F\",\"Cmnd\":7,\"CmndData\":\"0A02000400000000\",\"DpType2Id10\":0,\"10\":{\"DpId\":10,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=10\n{\"TuyaReceived\":{\"Data\":\"55AA0107000865020004000000007A\",\"Cmnd\":7,\"CmndData\":\"6502000400000000\",\"DpType2Id101\":0,\"101\":{\"DpId\":101,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=101\n{\"TuyaReceived\":{\"Data\":\"55AA01070008660200040000009813\",\"Cmnd\":7,\"CmndData\":\"6602000400000098\",\"DpType2Id102\":152,\"102\":{\"DpId\":102,\"DpIdType\":2,\"DpIdData\":\"00000098\"}}}\nTYA: fnId=0 is set for dpId=102\n{\"TuyaReceived\":{\"Data\":\"55AA01070008670200040000017EFB\",\"Cmnd\":7,\"CmndData\":\"670200040000017E\",\"DpType2Id103\":382,\"103\":{\"DpId\":103,\"DpIdType\":2,\"DpIdData\":\"0000017E\"}}}\nTYA: fnId=0 is set for dpId=103\n{\"TuyaReceived\":{\"Data\":\"55AA0107000868020004000009951B\",\"Cmnd\":7,\"CmndData\":\"6802000400000995\",\"DpType2Id104\":2453,\"104\":{\"DpId\":104,\"DpIdType\":2,\"DpIdData\":\"00000995\"}}}\nTYA: fnId=0 is set for dpId=104\n</code></pre> <p>In the <code>TuyaReceived</code> we are interested in <code>DpIdData</code>. For example: <code>00000995</code> is the second last entry.    </p> <ul> <li>Make sure the bulb if off.    </li> <li>Find out the voltage standard of your country (generally 220, 240, 120v) from this table.   </li> <li>Multiply that number by 10 (2400) and Convert that number (2400) to Hex using any hex converter (2400 = 0x960) </li> <li>Now look for the number nearest to <code>960</code> in the logs. In our case it is <code>00000995</code>. So we expect that's the voltage which is <code>\"DpId\":104</code> in our example.</li> <li>Set voltage functionId <code>33</code> by entering <code>TuyaMCU 33,104</code>. </li> <li>Now set dimmer to 100% using the <code>dimmer 100</code> command, or power on using <code>power1 on</code> (depending on the device) and observe the logs.  </li> <li>Now we need the power rating of your bulb, for example <code>40W</code>. Multiply by 10 (400) and convert to hex which gives us 0x190. Check which unknown ID is close to <code>190</code>. I this example it is <code>17E</code> for <code>\"DpId\":103</code>. This is the Id of <code>Active Power</code> function. </li> <li>Set the active power functionId <code>31</code> by entering <code>TuyaMCU 31,103</code>.    </li> <li>Once Power and Voltage are set you should see something such as this in the logs:  <pre><code>TYA: Heartbeat\n{\"TuyaReceived\":{\"Data\":\"55AA0107000501010001000F\",\"Cmnd\":7,\"CmndData\":\"0101000100\",\"DpType1Id1\":0,\"1\":{\"DpId\":1,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=11 is set for dpId=1\nTYA: RX Relay-1 --&gt; MCU State: Off Current State:Off\n{\"TuyaReceived\":{\"Data\":\"55AA01070005020100010111\",\"Cmnd\":7,\"CmndData\":\"0201000101\",\"DpType1Id2\":1,\"2\":{\"DpId\":2,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=2\n{\"TuyaReceived\":{\"Data\":\"55AA01070005030100010011\",\"Cmnd\":7,\"CmndData\":\"0301000100\",\"DpType1Id3\":0,\"3\":{\"DpId\":3,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=3\n{\"TuyaReceived\":{\"Data\":\"55AA01070005040100010113\",\"Cmnd\":7,\"CmndData\":\"0401000101\",\"DpType1Id4\":1,\"4\":{\"DpId\":4,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=4\n{\"TuyaReceived\":{\"Data\":\"55AA0107000807020004000000001C\",\"Cmnd\":7,\"CmndData\":\"0702000400000000\",\"DpType2Id7\":0,\"7\":{\"DpId\":7,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=7\n{\"TuyaReceived\":{\"Data\":\"55AA0107000808020004000000001D\",\"Cmnd\":7,\"CmndData\":\"0802000400000000\",\"DpType2Id8\":0,\"8\":{\"DpId\":8,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=8\n{\"TuyaReceived\":{\"Data\":\"55AA0107000809020004000000001E\",\"Cmnd\":7,\"CmndData\":\"0902000400000000\",\"DpType2Id9\":0,\"9\":{\"DpId\":9,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=9\n{\"TuyaReceived\":{\"Data\":\"55AA010700080A020004000000001F\",\"Cmnd\":7,\"CmndData\":\"0A02000400000000\",\"DpType2Id10\":0,\"10\":{\"DpId\":10,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=10\n{\"TuyaReceived\":{\"Data\":\"55AA0107000865020004000000007A\",\"Cmnd\":7,\"CmndData\":\"6502000400000000\",\"DpType2Id101\":0,\"101\":{\"DpId\":101,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=101\n{\"TuyaReceived\":{\"Data\":\"55AA01070008660200040000009712\",\"Cmnd\":7,\"CmndData\":\"6602000400000097\",\"DpType2Id102\":151,\"102\":{\"DpId\":102,\"DpIdType\":2,\"DpIdData\":\"00000097\"}}}\nTYA: fnId=0 is set for dpId=102\n{\"TuyaReceived\":{\"Data\":\"55AA01070008670200040000017BF8\",\"Cmnd\":7,\"CmndData\":\"670200040000017B\",\"DpType2Id103\":379,\"103\":{\"DpId\":103,\"DpIdType\":2,\"DpIdData\":\"0000017B\"}}}\nTYA: fnId=31 is set for dpId=103\nTYA: Rx ID=103 Active_Power=379\n{\"TuyaReceived\":{\"Data\":\"55AA0107000868020004000009961C\",\"Cmnd\":7,\"CmndData\":\"6802000400000996\",\"DpType2Id104\":2454,\"104\":{\"DpId\":104,\"DpIdType\":2,\"DpIdData\":\"00000996\"}}}\nTYA: fnId=33 is set for dpId=104\nTYA: Rx ID=104 Voltage=2454\n</code></pre></li> <li>To get the Id for the current, calculate Current = Power / Voltage ( 37.9 / 245.4 ) = ~0.1544 (Remember to divide each value by 10). Multiply this by 1000 = 154. Now convert 154 to hex which is 0x9A. This is closest to <code>97</code> which is Id <code>\"DpId\":102</code>.     </li> <li>Set the current FunctionId <code>32</code> using command <code>TuyaMCU 32,102</code>.   </li> <li>Observe the logs should start showing Current in addition to Active_Power and Voltage <pre><code>TYA: Heartbeat\n{\"TuyaReceived\":{\"Data\":\"55AA0107000501010001000F\",\"Cmnd\":7,\"CmndData\":\"0101000100\",\"DpType1Id1\":0,\"1\":{\"DpId\":1,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=11 is set for dpId=1\nTYA: RX Relay-1 --&gt; MCU State: Off Current State:Off\n{\"TuyaReceived\":{\"Data\":\"55AA01070005020100010111\",\"Cmnd\":7,\"CmndData\":\"0201000101\",\"DpType1Id2\":1,\"2\":{\"DpId\":2,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=2\n{\"TuyaReceived\":{\"Data\":\"55AA01070005030100010011\",\"Cmnd\":7,\"CmndData\":\"0301000100\",\"DpType1Id3\":0,\"3\":{\"DpId\":3,\"DpIdType\":1,\"DpIdData\":\"00\"}}}\nTYA: fnId=0 is set for dpId=3\n{\"TuyaReceived\":{\"Data\":\"55AA01070005040100010113\",\"Cmnd\":7,\"CmndData\":\"0401000101\",\"DpType1Id4\":1,\"4\":{\"DpId\":4,\"DpIdType\":1,\"DpIdData\":\"01\"}}}\nTYA: fnId=0 is set for dpId=4\n{\"TuyaReceived\":{\"Data\":\"55AA0107000807020004000000001C\",\"Cmnd\":7,\"CmndData\":\"0702000400000000\",\"DpType2Id7\":0,\"7\":{\"DpId\":7,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=7\n{\"TuyaReceived\":{\"Data\":\"55AA0107000808020004000000001D\",\"Cmnd\":7,\"CmndData\":\"0802000400000000\",\"DpType2Id8\":0,\"8\":{\"DpId\":8,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=8\n{\"TuyaReceived\":{\"Data\":\"55AA0107000809020004000000001E\",\"Cmnd\":7,\"CmndData\":\"0902000400000000\",\"DpType2Id9\":0,\"9\":{\"DpId\":9,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=9\n{\"TuyaReceived\":{\"Data\":\"55AA010700080A020004000000001F\",\"Cmnd\":7,\"CmndData\":\"0A02000400000000\",\"DpType2Id10\":0,\"10\":{\"DpId\":10,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=10\n{\"TuyaReceived\":{\"Data\":\"55AA0107000865020004000000007A\",\"Cmnd\":7,\"CmndData\":\"6502000400000000\",\"DpType2Id101\":0,\"101\":{\"DpId\":101,\"DpIdType\":2,\"DpIdData\":\"00000000\"}}}\nTYA: fnId=0 is set for dpId=101\n{\"TuyaReceived\":{\"Data\":\"55AA01070008660200040000009712\",\"Cmnd\":7,\"CmndData\":\"6602000400000097\",\"DpType2Id102\":151,\"102\":{\"DpId\":102,\"DpIdType\":2,\"DpIdData\":\"00000097\"}}}\nTYA: fnId=32 is set for dpId=102\nTYA: Rx ID=102 Current=151\n{\"TuyaReceived\":{\"Data\":\"55AA01070008670200040000017BF8\",\"Cmnd\":7,\"CmndData\":\"670200040000017B\",\"DpType2Id103\":379,\"103\":{\"DpId\":103,\"DpIdType\":2,\"DpIdData\":\"0000017B\"}}}\nTYA: fnId=31 is set for dpId=103\nTYA: Rx ID=103 Active_Power=379\n{\"TuyaReceived\":{\"Data\":\"55AA0107000868020004000009961C\",\"Cmnd\":7,\"CmndData\":\"6802000400000996\",\"DpType2Id104\":2454,\"104\":{\"DpId\":104,\"DpIdType\":2,\"DpIdData\":\"00000996\"}}}\nTYA: fnId=33 is set for dpId=104\nTYA: Rx ID=104 Voltage=2454\n</code></pre></li> <li>Power and current should change on dimming high / low or turning the device on and off. The Tasmota web UI should show power values now on the home page.</li> </ul>"},{"location":"TuyaMCU/#battery-powered-sensors","title":"Battery Powered Sensors","text":"<ul> <li>TYMC-1 Door/Window Sensor</li> <li>TY-01 Door/Window Sensor</li> <li>Gas Sensor</li> <li>Smoke Sensor</li> <li>PIR Sensor</li> </ul>"},{"location":"TuyaMCU/#specific-devices","title":"Specific Devices","text":"<ul> <li>Aromatherapy Diffuser</li> <li>Water Kettle</li> <li>Air Purifier</li> <li>Mouse Trap</li> <li>Humidifer</li> </ul>"},{"location":"TuyaMCU/#tuya-protocols","title":"Tuya Protocols","text":"<p>The MCU communicates with the Wi-Fi module through the serial port with a Tuya specified protocol. Those are classified into basic and functional protocols. </p>"},{"location":"TuyaMCU/#basic-protocols","title":"Basic protocols","text":"<p>They are common protocols integrated in Tasmota's TuyaMCU module. They stay the same for each product and are mandatory for Tuya module to work correctly. </p>"},{"location":"TuyaMCU/#functional-protocols","title":"Functional protocols","text":"<p>Functional protocols are used for delivering and reporting data of functions. These protocols differ between devices and manufacturers and might require configuration in Tasmota using <code>TuyaMCU</code> command or with <code>TuyaSend&lt;x&gt;</code> command.</p>"},{"location":"TuyaMCU/#anatomy-of-tuya-protocol","title":"Anatomy of Tuya Protocol","text":"Name Description Frame Header Version Fixed value of 0x55aa Command Word <code>0x06</code> - send commands<code>0x07</code> - report status Data Length defines expected length of data dpID numbered ID of a function (DP = Data Point or Define Product) Data Type see Data Type table below Function Length length of command Function Command formatted according to Data Type Verification Method checksum = remainder of the byte sum starting from Frame Header to 256"},{"location":"TuyaMCU/#data-type","title":"Data Type","text":"Hex Tasmota Command Description Max length 0x00 TuyaSend6 raw data unknown 0x01 TuyaSend1 boolean data <code>0/1</code> 1 byte 0x02 TuyaSend2 value data. If a value contains less than 4 bytes, 0 is supplemented before 4 bytes 0x00 TuyaSend3 string data unknown 0x04 TuyaSend4 enum data <code>0/1/2/3/4/5</code> 1 byte 0x05 ### fault data, report only 8 bytes <p>Let's dissect and explain the MCU protocol using serial command <code>55aa0006000501010001010e</code>:</p> Frame Header Version Command Word Data Length dpID Data Type Function Length Function Command Verification Method 55aa00 06 0005 01 01 0001 01 0e <p>This is the command which powers on the device sending Function Command = <code>1</code> to dpID 1 (Switch): </p> <ul> <li>Frame Header Version = <code>0x55aa00</code> which is a fixed value and always the same</li> <li>Command Word = <code>0x06</code> because we're sending a command</li> <li>Data Type = <code>0x01</code> since the command sent is a 1 byte boolean</li> <li>Function Length = <code>0x001</code> instruct 1 character only for function command length</li> <li>Function Command = <code>0x01</code> in hex which equals <code>1</code> in int</li> <li>Verification Method = <code>0e</code> is calculated</li> </ul>"},{"location":"TuyaMCU/#protocol-flow","title":"Protocol flow","text":"<p>On device boot, TuyaMCU executes the required basic protocols and reads the functional protocol data received, which are used to update status of components mapped in TuyaMCU (Relays, dimmer, power monitoring data).</p> <p>After receiving a command from Tasmota (Command Word <code>0x06</code>), the MCU performs corresponding logical control. When the dpID status is changed, the MCU reports the data (Command Word <code>0x07</code>) to TuyaMCU component. </p>"},{"location":"TuyaMCU/#dpid-function-tables","title":"dpId Function Tables","text":"<p>This information is just for orientation. Functions are assigned by the manufacturer and can be on different dpId's</p> <ul> <li>DP ID: dpId.</li> <li>Function Point\uff1aUsed to describe the product function.</li> <li>Identifier: Function codename. Can only be letters, numbers and underscores</li> <li>Data type\uff1a</li> <li>Issue and report: command data can be sent and status data can be reported back to the Wi-Fi module</li> <li> <p>Report only: supports only status reporting, no control options</p> </li> <li> <p>Function Type (Referred as Data Type):</p> </li> <li>Boolean (bool): non-true or false binary variable, such as: switch function, on / off</li> <li>Value (value): suitable for linear adjustment of the type of data, such as: temperature regulation, temperature range 20-40 \u2103</li> <li>Enum (enum): custom finite set value, such as: working levels, low / mid / high</li> <li>Fault (fault): dedicated to reporting and statistical failure of the function points. Support multi-fault, the data is reported only</li> <li>Integer\uff08integer\uff09: transmitted as integer</li> <li>Transparent (raw): data in binary </li> </ul>"},{"location":"TuyaMCU/#switches-or-plugspower-strips","title":"Switches or Plugs/Power Strips","text":"DP ID Identifier Data type Function type Properties 1 switch_1 Control and report Boolean 2 switch_2 Control and report Boolean 3 switch_3 Control and report Boolean 4 switch_4 Control and report Boolean 5 switch_5 Control and report Boolean 9 countdown_1 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s 10 countdown_2 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s 11 countdown_3 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s 12 countdown_4 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s 13 countdown_5 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s"},{"location":"TuyaMCU/#aromatherapy-machine-oil-diffuser","title":"Aromatherapy Machine (Oil Diffuser)","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch Power Issue and report Boolean 6 Amount of fog fog Issue and report Enum Enumerated values:small, large 11 Light Light Issue and report Boolean 12 Fault alarm fault Only report Fault Barrier values:1 13 Countdown countdown Issue and report Enum Enumerated values: 0, 1, 2, 3 14 Countdown remaining time countdown_left Only report Integer Values range: 0-360, Pitch1, Scale0, Unit:min 101 Light mode work_mode Issue and report Enum Enumerated values: white, colour, scene, scene1, scene2, scene3, scene4 102 Color value colour_data Issue and report Char type *see below 103 Light mode lightmode Issue and report Enum Enumerated values: 1, 2, 3 104 Brightness setting setlight Issue and report Integer Values range: 0-255, Pitch1, Scale0, Unit:\\% <p><code>colour_data</code> format of the lights is a string of 14 characters, for example, 00112233334455, where 00 indicates R, 11 indicates G, 22 indicates B, 3333 indicates the hue, 44 indicates the saturation, and 55 indicates the value. The initial value is saved by default. If you do not want to adjust the light, set the data to the maximum value 100% (0x64). The last four characters have fixed values.</p>"},{"location":"TuyaMCU/#curtain-motor","title":"Curtain Motor","text":"DP ID Function points Identifier Data type Function type Properties 1 Percentage percent_state Only report Integer Values range:0-100, Pitch1, Scale0, Unit:% 2 Motor Direction control_back Issue and report Boolean 3 Auto Power auto_power Issue and report Boolean 4 Left time countdown Issue and report Enum Enumerated values:cancel, 1, 2, 3, 4 5 Total Time time_total Only report Integer Values range:0-120000, Pitch1, Scale0, Unit:m <p>Complete document on protocols</p> DP ID Function points Identifier Data type Function type Properties 1 Control (required) control Issue and report Enum Enumerated values:open, stop, close, continue 2 Curtain position setting percent_control Issue and report Integer Values range:0-100, Pitch1, Scale0, Unit:% 3 Current curtain position percent_state Only report Integer Values range:0-100, Pitch1, Scale0, Unit:% 4 Mode mode Issue and report Enum Enumerated values:morning, night 5 Motor Direction control_back Issue and report Enum Enumerated values:forward, back 6 Auto Power auto_power Issue and report Boolean 7 Work State (required) work_state Only report Enum Enumerated values:opening, closing 11 Situation_set situation_set Only report Enum Enumerated values:fully_open, fully_close 12 Fault  (required) fault Only report Fault Barrier values:motor_fault"},{"location":"TuyaMCU/#power-monitoring-plug","title":"Power Monitoring Plug","text":"DP ID Function points Identifier Data type Function type Properties 1 switch_1 switch_1 Control and report Boolean 9 countdown_1 countdown_1 Control and report Integer undefined0-86400, undefined1, Scale0, Unit:s 17 statistics Function add_ele Control and report Integer undefined0-50000, undefined100, Scale3, Unit: 18 current cur_current Data report Integer undefined0-30000, undefined1, Scale0, Unit:mA 19 power cur_power Data report Integer undefined0-50000, undefined1, Scale1, Unit:W 20 voltage cur_voltage Data report Integer undefined0-5000, undefined1, Scale1, Unit:V 21 test flag test_bit Data report Integer undefined0-5, undefined1, Scale0, Unit: 22 voltage coefficient voltage_coe Data report Integer undefined0-1000000, undefined1, Scale0, Unit: 23 current coefficient electric_coe Data report Integer undefined0-1000000, undefined1, Scale0, Unit: 24 power coefficient power_coe Data report Integer undefined0-1000000, undefined1, Scale0, Unit: 25 statistics coefficient electricity_coe Data report Integer undefined0-1000000, undefined1, Scale0, Unit: 26 warning fault Data report Fault Barrier values:ov_cr"},{"location":"TuyaMCU/#dehumidifier","title":"Dehumidifier","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch Switch Issue and report Boolean 2 PM2.5 PM25 Only report Integer Values range:0-999, Pitch1, Scale0, Unit: 3 Work mode Mode Issue and report Enum Enumerated values:Manual, Auto, Sleep 4 Wind speed Speed Issue and report Enum Enumerated values:speed1, speed2, speed3, speed4, speed5 5 Filter usage Filter Only report Integer Values range:0-100, Pitch1, Scale0, Unit:% 6 Fresh Anion Issue and report Boolean 7 Child lock Lock Issue and report Boolean 9 UV light UV Issue and report Boolean 11 Filter reset FilterReset Issue and report Boolean 12 indoor temp Temp Only report Integer Values range:-20-50, Pitch1, Scale0, Unit:\u2103 13 Indoor humidity Humidity Only report Integer Values range:0-100, Pitch1, Scale0, Unit:%"},{"location":"TuyaMCU/#lighting","title":"Lighting","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch led_switch Control and report Boolean 2 Mode work_mode Control and report Enum Enumerated values:white, colour, scene, scene_1, scene_2, scene_3, scene_4 3 Bright bright_value Control and report Integer undefined25-255, undefined1, Scale0, Unit: 5 Colour mode colour_data Control and report Char type 6 Scene scene_data Control and report Char type 7 Scene1 flash_scene_1 Control and report Char type 8 Scene2 flash_scene_2 Control and report Char type 9 Scene3 flash_scene_3 Control and report Char type 10 Scene4 flash_scene_4 Control and report Char type"},{"location":"TuyaMCU/#contact-sensor","title":"Contact Sensor","text":"DP ID Function points Identifier Data type Function type Properties 1 Door Sensor doorcontact_state Only report Boolean 2 Battery Level battery_percentage Only report Integer Values range:0-100, Pitch1, Scale0, Unit:% 3 Battery Level battery_state Only report Enum Enumerated values:low, middle, high 4 Anti-remove Alarm temper_alarm Only report Boolean"},{"location":"TuyaMCU/#air-purifier","title":"Air purifier","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch Switch Issue and report Boolean 2 PM2.5 PM25 Only report Integer Values range:0-999, Pitch1, Scale0, Unit: 3 Work mode Mode Issue and report Enum Enumerated values:Manual, Auto, Sleep 4 Wind speed Speed Issue and report Enum Enumerated values:speed1, speed2, speed3, speed4, speed5 5 Filter usage Filter Only report Integer Values range:0-100, Pitch1, Scale0, Unit:% 6 Fresh Anion Issue and report Boolean 7 Child lock Lock Issue and report Boolean 9 UV light UV Issue and report Boolean 11 Filter reset FilterReset Issue and report Boolean 12 indoor temp Temp Only report Integer Values range:-20-50, Pitch1, Scale0, Unit:\u2103 13 Indoor humidity Humidity Only report Integer Values range:0-100, Pitch1, Scale0, Unit:%"},{"location":"TuyaMCU/#heater","title":"Heater","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch Power Issue and report Boolean 2 Target temperature TempSet Issue and report Integer Values range:0-37, Pitch1, Scale0, Unit:\u2103 3 Current Temperature TempCurrent Only report Integer Values range:-9-99, Pitch1, Scale0, Unit:\u2103 4 Mode Mode Issue and report Enum Enumerated values:m, p 5 Fault alarm Fault Only report Fault Barrier values:1, 2, 3 6 Gear position gear Issue and report Enum Enumerated values:low, mid, high, off 7 Conservation eco_mode Issue and report Boolean"},{"location":"TuyaMCU/#smart-fan","title":"Smart fan","text":"DP ID Function points Identifier Data type Function type Properties 1 Switch switch Issue and report Boolean 2 Wind Speed Level fan_speed Issue and report Enum Enumerated values:1, 2, 3, 4 3 Left-and-Right Swing fan_horizontal Issue and report Enum Enumerated values:on, off 4 Up-and-Down Swing fan_vertical Issue and report Enum Enumerated values:on, off 5 Fault Alarm fault Only report Fault Barrier values:1, 2 6 Anion anion Issue and report Boolean 7 Humidify humidifier Issue and report Boolean 8 Oxygen oxygan Issue and report Boolean 9 Child Lock lock Issue and report Boolean 10 Cool fan_cool Issue and report Boolean 11 Set Temperate temp Issue and report Integer Values range:0-50, Pitch1, Scale0, Unit:\u2103 12 Current Temperature temp_current Only report Integer Values range:0-50, Pitch1, Scale0, Unit:\u2103"},{"location":"TuyaMCU/#kettle","title":"Kettle","text":"DP ID Function points Identifier Data type Function type Properties 1 Working switch start Issue and report Boolean 2 Heat to target temperature shortcut (\u00b0C) temp_setting_quick_c Issue and report Enum Enumerated values:50, 65, 85, 90, 100 3 Heat to target temperature shortcut (\u00b0F) temp_setting_quick_f Issue and report Enum Enumerated values:122, 149, 185, 194, 212 4 Cool to the target temperature shortcut after boiling (\u00b0C) temp_boiling_quick_c Issue and report Enum Enumerated values:50, 65, 85, 90, 100 5 Cool to the target temperature shortcut after boiling (\u00b0F) temp_boiling_quick_f Issue and report Enum Enumerated values:122, 149, 185, 194, 212 6 Temperature scale switching temp_unit_convert Issue and report Enum Enumerated values:c, f 7 Insulation switch switch_keep_warm Issue and report Boolean 8 Holding time setting keep_warm_setting Issue and report Integer Values range:0-360, Pitch1, Scale0, Unit:min 9 Mode work_type Issue and report Enum Enumerated values: setting_quick, boiling_quick, temp_setting, temp_"},{"location":"TuyaMCU/#becathermostat","title":"BecaThermostat","text":"<p>Work in progress</p> DP ID Function points Identifier Data type Function type Properties 1 Switch Power Issue and report Boolean 2 Target temperature TempSet Issue and report Integer Values range:0-37, Pitch1, Scale0, Unit:\u2103 3 Current Temperature TempCurrent Only report Integer Values range:-9-99, Pitch1, Scale0, Unit:\u2103 4 Mode Mode Issue and report Enum Enumerated values:m, p (wip) 102 Floor Temperature FloorCurrent Issue and report Integer Values range:0-37, Pitch1, Scale0, Unit:\u2103"},{"location":"TuyaMCU/#inkbird-itc-308-wifi","title":"Inkbird ITC-308-Wifi","text":"<p>Temperature controller with individual plug in sockets for heating/cooling</p> DP ID Function points Identifier Data type Function type Properties 101 Temperature unit Cf Issue and report Integer 0=C, 1=F 102 Calibration Ca Issue and report Integer Unit is 0.1C 104 Temperature sensor Issue and report Integer Unit is 0.1C 106 Temperature set point Ts Issue and report Integer Unit is 0.1C 108 Compressor delay time Pt Issue and report Integer Unit is minutes 109 Alarm high temperature Ah Issue and report Integer Unit is 0.1C 110 Alarm low temperature Al Issue and report Integer Unit is 0.1C, For negative values use -(0xFFFFFFFF - value) 115 Relay status Only report Integer 01=cool, 02=off, 03=heating 116 Temperature sensor Issue and report Integer Unit is 0.1F 117 Heating differential value Hd Issue and report Integer Unit is 0.1C 118 Cooling differential value Cd Issue and report Integer Unit is 0.1C <p>The unit will constantly be sending the temperature sensor value in celsius and fahrenheit: 104 and 116.  To trigger the unit to send all settings, send any value to a non-used register, e.g. TuyaSend1 2,1</p> <p>Example:</p> Tasmota command Result TuyaSend1 2,1 Trigger the unit to reveal all settings TuyaSend2 106,250 Change set-point to 25.0C TuyaSend2 101,1 Change units to Fahrenheit"},{"location":"TuyaMCU/#inkbird-ihc-200-wifi","title":"Inkbird IHC-200-Wifi","text":"<p>Humidity controller with two relay sockets very similar to the ITC-308-WIFI This unit ships with a RTL based WR3 module which cannot be flashed with Tasmota, however the WR3 module is pin compatible with an ESP12-F module and is on a daughter board similar to the one in the ITC-308-WIFI</p> DP ID Function points Identifier Data type Function type Properties 104 Humidity sensor Only report Integer Unit is 0.1C 106 Humidity set point HS Issue and report Integer Unit is 0.1C <p>Dpid 102,108,109,110,106,117,118 return data and are not yet reverse engineered but are likely similar to ITC-308 but related to humidity. </p>"},{"location":"TuyaMCU/#further-reading","title":"Further Reading","text":"<ul> <li>TuyaMCU Flashing and Device Configuration</li> </ul>"},{"location":"UFS/","title":"Universal File System","text":"<p>This feature is included in every precompiled binary with flash size &gt;1M</p> <p>For ESP8266 modules that have more than 1MB of flash memory (NodeMCU, Wemos-D1) you can build a variant  with a universal file system or UFS and store your files there (data, images, commands, etc). There are some special files that you can upload and use to execute actions.</p> <p>Warning</p> <p>The file partition DOES NOT get erased by reset commands. Only a complete flash erase will remove it.</p>"},{"location":"UFS/#ufs-in-the-web-gui","title":"UFS in the Web GUI","text":"<p>After compiling and flashing you will find a new entry in Tasmota webUI: Consoles - Manage File system</p> <p></p> <p>The \"Manage File System\" page provides:</p> <ul> <li>On top, the total size of the file system and the free size</li> <li>A button to upload a file from the host (1st select the file with the <code>Choose File</code> button, then <code>Start Upload</code>). Beware, only filenames up to 31 characters long are allowed.</li> <li>A list of available files with timestamp of upload and size in bytes</li> <li>The 'fire' icon allows to delete the file without any confirmation</li> <li>The 'memo' icon allows to edit the file and the \"Create and edit new file\" button launches the editor with a new file.</li> </ul> <p></p> <p>The file editor allows to edit the content of a text file online, save it back to the UFS.  By changing the name at the top, it will be saved-as the new name (original file remains unchanged). Changes can be discarded by clicking on the button \"Manage File System\" to returns to the manager.</p> <p></p>"},{"location":"UFS/#commands","title":"Commands","text":"<p>Complete list of UFS commands</p> <p>Also look into Berry scripting language for ESP32 which works with UFS.</p>"},{"location":"UFS/#special-files","title":"Special files","text":""},{"location":"UFS/#autoexecbat","title":"autoexec.bat","text":"<p>Stores commands that will be executed at every boot, similar to the backlog commands in rules trigger at <code>System#Boot</code>. </p> <p>Almost any command can be used in the file. However, avoid commands that will make the device reboot,  such as: changing Wifi setting, MQTT settings, Templates &amp; GPIO, etc. Commands that triggers reboot will create a boot loop which will force Tasmota to automatically disable <code>autoexec.bat</code> and other settings. See SetOption36 for more details.</p> <p>Commands must be kept one command per line and they will be executed sequentially. Lines starting with semicolon are ignored as comments.</p>"},{"location":"UFS/#displaybat","title":"display.bat","text":"<p>Stores data that will be displayed at every boot, similar to the DisplayText commands in rules trigger at <code>System#Init</code> (as long as you have a display driver initializated).</p> <p>Example</p> <pre><code>; clr screen\n[z]\n; draw full screen picture - corona.rgb file must exist in UFS storage\n[x0y0P/corona.rgb]\n; define index color\n[dc19:31000]\n; draw transparent text with new index color\n[x60y30f2Ci19D2]Tasmota\n</code></pre>"},{"location":"UFS/#autoexecbe","title":"autoexec.be","text":"<p>For ESP32 with Berry scripting language, <code>autoexec.be</code> file will be automatically loaded and executed at boot.</p>"},{"location":"UFS/#compiling-for-universal-file-system","title":"Compiling for Universal File System","text":"<p>Copy <code>platformio_override_sample.ini</code> as <code>platformio_override.ini</code></p> <p>For ESP8266 boards, activate by removing the <code>;</code> in front of one of the below lines:</p> <ul> <li><code>board = esp8266_4M3M</code> for 3Mb universal file system</li> <li><code>board = esp8266_4M2M</code> for 2Mb universal file system</li> <li><code>board = esp8266_2M1M</code> for 1Mb universal file system</li> </ul> <p>About ESP32</p> <p>ESP32 boards with default 4MB flash only support a file system limited to 320KB. You need a board with more than 4MB to enable a larger file system.</p> <p>Extending file system size on ESP32 is performed through the <code>board_build.partitions</code> setting. There are preconfigured settings for 4M, 8M and 16MB ESP32 devices. The are enabled in <code>platformio_override.ini</code> like for the ESP8266. Comment the standard setting and uncomment the variant you want.</p> <pre><code>; Build variant ESP32 4M Flash, Tasmota 1856k Code/OTA, 320k LITTLEFS (UFS) (default)\nboard                   = esp32_4M\n; Build variant ESP32 8M Flash, Tasmota 2944k Code/OTA, 2112k LITTLEFS (UFS)\n;board                   = esp32_8M\n; Build variant ESP32 16M Flash, Tasmota 2944k Code/OTA, 10M LITTLEFS (UFS)\n;board                   = esp32_16M\n</code></pre>"},{"location":"ULP/","title":"ULP for ESP32","text":""},{"location":"ULP/#ultra-low-power-coprocessor","title":"Ultra Low Power coprocessor","text":"<p>Many members of the ESP32 family have an additional coprocessor with limited features and processing power but at the same time the ability to work independent from the main CPU and in deep sleep mode. This Berry module exposes these processing units in order to load and execute code at runtime thus allowing to provide solutions for special use cases and using every bit of available processing power.</p> This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#define USE_BERRY_ULP      // (ESP32, ESP32S2 and ESP32S3 only) Add support for the ULP via Berry (+5k flash)\n</code></pre> or add as a build flag to any build environment, i.e. in platformio_tasmota_cenv.ini: <pre><code>build_flags             = ${env:tasmota32_base.build_flags}\n                        -DUSE_BERRY_ULP\n</code></pre></p> <p>The purpose of this document is not to repeat every information of these documents: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/ulp.html https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/ulp_instruction_set.html </p> <p>It will also not make it easy to write assembler code for the ULP and embed it in Berry projects. But it shall guide you through the process of adapting one of many open source examples, do some little changes and setting up a toolchain for personal use cases. In return, it can even make it easier and substantially faster to rapidly develop assembler projects, because there is no flashing involved in the code deployment, which happens in Berry at runtime.</p>"},{"location":"ULP/#fsm-and-riscv-what","title":"FSM and RISCV ... what?","text":"<p>Currently there are 3 SOC's of the ESP32-family with an included ULP, which are the ESP32, the ESP32S2 and the ESP32S3. New to the game is the ESP32C6 with a so called LP_CORE which for simpicity is handled by the ULP module too.  </p> <p>The oldest one - the ESP32 - features the simplest type, which Espressif names Finite State Machine or in short FSM. This ULP can only be programmed in assembly. The newer ESP32S2/S3 allow to run the ULP in FSM mode too with some minor additions in the instruction set. They are able ( = should be able in most cases) to use the same assembly source code, but the resulting binaries are not compatible. But additionally both of the new models (ESPS2/S3) are able to run the ULP in RISCV mode, which has a different toolchain and allows to use C as programming language. This makes it a lot easier to work with it. Only one ULP mode possible at a time, so you can run only in FSM or RISCV mode. The LP_CORE of the ESP32C6 always runs in RISCV mode and is the most powerful low power core to date.  </p> <p>For Tasmota it was decided to keep things as simple and modern as possible, thus for ESP32S2 and ESP32S3 the old FSM mode is not supported and we enjoy the simplicity of the high level language C.  Of course it is possible to use inline assembly for the RISCV cores in a C file for hand optimized code parts.</p> <p>Bottom line for Tasmota: ESP32 - uses ULP in FSM mode Every other device - use ULP/LP in RISCV mode  </p> <p>Tip</p> <p>Although the main core of the ESP32C3 uses the RISCV architecure, there is no built in ULP at all. For the upcoming ESP32C6 an integrated ULP was anounced, but no further info is available at the moment. </p>"},{"location":"ULP/#limits-of-the-ulp","title":"Limits of the ULP","text":"<p>To simplify some things: Everything in the ULP is limited. On the old FSM type ULP there are only 4 registers, very few operations and limited memory access. For some operations it is not possible to use mutable values, but the code must be fixed (for pin/register access) at compile time. That's why you will see lots of defines and constants in basically every example project. This was the reason, why for projects like Tasmota it never made sense to include ULP code in core parts.  </p>"},{"location":"ULP/#advantages-of-the-ulp","title":"Advantages of the ULP","text":"<p>Besides the possibility to run code in deep sleep and wake up the system, it can also make sense to run the ULP in parallel to the main system. To simplify again: Everything that is critical to precise timing and is somehow portable to ULP, should run better than on the main cores! This includes the internal temperature sensor and the hall sensor. Additionally it can free the main cores of some tasks. It could be demonstrated that the newer LP_CORE is fast enough to controll a WS2812 LED strip using bitbanging.  </p>"},{"location":"ULP/#data-exchange-between-main-system-and-ulp","title":"Data exchange between main system and ULP","text":"<p>There is a memory region which is located at fixed  address 0x5000000, which is called RTC_SLOW_MEM. This is the only region that is accessible from main cores and the ULP. It is the coders job to find a way to control the data flow, by reading and writing from and to certain addresses. The toolchains down below will print out data, that will show, where accessible variable can be found to access from Berry with <code>ULP.get_mem()</code> and <code>ULP.set_mem()</code>.  </p>"},{"location":"ULP/#general-program-flow","title":"General program flow","text":"<p>A typical ULP program is started from the main core at the position of the so called global entry point. Then it executes its chain of commands and ends with a <code>halt</code> command. It is technically possible to create a run loop inside the code and to not end with <code>halt</code>. But typically such a loop is realized with a wakeup timer, that restarts the  with a certain interval, which can be set with <code>ULP.wake_period(register,time in microseconds)</code>. The register is numbered from 0 to 4 and can be changed in the assembly code with <code>sleep register</code>.  </p> <pre><code>sequenceDiagram\n    participant CPU\n    participant RTC_MEM\n    participant ULP/LP\n    CPU-&gt;&gt;RTC_MEM: Load ULP program\n    CPU-&gt;&gt;ULP/LP: Start ULP program\n    CPU-&gt;&gt;CPU: Continue normal work\n    CPU-&gt;&gt;CPU: or deep sleep\n    ULP/LP-&gt;&gt;ULP/LP: Do some work\n    ULP/LP-&gt;&gt;RTC_MEM: Update data in RAM\n    ULP/LP-&gt;&gt;CPU: optional - Wake up CPU\n    CPU-&gt;&gt;RTC_MEM: Work with data in RAM</code></pre>"},{"location":"ULP/#tasmota-conventions","title":"Tasmota conventions","text":"<p>The assembly code can be divided in different sections of which the so called <code>.text</code>sections contains the program, but can hold variables or arbitrary data too. In general for the assembler it is not so important, where the functions or the global entry point is located. But for the FSM in Tasmota the rule is, that the global entry point or a jump to it is located at position 0 in RTC_SLOW_MEM. That way <code>ULP.run()</code> can always point to this address 0. On RISCV ULP's the entry point is always 0. It is a design decision to keep the ULP module as small as possible and the addition of more internal functions shall be avoided, i.e. for doing setup of GPIO/RTC pins. If possible, this should be done in assembly code.  </p> <p>Example</p> <pre><code>// rtc_gpio_isolate(12) translates to:\nWRITE_RTC_REG(RTC_IO_TOUCH_PAD5_REG, 27, 1, 0) //disable pullup\nWRITE_RTC_REG(RTC_IO_TOUCH_PAD5_REG, 28, 1, 0) //disable pulldown\nWRITE_RTC_REG(RTC_IO_TOUCH_PAD5_REG, 13, 1, 0) //disable input\nWRITE_RTC_REG(RTC_GPIO_ENABLE_W1TS_REG, 29, 1, 0) //disable output\nWRITE_RTC_REG(RTC_IO_TOUCH_PAD5_REG, 31, 1, 1) //hold\n</code></pre>"},{"location":"ULP/#using-external-toolchains-for-this-driver","title":"Using external toolchains for this driver","text":"<p>There are 2 ways to assemble code for later use in Tasmota. In theory every external ULP project, which fits in the reserved memory space that is defined in the framework package used to compile the Tasmota firmware, should be convertible. This limit is subject to change.  </p>"},{"location":"ULP/#export-from-esp-idf-project","title":"Export from ESP-IDF project","text":"<p>This is the recommended way, that works for every ULP version in Tasmota.</p> <p>Many projects are using the ESP-IDF with CMAKE and will be compiled with <code>idf.py build</code>. We can extract the ULP code without flashing this project, with two simple methods: </p>"},{"location":"ULP/#python-script-bins2berrypy","title":"Python script 'binS2Berry.py'","text":"<p>Start a helper Python binS2Berry.py script in the root level of the project, which prints hooks to used variables and functions to console as Berry code, that can be used as a base application.  </p>"},{"location":"ULP/#web-app","title":"Web-App:","text":"<p>Use the embedded JS application right here.  </p> <p>ESP-IDF build folder: </p> <p>(You can drag and drop the folder on the button too.)</p> <pre><code># Generate ULP code in your browser !! Parsing completely in JS, no file upload to a server.\n</code></pre> <p>Additionally it can be helpful, to test the ULP code in a minimal working example outside of Tasmota.</p>"},{"location":"ULP/#micropython-and-micropython-esp32-ulp-fsm-only-deprecated","title":"Micropython and micropython-esp32-ulp (FSM only) - DEPRECATED!!","text":"<p>DO NOT USE FOR NEW PROJECTS!</p> <p>Only available for the ESP32 using the FSM type ULP.</p> <p>A great project to run ULP code in Micropython on the ESP32 can be used to assemble and export the same projects to Tasmota. There are ports of Micropython for Linux, Windows and Mac, which must be installed to the system of your choice. Run it and in the Micropython console install like that: <pre><code># MacOS\nimport upip\n# Linux\nimport mip\nupip.install('micropython-esp32-ulp')\n</code></pre></p> <p>After that your are ready to assemble. The ULP code is embedded as a multiline string in Micropython scripts. For use in Tasmota it makes sense to make some changes, that are described in an ulp_template.py and to use this template by replacing the source code string with the new code.  </p> <p>Tip</p> <p>The Micropython module can not really include external headers, but it offers a very convenient database function as described here:   link:preprocess Otherwise the missing defines must be added annually.</p> <p>After you created or did download your <code>ulp_app.py</code> you can export the data with 'micropython ulp_app.py' to the console, from where it can be copy pasted to the Berry console or to your Berry project.  </p> <p>Tip</p> <p>It is recommended to embed the setup steps for GPIO pins or ADC to the bottom part of this <code>ulp_app.py</code> by printing Berry commands for easier testing in the Berry console.</p>"},{"location":"ULP/#examples","title":"Examples","text":"<p>This is all about porting and adapting existing code. Thank you to everyone who is sharing their ULP code!!  </p>"},{"location":"ULP/#blink-an-led-fsm","title":"Blink an LED - FSM","text":"<p>Let's take a look at https://github.com/micropython/micropython-esp32-ulp/blob/master/examples/blink.py.  </p> <ol> <li>Use a copy of ulp_template.py  and name it to your liking.</li> <li>Replace the <code>source</code> string of the template with the version of the example.     The <code>.text</code>section starts with:     <pre><code>.text\nmagic: .long 0\nstate: .long 0\n</code></pre>     this must become:     <pre><code>.text\njump entry\nmagic: .long 0\nstate: .long 0\n</code></pre></li> <li>This is already enough to assemble. For convenience it is recommended to add a line to the last section (with multiple \"prints\") with content: <code>print(\"ULP.wake_period(0, 500000)\")</code>. </li> </ol> <p>Done!</p> <p>Now let's modify the code slightly for different intervals for \"on\" and \"off\".</p> <ol> <li>Add a second wake period with <code>print(\"ULP.wake_period(1, 200000)\")</code>.</li> <li>Add <code>sleep</code> commands to the source code like so:     <pre><code>on:\n# turn on led (set GPIO)\nWRITE_RTC_REG(RTC_GPIO_ENABLE_W1TS_REG, RTC_GPIO_ENABLE_W1TS_S + gpio, 1, 1)\nsleep 0\njump exit\n\noff:\n# turn off led (clear GPIO)\nWRITE_RTC_REG(RTC_GPIO_ENABLE_W1TC_REG, RTC_GPIO_ENABLE_W1TC_S + gpio, 1, 1)\nsleep 1\njump exit\n</code></pre></li> </ol> <p>The console output should look something like that:  </p> <pre><code>    #You can paste the following snippet into Tasmotas Berry console:\n    import ULP\n    ULP.wake_period(0,500000) # on time\n    ULP.wake_period(1,200000) # off time \n    var c = bytes().fromb64(\"dWxwAAwAaAAAAAAADAAAgAAAAAAAAAAAEACAcgEAANDlryxyMABAgCcFzBkABWgdEACAcuGvjHIBAABoIQCAcgQAANASAIByCAAgcAQAAGgBAAWCWAAAgAQFaB0AAACSZAAAgAUFaB0BAACSZAAAgAAAALA=\")\n    ULP.load(c)\n    ULP.run()\n</code></pre> <p>After executing it the built in LED should blink (if wired to the usual GPIO 2). You can change the wake intervals on-the-fly with i.e. <code>ULP.wake_period(1, 800000)</code> in the Berry console.</p> <p>Now on to something more complex with wake from deep sleep.</p>"},{"location":"ULP/#hall-sensor-fsm","title":"Hall sensor - FSM","text":"<p>We have a working example here: https://github.com/duff2013/ulptool/blob/master/src/ulp_examples/ulp_hall_sensor/hall_sensor.s</p> <p>Converting is possible in the same manner as before. Start with  <code>ulp_template.py</code>, replace the string with the content of the .s file and make sure you have the include database properly populated or you add the missing defines from the header files manually. Additionally we need to setup the ADC pins with the help of <code>ULP.adc_config()</code>. In this particular example the resulting code is (in the form of print outputs placed in the .py file):  </p> <pre><code>print(\"ULP.adc_config(0,2,3)\") # adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_6);\nprint(\"ULP.adc_config(3,2,3)\") # adc1_config_channel_atten(ADC1_CHANNEL_3, ADC_ATTEN_DB_6); + adc1_config_width(ADC_WIDTH_BIT_12);\n</code></pre> <p>The entry point is already at address zero, so there are no changes needed to assemble, load and start he ULP program in Tasmota. In the console output we can find the positions of the variables which hold the voltage measurements and can read out it values:</p> <pre><code>0000 entry\n0051 jmp_threshold\n0052 exit\n0053 wake_up\n0059 Sens_Vp0\n0060 Sens_Vn0\n0061 Sens_Vp1\n0062 Sens_Vn1\n0063 Sens_Diff_p1\n0064 Sens_Diff_n1\n</code></pre> <p>In order to use this whole construction to wake the ESP32 with the help of a magnet, we now have to do some measurements to find feasible threshold values.  This can be done by calculating the difference between  <code>Sens_Vpx</code> and <code>Sens_Vnx</code> in Berry. Then place the magnet of your choice near the ESP32 and note how these values change. If the magnet is strong enough, chances are great, that you find a stable threshold. Now let's add some assembly code!  </p> <p>We can add some constants in the header part of the code (that worked with a tested weak magnet): <pre><code>    .set threshold_pos   , 7\n    .set threshold_neg   , 2\n</code></pre></p> <p>Now append some variables to the end of the .bss section: <pre><code>  .global Sens_Diff_p1\nSens_Diff_p1:\n  .long 0\n\n  .global Sens_Diff_n1\nSens_Diff_n1:\n  .long 0\n</code></pre></p> <p>The we need some code, which replaces line 135 and 136 of the original example: <pre><code>/* calculate differences */\n    move r3, Sens_Vn1\n    ld r3, r3, 0\n    move r2, Sens_Vn0\n    ld r2, r2, 0\n    sub r3, r2, r3         # eventually change to sub r3, r3, r2 for your setup\n    move r2, Sens_Diff_n1\n    st r3,r2,0\n    move r3, Sens_Vp1\n    ld r3, r3, 0\n    move r2, Sens_Vp0\n    ld r2, r2, 0\n    sub r3, r3, r2          # eventually change to sub r3, r2, r3 for your setup\n    move r2, Sens_Diff_p1\n    st r3,r2,0\n\n/* wake up */\n    ld r0,r2,0 # Sens_Diff_p1\n    JUMPR wake_up, threshold_pos, GE\n</code></pre></p> <p>After loading and starting you can send the ESP to deep sleep. For testing it is recommended to add the optional wake timer as a fallback: <code>ULP.sleep(30)</code> </p> <p>Try to wake up the system with the magnet.  </p> <p>But is there a way to circumvent the limitation of this example, that forces us to set the threshold value as a constant? Well ... yes, we can do some hacky stuff.  </p> <p>We must dig a little deeper, to understand how the 32-bit instructions are constructed. Let's look at the <code>jumpr</code> command, which is defined in ulp.h like that:  </p> <pre><code>    struct {\n        uint32_t imm : 16;          /*!&lt; Immediate value to compare against */\n        uint32_t cmp : 1;           /*!&lt; Comparison to perform: B_CMP_L or B_CMP_GE */\n        uint32_t offset : 7;        /*!&lt; Absolute value of target PC offset w.r.t. current PC, expressed in words */\n        uint32_t sign : 1;          /*!&lt; Sign of target PC offset: 0: positive, 1: negative */\n        uint32_t sub_opcode : 3;    /*!&lt; Sub opcode (SUB_OPCODE_B) */\n        uint32_t opcode : 4;        /*!&lt; Opcode (OPCODE_BRANCH) */\n    } b;                            /*!&lt; Format of BRANCH instruction (relative address, conditional on R0) */\n</code></pre> <p>The constant (= immediate) value is stored in the upper 16 bits and we can access in the byte buffer. To find the address of the command we can simply add a label in the code:  </p> <pre><code>  .global jmp_threshold\njmp_threshold:\n    JUMPR wake_up, threshold_pos, GE\n</code></pre> <p>This will get printed to the console while assembling. Then in Berry we can do a:  </p> <pre><code>    var c = bytes(\"...\")\n    # jmp_threshold is the 32-bit-address in RTC_SLOW_MEM\n    var jmp_threshold = 51\n    var pos = (3+jmp_threshold)*4\n    var cmd = c[pos..pos+4]       # we do not have uint32 in Berry\n    cmd.set(0,threshold,2)        # upper 16 bit\n    ULP.set_mem(51,cmd.get(0, 4)) # modify running ULP program\n</code></pre> <p>Now we can change these constant values on the fly.  </p>"},{"location":"ULP/#example-driver-in-berry-allowing-deep-sleep-with-wake-up-via-magnet","title":"Example driver in Berry allowing deep sleep with wake up via magnet:","text":"<p>Add commands: <code>hall_thres x</code> - shows current threshold for the p difference value or sets it to x. <code>usleep x</code> - start deep sleep for x seconds or infinitely </p> <p>ulp_hall.be</p>"},{"location":"ULP/#i2c-access-fsm","title":"I2C access  - FSM","text":"<p>Although there are special assembler commands to access I2C devices the most common method in the examples on GitHub is bit banging. This is reported to be more reliable and circumvents some limitations (only 2 pin combinations and bytewise access with special I2C commands). Nearly every example is based on some very clever macros and control flow tricks, that replicate a simple stack and subroutines (similar to a library), which is a good example for the \"Art of coding\". To make it assemble in Micropython we need some functions in the Micropython-script, that can expand the macros. These functions are in a very early stage of development and might eventually later find their way into the micropython-esp32-ulp project after more refinement.  </p> <p>Tip</p> <p>If your examples do not assemble in Micropython, please try out the ESP-IDF variant.</p> <p>An example for the BH-1750 light sensor can be found here: https://github.com/duff2013/ulptool/tree/master/src/ulp_examples/ulp_i2c_bitbang</p> <p>With our techniques from above the concatenation of the .s files results in:   BH-1750 </p>"},{"location":"ULP/#example-berry-driver","title":"Example Berry driver:","text":"<p>ulp_bh1750.be</p>"},{"location":"Universal-Display-Driver/","title":"Universal Display and Universal Touch drivers (uDisplay/uTouch)","text":"<p>Starting with Tasmota v13.4, we are progressibely removing specific display and touch drivers and replacing with Universal Drivers. This is made to simplify future evolutions and shrink the code base, as the number of drivers is increasing fast.</p> <p>This page is primarily targeting users that need to move from specific driver (ILI9341, SSD1306...)</p>"},{"location":"Universal-Display-Driver/#migrating-to-udisplay","title":"Migrating to uDisplay","text":""},{"location":"Universal-Display-Driver/#step-1-check-that-your-display-is-supported-by-udisplay-driver","title":"Step 1. Check that your display is supported by uDisplay driver","text":"<p>The currently supported display drivers are:</p> <p>TO BE UPDATED</p> Display type Interface ILI9341 TFT SPI ILI9342 TFT SPI ILI9488 TFT SPI GC9A01 SPI SH1106 OLED display I<sup>2</sup>C SH1107 SPI SSD1306 OLED display I<sup>2</sup>C SSD1331 SPI ST7262 RGB (ESP32S3) ST7735ST7735S SPI ST7789 TFT display SPI ST7796U SPIParallel Waveshare E-Paper 2.9\" display SPI Waveshare E-Paper 4.2\" display SPI"},{"location":"Universal-Display-Driver/#step-2-flash-with-udisplay-compatible-binary","title":"Step 2. Flash with uDisplay compatible binary","text":"<p>All <code>tasmota-display.bin</code>, <code>tasmota32-display.bin</code> and <code>tasmota32-lvgl.bin</code> include native support for uDisplay and uTouch. Select the appropriate binary and flash the device.</p>"},{"location":"Universal-Display-Driver/#step-3-use-autoconf-esp32-only","title":"Step 3. Use <code>autoconf</code> (ESP32 only)","text":"<p>Check if your device has already an <code>autoconf</code> file. In the main Tasmota UI, click on \"Configuration\" then \"Auto-configuration\". If you device is in the list, select it and \"Apply Configuration\". You can now skip steps 4 (GPIOs) and 5 (display.ini).</p>"},{"location":"Universal-Display-Driver/#step-4-configure-gpios","title":"Step 4. Configure GPIOs","text":"<p>The configuration template is slightly different with uDrive:</p> <ul> <li>Set an unused GPIO to <code>Option A3</code>.This GPIO configuration is a virtual marker to signal that uDriver should be started; it has no effect on the GPIO. It can be assigned to \"reserved\" (red) GPIOs.</li> <li>If <code>SPI</code>, change the device specific <code>&lt;device&gt; CS</code> GPIO to the general <code>SPI CS</code> GPIO.For example change from <code>ILI9341 CS</code> to <code>SPI_CS</code></li> <li>If <code>I2C</code>, you should not need any change (IS IT TRUE?)</li> </ul>"},{"location":"Universal-Display-Driver/#step-5-configure-the-displayini-descriptor-file","title":"Step 5. Configure the <code>display.ini</code> descriptor file","text":"<p>Select the appropriate <code>display.ini</code> file from the repository, and store it as <code>display.ini</code> file in the file system.</p> <p>Storing <code>display.ini</code> is the preferred method to configure the descriptor file. If this is not possible or if the device has no filesystem, use one of the alternative methods:</p> <ol> <li>A <code>display.ini</code> file present in the flash file system. preferred option</li> <li>A special <code>&gt;d</code> section in scripting. Copy the file to the <code>&gt;d</code> script section and place a <code>-&gt;displayreinit</code> cmd into <code>&gt;B</code> section</li> <li>Copy the descriptor to <code>Rule3</code> but do not enable it. Convert the multiline descriptor into a single line descriptor by replacing every linefeed with a space. All other spaces need to be removed. Maximum length is a little more than 511 bytes.</li> <li>Compile the descriptor into the binary with a <code>#define DSP_ROM_DESC</code> string in <code>user_config_override.h</code>, see example here.</li> </ol>"},{"location":"Universal-Display-Driver/#step-6-restart","title":"Step 6. Restart","text":"<p>The migration to uDisplay is now complete.</p>"},{"location":"Universal-Display-Driver/#migrating-to-utouch","title":"Migrating to uTouch","text":""},{"location":"Universal-Display-Driver/#step-1-check-you-displayini","title":"Step 1. Check you <code>display.ini</code>","text":"<p>It is possible that you <code>display.ini</code> has already the uTouch configuration, especially if you used <code>autoconf</code>. If this is the case, you are done.</p>"},{"location":"Universal-Display-Driver/#step-2-add-utouch-section-to-displayini","title":"Step 2. Add uTouch section to <code>display.ini</code>","text":"<p>Depending on your touch device, add the following templates to <code>display.ini</code>:</p>"},{"location":"Universal-Display-Driver/#ft5206-example","title":"FT5206 example","text":"<p>Configure:</p> <ul> <li>GPIO <code>TS SPI CS</code> to the touch SPI <code>CS</code> pin</li> <li>add the following template:</li> </ul> <pre><code>:UTI,FT5206,I2,*,-1,-1\nRD A8\nCP 11\nRTF\nRD A3\nCP 64\nRTF\nRT\n:UTT\nRDM 00 16\nMV 2 1\nRT\n:UTX\nMV 3 2\nRT\n:UTY\nMV 5 2\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#xpt2046-example","title":"XPT2046 example","text":"<p>Configure:</p> <ul> <li>GPIO <code>TS SPI CS</code> to the touch SPI <code>CS</code> pin</li> <li>GPIO <code>TS IRQ</code> to the interrupt pin</li> <li>add the following template:</li> </ul> <pre><code>:UTI,XPT2046,S1,*,-1,*\nCPR 00\nRT\n:UTT\nXPT 300\nRT\n:UTX\nMV 0 2\n;DBG 1\nSCL 460 0.0930233\nLIM 319\nRT\n:UTY\nMV 2 2\nSCL 300 0.0695652\nLIM 239\nRT\n#\n</code></pre> <p>If your device does not have the same calibration, you instead:</p> <pre><code>:UTI,XPT2046,S1,*,-1,*\nCPR 00\nRT\n:UTT\nXPT 300\nRT\n:UTX\nMV 0 2\nRT\n:UTY\nMV 2 2\nRT\n#\n</code></pre> <p>then run DisplayCalibrate application which creates an additional <code>:H</code> line with your display's specific calibration.</p>"},{"location":"Universal-Display-Driver/#gt911-example","title":"GT911 example","text":"<p>Configure:</p> <ul> <li>GPIO <code>TS RST</code> to the touch reset pin</li> <li>add the following template:</li> </ul> <pre><code>:UTI,GT911,I1,5d,*,-1\nRDWM 8140 4\nMV 0 1\nCPR 39\nRTF\nMV 1 1\nCPR 31\nRTF\nMV 2 1\nCPR 31\nRTF\nRT\n:UTT\nRDW 814E\nMV 0 1\nAND 80\nCPR 80\nRTF\nRDWM 8150 8\nWRW 814E 00\nRT\n:UTX\nMV 0 3\nRT\n:UTY\nMV 2 3\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#simple-resitive-touch-example","title":"Simple resitive touch example","text":"<pre><code>:UTI,SRES,R\nCPR 00\nRT\n:UTT\nGSRT 500\nRT\n:UTX\nMV 0 2\nRT\n:UTY\nMV 2 2\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#step-3-restart","title":"Step 3. Restart","text":"<p>You are now done.</p>"},{"location":"Universal-Display-Driver/#universal-display-driver-udisplay","title":"Universal Display Driver (uDisplay)","text":"<p>uDisplay is included in all pre-compiled display binaries, for ESP8266 and ESP32. If you compile yourself, you need to <code>#define USE_UNIVERSAL_DISPLAY</code></p> <p>Universal Display Driver or uDisplay is a way to define your display settings using a simple text file and easily add it to Tasmota. uDisplay is <code>DisplayModel 17</code>. It supports I2C and hardware or software SPI (3 or 4 wire), 8,16 Bit parallel and RGB interface. The driver must be enabled by OPTION A3 on any GPIO pin. </p> <p>The driver is enabled by compiling with <code>#define USE_UNIVERSAL_DISPLAY</code> and setting an unused GPIO to <code>Option A3</code>.</p>"},{"location":"Universal-Display-Driver/#descriptor-file","title":"Descriptor File","text":"<p>The display itself is defined by a descriptor file. Many display descriptor files are included in Tasmota GitHub in <code>tasmota/displaydesc</code> folder</p> <p>which may be provided by any of the following methods:</p> <ol> <li>A <code>display.ini</code> file present in the flash file system. preferred option</li> <li>A special <code>&gt;d</code> section in scripting. Copy the file to the <code>&gt;d</code> script section and place a <code>-&gt;displayreinit</code> cmd into <code>&gt;B</code> section</li> <li>Copy the descriptor to <code>Rule 3</code> but do not enable it. Convert the multiline descriptor into a single line descriptor by replacing every linefeed with a space. All other spaces need to be removed</li> <li>Compile the descriptor into the binary in a section in <code>user_config_override.h</code> under driver 17 (const char)</li> </ol> <p>Options 2 and 4 work well for 1M flash devices.</p> <p>Descriptor text file has the following elements:  </p> <p><code>:H</code> </p> <p>Header line describes the main features of the display (comma separated, no spaces allowed)</p> <ol> <li>name</li> <li>x size in pixels</li> <li>y size in pixels</li> <li>bits per pixel (1 for bw displays, 16 for color displays)</li> <li>hardware interface used either I2C or SPI</li> </ol> <p><code>I2C</code> </p> <p>I2C interface:</p> <ol> <li>I2C address in HEX</li> <li>SCL pin</li> <li>SDA pin</li> <li>RESET pin</li> </ol> <p><code>SPI</code> </p> <p>SPI interface:</p> <ol> <li>Number (1 = hardware SPI 1, 2 = Hardware SPI 2 (ESP32), 3 = software SPI</li> <li>CS pin</li> <li>CLK pin</li> <li>MOSI pin</li> <li>DC pin</li> <li>Backlight pin</li> <li>RESET pin</li> <li>MISO pin</li> <li>SPI Speed in MHz</li> </ol> <p><code>PAR</code> </p> <p>Parallel interface: (ESP32-S3 only)</p> <ol> <li>Bus size 8 or 16</li> <li>RESET pin</li> <li>CS pin</li> <li>DC pin</li> <li>WR pin</li> <li>RD pin</li> <li>Backlight pin</li> <li>d0-d7 pins</li> <li>d8-d15 pins if bus size = 16</li> <li>Parallel Speed in MHz (usually 20)</li> </ol> <p><code>RGB</code> </p> <p>RGB 16 bit interface: (ESP32-S3 only)</p> <ol> <li>DE pin</li> <li>VSYNC pin</li> <li>HSYNC pin</li> <li>PCLK pin</li> <li>Backlight pin </li> <li>b0-b4 pins (blue color)</li> <li>g0-g5 pins (green color)</li> <li>r0-r4 pins (red color) </li> <li>Pixel clock Speed in MHz (usually 14)</li> </ol> <p>All signals must be given. Unused pins may be set to -1. If you specify a <code>*</code> char the pin number is derived from the Tasmota GPIO GUI. The CS and DC pins must be the standard pins e.g. <code>SPI_CS</code> or <code>SPI_DC</code>.  </p> <p>there are RGB displays that also need an SPI initialisation. in this case specify the Init sequence with :IS,SCLK,MOSI,CS,RESET  there are RGB displays that also need an I2C initialisation. in this case specify the Init sequence with :II,BUS,ADDR (BUS = i2c bus nr 1 or 2, ADDR = adress of i2c device)  </p> <p>I2c</p> <pre><code>:II,1,38\n03,00\n08,00\n10\n07,FF\n</code></pre> <ol> <li>entry = device register to write  </li> <li>entry = value to write single entry defines a delay in milliseconds  </li> </ol> <p>Example</p> <pre><code>:H,SH1106,128,64,1,I2C,3c,*,*,*\n</code></pre> <pre><code>:H,ILI9341,240,320,16,SPI,1,-1,14,13,5,4,15,*,40\n</code></pre> <p><code>:S</code> (optional) Splash setup, also defines initial colors. If omitted screen is not cleared initially.</p> <ol> <li>Font number, if -1 splash screen is suppressed</li> <li>Font size</li> <li>FG color (as index color)</li> <li>BG color (as index color)</li> <li>x position of text</li> <li>y position of text  </li> </ol> <p>Example</p> <pre><code>:S,2,1,1,0,40,20\n</code></pre> <p><code>:I</code> Initial register setup for the display controller. (<code>IC</code> marks that the controller is using command mode even with command parameters) All values are in hex. On SPI the first value is the command, then the number of arguments and the the arguments itself. <code>Bit 7</code> on the number of arguments set indicate a wait of 150 ms. On I<sup>2</sup>C all hex values are sent to I<sup>2</sup>C.</p> <p>Example</p> <pre><code>:I\nEF,3,03,80,02\nCF,3,00,C1,30\nED,4,64,03,12,81\nE8,3,85,00,78\nCB,5,39,2C,00,34,02\nF7,1,20\nEA,2,00,00\nC0,1,23\nC1,1,10\nC5,2,3e,28\nC7,1,86\n36,1,48\n37,1,00\n3A,1,55\nB1,2,00,18\nB6,3,08,82,27\nF2,1,00\n26,1,01\nE0,0F,0F,31,2B,0C,0E,08,4E,F1,37,07,10,03,0E,09,00\nE1,0F,00,0E,14,03,11,07,31,C1,48,08,0F,0C,31,36,0F\n11,80\n29,80\n#\n</code></pre> <p><code>:V</code> video signal parameters for RGB panels   hsync_polarity,   hsync_front_porch,   hsync_pulse_width,   hsync_back_porch,   vsync_polarity,   vsync_front_porch,   vsync_pulse_width,   vsync_back_porch,   pclk_active_neg,  </p> <p><code>:o</code>,OP     <code>OP</code> = controller OPCODE to switch display off  </p> <p><code>:O</code>,OP      <code>OP</code> = controller OPCODE to switch display on  </p> <p><code>:R</code>,OP,SL       </p> <ol> <li><code>OP</code> = rotation opcode</li> <li><code>SL</code> = startline opcode (optional)  </li> </ol> <p><code>:0</code> <code>:1</code> <code>:2</code> <code>:3</code> </p> <p>Register values for all 4 rotations (color display only)</p> <ol> <li>rotation code</li> <li>x offset</li> <li>y offset</li> <li>rotation pseudo opcode for touch panel, in case of RGB panel use only these entries  the appropriate coordinate convervsions are defined via pseudo opcodes: 0 = no conversion 1 = swap and flip x 2 = flip x, flip y 3 = swap and flip y 4 = flip x 5 = flip y bit 7 = swap x,y</li> </ol> <p><code>:A</code> 3 OPCODES to set address window (all but epaper displays)</p> <ol> <li>set column opcode  </li> <li>set row opcode  </li> <li>start write opcode  </li> <li>pixel size (optional)  </li> </ol> <p><code>:P</code> Pixel transfer size (default = 16 bit RGB) (optional)</p> <p><code>:i</code> invert display opcodes 1. inversion off 2. inversion on  </p> <p><code>:D</code> dimmer opcode (optional)</p> <p><code>:B</code> LVGL (optional)</p> <ol> <li>number of display lines flushed at once (min 10) the lower the lesser memory needed  </li> <li>bit 0: DMA enables (<code>0</code> for no DMA, 1 use DMA) - not supported on all displaysbit 1: selects color swap, 2 = swap 16 bit colorbit 2: enable async DMA, <code>0</code> wait for DMA to complete before returning, <code>4</code> run DMA async in the background. This later mode is only valid if the SPI bus is not shared between the display and any other SPI device like SD Card Reader,bit 3: <code>8</code> inverted busy line on epaper displays.bit 4: <code>16</code> swap black and white in monochrome pictures (pushcolors, needed for bw pictures on epaper displays).</li> </ol> <p><code>:T</code> Wait times used for E-paper display 1. full refresh wait in ms 2. partial refresh wait in ms 3. wait after update in ms  </p> <p><code>:f</code> codes for epaper full refresh update  </p> <p><code>:p</code> codes for epaper partial refresh update  </p> <p>beside the epaper chip codes, some pseudo opcodes are supported EP_RESET 60,1,T = toggle reset pin T milliseconds EP_LUT_FULL 61,0 = switch to full update mode EP_LUT_PARTIAL 62,0 = switch to partial update mode EP_WAITIDLE 63,1,T = wait for busy pin or T milliseconds EP_SET_MEM_AREA 64,0 = set memory area to full screen EP_SET_MEM_PTR 65,0 = set memory pointer to start of screen EP_SEND_DATA 66,0 = send framebuffer EP_CLR_FRAME 67,0 = send clr data EP_SEND_FRAME 68,0 = complete sendframedata sequence EP_BREAK_RR_EQU 69,X = break when reset reason == X EP_BREAK_RR_NEQ 6a,X = break when reset reason != X</p> <p><code>:L</code>,size,OP Lookup table for full refresh (Waveshare 29)</p> <p><code>:l</code>,size,OP Lookuptable for partial refresh (Waveshare 29)</p> <p><code>:Lx</code>,size,OP Lookuptable for full refresh (Waveshare 42)  <code>x</code> = 1..5 <code>size</code> = number of bytes in table <code>OP</code> = opcode for sending refresh table  </p> <p><code>:TIx,AA,SCL,SDA,&lt;IRQ&gt;,&lt;RST&gt;</code> Defines a touch panel an I2C bus nr <code>x</code> (1 or 2) AA is device address SCL, SDA are the pins used (or * for tasmota definition) IRQ,RST optional IRQ and RST pins</p> <p><code>:TS,CS_PIN,(IRQ_PIN),(BUS Nr)</code>  Defines a touch panel an SPI bus with chip select <code>CS_PIN</code> (or *) optionally defines an IRQ_PIN (or -1) and the SPI BUS number  </p> <p><code>:TR</code>  enable simple resistive touch via data lines (e.g. cheap il9341 displays)  </p> <p><code>:M,X1,X2,Y1,Y2</code> Defines an optional mapping for touch controllers (always needed on resistive touch)  <code>X1</code> = display left margin <code>X2</code> = display right margin <code>Y1</code> = display upper margin <code>Y2</code> = display lower margin  </p> <p><code>:r,X</code> Defines optional display rotation <code>X</code> = <code>0..3</code></p> <p><code>:b,X</code> Defines optional inverted backpanel <code>X</code> = <code>1</code> = use inverted logic for backpanel  </p> <p>Full configuration for SH1106 (comment lines starting with ; are allowed)</p> <pre><code>:H,SH1106,128,64,1,I2C,3c,*,*,*\n:S,0,2,1,0,30,20\n:I\nAE\nD5,80\nA8,3f\nD3,00\n40\n8D,14\n20,00\nA1\nC8\nDA,12\n81,CF\nD9F1\nDB,40\nA4\nA6\nAF\n:o,AE\n:O,AF\n:A,00,10,40\n#\n</code></pre> <p>Full configuration for ILI9341: (comment lines starting with ; are allowed)</p> <p><pre><code>:H,ILI9341,240,320,16,SPI,1,*,*,*,*,*,*,*,40\n:S,2,1,1,0,40,20\n:I\nEF,3,03,80,02\nCF,3,00,C1,30\nED,4,64,03,12,81\nE8,3,85,00,78\nCB,5,39,2C,00,34,02\nF7,1,20\nEA,2,00,00\nC0,1,23\nC1,1,10\nC5,2,3e,28\nC7,1,86\n36,1,48\n37,1,00\n3A,1,55\nB1,2,00,18\nB6,3,08,82,27\nF2,1,00\n26,1,01\nE0,0F,0F,31,2B,0C,0E,08,4E,F1,37,07,10,03,0E,09,00\nE1,0F,00,0E,14,03,11,07,31,C1,48,08,0F,0C,31,36,0F\n11,80\n29,80\n:o,28\n:O,29\n:A,2A,2B,2C\n:R,36\n:0,48,00,00,00\n:1,28,00,00,01\n:2,88,00,00,02\n:3,E8,00,00,02\n#\n</code></pre> Scripter is the nost convenient way to edit and develop an uDisplay driver. On every scripter save the display is reinitialized and you immediately see results of your changes.  </p> <p>Scripter driven display descriptor</p> <pre><code>&gt;D\n&gt;B\n=&gt;displayreinit\n&gt;d\n; name,xs,ys,bpp,interface, address, scl,sda,reset\n:H,SH1106,128,64,1,I2C,3c,*,*,*\n:S,0,2,1,0,30,20\n:I\nAE\nD5,80\nA8,3f\nD3,00\n40\n8D,14\n20,00\nA1\nC8\nDA,12\n81,CF\nD9F1\nDB,40\nA4\nA6\nAF\n:o,AE\n:O,AF\n:A,00,10,40\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#universal-touch-driver-utouch","title":"Universal Touch Driver (uTouch)","text":"<p>(<code>#define USE_UNIVERSAL_TOUCH</code>) This option allows to add drivers for various touch chips to use this you must ommit the Touch ids in normal display.ini instead use these IDs.  </p> <p>4 sections:  </p> <p><code>:UTI</code>,FT5206,I2,38,-1,-1 init section device name, up to 7 chars interface type:  I=I2C, S=SPI, R=resistive,  1 or 2 denotes bus number, i2c address or SPI CS pin, reset pin, irq pin</p> <p><code>:UTT</code> touch check call  </p> <p><code>:UTX</code> get x coordinate  </p> <p><code>:UTY</code> get y coordinate  </p> <p>commands: input goes to array[16] result register holds move or compare  </p> <p>DN = decimal number HN = hex number  </p> <p><code>RD HN</code> = read one byte  (from bytes adress) <code>RDM HN DN</code> = read n bytes (from bytes adress)  </p> <p><code>RDW HWN</code> = read one byte  (from word adress) <code>RDWM HWN DN</code> = read n bytes (from word adress)  </p> <p><code>WR HN HN</code> = write one byte  (to bytes adress) <code>WRW HWN HN</code> = write one byte (to word adress)  </p> <p><code>CP HN</code> = compare array[0] with immediate to result <code>CPM NUM HN1 HN2 HNx</code> = compare array[0] with NUM immediate numbers to result</p> <p><code>CPR HN</code> = compare result with immediate to result  </p> <p><code>RTF</code> = return when result == false with false <code>RTT</code> = return when result == true  with false  </p> <p><code>MV DN DN</code> = move from array index to result, second parameter: 1 = move byte, 2 = move word, 3 = move word, reverse order  </p> <p><code>MVB DN DN</code> = move byte from array index to result, par1; 0 = low, 1 = high byte, par2 = array index  </p> <p><code>AND HWN</code> = and result with immediate HEX WORD to result  </p> <p><code>SCL DWN FLOAT</code> = scale result by subtracting first paramter and multiplying with second float paramter  </p> <p><code>LIM DWN</code> = limit result with immediate word to result  </p> <p><code>RT</code> = return result  </p> <p><code>GSRT DN</code> = get result from simple resitive touch to array, parameter = threshold  </p> <p><code>XPT DN</code> = get result from XPT2046 SPI touch chip to array, parameter = threshold  </p> <p><code>DBG DN</code> = log result and first 4 array bytes, DN = id number  </p> <p>example:  </p> <pre><code>:H,ILI9342,320,240,16,SPI,1,5,18,23,15,-1,-1,38,40\n:S,2,1,3,0,100,100\n:B,60,0\n:I\nEF,3,03,80,02\nCF,3,00,C1,30\nED,4,64,03,12,81\nE8,3,85,00,78\nCB,5,39,2C,00,34,02\nF7,1,20\nEA,2,00,00\nC0,1,23\nC1,1,10\nC5,2,3e,28\nC7,1,86\n36,1,48\n37,1,00\n3A,1,55\nB1,2,00,18\nB6,3,08,82,27\nF2,1,00\n26,1,01\nE0,0F,0F,31,2B,0C,0E,08,4E,F1,37,07,10,03,0E,09,00\nE1,0F,00,0E,14,03,11,07,31,C1,48,08,0F,0C,31,36,0F\n21,80\n11,80\n29,80\n:o,28\n:O,29\n:A,2A,2B,2C,16\n:R,36\n:0,08,00,00,00\n:1,A8,00,00,84\n:2,C8,00,00,02\n:3,68,00,00,85\n:i,21,20\n:UTI,FT5206,I2,38,-1,-1\nRD A8\nCP 11\nRTF\nRD A3\nCP 64\nRTF\nRT\n:UTT\nRDM 00 16\nMV 2 1\nRT\n:UTX\nMV 3 2\nRT\n:UTY\nMV 5 2\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#ft5206-example_1","title":"FT5206 example","text":"<pre><code>:UTI,FT5206,I2,38,-1,-1\nRD A8\nCP 11\nRTF\nRD A3\nCP 64\nRTF\nRT\n:UTT\nRDM 00 16\nMV 2 1\nRT\n:UTX\nMV 3 2\nRT\n:UTY\nMV 5 2\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#xpt2046-example_1","title":"XPT2046 example","text":"<pre><code>:UTI,XPT2046,S1,21,-1,22\nCPR 00\nRT\n:UTT\nXPT 300\nRT\n:UTX\nMV 0 2\n;DBG 1\nSCL 460 0.0930233\nLIM 319\nRT\n:UTY\nMV 2 2\nSCL 300 0.0695652\nLIM 239\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#gt911-example_1","title":"GT911 example","text":"<pre><code>:UTI,GT911,I1,5d,38,-1\nRDWM 8140 4\nMV 0 1\nCPR 39\nRTF\nMV 1 1\nCPR 31\nRTF\nMV 2 1\nCPR 31\nRTF\nRT\n:UTT\nRDW 814E\nMV 0 1\nAND 80\nCPR 80\nRTF\nRDWM 8150 8\nWRW 814E 00\nRT\n:UTX\nMV 0 3\nRT\n:UTY\nMV 2 3\nRT\n#\n</code></pre>"},{"location":"Universal-Display-Driver/#simple-resitive-touch-example_1","title":"Simple resitive touch example","text":"<pre><code>:UTI,SRES,R\nCPR 00\nRT\n:UTT\nGSRT 500\nRT\n:UTX\nMV 0 2\nRT\n:UTY\nMV 2 2\nRT\n#\n</code></pre>"},{"location":"Upgrading/","title":"Upgrading","text":"<p>Easily upgrade Tasmota to a newer version or different build while keeping all your settings</p> <p>The first rule of upgrading: If it ain't broke, don't fix it!</p> <p>In other words, ensure that there is a good reason to mess with a working installation (e.g., a need to use a new feature or address a found problem fixed in the current version).</p> <p>Backup before upgrading</p> <p>Any time you upgrade it is highly recommended to back up your device settings. That is easily done from the webUI using Configuration - Backup Config.</p> <p>If you wish to switch to a different build or use development branch you need to download a binary file (gzipped or regular) or change the OTA Url link.</p> <p>Download binaries from:</p> <ul> <li>Official firmware server:</li> <li>Current release</li> <li>Development branch</li> <li>Older release binaries: 9.1.0, 8.5.1, 7.2.0, 6.7.1. You can build a similar URL for another release.</li> <li>Your personal OTA server</li> </ul>"},{"location":"Upgrading/#gz-binaries","title":".gz binaries","text":"<p>Gzipped binaries can be used only once you've upgraded to atleast Tasmota 8.2</p> <p>Trying to upgrade with a gzipped binary using versions older than 8.2 will fail.</p> <p>Tasmota 8.2 introduced upgrading using gzipped binaries which are smaller in size and will likely skip the intermediary minimal build installation. This makes the upgrade process faster and straightforward. </p> <p>To use simply add <code>.gz</code> to the existing OTA Url or download the <code>.bin.gz</code> binary from the official OTA Server and the next upgrade will use the compressed file.</p>"},{"location":"Upgrading/#upgrade-flow","title":"Upgrade Flow","text":"<p>v1.0.11 v3.9.22 v4.2.0 v5.14.0 v6.7.1 v7.2.0 v8.5.1 v9.1 Current release</p> <p>Follow the path strictly to ensure success. Do not install only tasmota-minimal.bin but upgrade to full, working firmware. Linked <code>-lite.bin</code> binaries will do the job. If you want to download binaries from the upgrade flow links, you may need to do a right-click and save the file, depending on your browser security rules. </p> <p>Tasmota v9.1 introduced a major change in GPIO mapping</p> <p>Downgrading is not recommended and will probably not work correctly.</p> <p>Tasmota v8.1 introduced a major change in parameter storage.</p> <p>Downgrading is not recommended and upgrading to 8.1 has to follow the recommended path and can still fail in some cases. Don't forget to backup!</p>"},{"location":"Upgrading/#upgrade-using-webui","title":"Upgrade using webUI","text":"<p>Upgrading the device firmware over-the-air, aka OTA, is the most convenient way to upgrade. </p> <p>To start the upgrade, open a web browser to your device's web UI and select Firmware Upgrade.</p> <p></p> <p>You are presented with two choices:</p> <ul> <li>Upgrade by webserver - use an OTA server </li> <li>Upgrade by file upload - uploading a downloaded or self-compiled binary file from your computer</li> </ul> <p></p>"},{"location":"Upgrading/#upgrade-by-web-server","title":"Upgrade by web server","text":"<p>If you want to upgrade to the latest release version click the first Start Upgrade button. This screen should appear</p> <p></p> <p>During this process Tasmota will download the new firmware from the url and install it. If you're not using a gzipped binary it might need to download <code>tasmota-minimal.bin</code> first, but all that happens automatically. All you have to do is wait 2 to 5 minutes. </p> <p>After the upgrade is completed you can reconnect back to the web UI and check the firmware version on the bottom of the page or in the Information tab of the webUI.</p>"},{"location":"Upgrading/#upgrade-by-file-upload","title":"Upgrade by file upload","text":"<p>Go to Firmware Upgrade. This time browse to the binary you want to upgrade to with Choose File and click Start upgrade.   In our example it's <code>tasmota-sensors.bin</code>.</p> <p></p> <p>You will see an Upload starting... and then Upload successful message. Wait until the device restarts, reconnect back to the web UI and check the firmware version on the bottom of the page or in the Information tab of the webUI.</p> <p>Minimal build upgrade step</p> <p>If the binary you're upgrading with is larger than 500kb you also need to download the minimal build (<code>tasmota-minimal.bin(.gz)</code>) since the upload process needs the space in flash memory to upload the new binary. </p> <p>When you try to immediately upgrade with the new binary without using smaller minimal firmware you will be greeted with this error.</p> <p></p>"},{"location":"Upgrading/#upload-buffer-miscompare-error","title":"Upload Buffer Miscompare Error","text":"<p>This step is necessary only if you get the \"Upload buffer miscompare\" error </p> <p>This means your flash doesn't have enough free space to install the binary you're trying to upload. Use a .gz binary instead of the .bin one. If you still receive the same error download tasmota-minimal.bin(.gz) and follow instructions:</p> <p>Browse to the minimal binary with Choose File. The chosen filename should be visible.   In our example it's <code>tasmota-minimal.bin</code>.</p> <p></p> <p>Wait until the device restarts. In the Main Menu web UI will display this warning message on top.</p> <p></p> <p>Proceed to upgrade</p>"},{"location":"Upgrading/#using-commands","title":"Using Commands","text":"<p>Your device can be upgraded using commands via MQTT, web requests or Console in the web UI.</p> <p>OtaUrl is used to set your OTA address.  <pre><code>OtaUrl http://ota.tasmota.com/tasmota/tasmota-sensors.bin\n</code></pre> In this example we chose a development branch version with additional sensors support</p> <p>Initiate upgrade from OTA server <pre><code>Upgrade 1\n</code></pre> Wait for the upgrade process to complete and check the Tasmota version. In console you can use <code>Status 2</code>.</p>"},{"location":"Upgrading/#serial-upgrade","title":"Serial Upgrade","text":"<p>Upgrade over the serial connection using serial-to-USB adapter.</p> <p>Upload the new version over serial using the same process as in Flashing but DO NOT erase flash. The new binary will overwrite the old one and keep your settings.</p>"},{"location":"Upgrading/#external-programs","title":"External Programs","text":"<p>Tasmota Device Manager or TDM is a multiplatform GUI application written in Python for discovery and management of Tasmota devices. You can set up OTA url and initiate OTA upgrade from TDM using GUI.</p> <p>openHAB  - implement an automation rule to upgrade devices from openHAB</p> <p>Node-RED OTA server and firmware manager - Node-RED flow for managing OTA updates </p> <p>OTA over SCP - setup and configure \"OTA over SCP\" upload for PlatformIO</p> <p>Deploy via HTTP - deploy .bin and .bin.gz files to your own web server via PlatformIO upload</p>"},{"location":"Upgrading/#private-ota-server","title":"Private OTA Server","text":"<p>It is possible to create your own simple http OTA server (https is not supported) using Python and perform upgrades from there.  Install Python3 and from the folder where the binary resides (make sure <code>tasmota-minimal.bin</code> is located there too) run: <pre><code>python -m http.server 8000\n</code></pre> (If the response is \"No module named http\" then try again with <code>python3</code> instead of <code>python</code>.)</p> <p>Change your OtaUrl to http://ipoftheserver:8000/yourbinary.bin(.gz) and start the upgrade process. Note: do not use <code>/</code>, <code>-</code>, or <code>.</code> characters in the name of <code>yourbinary</code>.</p> <p>If your binary build (yourbinary.bin) is larger than the available free flash program space, Tasmota will need to first install the minimal version of Tasmota to make more space. To have this work via the web server OTA process, you have to copy the file <code>tasmota-minimal.bin</code> in the same folder where <code>OTAURL</code> for <code>yourbinary.bin</code> is placed, and rename <code>tasmota-minimal.bin</code> to <code>yourbinary-minimal.bin</code>.</p>"},{"location":"Upgrading/#migration-path","title":"Migration Path","text":"<p>Until now several versions of Tasmota have been released starting with the C version Sonoff-MQTT-OTA followed by Sonoff-MQTT-OTA-Arduino, Sonoff-Tasmota and ultimately Tasmota.</p> <p>Intermediate upgrade steps are needed to migrate from older firmware to the current version. No migration is possible from original Sonoff-MQTT-OTA to Sonoff-MQTT-OTA-Arduino v1.0.11.</p> <p>DO NOT ATTEMPT TO UPGRADE VERSIONS PRIOR TO v7.x STRAIGHT TO THE CURRENT VERSION</p> <p>Remember that you must take each individual step between the device firmware version and the latest available.You can find all the required binaries in Tasmota Releases listed by version number.</p> <p>Tip</p> <p>As a safeguard perform \"Backup Configuration\" before upgrading. If settings are lost \"Restore Configuration\" should bring them back.</p> <p>Upgrading from one minor version to the next is mostly painless as the settings are saved in the same location in flash and newer settings are appended.</p> <p>As said, mostly painless! There are some deviations to this rule as the flash settings changed. </p> <p>Notice for versions between 6.6.0.7 and 6.6.0.11</p> <p>If you've used development versions between 6.6.0.7 and 6.6.0.11 back up your device settings. Convert the backup to human readable form as you MUST restore these settings manually.   Perform a <code>Reset 6</code> before upgrading the firmware and, for safe measure, after the upgrade completes.  </p>"},{"location":"Upgrading/#downgrading","title":"Downgrading","text":"<p>While fallback or downgrading is common practice it was never supported due to Settings additions or changes in newer releases. </p> <p>Starting with release v8.1.0 Doris settings in flash are re-allocated in such a way that fallback is only allowed and possible to v7.2.0. Once at v7.2.0 you're on your own when downgrading even further.</p>"},{"location":"Upgrading/#backing-up-settings","title":"Backing Up Settings","text":"<p>Tasmota uses flash memory to store options and settings. New versions add (or remove) features that use various regions of that memory. If you did not erase flash when you flashed your device, an updated version of Tasmota may be accessing areas with values left over from the old Tasmota or even the original factory firmware. This might cause unexpected and unwanted behavior or even major problems (constant reboots or reconnects). </p> <p>To avoid this use our decode-config tool to easily create and restore backups in Tasmota:</p>"},{"location":"Upgrading/#decode-config-tool","title":"decode-config tool","text":"<ul> <li>decode-config - OS independent Python program to backup and restore Tasmota configuration data, also available as precompiled executables for Windows, MacOS and Linux. See Using instructions for details. If using one of the precompiled binary for your OS replace <code>decode-config.py</code> with <code>decode-config_win32.exe</code>, <code>decode-config_win64.exe</code>, <code>decode-config_mac</code> or <code>decode-config_linux</code> from the instruction examples.</li> </ul>"},{"location":"Upgrading/#1-make-a-configuration-backup","title":"1. make a configuration backup:","text":"<ul> <li> <p>Create a new backup straight from your device   </p> <p><code>decode-config.py --source &lt;deviceIP&gt; --backup-file Config-@f</code></p> <p><code>@f</code> will be replaced by decode-config to device's FriendlyName</p> </li> </ul> <p>or</p> <ul> <li>Create a backup from previously made <code>.dmp</code> file</li> </ul> <p><code>decode-config.py --source &lt;dmp_filename&gt; --backup-file Config-@f</code></p>"},{"location":"Upgrading/#2-perform-a-device-reset","title":"2. perform a device reset","text":"<p>Erase flash settings area but keep Wi-Fi and MQTT settings</p> <p><code>Reset 6</code></p>"},{"location":"Upgrading/#3-upgrade-the-firmware-via-ota-or-file-upload","title":"3. upgrade the firmware via OTA or file upload","text":""},{"location":"Upgrading/#4-restore-configuration","title":"4. restore configuration","text":"<p><code>decode-config.py --source &lt;deviceIP&gt; --restore-file &lt;backupfile&gt;</code></p> <p>...and you're done!</p> <p>If you can't restore configuration directly you can configure the device manually referring to the Commands article and the settings (e.g., SetOptions, Rules, etc.) in the JSON file you created in step #1. You can paste the JSON into a JSON parser to make it easily readable. </p> <p>Tip</p> <p>If Backup Configuration -&gt; Restore Configuration fails, reset to firmware defaults and use decode-config tool to restore your backed up configuration.</p>"},{"location":"User-created-templates/","title":"User created templates","text":"<p>Follow this link to new templates repository.</p>"},{"location":"VEML6070/","title":"VEML6070 UV light sensor","text":"This feature is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_VEML6070\n#define USE_VEML6070                           // [I2cDriver12] Enable VEML6070 sensor (I2C addresses 0x38 and 0x39) (+1k5 code)\n  #define USE_VEML6070_RSET    270000          // VEML6070, Rset in Ohm used on PCB board, default 270K = 270000ohm, range for this sensor: 220K ... 1Meg\n  #define USE_VEML6070_SHOW_RAW                // VEML6070, shows the raw value of UV-A\n#endif\n</code></pre></p> <p>This little sensor is a great way to add UV light sensing to any microcontroller project. The VEML6070 from Vishay has a true UV A light sensor and an I<sup>2</sup>C-controlled ADC that will take readings and integrate them for you over ~60ms to 500ms.\" See VEML6070 UV Sensor for more information.</p>"},{"location":"VEML6070/#configuration","title":"Configuration","text":""},{"location":"VEML6070/#wiring","title":"Wiring","text":"VEML6070 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"VEML6070/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol> <p></p>"},{"location":"VEML6070/#tasmota-main","title":"Tasmota Main","text":"<p>After a reboot the driver will detect VEML6070 automatically and display UV light intensity.</p> <p></p>"},{"location":"VEML6070/#breakout-boards","title":"Breakout Boards","text":""},{"location":"VEML6075/","title":"VEML6075 UVA/UVB/UVINDEX Sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_VEML6075\n#define USE_VEML6075            // [I2cDriver49] Enable VEML6075 UVA/UVB/UVINDEX Sensor (I2C address 0x10) (+2k1 code)\n#endif\n</code></pre></p> <p>This little sensor is a great way to add UVA and UVB light sensing to any microcontroller project. The VEML6075 from Vishay has both true UVA and UVB band light sensors and an I2C-controlled ADC that will take readings and integrate them. The sensor also comes with calibration registers so you can easily convert the UVA/UVB readings into the UV Index.</p>"},{"location":"VEML6075/#configuration","title":"Configuration","text":""},{"location":"VEML6075/#wiring","title":"Wiring","text":"VEML6075 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"VEML6075/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol>"},{"location":"VEML6075/#commands-and-use","title":"Commands and Use","text":"Console Commands Description values VEML6075power Power on/off the module 0/1 VEML6075inttime UV integration time (50ms, 100ms, 200ms, 400ms, 800ms) 0/1/2/3/4 VEML6075dynamic dynamic setting (low, high) 0/1"},{"location":"VEML6075/#tasmota-main","title":"Tasmota Main","text":"<p>After a reboot the driver will detect VEML6075 automatically and display UVA/UVB/UVindex intensity.</p>"},{"location":"VEML6075/#breakout-boards","title":"Breakout Boards","text":""},{"location":"VEML7700/","title":"VEML7700 Ambient light sensor","text":"This feature is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_VEML7700\n#define USE_VEML7700            // [I2cDriver50] Enable VEML7700 Ambient Light sensor (I2C addresses 0x10) (+4k5 code)\n#endif\n</code></pre></p> <p>VEML7700 is a high accuracy ambient light digital 16-bit resolution sensor in a miniature transparent 6.8 mm x 2.35 mm x 3.0 mm package. It includes a high sensitive photo diode, a low noise amplifier, a 16-bit A/D converter and supports an easy to use I2C bus communication interface. The ambient light result is available as digital value.</p>"},{"location":"VEML7700/#configuration","title":"Configuration","text":""},{"location":"VEML7700/#wiring","title":"Wiring","text":"VEML7700 ESP GND GND VCC 3.3V SDA GPIOx SCL GPIOy"},{"location":"VEML7700/#tasmota-settings","title":"Tasmota Settings","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOx to <code>I2C SDA</code></li> <li>GPIOy to <code>I2C SCL</code></li> </ol>"},{"location":"VEML7700/#commands-and-use","title":"Commands and Use","text":"Console Commands Description values VEML7700power Power on/off the module 0/1 VEML7700inttime Integration time in ms 25, 50, 100,  200, 400, 800 VEML7700gain Gain setting  (x1, x2, x1/8, x1/4) 0 = x11 = x2  2 = x1/8  3 = x1/4 VEML7700persist ALS persistence protect number setting 0 = 1 1 = 2 2 = 43 = 8 <p>With gain 1/8 and inttime 25 the sensor goes up to 120.000 Lux if someone needs it.</p>"},{"location":"VEML7700/#tasmota-main","title":"Tasmota Main","text":"<p>After a reboot the driver will detect VEML7700 automatically and display light intensity.</p>"},{"location":"VEML7700/#breakout-boards","title":"Breakout Boards","text":""},{"location":"VL53Lxx/","title":"VL53L0X and VL53L1X laser ranging modules","text":"Support for VL53L0X is included only in <code>tasmota-sensors</code> and <code>tasmota32</code> binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_VL53L0X \n#define USE_VL53L0X                            // [I2cDriver31] Enable VL53L0x time of flight sensor (I2C address 0x29) (+4k code)\n  #define VL53L0X_XSHUT_ADDRESS 0x78           //   VL53L0X base address when used with XSHUT control\n#endif\n</code></pre></p> Support for VL53L1X is not included in precompiled binaries <p>When compiling your build add the following to <code>user_config_override.h</code>: <pre><code>#ifndef USE_VL53L1X \n#define USE_VL53L1X                            // [I2cDriver54] Enable VL53L1X time of flight sensor (I2C address 0x29) using Pololu VL53L1X library (+2k9 code)\n  #define VL53L1X_XSHUT_ADDRESS 0x78           //   VL53L1X base address when used with XSHUT control\n  #define VL53L1X_DISTANCE_MODE Long           //   VL53L1X distance mode : Long | Medium | Short\n#endif\n</code></pre></p> <p>The VL53L0X and VL53L1X are Time-of-Flight (ToF) laser-ranging devices from ST MicroElectronics commonly available on small modules.</p> <p>In the documentation below, VL53LXX is used whenever the information applies to either VL53L0X or VL53L1X. The exact name is used for any information that is specific to the specific model.</p>"},{"location":"VL53Lxx/#the-devices","title":"The devices","text":"<p>About how to install those sensor and how to adapt the laser operation for several use-cases, please check:</p> <ul> <li>Datasheet VL53L0X</li> <li>Datasheet VL53L1X</li> </ul> Characteristic VL53L0X VL53L1X Unit Max distance 2000 4000 mm Field of vision 25 27 \u00b0 <p>For more details on the supported distance range depending on the mode, the reflectance of the object and the ambient light regarding the different modes, please refer to the datasheets.</p> <p>If you are going to use long I2C wires read this article</p>"},{"location":"VL53Lxx/#breakout-boards","title":"Breakout Boards","text":"<p>Sample boards for VL53L0X. Similar boards exist for VL53L1X.  </p>"},{"location":"VL53Lxx/#configuration-for-single-sensor","title":"Configuration for single sensor","text":""},{"location":"VL53Lxx/#wiring-for-single-sensor","title":"Wiring for single sensor","text":"VL53LXX ESP GND GND VCC 3.3V SDA GPIOa SCL GPIOb"},{"location":"VL53Lxx/#tasmota-settings-for-single-sensor","title":"Tasmota Settings for single sensor","text":"<p>In order to use a VL53LXX sensor you need to: - configure ESP GPIOs for I2C bus - enable the right driver</p>"},{"location":"VL53Lxx/#step-1-configure-i2c","title":"Step 1 - Configure I2C","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOa to <code>I2C SDA</code></li> <li>GPIOb to <code>I2C SCL</code></li> </ol> <p>On ESP8266 almost any GPIO can be used for I2C except for GPIO15.</p> <p>On ESP32 any pin can be assigned to I2C.</p>"},{"location":"VL53Lxx/#step-2-enable-the-proper-driver","title":"Step 2 - Enable the proper driver","text":"<p>I2C devices are identified on the I2C bus by their address. Because the number of possible addresses are limited (127) a lot of devices are sharing the same address. This as means that it is not possible to use simultaneously on the same I2C bus 2 devices that are using the same address. Beside, in most cases, a driver cannot correctly identify the chip it is talking to. This is why in most of the case it is important to disable Tasmota drivers for devices that you are not using and leave enabled only driver for a device you are going to use.</p> <p>In the list of I2CDEVICES supported by Tasmota it is listed that the address 0x29 can be used by either TSL2561 (driver 16), VL53L0X (driver 31), TSL2591 (driver 40) and VL53L1X (driver VL53L1X). It means that you can't use a TSL2561 or a TSL2591 at the same time as a VL53L0X/VL53L1X. And you can't use a VL53L0X at the same time as a VL53L1X.</p> <p>If you have build a tasmota binary that include the driver for TSL2561 and/or TSL2591 you must disable those drivers. You must also disable the driver for the other VL53LXX device. As a summary, here are the command to type in the console:</p> <ul> <li>To use a VL53L0X : <code>backlog i2cdriver16 0;i2cdriver40 0;i2cdriver31 1;i2cdriver54 0</code></li> <li>To use a VL53L1X : <code>backlog i2cdriver16 0;i2cdriver40 0;i2cdriver31 0;i2cdriver54 1</code></li> </ul> <p>After a reboot Tasmota will detect the VL53LXX automatically is the proper driver has been enabled.</p> <p></p> <p>Sensor sends a  <code>tele/%topic%/SENSOR</code> JSON response:</p> <p>For VL53L0X: <pre><code>{\"Time\":\"2019-12-20T11:29:22\",\"VL53L0X\":{\"Distance\":263}}\n</code></pre> Or for VL53L1X <pre><code>{\"Time\":\"2019-12-20T11:29:22\",\"VL53L1X\":{\"Distance\":263}}\n</code></pre></p>"},{"location":"VL53Lxx/#configuration-for-multiple-vl53lxx-sensors-in-parallel","title":"Configuration for Multiple VL53LXX sensors in parallel","text":"<p>Tasmota supports by default up to 8 of these sensors in parallel. Note that they all must be of the same model (either all VL53L0X or all VL53L1X). In any case, the above I2C GPIO and I2C driver configuration remain valid.</p> <p>When using multiple VL53LXX, it is required to wire the XSHUT pin of each sensors to a dedicated free GPIO and assign as <code>VL53LXX XSHUT</code> 1 to 8. This is to let Tasmota change by software the I2C address of those and give them an unique address for operation. The sensor don't save its address and this procedure is performed automatically at every restart. The Addresses used for this are by default 0x78 (120) to 0x7F (127). As for a single sensor, you must not use any other I2C device on those addresses. As the date of writing, there is currently no I2C device supported by Tasmota with those addresses. However such devices exists and may be supported by later versions of Tasmota. You can change the relocation address by a compile option, see the compile options section.</p>"},{"location":"VL53Lxx/#wiring-for-multiple-sensors","title":"Wiring for Multiple Sensors","text":"VL53LXX-1 VL53LXX-2 VL53LXX-3 ... ESP GND GND GND GND GND VCC VCC VCC VCC 3.3V SDA SDA SDA SDA GPIOa SCL SCL SCL SCL GPIOb XSHUT - - - GPIOc - XSHUT - - GPIOd - - XSHUT - GPIOe - - - XSHUT GPIOz <p>On ESP8266, please refer to the guide Expending Tasmota for suitable GPIOs. GPIO 1 and 3 being used by serial console are generally unadvised. GPIO15 has a pull-down on every ESP board to allow proper boot. If you want to use this GPIO for a XSHUT, you must remove the pull-up resistor that is on the VL53LXX module otherwise your ESP will not boot.</p> <p>On ESP32 any GPIO that can be an output can be used.</p>"},{"location":"VL53Lxx/#tasmota-settings-for-multiple-sensors","title":"Tasmota Settings for multiple sensors","text":"<p>In the Configuration -&gt; Configure Module page assign:</p> <ol> <li>GPIOa to <code>I2C SDA</code></li> <li>GPIOb to <code>I2C SCL</code></li> <li>GPIOc to <code>XSHUT 1</code></li> <li>GPIOd to <code>XSHUT 2</code></li> <li>GPIOe to <code>XSHUT 3</code></li> <li>...</li> </ol> <p>After a reboot Tasmota will detect each VL53LXX in sequence and after auto-configuring them, it will display distance in mm.</p> <p>Example: for VL53L0X it sends <code>tele/%topic%/SENSOR</code> JSON such as:</p> <pre><code>{\"Time\":\"2019-12-20T11:29:22\",\"VL53L0X_1\":{\"Distance\":263},\"VL53L0X_2\":{\"Distance\":344},\"VL53L0X_3\":{\"Distance\":729}}\n</code></pre> <p>With VL053L1X, the name of the sensor is adapted.</p> <p>The index separator is either a <code>-</code> if <code>SetOption4</code> is <code>0</code> or a <code>_</code> if it is <code>1</code>. See <code>SetOption4</code>.</p> <p></p> <p></p> <p></p>"},{"location":"VL53Lxx/#compile-options","title":"Compile options","text":""},{"location":"VL53Lxx/#general","title":"General","text":"<ul> <li> <p>MAXIMUM AMOUNT OF SENSORS: Tasmota supports by default up to 8 of these sensors in parallel. Expanding this limit is possible but backwards incompatible. The default value of VL53LXX_MAX_SENSORS is set in the file tasmota.h</p> </li> <li> <p>XHUT Relocation address The addresses at which the VL53LXX are relocated when using XSHUT can be changed by a define in <code>user_config_override.h</code> file. Replace the <code>0x78</code> for the 1st address. You need that as many consecutives address are free for the number of devices you are using. For VL53L0X use: <pre><code>#define VL53L0X_XSHUT_ADDRESS 0x78\n</code></pre> For VL53L1X use: <pre><code>#define VL53L1X_XSHUT_ADDRESS 0x78\n</code></pre></p> </li> </ul>"},{"location":"VL53Lxx/#vl53l0x-options","title":"VL53L0X options","text":"<ul> <li> <p>VL53L0X LONG RANGE: By default VL53L0X reads up to 1.2 meters. If you want to use the long range mode (up to 2.2 meters), you need to add a define in <code>user_config_override.h</code> file: <pre><code>#define VL53L0X_LONG_RANGE\n</code></pre> This increases the sensitivity of the sensor and extends its potential range, but increases the likelihood of getting an inaccurate reading because of reflections from objects other than the intended target. It works best in dark conditions.</p> </li> <li> <p>VL53L0X_HIGH_SPEED vs VL53L0X_HIGH_ACCURACY Either or the other can be added in <code>user_config_override.h</code> file to change the default compromise to either proceed at higher speed (but at the cost of accuracy) or at higher accuracy. <pre><code>#define VL53L0X_HIGH_SPEED\n</code></pre> or <pre><code>#define VL53L0X_HIGH_ACCURACY\n</code></pre></p> </li> </ul>"},{"location":"VL53Lxx/#vl53l1x-options","title":"VL53L1X options","text":"<ul> <li>Distance range can be changed between Long, Medium or Short by copying one (and only one) of the below lines in <code>user_config_override.h</code>. The default value is Long. For details on those range, please refer to the datasheet of the device. <pre><code>#define VL53L1X_DISTANCE_MODE Long\n#define VL53L1X_DISTANCE_MODE Medium\n#define VL53L1X_DISTANCE_MODE Short\n</code></pre></li> </ul>"},{"location":"Visual-Studio-Code/","title":"Visual Studio Code","text":"<p>How to setup and configure Visual Studio Code with PlatformIO for Tasmota compilation and upload.</p>"},{"location":"Visual-Studio-Code/#full-install-windows-linux-and-mac","title":"Full Install (Windows, Linux and Mac)","text":""},{"location":"Visual-Studio-Code/#download-and-install-visual-studio-code","title":"Download and Install Visual Studio Code","text":"<p>Download Visual Studio Code (VSC) from https://code.visualstudio.com/</p>"},{"location":"Visual-Studio-Code/#install-platformio-extension","title":"Install PlatformIO Extension","text":"<p>Install the PlatformIO IDE extension in VSC.</p> <p>Select <code>View</code> - <code>Extensions</code> and type PlatformIO in the search box.</p> <p>Make sure to select the official PlatformIO.org PlatformIO IDE extension and select Install. Accept to install dependencies. To install on Linux, it is essential to first have the python3-venv package installed on your system.</p> <p>As an alternative to the Platformio IDE the pioarduino IDE extension can be used.</p>"},{"location":"Visual-Studio-Code/#download-tasmota","title":"Download Tasmota","text":"<p>Download the latest Tasmota version from https://github.com/arendst/Tasmota and unzip to a known folder.</p>"},{"location":"Visual-Studio-Code/#compile-tasmota","title":"Compile Tasmota","text":"<p>Start VSC and select <code>File</code> - <code>Open Folder...</code> the folder with the unzipped Tasmota files</p> <p>Note: Press <code>Ctrl</code> + <code>Shift</code> + <code>P</code> and type <code>PlatformIO</code> to see all options.</p> <p>Select the desired firmware via VSC menu.</p> <p>Easy compilation can be performed from the icons at the bottom of the VSC screen. </p>"},{"location":"Visual-Studio-Code/#upload-tasmota","title":"Upload Tasmota","text":"<p>Optional: Enable desired options in platformio_override.ini for serial upload like: <pre><code>upload_port = COM5\n;upload_speed = 512000\nupload_speed = 115200\n</code></pre></p> <p>Easy compilation and upload can be performed from the icons at the bottom of the VSC screen or use <code>Ctrl</code> + <code>Alt</code> + <code>U</code> to upload (will build if needed).</p>"},{"location":"Visual-Studio-Code/#hint","title":"Hint:","text":"<p>In case vscode shows a huge amount of errors using PlatformIO - Intellisense a possible \"solution\" is to change the cpp-Intelli Sense Engine type to \"TAG PARSER\"</p> <p>This setting can be changed in workspace settings by: Use <code>Ctrl</code> + <code>Shift</code> + <code>P</code> and type <code>Preferences: Open Workspace Settings</code> and type <code>intelli Sense</code> in the search box. Now change the value for <code>Intelli Sense Engine</code> to <code>Tag Parser</code>.</p>"},{"location":"WS2812B-RGB-Shield/","title":"WS2812B RGB Shield","text":""},{"location":"WS2812B-RGB-Shield/#ws2812b-rgb-shield-single-pin","title":"WS2812B RGB Shield (single pin)","text":"<p>From the Wemos WS2812b shield specs the DATA  pin is connected to D2 of the Wemos.</p>"},{"location":"WS2812B-RGB-Shield/#tasmota-settings","title":"Tasmota Settings","text":"<p>In Configuration -&gt; Configure Module page assign:</p> <ul> <li>D2 GPIO4 to <code>WS2812</code></li> </ul> <p>After a reboot of the device the toggle button and light controls are displayed in the webUI.</p>"},{"location":"WS2812B-and-WS2813/","title":"WS2812B and WS2813","text":""},{"location":"WS2812B-and-WS2813/#ws2813b-versus-ws2812b","title":"WS2813B versus WS2812B","text":"<p>The newer version of ws2812b is the ws2813b, which has dual signal lines to prevent a led failure also consecutive leds fail.</p> <p></p>"},{"location":"WS2812B-and-WS2813/#esp8266-needs-level-shifting-ws281x-schematic","title":"ESP8266 needs Level shifting - WS281x schematic","text":"<p>Below the schematics to connect an ESP82xx to a WS281x.</p> <p></p>"},{"location":"WS2812B-and-WS2813/#about-this-circuit-diagram-and-the-oscilloscope-traces","title":"About this circuit diagram and the oscilloscope traces","text":"<p>Channel 1 (yellow) is connected to an output of the ESP8266 Chip, and therefore shows the input voltage of the level shifting circuit.</p> <p>Channel 2 (green) is connected to the output of the level shifting circuit, and therefore shows the input voltage to the first WS281X pixel.</p> <p>How does the MOSFET circuit work and what are the challenges?</p> <p>When the GPIO is HIGH (3.3V), the voltage between Gate and Source of the FET is zero since the Gate is tied to +3.3V through R4 and the Source follows the GPIO. The FET is not conducting between its Source and Drain connections. In this state the Output is pulled to +5V by R5.</p> <p>(BTW: R4 is only there to charge/discharge the parasitic input capacitance of the FET and could be omitted entirely for an ideal FET.)</p> <p>When the GPIO goes low, it pulls the Source of the FET to GND (0V). That increases the voltage across Gate and Source of the FET (VGS) to 3.3V, causing the FET to become conductive between Source and Drain, and consequently pull the output to GND.</p> <p>The major flaw of this circuit is that its usefulness degrades towards higher frequencies (shorter pulses) and capacitive loads because the only force pulling the output to HIGH is the pull-up resistor R5. So the load capacitance gets charged through R5 only. You can mitigate the effect partially by selecting a smaller R5 but the tradeoff will be increased power consumption of the circuit.</p> <p>A WS2813 signal input imposes a capacitive load of 15 pF onto the level shifter\u2019s output according to its datasheet. That doesn\u2019t sound like a lot, but you can see from the plots that we have only few nanoseconds time to charge the parasitic capacitor. It also partially adds up with the reverse transfer capacitance of the BSS138 FET (Crss=6pF according to the datasheet).</p> <p>The result is clearly visible in the oscilloscope plot: the leading edges are not sharp and therefore reducing the pulse duration acquired by the pixel\u2019s input, depending on the input voltage threshold of the pixel (0.7 x VDD = 3.5V @ 5V according to the datasheet). The effect of sampled pulse shortening gets worse with rising input HIGH threshold of the pixel.</p> <p>NB: The design frequency of this circuit would be 1 / (433 ns x 2) = 1.155 MHz</p> <p>So what would be a better solution?</p> <p>Better Circuit: TTL logic gates</p> <p>We need a circuit with well-defined and matching input voltage thresholds. TTL gates represent such circuits. For a power supply of 5V, a TTL input is guaranteed logic LOW when the input voltage is below 0.8V. That same input is guaranteed logic HIGH when the input voltage is above 2.0V.</p> <p>That perfectly matches our 3.3V GPIO output voltage!</p> <p>The output weakness of the MOSFET circuit does not apply to a TTL gate\u2019s output since it can drive to HIGH as well as to LOW by means of a circuit known as \u201cTotem Pole\u201d push-pull transistor output stage. 74HCT and 74AHCT chips will drive the output to a voltage close to VCC.</p> <p>This output stage gives much sharper leading edges as can be seen on the lower right oscilloscope picture.</p> <p>So this is actually the circuit I would suggest for the application. A large variety of TTL chips can be used: 74HCTXX series, 74AHCTXX series, but not 74HC or 74AHC!</p> <p>Which logic function you choose is up to your liking and availability in your parts bin. The input characteristics are the same for all of them (with a slight deviation for those with Schmitt trigger inputs like the 74XX14).</p> <ul> <li>5V power supply: the power of the power supply depends on the number of leds. A pixel has 3 leds (RGB), each led drains a max of 20mA, so a pixel drains a max of 60mA (3 * 20mA). So the total current that the power supply must deliver is 60mA times the number of pixels. For example 80 pixels: 60mA * 80 = 4800mA = 4.8A. Also the ESP8266 is powered by the power supply so in this example a power supply of 6A (30W) will do.</li> </ul> <p>note: connect the ledstrip from both sides to the power supply</p>"},{"location":"WS2812B-and-WS2813/#tasmota-configuration","title":"Tasmota Configuration","text":"<p>In the Configuration -&gt; Configure Module page, select the following:</p> <ul> <li>D1 GPIO5 : WS2812</li> </ul> <p></p>"},{"location":"WS2812B-and-WS2813/#tasmota-main","title":"Tasmota Main","text":""},{"location":"WebUI/","title":"WebUI","text":"<p>Tasmota's web user interface is a practical way to control and manage your tasmotized device. </p> <p>Warning</p> <p>WebUI does not and can not have all the features and commands implemented. For precise and complete control use Console or MQTT commands!</p> <p>To access the WebUI use your device's IP address in your favorite web browser.</p> <p>By default, WebUI starts in unprotected admin mode which allows complete access to your device to anyone with access to that IP.</p> <p>If you want to restrict other users to only control through the WebUI, use <code>WebServer 1</code>.</p> <p>Command <code>WebPassword</code> will set up a password that needs to be entered when trying to access WebUI. This is a very thin layer of protection since everything is transmitted over unencrypted HTTP protocol.</p>"},{"location":"WebUI/#menus","title":"Menus","text":""},{"location":"WebUI/#configuration","title":"Configuration","text":"<p>Configuration menu allows you to configure everything from components to Wi-Fi and gives you the option to backup and restore the configuration in a secure location.</p>"},{"location":"WebUI/#information","title":"Information","text":"<p>Displays a single page loaded with information about the device including: current Tasmota version, Wi-Fi AP data, MQTT host data, and more</p>"},{"location":"WebUI/#firmware-upgrade","title":"Firmware Upgrade","text":"<p>An easy to use menu to initiate a firmware upgrade from an uploaded <code>.bin</code> file or an OTA server.</p>"},{"location":"WebUI/#console","title":"Console","text":"<p>Terminal access to Tasmota. Issue commands here or follow the information stream. Useful for debugging when using \u02d9Weblog 4`.</p>"},{"location":"WebUI/#customizing","title":"Customizing","text":""},{"location":"WebUI/#webbutton","title":"WebButton","text":"<p>Change names of the toggle buttons using <code>WebButton</code>. </p>"},{"location":"WebUI/#themes","title":"Themes","text":"<p>WebUI is themable using <code>WebColor</code> commands. </p> <p>To apply a theme from below copy the entire code block and send it using the console or via MQTT.</p>"},{"location":"WebUI/#dark-default-theme","title":"Dark (default theme)","text":"<p><pre><code>WebColor {\"WebColor\":[\"#eaeaea\",\"#252525\",\"#4f4f4f\",\"#000000\",\"#dddddd\",\"#65c115\",\"#1f1f1f\",\"#ff5661\",\"#008000\",\"#faffff\",\"#1fa3ec\",\"#0e70a4\",\"#d43535\",\"#931f1f\",\"#47c266\",\"#5aaf6f\",\"#faffff\",\"#999999\",\"#eaeaea\",\"#08405e\"]}\n</code></pre> </p>"},{"location":"WebUI/#light-default-until-671","title":"Light (default until 6.7.1.)","text":"<p><pre><code>WebColor {\"WebColor\":[\"#000000\",\"#ffffff\",\"#f2f2f2\",\"#000000\",\"#ffffff\",\"#000000\",\"#ffffff\",\"#ff0000\",\"#008000\",\"#ffffff\",\"#1fa3ec\",\"#0e70a4\",\"#d43535\",\"#931f1f\",\"#47c266\",\"#5aaf6f\",\"#ffffff\",\"#999999\",\"#000000\",\"#a1d9f7\"]}\n</code></pre> </p>"},{"location":"WebUI/#halloween","title":"Halloween","text":"<p><pre><code>WebColor {\"WebColor\":[\"#cccccc\",\"#2f3133\",\"#3d3f41\",\"#dddddd\",\"#293134\",\"#ffb000\",\"#293134\",\"#ff5661\",\"#008000\",\"#ffffff\",\"#ec7600\",\"#bf5f00\",\"#d43535\",\"#931f1f\",\"#47c266\",\"#5aaf6f\",\"#ffffff\",\"#999999\",\"#bc4d90\",\"#663300\"]}\n</code></pre> </p>"},{"location":"WebUI/#navy","title":"Navy","text":"<pre><code>WebColor {\"WebColor\":[\"#e0e0c0\",\"#000033\",\"#4f4f4f\",\"#000000\",\"#dddddd\",\"#a7f432\",\"#1e1e1e\",\"#ff0000\",\"#008000\",\"#ffffff\",\"#1fa3ec\",\"#0e70a4\",\"#d43535\",\"#931f1f\",\"#47c266\",\"#5aaf6f\",\"#ffffff\",\"#999999\",\"#eedd77\",\"#08405e\"]}\n</code></pre>"},{"location":"WebUI/#purple-rain","title":"Purple Rain","text":"<pre><code>WebColor {\"WebColor\":[\"#eaeaea\",\"#252525\",\"#282531\",\"#eaeaea\",\"#282531\",\"#d7ccff\",\"#1d1b26\",\"#ff5661\",\"#008000\",\"#faffff\",\"#694fa8\",\"#4d3e7f\",\"#b73d5d\",\"#822c43\",\"#1f917c\",\"#156353\",\"#faffff\",\"#716b7f\",\"#eaeaea\",\"#2a2244\"]}\n</code></pre>"},{"location":"WebUI/#solarized-dark","title":"Solarized Dark","text":"<pre><code>WebColor {\"WebColor\":[\"#839496\",\"#002b36\",\"#073642\",\"#839496\",\"#002b36\",\"#839496\",\"#073642\",\"#b58900\",\"#859900\",\"#eee8d5\",\"#268bd2\",\"#185886\",\"#dc322f\",\"#90211f\",\"#859900\",\"#647300\",\"#839496\",\"#073642\",\"#839496\",\"#0f3957\"]}\n</code></pre> <p>Tip</p> <p>When using an MQTT client such as <code>mosquitto_pub</code>, enclose the message payload in single quotes (<code>'</code>)</p> <pre><code>mosquitto_pub -h 192.168.1.20 -t \"cmnd/myTopic/WebColor\" -m '{\"WebColor\":[\"#eaeaea\",\"#252525\",\"#4f4f4f\",\"#000000\",\"#dddddd\",\"#65c115\",\"#1f1f1f\",\"#ff5661\",\"#008000\",\"#faffff\",\"#1fa3ec\",\"#0e70a4\",\"#d43535\",\"#931f1f\",\"#47c266\",\"#5aaf6f\",\"#faffff\",\"#999999\",\"#eaeaea\",\"#08405e\"]}'\n</code></pre>"},{"location":"White-Blend-Mode/","title":"White Blend Mode for lights","text":"<p>White Blend Mode is used for 4 channel (RGBW) and 5 channel (RGBWC) devices. It is enabled by setting the last PWM channel to zero (e.g., <code>RGBWWTable 255,255,255,&lt;n&gt;,0</code>) to lower the white channel intensity.</p> <p>Generally, white LEDs are brighter than RGB LEDs. If you want to keep the same brightness, you need to calibrate the white level. In this mode, any white component will be removed from RGB LEDs and sent to the white LEDs. This makes whites look much better.</p> <p>Example: <code>Color 30508000</code> will be converted to <code>Color 0020503000</code> (0x30 is subtracted from R,G,B channels and added to the White channel)</p> <p>To calibrate:</p> <ol> <li><code>Color FFFFFF00</code></li> <li><code>RGBWWTable 255,255,255,255,255</code> - reset to RGB mode</li> <li><code>RGBWWTable 255,255,255,&lt;n&gt;,0</code> (begin the calibration process with <code>&lt;n&gt;</code> == 150)</li> <li>If too bright, decrease <code>&lt;n&gt;</code>. If too dim, increase <code>&lt;n&gt;</code></li> <li>Go back to step 2 and iterate until satisfied with the color intensities.</li> </ol> <p>Examples: * Sonoff B1: <code>RGBWWTable 255,255,255,35,0</code> * Teckin SB50: <code>RGBWWTable 255,255,255,80,0</code></p>"},{"location":"WifiPower/","title":"WifiPower Command","text":"<p><code>WifiPower</code> allows you to fine tune the Wi-Fi transmission power level. The default is 17dBm which should be enough power for the device to transmit to the Wi-Fi access point (AP) in a normal network environment use case. Changing this setting will impact the Wi-Fi range of the device. The general rule of thumb is for every 3dBm change up or down will double or halve the range, respectively. However, this is largely dependent on the Wi-Fi router's capabilities.</p> <p>Use the RSSI signal level reported by the router for a particular Tasmota device to adjust the power level of a device. Lower the value incrementally until you achieve a balance between connection stability and energy saving. In some cases a device may require slightly more power to maintain a stable connection to the Wi-Fi network. In this case, increment the value in 1 dBm increments until stable connectivity is observed.  Do not exceed 17dBm!  Exceeding the default 17dBm transmit power setting may cause unreliable device operation. Most devices have been designed with the 17dBm theoretical power setting and may not have the ability to dissipate the additional heat generated. Setting the transmit power too high may cause interference in the device antenna causing Wi-Fi reception problems.</p> <p>This setting will not affect the signal level received from the AP (i.e., the RSSI reading that Tasmota reports).</p> <p>Improper setting of this parameter may cause operational instability and can generate exceptions. Increasing <code>WifiPower</code> puts additional demand on the device electrical power supply. Exceeding the capabilities of the power supply can cause other erratic device behaviors. Of course, the opposite may be the case when reducing transmit power levels allowing a device with a borderline power regulator to operate reliably.</p> <p>You should perform substantial testing and monitoring to find the sweet spot for <code>WifiPower</code>.</p>"},{"location":"Wireguard/","title":"Wireguard VPN","text":"<p>Wireguard VPN is not included in pre-compiled binaries. It requires to self-compile with <code>#define USE_WIREGUARD</code></p> <p>You should never expose a Tasmota device directly over the Internet. Tasmota Web UI should never be exposed on a public IP. Wireguard can only be used when your Tasmota device is behind a router with NAT.</p> <p>WireGuard\u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. This component uses a custom implementation not developed by original authors and currently available for ESP32, ESP8266 and BK72xx microcontrollers only. The Tasmota port of Wireguard is based on the works done on ESPHome and https://github.com/droscy/esp_wireguard.</p> <p>To successfully use this component you must have WireGuard\u00ae also on your remote host (already installed and ready to accept connections). If you don't have it please read the section Remote peer setup.</p>"},{"location":"Wireguard/#configuring-wireguard","title":"Configuring Wireguard","text":"<p>A VPN tunnel can be created to a single remote peer adding, by adding the client configuration in the file <code>wireguard.conf</code>. You should be able to simply copy/paste from the standard configuration file generated by the Wireguard server.</p> <p>Parameters in <code>wireguard.conf</code>:</p> <pre><code>[Interface]\nPrivateKey = &lt;priv_key&gt;\nAddress = 192.168.254.6/24\nDNS = 9.9.9.9, 149.112.112.112\n\n[Peer]\nPublicKey = &lt;pub_key&gt;\nPresharedKey = &lt;psk&gt;\nEndpoint = &lt;endpoint&gt;:&lt;port&gt;\nAllowedIPs = 0.0.0.0/0\nPersistentKeepalive = 25\n\n[Tasmota]\nNetmask = 0.0.0.0\nAutoConnect = 0\n</code></pre> <p>Parameters:</p> <ul> <li><code>[Interface]/PrivateKey</code> (required, string): The private key of the device generated by the server.</li> <li><code>[Interface]/Address</code> (required, IP/mask): The VPN address of the device. The mask length (<code>/24</code> or <code>/32</code>) sets the default AllowedIPs, and can be left to its default value.</li> <li><code>[Interface]/DNS</code> (optional, list of IP addresses): The DNS servers to be used when the VPN is active. This is especially useful when the Tasmota device uses a DNS relay on the LAN that would not be reachable by the VPN server; in such case set public DNS addresses. Note: this is currently ignored </li> <li><code>[Peer]/PublicKey</code> (required, string): The private key of the device generated by the server.</li> <li><code>[Peer]/PresharedKey</code> (required, string): The chosen pre-shared key between local device and remote peer, generated by the server.</li> <li><code>[Peer]/Endpoint</code> (required, IP or domain:port): The hostname or IP of the remote peer, with its port number.</li> <li><code>[Peer]/AllowedIPs</code> (optional, list of IPv4 ranges): A list of networks in CIDR notation (IP/mask) to be allowed through the tunnel.The range <code>[Interface]/Address</code> is always added by default to this list.</li> <li><code>[Peer]/PersistentKeepalive</code> (optional, int): Number of seconds between keep-alives sent to the server (by default 0 = none). The recommended value is <code>25</code> seconds to help maintain connections through NATs and firewalls by sending periodic packets.</li> <li><code>[Tasmota]/Netmask</code> (optional, IPv4 mask, default <code>0.0.0.0</code>): Sets the internal IP mask for the LwIP network interface. Hence all IPs within the mask will be routed to the VPN instead of the default network (Wifi/Eth). If omitted, the default value is <code>0.0.0.0</code> which means that all packets are sent to Wireguard and none to the local network. Even if all packets are sent to Wireguard, the acutal packet sent to the VPN server are those listed in <code>AllowedIPs</code>, all other packets are discarded. See below for routing.</li> <li><code>[Tasmota]/AutoConnect</code> (optional, int or bool, default <code>0</code>): If set to <code>1</code> or <code>true</code>, Tasmota creates a Wireguard tunnel as soon as a network connection is up, and auto-reconnects if networks goes off and on again. Calling <code>WGStop</code> command disables <code>AutoConnect</code> until next boot.</li> </ul>"},{"location":"Wireguard/#commands","title":"Commands","text":"<p>The following commands are added:</p> <ul> <li><code>WGConnect</code>: establish connection, shows <code>WG : Wireguard peer UP</code> when peer is up (i.e. handshake was succesful)</li> <li><code>WGStop</code>:  stop Wireguard connection, shows <code>WG : Wireguard peer DOWN</code> when peer is down. If <code>AutoConnect</code> was <code>true</code>, <code>WGStop</code> sets it to <code>false</code> to avoid auto-reconnect (note: configuration is not changed, so <code>AutoConnect</code> will be enabled again after a reboot).</li> </ul>"},{"location":"Wireguard/#static-routing-and-outgoing-connections","title":"Static routing and outgoing connections","text":"<p>(This section is heavily copied from ESPHome)</p> <p>Currently there is no way on ESP devices to configure static routes for network interfaces. The routes are implicitly added by the configured netmask and only packets with destination inside the same network defined by <code>[Interface]/Address</code> and <code>[Tasmota]/Netmask</code> will be routed to the tunnel.</p> <p>After packets are routed to the tunnel, <code>[Peer]/AllowedIPs</code> list is used only to allow (or drop) packets that pass through the VPN tunnel, not to define static routes for remote hosts.</p> <p>This means that you have to tweak the <code>[Tasmota]/Netmask</code> parameter to \"cover\" all the networks in the allowed IPs list in order to successfully establish outgoing connections to remote hosts. Incoming connections are not affected by netmask on ESP32 (currently ESP8266 drops incoming packes as well).</p>"},{"location":"Wireguard/#wireguard-routing-table","title":"Wireguard Routing Table","text":"<code>Address</code> <code>Netmask</code> <code>AllowedIPs</code> working outgoing connections 172.16.0.100 omitted or 255.255.255.255 omitted or any other value none, no routes are created 172.16.0.100 255.255.255.0 omitted only to <code>172.16.0.0/24</code> 172.16.0.100 255.255.255.0 <code>172.16.0.0/24</code><code>192.168.0.0/24</code>any other because <code>192.168.0.0/24</code> and any other network will be outside <code>172.16.0.0/24</code> 172.16.0.100 255.255.255.0 <code>192.168.0.0/24</code> none because <code>192.168.0.0/24</code> is not part of <code>172.16.0.0/24</code> 10.44.0.100 255.0.0.0 omitted to <code>10.0.0.0/8</code> network 10.44.0.100 255.0.0.0 <code>10.44.0.0/16</code><code>10.10.0.0/16</code> only to the networks in the allowed list because the netmask will route the whole <code>10.0.0.0/8</code> but Wireguard allows only those two subnets any 0.0.0.0 omitted any any 0.0.0.0 <code>172.16.0.0/24</code><code>10.44.0.0/16</code><code>10.10.0.0/16</code> to any network that is in the list of allowed IPs because the netmask will route any traffic but Wireguard allows only its own list <p>Setting <code>[Tasmota]/Netmask</code> to 0.0.0.0 or leaving its default value, has the effect of routing through the VPN link any traffic. It is like having set the Wireguard interface as the system default.</p>"},{"location":"Wireguard/#limitations","title":"Limitations","text":"<p>Currently Wireguard for Tasmota has the following limitations:</p> <ul> <li>Wireguard VPN is currenlty only tested over Wifi, it has not been tested yet over Ethernet nor dual Eth/Wifi connections.</li> <li>the <code>DNS</code> field is currently ignored; which means that DNS may fail if it uses a DNS relay on your local network that is not reachable by your VPN server</li> <li>you can connect only to one peer at a time. Alghough the underlying library could connect to multiple peers, <code>LwIP</code> used in Tasmota does not support static routes which would made routing to multiple peers not practical</li> <li>On ESP8266, when a VPN connection is enabled, the Web UI is not reachable anymore. This problem does not occur on ESP32.</li> </ul>"},{"location":"Zigbee-CCLib-Flashing/","title":"Zigbee CCLib Flashing","text":""},{"location":"Zigbee-CCLib-Flashing/#flash-using-cclib","title":"Flash using CClib","text":"<p>To simplify this procedure, a ready to use fork of the needed firmware files is available.</p>"},{"location":"Zigbee-CCLib-Flashing/#flash-cclib-on-an-esp82xx-device","title":"Flash CCLib on an ESP82xx Device","text":"<p>Flashing the CC2530 normally requires a CC_DEBUGGER. Using an ESP82xx device like a Wemos D1 Mini is a lower cost alternative.  </p> <p>If you are using a Wemos D1 Mini or NodeMCU, just plug the microUSB port. Vcc (3.3V), GND, Tx (GPIO1), and Rx (GPIO3) are connected via the microUSB port. Be sure that you are using a USB data cable.  </p> <p>For ESP devices that do not have a microUSB connector, make the following connections:  </p> ESPDevice SerialProgrammingAdapter Vcc Vcc GND GND GPIO0 GND GPIO1 Rx GPIO3 Tx <p>Follow the usual ESP82xx flashing process - you are just using <code>CCLib_proxy.ino.bin</code> instead of Tasmota.</p> <p>Once the firmware upload completes, retain the serial interface connections (3.3V, GND, Tx, Rx). These will be used later for flashing the CC2530.</p> <p>C. Flash a DL-20 Zigbee module The DL-20 Zigbee module has a 5-pin 1.27mm pitch unpopulated header with 0.6mm througholes. For flashing any of the Zigbee modules, you need the following connections:  </p> ESPPin D1 MiniNodeMCU CC2530Pin DL-20 J2Pin Location GPIO12 D6 CC_DD(A.K.A. P2_1 ('P21') or Debug Data) 5 GPIO4 D2 CC_DC(A.K.A. P2_2 ('P22') or Debug Clock) 4 Vcc 3.3v Vcc 3 GPIO5 D1 CC_RST 2 GND GND GND 1 <p>DL-20 Flashing Jumpers Insert alternating male Dupont jumpers; one jumper on one side, the next one on other side. This  allows the pins to provide the friction themselves to maintain contact and remain firmly in place. You only need DD, DC, and RST (a fourth jumper is shown which is used to keep the RST jumper in place). Vcc and GND are available on the main serial interface pins. </p> <p>D. Upload the firmware to the CC2530  The CC2530 requires <code>Z-Stack_Home_1.2</code>, of type <code>Default</code> (not <code>Source Routing</code>). For convenience, ready to use firmware files are provided. Select the right one for your hardware: <code>CC2530</code>, <code>CC2530 + CC2591</code> or <code>CC2530 + CC2592</code>.</p> <p>These Python scripts require Python 2.7. 1) Ensure that you have Python 2.7 installed</p> <p>2) Install pyserial 3.0.1:</p> <pre><code>pip install pyserial==3.0.1\n</code></pre> <p>3) Check for connectivity before flashing:  </p> <pre><code>python Python/cc_info.py -p &lt;serial_port&gt;\n</code></pre> <p>where <code>&lt;serial_port&gt;</code> is the serial port for the ESP82xx device. e.g. <code>/dev/cu.usbserial-xxxx</code> or <code>COM7</code></p> <p>Example of result: <pre><code>INFO: Found a CC2530 chip on /dev/cu.usbserial-xxxx\n\nChip information:\n      Chip ID : 0xa524\n   Flash size : 16 Kb\n    Page size : 2 Kb\n    SRAM size : 1 Kb\n          USB : No\n\nDevice information:\n IEEE Address : 000000000000\n           PC : 0000\n\nDebug status:\n [ ] CHIP_ERASE_BUSY\n [ ] PCON_IDLE\n [X] CPU_HALTED\n [ ] PM_ACTIVE\n [ ] HALT_STATUS\n [X] DEBUG_LOCKED\n [X] OSCILLATOR_STABLE\n [ ] STACK_OVERFLOW\n\nDebug config:\n [ ] SOFT_POWER_MODE\n [ ] TIMERS_OFF\n [ ] DMA_PAUSE\n [ ] TIMER_SUSPEND\n</code></pre></p> <p>If your CC2530 is DEBUG_LOCKED, then the flash size will be incorrectly reported as 16kB. Dont worry flashing the Z-Stack firmware will work and reset the DEBUG_LOCKED bit. </p> <p>In some situation flashing fails with the error message <code>flash have not enough space</code>. If this happens do the following:</p> <p><pre><code>python Python/cc_read_flash.py -p &lt;serial_port&gt; -o x.hex\npython Python/cc_write_flash.py --erase -p &lt;serial_port&gt; -i x.hex\n</code></pre>    Recheck for connectivity and the correct flash size by repeating step #3.</p> <p>4) Flash the Z-Stack firmware using the following command:  </p> <p>Flashing the CC2530 takes about 20 minutes </p> <pre><code>python Python/cc_write_flash.py -e -p &lt;serial_port&gt; -i Bin/CC2530_DEFAULT_20190608_CC2530ZNP-Prod.hex\n</code></pre> <pre><code>INFO: Found a CC2530 chip on /dev/cu.usbserial-xxxx\n\nChip information:\n Chip ID : 0xa524\nFlash size : 256 Kb\nPage size : 2 Kb\nSRAM size : 8 Kb\n     USB : No\nSections in Bin/CC2530_DEFAULT_20190608_CC2530ZNP-Prod.hex:\n\nAddr.    Size\n-------- -------------\n0x0000   8176 B \n0x1ff6   10 B \n0x3fff0   1 B \n0x2000   239616 B \n\nThis is going to ERASE and REPROGRAM the chip. Are you sure? &lt;y/N&gt;:  y\n\nFlashing:\n- Chip erase...\n- Flashing 4 memory blocks...\n-&gt; 0x0000 : 8176 bytes \nProgress 100%... OK\n-&gt; 0x1ff6 : 10 bytes \nProgress 100%... OK\n-&gt; 0x3fff0 : 1 bytes \nProgress 100%... OK\n-&gt; 0x2000 : 239616 bytes \nProgress 100%... OK\n\nCompleted\n</code></pre> <p>If you don't see any on screen activity that flashing has begun (i.e., progress percentages increasing) within a couple minutes, then abort the command, cycle power on the ESP82xx, and start this step over.</p> <p>Described in greater detail in this blog post.</p>"},{"location":"Zigbee-Internals/","title":"Zigbee internals","text":"<p>Back to Zigbee</p> <p>This page is for developers who want to understand how Zigbee2Tasmota (Z2T) works and its implementation details.</p>"},{"location":"Zigbee-Internals/#cc2530-serial-protocol","title":"CC2530 Serial protocol","text":"<p>The CC2530 is flashed with Texas Instrument ZNP Software version 1.2. The protocol is build on a serial communication between the main cpu and the CC2530.</p> <p>Z-Stack 1.2 Monitor and Test API</p> <p>Serial communication is configured as 8N1, 115200 bauds. We suggest to use GPIO13/15 because they have hardware serial support. Please note that there is only one usable hardware serial, either on GPIO1/3 or GPIO13/15.</p> <p>To enable hardware serial on GPIO13/15 for Tasmota, set <code>Serial 0</code> and restart. Otherwise Z2T will use Software serial provided by TasmotaSerial.</p> <p>Receiving 115200 bauds in software is a timing challenge. Here is the anatomy of a byte transmitted in serial mode. Each bit is 8.7\u00b5s, or ~700 CPU cycles at 80MHz (1400 cycles at 160MHz).</p> <p>It all starts with a LOW \"start bit\" that generates an interrupt transferred to TasmotaSerial. Then TasmotaSerial enters a tightly controlled loop to read each bit (least sifnificant first). The frame stops with a HIGH stop bit.</p> <p></p> <p>What can go wrong? Tasmota may be already handling an interrupt when the start bit arrives, potentially causing a shift by 1 bit and a wrong message.</p> <p>Here is a 0xFE byte correctly received:</p> <p></p> <p>Same frame with a delay in the interrupt handler, and mistakenly read 0xFF:</p> <p></p> <p>TasmotaSerial has been improved to allow receiving a train of bytes withtout any disruption.</p> <p>CC2530 generally sends all the bytes one after the other for a single ZNP message (up to 250 bytes). Instead of giving back control after the first byte, the TasmotaSerial interrupt handler continues to monitor the serial RX line for the next 4 bits and checks whether a new start bit arrived. It avoids any error after the first byte was received.</p> <p></p> <p>Still the first byte in the message could have been wrong. Fortunately, the first byte sent by ZNP is always 0xFE (see below). This means that if the interrupt arrives too late, Tasmota will read 0xFF instead of 0xFE. Z2T software does automatic error correction in this case, i.e. if the first byte received is 0xFF, it is automatically assumed to be 0xFE and the rest of the message is read normally.</p> <p>With these two schemes, software serial for Zigbee proved to be extremely reliable, even at 80MHz. It is highly recommended though to run at 160MHz.</p>"},{"location":"Zigbee-Internals/#state-machine-cc2530-initialization-and-configuration","title":"State machine - CC2530 initialization and configuration","text":"<p>After Tasmota boots, it sends the sequence <code>410001</code> to force a CC2530 hardware reset. Z2T implements an asynchronous state machine to handle the initialization and configuration of the CC2530. The state machine sends commands and waits for responses (with time-outs) and takes different branches depending on the responses.</p>"},{"location":"Zigbee-Internals/#instruction-set","title":"Instruction set","text":"<p>The program is encoded as a list of 32 bits instructions, stored in Flash in the <code>zb_prog</code> array of type <code>Zigbee_Instruction[]</code>. There is a PC (program counter) that is increased at each tick (i.e. every 50ms).</p> <p>The state machine has very simple instructions.</p> <p>Instructions encoded with 4 bytes:</p> <ul> <li><code>NOOP</code>: no-operation, do nothing and move to the next instruction</li> <li><code>LABEL(x)</code>: no-operation, and defines a Label (8 bits) that can be called by code.</li> <li><code>GOTO(x)</code>: moves the PC to the instruction with LABEL(x)</li> <li><code>ZI_ON_ERROR_GOTO(x)</code>: if an error occurs, move to label  <li><code>ZI_ON_TIMEOUT_GOTO(x)</code>: if a timeout occurs, move to label  <li><code>WAIT(y)</code>: wait for  milliseconds (unsigned 16 bits). Note the granularity is 50ms and the wait is non-blocking <li><code>WAIT_FOREVER</code>: pause the state machine and wait for an external goto</li> <li><code>STOP</code>: stop completely the state machine, only used after an unrecoverable error</li> <p>Instructions encoded with 8 bytes:</p> <ul> <li><code>CALL(f, x)</code>: call a function,  is the address of the function of type <code>uint32_t f(uint8_t)</code>. The input parameter is . The response is according to callbacks responses, except <code>-1</code> (time-out) simply continues the flow. <li><code>LOG(m)</code>: log the string .  can be in PROGMEM. For debugging only. <li><code>MQTT_STATE(x, m)</code>: sends a MQTT <code>ZbState</code> message, with status code  and message .  can be in PROGMEM. <li><code>SEND(d)</code>: send a ZNP sequence to CC2530.  is an array of , a macro computes automatically the size of the array.  can be in PROGMEM. <li><code>WAIT_RECV(x, m)</code>: wait for a specific message  to be received with a time-out of  (uint16_t). Messages take into account are owly those matching the first 2 bytes. The complete message match is expected or an error is generated. If the message received is longer than , additional bytes are ignored <li><code>WAIT_UNTIL(x, m)</code>: similar to <code>WAIT_RECV</code> but message that don't match are ignored, until a matching message is received.</li> <li><code>ON_RECV_UNEXPECTED(f)</code>: if we received an unexpected (or unsupported) zigbee message, call function  <p>Instructions encoded with 12 bytes:</p> <ul> <li><code>WAIT_RECV_FUNC(x, m, f)</code>: similar to <code>WAIT_RECV</code> and a function  is called when the message matches. <p>All callbacks return <code>int32_t</code> with the following effect:</p> <ul> <li><code>&gt; 0</code>: goto the corresponding label</li> <li><code>0</code>: continue</li> <li><code>-1</code>: signal a time-out</li> <li><code>&lt; -1</code>: trigger an error (goto on_error) </li> </ul>"},{"location":"Zigbee-Internals/#initialization-code-for-the-state-machine","title":"Initialization code for the state machine","text":"<p>At Tasmota start-up, the state-machine fires. The current Z2T pseudo-code does the following:</p> <p>Init:</p> <ul> <li>Set-up all the error handling functions</li> <li>Wait for 10.5 seconds after boot</li> <li>Send a RESET to CC2530</li> <li>Wait for CC2530 boot</li> </ul> <p>Check configuration (if something is wrong, go to CONFIGURE):</p> <ul> <li>Check if the CC2530 was previously configured. It uses the same 1-byte Non-Volatile 0xF00 address and stores 0x55.</li> <li>Checks the Z-Stack version</li> <li>Checks the internal configuration: PanID, Ext PanID, Channel, PFGK and PFGKEN.</li> <li>If all good, emit an MQTT message saying Zigbee is configured</li> <li>Goto Start</li> </ul> <p>Configure (only if needed):</p> <ul> <li>Emit an MQTT message for reconfiguration</li> <li>Do a factory reset of CC2530</li> <li>Reset the device once again</li> <li>Configure the following: PanId, Ext PanId, Channel, set type to Coordinator, PFKEY, PFKEYEN, Security Module</li> <li>Create NF 0xF00 location and store 0x55</li> <li>Goto Start</li> </ul> <p>Start:</p> <ul> <li>Wait for CC2530 message saying the coordinator successfully started</li> <li>Query DeviceInfo</li> <li>Query Node Descriptor</li> <li>Query Active Endpoints</li> <li>Register 2 endpoints with profile 0x0104 (Home Automation) : 0x01 (default), 0x0B (for Xiaomi)</li> <li>Query Active Endpoints to verify 0x01 and 0x0B are active</li> <li>Close PermitJoin: don't accept any pairing</li> <li>Emit an MQTT message to indicate Zigbee started</li> <li>Mark Zigbee as initialized, accept incoming messages</li> <li>Load device configuration from Flash</li> <li>Query any lights declared with <code>ZbLight</code> to read their current states</li> <li>Pause the state machine</li> </ul>"},{"location":"Zigbee-Internals/#pairing-devices","title":"Pairing devices","text":"<p>When you open pairing with <code>ZbPermitJoin 1</code> (60 seconds) or <code>ZbPermitJoin 99</code> (until next reboot), you allow new devices to join the network.</p> <p>Example below is for an OSRAM Plug.</p> <p>When a new devices joins, Z2T receives a TC Device Indication: <code>ZDO_TC_DEV_IND</code> (45CA) message with the device short (16 bits) address and IEEEAddress (64 bits).</p> <pre><code>16:39:26 MQT: tele/Zigbee_home/RESULT = {\"ZbState\":{\"Status\":30,\"IEEEAddr\":\"0x7CB03EAA0A0292DD\",\"ShortAddr\":\"0xF75D\",\"PowerSource\":true,\"ReceiveWhenIdle\":true,\"Security\":false}}\n</code></pre> <p>Z2T then queries the device for additional information, like <code>ZbProbe</code> would do.</p> <p>First probe for Active Endpoint <code>ZDO_ACTIVE_EP_REQ</code></p> <pre><code>16:39:26 MQT: tele/Zigbee_home/RESULT = {\"ZbState\":{\"Status\":32,\"ActiveEndpoints\":[\"0x03\"]}}\n</code></pre> <p>Finally query for the following general attributes: Manufacturer Id and Model Id.</p> <pre><code>16:39:26 ZIG: ZbZCLRawReceived: {\"0xF75D\":{\"0000/0004\":\"OSRAM\",\"0000/0005\":\"Plug 01\"}}\n16:39:26 MQT: tele/tasmota/Zigbee_home/SENSOR = {\"ZbReceived\":{\"0xF75D\":{\"Manufacturer\":\"OSRAM\",\"ModelId\":\"Plug 01\",\"Endpoint\":3,\"LinkQuality\":36}}}\n</code></pre>"},{"location":"Zigbee-Internals/#code-flow-when-a-message-is-received","title":"Code flow when a message is received","text":""},{"location":"Zigbee-Internals/#message-serial-decoding","title":"Message Serial decoding","text":"<p>Here is a detailed view of the code flow and transformations applied when a Zigbee message is received. It's simple but has many ramifications.</p> <p>During the Tasmota event loop, Z2T first checks any incoming message by calling <code>ZigbeeInputLoop()</code>, and after parsing incoming messages, it sends any outgoing message by calling <code>ZigbeeOutputLoop()</code>.</p> <p>Note: outgoing messages are not sent directly but stacked into a buffer and sent once per event tick. This avoids lost messages when sending them too fast.</p> <p>For ZNP, the serial buffer is read if there is any incoming data. The message is checked for checksum and put into a <code>SBuffer</code> object of maximum size of 256 bytes. If a message is ready, it calls <code>ZigbeeProcessInput(znp_buffer)</code></p> <p>For EZSP, the flow is a little more complex because multiple layers of decoding are required. The first layer receives the message and handles UART-EZSP protocol messages: ignores XON/XOFF, decodes ESCAPE characters, CANCEL... It then decodes according to the pseudo-random generator, and checks the final CRC. If ok, it calls the second stage via <code>ZigbeeProcessInputRaw(ezsp_buffer)</code>.</p> <p>Note: the green light of the ZBBridge <code>Led_i 1</code> is set to blink when a message is received from EZSP (which does not mean an actual Zigbee radio message was received).</p> <p>EZSP second stage decodes the ASH protocol, including ACK/NAK of messages, RSTACK (reset confirmation) and ERROR. In case of ERROR, the EZSP stack is not able to respond anymore and requires a complete reset. In this case a log entry is produced and the entire Tasmota is automatically restarted. This stage automatically sends ACK messages to confirm reception of messages. If a DATA frame is received, it then calls the third stage via <code>ZigbeeProcessInputEZSP(buf)</code>.</p> <p>The third stage of EZSP decoding extracts the message, logs if needed and then calls <code>ZigbeeProcessInput(buf)</code>.</p>"},{"location":"Zigbee-Internals/#state-machine-handling","title":"State machine handling","text":"<p>The message is passed to the state machine that will either automatically match the message and pass to the next state, or pass it to the default handler.</p> <p>When the stack is fully initialized, <code>zigbee.init_phase == false</code>, the default handler is <code>ZNP_Recv_Default()</code> for ZNP or <code>EZ_Recv_Default()</code> for EZSP.</p> <p>For ZNP, <code>ZDO</code> messages are dispatched to the relevant handlers: <code>ZDO_END_DEVICE_ANNCE_IND</code>, <code>ZDO_TC_DEV_IND</code>, <code>ZDO_PERMIT_JOIN_IND</code>, <code>ZDO_NODE_DESC_RSP</code>, <code>ZDO_ACTIVE_EP_RSP</code>, <code>ZDO_SIMPLE_DESC_RSP</code>, <code>ZDO_IEEE_ADDR_RSP</code>, <code>ZDO_BIND_RSP</code>, <code>ZDO_UNBIND_RSP</code>, <code>ZDO_MGMT_LQI_RSP</code>, <code>ZDO_MGMT_BIND_RSP</code>. Note: <code>PARENT_ANNCE</code> is handled at ZNP level and not passed to the application.</p> <p><code>AF_DATA_CONFIRM</code> emits a log message, and data messages are handled in <code>ZNP_ReceiveAfIncomingMessage()</code>. The ZCL frame is decoded into a <code>ZCLFrame</code> object and sent to <code>Z_IncomingMessage()</code>.</p> <p>For EZSP, messages are directly dispatched for <code>trustCenterJoinHandler</code>, <code>incomingRouteErrorHandler</code>, <code>permitJoining</code> and <code>messageSentHandler</code>. All other incoming messages, including ZDO, are sent to <code>EZ_IncomingMessage()</code>.</p> <p>EZSP: <code>EZ_IncomingMessage()</code> then decodes ZDO messages and dispatches them: <code>ZDO_Device_annce</code>, <code>ZDO_Active_EP_rsp</code>, <code>ZDO_IEEE_addr_rsp</code>, <code>ZDO_Simple_Desc_rsp</code>, <code>ZDO_Bind_rsp</code>, <code>Z_UnbindRsp</code>, <code>Z_MgmtLqiRsp</code>, <code>Z_MgmtBindRsp</code>, <code>ZDO_Parent_annce</code>, <code>ZDO_Parent_annce_rsp</code>.</p> <p>Other non-ZDO messages decoded into a <code>ZCLFrame</code> object and sent to <code>Z_IncomingMessage()</code>.</p>"},{"location":"Zigbee-Internals/#incoming-messages-handling-z_incomingmessage","title":"Incoming messages handling: <code>Z_IncomingMessage</code>","text":"<p>The starting point is <code>Z_IncomingMessage()</code> with a <code>ZCLFrame</code> object corresponding to the received Zigbee message.</p> <p>Details of <code>Z_IncomingMessage()</code>:</p>"},{"location":"Zigbee-Internals/#1-log-the-raw-message-at-loglevel-3-debug","title":"1. Log the raw message at LogLevel 3 (DEBUG)","text":""},{"location":"Zigbee-Internals/#2-update-the-lqi-for-the-device","title":"2. Update the <code>LQI</code> for the device","text":""},{"location":"Zigbee-Internals/#3-update-the-last_seen-value","title":"3. Update the <code>last_seen</code> value","text":""},{"location":"Zigbee-Internals/#4-dispatch-according-to-message-type","title":"4. Dispatch according to message type","text":"<ol> <li> <p>If <code>ZCL_DEFAULT_RESPONSE</code>, log and ignore (it's just the device acknowledge for the last message).</p> </li> <li> <p>If <code>ZCL_REPORT_ATTRIBUTES</code>, call <code>parseReportAttributes()</code>. This is the general case for sensor values (temperature...)</p> </li> <li> <p>If <code>ZCL_READ_ATTRIBUTES_RESPONSE</code>, call <code>parseReadAttributesResponse()</code>. This happens as a response to reading attributes, and the handling is similar to the attribute reporting (although the syntax of the message is slightly different).</p> </li> <li> <p>If <code>ZCL_READ_ATTRIBUTES</code>, call <code>parseReadAttributes()</code>. This happens rarely, typically when a device asks the coordinator for attributes like the <code>local_time</code>.</p> </li> <li> <p>If <code>ZCL_READ_REPORTING_CONFIGURATION_RESPONSE</code>, call <code>parseReadConfigAttributes()</code>. This is the response to <code>ZbBindState</code> command.</p> </li> <li> <p>If <code>ZCL_CONFIGURE_REPORTING_RESPONSE</code>, call <code>parseConfigAttributes()</code>. This is the response to <code>ZbBind</code> command.</p> </li> <li> <p>For cluster specific commands, call <code>parseClusterSpecificCommand()</code>. This is the general case when a command is received (for ex <code>\"Power\":\"toggle\"</code>).</p> </li> </ol> <p>All the previous commands add attributes to a local <code>attr_list</code> object. These attributes are have a key of eiher Cluster/Attribute type of String type.</p> <p>Note: it is important to keep attributes as Cluster/Attribute types so that we can later apply transformations on them.</p> <p>Note2: <code>LinkQuality</code>, <code>Device</code>, <code>Name</code>, <code>Group</code> and <code>Endpoint</code> are special values that do are not registered as actual attributes.</p> <p>Note3: <code>BatteryPercentage</code> is systematically added with the last known value to each attribute reporting.</p>"},{"location":"Zigbee-Internals/#6-apply-transformations-to-the-attributes","title":"6. Apply transformations to the attributes.","text":"<p>There are many transformations that are required because some device use proprietary values, or we need to compute new values out of the existing attributes.</p> <ol> <li> <p>Reject Loopback If the message is sent from the coordinator to the coordinator itself, which can happen with broadcast message, it is discarded with DEBUG level log <code>loopback message, ignoring</code>.</p> </li> <li> <p>Generate synthetic attributes <code>generateSyntheticAttributes()</code>. This is mainly used for Xiaomi Aqara devices. Aqara uses cluster 0xFF01 and 0xFF02 to send structured messages. The good side is that it allows to send attributes from different clusters in a single message, whereas the ZCL standard would have required several messages. The bad side is that Aqara reuses the same attribute numbers for different value, and you need to know the device type to decode; which makes the whole process work only if the pairing process successfully got the ModelId. This is also used by Aqara Cube and Aqara vibration sensor to decode values.</p> </li> <li> <p>Remove invalid attributes <code>removeInvalidAttributes()</code> Any value out of normal range is removed, for example <code>lumi.weather</code> reporting a temperature below -100.0\u00b0C is removed.</p> </li> <li> <p>Apply synonyms <code>applySynonymAttributes()</code> Apply any synonym from the Zigbee plugin definitions on a per device basis. If matched, the synonym maps the attribute to a new cluster/attrid and applies a multiplier or divisor if required.</p> </li> <li> <p>Compute synthetic attributes <code>computeSyntheticAttributes()</code>. This is used to add computed attributes or fix some bugs in devices. Currently it computes the <code>BatteryPercentage</code> from the <code>BatteryVoltage</code> if the <code>BatteryPercentage</code> is not already present. It computes <code>SeaPressure</code> using the Tasmota <code>Altitude</code> setting. It fixes an Eurotronic bug in the encoding of <code>Pi Heating Demand</code> which is sent in the 0..255 range instead of 0..100 range. It fixes the IKEA Remote battery value which is half what it needs to be. It captures multipliers and divisors for AC Voltage/Current/Power (cluster 0x0B04) and stores them in the Z_Data.</p> </li> <li> <p>Generate callbacks and timers <code>generateCallBacks()</code>. This is used to register deferres callbacks. It is only used for <code>Occypancy</code> for now. Many PIR sensors report <code>\"Occupancy\":1</code> but don't report the lack of occupancy. This function sets a timer to artificially generate <code>\"Occupancy\":0</code> after a definite amount of time (defaults to 90 seconds).</p> </li> <li> <p>Post-process attributes <code>Z_postProcessAttributes()</code>. This function does the final transformation of attributes to their human readable format.</p> </li> </ol> <p>First the endpoint is added as suffix if <code>SetOption101 1</code> is set, if the source endpoint is not <code>1</code>, and if the device is known to have more than one endpoint (check with <code>ZbStatus2</code>).</p> <p>Then the attribute is looked-up from the global <code>Z_PostProcess</code> table.</p> <p>If the attribute is mapped into <code>Z_Data</code>, the value is saved into its corresponding object. See <code>ZbData</code>. This allows for keeping last seen values for the Web UI.</p> <p>Similarly, some device specific values are recorded: <code>ModelId</code>, <code>ManufacturerId</code>, <code>BatteryPercent</code>.</p> <p>If the attribute as a <code>multiplier</code> value, the raw value is multiplied/divided by this value (ex: Temperature raw value is 1/100th of degrees, so the raw value is divided by 100).</p> <p>Finally the attribute name is replaced by its string value (ex: <code>0402/0000</code> is replace with <code>Temperature</code>).</p>"},{"location":"Zigbee-Internals/#7-publish-the-final-message-to-mqtt-or-defer-the-message","title":"7. Publish the final message to MQTT or defer the message.","text":"<p>In the general case, attributes are not published immediately but kept in memory for a short period of time. This allows for debouncing of identical messages, and coalescing of values (Temperature, Pressure, Humidity) in a single MQTT message, even if there were received in 3 separate messages.</p> <p>The default timer is a compile time <code>#define USE_ZIGBEE_COALESCE_ATTR_TIMER</code> with a default value of 350 ms.</p> <p>Once a message is ready, it first checks if the value conflict with previously held values. If so, the previous message is immediately sent, and the new values are held in memory.</p> <p>Then is sets a timer to publish the values after the timer expired.</p>"},{"location":"Zigbee/","title":"Zigbee","text":"<p>Zigbee2Tasmota serves as a gateway for devices connected to a Zigbee wireless network to bridge their communications over to Wi-Fi</p> <p>If you are using ZHA or Zigbee2MQTT via Ser2Net, Tasmota is only passing bytes between the controller (HA or Z2M) and the Zigbee MCU. Please refer to their respective sites to ask any question. All of the below is dedicated to Zigbee2Tasmota mode.</p> <p>Some sections are marked as 'Advanced topic', you can skip them at first and read them only when you need to go deeper.</p> <p>Zigbee2Tasmota (Z2T) is a lightweight Zigbee gateway/bridge solution running on ESP8266/ESP8285 or ESP32 Wi-Fi chips. Hence it is easier to deploy wherever you want in your home. It was inspired by Zigbee2MQTT but it was written from scratch to make it fit into the resource constraints of an ESP82xx chip with just 80kB of RAM and only 1MB of flash memory.</p> <p>For quick reference about Zigbee commands see Zigbee Commands.</p>"},{"location":"Zigbee/#hardware","title":"Hardware","text":"<p>Zigbee2Tasmota (Z2T) supports a wide variety of Zigbee MCUs from Texas Instruments (CC253X, CC26x2, CC13x2) and from Silicon Labs (EFR32MG12/EFRMG21), and runs on ESP8266 or any variant of ESP32. Since ESP8266 has very limited resources, we strongly advise to prefer ESP32 based Zigbee gateways.</p> <p>Flashing and installation instructions for ESP32 based:</p> <ul> <li>Sonoff Zigbee Bridge Pro</li> <li>ZB-GW03 eWeLink Ethernet Zigbee Gateway (also sold as EACHEN Zigbee Smart Hub and SmartWise Zigbee Bridge Pro)</li> <li>Tube's Ethernet Zigbee Gateway (EFR32 variant)</li> <li>DIY Zigbee gateway/bridge device example based on Ebyte E180-ZG120B or E180-ZG120B-TB</li> </ul> <p>Flashing and installation instructions for ESP8266 based:</p> <ul> <li>Sonoff ZBBridge by ITead</li> <li>CC2530 based devices</li> <li>DIY Zigbee gateway/bridge device example based on IKEA TR\u00c5DFRI ICC-A-1 Module</li> </ul> <p>A complete list of Zigbee coordinators and Zigbee devices compatible with Z2T is in the Zigbee Device Compatibility Repository.</p>"},{"location":"Zigbee/#advanced-topic-znp-or-ezsp","title":"Advanced topic: ZNP or EZSP","text":"<p>Z2T supports MCUs running either the ZNP or EZSP zigbee stack. They require different compilation options but from a user point of view the features are very similar.</p> <p>Z-Stack or ZNP (Zigbee Network Processor) is an open-source Zigbee stack from Texas Instruments and runs on TI MCUs. Ready to use firmwares are found on Koenkk's Github. Older CC2530 require special wiring or external devices for flashing, while more recent like Sonoff Zigbee Bridge Pro (CC2652P) can be flashed directly from Tasmota. Z2T supports ZNP version 2.6 (Z-Stack 1.3) and version 2.7 (Z-Stack 3.x).</p> <p>EZSP (EmberZNet Serial Protocol) is a commercial Zigbee stack from Silicon Labs. Sonoff/Eachen require encrypted signed firmwares, they can be found here. Z2T supports EZSP versions 6.7.6 or above (EZSP protocol v8), recommended is v6.7.9.</p>"},{"location":"Zigbee/#introduction","title":"Introduction","text":"<p>Before using Zigbee with Tasmota, you need to understand a few concepts. Here is a simplified comparison to the Wi-Fi equivalent (sort of).</p> Zigbee concept Wi-Fi equivalent Zigbee coordinatorThe coordinator is responsible for selecting the channel, PanID, security policy, and stack profile for a network. Zigbee2Tasmota will act as a coordinator.You can have multiple coordinators as long as they have different PanIDs. Wi-Fi Access Point PanID(Personal Area Network IDentifier)This parameter is unique in a Zigbee network (16-bit integer, 0x0000\u20130x3FFF).At initial start a pseudo-random PanID is derived from the ESP MAC address. SSID (the Wi-Fi network name) ShortAddrAddress of the device on the Zigbee network. This address is randomly assigned when the device first connects to the coordinator (16 bits integer, 0x0000\u20130xFFF7). The coordinator has address 0x0000.You need to track which device has which address or assign a \"Friendly Name\" to each new discovered device. IP address GroupAddrGroup address of a collection of devices, it allows a single message to address multiple devices at once (16 bits integer, 0x0000\u20130xFFFF). For example a remote can turn on/off a group of lights. GroupAddr 0x0000 is not assigned. Multicast EndpointThe endpoint on the coordinator or on the Zigbee device the message is sent from/to. You can see endpoints as logical devices providing distinct features (8 bits integer, 1\u2013240). TCP port IEEEAddrDevice hardware address (64 bits). This is unique per device and factory assigned. MAC address Channel 11-26Default: 11 (See Zigbee-Wifi coexistence) Wi-Fi Channel Encryption Key128-bit encryption key.At initial start a pseudo-random Encryption key is derived from the ESP MAC address. Wi-Fi password PairingBy default the coordinator does not accept new devices unless put in pairing mode. When in pairing mode, it will accept pairing requests from any device within range.Default: pairing disabled WPS ClusterClusters are a group of commands and attributes that define what a device can do. Think of clusters as a group of actions by function. A device can support multiple clusters to do a whole variety of tasks. The majority of clusters are defined by the ZigBee Alliance and listed in the ZigBee Cluster Library"},{"location":"Zigbee/#configuration","title":"Configuration","text":""},{"location":"Zigbee/#initial-start","title":"Initial start","text":"<p>When you first start Z2T, pseudo-random parameters are derived from your device unique identifiers (MAC address...) for PanID and network encryption keys.</p> <p>Sonoff Zigbee Bridge Pro (ESP32 + CC2652P with ZNP)</p> <pre><code>19:02:20.659 ZIG: rebooting ZNP device\n19:02:22.960 ZbInput discarding byte 00\n19:02:22.962 RSL: RESULT = {\"ZbState\":{\"Status\":1,\"Message\":\"CCxxxx ZNP booted\",\"RestartReason\":\"Power-up\",\"MajorRel\":2,\"MinorRel\":7}}\n19:02:23.160 RSL: RESULT = {\"ZbState\":{\"Status\":50,\"MajorRel\":2,\"MinorRel\":7,\"MaintRel\":1,\"Revision\":20220219}}\n19:02:23.311 RSL: RESULT = {\"ZbState\":{\"Status\":2,\"Message\":\"Resetting configuration\"}}\n19:02:25.359 ZbInput discarding byte 00\n19:02:25.911 RSL: RESULT = {\"ZbState\":{\"Status\":3,\"Message\":\"Configured, starting coordinator\"}}\n19:02:30.062 RSL: RESULT = {\"ZbState\":{\"Status\":40,\"NewState\":9,\"Message\":\"Started as coordinator\"}}\n19:02:30.162 RSL: RESULT = {\"ZbState\":{\"Status\":51,\"IEEEAddr\":\"0x00124B0026B684E4\",\"ShortAddr\":\"0x0000\",\"DeviceType\":7,\"DeviceState\":9,\"NumAssocDevices\":0}}\n19:02:30.713 RSL: RESULT = {\"ZbState\":{\"Status\":0,\"Message\":\"Started\"}}\n19:02:30.715 ZIG: Zigbee started\n19:02:30.720 ZIG: No Zigbee device information\n19:02:30.732 ZIG: Zigbee device data in File System (31 bytes)\n</code></pre> <p>Sonoff Zigbee Bridge (ESP8266 + EFR32 with EZSP)</p> <pre><code>19:08:26.057 ZIG: Resetting EZSP device\n19:08:27.261 RSL: RESULT = {\"ZbState\":{\"Status\":1,\"Message\":\"EFR32 EZSP booted\",\"RestartReason\":\"Power-on\",\"Code\":2}}\n19:08:27.315 RSL: RESULT = {\"ZbState\":{\"Status\":55,\"Version\":\"6.7.8.0\",\"Protocol\":8,\"Stack\":2}}\n19:08:27.316 RSL: RESULT = {\"ZbState\":{\"Status\":3,\"Message\":\"Configured, starting coordinator\"}}\n19:08:28.758 RSL: RESULT = {\"ZbState\":{\"Status\":56,\"IEEEAddr\":\"0x680AE2FFFE6E103B\",\"ShortAddr\":\"0x0000\",\"DeviceType\":1}}\n19:08:28.759 RSL: RESULT = {\"ZbState\":{\"Status\":2,\"Message\":\"Resetting configuration\"}}\n19:08:44.260 ZIG: Resetting EZSP device\n19:08:45.463 RSL: RESULT = {\"ZbState\":{\"Status\":1,\"Message\":\"EFR32 EZSP booted\",\"RestartReason\":\"Power-on\",\"Code\":2}}\n19:08:45.518 RSL: RESULT = {\"ZbState\":{\"Status\":55,\"Version\":\"6.7.8.0\",\"Protocol\":8,\"Stack\":2}}\n19:08:45.520 RSL: RESULT = {\"ZbState\":{\"Status\":3,\"Message\":\"Configured, starting coordinator\"}}\n19:08:46.822 ZIG: Factory reset EZSP device\n19:08:47.053 ZIG: Subscribe to group 0 'ZbListen0 0'\n19:08:47.108 RSL: RESULT = {\"ZbState\":{\"Status\":0,\"Message\":\"Started\"}}\n19:08:47.108 ZIG: Zigbee started\n19:08:47.138 ZIG: No Zigbee device information\n19:08:47.145 ZIG: No Zigbee device data\n</code></pre> <p>When you further restart, logs are slightly shorter (less lines) since the MCU is already configured.</p>"},{"location":"Zigbee/#customize-zigbee-configuration","title":"Customize Zigbee configuration","text":"<p>At initial start, Tasmota generates pseudo-random Zigbee parameters. They should  work out of the box but you also may want to choose different values:</p> <p>Use the command <code>ZbConfig</code> to dump the current configuration. For example it might return <code>{\"ZbConfig\":{\"Channel\":11,\"PanID\":\"0x1A63\",\"ExtPanID\":\"0xCCCCCCCCCCCCCCCC\",\"KeyL\":\"0x0F0D0B0907050301\",\"KeyH\":\"0x0D0C0A0806040200\"}}</code></p> <p>To apply a new configuration, populate the fields you want to change in a single-level JSON:</p> <p><code>ZbConfig {\"Channel\":11,\"PanID\":\"0x1A63\",\"ExtPanID\":\"0xCCCCCCCCCCCCCCCC\",\"KeyL\":\"0x0F0D0B0907050301\",\"KeyH\":\"0x0D0C0A0806040200\"}</code></p> <p>Changing any parameter with <code>ZbConfig</code> requires to re-pair all devices.</p> <p>In case you coordinator fails at starting, for example because of conflicting PanID, you have about 15 seconds after boot to use ZbConfig to change your configuration. After the coordinator fails to start all, zigbee commands are disabled.</p> Parameter Description Channel <code>11-26</code> Zigbee radio channel, see above PanID <code>0x0001-0x3FFF</code> unique Zigbee network identifier. You should not have two coordinators using the same PanID, or bad things happen.If your coordinator fails to start, try changing the PanID as it may conflict with one already in use. ExtPanID This is a 64 bit unique identifier for the network. It is not used much in Z2T but needs to be unique. KeyL KeyH This is the 128 bit network encryption key split into High and Low 64 bit parts. Do not reveal this key or anyone can decrypt your Zigbee traffic. TxRadio On some devices you can set the radio power in dBm. You generally don't need to change it."},{"location":"Zigbee/#advanced-topic-gpios","title":"Advanced topic: GPIOs","text":"<p>You will usually find a ready to use template in the Zigbee Device Compatibility Repository</p> <p>Below are the details of the GPIO configuration needed by Zigbee:</p> GPIO Description <code>Zigbee Tx</code> and <code>Zigbee Rx</code> GPIOs used for serial communication between Tasmota and the MCU (needed for both ZNP and EZSP). Communication is always 115200 bps 8N1. <code>Zigbee Rst 1</code> (optional) defines the hardware Reset for the Zigbee MCU. If not defined, Z2T will fallback to sending a soft-reset to the MCU using a special serial sequence (which may fail on rare occasions). <code>Zigbee Rst 2</code> (optional) defines a special pin used to put the MCU in bootloader and flashing mode when the hardware reset is pulled down. This is used both by EFR32 and CC2652P based devices. It allows to flash the MCU directly from Tasmota. <code>LedLink</code> or <code>LedLink_i</code> (optional) when defined, this led keeps its normal Wifi/MQTT status indicator (blinking) and adds a glowing light when Permit Join is active (i.e. new devices are allowed to pair). <code>Led 1</code> or <code>Led_i 1</code> (optional) when defined, used as an indicator of traffic between Tasmota and the MCU, which generally means Zigbee traffic is sent or received."},{"location":"Zigbee/#advanced-topic-hardware-or-software-serial","title":"Advanced topic: Hardware or Software serial","text":"<p>On ESP32 serial is always handled by hardware so you don't need to bother.</p> <p>On ESP8266 using the hardware serial is preferred. To do so, you need to use GPIOs 13/15 for Zigbee Rx/Tx and set <code>SerialLog 0</code>. By doing so, Z2T steals the hardware UART from the serial console and uses it for communicating with the MCU. Otherwise Z2T uses Software Serial which requires compiling at 160MHz and might be unreliable on very rare occasions.</p>"},{"location":"Zigbee/#commands","title":"Commands","text":"<p>For a list of available commands see Zigbee Commands.</p>"},{"location":"Zigbee/#quick-start","title":"Quick start","text":"<p>In this section, we'll give a quick overview of 2 devices:</p> <ul> <li> <p>Sonoff SNZB-02 Temperature And Humidity Sensor</p> </li> <li> <p>BlitzWolf SHP15 Power Monitoring Plug</p> </li> </ul>"},{"location":"Zigbee/#definition-file","title":"Definition File","text":"<p>From the start, Z2T design was to stick to a low-level view and provide higher level (named) attributes only for a limited set of mostly seen attributes. This raised difficulties and frustration for users with specific devices that use rare attributes, or devices that use non-standard attributes (like Tuya zigbee devices).</p> <p>We are now providing a Zigbee Device plugin mechanisms, using simple text files. These files specify mapping on a per-device type basis. The goal is to fill most of the gap with Zigbee2MQTT (provided that you write the device plugin files). The lightweight nature of plugins permits to load only the plugins required by the devices used, and does not require a sowftare update for new devices.</p>"},{"location":"Zigbee/#how-does-it-work","title":"How does it work?","text":"<p>You simply copy device plugin files (externsion <code>*.zb</code>) in the file system and they are automatically loaded at start.</p> <p>You can dynamically load new files with <code>ZbLoad &lt;file&gt;.zb</code> or unload definitions with <code>ZbUnload &lt;file&gt;.zb</code>. When you reload a file with the same name, it is first unloaded.</p> <p>At Zigbee start, all files with <code>*.zb</code> suffix are loaded into memory. Be careful of not saturating memory, especially on ESP8266.</p>"},{"location":"Zigbee/#zigbee-device-plugin-format","title":"Zigbee device plugin format","text":"<p>Zigbee device plugin have the following format:</p> <ul> <li>starts with <code>#Z2Tv1</code> on the first line</li> <li><code>#</code> is a marker for comments, and everything from <code>#</code> to end of line is ignored</li> <li>rest of the file is of form device matcher followed by attribute definitions or attribute synonyms</li> </ul>"},{"location":"Zigbee/#device-matchers","title":"device matchers","text":"<ul> <li>composed of one or more lines defining the <code>modelId</code> and <code>manufacturerId</code>. If a field is empty, it matches all values</li> <li><code>:&lt;modelId&gt;,&lt;manufacturerId&gt;</code></li> <li>example: <code>:TS0601,_TZE200_sh1btabb</code> for GiEX water valve</li> </ul>"},{"location":"Zigbee/#attribute-matcher-specifies-a-clusterattributetype-tuple-and-matches-an-attribute-name","title":"attribute matcher specifies a cluster/attribute/type tuple and matches an attribute name","text":"<ul> <li><code>&lt;cluster 4 hex&gt;/&lt;attribute 4 hex&gt;</code> or <code>&lt;cluster 4 hex&gt;/&lt;attribute 4 hex&gt;%&lt;type 2 hex&gt;</code></li> <li>Ex: <code>EF00/0365,IrrigationStartTime</code> (Tuya cluster EF00 does not need an explicit type)</li> <li>Ex: <code>0006/4001%bool,OnTime</code></li> </ul>"},{"location":"Zigbee/#attribute-synonyms-specifies-that-a-received-attribute-is-a-synonym-for-another-attribute","title":"attribute synonyms specifies that a received attribute is a synonym for another attribute","text":"<ul> <li><code>&lt;cluster 4 hex&gt;/&lt;attribute 4 hex&gt;=&lt;new_cluster 4 hex&gt;/&lt;new_attribute 4 hex&gt;,&lt;multiplier&gt;</code></li> <li>Ex: <code>EF00/026C=0001/0021,2</code> converts any EFOO/026C attribute received to <code>0001/0021</code> (BatteryPercentage) and multiplies by <code>2</code> to convert to ZCL standard.</li> </ul> <p>Multiplier is 8 bit int (-128..127). If <code>0</code> or <code>1</code>, the value is unchanged. Otherwise the value is converted to <code>float</code> and is multiplied by <code>multiplier</code> if positive, or divided by <code>-multiplier</code> if negative.</p> <p>I.e. <code>multiplier=10</code> means multiply by 10, <code>multiplier=-5</code> means divide by 5</p>"},{"location":"Zigbee/#sonoff-snzb-02-sensor","title":"Sonoff SNZB-02 Sensor","text":"<p>Put Z2T in pairing mode (command <code>ZbPermitJoin 1</code> or via WebUI) and keep the button of the sensor pressed for 5 seconds. Wait 20 seconds, you should see something similar to this in the logs:</p> <pre><code>17:07:53.015 RSL: RESULT = {\"ZbState\":{\"Status\":34,\"IEEEAddr\":\"0x00124B001F841E41\",\"ShortAddr\":\"0x2916\",\"ParentNetwork\":\"0x0000\"}}\n17:07:53.465 RSL: RESULT = {\"ZbState\":{\"Status\":30,\"IEEEAddr\":\"0x00124B001F841E41\",\"ShortAddr\":\"0x2916\",\"PowerSource\":false,\"ReceiveWhenIdle\":false,\"Security\":false}}\n17:07:54.565 RSL: RESULT = {\"ZbState\":{\"Status\":32,\"ActiveEndpoints\":[\"0x01\"]}}\n17:07:55.037 ZIG: Zigbee Devices Data saved in File System (18 bytes)\n17:07:55.168 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"ModelId\":\"TH01\",\"Manufacturer\":\"eWeLink\",\"Endpoint\":1,\"LinkQuality\":120}}}\n17:07:56.667 RSL: RESULT = {\"ZbState\":{\"Status\":33,\"Device\":\"0x2916\",\"Endpoint\":\"0x01\",\"ProfileId\":\"0x0104\",\"DeviceId\":\"0x0302\",\"DeviceVersion\":0,\"InClusters\":[\"0x0000\",\"0x0003\",\"0x0402\",\"0x0405\",\"0x0001\"],\"OutClusters\":[\"0x0003\"]}}\n17:07:57.241 ZIG: Zigbee Devices Data saved in File System (29 bytes)\n17:07:58.667 ZIG: auto-bind `ZbBind {\"Device\":\"0x2916\",\"Endpoint\":1,\"Cluster\":\"0x0001\"}`\n17:07:59.217 RSL: RESULT = {\"ZbBind\":{\"Device\":\"0x2916\",\"Status\":0,\"StatusMessage\":\"SUCCESS\"}}\n17:08:00.717 ZIG: auto-bind `ZbBind {\"Device\":\"0x2916\",\"Endpoint\":1,\"Cluster\":\"0x0402\"}`\n17:08:01.018 RSL: RESULT = {\"ZbBind\":{\"Device\":\"0x2916\",\"Status\":0,\"StatusMessage\":\"SUCCESS\"}}\n17:08:02.669 ZIG: auto-bind `ZbBind {\"Device\":\"0x2916\",\"Endpoint\":1,\"Cluster\":\"0x0405\"}`\n17:08:03.618 RSL: RESULT = {\"ZbBind\":{\"Device\":\"0x2916\",\"Status\":0,\"StatusMessage\":\"SUCCESS\"}}\n17:08:04.670 ZIG: auto-bind `ZbSend {\"Device\":\"0x2916\",\"Config\":{\"BatteryVoltage\":{\"MinInterval\":3600,\"MaxInterval\":14400,\"ReportableChange\":0.2},\"BatteryPercentage\":{\"MinInterval\":3600,\"MaxInterval\":14400,\"ReportableChange\":5}}}`\n17:08:05.271 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"ConfigResponse\":{},\"Endpoint\":1,\"LinkQuality\":123}}}\n17:08:06.670 ZIG: auto-bind `ZbSend {\"Device\":\"0x2916\",\"Config\":{\"Temperature\":{\"MinInterval\":30,\"MaxInterval\":3600,\"ReportableChange\":0.5}}}`\n17:08:06.871 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"ConfigResponse\":{},\"Endpoint\":1,\"LinkQuality\":120}}}\n17:08:08.670 ZIG: auto-bind `ZbSend {\"Device\":\"0x2916\",\"Config\":{\"Humidity\":{\"MinInterval\":30,\"MaxInterval\":3600,\"ReportableChange\":1}}}`\n17:08:09.421 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"ConfigResponse\":{},\"Endpoint\":1,\"LinkQuality\":120}}}\n17:08:14.221 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"Temperature\":25.72,\"Humidity\":47.73,\"Endpoint\":1,\"LinkQuality\":116}}}\n</code></pre> <p>These logs are quite rich and we'll dive into the details later. Basically it says that the device paired successfully and is configured.</p> <p>Next step is setting a friendly name with <code>zbname 0x2916,SNZB-02</code></p> <pre><code>17:09:27.294 CMD: zbname 0x2916,SNZB-02\n17:09:27.297 RSL: RESULT = {\"0x2916\":{\"Name\":\"SNZB-02\"}}\n17:09:29.375 ZIG: Zigbee Devices Data saved in File System (37 bytes)\n</code></pre> <p>The device will regularly report readings like this:</p> <pre><code>17:09:44.351 RSL: SENSOR = {\"ZbReceived\":{\"0x2916\":{\"Device\":\"0x2916\",\"Name\":\"SNZB-02\",\"Temperature\":26.27,\"Endpoint\":1,\"LinkQuality\":105}}}\n</code></pre> <p>Information is also displayed in the WebUI.</p> <p></p> <p>When you hover the arrow on the name, you get additional information like short-address and manufacturer.</p> <p></p> <p>When you hover over the battery icon, you get a more precise reading.</p> <p></p>"},{"location":"Zigbee/#blitzwolf-shp15-plug","title":"BlitzWolf SHP15 Plug","text":"<p>Put Z2T in pairing mode (command <code>ZbPermitJoin 1</code> or via WebUI) and keep the button of the sensor pressed for 5 seconds. Wait 20 seconds, you should see something similar to this in the logs:</p> <pre><code>16:17:40.804 RSL: RESULT = {\"ZbState\":{\"Status\":34,\"IEEEAddr\":\"0x842E14FFFE13A51E\",\"ShortAddr\":\"0x7120\",\"ParentNetwork\":\"0x0000\"}}\n16:17:40.854 RSL: RESULT = {\"ZbState\":{\"Status\":30,\"IEEEAddr\":\"0x842E14FFFE13A51E\",\"ShortAddr\":\"0x7120\",\"PowerSource\":true,\"ReceiveWhenIdle\":true,\"Security\":false}}\n16:17:41.003 RSL: RESULT = {\"ZbState\":{\"Status\":32,\"ActiveEndpoints\":[\"0x01\"]}}\n16:17:41.408 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"ModelId\":\"TS0121\",\"Manufacturer\":\"_TZ3000_g5xawfcq\",\"Endpoint\":1,\"LinkQuality\":229}}}\n16:17:42.655 RSL: RESULT = {\"ZbState\":{\"Status\":33,\"Device\":\"0x7120\",\"Endpoint\":\"0x01\",\"ProfileId\":\"0x0104\",\"DeviceId\":\"0x0051\",\"DeviceVersion\":1,\"InClusters\":[\"0x0000\",\"0x0004\",\"0x0005\",\"0x0006\",\"0x0702\",\"0x0B04\"],\"OutClusters\":[\"0x0019\",\"0x000A\"]}}\n16:17:43.442 ZIG: Zigbee Devices Data saved in File System (40 bytes)\n16:17:44.516 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Power\":1,\"0006/4001\":0,\"0006/4002\":0,\"0006/8001\":1,\"0006/8002\":2,\"Endpoint\":1,\"LinkQuality\":229}}}\n16:17:44.664 ZIG: auto-bind `ZbBind {\"Device\":\"0x7120\",\"Endpoint\":1,\"Cluster\":\"0x0006\"}`\n16:17:44.863 RSL: RESULT = {\"ZbBind\":{\"Device\":\"0x7120\",\"Status\":0,\"StatusMessage\":\"SUCCESS\"}}\n16:17:46.466 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"EnergyTotal\":\"0x000000000000\",\"Endpoint\":1,\"LinkQuality\":229}}}\n16:17:46.664 ZIG: auto-bind `ZbSend {\"Device\":\"0x7120\",\"Config\":{\"Power\":{\"MinInterval\":1,\"MaxInterval\":3600}}}`\n16:17:46.916 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"ConfigResponse\":{},\"Endpoint\":1,\"LinkQuality\":229}}}\n16:17:47.815 ZIG: Auto-responder: ZbSend {\"Device\":\"0x7120\",\"Cluster\":\"0x000A\",\"Endpoint\":1,\"Response\":\"000A/0007\":711476267}\n16:17:47.819 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Cluster\":10,\"Read\":[7],\"ReadNames\":{\"LocalTime\":true},\"Endpoint\":1,\"LinkQuality\":229}}}\n</code></pre> <p>Again lots of lines we'll not explore for now.</p> <p>You can turn on the plug:</p> <p><code>zbsend {\"device\":\"SHP15\",\"send\":{\"power\":true}}</code></p> <pre><code>16:24:24.208 RSL: RESULT = {\"ZbSend\":\"Done\"}\n16:24:25.005 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"Power\":1,\"Endpoint\":1,\"LinkQuality\":229}}}\n</code></pre> <p>You can turn off the plug: (you can use <code>\"power\":0</code> or <code>\"power\":false</code>)</p> <p><code>zbsend {\"device\":\"SHP15\",\"send\":{\"power\":0}}</code></p> <pre><code>16:24:01.456 RSL: RESULT = {\"ZbSend\":\"Done\"}\n16:24:02.252 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"Power\":0,\"Endpoint\":1,\"LinkQuality\":229}}}\n</code></pre> <p>You can read the current state: (you can use <code>\"power\":1</code> or <code>\"power\":true</code>)</p> <p><code>zbsend {\"device\":\"SHP15\",\"read\":{\"power\":true}}</code></p> <pre><code>16:24:45.265 RSL: RESULT = {\"ZbSend\":\"Done\"}\n16:24:45.815 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"Power\":1,\"Endpoint\":1,\"LinkQuality\":229}}}\n</code></pre> <p>You can read the current power: (here 0W)</p> <p><code>zbsend {\"device\":\"SHP15\",\"read\":{\"activepower\":true}}</code></p> <pre><code>16:29:17.309 RSL: RESULT = {\"ZbSend\":\"Done\"}\n16:29:17.860 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"ActivePower\":0,\"Endpoint\":1,\"LinkQuality\":229}}}\n</code></pre> <p>When you directly turn on or off the plug with its button, it also spontaneously reports the changes:</p> <pre><code>16:29:45.660 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"Power\":0,\"Endpoint\":1,\"LinkQuality\":218}}}\n16:29:52.460 RSL: SENSOR = {\"ZbReceived\":{\"0x7120\":{\"Device\":\"0x7120\",\"Name\":\"SHP15\",\"Power\":1,\"Endpoint\":1,\"LinkQuality\":218}}}\n</code></pre> <p>The WebUI is also reporting the last known values:</p> <p></p>"},{"location":"Zigbee/#advanced-topic-logs-when-pairing","title":"Advanced topic: logs when pairing","text":"<p>This is an example of a pairing process for the Aqara Temperature &amp; Humidity Sensor. To pair this sensor, issue <code>ZbPermitJoin 1</code> and then press and hold the reset button for 5 seconds. The sensor LED will flash several times and you will see log entries in the console, especially this one:</p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbState\":{\"Status\":30,\"IEEEAddr\":\"0x00158D00036B50AE\",\"ShortAddr\":\"0x8F20\",\"PowerSource\":false,\"ReceiveWhenIdle\":false,\"Security\":false}}\n</code></pre> <p>Message with <code>\"Status\":30</code> shows some characteristics of the device:</p> Field name Value <code>Status</code> <code>30</code> indicates a device connect or reconnect. This is the opportunity to match IEEEAddress and short address <code>IEEEAddr</code> Long unique address (64 bits) of the device - factory set <code>ShortAddr</code> Short address (16 bits) randomly assigned to the device on this Zigbee network <code>PowerSource</code> <code>true</code> = the device is connected to a power source<code>false</code> = the device runs on battery <code>ReceiveWhenIdle</code> <code>true</code> = the device can receive commands when idle<code>false</code> = the device is not listening. Commands should be sent when the device reconnects and is idle <code>Security</code> Security capability (meaning unknown, to be determined)"},{"location":"Zigbee/#advanced-topic-zigbee-plugin-definition-file","title":"Advanced topic: Zigbee plugin Definition File","text":"<p>From the start, Z2T design was to stick to a low-level view and provide higher level (named) attributes only for a limited set of mostly seen attributes. This raised difficulties and frustration for users with specific devices that use rare attributes, or devices that use non-standard attributes (like Tuya zigbee devices).</p> <p>We are now providing a Zigbee Device plugin mechanisms, using simple text files. These files specify mapping on a per-device type basis. The goal is to fill most of the gap with Zigbee2MQTT (provided that you write the device plugin files). The lightweight nature of plugins permits to load only the plugins required by the devices used, and does not require a software update for new devices.</p>"},{"location":"Zigbee/#how-does-it-work_1","title":"How does it work?","text":"<p>You simply copy device plugin files (externsion <code>*.zb</code>) in the file system and they are automatically loaded at start.</p> <p>During troubleshooting, you can dynamically load new files with <code>ZbLoad &lt;file&gt;.zb</code> or unload definitions with <code>ZbUnload &lt;file&gt;.zb</code>. When you reload a file with the same name, it is first unloaded.</p> <p>At Zigbee start, all files with <code>*.zb</code> suffix are loaded into memory. Be careful of not saturating memory, especially on ESP8266.</p>"},{"location":"Zigbee/#pairing-devices","title":"Pairing Devices","text":"<p>When you create a new Zigbee network, it contains no devices except the coordinator (your Zigbee gateway). The first step is to add devices to the network, which is called pairing.</p> <p>By default, and for security reasons, the Zigbee coordinator does not automatically accept new devices. To pair new devices, use <code>ZbPermitJoin 1</code> or click Zigbee Permit Join in the WebUI to allow accepting new devices for the next 60 seconds. Then put your Zigbee device pairing mode. This is usually accomplished by pressing the button on the device for 5 seconds or more.</p> <p><code>ZbPermitJoin 1</code></p> <pre><code>CMD: ZbPermitJoin 1\nMQT: stat/%topic%/RESULT = {\"ZbPermitJoin\":\"Done\"}\nMQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":21,\"Message\":\"Enable Pairing mode for 60 seconds\"}}\n</code></pre> <p>60 seconds later:</p> <pre><code>MQT: tele/%topic%/RESULT = {\"ZbState\":{\"Status\":20,\"Message\":\"Disable Pairing mode\"}}\n</code></pre> <p>After the device has successfully paired it will be shown in the WebUI with its short address and its link quality number (LQI). When it is a battery powered device, the battery percentage will be displayed as soon as it is received from the device.</p> <p></p> <p>Devices will show their friendly name once you set it.</p>"},{"location":"Zigbee/#setting-friendly-name","title":"Setting Friendly Name","text":"<p>Instead of a short address like <code>0x8F20</code> you can assign an easy to remember friendly name such as <code>Bedroom_Sensor</code>.</p> <p>See <code>ZbName</code> command for all options.</p> <p>Xiaomi Aqara Cube with address <code>0x128F</code></p> <pre><code>MQT: tele/%topic%/RESULT = {\"ZbReceived\":{\"0x128F\":{\"AqaraVibrationMode\":\"tilt\",\"AqaraVibrationsOrAngle\":162,\"AqaraAccelerometer\":[-690,2,138],\"AqaraAngles\":[-78,0,11],\"LinkQuality\":158}}}\n</code></pre> <p>Setting its friendly name to <code>Vibration_sensor</code>: <pre><code>ZbName 0x128F,Vibration_sensor\nCMD: ZbName 0x128F,Vibration_sensor\nMQT: stat/%topic%/RESULT = {\"0x128F\":{\"Name\":\"Vibration_sensor\"}}\n\n(10 seconds later)\nZIG: Zigbee Devices Data store in Flash (0x402FF800 - 270 bytes)\n</code></pre></p> <p>Now the sensor readings includes the friendly name: <pre><code>MQT: tele/%topic%/RESULT = {\"ZbReceived\":{\"0x128F\":{\"Name\":\"Vibration_sensor\",\"AqaraVibrationMode\":\"tilt\",\"AqaraVibrationsOrAngle\":171,\"AqaraAccelerometer\":[-691,12,130],\"AqaraAngles\":[-78,1,11],\"LinkQuality\":153}}}\n</code></pre></p> <p>If you set <code>SetOption83 1</code> sensor readings will use the friendly name as JSON key, short address is added as <code>Device</code>: <pre><code>MQT: tele/%topic%/RESULT = {\"ZbReceived\":{\"Vibration_sensor\":{\"Device\":\"0x128F\",\"AqaraVibrationMode\":\"tilt\",\"AqaraVibrationsOrAngle\":171,\"AqaraAccelerometer\":[-691,8,136],\"AqaraAngles\":[-78,1,11],\"LinkQuality\":153}}}\n</code></pre></p>"},{"location":"Zigbee/#removing-devices","title":"Removing Devices","text":"<p>A Zigbee device will continue to connect to a coordinator unless you ask it to \"leave\" or if you change the network configuration (change of PanID or network key - which means losing ALL devices).</p> <p>To ask a device to leave the network, use command <code>ZbLeave &lt;device&gt;</code> or <code>ZbLeave &lt;friendlyname&gt;</code>. This sends a message to the device, which needs to be awake to process it. For battery powered devices, you need to wake them up when sending this command. Unfortunately there is no confirmation message sent back. Note: even if the device left the network, it is still registered in Z2T and continues to appear on the UI. To remove it from the list, use <code>ZbForget</code> below.</p> <p>To remove a device from the Zigbee2Tasmota list of devices and from the WebUI, use the command <code>ZbForget &lt;device&gt;</code> or <code>ZbForget &lt;friendlyname&gt;</code>. If the device is still connected to the network, it will pop up again later. I.e. ZbForget does not remove a device from the network; else use <code>ZbLeave</code> above.</p>"},{"location":"Zigbee/#advanced-topic-device-information","title":"Advanced topic: Device Information","text":"<p>You can get a quick list of Zigbee devices with the command <code>ZbStatus</code>.</p> <p>Example:</p> <pre><code>18:30:58.972 CMD: ZbStatus\n18:30:58.980 MQT: stat/xxx/RESULT = {\"ZbStatus1\":[{\"Device\":\"0xECD0\",\"Name\":\"IKEA_Bulb\"},{\"Device\":\"0x8959\",\"Name\":\"Plug\"}]}\n</code></pre> <p>You can use the command <code>ZbInfo</code> to display all information, endpoints and last known values for the main attributes. There are variants in the commands arguments:</p> <ul> <li><code>ZbInfo</code> (no arg): list all known device one after the other</li> <li><code>ZbInfo 0xECD0</code>: show information of a device by short address</li> <li><code>Zbinfo IKEA_Bulb</code>: show information of a device by friendly name</li> <li><code>Zbinfo 0x90FD9FFFFE03B051</code>: show information of a device by long address (IEEE address)</li> <li><code>ZbInfo 1</code>, <code>ZbInfo 2</code>... iterate through devices in sequence</li> </ul> <p><code>ZbInfo</code> does not query the device, it only shows the last known state of the device from Tasmota memory</p> <p>Example:</p> <pre><code>18:38:51.523 CMD: ZbInfo\n18:38:51.532 MQT: tele/xxx/SENSOR = {\"ZbInfo\":{\"0xECD0\":{\"Device\":\"0xECD0\",\"Name\":\"IKEA_Bulb\",\"IEEEAddr\":\"0x90FD9FFFFE03B051\",\"ModelId\":\"TRADFRI bulb E27 WS opal 980lm\",\"Manufacturer\":\"IKEA of Sweden\",\"Endpoints\":[1],\"Config\":[\"O01\",\"L01.2\"],\"Power\":1,\"Dimmer\":160,\"X\":30138,\"Y\":26909,\"CT\":350,\"ColorMode\":2,\"RGB\":\"FFC773\",\"RGBb\":\"A17E49\",\"Reachable\":true,\"LastSeen\":353,\"LastSeenEpoch\":1658349178,\"LinkQuality\":79}}}\n18:38:51.570 MQT: tele/xxxx/SENSOR = {\"ZbInfo\":{\"0x8959\":{\"Device\":\"0x8959\",\"Name\":\"Plug\",\"IEEEAddr\":\"0x7CB03EAA0A0292DD\",\"ModelId\":\"Plug 01\",\"Manufacturer\":\"OSRAM\",\"Endpoints\":[3],\"Config\":[\"L03.0\",\"O03\"],\"Dimmer\":254,\"Power\":0,\"Reachable\":false,\"LastSeen\":16607299,\"LastSeenEpoch\":1641742232,\"LinkQuality\":147}}}\n</code></pre> <p>(formatted for readability)</p> <pre><code>18:38:51.532 MQT: tele/xxx/SENSOR = \n{\n    \"ZbInfo\": {\n        \"0xECD0\": {\n            \"Device\": \"0xECD0\",\n            \"Name\": \"IKEA_Bulb\",\n            \"IEEEAddr\": \"0x90FD9FFFFE03B051\",\n            \"ModelId\": \"TRADFRI bulb E27 WS opal 980lm\",\n            \"Manufacturer\": \"IKEA of Sweden\",\n            \"Endpoints\": [1],\n            \"Config\": [\"O01\", \"L01.2\"],\n            \"Power\": 1,\n            \"Dimmer\": 160,\n            \"X\": 30138,\n            \"Y\": 26909,\n            \"CT\": 350,\n            \"ColorMode\": 2,\n            \"RGB\": \"FFC773\",\n            \"RGBb\": \"A17E49\",\n            \"Reachable\": true,\n            \"LastSeen\": 353,\n            \"LastSeenEpoch\": 1658349178,\n            \"LinkQuality\": 79\n        }\n    }\n}\n18:38:51.570 MQT: tele/xxxx/SENSOR = \n{\n    \"ZbInfo\": {\n        \"0x8959\": {\n            \"Device\": \"0x8959\",\n            \"Name\": \"Plug\",\n            \"IEEEAddr\": \"0x7CB03EAA0A0292DD\",\n            \"ModelId\": \"Plug 01\",\n            \"Manufacturer\": \"OSRAM\",\n            \"Endpoints\": [3],\n            \"Config\": [\"L03.0\", \"O03\"],\n            \"Dimmer\": 254,\n            \"Power\": 0,\n            \"Reachable\": false,\n            \"LastSeen\": 145,\n            \"LastSeenEpoch\": 1641742232,\n            \"LinkQuality\": 147\n        }\n    }\n}\n</code></pre> <p>Most common attributes:</p> Attribute Description Device Zigbee device short address Name Friendly name IEEEAddr Zigbee device long address (does not change after new pairing) ModelID Zigbee Model name as configured by manufacturer (cannot be changed) Manufacturer Manufacturer name Endpoints List of endpoints Config (used internally) (attributes) attributes tracked by Z2T LastSeen Number of seconds since the last message was received LastSeenEpoch Timestamp when the last message was received LinkQuality Radio power of the last message received"},{"location":"Zigbee/#advanced-topic-sending-sensor-values-to-separated-mqtt-topics","title":"Advanced topic: Sending sensor values to separated MQTT topics","text":"<p>It is possible to publish the sensor values to their own MQTT topic. For this functionality the following rule can be applied in the console:</p> <pre><code>Rule&lt;x&gt;\n  on zbreceived#&lt;zigbee_id&gt;#&lt;zigbee_sensorname&gt; do publish home/zigbee/&lt;zigbee_name&gt;/&lt;sensorname&gt; %value% endon\n\nRule&lt;x&gt; 1\n</code></pre> <p>For example: <pre><code>Rule1\n  on zbreceived#0xAA7C#humidity do publish home/zigbee/office/humidity %value% endon\n  on zbreceived#0xAA7C#temperature do publish home/zigbee/office/temperature %value% endon\n\nRule1 1\n</code></pre></p> <p>If retained values are preferred use publish2 instead of publish.</p>"},{"location":"Zigbee/#understanding-zigbee-messages","title":"Understanding Zigbee messages","text":"<p>There are 2 main types of Zigbee messages, commands and reading/writing attributes.</p> <p>For example, you can send a command <code>\"Power\":1</code> to turn a bulb on or <code>\"Power\":0</code> to turn it off.</p> <p>Simultaneously you can read the <code>\"Power\"</code> attribute to know the state of the bulb.</p> <p>Some attributes are writable, but this corresponds to a change of configuration of the device. You generally can't change the status of a device writing to attributes, you need to use commands instead.</p> <p>Internally, Zigbee uses low-level identifiers and Z2T provides human readable versions for the main attributes and commands. In the example above, although the command and the attribute have the same name <code>\"Power\"</code>, they have different low-lever identifiers.</p>"},{"location":"Zigbee/#operations-on-attributes-and-commands","title":"Operations on attributes and commands","text":"<p>Below are the possible Zigbee messages (we consider here messages between the coordinator and the Zigbee device):</p> <ul> <li> <p>Read attribute(s): send a 'read-attribute' message to the Zigbee device, the device then responds with the value of the attributes it supports. Ex: read the current brightness of a bulb or a sensor. <code>ZbSend {\"Device\":\"&lt;device&gt;\", \"Read\":{...}}</code></p> </li> <li> <p>Write attribute(s): send a 'write-attribute' message to the Zigbee device with a value, the device confirms or sends an error. Ex: change the sensitivity of an illuminance sensor. <code>ZbSend {\"Device\":\"&lt;device&gt;\", \"Write\":{...}}</code></p> </li> <li> <p>Report attribute(s): Zigbee device may spontaneously report attributes without polling. This happens typically with sensors. New attribute values are sent after a certain time or when the value changes above a threshold.</p> </li> <li> <p>Send a command: send a command to a Zigbee device, ex: turn on a bulb, change its color... <code>ZbSend {\"Device\":\"&lt;device&gt;\", \"Send\":{...}}</code></p> </li> <li> <p>Receive a command: Zigbee device may send commands to the coordinator (less frequent). Ex: an alarm sensor sends an 'Intruder Alert' command to the coordinator.</p> </li> </ul> <p>When a command is sent or an attribute is written to a device, the device may or may not acknowledge. However it will always report an error if the message is malformed or if some attributes/commands are not supported.</p>"},{"location":"Zigbee/#sleeping-devices","title":"Sleeping devices","text":"<p>Devices connected to mains (smart plugs, smart bulbs...) are always reachable and can accept Zigbee messages at any time.</p> <p>Devices that are powered by batteries are not always reachable. Most of the time they are in sleep mode and not reachable. They regularly connect back to the coordinator to send new values and get messages (ex: once per hour). When you need to send messages to battery-powered devices, you must first wake them up, for example pressing on a button. The device may stay awake for only a couple of seconds, so you must send the message just before or just after pressing the button on the device.</p>"},{"location":"Zigbee/#configure-reporting","title":"Configure Reporting","text":"<p>Devices normally report their status when the value changes. They can also report the state within certain intervals, to configure this the command ZbSend is used.</p> <p>Example for setting the reporting interval for a smart plug to always report the state, regardless if it has changed or not: <pre><code>ZbSend {\"Device\": \"MySmartPlug1\", \"Config\":{\"Power\":{\"MinInterval\":30, \"MaxInterval\": 50, \"ReportableChange\": 0}}}\n</code></pre> Example for setting the reporting interval for a Parasoll-door-sensor to always report the state (keep sensor awake when sending this by triggering it): <pre><code>ZbSend {\"Device\": \"myDoorSensorSwitch\", \"Endpoint\": 2, \"Config\": {\"0500/0002\": {\"MinInterval\": 60, \"MaxInterval\": 120, \"ReportableChange\": 0}}}\n</code></pre></p>"},{"location":"Zigbee/#advanced-topic-endpoints-and-clusters","title":"Advanced topic: Endpoints and Clusters","text":"<p>An endpoint supports different functions separated in clusters, and a device can have multiple endpoints to do different things. To simplify, think of your Zigbee device as a normal Tasmota device with a Zigbee radio instead of Wi-Fi. Each endpoint is akin to a GPIO that has connected Components or Clusters, in Zigbee terms.</p> <p>Cluster definitions in relation to their endpoint are determined by Zigbee Alliance. Not all manufacturers followed the proposed allocations but in general it is a cornerstone document.</p> <p>Z2T will automatically take the first endpoint in the list which works most of the time. You normally don't need to specify the endpoint number. In rare cases, you can force a specific endpoint.</p>"},{"location":"Zigbee/#reading-sensors","title":"Reading Sensors","text":"<p>Most sensors will publish their readings regularly or once a significant change has happened: temperature, pressure, humidity, presence, illuminance...</p> <p>Sensor messages are published via MQTT when they are received from the Zigbee device. Similar to Zigbee2MQTT, Z2T tries to group and debounce sensor values when they are received within a 350ms window (can be change with <code>USE_ZIGBEE_COALESCE_ATTR_TIMER</code> compile option).</p> <p>Aqara Temperature &amp; Humidity Sensor</p> <p></p> <p>This sensor monitors humidity, temperature, and air pressure.  Its Zigbee model ID is <code>lumi.weather</code>.</p> <p>This device publishes sensor values roughly every hour or when a change occurs. You can also force an update pressing the device's button. It sends two kinds of messages, either 3x standard Zigbee messages, or a single proprietary message containing all sensor values.</p> <p><code>0x8F20</code> is the ShortAddress of the sensor, and its name is <code>Kitchen</code> if you used <code>ZbName 0x8F20,Kithchen</code>.</p> <pre><code>MQT: tele/%topic%/SENSOR ={\"ZbReceived\": {\"0x8F20\": {\"Name\": \"Kitchen\", \"Voltage\": 2.995, \"Battery\": 98, \"Temperature\": 21.01, \"Humidity\": 53.68, \"Pressure\": 1004.04, \"PressureUnit\": \"hPa\", \"Endpoint\": 1, \"LinkQuality\": 88}}\n</code></pre> <p>or prefixed by name if you set <code>SetOption83 1</code></p> <pre><code>MQT: tele/%topic%/SENSOR ={\"ZbReceived\": {\"Kitchen\": {\"Device\": \"0x8F20\", \"Voltage\": 2.995, \"Battery\": 98, \"Temperature\": 21.01, \"Humidity\": 53.68, \"Pressure\": 1004.04, \"PressureUnit\": \"hPa\", \"Endpoint\": 1, \"LinkQuality\": 88}}\n</code></pre> <p>Topic is device specific, to allow more effective retained messages, if you set <code>SetOption89 1</code></p> <pre><code>MQT: tele/%topic%/8F20/SENSOR ={\"ZbReceived\": {\"Kitchen\": {\"Device\": \"0x8F20\", \"Voltage\": 2.995, \"Battery\": 98, \"Temperature\": 21.01, \"Humidity\": 53.68, \"Pressure\": 1004.04, \"PressureUnit\": \"hPa\", \"Endpoint\": 1, \"LinkQuality\": 88}}\n</code></pre> <p>Supported values:</p> Field name Value <code>LinkQuality</code> Strength of the Zigbee signal, between 1 and 254 (integer). See this ZigBee and WiFi Coexistence <code>Humidity</code> Humidity in percentage (float) <code>Pressure</code> and <code>PressureUnit</code> Atmospheric pressure (float) and unit (string)Currently only <code>hPa</code> (A.K.A. mbar) is supported <code>Temperature</code> Temperature in Celsius (float) <code>Voltage</code> Battery voltage (float) <code>Battery</code> Battery charge in percentage (integer) <code>ModelId</code> Model name of the Zigbee device (string)Ex: <code>lumi.weather</code> <code>ScaledValue</code> and <code>Scale</code> Give the raw measure and the scale correction as 10^scale And many more... <p>If a value is not decoded, it will appear as <code>\"&lt;cluster&gt;_&lt;attr&gt;\":&lt;value&gt;</code> where <code>&lt;cluster&gt;</code> is the Zigbee ZCL Cluster of the attribute (family), <code>&lt;attr&gt;</code> is the attribute number and <code>&lt;value&gt;</code> its published value.</p> <p>Example</p> <p><code>\"0402_0000\":2240</code> is attribute 0x0000 from cluster 0x0402, which is the temperature in hundredth of \u00b0C. It is automatically converted to <code>\"Temperature\":22.40</code>.</p>"},{"location":"Zigbee/#sending-device-commands","title":"Sending Device Commands","text":"<p>You can send commands to a device or groups of devices similar to a normal Tasmota command. For example to turn on a light or switch off a plug.</p> <p>Here is a list of supported commands, see below how to send any unlisted command.</p> Command Parameters Cluster number Power <code>1</code> or <code>true</code> or <code>\"true\"</code> or <code>\"on\"</code>: On  <code>0</code> or <code>false</code> or <code>\"false\"</code> or <code>\"off\"</code>: Off  <code>2</code> or <code>\"toggle\"</code>: Toggle 0x0006 Dimmer <code>0..254</code>: Dimmer value255 is normally considered as invalid, and may be converted to 254 0x0008 DimmerUp <code></code>: no parameter. Increases dimmer by 10% 0x0008 DimmerDown <code></code>: no parameter. Decreases dimmer by 10% 0x0008 DimmerStop <code></code>: no parameter. Stops any running increase of decrease of dimmer. 0x0008 ResetAlarm <code>&lt;alarmcode&gt;,&lt;clusterid&gt;</code>: (to be documented later) 0x0009 ResetAllAlarms <code></code>: no parameter, (to be documented later) 0x0009 Hue <code>0..254</code>: change Hue value 0x0300 Sat <code>0..254</code>: change Sat value 0x0300 HueSat <code>0..254,0..254</code>: change both Hue and Sat values 0x0300 Color <code>0..65534,0..65534</code>: change the color using [x,y] coordinates 0x0300 CT <code>0..65534</code>: change the white color-temperature in mireds 0x0300 Shutter <code>0..254</code>: send any Shutter command (prefer the commands below) 0x0102 ShutterOpen <code></code>: no parameter, open shutter 0x0102 ShutterClose <code></code>: no parameter, close shutter 0x0102 ShutterStop <code></code>: no parameter, stop shutter movement 0x0102 ShutterLift <code>0..100</code>: move shutter to a specific position in percent<code>0</code>%=open, <code>100</code>%=closed 0x0102 ShutterTilt <code>0..100</code>: move the shutter to the specific tilt position in percent 0x0102 <p>The format of the command is following:</p> <p><code>ZbSend {\"Device\":\"&lt;device&gt;\",\"Send\":{\"&lt;sendcmd&gt;\":&lt;sendparam&gt;}}</code> where<code>&lt;device&gt;</code>identifies the target and can be a shortaddr <code>0x1234</code>, a longaddr <code>0x1234567812345678</code> or a friendly name <code>Kitchen</code>. <code>\"&lt;sendcmd&gt;\":&lt;sendparam&gt;</code> is the command and its parameters from the table.</p> <p>If the device has been correctly paired and its endpoints recorded by Z2T, you shouldn't need to specify a target endpoint. You can use an option <code>\"endpoint\":&lt;endpoint&gt;</code> parameter if Z2T can't find the correct endpoint or if you want to change from the default endpoint.</p> <p>MQTT command example</p> <p>Topic = <code>cmnd/ZigbeeGateway/ZbSend</code> Payload = <code>{\"Device\":\"0x1234\",\"Send\":{\"Power\":0}}</code> or <code>{\"Device\":\"0x1234\",\"Write\":{\"Power\":0}}</code></p>"},{"location":"Zigbee/#low-level-commands","title":"Low-level Commands","text":"<p>There is a special syntax if you want to send arbitrary commands: <code>\"Send\":\"&lt;send_bytes&gt;\"</code> where <code>&lt;send_bytes&gt;</code> has the following syntax:</p> <p><code>\"&lt;cluster&gt;_&lt;cmd&gt;/&lt;bytes&gt;\"</code>: send a non-cluster specific command for cluster id <code>&lt;cluster&gt;</code>, command id <code>&lt;cmd&gt;</code> and payload <code>&lt;bytes&gt;</code>.</p> <p>Example</p> <p><code>ZbSend {\"Device\":\"0x1234\",\"Send\":\"0000_00/0500\"}</code>  Send a Read command (0x00) to the general cluster (0x0000) for attribute ManufId (0x0005). Note: all values are little-endian.</p> <p>Or use <code>'!'</code> instead of <code>'_'</code> to specify cluster-specific commands:</p> <p><code>\"&lt;cluster&gt;!&lt;cmd&gt;/&lt;bytes&gt;\"</code>: send a cluster specific command for cluster id <code>&lt;cluster&gt;</code>, command id <code>&lt;cmd&gt;</code> and payload <code>&lt;bytes&gt;</code>.</p> <p>Example</p> <p><code>ZbSend {\"Device\":\"0x1234\",\"Send\":\"0008!04/800A00\"}</code> Send a Dimmer command (0x04) from Level Control cluster (0x0008) with payload being: Dimmer value 0x80, and transition time of 1 second (0x000A = 10 tenths of seconds).</p> <p>Of course the latter example could be simply: <code>ZbSend {\"Device\":\"0x1234\",\"Send\":{\"Dimmer\":\"0x80\"}</code></p>"},{"location":"Zigbee/#examples","title":"Examples","text":""},{"location":"Zigbee/#plug","title":"Plug","text":"<pre><code>ZbSend { \"device\":\"0x4773\", \"send\":{\"Power\":\"On\"} }\nZbSend { \"device\":\"0x4773\", \"send\":{\"Power\":1} }\nZbSend { \"device\":\"0x4773\", \"send\":{\"Power\":false} }\nZbSend { \"device\":\"0x4773\", \"send\":{\"Power\":\"Toggle\"} }\n</code></pre> <p>Read the On/Off status: (all three commands below are synonyms)</p> <pre><code>ZbSend { \"device\":\"0x4773\", \"endpoint\":\"0x03\", \"cluster\":\"0x0006\", \"read\":\"0x0000\" }\nZbSend { \"device\":\"0x4773\", \"endpoint\":\"0x03\", \"cluster\":\"0x0006\", \"read\":[\"0x0000\"] }\nZbSend { \"device\":\"0x4773\", \"endpoint\":3, \"cluster\":6, \"read\":0 }\n</code></pre> <pre><code>MQT: tele/tasmota/SENSOR = {\"ZbReceived\":{\"0x4773\":{\"Power\":true,\"LinkQuality\":52}}}\n</code></pre>"},{"location":"Zigbee/#bulb","title":"Bulb","text":"<pre><code>ZbSend { \"device\":\"0x3D82\", \"send\":{\"Power\":\"Off\"} }\nZbSend { \"device\":\"0x3D82\", \"send\":{\"Dimmer\":128} }\nZbSend { \"device\":\"0x3D82\", \"send\":{\"Dimmer\":254} }\nZbSend { \"device\":\"0x3D82\", \"endpoint\":\"0x0B\", \"send\":{\"Dimmer\":0} }\n</code></pre>"},{"location":"Zigbee/#receiving-commands","title":"Receiving Commands","text":"<p>If you pair devices such as switches or remotes, you will also receive commands from those devices.</p> <p>When a command is received, attributes are published both in their low-level and high-level formats (if known).</p> <p>Low level format is the following: <code>\"&lt;cluster&gt;!&lt;cmd&gt;\":\"&lt;payload\"</code></p> <p>IKEA On/Off Switch</p> <p><code>{\"ZbReceived\":{\"0x3476\":{\"Device\":\"0x3476\",\"Name\":\"ikea_switch\",\"0006!01\":\"\",\"Power\":1,\"Endpoint\":1,\"LinkQuality\":134}}}</code></p> <p>The command received <code>\"0006!01\":\"\"</code> is Power On (0x01) from On/Off cluster (0x0006) with no payload. It is also translated as <code>\"Power\":1</code>. <code>\"Endpoint\":1</code> tells you from which endpoint the command was sent.</p>"},{"location":"Zigbee/#light-state-tracking","title":"Light State Tracking","text":"<p>Once Z2T receives a command related to a light (Power, Dimmer, Color, ColorTemp), it sends right after a Read command to get the actual state of the light. This is used for Hue Emulation and Alexa support. The final attributes are read betwenn 200ms and 1000ms later, to allow for the light to achieve its target state.</p> <p>Example</p> <pre><code>16:02:04 MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_remote\":{\"Device\":\"0xF72F\",\"0006!02\":\"\",\"Power\":2,\"Endpoint\":1,\"Group\":100,\"LinkQuality\":75}}}\n16:02:05 MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"Power\":true,\"Endpoint\":1,\"LinkQuality\":80}}}\n16:02:06 MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_remote\":{\"Device\":\"0xF72F\",\"0008!06\":\"002B0500\",\"DimmerUp\":true,\"Endpoint\":1,\"Group\":100,\"LinkQuality\":75}}}\n16:02:08 MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"Dimmer\":102,\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre>"},{"location":"Zigbee/#example","title":"Example","text":"<p>Ikea Tradfri Remote received commands:</p> <ul> <li>Short press center button - <code>\"0006!02\":\"\"</code> and <code>\"Power\":2</code></li> <li>Short press dimmer up - <code>\"0008!06\":\"002B0500\"</code> and <code>\"DimmerUp\":true</code></li> <li>Short press dimmer down - <code>\"0008!02\":\"012B05000000\"</code> and <code>\"DimmerStep\":1</code></li> <li>Short press arrow right - <code>\"0005!07\":\"00010D00\"</code> and <code>\"ArrowClick\":0</code></li> <li>Short press arrow left - <code>\"0xF72F\",\"0005!07\":\"01010D00\"</code> and <code>\"ArrowClick\":1</code></li> <li>Long press dimmer up - <code>\"0008!05\":\"0054\"</code> and <code>\"DimmerMove\":0</code></li> <li>Long press dimmer up release - <code>\"0008!07\":\"\"</code> and <code>\"DimmerStop\":true</code></li> <li>Long press dimmer down - <code>\"0008!01\":\"01540000\"</code> and <code>\"DimmerMove\":1</code></li> <li>Long press dimmer down release - <code>,\"0008!03\":\"0000\"</code> and <code>\"DimmerStop\":true</code></li> </ul>"},{"location":"Zigbee/#zigbee-binding","title":"Zigbee Binding","text":"<p>Binding allows a device to send command to another device in the same Zigbee network, without any additional logic. For example, you can set a remote to control directly a group of lights, without any rules on the coordinator. The coordinator will still receive all commands.</p> <p>Example of direct binding <code>ZbBind {\"Device\":\"0xC2EF\",\"ToDevice\":\"0x5ADF\",\"Endpoint\":1,\"ToEndpoint\":1,\"Cluster\":6}</code></p> <p>This command links the device <code>0xC2EF</code> that will send all commands for cluster <code>6</code> (On/off cluster) from endpoint <code>1</code> to the target device <code>0x5ADF</code> on endpoint <code>1</code>.</p> <p>Example of group binding <code>ZbBind {\"Device\":\"0xC2EF\",\"ToGroup\":100,\"Endpoint\":1,\"Cluster\":6}</code></p> <p>This command links the device <code>0xC2EF</code> that will send all commands for cluster <code>6</code> (On/off cluster) and from endpoint <code>1</code> to the group <code>100</code>.</p> <p>Response in case of success <pre><code>MQT: tele/%topic%/RESULT = {\"ZbBind\":{\"Device\":\"0xF72F\",\"Name\":\"IKEA_Remote\",\"Status\":0,\"StatusMessage\":\"SUCCESS\"}}\n</code></pre></p>"},{"location":"Zigbee/#example-ikea-remote-and-ikea-light","title":"Example: IKEA remote and IKEA Light","text":"<p>IKEA remotes only support 1 group and can be linked to a light only via group numbers (no direct binding).</p> <ol> <li> <p>Add the light to group 100 <code>ZbSend {\"device\":\"IKEA_Light\",\"Send\":{\"AddGroup\":100}}</code></p> </li> <li> <p>Bind the remote to group 100. Note: you need to press a button on the remote right before sending this command to make sure it's not in sleep mode <code>ZbBind {\"Device\":\"IKEA_Remote\",\"ToGroup\":100,\"Endpoint\":1,\"Cluster\":6}</code></p> </li> </ol>"},{"location":"Zigbee/#zigbee-groups","title":"Zigbee Groups","text":"<p>Zigbee has a unique feature called Groups. It allows you to send a single command to a group of devices. For example: a remote can control a group of multiple lights when grouped.</p> <p>Zigbee groups are 16 bits arbitrary numbers that you can freely assign. When you send to a group, you don't specify a target address anymore, nor an endpoint.</p> <p>Groups works in two steps: first you add devices to groups, second you send commands to groups. See Zigbee Binding on how to configure a remote to send commands to a specific group.</p> <p>Configuring groups for devices requires sending commands. Make sure the device is powered and awake (wake-up battery powered devices).</p>"},{"location":"Zigbee/#list-all-groups-for-a-device","title":"List all groups for a device","text":"<p><code>ZbSend {\"device\":\"IKEA_Light\",\"Send\":{\"GetAllGroups\":true}}</code></p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;02\":\"FF00\",\"GetGroupCapacity\":255,\"GetGroupCount\":0,\"GetGroup\":[],\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre> <p>The following response tells you: <code>\"GetGroupCount\":1</code> the light belongs to one group <code>\"GetGroup\":[100]</code> and the group number is <code>100</code>.</p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;02\":\"FF016400\",\"GetGroupCapacity\":255,\"GetGroupCount\":1,\"GetGroup\":[100],\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre>"},{"location":"Zigbee/#assign-a-group-to-a-device","title":"Assign a group to a device","text":"<p><code>ZbSend {\"device\":\"IKEA_Light\",\"Send\":{\"AddGroup\":100}}</code></p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;00\":\"006400\",\"AddGroup\":100,\"AddGroupStatus\":0,\"AddGroupStatusMsg\":\"SUCCESS\",\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre> <p>Or if the group already exists:</p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;00\":\"8A6400\",\"AddGroup\":100,\"AddGroupStatus\":138,\"AddGroupStatusMsg\":\"DUPLICATE_EXISTS\",\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre>"},{"location":"Zigbee/#remove-a-group","title":"Remove a group","text":"<p><code>ZbSend {\"device\":\"IKEA_Light\",\"Send\":{\"RemoveGroup\":100}}</code></p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;03\":\"006400\",\"RemoveGroup\":100,\"RemoveGroupStatus\":0,\"RemoveGroupStatusMsg\":\"SUCCESS\",\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre> <p>or if the group does not exist</p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbReceived\":{\"IKEA_Light\":{\"Device\":\"0x5ADF\",\"0004&lt;03\":\"8B6400\",\"RemoveGroup\":100,\"RemoveGroupStatus\":139,\"RemoveGroupStatusMsg\":\"NOT_FOUND\",\"Endpoint\":1,\"LinkQuality\":80}}}\n</code></pre>"},{"location":"Zigbee/#remove-all-groups","title":"Remove all groups","text":"<p><code>ZbSend {\"device\":\"IKEA_Light\",\"Send\":{\"RemoveAllGroups\":true}}</code></p> <pre><code>MQT: tele/%topic%/SENSOR = {\"ZbResponse\":{\"Device\":\"0x5ADF\",\"Name\":\"IKEA_Light\",\"Command\":\"0004!04\",\"Status\":0,\"StatusMessage\":\"SUCCESS\",\"Endpoint\":1,\"LinkQuality\":80}}\n</code></pre>"},{"location":"Zigbee/#sending-commands-to-a-group","title":"Sending commands to a group","text":"<p>Just use the attribute <code>\"Group\":&lt;group_id&gt;</code> instead of <code>\"Device\":&lt;device&gt;</code> when sending a command.</p> <p>Example:</p> <ul> <li>power on all light in group 100: <code>ZbSend {\"group\":100,\"Send\":{\"Power\":1}}</code></li> <li>set all dimmers in group 100 to 50%: <code>ZbSend {\"group\":100,\"Send\":{\"Dimmer\":127}}</code></li> </ul>"},{"location":"Zigbee/#zigbee-and-hue-emulation-for-alexa","title":"Zigbee and Hue Emulation for Alexa","text":"<p>Z2T now supports Hue Emulation for Zigbee lights. It will mimic most of Zigbee gateways, and allows you to control Zigbee lights directly with Alexa, without any MQTT broker nor Alexa skill.</p> <p>Command <code>ZbLight</code> configures a Zigbee device to be Alexa controllable. Specify the number of channels the light supports:</p> <ul> <li><code>0</code> Simple On/Off light</li> <li><code>1</code> White Light with Dimmer</li> <li><code>2</code> White Light with Dimmer and Cold/Warm White</li> <li><code>3</code> RGB Light</li> <li><code>4</code> RGBW Light</li> <li><code>5</code> RGBCW Light, RGB and  Cold/Warm White</li> </ul> <p>To set the light, use <code>ZbLight &lt;device&gt;,&lt;nb_of_channels</code>. Ex: <pre><code>ZbLight 0x1234,2\nZbLight Kitchen_Light,1   (see ZbName)\n</code></pre></p> <p>Once a light is declared, Z2T will monitor any change made to the light via Z2T or via remotes, either from a direct message or via a group message. Z2T will then send a read command to the light, between 200ms and 1000ms later, and memorize the last value.</p> <p>To read the last known status of a light, use <code>ZbLight &lt;device&gt;</code></p> <p>Example</p> <p><code>ZbLight Kitchen_Light</code></p> <pre><code>MQT: stat/%topic%/RESULT = {\"ZbLight\":{\"Kitchen_Light\":{\"Device\":\"0x5ADF\",\"Light\":2,\"Power\":0,\"Dimmer\":130,\"Colormode\":2,\"CT\":350}}}\n</code></pre>"},{"location":"Zigbee/#specific-device-configuration","title":"Specific Device Configuration","text":"<p>If your device pairs successfully with Zigbee2Tasmota but doesn't report on standardised endpoints you will see messages similar to: <code>{\"ZbReceived\":{\"0x099F\":{\"0500!00\":\"010000FF0000\",\"LinkQuality\":70}}}</code> <code>{\"ZbReceived\":{\"0x7596\":{\"0006!01\":\"\",\"LinkQuality\":65}}}</code></p> <p>In this case you will have to use rules or an external home automation solution to parse those messages. The following section will focus only on rules to utilize the device inside Tasmota ecosystem.</p>"},{"location":"Zigbee/#aqara-water-leak-sensor","title":"Aqara Water Leak Sensor","text":"<p><code>\"ModelId\":\"lumi.sensor_wleak.aq1\"</code></p> <p>In this example sensor reports on <code>0x099F</code> and sends an mqtt message to topic <code>stat/leak_sensor/LEAK</code>:</p> <pre><code>Rule\n  on ZbReceived#0x099F#0500!00=010000FF0000 do publish stat/leak_sensor/LEAK ON endon\n  on ZbReceived#0x099F#0500!00=000000FF0000 do publish stat/leak_sensor/LEAK OFF endon\n</code></pre>"},{"location":"Zigbee/#aqara-vibration-sensor","title":"Aqara Vibration Sensor","text":"<p><code>\"ModelId\":\"lumi.vibration.aq1\"</code></p> <p>To modify sensor sensitivity use command. Replace <code>\"device\"</code> with your own device name: <pre><code># for high sensitivity\nZbSend {\"device\":\"vibration\",\"Endpoint\":1,\"Cluster\":0,\"Manuf\":\"0x115F\",\"Write\":{\"0000/FF0D%20\":\"0x01\"}}\n# for medium sensitivity\nZbSend {\"device\":\"vibration\",\"Endpoint\":1,\"Cluster\":0,\"Manuf\":\"0x115F\",\"Write\":{\"0000/FF0D%20\":\"0x0B\"}}\n# for low sensitivity\nZbSend {\"device\":\"vibration\",\"Endpoint\":1,\"Cluster\":0,\"Manuf\":\"0x115F\",\"Write\":{\"0000/FF0D%20\":\"0x15\"}}\n</code></pre> Command needs to be issued shortly after pressing the device button. There will be no response to the command but you can check if the new option is active by using</p> <p><pre><code>ZbSend {\"Device\":\"vibration\",\"Endpoint\":1,\"Cluster\":0,\"Manuf\":\"0x115F\",\"Read\":\"0xFF0D\"}\n</code></pre> Received response will be : <pre><code>{\"ZbReceived\":{\"vibration\":{\"Device\":\"0x0B2D\",\"Name\":\"vibration\",\"0000/FF0D\":1,\"Endpoint\":1,\"LinkQuality\":72}}}\n</code></pre> <code>\"0000/FF0D\"</code> is the key, value <code>1</code> is high sensitivity, <code>11</code> medium and <code>21</code> is low.</p>"},{"location":"Zigbee/#osramledvance-smart-switch-mini","title":"Osram/Ledvance Smart+ Switch Mini","text":"<p><code>\"ModelId\":\"Lightify Switch Mini\"</code></p> <p>To pair the Smart+ Switch Mini with the Bridge you need to hold <code>Arrow Up</code> and <code>Middle Button</code> for 3 seconds. Each Button is linked to another Endpoint. <code>Arrow Up</code>is Endpoint 1, <code>Arrow Down</code> is Endpoint 2 and <code>Middle Button</code>is Endpoint 3. To link the Smart+ Switch Mini with IKEA Tradfri dimmable lights, I used the following commands</p> <p>The IKEA light needs to be <code>Group 100</code>for this example. <pre><code># for Power On and Power Off\nZbBind {\"Device\":\"Name\",\"ToGroup\":100,\"Endpoint\":1,\"Cluster\":6}\nZbBind {\"Device\":\"Name\",\"ToGroup\":100,\"Endpoint\":2,\"Cluster\":6}\n# for dimming\nZbBind {\"Device\":\"Name\",\"ToGroup\":100,\"Endpoint\":1,\"Cluster\":8}\nZbBind {\"Device\":\"Name\",\"ToGroup\":100,\"Endpoint\":2,\"Cluster\":8}\n</code></pre></p>"},{"location":"Zigbee/#sandy-beachtuya-thermostatic-radiator-valve-ts0601","title":"Sandy Beach/Tuya Thermostatic Radiator Valve (TS0601)","text":"<p>To pair the TRV to the Bridge you need to press and hold the Auto/Manual (8 o'clock position) and the Comfort/Energy Saving (4 o'clock position) buttons at the same time until the signal indicator flashes. The Bridge will then automatically find the following useful parameters</p> <pre><code>Ambient temperature (C)     (LocalTemperature)\n\nTemperature set point (C)   (TuyaTempTarget)\n\nValve position (0-100%)     (TuyaValvePosition)\n</code></pre> <p>To set the Temperature Set Point use <pre><code>ZbSend {\"Device\": \"0xXXXX\", \"Write\":{\"TuyaTempTarget\":XX}}\n</code></pre> The 'Device' can be the DeviceID 0x0000 or the ZbName so if a device has been named <pre><code>ZbName 0x1234,Utility\nZbSend {\"Device\": \"0x1234\", \"Write\":{\"TuyaTempTarget\":20}}\n</code></pre> and <pre><code>ZbSend {\"Device\": \"Utility\", \"Write\":{\"TuyaTempTarget\":20}}\n</code></pre> will set the TRV setpoint to 20C. Other commands will be available and will be added when clarified.</p>"},{"location":"Zigbee/#advanced-topic-zigbee-device-plugin","title":"Advanced Topic: Zigbee Device Plugin","text":"<p>Zigbee2Tasmota supports most common and standard attributes from ZCL, see here.</p> <p>But creativity of manufacturers is limitless. Some manufacturers make mistakes compared to the Zigbee ZCL standard (maybe because their developers didn't read the specifications thoroughly), and others invent their own standards - ex: TuyA devices sometimes use a encapsulation of TuYa Serial protocol in Zigbee.</p> <p>The Zigbee plug-in mechanisms is composed of simple text files to describe device-specific non-standard attributes or non-standard mapping of values.</p> <p>You simply need to copy the required file(s) in the coordinator's filesystem and restart. You should see logs similar to the following after Zigbee has started.</p> <pre><code>ZIG: Zigbee started\nZIG: Zigbee device information found in File System (1 devices - 48 bytes)\nZIG: Zigbee device data in File System (20 bytes)\nZIG: ZbLoad '&lt;internal_plugin&gt;' loaded successfully\nZIG: ZbLoad 'TS0001_switch.zb' loaded successfully\n</code></pre>"},{"location":"Zigbee/#writing-zigbee-plugins","title":"Writing Zigbee plugins","text":"<p>A Zigbee plugin file needs to have <code>.zb</code> extension and start with the first line:</p> <pre><code>#Z2Tv1\n</code></pre> <p>The plugin file has 3 types of declarations:</p> <ul> <li>a device match pattern, specifies which <code>model</code> and/or <code>manufacturer</code> identifiers to match</li> <li>an attribute definition, defines a new attribute name</li> <li>an attribute synonym, remaps the incoming attribute to a new attribute (or the same) and applies multiplier/divisor</li> <li><code>#</code> is a marker for comments, and everything from <code>#</code> to end of line is ignored</li> </ul> <p>Note: Zigbee plugins currently only handles Zigbee attributes (read, write, report) but not Zigbee commands which can't be remapped. There hasn't been any need for command remapping but who knows...</p>"},{"location":"Zigbee/#matching-a-device-or-a-family-of-devices","title":"Matching a device or a family of devices","text":"<p>A plugin section needs to start with one or more matching patterns. All the following statements share the same matching pattern until a new pattern appears.</p> <p>A pattern is of form: <code>:&lt;modelid&gt;,&lt;manufecturerid&gt;</code>. Possible values are:</p> <ul> <li>\"match all\", if empty the pattern matches all devices</li> <li>\"exact match\", if a value is provided, the model or manufacturer value must exactly match</li> <li>\"starts with\", if a value ends with <code>*</code>, any value starting with this value macthes</li> </ul> <p>Example:</p> Pattern Description <code>:,</code> Matches all devices <code>:TRADFRI*,</code><code>:SYMFONISK*,</code> Matches any device with ModelID starting with <code>TRADFRI</code> or <code>SYMFONISK</code> <code>:TS0201,_TZ3000_ywagc4rj</code> Match only if DeviceID is <code>TS0201</code> and ManufacturerID is <code>_TZ3000_ywagc4rj</code> <p>Only the first succesful match is applied, all subsequent statements are ignored. You may need to adjust the order of files if priority is needed between plugins</p>"},{"location":"Zigbee/#defining-a-new-attribute","title":"Defining a new attribute","text":"<p>You can define or overwrite an attribute name for a specific cluser/attributeid, and apply optional multiplier/divider.</p> <p>The format is:</p> <p><code>&lt;cluster&gt;/&lt;attributeid&gt;[%&lt;type&gt;],&lt;name&gt;[,mul:&lt;mul&gt;][,div:&lt;div&gt;][,add:&lt;add&gt;][,manuf:&lt;manuf&gt;]</code></p> Parameter Description <code>&lt;cluster&gt;</code> Cluster number in 4 digits hexExample: <code>0006</code> for cluster 6 <code>&lt;attributeid&gt;</code> Attribute identifier in 4 digits hexExample: <code>0001</code> for attribute id 1 <code>%&lt;type&gt;</code> (optional) Type of the attribute either in 2 digits hex format or using the Zigbee type nameExample: <code>%21</code> or <code>%uint16</code> <code>mul:&lt;mul&gt;</code> (optional) <code>1..65535</code>: Apply a multiplier to the value received <code>div:&lt;div&gt;</code> (optional) <code>1..65535</code>: Apply a divider to the value received (after the multiplier is applied) <code>add:&lt;add&gt;</code> (optional) <code>-36278..32767</code>: Add/substract a value (after multiplier and divider are applied) <code>manuf:&lt;manuf&gt;</code> (optional) Add a manufacturer specific code in 4 digits hex <p>When a value is received, the following formula is applied (computed using integers):</p> <p><code>new_val = add + (val * mul) / div</code></p> <p>The inverse formula is applied when writing back an attribute. Beware of rounding errors.</p> <p>Special case of Tuya attributes (cluster <code>0xEF00</code>)</p> <p>For attributes from the Tuya cluster <code>0xEF00</code> the attribute has the form <code>AABB</code> where <code>AA</code> is the type and <code>BB</code> is the <code>dpid</code>. If you only care about receiving attributes, you can use <code>FF</code> as a type so Tasmota accepts any value. To be able to write the attribute, the type must be specified.</p> <p>Example: <code>EF00/FF02</code> accepts any value for <code>dpip</code> <code>2</code>, while <code>EF00/0202</code> specifies the type <code>02</code> for this <code>dpid</code>. The regular Zigbee type <code>%&lt;type&gt;</code> is unused with Tuya attributes.</p> Tuya type Description <code>00</code> raw bytes decoded as hex (n bytes) <code>01</code> bool (1 byte) <code>02</code> int32 (4 bytes) <code>03</code> string (n bytes) <code>04</code> enum (1 byte) <code>05</code> bitmap (1/2/4 bytes)"},{"location":"Zigbee/#defining-an-attribute-synonym","title":"Defining an attribute synonym","text":"<p>An attribute synonym can remap an incoming attribute value to another attribute and apply the regular transformation. It can also be used to fix a value and keep the same attribute.</p> <p>The format is:</p> <p><code>&lt;cluster&gt;/&lt;attributeid&gt;=&lt;new_cluster&gt;/&lt;new_attributedid&gt;[,mul:&lt;mul&gt;][,div:&lt;div&gt;][,add:&lt;add&gt;]</code></p> Parameter Description <code>&lt;cluster&gt;</code> Cluster number in 4 digits hex <code>&lt;attributeid&gt;</code> Attribute identifier in 4 digits hex <code>&lt;new_cluster&gt;</code> Cluster number in 4 digits hex <code>&lt;new_attributeid&gt;</code> Attribute identifier in 4 digits hex <code>mul:&lt;mul&gt;</code> (optional) <code>1..65535</code>: Apply a multiplier to the value received <code>div:&lt;div&gt;</code> (optional) <code>1..65535</code>: Apply a divider to the value received (after the multiplier is applied) <code>add:&lt;add&gt;</code> (optional) <code>-36278..32767</code>: Add/substract a value (after multiplier and divider are applied) <p>Currently the inverse attribute mapping is not done when writing an attribute.</p>"},{"location":"Zigbee/#troubleshooting","title":"Troubleshooting","text":"<p>While all <code>*.zb</code> files are automatically loaded at startup, you can manually unload a file with <code>ZbUnload &lt;file.zb&gt;</code> and load a modified version with <code>ZbLoad &lt;file.zb&gt;</code>.</p> <p>You can dump all the plugins loaded in memory with <code>ZbLoadDump</code>.</p> <p>When a synonym is applied, you can see it in logs with loglevel 3 or more:</p> <p><code>ZIG: apply synonym 000C/0055 with 0B04/050B (mul:1 div:1)</code></p>"},{"location":"Zigbee/#complete-examples","title":"Complete examples","text":""},{"location":"Zigbee/#default-plugin","title":"Default plugin","text":"<p>Below is the default plug-in stored in Flash <code>&lt;internal_plugin&gt;</code> and automatically loaded. It handles the following:</p> <ul> <li>solve a bug in IKEA device where the BatteryPercentage is not multiplied by 2</li> <li>map the <code>Power</code> attribute of Aqara magnet window sensor to a synthetic attribute 0500/FFF2 for specific handling</li> </ul> <pre><code>#Z2Tv1\n:TRADFRI*,\n:SYMFONISK*,\n0001/0021=0001/0021,mul:2\n:lumi.sensor_magnet*,\n0006/0000=0500/FFF2\n</code></pre>"},{"location":"Zigbee/#tuya-moes-thermostat-humidity-bug","title":"Tuya Moes thermostat humidity bug","text":"<p><code>Tuya_KCTW1Z.zb</code> fixes a bug where humidity should be multiplied by 10.</p> <pre><code>#Z2Tv1\n# Tuya fix humidity by 10 \n# https://zigbee.blakadder.com/Tuya_KCTW1Z.html\n:TS0201,_TZ3000_ywagc4rj\n0405/0000=0405/0000,mul:10\n</code></pre>"},{"location":"Zigbee/#giex-garden-watering","title":"GiEX garden watering","text":"<p>The following plugin defines device specific Tuya attributes, and matches the <code>BatteryPercentage</code> to the regular ZCL attribute (multiplied by 2).</p> <pre><code>#Z2Tv1\n# GiEX garden watering https://www.aliexpress.com/item/1005004222098040.html\n:TS0601,_TZE200_sh1btabb\nEF00/0101,WaterMode                 # duration=0 / capacity=1\nEF00/0102,WaterState                # off=0 / on=1\nEF00/0365,IrrigationStartTime       # (string) ex: \"08:12:26\"\nEF00/0366,IrrigationStopTime        # (string) ex: \"08:13:36\"\nEF00/0267,CycleIrrigationNumTimes   # number of cycle irrigation times, set to 0 for single cycle\nEF00/0268,IrrigationTarget          # duration in minutes or capacity in Liters (depending on mode)\nEF00/0269,CycleIrrigationInterval   # cycle irrigation interval (minutes, max 1440)\nEF00/026A,CurrentTemperature        # (value ignored because isn't a valid tempurature reading.  Misdocumented and usage unclear)\nEF00/026C=0001/0021,mul:2           # match to BatteryPercentage\nEF00/026F,WaterConsumed             # water consumed (Litres)\nEF00/0372,LastIrrigationDuration    # (string) Ex: \"00:01:10,0\"\n</code></pre>"},{"location":"Zigbee/#advanced-topic-zigbee-reference","title":"Advanced topic: Zigbee Reference","text":"Tasmota includes plain text aliases for most of the common ZCL attributes (click to expand) Alias Cluster Attribute Type <code>ZCLVersion</code> 0x0000 0x0000 %20 - uint8 <code>AppVersion</code> 0x0000 0x0001 %20 - uint8 <code>StackVersion</code> 0x0000 0x0002 %20 - uint8 <code>HWVersion</code> 0x0000 0x0003 %20 - uint8 <code>Manufacturer</code> 0x0000 0x0004 %42 - string <code>ModelId</code> 0x0000 0x0005 %42 - string <code>DateCode</code> 0x0000 0x0006 %42 - string <code>PowerSource</code> 0x0000 0x0007 %30 - enum8 <code>GenericDeviceClass</code> 0x0000 0x0008 %30 - enum8 <code>GenericDeviceType</code> 0x0000 0x0009 %30 - enum8 <code>ProductCode</code> 0x0000 0x000A %41 - octstr <code>ProductURL</code> 0x0000 0x000B %42 - string <code>LocationDescription</code> 0x0000 0x0010 %42 - string <code>PhysicalEnvironment</code> 0x0000 0x0011 %30 - enum8 <code>DeviceEnabled</code> 0x0000 0x0012 %10 - bool <code>AlarmMask</code> 0x0000 0x0013 %18 - map8 <code>DisableLocalConfig</code> 0x0000 0x0014 %18 - map8 <code>SWBuildID</code> 0x0000 0x4000 %42 - string <code>MullerLightMode</code> 0x0000 0x4005 %20 - uint8 <code>MainsVoltage</code> 0x0001 0x0000 %21 - uint16 <code>MainsFrequency</code> 0x0001 0x0001 %20 - uint8 <code>MainsAlarmMask</code> 0x0001 0x0010 %18 - map8 <code>MainsVoltageMinThreshold</code> 0x0001 0x0011 %21 - uint16 <code>MainsVoltageMaxThreshold</code> 0x0001 0x0012 %21 - uint16 <code>MainsVoltageDwellTripPoint</code> 0x0001 0x0013 %21 - uint16 <code>BatteryVoltage</code> 0x0001 0x0020 %20 - uint8 <code>BatteryPercentage</code> 0x0001 0x0021 %20 - uint8 <code>BatteryManufacturer</code> 0x0001 0x0030 %42 - string <code>BatterySize</code> 0x0001 0x0031 %30 - enum8 <code>BatteryAHrRating</code> 0x0001 0x0032 %21 - uint16 <code>BatteryQuantity</code> 0x0001 0x0033 %20 - uint8 <code>BatteryRatedVoltage</code> 0x0001 0x0034 %20 - uint8 <code>BatteryAlarmMask</code> 0x0001 0x0035 %18 - map8 <code>BatteryVoltageMinThreshold</code> 0x0001 0x0036 %20 - uint8 <code>BatteryVoltageThreshold1</code> 0x0001 0x0037 %20 - uint8 <code>BatteryVoltageThreshold2</code> 0x0001 0x0038 %20 - uint8 <code>BatteryVoltageThreshold3</code> 0x0001 0x0039 %20 - uint8 <code>BatteryPercentageMinThreshold</code> 0x0001 0x003A %20 - uint8 <code>BatteryPercentageThreshold1</code> 0x0001 0x003B %20 - uint8 <code>BatteryPercentageThreshold2</code> 0x0001 0x003C %20 - uint8 <code>BatteryPercentageThreshold3</code> 0x0001 0x003D %20 - uint8 <code>BatteryAlarmState</code> 0x0001 0x003E %1B - map32 <code>CurrentTemperature</code> 0x0002 0x0000 %29 - int16 <code>MinTempExperienced</code> 0x0002 0x0001 %29 - int16 <code>MaxTempExperienced</code> 0x0002 0x0002 %29 - int16 <code>OverTempTotalDwell</code> 0x0002 0x0003 %21 - uint16 <code>DeviceTempAlarmMask</code> 0x0002 0x0010 %18 - map8 <code>LowTempThreshold</code> 0x0002 0x0011 %29 - int16 <code>HighTempThreshold</code> 0x0002 0x0012 %29 - int16 <code>LowTempDwellTripPoint</code> 0x0002 0x0013 %22 - uint24 <code>HighTempDwellTripPoint</code> 0x0002 0x0014 %22 - uint24 <code>IdentifyTime</code> 0x0003 0x0000 %21 - uint16 <code>GroupNameSupport</code> 0x0004 0x0000 %18 - map8 <code>SceneCount</code> 0x0005 0x0000 %20 - uint8 <code>CurrentScene</code> 0x0005 0x0001 %20 - uint8 <code>CurrentGroup</code> 0x0005 0x0002 %21 - uint16 <code>SceneValid</code> 0x0005 0x0003 %10 - bool <code>SceneNameSupport</code> 0x0005 0x0004 %18 - map8 <code>LastConfiguredBy</code> 0x0005 0x0005 %F0 - EUI64 <code>Power</code> 0x0006 0x0000 %10 - bool <code>StartUpOnOff</code> 0x0006 0x4003 %30 - enum8 <code>Power</code> 0x0006 0x8000 %10 - bool <code>OnOff</code> 0x0006 0x4000 %10 - bool <code>OnTime</code> 0x0006 0x4001 %21 - uint16 <code>OffWaitTime</code> 0x0006 0x4002 %21 - uint16 <code>SwitchType</code> 0x0007 0x0000 %30 - enum8 <code>SwitchActions</code> 0x0007 0x0010 %30 - enum8 <code>Dimmer</code> 0x0008 0x0000 %20 - uint8 <code>DimmerRemainingTime</code> 0x0008 0x0001 %21 - uint16 <code>DimmerMinLevel</code> 0x0008 0x0002 %20 - uint8 <code>DimmerMaxLevel</code> 0x0008 0x0003 %20 - uint8 <code>DimmerCurrentFrequency</code> 0x0008 0x0004 %21 - uint16 <code>DimmerMinFrequency</code> 0x0008 0x0005 %21 - uint16 <code>DimmerMaxFrequency</code> 0x0008 0x0006 %21 - uint16 <code>OnOffTransitionTime</code> 0x0008 0x0010 %21 - uint16 <code>OnLevel</code> 0x0008 0x0011 %20 - uint8 <code>OnTransitionTime</code> 0x0008 0x0012 %21 - uint16 <code>OffTransitionTime</code> 0x0008 0x0013 %21 - uint16 <code>DefaultMoveRate</code> 0x0008 0x0014 %21 - uint16 <code>DimmerOptions</code> 0x0008 0x000F %18 - map8 <code>DimmerStartUpLevel</code> 0x0008 0x4000 %20 - uint8 <code>AlarmCount</code> 0x0009 0x0000 %21 - uint16 <code>Time</code> 0x000A 0x0000 %E2 - UTC <code>TimeStatus</code> 0x000A 0x0001 %18 - map8 <code>TimeZone</code> 0x000A 0x0002 %2B - int32 <code>DstStart</code> 0x000A 0x0003 %23 - uint32 <code>DstEnd</code> 0x000A 0x0004 %23 - uint32 <code>DstShift</code> 0x000A 0x0005 %2B - int32 <code>StandardTime</code> 0x000A 0x0006 %23 - uint32 <code>LocalTime</code> 0x000A 0x0007 %23 - uint32 <code>LastSetTime</code> 0x000A 0x0008 %E2 - UTC <code>ValidUntilTime</code> 0x000A 0x0009 %E2 - UTC <code>TimeEpoch</code> 0x000A 0xFF00 %E2 - UTC <code>LocationType</code> 0x000B 0x0000 %08 - data8 <code>LocationMethod</code> 0x000B 0x0001 %30 - enum8 <code>LocationAge</code> 0x000B 0x0002 %21 - uint16 <code>QualityMeasure</code> 0x000B 0x0003 %20 - uint8 <code>NumberOfDevices</code> 0x000B 0x0004 %20 - uint8 <code>Coordinate1</code> 0x000B 0x0010 %29 - int16 <code>Coordinate2</code> 0x000B 0x0011 %29 - int16 <code>Coordinate3</code> 0x000B 0x0012 %29 - int16 <code>LocationPower</code> 0x000B 0x0013 %29 - int16 <code>PathLossExponent</code> 0x000B 0x0014 %21 - uint16 <code>ReportingPeriod</code> 0x000B 0x0015 %21 - uint16 <code>CalculationPeriod</code> 0x000B 0x0016 %21 - uint16 <code>NumberRSSIMeasurements</code> 0x000B 0x0016 %20 - uint8 <code>AnalogInDescription</code> 0x000C 0x001C %42 - string <code>AnalogInMaxValue</code> 0x000C 0x0041 %39 - single <code>AnalogInMinValue</code> 0x000C 0x0045 %39 - single <code>AnalogInOutOfService</code> 0x000C 0x0051 %10 - bool <code>AnalogValue</code> 0x000C 0x0055 %39 - single <code>AnalogInReliability</code> 0x000C 0x0067 %30 - enum8 <code>AnalogInResolution</code> 0x000C 0x006A %39 - single <code>AnalogInStatusFlags</code> 0x000C 0x006F %18 - map8 <code>AnalogInEngineeringUnits</code> 0x000C 0x0075 %31 - enum16 <code>AnalogInApplicationType</code> 0x000C 0x0100 %23 - uint32 <code>AqaraRotate</code> 0x000C 0xFF55 %21 - uint16 <code>Aqara_FF05</code> 0x000C 0xFF05 %21 - uint16 <code>AnalogOutDescription</code> 0x000D 0x001C %42 - string <code>AnalogOutMaxValue</code> 0x000D 0x0041 %39 - single <code>AnalogOutMinValue</code> 0x000D 0x0045 %39 - single <code>AnalogOutOutOfService</code> 0x000D 0x0051 %10 - bool <code>AnalogOutValue</code> 0x000D 0x0055 %39 - single <code>AnalogOutReliability</code> 0x000D 0x0067 %30 - enum8 <code>AnalogOutRelinquishDefault</code> 0x000D 0x0068 %39 - single <code>AnalogOutResolution</code> 0x000D 0x006A %39 - single <code>AnalogOutStatusFlags</code> 0x000D 0x006F %18 - map8 <code>AnalogOutEngineeringUnits</code> 0x000D 0x0075 %31 - enum16 <code>AnalogOutApplicationType</code> 0x000D 0x0100 %23 - uint32 <code>AnalogDescription</code> 0x000E 0x001C %42 - string <code>AnalogOutOfService</code> 0x000E 0x0051 %10 - bool <code>AnalogValue</code> 0x000E 0x0055 %39 - single <code>AnalogPriorityArray</code> 0x000E 0x0057 %FF - unk <code>AnalogReliability</code> 0x000E 0x0067 %30 - enum8 <code>AnalogRelinquishDefault</code> 0x000E 0x0068 %39 - single <code>AnalogStatusFlags</code> 0x000E 0x006F %18 - map8 <code>AnalogEngineeringUnits</code> 0x000E 0x0075 %31 - enum16 <code>AnalogApplicationType</code> 0x000E 0x0100 %23 - uint32 <code>BinaryInActiveText</code> 0x000F 0x0004 %42 - string <code>BinaryInDescription</code> 0x000F 0x001C %42 - string <code>BinaryInInactiveText</code> 0x000F 0x002E %42 - string <code>BinaryInOutOfService</code> 0x000F 0x0051 %10 - bool <code>BinaryInPolarity</code> 0x000F 0x0054 %30 - enum8 <code>BinaryInValue</code> 0x000F 0x0055 %10 - bool <code>BinaryInReliability</code> 0x000F 0x0067 %30 - enum8 <code>BinaryInStatusFlags</code> 0x000F 0x006F %18 - map8 <code>BinaryInApplicationType</code> 0x000F 0x0100 %23 - uint32 <code>BinaryOutActiveText</code> 0x0010 0x0004 %42 - string <code>BinaryOutDescription</code> 0x0010 0x001C %42 - string <code>BinaryOutInactiveText</code> 0x0010 0x002E %42 - string <code>BinaryOutMinimumOffTime</code> 0x0010 0x0042 %23 - uint32 <code>BinaryOutMinimumOnTime</code> 0x0010 0x0043 %23 - uint32 <code>BinaryOutOutOfService</code> 0x0010 0x0051 %10 - bool <code>BinaryOutPolarity</code> 0x0010 0x0054 %30 - enum8 <code>BinaryOutValue</code> 0x0010 0x0055 %10 - bool <code>BinaryOutReliability</code> 0x0010 0x0067 %30 - enum8 <code>BinaryOutRelinquishDefault</code> 0x0010 0x0068 %10 - bool <code>BinaryOutStatusFlags</code> 0x0010 0x006F %18 - map8 <code>BinaryOutApplicationType</code> 0x0010 0x0100 %23 - uint32 <code>BinaryActiveText</code> 0x0011 0x0004 %42 - string <code>BinaryDescription</code> 0x0011 0x001C %42 - string <code>BinaryInactiveText</code> 0x0011 0x002E %42 - string <code>BinaryMinimumOffTime</code> 0x0011 0x0042 %23 - uint32 <code>BinaryMinimumOnTime</code> 0x0011 0x0043 %23 - uint32 <code>BinaryOutOfService</code> 0x0011 0x0051 %10 - bool <code>BinaryValue</code> 0x0011 0x0055 %10 - bool <code>BinaryReliability</code> 0x0011 0x0067 %30 - enum8 <code>BinaryRelinquishDefault</code> 0x0011 0x0068 %10 - bool <code>BinaryStatusFlags</code> 0x0011 0x006F %18 - map8 <code>BinaryApplicationType</code> 0x0011 0x0100 %23 - uint32 <code>MultiInDescription</code> 0x0012 0x001C %42 - string <code>MultiInNumberOfStates</code> 0x0012 0x004A %21 - uint16 <code>MultiInOutOfService</code> 0x0012 0x0051 %10 - bool <code>MultiInValue</code> 0x0012 0x0055 %21 - uint16 <code>MultiInReliability</code> 0x0012 0x0067 %30 - enum8 <code>MultiInStatusFlags</code> 0x0012 0x006F %18 - map8 <code>MultiInApplicationType</code> 0x0012 0x0100 %23 - uint32 <code>MultiOutDescription</code> 0x0013 0x001C %42 - string <code>MultiOutNumberOfStates</code> 0x0013 0x004A %21 - uint16 <code>MultiOutOutOfService</code> 0x0013 0x0051 %10 - bool <code>MultiOutValue</code> 0x0013 0x0055 %21 - uint16 <code>MultiOutReliability</code> 0x0013 0x0067 %30 - enum8 <code>MultiOutRelinquishDefault</code> 0x0013 0x0068 %21 - uint16 <code>MultiOutStatusFlags</code> 0x0013 0x006F %18 - map8 <code>MultiOutApplicationType</code> 0x0013 0x0100 %23 - uint32 <code>MultiDescription</code> 0x0014 0x001C %42 - string <code>MultiNumberOfStates</code> 0x0014 0x004A %21 - uint16 <code>MultiOutOfService</code> 0x0014 0x0051 %10 - bool <code>MultiValue</code> 0x0014 0x0055 %21 - uint16 <code>MultiReliability</code> 0x0014 0x0067 %30 - enum8 <code>MultiRelinquishDefault</code> 0x0014 0x0068 %21 - uint16 <code>MultiStatusFlags</code> 0x0014 0x006F %18 - map8 <code>MultiApplicationType</code> 0x0014 0x0100 %23 - uint32 <code>TotalProfileNum</code> 0x001A 0x0000 %20 - uint8 <code>MultipleScheduling</code> 0x001A 0x0001 %10 - bool <code>EnergyFormatting</code> 0x001A 0x0002 %18 - map8 <code>EnergyRemote</code> 0x001A 0x0003 %10 - bool <code>ScheduleMode</code> 0x001A 0x0004 %18 - map8 <code>CheckinInterval</code> 0x0020 0x0000 %23 - uint32 <code>LongPollInterval</code> 0x0020 0x0001 %23 - uint32 <code>ShortPollInterval</code> 0x0020 0x0002 %21 - uint16 <code>FastPollTimeout</code> 0x0020 0x0003 %21 - uint16 <code>CheckinIntervalMin</code> 0x0020 0x0004 %23 - uint32 <code>LongPollIntervalMin</code> 0x0020 0x0005 %23 - uint32 <code>FastPollTimeoutMax</code> 0x0020 0x0006 %21 - uint16 <code>MaxSinkTableEntries</code> 0x0021 0x0000 %20 - uint8 <code>SinkTable</code> 0x0021 0x0001 %43 - octstr16 <code>CommunicationMode</code> 0x0021 0x0002 %18 - map8 <code>CcommissioningExitMode</code> 0x0021 0x0003 %18 - map8 <code>CommissioningWindow</code> 0x0021 0x0004 %21 - uint16 <code>SecurityLevel</code> 0x0021 0x0005 %18 - map8 <code>ServerFunctionality</code> 0x0021 0x0006 %1A - map24 <code>ServerActiveFunctionality</code> 0x0021 0x0007 %1A - map24 <code>MaxProxyTableEntries</code> 0x0021 0x0010 %20 - uint8 <code>ProxyTable</code> 0x0021 0x0011 %43 - octstr16 <code>NotificationRetryNumber</code> 0x0021 0x0012 %20 - uint8 <code>NotificationRetryTimer</code> 0x0021 0x0013 %20 - uint8 <code>MaxSearchCounter</code> 0x0021 0x0014 %20 - uint8 <code>BlockedGPDID</code> 0x0021 0x0015 %43 - octstr16 <code>ClientFunctionality</code> 0x0021 0x0016 %1A - map24 <code>ClientActiveFunctionality</code> 0x0021 0x0017 %1A - map24 <code>SharedSecurityKeyType</code> 0x0021 0x0020 %18 - map8 <code>SharedSecurityKey</code> 0x0021 0x0021 %F1 - key128 <code>LinkKey</code> 0x0021 0x0022 %F1 - key128 <code>PhysicalClosedLimit</code> 0x0100 0x0000 %21 - uint16 <code>MotorStepSize</code> 0x0100 0x0001 %20 - uint8 <code>Status</code> 0x0100 0x0002 %18 - map8 <code>ClosedLimit</code> 0x0100 0x0010 %21 - uint16 <code>Mode</code> 0x0100 0x0011 %30 - enum8 <code>LockState</code> 0x0101 0x0000 %30 - enum8 <code>LockType</code> 0x0101 0x0001 %30 - enum8 <code>ActuatorEnabled</code> 0x0101 0x0002 %10 - bool <code>DoorState</code> 0x0101 0x0003 %30 - enum8 <code>DoorOpenEvents</code> 0x0101 0x0004 %23 - uint32 <code>DoorClosedEvents</code> 0x0101 0x0005 %23 - uint32 <code>OpenPeriod</code> 0x0101 0x0006 %21 - uint16 <code>NumberOfLogRecordsSupported</code> 0x0101 0x0010 %21 - uint16 <code>NumberOfTotalUsersSupported</code> 0x0101 0x0011 %21 - uint16 <code>NumberOfPINUsersSupported</code> 0x0101 0x0012 %21 - uint16 <code>NumberOfRFIDUsersSupported</code> 0x0101 0x0013 %21 - uint16 <code>NumberOfWeekDaySchedulesSupportedPerUser</code> 0x0101 0x0014 %20 - uint8 <code>NumberOfYearDaySchedulesSupportedPerUser</code> 0x0101 0x0015 %20 - uint8 <code>NumberOfHolidaySchedulesSupported</code> 0x0101 0x0016 %20 - uint8 <code>MaxPINCodeLength</code> 0x0101 0x0017 %20 - uint8 <code>MinPINCodeLength</code> 0x0101 0x0018 %20 - uint8 <code>MaxRFIDCodeLength</code> 0x0101 0x0019 %20 - uint8 <code>MinRFIDCodeLength</code> 0x0101 0x0011 %20 - uint8 <code>LockEnableLogging</code> 0x0101 0x0020 %10 - bool <code>LockLanguage</code> 0x0101 0x0021 %42 - string <code>LockLEDSettings</code> 0x0101 0x0022 %20 - uint8 <code>AutoRelockTime</code> 0x0101 0x0023 %23 - uint32 <code>LockSoundVolume</code> 0x0101 0x0024 %20 - uint8 <code>LockOperatingMode</code> 0x0101 0x0025 %30 - enum8 <code>LockSupportedOperatingModes</code> 0x0101 0x0026 %19 - map16 <code>LockDefaultConfigurationRegister</code> 0x0101 0x0027 %19 - map16 <code>LockEnableLocalProgramming</code> 0x0101 0x0028 %10 - bool <code>LockEnableOneTouchLocking</code> 0x0101 0x0029 %10 - bool <code>LockEnableInsideStatusLED</code> 0x0101 0x002A %10 - bool <code>LockEnablePrivacyModeButton</code> 0x0101 0x002B %10 - bool <code>LockAlarmMask</code> 0x0101 0x0040 %19 - map16 <code>LockKeypadOperationEventMask</code> 0x0101 0x0041 %19 - map16 <code>LockRFOperationEventMask</code> 0x0101 0x0042 %19 - map16 <code>LockManualOperationEventMask</code> 0x0101 0x0043 %19 - map16 <code>LockRFIDOperationEventMask</code> 0x0101 0x0044 %19 - map16 <code>LockKeypadProgrammingEventMask</code> 0x0101 0x0045 %19 - map16 <code>LockRFProgrammingEventMask</code> 0x0101 0x0046 %19 - map16 <code>LockRFIDProgrammingEventMask</code> 0x0101 0x0047 %19 - map16 <code>AqaraVibrationMode</code> 0x0101 0x0055 %21 - uint16 <code>AqaraVibrationsOrAngle</code> 0x0101 0x0503 %21 - uint16 <code>AqaraVibration505</code> 0x0101 0x0505 %23 - uint32 <code>AqaraAccelerometer</code> 0x0101 0x0508 %25 - uint48 <code>WindowCoveringType</code> 0x0102 0x0000 %30 - enum8 <code>PhysicalClosedLimitLift</code> 0x0102 0x0001 %21 - uint16 <code>PhysicalClosedLimitTilt</code> 0x0102 0x0002 %21 - uint16 <code>CurrentPositionLift</code> 0x0102 0x0003 %21 - uint16 <code>CurrentPositionTilt</code> 0x0102 0x0004 %21 - uint16 <code>NumberofActuationsLift</code> 0x0102 0x0005 %21 - uint16 <code>NumberofActuationsTilt</code> 0x0102 0x0006 %21 - uint16 <code>ConfigStatus</code> 0x0102 0x0007 %18 - map8 <code>CurrentPositionLiftPercentage</code> 0x0102 0x0008 %20 - uint8 <code>CurrentPositionTiltPercentage</code> 0x0102 0x0009 %20 - uint8 <code>InstalledOpenLimitLift</code> 0x0102 0x0010 %21 - uint16 <code>InstalledClosedLimitLift</code> 0x0102 0x0011 %21 - uint16 <code>InstalledOpenLimitTilt</code> 0x0102 0x0012 %21 - uint16 <code>InstalledClosedLimitTilt</code> 0x0102 0x0013 %21 - uint16 <code>VelocityLift</code> 0x0102 0x0014 %21 - uint16 <code>AccelerationTimeLift</code> 0x0102 0x0015 %21 - uint16 <code>DecelerationTimeLift</code> 0x0102 0x0016 %21 - uint16 <code>Mode</code> 0x0102 0x0017 %18 - map8 <code>IntermediateSetpointsLift</code> 0x0102 0x0018 %41 - octstr <code>IntermediateSetpointsTilt</code> 0x0102 0x0019 %41 - octstr <code>TuyaMovingState</code> 0x0102 0xF000 %30 - enum8 <code>TuyaCalibration</code> 0x0102 0xF001 %30 - enum8 <code>TuyaMotorReversal</code> 0x0102 0xF002 %30 - enum8 <code>TuyaCalibrationTime</code> 0x0102 0xF003 %21 - uint16 <code>LocalTemperature</code> 0x0201 0x0000 %29 - int16 <code>OutdoorTemperature</code> 0x0201 0x0001 %29 - int16 <code>ThermostatOccupancy</code> 0x0201 0x0002 %18 - map8 <code>AbsMinHeatSetpointLimit</code> 0x0201 0x0003 %29 - int16 <code>AbsMaxHeatSetpointLimit</code> 0x0201 0x0004 %29 - int16 <code>AbsMinCoolSetpointLimit</code> 0x0201 0x0005 %29 - int16 <code>AbsMaxCoolSetpointLimit</code> 0x0201 0x0006 %29 - int16 <code>PICoolingDemand</code> 0x0201 0x0007 %20 - uint8 <code>PIHeatingDemand</code> 0x0201 0x0008 %20 - uint8 <code>HVACSystemTypeConfiguration</code> 0x0201 0x0009 %18 - map8 <code>LocalTemperatureCalibration</code> 0x0201 0x0010 %28 - int8 <code>OccupiedCoolingSetpoint</code> 0x0201 0x0011 %29 - int16 <code>OccupiedHeatingSetpoint</code> 0x0201 0x0012 %29 - int16 <code>UnoccupiedCoolingSetpoint</code> 0x0201 0x0013 %29 - int16 <code>UnoccupiedHeatingSetpoint</code> 0x0201 0x0014 %29 - int16 <code>MinHeatSetpointLimit</code> 0x0201 0x0015 %29 - int16 <code>MaxHeatSetpointLimit</code> 0x0201 0x0016 %29 - int16 <code>MinCoolSetpointLimit</code> 0x0201 0x0017 %29 - int16 <code>MaxCoolSetpointLimit</code> 0x0201 0x0018 %29 - int16 <code>MinSetpointDeadBand</code> 0x0201 0x0019 %28 - int8 <code>ThermostatAlarmMask</code> 0x0201 0x001D %18 - map8 <code>ThermostatRunningMode</code> 0x0201 0x001E %30 - enum8 <code>RemoteSensing</code> 0x0201 0x001A %18 - map8 <code>ControlSequenceOfOperation</code> 0x0201 0x001B %30 - enum8 <code>SystemMode</code> 0x0201 0x001C %30 - enum8 <code>TRVMode</code> 0x0201 0x4000 %30 - enum8 <code>ValvePosition</code> 0x0201 0x4001 %20 - uint8 <code>EurotronicErrors</code> 0x0201 0x4002 %20 - uint8 <code>CurrentTemperatureSetPoint</code> 0x0201 0x4003 %29 - int16 <code>EurotronicHostFlags</code> 0x0201 0x4008 %22 - uint24 <code>TRVMirrorDisplay</code> 0x0201 0xF002 %10 - bool <code>TRVBoost</code> 0x0201 0xF004 %10 - bool <code>TRVWindowOpen</code> 0x0201 0xF010 %10 - bool <code>TRVChildProtection</code> 0x0201 0xF080 %10 - bool <code>ThSetpoint</code> 0x0201 0xFFF0 %20 - uint8 <code>TempTarget</code> 0x0201 0xFFF1 %29 - int16 <code>FanMode</code> 0x0202 0x0000 %30 - enum8 <code>FanModeSequence</code> 0x0202 0x0001 %30 - enum8 <code>RelativeHumidity</code> 0x0203 0x0000 %20 - uint8 <code>DehumidificationCooling</code> 0x0203 0x0001 %20 - uint8 <code>RHDehumidificationSetpoint</code> 0x0203 0x0010 %20 - uint8 <code>RelativeHumidityMode</code> 0x0203 0x0011 %30 - enum8 <code>DehumidificationLockout</code> 0x0203 0x0012 %30 - enum8 <code>DehumidificationHysteresis</code> 0x0203 0x0013 %20 - uint8 <code>DehumidificationMaxCool</code> 0x0203 0x0014 %20 - uint8 <code>RelativeHumidityDisplay</code> 0x0203 0x0015 %30 - enum8 <code>TemperatureDisplayMode</code> 0x0204 0x0000 %30 - enum8 <code>ThermostatKeypadLockout</code> 0x0204 0x0001 %30 - enum8 <code>ThermostatScheduleProgrammingVisibility</code> 0x0204 0x0002 %30 - enum8 <code>Hue</code> 0x0300 0x0000 %20 - uint8 <code>Sat</code> 0x0300 0x0001 %20 - uint8 <code>RemainingTime</code> 0x0300 0x0002 %21 - uint16 <code>X</code> 0x0300 0x0003 %21 - uint16 <code>Y</code> 0x0300 0x0004 %21 - uint16 <code>DriftCompensation</code> 0x0300 0x0005 %30 - enum8 <code>CompensationText</code> 0x0300 0x0006 %42 - string <code>CT</code> 0x0300 0x0007 %21 - uint16 <code>ColorMode</code> 0x0300 0x0008 %30 - enum8 <code>NumberOfPrimaries</code> 0x0300 0x0010 %20 - uint8 <code>Primary1X</code> 0x0300 0x0011 %21 - uint16 <code>Primary1Y</code> 0x0300 0x0012 %21 - uint16 <code>Primary1Intensity</code> 0x0300 0x0013 %20 - uint8 <code>Primary2X</code> 0x0300 0x0015 %21 - uint16 <code>Primary2Y</code> 0x0300 0x0016 %21 - uint16 <code>Primary2Intensity</code> 0x0300 0x0017 %20 - uint8 <code>Primary3X</code> 0x0300 0x0019 %21 - uint16 <code>Primary3Y</code> 0x0300 0x001A %21 - uint16 <code>Primary3Intensity</code> 0x0300 0x001B %20 - uint8 <code>Primary4X</code> 0x0300 0x0020 %21 - uint16 <code>Primary4Y</code> 0x0300 0x0021 %21 - uint16 <code>Primary4Intensity</code> 0x0300 0x0022 %20 - uint8 <code>Primary5X</code> 0x0300 0x0024 %21 - uint16 <code>Primary5Y</code> 0x0300 0x0025 %21 - uint16 <code>Primary5Intensity</code> 0x0300 0x0026 %20 - uint8 <code>Primary6X</code> 0x0300 0x0028 %21 - uint16 <code>Primary6Y</code> 0x0300 0x0029 %21 - uint16 <code>Primary6Intensity</code> 0x0300 0x002A %20 - uint8 <code>WhitePointX</code> 0x0300 0x0030 %21 - uint16 <code>WhitePointY</code> 0x0300 0x0031 %21 - uint16 <code>ColorPointRX</code> 0x0300 0x0032 %21 - uint16 <code>ColorPointRY</code> 0x0300 0x0033 %21 - uint16 <code>ColorPointRIntensity</code> 0x0300 0x0034 %20 - uint8 <code>ColorPointGX</code> 0x0300 0x0036 %21 - uint16 <code>ColorPointGY</code> 0x0300 0x0037 %21 - uint16 <code>ColorPointGIntensity</code> 0x0300 0x0038 %20 - uint8 <code>ColorPointBX</code> 0x0300 0x003A %21 - uint16 <code>ColorPointBY</code> 0x0300 0x003B %21 - uint16 <code>ColorPointBIntensity</code> 0x0300 0x003C %20 - uint8 <code>EnhancedCurrentHue</code> 0x0300 0x4000 %21 - uint16 <code>EnhancedColorMode</code> 0x0300 0x4001 %30 - enum8 <code>ColorLoopActive</code> 0x0300 0x4002 %20 - uint8 <code>ColorLoopDirection</code> 0x0300 0x4003 %20 - uint8 <code>ColorLoopTime</code> 0x0300 0x4004 %21 - uint16 <code>ColorLoopStartEnhancedHue</code> 0x0300 0x4005 %21 - uint16 <code>ColorLoopStoredEnhancedHue</code> 0x0300 0x4006 %21 - uint16 <code>ColorCapabilities</code> 0x0300 0x400A %19 - map16 <code>ColorTempPhysicalMinMireds</code> 0x0300 0x400B %21 - uint16 <code>ColorTempPhysicalMaxMireds</code> 0x0300 0x400C %21 - uint16 <code>ColorStartUpColorTempireds</code> 0x0300 0x4010 %21 - uint16 <code>BallastPhysicalMinLevel</code> 0x0301 0x0000 %20 - uint8 <code>BallastPhysicalMaxLevel</code> 0x0301 0x0001 %20 - uint8 <code>BallastStatus</code> 0x0301 0x0002 %18 - map8 <code>BallastMinLevel</code> 0x0301 0x0010 %20 - uint8 <code>BallastMaxLevel</code> 0x0301 0x0011 %20 - uint8 <code>BallastPowerOnLevel</code> 0x0301 0x0012 %20 - uint8 <code>BallastPowerOnFadeTime</code> 0x0301 0x0013 %21 - uint16 <code>IntrinsicBallastFactor</code> 0x0301 0x0014 %20 - uint8 <code>BallastFactorAdjustment</code> 0x0301 0x0015 %20 - uint8 <code>BallastLampQuantity</code> 0x0301 0x0020 %20 - uint8 <code>LampType</code> 0x0301 0x0030 %42 - string <code>LampManufacturer</code> 0x0301 0x0031 %42 - string <code>LampRatedHours</code> 0x0301 0x0032 %22 - uint24 <code>LampBurnHours</code> 0x0301 0x0033 %22 - uint24 <code>LampAlarmMode</code> 0x0301 0x0034 %18 - map8 <code>LampBurnHoursTripPoint</code> 0x0301 0x0035 %22 - uint24 <code>Illuminance</code> 0x0400 0x0000 %21 - uint16 <code>IlluminanceMinMeasuredValue</code> 0x0400 0x0001 %21 - uint16 <code>IlluminanceMaxMeasuredValue</code> 0x0400 0x0002 %21 - uint16 <code>IlluminanceTolerance</code> 0x0400 0x0003 %21 - uint16 <code>IlluminanceLightSensorType</code> 0x0400 0x0004 %30 - enum8 <code>IlluminanceLevelStatus</code> 0x0401 0x0000 %30 - enum8 <code>IlluminanceLightSensorType</code> 0x0401 0x0001 %30 - enum8 <code>IlluminanceTargetLevel</code> 0x0401 0x0010 %21 - uint16 <code>Temperature</code> 0x0402 0x0000 %29 - int16 <code>TemperatureMinMeasuredValue</code> 0x0402 0x0001 %29 - int16 <code>TemperatureMaxMeasuredValue</code> 0x0402 0x0002 %29 - int16 <code>TemperatureTolerance</code> 0x0402 0x0003 %21 - uint16 <code>Pressure</code> 0x0403 0x0000 %29 - int16 <code>PressureMinMeasuredValue</code> 0x0403 0x0001 %29 - int16 <code>PressureMaxMeasuredValue</code> 0x0403 0x0002 %29 - int16 <code>PressureTolerance</code> 0x0403 0x0003 %21 - uint16 <code>PressureScaledValue</code> 0x0403 0x0010 %29 - int16 <code>PressureMinScaledValue</code> 0x0403 0x0011 %29 - int16 <code>PressureMaxScaledValue</code> 0x0403 0x0012 %29 - int16 <code>PressureScaledTolerance</code> 0x0403 0x0013 %21 - uint16 <code>PressureScale</code> 0x0403 0x0014 %28 - int8 <code>SeaPressure</code> 0x0403 0xFFF0 %29 - int16 <code>FlowRate</code> 0x0404 0x0000 %21 - uint16 <code>FlowMinMeasuredValue</code> 0x0404 0x0001 %21 - uint16 <code>FlowMaxMeasuredValue</code> 0x0404 0x0002 %21 - uint16 <code>FlowTolerance</code> 0x0404 0x0003 %21 - uint16 <code>Humidity</code> 0x0405 0x0000 %21 - uint16 <code>HumidityMinMeasuredValue</code> 0x0405 0x0001 %21 - uint16 <code>HumidityMaxMeasuredValue</code> 0x0405 0x0002 %21 - uint16 <code>HumidityTolerance</code> 0x0405 0x0003 %21 - uint16 <code>Occupancy</code> 0x0406 0x0000 %18 - map8 <code>OccupancySensorType</code> 0x0406 0x0001 %30 - enum8 <code>PIROccupiedToUnoccupiedDelay</code> 0x0406 0x0010 %21 - uint16 <code>PIRUnoccupiedToOccupiedDelay</code> 0x0406 0x0011 %21 - uint16 <code>PIRUnoccupiedToOccupiedThreshold</code> 0x0406 0x0012 %20 - uint8 <code>ZoneState</code> 0x0500 0x0000 %30 - enum8 <code>ZoneType</code> 0x0500 0x0001 %31 - enum16 <code>ZoneStatus</code> 0x0500 0x0002 %19 - map16 <code>IASCIEAddress</code> 0x0500 0x0010 %F0 - EUI64 <code>ZoneID</code> 0x0500 0x0011 %20 - uint8 <code>NumberOfZoneSensitivityLevelsSupported</code> 0x0500 0x0012 %20 - uint8 <code>CurrentZoneSensitivityLevel</code> 0x0500 0x0013 %20 - uint8 <code>CIE</code> 0x0500 0xFFF0 %20 - uint8 <code>Occupancy</code> 0x0500 0xFFF1 %20 - uint8 <code>Contact</code> 0x0500 0xFFF2 %20 - uint8 <code>Fire</code> 0x0500 0xFFF3 %20 - uint8 <code>Water</code> 0x0500 0xFFF4 %20 - uint8 <code>CO</code> 0x0500 0xFFF5 %20 - uint8 <code>PersonalAlarm</code> 0x0500 0xFFF6 %20 - uint8 <code>Movement</code> 0x0500 0xFFF7 %20 - uint8 <code>Panic</code> 0x0500 0xFFF8 %20 - uint8 <code>GlassBreak</code> 0x0500 0xFFF9 %20 - uint8 <code>CurrentSummationDelivered</code> 0x0702 0x0000 %25 - uint48 <code>CurrentSummationReceived</code> 0x0702 0x0001 %25 - uint48 <code>CurrentMaxDemandDelivered</code> 0x0702 0x0002 %25 - uint48 <code>CurrentMaxDemandReceived</code> 0x0702 0x0003 %25 - uint48 <code>DFTSummation</code> 0x0702 0x0004 %25 - uint48 <code>DailyFreezeTime</code> 0x0702 0x0005 %21 - uint16 <code>PowerFactor</code> 0x0702 0x0006 %28 - int8 <code>ReadingSnapShotTime</code> 0x0702 0x0007 %E2 - UTC <code>CurrentMaxDemandDeliveredTime</code> 0x0702 0x0008 %E2 - UTC <code>CurrentMaxDemandReceivedTime</code> 0x0702 0x0009 %E2 - UTC <code>DefaultUpdatePeriod</code> 0x0702 0x000A %20 - uint8 <code>FastPollUpdatePeriod</code> 0x0702 0x000B %20 - uint8 <code>CurrentBlockPeriodConsumptionDelivered</code> 0x0702 0x000C %25 - uint48 <code>DailyConsumptionTarget</code> 0x0702 0x000D %22 - uint24 <code>CurrentBlock</code> 0x0702 0x000E %30 - enum8 <code>ProfileIntervalPeriod</code> 0x0702 0x000F %30 - enum8 <code>IntervalReadReportingPeriod</code> 0x0702 0x0010 %21 - uint16 <code>PresetReadingTime</code> 0x0702 0x0011 %21 - uint16 <code>VolumePerReport</code> 0x0702 0x0012 %21 - uint16 <code>FlowRestriction</code> 0x0702 0x0013 %20 - uint8 <code>SupplyStatus</code> 0x0702 0x0014 %30 - enum8 <code>CurrentInletEnergyCarrierSummation</code> 0x0702 0x0015 %25 - uint48 <code>CurrentOutletEnergyCarrierSummation</code> 0x0702 0x0016 %25 - uint48 <code>InletTemperature</code> 0x0702 0x0017 %2A - int24 <code>OutletTemperature</code> 0x0702 0x0018 %2A - int24 <code>ControlTemperature</code> 0x0702 0x0019 %2A - int24 <code>CurrentInletEnergyCarrierDemand</code> 0x0702 0x001A %2A - int24 <code>CurrentOutletEnergyCarrierDemand</code> 0x0702 0x001B %2A - int24 <code>PreviousBlockPeriodConsumptionDelivered</code> 0x0702 0x001C %25 - uint48 <code>CompanyName</code> 0x0B01 0x0000 %42 - string <code>MeterTypeID</code> 0x0B01 0x0001 %21 - uint16 <code>DataQualityID</code> 0x0B01 0x0004 %21 - uint16 <code>CustomerName</code> 0x0B01 0x0005 %42 - string <code>Model</code> 0x0B01 0x0006 %41 - octstr <code>PartNumber</code> 0x0B01 0x0007 %41 - octstr <code>ProductRevision</code> 0x0B01 0x0008 %41 - octstr <code>SoftwareRevision</code> 0x0B01 0x000A %41 - octstr <code>UtilityName</code> 0x0B01 0x000B %42 - string <code>POD</code> 0x0B01 0x000C %42 - string <code>AvailablePower</code> 0x0B01 0x000D %2A - int24 <code>PowerThreshold</code> 0x0B01 0x000E %2A - int24 <code>ElectricalMeasurementType</code> 0x0B04 0x0000 %1B - map32 <code>DCVoltage</code> 0x0B04 0x0100 %29 - int16 <code>DCVoltageMin</code> 0x0B04 0x0101 %29 - int16 <code>DCVoltageMax</code> 0x0B04 0x0102 %29 - int16 <code>DCCurrent</code> 0x0B04 0x0103 %29 - int16 <code>DCCurrentMin</code> 0x0B04 0x0104 %29 - int16 <code>DCCurrentMax</code> 0x0B04 0x0105 %29 - int16 <code>DCPower</code> 0x0B04 0x0106 %29 - int16 <code>DCPowerMin</code> 0x0B04 0x0107 %29 - int16 <code>DCPowerMax</code> 0x0B04 0x0108 %29 - int16 <code>DCVoltageMultiplier</code> 0x0B04 0x0200 %21 - uint16 <code>DCVoltageDivisor</code> 0x0B04 0x0201 %21 - uint16 <code>DCCurrentMultiplier</code> 0x0B04 0x0202 %21 - uint16 <code>DCCurrentDivisor</code> 0x0B04 0x0203 %21 - uint16 <code>DCPowerMultiplier</code> 0x0B04 0x0204 %21 - uint16 <code>DCPowerDivisor</code> 0x0B04 0x0205 %21 - uint16 <code>ACFrequency</code> 0x0B04 0x0300 %21 - uint16 <code>ACFrequencyMin</code> 0x0B04 0x0301 %21 - uint16 <code>ACFrequencyMax</code> 0x0B04 0x0302 %21 - uint16 <code>NeutralCurrent</code> 0x0B04 0x0303 %21 - uint16 <code>TotalActivePower</code> 0x0B04 0x0304 %2B - int32 <code>TotalReactivePower</code> 0x0B04 0x0305 %2B - int32 <code>TotalApparentPower</code> 0x0B04 0x0306 %23 - uint32 <code>Measured1stHarmonicCurrent</code> 0x0B04 0x0307 %29 - int16 <code>Measured3rdHarmonicCurrent</code> 0x0B04 0x0308 %29 - int16 <code>Measured5thHarmonicCurrent</code> 0x0B04 0x0309 %29 - int16 <code>Measured7thHarmonicCurrent</code> 0x0B04 0x030A %29 - int16 <code>Measured9thHarmonicCurrent</code> 0x0B04 0x030B %29 - int16 <code>Measured11thHarmonicCurrent</code> 0x0B04 0x030C %29 - int16 <code>MeasuredPhase1stHarmonicCurrent</code> 0x0B04 0x030D %29 - int16 <code>MeasuredPhase3rdHarmonicCurrent</code> 0x0B04 0x030E %29 - int16 <code>MeasuredPhase5thHarmonicCurrent</code> 0x0B04 0x030F %29 - int16 <code>MeasuredPhase7thHarmonicCurrent</code> 0x0B04 0x0310 %29 - int16 <code>MeasuredPhase9thHarmonicCurrent</code> 0x0B04 0x0311 %29 - int16 <code>MeasuredPhase11thHarmonicCurrent</code> 0x0B04 0x0312 %29 - int16 <code>ACFrequencyMultiplier</code> 0x0B04 0x0400 %21 - uint16 <code>ACFrequencyDivisor</code> 0x0B04 0x0401 %21 - uint16 <code>PowerMultiplier</code> 0x0B04 0x0402 %23 - uint32 <code>PowerDivisor</code> 0x0B04 0x0403 %23 - uint32 <code>HarmonicCurrentMultiplier</code> 0x0B04 0x0404 %28 - int8 <code>PhaseHarmonicCurrentMultiplier</code> 0x0B04 0x0405 %28 - int8 <code>LineCurrent</code> 0x0B04 0x0501 %21 - uint16 <code>ActiveCurrent</code> 0x0B04 0x0502 %29 - int16 <code>ReactiveCurrent</code> 0x0B04 0x0503 %29 - int16 <code>RMSVoltage</code> 0x0B04 0x0505 %21 - uint16 <code>RMSVoltageMin</code> 0x0B04 0x0506 %21 - uint16 <code>RMSVoltageMax</code> 0x0B04 0x0507 %21 - uint16 <code>RMSCurrent</code> 0x0B04 0x0508 %21 - uint16 <code>RMSCurrentMin</code> 0x0B04 0x0509 %21 - uint16 <code>RMSCurrentMax</code> 0x0B04 0x050A %21 - uint16 <code>ActivePower</code> 0x0B04 0x050B %29 - int16 <code>ActivePowerMin</code> 0x0B04 0x050C %21 - uint16 <code>ActivePowerMax</code> 0x0B04 0x050D %21 - uint16 <code>ReactivePower</code> 0x0B04 0x050E %29 - int16 <code>ApparentPower</code> 0x0B04 0x050F %29 - int16 <code>PowerFactor</code> 0x0B04 0x0510 %28 - int8 <code>AverageRMSVoltageMeasurementPeriod</code> 0x0B04 0x0511 %21 - uint16 <code>AverageRMSOverVoltageCounter</code> 0x0B04 0x0512 %21 - uint16 <code>AverageRMSUnderVoltageCounter</code> 0x0B04 0x0513 %21 - uint16 <code>RMSExtremeOverVoltagePeriod</code> 0x0B04 0x0514 %21 - uint16 <code>RMSExtremeUnderVoltagePeriod</code> 0x0B04 0x0515 %21 - uint16 <code>RMSVoltageSagPeriod</code> 0x0B04 0x0516 %21 - uint16 <code>RMSVoltageSwellPeriod</code> 0x0B04 0x0517 %21 - uint16 <code>ACVoltageMultiplier</code> 0x0B04 0x0600 %21 - uint16 <code>ACVoltageDivisor</code> 0x0B04 0x0601 %21 - uint16 <code>ACCurrentMultiplier</code> 0x0B04 0x0602 %21 - uint16 <code>ACCurrentDivisor</code> 0x0B04 0x0603 %21 - uint16 <code>ACPowerMultiplier</code> 0x0B04 0x0604 %21 - uint16 <code>ACPowerDivisor</code> 0x0B04 0x0605 %21 - uint16 <code>DCOverloadAlarmsMask</code> 0x0B04 0x0700 %18 - map8 <code>DCVoltageOverload</code> 0x0B04 0x0701 %29 - int16 <code>DCCurrentOverload</code> 0x0B04 0x0702 %29 - int16 <code>ACAlarmsMask</code> 0x0B04 0x0800 %19 - map16 <code>ACVoltageOverload</code> 0x0B04 0x0801 %29 - int16 <code>ACCurrentOverload</code> 0x0B04 0x0802 %29 - int16 <code>ACActivePowerOverload</code> 0x0B04 0x0803 %29 - int16 <code>ACReactivePowerOverload</code> 0x0B04 0x0804 %29 - int16 <code>AverageRMSOverVoltage</code> 0x0B04 0x0805 %29 - int16 <code>AverageRMSUnderVoltage</code> 0x0B04 0x0806 %29 - int16 <code>RMSExtremeOverVoltage</code> 0x0B04 0x0807 %29 - int16 <code>RMSExtremeUnderVoltage</code> 0x0B04 0x0808 %29 - int16 <code>RMSVoltageSag</code> 0x0B04 0x0809 %29 - int16 <code>RMSVoltageSwell</code> 0x0B04 0x080A %29 - int16 <code>LineCurrentPhB</code> 0x0B04 0x0901 %21 - uint16 <code>ActiveCurrentPhB</code> 0x0B04 0x0902 %29 - int16 <code>ReactiveCurrentPhB</code> 0x0B04 0x0903 %29 - int16 <code>RMSVoltagePhB</code> 0x0B04 0x0905 %21 - uint16 <code>RMSVoltageMinPhB</code> 0x0B04 0x0906 %21 - uint16 <code>RMSVoltageMaxPhB</code> 0x0B04 0x0907 %21 - uint16 <code>RMSCurrentPhB</code> 0x0B04 0x0908 %21 - uint16 <code>RMSCurrentMinPhB</code> 0x0B04 0x0909 %21 - uint16 <code>RMSCurrentMaxPhB</code> 0x0B04 0x090A %21 - uint16 <code>ActivePowerPhB</code> 0x0B04 0x090B %29 - int16 <code>ActivePowerMinPhB</code> 0x0B04 0x090C %29 - int16 <code>ActivePowerMaxPhB</code> 0x0B04 0x090D %29 - int16 <code>ReactivePowerPhB</code> 0x0B04 0x090E %29 - int16 <code>ApparentPowerPhB</code> 0x0B04 0x090F %21 - uint16 <code>PowerFactorPhB</code> 0x0B04 0x0910 %28 - int8 <code>AverageRMSVoltageMeasurementPeriodPhB</code> 0x0B04 0x0911 %21 - uint16 <code>AverageRMSOverVoltageCounterPhB</code> 0x0B04 0x0912 %21 - uint16 <code>AverageRMSUnderVoltageCounterPhB</code> 0x0B04 0x0913 %21 - uint16 <code>RMSExtremeOverVoltagePeriodPhB</code> 0x0B04 0x0914 %21 - uint16 <code>RMSExtremeUnderVoltagePeriodPhB</code> 0x0B04 0x0915 %21 - uint16 <code>RMSVoltageSagPeriodPhB</code> 0x0B04 0x0916 %21 - uint16 <code>RMSVoltageSwellPeriodPhB</code> 0x0B04 0x0917 %21 - uint16 <code>LineCurrentPhC</code> 0x0B04 0x0A01 %21 - uint16 <code>ActiveCurrentPhC</code> 0x0B04 0x0A02 %29 - int16 <code>ReactiveCurrentPhC</code> 0x0B04 0x0A03 %29 - int16 <code>RMSVoltagePhC</code> 0x0B04 0x0A05 %21 - uint16 <code>RMSVoltageMinPhC</code> 0x0B04 0x0A06 %21 - uint16 <code>RMSVoltageMaxPhC</code> 0x0B04 0x0A07 %21 - uint16 <code>RMSCurrentPhC</code> 0x0B04 0x0A08 %21 - uint16 <code>RMSCurrentMinPhC</code> 0x0B04 0x0A09 %21 - uint16 <code>RMSCurrentMaxPhC</code> 0x0B04 0x0A0A %21 - uint16 <code>ActivePowerPhC</code> 0x0B04 0x0A0B %29 - int16 <code>ActivePowerMinPhC</code> 0x0B04 0x0A0C %29 - int16 <code>ActivePowerMaxPhC</code> 0x0B04 0x0A0D %29 - int16 <code>ReactivePowerPhC</code> 0x0B04 0x0A0E %29 - int16 <code>ApparentPowerPhC</code> 0x0B04 0x0A0F %21 - uint16 <code>PowerFactorPhC</code> 0x0B04 0x0A10 %28 - int8 <code>AverageRMSVoltageMeasurementPeriodPhC</code> 0x0B04 0x0A11 %21 - uint16 <code>AverageRMSOverVoltageCounterPhC</code> 0x0B04 0x0A12 %21 - uint16 <code>AverageRMSUnderVoltageCounterPhC</code> 0x0B04 0x0A13 %21 - uint16 <code>RMSExtremeOverVoltagePeriodPhC</code> 0x0B04 0x0A14 %21 - uint16 <code>RMSExtremeUnderVoltagePeriodPhC</code> 0x0B04 0x0A15 %21 - uint16 <code>RMSVoltageSagPeriodPhC</code> 0x0B04 0x0A16 %21 - uint16 <code>RMSVoltageSwellPeriodPhC</code> 0x0B04 0x0A17 %21 - uint16 <code>NumberOfResets</code> 0x0B05 0x0000 %21 - uint16 <code>PersistentMemoryWrites</code> 0x0B05 0x0001 %21 - uint16 <code>LastMessageLQI</code> 0x0B05 0x011C %20 - uint8 <code>LastMessageRSSI</code> 0x0B05 0x011D %20 - uint8 <code>LegrandOpt1</code> 0xFC01 0x0000 %09 - data16 <code>LegrandOpt2</code> 0xFC01 0x0001 %10 - bool <code>LegrandOpt3</code> 0xFC01 0x0002 %10 - bool <code>LegrandHeatingMode</code> 0xFC40 0x0000 %30 - enum8 <code>OppleMode</code> 0xFCC0 0x0009 %20 - uint8 <code>TerncyDuration</code> 0xFCCC 0x001A %21 - uint16 <code>TerncyRotate</code> 0xFCCC 0x001B %29 - int16 Tasmota includes plain text aliases for most of the common ZCL commands (click to expand) Alias Cluster Command <code>Identify</code> 0x0003 0x00 <code>IdentifyQuery</code> 0x0003 0x01 <code>AddGroup</code> 0x0004 0x00 <code>ViewGroup</code> 0x0004 0x01 <code>GetGroup</code> 0x0004 0x02 <code>GetAllGroups</code> 0x0004 0x02 <code>RemoveGroup</code> 0x0004 0x03 <code>RemoveAllGroups</code> 0x0004 0x04 <code>ViewScene</code> 0x0005 0x01 <code>RemoveScene</code> 0x0005 0x02 <code>RemoveAllScenes</code> 0x0005 0x03 <code>RecallScene</code> 0x0005 0x05 <code>GetSceneMembership</code> 0x0005 0x06 <code>PowerOffEffect</code> 0x0006 0x40 <code>PowerOnRecall</code> 0x0006 0x41 <code>PowerOnTimer</code> 0x0006 0x42 <code>LidlPower</code> 0x0006 0xFD <code>Power</code> 0x0006 0xFF <code>Dimmer</code> 0x0008 0x04 <code>DimmerUp</code> 0x0008 0x06 <code>DimmerDown</code> 0x0008 0x06 <code>DimmerStop</code> 0x0008 0x03 <code>ResetAlarm</code> 0x0009 0x00 <code>ResetAllAlarms</code> 0x0009 0x01 <code>Hue</code> 0x0300 0x00 <code>Sat</code> 0x0300 0x03 <code>HueSat</code> 0x0300 0x06 <code>Color</code> 0x0300 0x07 <code>CT</code> 0x0300 0x0A <code>RGB</code> 0x0300 0xF0 <code>ShutterOpen</code> 0x0102 0x00 <code>ShutterClose</code> 0x0102 0x01 <code>ShutterStop</code> 0x0102 0x02 <code>ShutterLift</code> 0x0102 0x05 <code>ShutterTilt</code> 0x0102 0x08 <code>Shutter</code> 0x0102 0xFF <code>LegrandMode</code> 0xFC40 0x00 <code>TuyaQuery</code> 0xEF00 0x03 <code>TuyaMCUVersion</code> 0xEF00 0x10 <code>Dimmer</code> 0x0008 0x00 <code>DimmerMove</code> 0x0008 0x01 <code>DimmerStepUp</code> 0x0008 0x02 <code>DimmerStepDown</code> 0x0008 0x02 <code>DimmerStep</code> 0x0008 0x02 <code>DimmerMove</code> 0x0008 0x05 <code>DimmerUp</code> 0x0008 0x06 <code>DimmerDown</code> 0x0008 0x06 <code>DimmerStop</code> 0x0008 0x07 <code>HueMove</code> 0x0300 0x01 <code>HueStepUp</code> 0x0300 0x02 <code>HueStepDown</code> 0x0300 0x02 <code>HueStep</code> 0x0300 0x02 <code>SatMove</code> 0x0300 0x04 <code>SatStep</code> 0x0300 0x05 <code>ColorMove</code> 0x0300 0x08 <code>ColorStep</code> 0x0300 0x09 <code>ColorTempMoveUp</code> 0x0300 0x4B <code>ColorTempMoveDown</code> 0x0300 0x4B <code>ColorTempMoveStop</code> 0x0300 0x4B <code>ColorTempMove</code> 0x0300 0x4B <code>ColorTempStepUp</code> 0x0300 0x4C <code>ColorTempStepDown</code> 0x0300 0x4C <code>ColorTempStep</code> 0x0300 0x4C <code>ArrowClick</code> 0x0005 0x07 <code>ArrowHold</code> 0x0005 0x08 <code>ArrowRelease</code> 0x0005 0x09 `` 0xEF00 0xFF <code>GPIdentify</code> 0xF021 0x00 <code>GPScene0</code> 0xF021 0x10 <code>GPScene1</code> 0xF021 0x11 <code>GPScene2</code> 0xF021 0x12 <code>GPScene3</code> 0xF021 0x13 <code>GPScene4</code> 0xF021 0x14 <code>GPScene5</code> 0xF021 0x15 <code>GPScene6</code> 0xF021 0x16 <code>GPScene7</code> 0xF021 0x17 <code>GPScene8</code> 0xF021 0x18 <code>GPScene9</code> 0xF021 0x19 <code>GPScene10</code> 0xF021 0x1A <code>GPScene11</code> 0xF021 0x1B <code>GPScene12</code> 0xF021 0x1C <code>GPScene13</code> 0xF021 0x1D <code>GPScene14</code> 0xF021 0x1E <code>GPScene15</code> 0xF021 0x1F <code>GPOff</code> 0xF021 0x20 <code>GPOn</code> 0xF021 0x21 <code>GPToggle</code> 0xF021 0x22 <code>GPRelease</code> 0xF021 0x23 <code>GPMoveUp</code> 0xF021 0x30 <code>GPMoveDown</code> 0xF021 0x31 <code>GPStepUp</code> 0xF021 0x32 <code>GPStepDown</code> 0xF021 0x33 <code>GPLevelStop</code> 0xF021 0x34 <code>GPMoveUpOnOff</code> 0xF021 0x35 <code>GPMoveDownOnOff</code> 0xF021 0x36 <code>GPStepUpOnOff</code> 0xF021 0x37 <code>GPStepDownOnOff</code> 0xF021 0x38 <code>GPHueStop</code> 0xF021 0x40 <code>GPMoveHueUp</code> 0xF021 0x41 <code>GPMoveHueDown</code> 0xF021 0x42 <code>GPStepHueUp</code> 0xF021 0x43 <code>GPStepHueDown</code> 0xF021 0x44 <code>GPSatStop</code> 0xF021 0x45 <code>GPMoveSatUp</code> 0xF021 0x46 <code>GPMoveSatDown</code> 0xF021 0x47 <code>GPStepSatUp</code> 0xF021 0x48 <code>GPStepSatDown</code> 0xF021 0x49 <code>GPMoveColor</code> 0xF021 0x4A <code>GPStepColor</code> 0xF021 0x4B <code>GPLockDoor</code> 0xF021 0x50 <code>GPUnlockDoor</code> 0xF021 0x51 <code>GPPress1of1</code> 0xF021 0x60 <code>GPRelease1of1</code> 0xF021 0x61 <code>GPPress1of2</code> 0xF021 0x62 <code>GPRelease1of2</code> 0xF021 0x63 <code>GPPress2of2</code> 0xF021 0x64 <code>GPRelease2of2</code> 0xF021 0x65 <code>GPShortPress1of1</code> 0xF021 0x66 <code>GPShortPress1of2</code> 0xF021 0x67 <code>GPShortPress2of2</code> 0xF021 0x68"},{"location":"Zigbee/#zigbee2tasmota-status-codes","title":"Zigbee2Tasmota Status Codes","text":"<p>You can inspect the log output to determine whether Zigbee2Tasmota started correctly. Zigbee2Tasmota sends several status messages to inform the MQTT host about initialization.</p> <pre><code>{\"ZbState\":{\"Status\":1,\"Message\":\"CC2530 booted\",\"RestartReason\":\"Watchdog\",\"MajorRel\":2,\"MinorRel\":6}}\n</code></pre> <ul> <li> <p><code>Status</code> contains a numeric code about the status message</p> Status code Description <code>0</code> initialization complete, Zigbee2Tasmota is running normally <code>1</code> booting <code>2</code> resetting CC2530 configuration <code>3</code> starting Zigbee coordinator <code>20</code> disabling Permit Join <code>21</code> allowing Permit Join for 60 seconds <code>22</code> allowing Permit Join for some period <code>23</code> Permit Join error <code>30</code> Zigbee device connects or reconnects <code>31</code> Received Node Descriptor information for a Zigbee device <code>32</code> Received the list of active endpoints for a Zigbee device <code>33</code> Received the simple Descriptor with active ZCL clusters for a Zigbee device <code>34</code> Device announced its IEEE address <code>40</code> Response from a device scan <code>50</code> reporting ZNP firmware version <code>51</code> reporting ZNP device information and associated devices <code>55</code> reporting EZSP firmware version <code>56</code> reporting EZSP information <code>98</code> error, unsupported CC2530 firmware <code>99</code> general error, Zigbee2Tasmota was unable to start </li> <li> <p><code>Message</code> (optional) a human-readable message</p> </li> <li>other fields depending on the message (e.g., Status=<code>50</code> or Status=<code>51</code>)</li> </ul>"},{"location":"Zigbee/#zigbee-internals","title":"Zigbee Internals","text":"<p>If you want a more technical explanation on how all this works read Zigbee-Internals</p>"},{"location":"changelog/","title":"Changelog","text":"<p>CHANGELOG.md tracks changes after 8.5.1</p>"},{"location":"changelog/#version-851-hannah","title":"Version 8.5.1 Hannah","text":"<ul> <li>Fix energy total counters #9263, #9266</li> <li>Fix crash in <code>ZbRestore</code></li> <li>Fix reset BMP sensors when executing command <code>SaveData</code> and define USE_DEEPSLEEP enabled #9300</li> <li>Fix <code>status 0</code> message when using define USE_MQTT_TLS due to small log buffer #9305</li> <li>Fix <code>status 13</code> exception 9 when more than one shutter is configured</li> <li>Fix <code>status 13</code> json message</li> <li>Fix Shelly 2.5 higher temperature regression from 8.2.0.1 #7991</li> <li>Change replace ArduinoJson with JSMN for JSON parsing</li> <li>Change <code>WakeUp</code> uses 256 steps instead of 100 #9241</li> <li>Add command <code>SetOption110 1</code> to disable Zigbee auto-config when pairing new devices</li> <li>Add command <code>SetOption111 1</code> to enable frequency output for buzzer GPIO #8994</li> <li>Add command <code>SetOption112 1</code> to enable friendly name in zigbee topic (use with SetOption89)</li> <li>Add <code>#define USE_MQTT_AWS_IOT_LIGHT</code> for password based AWS IoT authentication</li> <li>Add <code>#define MQTT_LWT_OFFLINE</code> and <code>#define MQTT_LWT_ONLINE</code> to user_config.h #9395</li> <li>Add new shutter modes #9244</li> <li>Add Zigbee auto-config when pairing</li> <li>Add support for MLX90640 IR array temperature sensor by Christian Baars</li> <li>Add support for VL53L1X time of flight sensor by Johann Obermeier</li> </ul>"},{"location":"changelog/#version-850-hannah","title":"Version 8.5.0 Hannah","text":"<ul> <li>Remove support for direct upgrade from versions before 6.6.0.11 to versions after 8.4.0.1</li> <li>Change references from http://thehackbox.org/tasmota/ to http://ota.tasmota.com/tasmota/</li> <li>Change triple-mode TLS via configuration in a single firmware (TLS AWS IoT, Letsencrypt and No-TLS)</li> <li>Change White blend mode to using command <code>SetOption 105</code> instead of <code>RGBWWTable</code></li> <li>Fix ESP32 PWM range</li> <li>Fix display power control #9114</li> <li>Add command <code>SetOption102 0/1</code> to set Baud rate for Teleinfo communication (0 = 1200 or 1 = 9600)</li> <li>Add command <code>SetOption103 0/1</code> to set TLS mode when TLS is selected</li> <li>Add command <code>SetOption104 1</code> to disable all MQTT retained messages</li> <li>Add command <code>SetOption105 1</code> to enable White Blend Mode</li> <li>Add command <code>SetOption106 1</code> to create a virtual White ColorTemp for RGBW lights</li> <li>Add command <code>SetOption107 0/1</code> to select virtual White as (0) Warm or (1) Cold</li> <li>Add command <code>SetOption108 0/1</code> to enable Teleinfo telemetry into Tasmota Energy MQTT (0) or Teleinfo only (1)</li> <li>Add command <code>SetOption109 1</code> to force gen1 Alexa mode, for Echo Dot 2nd gen devices only</li> <li>Add command <code>Restart 2</code> to halt system. Needs hardware reset or power cycle to restart #9046</li> <li>Add command <code>PowerDelta1</code> to <code>PowerDelta3</code> to trigger on up to three phases #9134</li> <li>Add Zigbee options to <code>ZbSend</code> <code>Config</code> and <code>ReadConfig</code></li> <li>Add Zigbee better support for IKEA Motion Sensor</li> <li>Add Zigbee web gui widget for Battery and Temp/Humidity/Pressure sensors</li> <li>Add Zigbee web ui for power metering plugs</li> <li>Add better configuration corruption recovery #9046</li> <li>Add virtual CT for 4 channels lights, emulating a 5th channel</li> <li>Add support for DYP ME007 ultrasonic distance sensor by Janusz Kostorz #9113</li> <li>Add ESP32 Analog input support for GPIO32 to GPIO39</li> <li>Add experimental support for ESP32 TTGO Watch and I2S Audio by Gerhard Mutz</li> </ul>"},{"location":"changelog/#version-840-george","title":"Version 8.4.0 George","text":"<ul> <li> BREAKING CHANGE  Remove Arduino ESP8266 Core support for versions before 2.7.1</li> <li> BREAKING CHANGE  Change to limited support of Arduino IDE as an increasing amount of features cannot be compiled with Arduino IDE</li> <li>Change IRRemoteESP8266 library from v2.7.6 to v2.7.8.10, fixing Samsung and Pioneer protocols #8938</li> <li>Change Adafruit_SGP30 library from v1.0.3 to v1.2.0 #8519</li> <li>Change Energy JSON Total field from <code>\"Total\":[33.736,11.717,16.978]</code> to <code>\"Total\":33.736,\"TotalTariff\":[11.717,16.978]</code></li> <li>Change Energy JSON ExportActive field from <code>\"ExportActive\":[33.736,11.717,16.978]</code> to <code>\"ExportActive\":33.736,\"ExportTariff\":[11.717,16.978]</code></li> <li>Change ESP32 USER GPIO template representation decreasing template message size</li> <li>Change define USE_TASMOTA_SLAVE into USE_TASMOTA_CLIENT</li> <li>Change commands <code>SlaveSend</code> and <code>SlaveReset</code> into <code>ClientSend</code> and <code>ClientReset</code></li> <li>Change all timer references from <code>Arm</code> to <code>Enable</code> in GUI, <code>Timer</code> command and JSON message</li> <li> BREAKING CHANGE  Change Domoticz commands prefix from <code>Domoticz</code> to <code>Dz</code></li> <li>Change Zigbee randomizing of parameters at first run or after Reset</li> <li>Fix escape of non-JSON received serial data #8329</li> <li>Fix exception or watchdog on rule re-entry #8757</li> <li>Add command <code>Rule0</code> to change global rule parameters</li> <li>Add command <code>Time 4</code> to display timestamp using milliseconds #8537</li> <li>Add command <code>SetOption94 0/1</code> to select MAX31855 or MAX6675 thermocouple support #8616</li> <li>Add command <code>SetOption97 0/1</code> to switch between Tuya serial speeds 9600 bps (0) or 115200 bps (1)</li> <li>Add command <code>SetOption98 0/1</code> to provide rotary rule triggers (1) instead of controlling light (0)</li> <li>Add command <code>SetOption99 0/1</code> to enable zero cross detection on PWM dimmer</li> <li>Add command <code>SetOption100 0/1</code> to remove Zigbee <code>ZbReceived</code> value from <code>{\"ZbReceived\":{xxx:yyy}}</code> JSON message</li> <li>Add command <code>SetOption101 0/1</code> to add the Zigbee source endpoint as suffix to attributes, ex <code>Power3</code> instead of <code>Power</code> if sent from endpoint 3</li> <li>Add command <code>DzSend&lt;type&gt; &lt;index&gt;,&lt;value1(;value2)|state&gt;</code> to send values or state to Domoticz</li> <li>Add command <code>Module2</code> to configure fallback module on fast reboot #8464</li> <li>Add command (<code>S</code>)<code>SerialSend6</code> \\&lt;comma separated values&gt; #8937</li> <li>Add commands <code>LedPwmOn 0..255</code>, <code>LedPwmOff 0..255</code> and <code>LedPwmMode1 0/1</code> to control led brightness by George #8491</li> <li>Add ESP32 ethernet commands <code>EthType 0/1</code>, <code>EthAddress 0..31</code> and <code>EthClockMode 0..3</code></li> <li>Add more functionality to command <code>Switchmode</code> 11 and 12 #8450</li> <li>Add rule trigger <code>System#Init</code> to allow early rule execution without wifi and mqtt initialized yet</li> <li>Add support for unique MQTTClient (and inherited fallback topic) by full Mac address using <code>mqttclient DVES_%12X</code> #8300</li> <li>Add wildcard pattern <code>?</code> for JSON matching in rules</li> <li>Add Three Phase Export Active Energy to SDM630 driver</li> <li>Add Zigbee options to <code>ZbSend</code> to write and report attributes</li> <li>Add Zigbee auto-responder for common attributes</li> <li>Add <code>CpuFrequency</code> to <code>status 2</code></li> <li>Add <code>FlashFrequency</code> to <code>status 4</code></li> <li>Add compile time interlock parameters #8759</li> <li>Add compile time user template #8766</li> <li>Add support for VEML6075 UVA/UVB/UVINDEX Sensor by device111 #8432</li> <li>Add support for VEML7700 Ambient light intensity Sensor by device111 #8432</li> <li>Add support for up to two BH1750 sensors controlled by commands <code>BH1750Resolution</code> and <code>BH1750MTime</code> #8139</li> <li>Add support for up to eight MCP9808 temperature sensors by device111 #8594</li> <li>Add support for BL0940 energy monitor as used in Blitzwolf BW-SHP10 #8175</li> <li>Add support for Telegram bot #8619</li> <li>Add support for HP303B Temperature and Pressure sensor by Robert Jaakke #8638</li> <li>Add support for Energy sensor (Denky) for French Smart Metering meter provided by global Energy Providers, need a adapter. See dedicated full blog about French teleinformation stuff</li> <li>Add support for ESP32 ethernet adding commands <code>Wifi 0/1</code> and <code>Ethernet 0/1</code> both default ON</li> <li>Add support for single wire LMT01 temperature Sensor by justifiably #8713</li> <li>Add support for rotary encoder as light dimmer and optional color temperature if button1 still pressed #8670</li> <li>Add support for switches/relays using an AC detection circuitry e.g. MOES MS-104B or BlitzWolf SS5 #8606</li> <li>Add support for Schneider Electric iEM3000 series Modbus energy meter by Marius Bezuidenhout</li> <li>Add support for Sonoff Zigbee Bridge as module 75 #8583</li> </ul>"},{"location":"changelog/#version-831-fred","title":"Version 8.3.1 Fred","text":"<ul> <li>Change Hass discovery from using Template or Module name to new Device name #8462</li> <li>Change KNX pow function to approximative pow saving 5k of code space</li> <li>Change Mutichannel Gas sensor pow function to approximative pow saving 5k of code space</li> <li>Change Quick Power Cycle detection from 4 to 7 power interrupts #4066</li> <li>Fix default state of <code>SetOption73 0</code> for button decoupling and send multi-press and hold MQTT messages</li> <li>Add command <code>DeviceName</code> defaults to FriendlyName1 and replaces FriendlyName1 in GUI</li> </ul>"},{"location":"changelog/#version-830-fred","title":"Version 8.3.0 Fred","text":"<ul> <li>Breaking Change Device Groups multicast address and port  8270</li> <li>Change PWM implementation to Arduino #7231 removing support for Core versions before 2.6.3</li> <li>Change default PWM Frequency to 977 Hz from 880 Hz</li> <li>Change minimum PWM Frequency from 100 Hz to 40 Hz</li> <li>Change flash access removing support for any Core before 2.6.3</li> <li>Change HM-10 sensor type detection and add features 7962</li> <li>Change light scheme 2,3,4 cycle time speed from 24,48,72,... seconds to 4,6,12,24,36,48,... seconds 8034</li> <li>Change remove floating point libs from IRAM</li> <li>Change remove MQTT Info messages on restart for DeepSleep Wake 8044</li> <li>Change IRremoteESP8266 library updated to v2.7.6</li> <li>Change HAss discovery by Federico Leoni 8370</li> <li>Fix possible Relay toggle on (OTA) restart</li> <li>Fix PWM flickering during wifi connection 8046</li> <li>Fix Zigbee sending wrong Sat value with Hue emulation</li> <li>Fix Zigbee crash with Occupancy sensor 8089</li> <li>Add Zigbee command <code>ZbRestore</code> to restore device configuration dumped with <code>ZbStatus 2</code></li> <li>Add Zigbee command <code>ZbUnbind</code></li> <li>Add Zigbee command <code>ZbBindState</code> and <code>manuf</code>attribute</li> <li>Add Zigbee command <code>ZbConfig</code> and configuration in Settings</li> <li>Add commands <code>CounterDebounceLow</code> and <code>CounterDebounceHigh</code> to control debouncing 8021</li> <li>Add commands <code>NrfPage</code>, <code>NrfIgnore</code>, <code>NrfScan</code> and <code>NrfBeacon</code> to NRF24 Bluetooth driver 8075</li> <li>Add commands <code>GlobalTemp</code> and <code>GlobalHum</code> to init sensor data 8152</li> <li>Add command <code>SO</code> as shortcut for command <code>SetOption</code></li> <li>Add command <code>SetOption41 &lt;x&gt;</code> to force sending gratuitous ARP every  seconds <li>Add command <code>SetOption73 1</code> for button decoupling and send multi-press and hold MQTT messages by Federico Leoni 8235</li> <li>Add command <code>SetOption90 1</code> to disable non-json MQTT messages 8044</li> <li>Add command <code>SetOption91 1</code> to enable fading at startup / power on</li> <li>Add command <code>SetOption92 1</code> to set PWM Mode from regular PWM to ColorTemp control (Xiaomi Philips ...)</li> <li>Add command <code>SetOption93 1</code> to control caching of compressed rules</li> <li>Add command <code>Sensor10 0/1/2</code> to control BH1750 resolution - 0 = High (default), 1 = High2, 2 = Low 8016</li> <li>Add command <code>Sensor10 31..254</code> to control BH1750 measurement time which defaults to 69 8016</li> <li>Add command <code>Sensor18 0..32000</code> to control PMS5003 sensor interval to extend lifetime by Gene Ruebsamen 8128</li> <li>Add command <code>DevGroupName</code> to specify up to four Device Group Names 8087</li> <li>Add command <code>DevGroupSend</code> to send an update to a Device Group 8093</li> <li>Add command <code>Ping</code> 7176</li> <li>Add command <code>Palette</code> to add the ability to specify a palette of colors 8150</li> <li>Add support for unreachable (unplugged) Zigbee devices in Philips Hue emulation and Alexa</li> <li>Add support for 64x48 SSD1306 OLED 6740</li> <li>Add support for Seven Segment display using HT16K33 8116</li> <li>Add support for up to four MQTT GroupTopics 8014</li> <li>Add support for longer template names</li> <li>Add support for an iAQ sensor 8107</li> <li>Add support for AS3935 Lightning Sensor by device111 8130</li> <li>Add console command history 7483, #8015</li> <li>Add quick wifi reconnect using saved AP parameters when <code>SetOption56 0</code> 3189</li> <li>Add more accuracy to GPS NTP server 8088</li> <li>Add support for analog anemometer by Matteo Albinola 8283</li> <li>Add support for OpenTherm by Yuriy Sannikov 8373</li> <li>Add support for Thermostat control by arijav 8212</li> <li>Add experimental basic support for Tasmota on ESP32 based on work by Joerg Schueler-Maroldt</li> <li>Add automatic compression of Rules to achieve ~60% compression by Stefan Hadinger</li> <li>Add rule trigger at root level like <code>on loadavg&lt;50 do power 2 endon</code> after <code>state</code> command</li>"},{"location":"changelog/#version-820-elliot","title":"Version 8.2.0 Elliot","text":"<ul> <li>Change default my_user_config.h driver and sensor support removing most sensors and adding most drivers to tasmota.bin</li> <li>Change DHT driver (7468, 7717)</li> <li>Change Lights: simplified gamma correction and 10 bits internal computation</li> <li>Change commands <code>Prefix</code>, <code>Ssid</code>, <code>StateText</code>, <code>NTPServer</code>, and <code>FriendlyName</code> displaying all items</li> <li>Change Zigbee command prefix from <code>Zigbee*</code> to <code>Zb*</code></li> <li>Change MQTT message size with additional 200 characters</li> <li>Change display of some date and time messages from <code>Wed Feb 19 10:45:12 2020</code> to <code>2020-02-19T10:45:12</code></li> <li>Change IRremoteESP8266 library updated to v2.7.4</li> <li>Fix <code>PowerDelta</code> zero power detection (7515)</li> <li>Fix <code>White</code> added to light status (7142)</li> <li>Fix <code>WakeUp &lt;x&gt;</code> ignores provided value (7473)</li> <li>Fix <code>RGBWWTable</code> ignored (7572)</li> <li>Fix commands <code>Display</code> and <code>Counter</code> from overruling command processing (7322)</li> <li>Fix Sonoff Bridge, Sc, L1, iFan03 and CSE7766 serial interface to forced speed, config and disable logging</li> <li>Fix Improved fade linearity with gamma correction</li> <li>Fix PWM flickering at low levels (7415)</li> <li>Fix LCD line and column positioning (7387)</li> <li>Fix Display handling of hexadecimal escape characters (7387)</li> <li>Fix exception 9 restart on log message in Ticker interrupt service routines NTP, Wemos and Hue emulation (7496)</li> <li>Fix Hass sensor discovery by Federico Leoni (7582, 7548)</li> <li>Fix MaxPower functionality (7647)</li> <li>Fix relation between Wifi RSSI and signal strength</li> <li>Add command <code>SetOption79 0/1</code> to enable reset of counters at teleperiod time by Andre Thomas (7355)</li> <li>Add command <code>SetOption82 0/1</code> to limit the CT range for Alexa to 200..380</li> <li>Add command <code>SetOption84 0/1</code> to send AWS IoT device shadow updates (alternative to retained)</li> <li>Add commands <code>SetOption85 0/1</code> and <code>DevGroupShare</code> supporting UDP Group command using <code>GroupTopic</code> without MQTT by Paul Diem (7790)</li> <li>Add command <code>SetOption86 0/1</code> for PWM dimmer to turn brightness LED's off 5 seconds after last change</li> <li>Add command <code>SetOption87 0/1</code> for PWM dimmer to turn red LED on when powered off</li> <li>Add command <code>SetOption88 0/1</code> for PWM dimmer to let buttons control remote devices</li> <li>Add command <code>SetOption89 0/1</code> for Zigbee distinct MQTT topics per device for SENSOR, allowing retained messages (7835)</li> <li>Add command <code>ShutterButton &lt;parameters&gt;</code> to control shutter(s) by to-scho (7403)</li> <li>Add commands <code>SwitchMode 8</code> ToggleMulti, <code>SwitchMode 9</code> FollowMulti and <code>SwitchMode 10</code> FollowMultiInverted (7522)</li> <li>Add commands <code>SwitchMode 11</code> PushHoldMulti and <code>SwitchMode 12</code> PushHoldInverted (7603)</li> <li>Add commands <code>SwitchMode 13</code> PushOn and <code>SwitchMode 14</code> PushOnInverted (7912)</li> <li>Add command <code>Buzzer -1</code> for infinite mode and command <code>Buzzer -2</code> for following led mode (7623)</li> <li>Add command <code>HumOffset -10.0 .. 10.0</code> to set global humidity sensor offset (7934)</li> <li>Add support for <code>AdcParam</code> parameters to control ADC0 Current Transformer Apparent Power formula by Jodi Dillon (7100)</li> <li>Add optional parameter <code>&lt;startcolor&gt;</code> to command <code>Scheme &lt;scheme&gt;, &lt;startcolor&gt;</code> to control initial start color</li> <li>Add web page sliders when <code>SetOption37 128</code> is active allowing control of white(s)</li> <li>Add SerialConfig to <code>Status 1</code></li> <li>Add BootCount Reset Time as BCResetTime to <code>Status 1</code></li> <li>Add WifiPower to <code>Status 5</code></li> <li>Add most SetOptions as defines to my_user_config.h</li> <li>Add optional Wifi AccessPoint passphrase define WIFI_AP_PASSPHRASE in my_user_config.h (7690)</li> <li>Add SoftwareSerial to CSE7766 driver allowing different GPIOs (7563)</li> <li>Add rule trigger on one level deeper using syntax with two <code>#</code> like <code>on zbreceived#vibration_sensor#aqaracubeside=0 do ...</code></li> <li>Add Zigbee attribute decoder for Xiaomi Aqara Cube</li> <li>Add <code>ZbZNPReceived</code>and <code>ZbZCLReceived</code> being published to MQTT when <code>SetOption66 1</code></li> <li>Add Zigbee enhanced commands decoding, added <code>ZbPing</code></li> <li>Add Zigbee features and improvements</li> <li>Add Zigbee support for Hue emulation by Stefan Hadinger</li> <li>Add HAss Discovery support for Button and Switch triggers by Federico Leoni (7901)</li> <li>Add Dew Point to Temperature and Humidity sensors</li> <li>Add optional support for Prometheus using file xsns_91_prometheus.ino (7216)</li> <li>Add support for gzipped binaries</li> <li>Add support for Romanian language translations by Augustin Marti</li> <li>Add support for sensors DS18x20 and DHT family on Shelly 1 and Shelly 1PM using Shelly Add-On adapter (7469)</li> <li>Add support to BMP driver to enter reset state (sleep enable) when deep sleep is used in Tasmota</li> <li>Add support for DS1624, DS1621 Temperature sensor by Leonid Myravjev</li> <li>Add support for NRF24L01 as BLE-bridge for Mijia Bluetooth sensors by Christian Baars (7394)</li> <li>Add support for MI-BLE sensors using HM-10 Bluetooth 4.0 module by Christian Staars (7683)</li> <li>Add support for FiF LE-01MR energy meter by saper-2 (7584)</li> <li>Add support for Sensors AHT10 and AHT15 by Martin Wagner (7596)</li> <li>Add support for Wemos Motor Shield V1 by Denis Sborets (7764)</li> <li>Add support for La Crosse TX23 Anemometer by Norbert Richter (3146, 7765)</li> <li>Add support for Martin Jerry/acenx/Tessan/NTONPOWER SD0x PWM dimmer switches by Paul Diem (7791)</li> <li>Add support for UDP Group control without MQTT by Paul Diem (7790)</li> <li>Add support for Jarolift rollers by Keeloq algorithm</li> <li>Add support for MaxBotix HRXL-MaxSonar ultrasonic range finders by Jon Little (7814)</li> <li>Add support for HDC1080 Temperature and Humidity sensor by Luis Teixeira (7888)</li> <li>Add support for ElectriQ iQ-wifiMOODL RGBW light by Ian King (7947)</li> </ul>"},{"location":"nymea/","title":"nymea","text":"<p>nymea is an open source IoT platform. It can be used in various IoT applications such as smart home appliances, IoT technology gateways or general \"thing\" automation. nymea is technology agnostic and uses a plugin framework to extend functionality towards different device types, online services or data transports. Using nymea-plugin-tasmota it can also interact with tasmota based devices.</p> <p>nymea consists of three main parts: nymea:core, nymea:app and nymea:cloud.</p> <p>nymea:core is the core piece of nymea and is meant to be installed on a persistent node in your network or the internet. It connects to devices and services and manages them using automation rules. Typically, nymea:core is installed on an IoT \"box\", such as a raspberry Pi or the nymea:box, however, it can be installed on Desktop PCs (Linux based), cloud servers, VM's or any other machine running Linux. nymea hosts pre-built packages for Ubuntu and Debian GNU/Linux as well as Snap packages which can be installed on any major Linux Distribution.</p> <p>nymea:app is the frontend for nymea:core. It is used to configure the system as well as interact with it. It allows to control configured IoT devices, monitor states and logs and set up automation rules.</p> <p>nymea:cloud is the cloud connectivity suite. It is optional (nymea can work fully offline, not requiring any registration or online service at all) and extends nymea with features such as easy remote connection without having to fiddle with firewall ports and allows to send nymea:core push notifications to phones/tablets having nymea:app installed.</p> <p> </p> <p>More information about nymea can be found at the nymea website and the nymea wiki.</p>"},{"location":"nymea/#configuring-sonofftasmota-devices-for-use-with-nymea","title":"Configuring Sonoff/Tasmota devices for use with nymea","text":""},{"location":"nymea/#requirements","title":"Requirements","text":"<ul> <li>A working nymea installation (see nymea wiki for install instructions)</li> <li>A Tasmota device connected to the same network as nymea:core</li> </ul> <p>Once those above requirements are met, use nymea:app to add the sonoff device. Depending how you've set it up it will appear as a switch or light bulb in nymea.</p> <p> </p>"},{"location":"nymea/#how-does-it-work","title":"How does it work?","text":"<p>nymea:core features an internal MQTT broker. There is no need to set up an external MQTT broker. Also, during the setup, nymea will configure the Tasmota device. The only thing required is the IP address of the Tasmota device. Please note that for this to work the nymea internal MQTT broker needs to be enabled. This is the default setting so there should not be the need to manually configure anything unless you've previously disabled the internal MQTT broker.</p>"},{"location":"nymea/#support-troubleshooting-contributing","title":"Support, troubleshooting, contributing","text":"<p>You are welcome to report issues and feature requests in the nymea bug trackers on nymea:core's github page and the nymea app github page as well as ask for help or just discuss about Tasmota and nymea in the nymea forum.</p>"},{"location":"openHAB/","title":"openHAB","text":"<p>The \"open Home Automation Bus\" (openHAB) is an open source, technology agnostic home automation platform which runs as the center of your smart home. Besides more than 400 other add-ons for all kinds of technologies, openHAB provides an MQTT add-on (\"binding\") to interface with systems like Tasmota.</p> <p>By following the guide below you'll be able to observe, control and manage your Tasmota modules from your openHAB system. If you are new to openHAB, please learn about the basic concepts and the initial setup. The below article will not cover any basics which are out of scope to the Tasmota integration.</p> <p>Example Result: The screenshot of an openHAB Sitemap below features a few Sonoff modules for lighting, two modified Sonoff Basic with sensors for temperature and humidity readings and two Sonoff Pow for power measurements of a washing machine and dishwasher:</p> <p></p>"},{"location":"openHAB/#requirements","title":"Requirements","text":"<ul> <li>Working openHAB installation (see documentation)</li> <li>Configured Tasmota device (accessible from your local network)</li> <li>MQTT broker available (e.g. Eclipse Mosquitto via openHABian)</li> <li>A basic understanding of MQTT </li> <li>Working and tested connection between openHAB and the MQTT broker</li> <li>(optional) Standalone MQTT client (e.g. MQTT Explorer) to observe and identify messages on the MQTT broker</li> </ul> <p>If not done yet, you first need to install and activate the MQTT and the JsonPath transformation, e.g. via the openHAB Paper UI Add-ons section. </p> <p>MQTTv1 vs. MQTTv2 Binding Information</p> <p>Please note that since <code>mqtt1</code> is a legacy binding for years now, it will no longer receive updates or fixes. See older version of this tutorial on how to integrate Tasmota using this binding if you are using <code>mqtt1</code> - but be advised that it's not recommended anymore, it's better to upgrade to MQTTv2 binding. See openHAB announcement of MQTTv2 for details on how to change your configuration.</p>"},{"location":"openHAB/#mqttv2-integration","title":"MQTTv2 Integration","text":"<p>Configuration is split throughout some openHAB configuration files. First we need to set up a MQTT connection and Tasmota things - you will need a separate thing for every Tasmota device you use.</p> <p>In the example configuration you can see a non-default Full Topic definition. For your real world device simply set up items for all Tasmota MQTT topics you are interested in. Examples for most needed topics are given below, see section Discovering Interesting Topics below on how to watch the raw MQTT data. Some Tasmota topics are JSON encoded, the <code>JSONPATH</code> transformation can be used to extract this data.</p> <p>You'll need to replace the given example device topic name (e.g. \"Tasmota_TH\") by the one chosen for your module.</p> <p>.things File:</p> <pre><code>Bridge mqtt:broker:myMQTTBroker \"My only one and best MQTT server\"\n[\n    host=\"IPofBroker\",\n    username=\"myUser\",\n    password=\"myPassword\",\n    clientID=\"myopenHABMQTTClient\"\n]\n\nThing mqtt:topic:tasmota:tasmota_TH \"Light_TH\" (mqtt:broker:myMQTTBroker) [ availabilityTopic=\"tele/tasmota_TH/LWT\", payloadAvailable=\"Online\", payloadNotAvailable=\"Offline\" ] {\n    Channels:\n        // Sonoff Basic / Sonoff S20 Smart Socket (Read and switch on-state)\n        Type switch : PowerSwitch  [stateTopic=\"stat/tasmota_TH/POWER\",   commandTopic=\"cmnd/tasmota_TH/POWER\", on=\"ON\", off=\"OFF\"]\n\n        // Sonoff Pow (read current wattage; for read and switch on-state see above)\n        Type number : Power                 [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.Power\"]\n        // More power readouts\n        Type number : ApparentPower         [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.ApparentPower\"]\n        Type number : ReactivePower         [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.ReactivePower\"]\n        Type number : PowerFactor           [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.Factor\"]\n        Type number : Voltage               [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.Voltage\"]\n        Type number : Current               [stateTopic=\"tele/tasmota_TH/SENSOR\", transformationPattern=\"JSONPATH:$.ENERGY.Current\"]\n\n        // devices including AM2301 temperature sensor\n        Type number : Temperature  [stateTopic=\"tele/tasmota_TH/SENSOR\",  transformationPattern=\"JSONPATH:$.AM2301.Temperature\"]\n\n        // Tasmota Status\n        Type string : Version      [stateTopic=\"stat/tasmota_TH/STATUS2\", transformationPattern=\"JSONPATH:$.StatusFWR.Version\"]\n        Type switch : Reachable    [stateTopic=\"tele/tasmota_TH/LWT\",     transformationPattern=\"MAP:tasmota-reachable.map\"]\n\n        // Diagnostics: Define specific for what you really need on a regular basis, use standalone MQTT client for troubleshooting\n        Type string : RestartReason [stateTopic=\"tele/tasmota_TH/INFO3\", transformationPattern=\"JSONPATH:$.Info3.RestartReason\"]\n        // old one, have to query it\n        Type string : Version2      [stateTopic=\"stat/tasmota_TH/STATUS2\", transformationPattern=\"JSONPATH:$.StatusFWR.Version\"]\n        // new one - comes for free at startup\n        Type string : Version       [stateTopic=\"tele/tasmota_TH/INFO1\", transformationPattern=\"JSONPATH:$.Info1.Version\"]\n        Type number : RSSI          [stateTopic=\"tele/tasmota_TH/STATE\", transformationPattern=\"JSONPATH:$.Wifi.RSSI\"]\n        Type string : WifiDowntime  [stateTopic=\"tele/tasmota_TH/STATE\", transformationPattern=\"JSONPATH:$.Wifi.Downtime\"]\n        Type number : LoadAvg       [stateTopic=\"tele/tasmota_TH/STATE\", transformationPattern=\"JSONPATH:$.LoadAvg\"]\n        Type number : Uptime        [stateTopic=\"tele/tasmota_TH/STATE\", transformationPattern=\"JSONPATH:$.UptimeSec\"]\n        Type string : Result        [stateTopic=\"stat/tasmota_TH/RESULT\"]\n}\n</code></pre> <p>.items File:</p> <p>For every property your device exposes, you need to define an item, linked to corresponding channel of your Tasmota thing.</p> <pre><code>// device specific properties\n// replace \"TH\" with device ID from MQTT topic\n// replace \"My Socket\" to desirecd name\n// Comment out items/links that are not used/needed\n\nSwitch             Tasmota_TH_Switch      \"My Socket: Switch\" &lt;switch&gt;                  {channel=\"mqtt:topic:tasmota:tasmota_TH:PowerSwitch\"}\n\nNumber:Power                 Tasmota_TH_Power               \"My Socket: Power [%.1f W]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:Power\"}\nNumber:Power                 Tasmota_TH_ApparentPower       \"My Socket: Apparent Power [%.1f VA]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:ApparentPower\"}\nNumber:Power                 Tasmota_TH_ReactivePower       \"My Socket: Reactive Power [%.1f VAr]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:ReactivePower\"}\nNumber:Dimensionless         Tasmota_TH_PowerFactir         \"My Socket: Power Factor [%.2f]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:PowerFactor\"}\nNumber:ElectricPotential     Tasmota_TH_Voltage             \"My Socket: Voltage [%.0f V]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:Voltage\"}\nNumber:ElectricCurrent       Tasmota_TH_Current             \"My Socket: Current [%.2f A]\" &lt;energy&gt;           {channel=\"mqtt:topic:tasmota:tasmota_TH:Current\"}\nNumber:Temperature           Tasmota_TH_Temp                \"My Socket: Temperature [%.1f \u00b0C]\" &lt;temperature&gt; {channel=\"mqtt:topic:tasmota:tasmota_TH:Temperature\"}\n\n// Tasmota Status\nString             Tasmota_TH_Version   \"My Socket: Tasmota Version [%s]\" {channel=\"mqtt:topic:tasmota:tasmota_TH:Version\", channel=\"mqtt:topic:tasmota:tasmota_TH:Version2\"}\nSwitch             Tasmota_TH_Reachable \"My Socket: Reachable\"            {channel=\"mqtt:topic:tasmota:tasmota_TH:Reachable\"}\n\n// Diagnostics\nString               Tasmota_TH_RestartReason \"My Socket: Restart Reason [%s]\"  {channel=\"mqtt:topic:tasmota:tasmota_TH:RestartReason\"}\nNumber:Dimensionless Tasmota_TH_RSSI          \"My Socket: Signal [%d %%]\"  &lt;qualityofservice&gt;     {channel=\"mqtt:topic:tasmota:tasmota_TH:RSSI\"}\nString               Tasmota_TH_WifiDowntime  \"My Socket: Wifi Downtime [%s]\"   {channel=\"mqtt:topic:tasmota:tasmota_TH:WifiDowntime\"}\nNumber:Dimensionless Tasmota_TH_LoadAvg       \"My Socket: Load [%d %%]\"         {channel=\"mqtt:topic:tasmota:tasmota_TH:LoadAvg\"}\nString               Tasmota_TH_Result        \"My Socket: Result [%s]\"          {channel=\"mqtt:topic:tasmota:tasmota_TH:Result\"}\nNumber:Time          Tasmota_TH_Uptime        \"My Socket: Uptime [%.1f s]\"      {channel=\"mqtt:topic:tasmota:tasmota_TH:Uptime\"}\n\n// Maintenance (described below)\nString Tasmota_TH_Action \"My Socket: Tasmota Action\"\n</code></pre> <p>.sitemap File:</p> <pre><code>// device specific properties\nSwitch item=Switch_TH\nText   item=Switch_TH_Temp\nText   item=Power\n\n// Maintenance\nSwitch item=Tasmota_Action mappings=[restart=\"Restart\", queryFW=\"Query FW\", upgrade=\"Upgrade FW\"]\n\n// Tasmota Status\nText item=Tasmota_Version\nText item=Tasmota_Reachable\n\n// Diagnostics\nText item=Tasmota_RestartReason\nText item=Tasmota_RSSI\nText item=Tasmota_WifiDowntime\nText item=Tasmota_LoadAvg\nText item=Tasmota_Uptime label=\"Uptime [%.1f d]\"\nText item=Tasmota_Result\n</code></pre> <p>The \"LWT\" topic (\"Last Will and Testament\") will receive regular \"Online\" messages by the module and an \"Offline\" message a short time after the module is disconnected, generated by the MQTT broker. These messages are transformed to a valid <code>ON</code>/<code>OFF</code> state by the MAP transformation. Of course you can implement <code>Unreachable</code> instead of <code>Reachable</code> if you prefer. The following transformation file is needed:</p> <p>tasmota-reachable.map F\u00edle:</p> <pre><code>Online=ON\nOffline=OFF\n</code></pre>"},{"location":"openHAB/#maintenance-actions","title":"Maintenance Actions","text":"<p>A home automation system setup would not be complete without a certain maintenance automation!</p> <p>Add the following elements to your openHAB setup to be able to perform actions on your Tasmota devices by the press of a simple sitemap button.</p> <p>The example below includes upgrading the firmware of all devices. A shoutout to @evilgreen for the idea and a big thanks to @smadds for providing the idea of a public firmware server.</p> <p></p> <p>tasmota_maintenance.rules File for Maintenance Actions:</p> <pre><code>// Work with grouptopic, addressing ALL modules at once, easiest solution\nval tasmota_device_ids = newArrayList(\"tasmotas\")\n// OR\n// Work with a list of selected Tasmota modules\n//val tasmota_device_ids = newArrayList(\n//    \"tasmota_A00EEA\",\n//    //\u2026 add all your modules here, don't forget some!\n//    \"tasmota_E8A6E4\"\n//)\n\nrule \"Tasmota Maintenance\"\nwhen\n    Item Tasmota_Action received command\nthen\n    logInfo(\"tasmota_maintenance.rules\", \"Tasmota Maintenance on all devices: \" + receivedCommand)\n    val actionsBroker = getActions(\"mqtt\",\"mqtt:broker:MyMQTTBroker\") // change to your broker name!\n    for (String device_id : tasmota_device_ids) {\n        switch (receivedCommand) {\n            case \"restart\" :\n                actionsBroker.publishMQTT( \"cmnd/\" + device_id + \"/restart\", \"1\")\n            case \"queryFW\" :\n                actionsBroker.publishMQTT( \"cmnd/\" + device_id + \"/status\", \"2\")\n            case \"upgrade\" : {\n                // one could change OTA URL using MQTT but if you use different breeds (basic, ir, sensor, ...) of Tasmota, you would lose them\n                // it's better to configure OTA url at each device (default) and just trigger upgrade - they will use OTA URL saved in your device.\n                //actionsBroker.publishMQTT( \"cmnd/\" + device_id + \"/otaurl\", \"http://ota.tasmota.com/tasmota/release/tasmota.bin\")\n                actionsBroker.publishMQTT( \"cmnd/\" + device_id + \"/upgrade\", \"1\")\n            }\n        }\n    }\n    createTimer(now.plusSeconds(1))[|Tasmota_Action.postUpdate(UNDEF)]\nend\n</code></pre>"},{"location":"openHAB/#comparing-your-device-firmware-with-the-current-tasmota-github-release","title":"Comparing your device firmware with the current Tasmota GitHub Release","text":"<p>Knowing your devices firmware version(s) is good. Being able to compare it with the current release directly, is even better. You can achieve this by combining the maintenance actions with the openHAB http binding, the JsonPath transformation and the GitHub API.</p> <p>Just extend the maintenance setup with the following Item and config (make sure you have the binding addon <code>http</code> and transformation addon <code>jsonpath</code> installed):</p> <p>tasmota.things:</p> <pre><code>Thing http:url:TasmotaVersion [\n    baseURL=\"https://api.github.com/repos/arendst/Tasmota/tags\",\n    refresh=86400] { // refresh once a day\n        Channels:\n            Type string : Version \"Version\" [ stateTransformation=\"JSONPATH:$[0].name\" ]\n}\n</code></pre> <p>tasmota.items:</p> <pre><code>String Tasmota_Current_FW_Available \"Current Release [%s]\" {channel=\"http:url:TasmotaVersion:Version\"}\n</code></pre> <p>With this item in your sitemap, you will now see the latest release/tag from Tasmota repository.</p>"},{"location":"openHAB/#discovering-interesting-topics","title":"Discovering Interesting Topics","text":"<p>Additional or further interesting topics are easily identified by reading up on the Tasmota wiki and by subscribing to the modules topics. Subscribe to all topics of one module using MQTT wildcard topic string <code>+/tasmota_XYZ/#</code> (string depends on your user-configured Topic/FullTopic). Configure items for the identified topics similar to the ones below.</p> <p>Example: MQTT messages published by a Sonoff Pow module are shown below (using mosquitto_sub). The module reports its device state and energy readings periodically. In the second half of the example the module relay was switched into the OFF position.</p> <pre><code>$ mosquitto_sub -h localhost -t \"+/tasmota_E8A6E4/#\" -v\n\ntele/tasmota-E8A6E4/LWT Online\ntele/tasmota-E8A6E4/UPTIME {\"Time\":\"2017-07-25T12:02:00\", \"Uptime\":68}\ntele/tasmota-E8A6E4/STATE {\"Time\":\"2017-07-25T12:06:28\", \"Uptime\":68, \"Vcc\":3.122, \"POWER\":\"POWER\", \"Wifi\":{\"AP\":1, \"SSID\":\"HotelZurBirke\", \"RSSI\":100, \"APMac\":\"24:65:11:BF:12:D8\"}}\ntele/tasmota-E8A6E4/ENERGY {\"Time\":\"2017-07-25T12:06:28\", \"Total\":0.640, \"Yesterday\":0.007, \"Today\":0.003, \"Period\":0, \"Power\":0, \"Factor\":0.00, \"Voltage\":0, \"Current\":0.000}\ntele/tasmota-E8A6E4/STATE {\"Time\":\"2017-07-25T12:11:28\", \"Uptime\":68, \"Vcc\":3.122, \"POWER\":\"POWER\", \"Wifi\":{\"AP\":1, \"SSID\":\"HotelZurBirke\", \"RSSI\":100, \"APMac\":\"24:65:11:BF:12:D8\"}}\ntele/tasmota-E8A6E4/ENERGY {\"Time\":\"2017-07-25T12:11:28\", \"Total\":0.640, \"Yesterday\":0.007, \"Today\":0.003, \"Period\":0, \"Power\":0, \"Factor\":0.00, \"Voltage\":0, \"Current\":0.000}\ncmnd/tasmota-E8A6E4/POWER OFF\nstat/tasmota-E8A6E4/RESULT {\"POWER\":\"OFF\"}\nstat/tasmota-E8A6E4/POWER OFF\n</code></pre> <p>Following this method, the behavior-linked messages can be identified and bound to openHAB items.</p>"},{"location":"openHAB/#community-forum","title":"Community Forum","text":"<p>For more openHAB related details and questions, please visit the openHAB community forum thread on Sonoff and Tasmota.</p>"},{"location":"otto/","title":"Otto","text":"<p>\u0298tt\u0298 is a web interface for controlling devices, such as Tasmota enabled devices, over MQTT.</p> <p>See the quick-start guide and instructions for Tasmota devices.</p> <p></p>"},{"location":"changelogs/changelog-7.2/","title":"Changelog 7.2","text":""},{"location":"changelogs/changelog-7.2/#version-720-constance","title":"Version 7.2.0 Constance","text":"<ul> <li>Change Exception reporting removing exception details from <code>Status 1</code> and consolidated in <code>Status 12</code> if available</li> <li>Change HTTP CORS from command <code>SetOption73 0/1</code> to <code>Cors &lt;cors_domain&gt;</code> allowing user control of specific CORS domain by Shantur Rathore (#7066)</li> <li>Change GUI Shutter button text to Up and Down Arrows based on PR by Xavier Muller (#7166)</li> <li>Change amount of supported DHT sensors from 3 to 4 by Xavier Muller (#7167)</li> <li>Change some Settings locations freeing up space for future single char allowing variable length text</li> <li>Change tasmota-basic.bin and FIRMWARE_BASIC to tasmota-lite.bin and FIRMWARE_LITE</li> <li>Fix flashing H801 led at boot by Stefan Hadinger (#7165, #649)</li> <li>Fix duplicated <code>Backlog</code> when using Event inside a Backlog by Adrian Scillato (#7178, #7147)</li> <li>Fix Gui Timer when using a negative zero offset of -00:00 by Peter Ooms (#7174)</li> <li>Fix DeepSleep in case there is no wifi by Stefan Bode (#7213)</li> <li>Fix Fade would ignore <code>savedata 0</code> and store to flash anyways (#7262)</li> <li>Fix Arduino IDE compile error (#7277)</li> <li>Fix no AP on initial install (#7282)</li> <li>Add command <code>SerialConfig 0..23</code> or <code>SerialConfig 8N1</code> to select Serial Config based in PR by Luis Teixeira (#7108)</li> <li>Add command <code>Sensor34 9 &lt;weight code&gt;</code> to set minimum delta to trigger JSON message by @tobox (#7188)</li> <li>Add rule var <code>%topic%</code> by Adrian Scillato (#5522)</li> <li>Add rule triggers <code>tele-wifi1#xxx</code> by Adrian Scillato (#7093)</li> <li>Add SML bus decoder syntax support for byte order by Gerhard Mutz (#7112)</li> <li>Add experimental support for stepper motor shutter control by Stefan Bode</li> <li>Add optional USE_MQTT_TLS to tasmota-minimal.bin by Bohdan Kmit (#7115)</li> <li>Add save call stack in RTC memory in case of crash, command <code>Status 12</code> to dump the stack by Stefan Hadinger</li> <li>Add Home Assistant force update by Frederico Leoni (#7140, #7074)</li> <li>Add Wifi Signal Strength in dBm in addition to RSSI Wifi Experience by Andreas Schultz (#7145)</li> <li>Add Yaw, Pitch and Roll support for MPU6050 by Philip Barclay (#7058)</li> <li>Add reporting of raw weight to JSON from HX711 to overcome auto-tare functionality by @tobox (#7171)</li> <li>Add Zigbee support for Xiaomi Aqara Vibration Sensor and Presence Sensor by Stefan Hadinger</li> <li>Add Shutter functions ramp up/down and MQTT reporting by Stefan Bode</li> <li>Add fallback support from version 8.x</li> <li>Add restriction if fallback firmware is incompatible with settings resulting in unreachable device</li> <li>Add support for DHT12 Temperature and Humidity sensor by Stefan Oskamp</li> </ul>"},{"location":"changelogs/changelog-8.1/","title":"Changelog 8.1","text":""},{"location":"changelogs/changelog-8.1/#version-810-doris","title":"Version 8.1.0 Doris","text":"<ul> <li>Change Settings text handling allowing variable length text within a total text pool of 699 characters</li> <li>Change Smoother <code>Fade</code> using 100Hz instead of 20Hz animation (#7179)</li> <li>Change number of rule <code>Var</code>s and <code>Mem</code>s from 5 to 16 (#4933)</li> <li>Change number of <code>FriendlyName</code>s from 4 to 8</li> <li>Add commands <code>WebButton1</code> until <code>WebButton16</code> to support user defined GUI button text (#7166)</li> <li>Add support for max 150 characters in most command parameter strings (#3686, #4754)</li> <li>Add support for GPS as NTP server by Christian Baars and Adrian Scillato</li> <li>Add support for <code>AdcParam</code> parameters to control ADC0 Moisture formula by Federico Leoni (#7309)</li> <li>Add Zigbee coalesce sensor attributes into a single message</li> <li>Add Zigbee better support for Xiaomi Double Switch and Xiaomi Vibration sensor</li> <li>Add Deepsleep start delay based on Teleperiod if <code>Teleperiod</code> differs from 10 or 300</li> </ul>"},{"location":"changelogs/changelog-8.2/","title":"Changelog 8.2","text":""},{"location":"changelogs/changelog-8.2/#version-820-elliot","title":"Version 8.2.0 Elliot","text":"<ul> <li>Change default my_user_config.h driver and sensor support removing most sensors and adding most drivers to tasmota.bin</li> <li>Change DHT driver (7468, 7717)</li> <li>Change Lights: simplified gamma correction and 10 bits internal computation</li> <li>Change commands <code>Prefix</code>, <code>Ssid</code>, <code>StateText</code>, <code>NTPServer</code>, and <code>FriendlyName</code> displaying all items</li> <li>Change Zigbee command prefix from <code>Zigbee*</code> to <code>Zb*</code></li> <li>Change MQTT message size with additional 200 characters</li> <li>Change display of some date and time messages from <code>Wed Feb 19 10:45:12 2020</code> to <code>2020-02-19T10:45:12</code></li> <li>Change IRremoteESP8266 library updated to v2.7.4</li> <li>Fix <code>PowerDelta</code> zero power detection (7515)</li> <li>Fix <code>White</code> added to light status (7142)</li> <li>Fix <code>WakeUp &lt;x&gt;</code> ignores provided value (7473)</li> <li>Fix <code>RGBWWTable</code> ignored (7572)</li> <li>Fix commands <code>Display</code> and <code>Counter</code> from overruling command processing (7322)</li> <li>Fix Sonoff Bridge, Sc, L1, iFan03 and CSE7766 serial interface to forced speed, config and disable logging</li> <li>Fix Improved fade linearity with gamma correction</li> <li>Fix PWM flickering at low levels (7415)</li> <li>Fix LCD line and column positioning (7387)</li> <li>Fix Display handling of hexadecimal escape characters (7387)</li> <li>Fix exception 9 restart on log message in Ticker interrupt service routines NTP, Wemos and Hue emulation (7496)</li> <li>Fix Hass sensor discovery by Federico Leoni (7582, 7548)</li> <li>Fix MaxPower functionality (7647)</li> <li>Fix relation between Wifi RSSI and signal strength</li> <li>Add command <code>SetOption79 0/1</code> to enable reset of counters at teleperiod time by Andre Thomas (7355)</li> <li>Add command <code>SetOption82 0/1</code> to limit the CT range for Alexa to 200..380</li> <li>Add command <code>SetOption84 0/1</code> to send AWS IoT device shadow updates (alternative to retained)</li> <li>Add commands <code>SetOption85 0/1</code> and <code>DevGroupShare</code> supporting UDP Group command using <code>GroupTopic</code> without MQTT by Paul Diem (7790)</li> <li>Add command <code>SetOption86 0/1</code> for PWM dimmer to turn brightness LED's off 5 seconds after last change</li> <li>Add command <code>SetOption87 0/1</code> for PWM dimmer to turn red LED on when powered off</li> <li>Add command <code>SetOption88 0/1</code> for PWM dimmer to let buttons control remote devices</li> <li>Add command <code>SetOption89 0/1</code> for Zigbee distinct MQTT topics per device for SENSOR, allowing retained messages (7835)</li> <li>Add command <code>ShutterButton &lt;parameters&gt;</code> to control shutter(s) by to-scho (7403)</li> <li>Add commands <code>SwitchMode 8</code> ToggleMulti, <code>SwitchMode 9</code> FollowMulti and <code>SwitchMode 10</code> FollowMultiInverted (7522)</li> <li>Add commands <code>SwitchMode 11</code> PushHoldMulti and <code>SwitchMode 12</code> PushHoldInverted (7603)</li> <li>Add commands <code>SwitchMode 13</code> PushOn and <code>SwitchMode 14</code> PushOnInverted (7912)</li> <li>Add command <code>Buzzer -1</code> for infinite mode and command <code>Buzzer -2</code> for following led mode (7623)</li> <li>Add command <code>HumOffset -10.0 .. 10.0</code> to set global humidity sensor offset (7934)</li> <li>Add support for <code>AdcParam</code> parameters to control ADC0 Current Transformer Apparent Power formula by Jodi Dillon (7100)</li> <li>Add optional parameter <code>&lt;startcolor&gt;</code> to command <code>Scheme &lt;scheme&gt;, &lt;startcolor&gt;</code> to control initial start color</li> <li>Add web page sliders when <code>SetOption37 128</code> is active allowing control of white(s)</li> <li>Add SerialConfig to <code>Status 1</code></li> <li>Add BootCount Reset Time as BCResetTime to <code>Status 1</code></li> <li>Add WifiPower to <code>Status 5</code></li> <li>Add most SetOptions as defines to my_user_config.h</li> <li>Add optional Wifi AccessPoint passphrase define WIFI_AP_PASSPHRASE in my_user_config.h (7690)</li> <li>Add SoftwareSerial to CSE7766 driver allowing different GPIOs (7563)</li> <li>Add rule trigger on one level deeper using syntax with two <code>#</code> like <code>on zbreceived#vibration_sensor#aqaracubeside=0 do ...</code></li> <li>Add Zigbee attribute decoder for Xiaomi Aqara Cube</li> <li>Add <code>ZbZNPReceived</code>and <code>ZbZCLReceived</code> being published to MQTT when <code>SetOption66 1</code></li> <li>Add Zigbee enhanced commands decoding, added <code>ZbPing</code></li> <li>Add Zigbee features and improvements</li> <li>Add Zigbee support for Hue emulation by Stefan Hadinger</li> <li>Add HAss Discovery support for Button and Switch triggers by Federico Leoni (7901)</li> <li>Add Dew Point to Temperature and Humidity sensors</li> <li>Add optional support for Prometheus using file xsns_91_prometheus.ino (7216)</li> <li>Add support for gzipped binaries</li> <li>Add support for Romanian language translations by Augustin Marti</li> <li>Add support for sensors DS18x20 and DHT family on Shelly 1 and Shelly 1PM using Shelly Add-On adapter (7469)</li> <li>Add support to BMP driver to enter reset state (sleep enable) when deep sleep is used in Tasmota</li> <li>Add support for DS1624, DS1621 Temperature sensor by Leonid Myravjev</li> <li>Add support for NRF24L01 as BLE-bridge for Mijia Bluetooth sensors by Christian Baars (7394)</li> <li>Add support for MI-BLE sensors using HM-10 Bluetooth 4.0 module by Christian Staars (7683)</li> <li>Add support for FiF LE-01MR energy meter by saper-2 (7584)</li> <li>Add support for Sensors AHT10 and AHT15 by Martin Wagner (7596)</li> <li>Add support for Wemos Motor Shield V1 by Denis Sborets (7764)</li> <li>Add support for La Crosse TX23 Anemometer by Norbert Richter (3146, 7765)</li> <li>Add support for Martin Jerry/acenx/Tessan/NTONPOWER SD0x PWM dimmer switches by Paul Diem (7791)</li> <li>Add support for UDP Group control without MQTT by Paul Diem (7790)</li> <li>Add support for Jarolift rollers by Keeloq algorithm</li> <li>Add support for MaxBotix HRXL-MaxSonar ultrasonic range finders by Jon Little (7814)</li> <li>Add support for HDC1080 Temperature and Humidity sensor by Luis Teixeira (7888)</li> <li>Add support for ElectriQ iQ-wifiMOODL RGBW light by Ian King (7947)</li> </ul>"},{"location":"devices/","title":"Index","text":"<p>Visit Tasmota Supported Devices Repository for a complete list of devices working with Tasmota.  </p> <p>Devices listed here are the ones existing as modules in Tasmota.</p>"},{"location":"devices/4CH-Wifi-Socket-with-USB-Charger-SA-P402A/","title":"4CH Wifi Socket with USB Charger SA P402A","text":""},{"location":"devices/4CH-Wifi-Socket-with-USB-Charger-SA-P402A/#products","title":"Products","text":"<ul> <li>WiFi-Socket-Smart-Power-Strip at aliexpress</li> <li>AKA: SA-P402A BY-V1.1. 180823</li> <li>Wifi Smart Power Strip 4 EU Outlets Plug with 4 USBCharging Port at aliexpress also at Amazon.de as AOFO ZLD-44EU-W</li> <li>Koogeek Wifi Smart USB Power Strip Socket at aliexpress</li> <li>AKA: 0710033644644 / KLOE4</li> <li>Woox R4028 EU Smart Power Strip with 3 EU Plug and 4 USB charging Ports</li> </ul>"},{"location":"devices/4CH-Wifi-Socket-with-USB-Charger-SA-P402A/#opening","title":"Opening","text":"<p>To open take a very small screwdriver to pull out the six feet. Don't remove the rubber plates, it won't help.</p> <p></p>"},{"location":"devices/4CH-Wifi-Socket-with-USB-Charger-SA-P402A/#flashing","title":"Flashing","text":"<p>You'll have to connect GPIO0 manually, the switch is connected to GPIO1. It marked the pin in the picture. Because the TYWE2S has 2mm pitch, I made a little adapter to 2,54mm pitch. Then it can easy soldered to the first four pins. From left to right 3,3V, Gnd, Rx, Tx.</p> <p></p>"},{"location":"devices/4CH-Wifi-Socket-with-USB-Charger-SA-P402A/#configuration","title":"Configuration","text":"<p>Configure the USB-Charger as number five, then the next socket as number one and so on.  This is the configuration:</p> <p></p> <ul> <li>For the other model (Koogeek and AOFO) the GPIO connections are a bit different:</li> <li>LED:      GPIO1</li> <li>Switch:   GPIO3</li> <li>Socket 1:     GPIO5</li> <li>Socket 2:     GPIO4</li> <li>Socket 3:     GPIO12</li> <li>Socket 4:     GPIO13</li> <li> <p>USB:      GPIO14</p> </li> <li> <p>For the model Woox R4028 the GPIO connections are a bit different ( only 3 EU Plugs):</p> </li> <li>LED:      GPIO1</li> <li>Switch:   GPIO3</li> <li>Socket 1:     GPIO5</li> <li>Socket 2:     GPIO4</li> <li>Socket 3:     GPIO13</li> <li>USB:      GPIO14</li> </ul>"},{"location":"devices/Arilux-LC02/","title":"Arilux LC02","text":"<p>This device is a RGBW led controller and need a different setup against the ex Arilux LC01</p> <p>You can configure it as a \"generic module\"</p> <p>And set the GPIO as follow:</p> <p>Red: * D1 GPIO5 = 33 PWM1</p> <p>Blue: * D6 GPIO12 = 35 PWM3</p> <p>White: * D7 GPIO13 = 36 PWM4</p> <p>Green: * D5 GPIO14 = 34 PWM2</p> <p>Learn more about Arilux devices</p>"},{"location":"devices/Arilux-LC04/","title":"Arilux AL-LC04","text":"<p>(WIFI Smart RGBW Controller With 24-key IR Remote, Working Voltage: DC 9-12V, Output Current: RGBW, 4*4A)</p> <p>These devices can be configured as \"generic module\" with this GPIO configuration:</p> <ul> <li>GPIO04 = [51] IRrecv</li> <li>GPIO05 = [38] PWM2 (G)</li> <li>GPIO12 = [39] PWM3 (R)</li> <li>GPIO14 = [37] PWM1 (B)</li> <li>GPIO13 = [40] PWM4 (W) [Only for RGBW-Stripe]</li> </ul> <p>A later version has been found to use the following configuration:</p> <ul> <li>GPIO04 = [51] IRrecv</li> <li>GPIO05 = [38] PWM2 (G)</li> <li>GPIO13 = [39] PWM3 (R)</li> <li>GPIO12 = [37] PWM1 (B)</li> <li>GPIO15 = [40] PWM4 (W) [Only for RGBW-Stripe]</li> </ul> <p>Note: as of #5523 IRCodes are now 64 bits.</p> <p>Copy this Code to your console to use the 24 Button IR Remote</p> <pre><code>rule1\non IrReceived#Data=0x00FFB04F do power1 on endon\non IrReceived#Data=0x00FFF807 do power1 off endon\non IrReceived#Data=0x00FF906F do dimmer + endon\non IrReceived#Data=0x00FFB847 do dimmer - endon\non IrReceived#Data=0x00FFB24D do scheme 0 endon\non IrReceived#Data=0x00FF00FF do scheme 4 endon\non IrReceived#Data=0x00FF58A7 do scheme 2 endon\non IrReceived#Data=0x00FF30CF do scheme 3 endon\n</code></pre> <pre><code>rule2\non IrReceived#Data=0x00FF9867 do color2 #FF0000 endon\non IrReceived#Data=0x00FFE817 do color2 #470D00 endon\non IrReceived#Data=0x00FF02FD do color2 #381600 endon\non IrReceived#Data=0x00FF50AF do color2 #331E00 endon\non IrReceived#Data=0x00FF38C7 do color2 #332800 endon\non IrReceived#Data=0x00FFD827 do color2 #00FF00 endon\non IrReceived#Data=0x00FF48B7 do color2 #00330A endon\non IrReceived#Data=0x00FF32CD do color2 #003314 endon\non IrReceived#Data=0x00FF7887 do color2 #00331E endon\n</code></pre> <pre><code>rule3\non IrReceived#Data=0x00FF28D7 do color2 #003328 endon\non IrReceived#Data=0x00FF8877 do color2 #0000FF endon\non IrReceived#Data=0x00FF6897 do color2 #0A0033 endon\non IrReceived#Data=0x00FF20DF do color2 #140033 endon\non IrReceived#Data=0x00FF708F do color2 #140033 endon\non IrReceived#Data=0x00FFF00F do color2 #280033 endon\non IrReceived#Data=0x00FFA857 do color2 #FFFFFF endon\n</code></pre> <p>and then activate the rules</p> <p><code>Backlog rule1 1; rule2 1; rule3 1</code></p> <p>Learn more about Arilux devices</p>"},{"location":"devices/Armtronix-Dimmers/","title":"Armtronix Dimmers","text":"<p>There is a small company making dimmers in about the same formfactor as a sonoff dual and single. These Single and Dual dimmer boards have open source firmware. </p> <p>Supported since version 6.4.0 as ARMTR Dimmer (56) </p>"},{"location":"devices/Armtronix-Dimmers/#hardware","title":"Hardware","text":"<p>The dimmers contain an ESP8266 for the wifi connection and an Atmega328 which monitors the mains frequency and dimm the lights using a triac and phase controlled dimming. Communication between the two is done using the serial port at 115200 baud. The dimmers contain extra connections (pin headers) for a 10K potentiometer. When this one is connected you get 10 step dimming of the lights which overrides the tasmota dimm level. This feature also works when the Tasmota firmware is non-functional, so it is nice as a fail safe feature. The setting of the potentiometer is fed back to the Tasmota firmware, so when the potentiometer dimmer is turned and the Tasmota setting overridden, the value in the Tasmota channel is representable of the dimmer value. </p>"},{"location":"devices/Armtronix-Dimmers/#warnings","title":"WARNINGS","text":"<p>Phase dimming is not for all lights. Most incandescent bulbs will work, but for LED and CCFL bulbs you will need the special dimmable versions of these lights. The large Blue/Yellow Swedish furniture store has some nice ones. Because these dimmers come in a small package, they lack a bit on the safety and interference side. A good idea would be to add a 1A fuse in the AC line and a R/C Snubber on the output. I also read somewhere that they work less well on 110VAC but this could probably be solved using a firmware update. The ESP8266 and Atmega are isolated from Mains. The used 220v-5V converter is the tried and tested HiLink 5V 0.6A PM01, but without the case.</p>"},{"location":"devices/Armtronix-Dimmers/#software","title":"Software","text":"<p>For now, to use these dimmers you need to take it apart and flash new firmware to the ESP8266 and the Atmega328p using the Arduino IDE. The whole process is quite well documented for the single and dual dimmers. But you do need a USB to serial bridge, at best one with the DTR and RTS signals broken out as well. The software can be found in two Github repositories, for the single and dual dimmer.</p> <p>The Armtronix dimmer can be used in the Tasmota firmware by uncommenting the line <code>#define USE_ARMTRONIX_DIMMERS</code> in my_user_config.h and setting the module to ARMTR Dimmer. </p> <p>The Dual dimmer has a dual color led, which for now shows the wifi status of the Tasmota firmware. But this can be changed in the Tasmota firmware.</p>"},{"location":"devices/BlitzWolf-BW-SHP4-UK-Version/","title":"BlitzWolf BW SHP4 UK Version","text":"<ul> <li>Product Page: https://www.amazon.co.uk/gp/product/B07GJ26TCQ</li> </ul>"},{"location":"devices/BlitzWolf-BW-SHP4-UK-Version/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>MAKE SURE YOU DON'T HAVE IT PLUGGED IN WHEN DOING ANY OF THIS INCLUDING FLASHING - YOU HAVE BEEN WARNED.</p> <p>AS ALWAYS, YOU DO ANY OF THIS AT YOUR OWN RISK.</p>"},{"location":"devices/BlitzWolf-BW-SHP4-UK-Version/#overview","title":"Overview","text":"<p>The UK version of the BW SHP works perfectly as module number 45 (BlitzWolf SHP) but is challenging to flash with Tasmota firmware for two reasons:</p> <ol> <li> <p>The case is glued; this is relatively easy to overcome as you can insert a very thin screwdriver into the case then simply slide it all the way around the perimeter to free off the glue.</p> </li> <li> <p>A much bigger issue is that the programming pins for the esp8266 are underneath the PCB very close to the case, so there's no way to get to them easily. This is the biggest challenge to installing Tasmota.</p> </li> </ol> <p>There are three choices here:</p> <ol> <li> <p>Open the case, unsolder the main PCB from the live and neutral pins. This is very difficult to do without deforming the plastic protection on the pins themselves and needs a powerful soldering iron.</p> </li> <li> <p>Open the case, bend the main PCB up from the case. I've done one this way and it's possible, but not ideal as the copper live and neutral bars could crack from fatigue.</p> </li> </ol> <p>In either of these two methods, you also have to glue the case back together before the plug is safe to use, otherwise if you try and pull it out of a socket the cover simply comes off, exposing all the mains potentials.</p> <ol> <li>Make a slot in the bottom of the case, exposing the programming pins. This is my recommended way of doing it because it doesn't risk damaging the case or having it come apart from improper gluing, nor does it potentially fatigue the power pins or deform their safety plastic. However it does leave a big hole in the bottom of the case!</li> </ol> <p>That said, the hole is only accessible when the plug is not in a socket and you can always cover it with more plastic later.</p>"},{"location":"devices/BlitzWolf-BW-SHP4-UK-Version/#holes-in-the-base-method","title":"Holes in the base method","text":"<p>If you want to go for method 3 ie hole in the base, this is where they should be. There's a better picture of this area of the PCB further down this page on a version I removed from its case.</p> <p></p>"},{"location":"devices/BlitzWolf-BW-SHP4-UK-Version/#opening-the-case","title":"Opening the case","text":"<p>If you really feel a need to open the case - not recommended - get something very thin and fairly strong, push it into the base and pry a little until it goes in 3-4 millimetres. Then slowly rotate the plug with the wedge held in the opening so you end up pushing the top of the case away from the base all the way around.</p> <p></p> <p>Once you're done, this is what you'll find inside.</p> <p></p> <p>Gently pull the white shutter mechanism upwards and off the copper pins - it comes away very smoothly and easily but be careful to hold upright so the little spring doesn't pop out and disappear.</p> <p>To get at the programming pins you then either have to desolder the live and neutral from the PCB and lift the whole thing off - strongly recommend you don't do this as you will almost certainly deform the plastic protecting the pins - or you will need to bend the PCB gently upwards so you can get at the underside. If you do that it will look like this.....</p> <p></p> <p>It's then pretty easy to flash using the pin connections I've annotated on the drawing - make sure you power it from low voltage though - DON'T EVER CONNECT TO THE MAINS TO FLASH OR WHEN CASE IS OPEN.</p> <p>Once done, bend the PCB back into place, pop the white shutter assembly back on top and put the two case halves together with strong glue.</p> <p>MAKE SURE THE GLUE IS WELL HELD AS OTHERWISE WHEN YOU PULL THE PLUG OUT OF A SOCKET THE TOP COULD COME OFF, EXPOSING ALL THE LIVE CONNECTIONS. </p> <p>This is why I DON'T recommend opening the case to flash the firmware but instead suggest cutting a slot in the base and cover it afterwards.</p>"},{"location":"devices/BlitzWolf-SHP2/","title":"BlitzWolf SHP2","text":"<p>The BlitzWolf BW-SHP2, HomeCube SP1, and Teckin SP22 are basically the same device barring the branding.  </p> <p>  September 2019 - Recent versions of the Teckin SP22 have been redesigned with a Tuya WR2 Wi-Fi module based on the Realtek RTL8710BN. Since these are not ESP82xx based, Tasmota will not function on this newer version of the device. </p> <p>Product Page: - BlitzWolf BW-SHP2 - Gosund-SP1</p>"},{"location":"devices/BlitzWolf-SHP2/#ota-install","title":"OTA install","text":"<p>  October 2019 - As far as the newer firmware versions and shipments are delivered, the devices possibly won't work with this method. Try it at your own discretion. </p> <p>Since SHP2 is one of those Tuya based devices this OTA Tasmota installation method works just fine: https://github.com/ct-Open-Source/tuya-convert</p> <p>The Tuya-convert has a built in Tasmota v6.5.0 basic(but you can define any firmware during the install), remember, that basic version doesn't come with homeassistant auto discovery support, but Tasmota OTA works as expected. </p> <p>This method does't need any wiring. </p>"},{"location":"devices/BlitzWolf-SHP2/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p>"},{"location":"devices/BlitzWolf-SHP2/#step-1","title":"Step 1.","text":"<p>Be sure it is NOT plugged in! Remove the 4 triangle screws. Triangular 2.3mm Screwdriver required (a Torx T6 works well too)! </p>"},{"location":"devices/BlitzWolf-SHP2/#step-2","title":"Step 2.","text":"<p>Solder cables to the ESP Pins  </p>"},{"location":"devices/BlitzWolf-SHP2/#step-3","title":"Step 3.","text":"<p>  For version 2.3 and 2.4, see: devices/Gosund-SP1 . </p> <p>Connect serial adapter and make a shortwire between Pin IO0 and GND during startup. (For entering flashmode) RX and TX must be crossed. </p>"},{"location":"devices/BlitzWolf-SHP2/#step-4","title":"Step 4.","text":"<p>Flash Tasmota</p>"},{"location":"devices/BlitzWolf-SHP2/#openhab-configuration","title":"OpenHab configuration","text":"<p>sonoff.items: <pre><code>Switch BlitzwoIFSHP2 \"Switch\"  { mqtt=\"&gt;[broker:cmnd/BlitzwoIFSHP2/POWER:command:*:default],&lt;[broker:stat/BlitzwoIFSHP2/POWER:state:default]\" }\nNumber Power_Total \"Total: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Total)]\" }\nNumber Power_Today \"Today: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Today)]\" }\nNumber Power_Yesterday \"Yesterday: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]\" }\nNumber Power \"Power: [%.1f Watt]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Power)]\" }\nNumber Voltage \"Voltage: [%.0f V]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Voltage)]\" }\nNumber Current \"Current: [%.3f A]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Current)]\" }\nNumber Factor \"Factor: [%.2f]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Factor)]\" }\n</code></pre></p> <p>default.sitemap: <pre><code>Switch item=BlitzwoIFSHP2 label=\"BlitzWoIF SHP2\" icon=\"socket\" mappings=[OFF=\"Off\",ON=\"On\"]     \nText item=Power label=\"Power: [%.1f Watt]\" icon=\"energy\"\nText item=Voltage label=\"Voltage: [%.0f V]\" icon=\"energy\"\nText item=Current label=\"Current: [%.3f A]\" icon=\"energy\"\nText item=Factor label=\"Factor: [%.2f]\" icon=\"energy\"\nText item=Power_Total label=\"Power Total: [%.3f kWh]\" icon=\"energy\"\nText item=Power_Today label=\"Power Today: [%.3f kWh]\" icon=\"energy\"\nText item=Power_Yesterday label=\"Power Yesterday: [%.3f kWh]\" icon=\"energy\"\n</code></pre></p>"},{"location":"devices/BlitzWolf-SHP2/#home-assistant-configuration","title":"Home Assistant configuration","text":"<p>configuration.yaml <pre><code>switch:\n  - platform: mqtt\n    name: \"Blitzwolf\"\n    state_topic: \"stat/blitzwolf/POWER\"\n    command_topic: \"cmnd/blitzwolf/POWER\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    retain: false\n\nsensor:\n  - platform: mqtt\n    name: \"Blitzwolf Energy Today\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Today\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Yesterday\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Yesterday\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Total\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Total\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Power\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Power\"] }}'\n    unit_of_measurement: \"W\"\n  - platform: mqtt\n    name: \"Blitzwolf Voltage\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Voltage\"] }}'\n    unit_of_measurement: \"V\"\n  - platform: mqtt\n    name: \"Blitzwolf Power Factor\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Factor\"] }}'\n</code></pre></p>"},{"location":"devices/BlitzWolf-SHP2/#attention","title":"Attention","text":"<p>There is a newer hardware revision (v2.3) which is supported too. Use latest release. See also devices/Gosund-SP1</p>"},{"location":"devices/BlitzWolf-SHP6/","title":"BlitzWolf SHP6","text":"<p>The BlitzWolf BW-SHP6, Gosund SP111, and the Nous A1 are basically the same device, barring the branding.  </p> <p>Product page: - BlitzWolf\u00ae BW-SHP6 - 2300W EU WIFI Smart Socket - Gosund SP111 - Nous A1</p> <p>Device needs exact calibration with a load &gt;=60 Watt to gain good results! For further infos see Issue #4727</p>"},{"location":"devices/BlitzWolf-SHP6/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>There are currently at least two versions of this device. The (newer) Version has exposed contacts with holes for all connections necessary to flash tasmota, while the old requires soldering of cables to some points.</p> <p>For the older Version:</p>"},{"location":"devices/BlitzWolf-SHP6/#step-1","title":"Step 1","text":"<p>Disconnect device from power source!</p>"},{"location":"devices/BlitzWolf-SHP6/#step-2","title":"Step 2","text":"<p>Remove one screw on the back of the device. PH1 screwdriver required.</p> <p></p>"},{"location":"devices/BlitzWolf-SHP6/#step-3","title":"Step 3","text":"<p>Undo 2 screws. PH1 screwdriver required. Disconnect antenna.</p> <p></p>"},{"location":"devices/BlitzWolf-SHP6/#step-4","title":"Step 4","text":"<p>Carefully remove PCB from casing for easier soldering. * Don't stress antenna cable too much. * Don't lose metal tube.</p>"},{"location":"devices/BlitzWolf-SHP6/#step-5","title":"Step 5","text":"<p>Solder cables to the ESP Pins.</p> <p>SHP6 10A model: </p> <p>SHP6 15A model: </p> <p>If you do not want to solder you can try using crocodile clips and manually push a jumper cable first to IO0 (enter flash mode while booting, i.e. connect IO0 to ground) and then during flashing push a jumper to TX. Just be careful to not cause any short-circuit with the clips on the other side of the pads.</p> <p>Crocodile clips</p>"},{"location":"devices/BlitzWolf-SHP6/#step-6","title":"Step 6","text":"<p>Connect serial adapter and make a shortwire between Pin IO0 and GND during startup (for entering flashmode).</p> <p></p>"},{"location":"devices/BlitzWolf-SHP6/#step-7","title":"Step 7","text":"<p>Erase flash to avoid issues with dropping WiFi connection.</p> <p>Example using esptool: <pre><code>esptool.py --port COM3 erase_flash\n</code></pre></p>"},{"location":"devices/BlitzWolf-SHP6/#step-8","title":"Step 8","text":"<p>Flash Tasmota.</p>"},{"location":"devices/BlitzWolf-SHP6/#step-9","title":"Step 9","text":"<p>Select the correct configuration under Configuration -&gt; Configure Module or apply correct template:</p> <ul> <li>SHP6 10A model</li> <li>SHP6 15A model</li> </ul>"},{"location":"devices/BlitzWolf-SHP6/#as-an-alternative-for-steps-3-to-5","title":"As an alternative for steps 3 to 5:","text":"<p>The following programming adapter could be an option, which requires no soldering or significant disassembly on the SHP-6. It significantly reduces the effort of reflashing multiple SHP-6 units. Thingiverse link</p> <p></p>"},{"location":"devices/BlitzWolf-SHP6/#for-version-2-for-steps-3-to-5","title":"For Version 2 for steps 3 to 5:","text":"<p>The new Version has exposed pads with holes for Ground, Reset, TX, RX, Vcc 3.3.V and GPIO0. YOu can use small jumper cables to directly connect a programmer, so no further disassembly is required.  </p> <p>NOTE: If Tasmotizer or esptool timeouts, can't find your socket and nothing seems working, before tearing your hair out try swapping TX and RX connections on your serial adapter, i.e. TX on board connect to RX on adapter and similarly RX on board to TX on adapter.</p> <p>NOTE2: GPIO0 can stay connected to GND always.</p>"},{"location":"devices/BlitzWolf-SHP6/#for-version-2-alternative-layout","title":"For version 2 (alternative layout)","text":"<p>In case that device is not booting in flash mode - then your pinout is different - assume that GPIO0 is Reset pin, and put it to ground before powering on device.</p> <p></p>"},{"location":"devices/BlitzWolf-SHP6/#other-photos","title":"Other photos","text":""},{"location":"devices/BlitzWolf-SHP6/#power-monitoring-calibration","title":"Power monitoring calibration","text":"<p>Approach the calibration using the Method 2. If not satisfied with the results, you could mod the SMD direct measure resistor or mitigate this using a Tasmota set of rules (values valid only for the 10A model):</p> <pre><code>Rule1 ON energy#power&lt;=100 DO Currentcal 2500 BREAK ON energy#power&lt;=500 DO Currentcal 2635 BREAK ON energy#power&lt;=1000 DO Currentcal 2788 BREAK ON energy#power&lt;=1500 DO Currentcal 2942 BREAK ON energy#power&lt;=2000 DO Currentcal 3095 BREAK ON energy#power&lt;=2500 DO Currentcal 3249 BREAK ON energy#power&gt;2500 DO Currentcal 3402 BREAK \nRule1 1\n</code></pre> <p>Take the CurrentCal values above as a first approach and should be corrected through the Tasmota Method 2 calibration procedure: [[devices/Power-Monitoring-Calibration]]</p>"},{"location":"devices/BlitzWolf-SHP6/#home-assistant-configuration","title":"Home Assistant configuration","text":"<pre><code>switch:\n  - platform: mqtt\n    name: \"Blitzwolf\"\n    state_topic: \"stat/blitzwolf/POWER\"\n    command_topic: \"cmnd/blitzwolf/POWER\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    retain: false\n\nsensor:\n  - platform: mqtt\n    name: \"Blitzwolf Energy Today\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Today\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Yesterday\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Yesterday\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Total\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Total\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Power\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Power\"] }}'\n    unit_of_measurement: \"W\"\n  - platform: mqtt\n    name: \"Blitzwolf Voltage\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Voltage\"] }}'\n    unit_of_measurement: \"V\"\n  - platform: mqtt\n    name: \"Blitzwolf Power Factor\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Factor\"] }}'\n</code></pre>"},{"location":"devices/BlitzWolf-SHP7/","title":"BlitzWolf SHP7","text":""},{"location":"devices/BlitzWolf-SHP7/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p>"},{"location":"devices/BlitzWolf-SHP7/#step-1","title":"Step 1","text":"<p>Disconnect device from power source!</p>"},{"location":"devices/BlitzWolf-SHP7/#step-2","title":"Step 2","text":"<p>Remove the two stickers on the front.</p>"},{"location":"devices/BlitzWolf-SHP7/#step-3","title":"Step 3","text":"<p>Undo 2 screws. PH1 screwdriver required.</p> <p></p>"},{"location":"devices/BlitzWolf-SHP7/#step-4","title":"Step 4","text":"<p>Remove back with screwdriver</p> <p></p>"},{"location":"devices/BlitzWolf-SHP7/#step-4_1","title":"Step 4","text":"<p>Undo 2 screws at the back. PH1 screwdriver required.</p> <p></p>"},{"location":"devices/BlitzWolf-SHP7/#step-5","title":"Step 5","text":"<p>Remove PCB from casing for easier soldering.</p>"},{"location":"devices/BlitzWolf-SHP7/#step-6","title":"Step 6","text":"<p>Solder cables to the ESP pins.</p> <p></p> <p>Because GND is hard to solder/access, I recommend to use the other side for GND: </p> <p>Result: </p>"},{"location":"devices/BlitzWolf-SHP7/#step-7","title":"Step 7","text":"<p>Connect serial adapter and make a shortwire between Pin IO0 and GND during startup (for entering flashmode).</p>"},{"location":"devices/BlitzWolf-SHP7/#step-8","title":"Step 8","text":"<p>Flash Tasmota.</p>"},{"location":"devices/BlitzWolf-SHP7/#step-9","title":"Step 9","text":"<p>Setup Tasmota (wifi settings). </p> <p>Go to  Configuration -&gt; Configure Other and enter this template: {\"NAME\":\"SHP7 v2\",\"GPIO\":[18,158,56,131,134,132,0,0,17,57,21,0,22],\"FLAG\":0,\"BASE\":45}  (I had to use v2 from https://templates.blakadder.com/blitzwolf_SHP7.html)</p> <p>Done !</p>"},{"location":"devices/Burnett-BN-K01/","title":"The Burnett Smart Socket.","text":""},{"location":"devices/Burnett-BN-K01/#introduction","title":"Introduction","text":"<p>The Burnett Smart Socket BN-K01 is a smart socket that is small in size. The body is only 58mm * 48mm 34mm which can fit into smaller places. It is equipped with an ESP8285  which makes it possible to flash sonoff-tasmota. However, *you need to manually wire the Tx and Rx from the chip for flashing**.  </p> <p> </p> <p>This guide provides details on how to prepare the socket for the initial flashing with sonoff-tasmota code.</p>"},{"location":"devices/Burnett-BN-K01/#what-is-it","title":"What is it?","text":"<p>As the other Sonoff's do, this smart socket uses EWeLink app  to control. It\u2019s pretty well made and there is a shutter to close off the live socket holes when a plug is removed. Besides, it is pretty cheap in Taobao (it costs no more than USD 6). \ufffc</p>"},{"location":"devices/Burnett-BN-K01/#disassembly","title":"Disassembly","text":"<p>*** WARNING - Opening the unit potentially exposes mains voltages that can kill.  You proceed beyond here entirely at your own risk. ***</p> <p>There are no screws. And unfortunately it is precisely glued, so to disassemble you need to find a thin yet strong tool to pull it open.  </p> <p>\ufffcInside there is a main board with most of the components on the top.  The Wi-Fi and control comes from a small daughter board, soldered on the left of the main board.\ufffc</p> <p>Unfortunately I cannot tear down the plastic around the main board, so I don't have a clear look for the back of the daughter board.  </p>"},{"location":"devices/Burnett-BN-K01/#hookup","title":"Hookup","text":"<p>Unless you are just curious, there\u2019s no real need to unsolder the main board.  You can get at everything you need to re-flash it on the top side of the daughter board.</p> <p>For flashing you need to solder the VCC and GND from the back. As shown in the picture, the GND is the top right pad while the VCC is the bottom left pad.</p> <p>While unfortunately, the Rx and Tx is not connected, so you have to wire directly to the ESP8285. It can be very hard if you are not familiar with soldering.</p> <p>The GPIO0 is connected to the button so no wiring is needed.</p>"},{"location":"devices/Burnett-BN-K01/#building-firmware","title":"Building Firmware","text":"<p>The process for building the firmware for the Burnett BN-K01 is basically the same as for the Sonoff with a few additional changes.</p> <ul> <li>You need to set the board to \"Generic ESP8285 Module\"</li> <li>The crystal frequency is 26MHz.</li> </ul>"},{"location":"devices/Burnett-BN-K01/#flash-the-firmware","title":"Flash the Firmware","text":"<p>Hold the button when you connect the VCC and GND to make the ESP8285 boot into flash mode. After it boots, you no longer need to hold it.</p>"},{"location":"devices/Burnett-BN-K01/#configure","title":"Configure","text":"<p>After you flashed and booted the Burnett BN-K01, just set config it as Sonoff S2x, then it will work.</p>"},{"location":"devices/CE-Smart-Home---LA-WF3-Wifi-Plug/","title":"CE Smart Home   LA WF3 Wifi Plug","text":""},{"location":"devices/CE-Smart-Home---LA-WF3-Wifi-Plug/#ce-smart-home-la-wf3-wifi-plug-tywe2s","title":"CE Smart Home - LA-WF3 Wifi Plug (TYWE2S)","text":"<p>Simple and compact Wifi Plug, based in ESP8266, internal module Tuya TYWE2S</p> <p>esptool log: Wifi module is an: TYWE2S: Detecting chip type... ESP8266 Chip is ESP8285 Features: WiFi, Embedded.</p> <p>Model purchased: https://www.costco.ca/Wi-Fi-Smart-Plug%2C-2-pack.product.100417575.html 24.99 CAD$</p>"},{"location":"devices/CE-Smart-Home---LA-WF3-Wifi-Plug/#product","title":"Product","text":""},{"location":"devices/CE-Smart-Home---LA-WF3-Wifi-Plug/#flashing","title":"Flashing","text":"<p>GPIO0 Needs to be grounded in order to get into flashing mode. 1. erase_flash 2. flash tasmota_minimal 3. flash tasmota_full</p> <p> </p>"},{"location":"devices/CE-Smart-Home---LA-WF3-Wifi-Plug/#module-configuration","title":"Module Configuration","text":""},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/","title":"CE Smart Home\u2122 Garden Power Stake","text":""},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/#device-template","title":"Device Template","text":"<pre><code>{\"NAME\":\"CE Power Stake\",\"GPIO\":[255,255,255,255,56,57,255,255,21,17,255,255,255],\"FLAG\":0,\"BASE\":18}\n</code></pre>"},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/#connection","title":"Connection","text":"<p>This 6-outlet outdoor garden power stake is controlled by a standard ESP-12 chip connected to a single relay, meaning that all 6 outlets are on or off simultaneously. It also has a mains switch, a manual relay trigger button, and an LED indicator.</p> Programmer Power Stake 3V3 VCC TX RX RX TX GND GND <p>The button is not connected to <code>D0</code>, so you will need to shunt <code>D0</code>/<code>GPIO0</code> to GND to enable programming mode. You may need to briefly shunt RESET to GND in order to initiate connections to the device.</p>"},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/#internal-device-image","title":"Internal Device Image","text":"<p>[[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_esp12s.jpg|alt=PowerStake Pinout]]</p>"},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/#generic-module-config","title":"Generic Module Config","text":"<p>[[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_tasmota_config.jpg|alt=Generic Module Config]] </p>"},{"location":"devices/CE-Smart-Home%E2%84%A2-Garden-Power-Stake/#additional-information","title":"Additional Information","text":"<p>This device was found at Costco, and in fact appears to be made for Costco (see image below). The regular price was $13.97 USD, but was on sale for Christmas for $9.99 USD.</p> <p>[[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_front.jpg|alt=PowerStake Box Front]] [[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_rear.jpg|alt=PowerStake Box Rear]] [[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_side1.jpg|alt=PowerStake Box Side 1]] [[https://github.com/untergeek/shared_images/blob/master/devices/powerstake/powerstake_side2.jpg|alt=PowerStake Box Side 2]]</p> <p>[[https://github.com/untergeek/shared_images/blob/master/devices/esp12-pinout.png|alt=ESP12]]</p>"},{"location":"devices/CNSKOU---CNSANKOU-wall-switches/","title":"CNSKOU   CNSANKOU wall switches","text":""},{"location":"devices/CNSKOU---CNSANKOU-wall-switches/#general","title":"General","text":"<p>These CNSKOU / CNSANKOU wall switches (Chinese Sonoff clones) are sold on AliExpress and have a neutral design. They come in 1, 2 and 3 circuits and are easily mounted replacing your old wall switches. It measures 118mm wide by 72mm high, irrespective of the number of buttons, although it is also available in 86x86mm. The tempered glass front plate is available in white, black and gold colors. Despite it being advertised as a 'US' device, it will handle 90-250V AC input at 50/60Hz and is said to switch up to 10A per circuit. The same design is also available for use with a RF-remote, or as a traditional wall switch. There is a backlight indicator behind each button, which subtly shows green when the circuit is live and red when it is not. When physically pushing the button, there is an audio feedback. See here to view a video of the audio feedback.</p> <p>The one interesting for Tasmota is of course the WiFi version, which connects to 2.4GHz networks, up to 802.11n. The switch comes pre-loaded with ITEAD software and works well with the EWeLink app. </p>"},{"location":"devices/CNSKOU---CNSANKOU-wall-switches/#inside","title":"Inside","text":"<p>When opening the package, easily done by turning a screwdriver under the two plastic lips at the lower side of the switch, the first thing we see are the capacitive touch sensors mounted on the back of the low-voltage board.  </p> <p></p> <p>The low-voltage board is connected through a 14-pin connector to the mains board, and contains an ESP8285, piezo buzzer (should you wish to remove that audio feedback!) and a number of additional components. The ESP8285 is of course compatible with the ESP8266 albeit with only 1MB flash storage. </p> <p></p> <p>The mains-voltage board contains the mains connection points, a TI ULN2003A relay driver and 1-3 relays and a tiny little board containing a power supply for the low-voltage bits. </p> <p></p>"},{"location":"devices/CNSKOU---CNSANKOU-wall-switches/#flashing","title":"Flashing","text":"<p>The most interesting part is of course how we flash this device with Tasmota. To do this, do not connect the device to mains power and carefully remove the low-voltage board as this is all you'll need. </p> <p></p> <p>Notice the 4 connection points just above the ESP8285, which is where you'll connect (from square pad up) 3v3, RX, TX and GND. I found that normal DuPont jumper wires provide a secure enough connection, but you may wish to solder on a few header pins. </p> <p>In order to get the ESP8285 into programming mode, you'll also need to connect GPIO0 to GND. There is no easily accessible connection point for GPIO0 and no buttons are provided on the board. I found the easiest way is to just use a normal jumper cable and manually hold it up against pin 10 (GPIO0) for a few seconds while the power is connected to the chip. Pin 10 is the second pin of the 'pin 9-16' row, on the right hand side of the chip in the image above.</p> <p>Use the usual method for flashing, undoubtedly documented better elsewhere than I ever could. </p> <p>Once Tasmota was up and running, I used the Sonoff T1 US module type.</p>"},{"location":"devices/CSL-aplic-WDP-303075/","title":"CSL aplic WDP 303075","text":""},{"location":"devices/CSL-aplic-WDP-303075/#connection","title":"Connection","text":"<p>Vcc - 3,3V TX - RX RX - TX GND - GND</p> <p>For flashing you need to connect GPIO0 to GND</p>"},{"location":"devices/CSL-aplic-WDP-303075/#additional-information","title":"Additional Information","text":""},{"location":"devices/CSL-aplic-WDP-303075/#hardware-details","title":"Hardware details","text":"<ul> <li>ESP8266 - on TYWE2S Module</li> <li>HLW8012 - Power Monitor Chip</li> <li>SRU 5VDC SDA - Relais</li> </ul>"},{"location":"devices/CSL-aplic-WDP-303075/#gpio0","title":"GPIO0","text":"<p>You need to solder a wire to the test-point on the TYWE2S  Module to be able to enter the flashmode. The Reset Pin has no function for that purpose.</p>"},{"location":"devices/CSL-aplic-WDP-303075/#device-images","title":"Device Images","text":""},{"location":"devices/CSL-aplic-WDP-303075/#gpio-config","title":"GPIO Config","text":"<p>Power Monitoring will not work with that configuration... wait for software update in case you want to use it</p> <p>UPDATE: with Tasmota 6.3.0 you have fully monitoring support (Add support for CSL Aplic WDP 303075 Power Socket with Energy Monitoring (#3991, #3996))</p> <p></p>"},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/","title":"Canwing CW001 WiFi Smart Switch","text":""},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#general","title":"General:","text":"<ul> <li>Nice size and form factor - can be used as Sonoff Basic R2</li> <li>There seems to be no unique name for the device in the market. The one I ordered for testing Tasmota was packaged by brand / model Canwing CW-001. Let's use this naming for all similar devices.</li> <li>Operating the device under the original firmware by use of eWeLink-App shows \"Coolkit 0185\" as brand / model supported by ESP8285.</li> <li>Source of supply was \"ebay.de\", seller \"globewin\", ordered 2019-01-12 for a price of 6,89 Euro, received in 14 calendar days. Additionally by name \u201eASHATA Intelligente WLAN Schalter\u201c this device is proposed by \"amazon.de\", seller \"Richer-R123\" for a price of 9,39 Euro.</li> <li>Aliexpress: Wi-Fi Smart Switch 5A</li> </ul>"},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#features-of-original-device-firmware","title":"Features of original device / firmware:","text":"<ul> <li>Remote control domestic appliances - a phone with 2.4G WiFi can remote control all domestic appliances through phone app.</li> <li>1000W large power - adopting a 1000 W power to make operation powerful.</li> <li>Suitable for higher than Android 4.0.</li> <li>Flame retardant ABS shell ensures the safety.</li> <li>PCB equipped with serial standard interface (4 pins RX, TX, GND, Vcc / 3.3 V) and button / momentary switch dedicated to GPIO0.</li> </ul>"},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#specification","title":"Specification:","text":"<ul> <li>Product type: WiFi Switch Module</li> <li>Wireless standard: WIFI 2.4 GHz IEEE 802.11 b/g/n</li> <li>Remote control mode: eWeLink phone app for Android/iOS or Tasmota </li> <li>Chip ESP 8266 / 8285</li> <li>Maximum power: 1000 W / 5 A</li> <li>Package size: approx. 57 * 41 * 21 mm / 2.4 * 1.6 * 1.1 in</li> <li>Package weight: 35 g / 1.2 oz</li> </ul>"},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#package-list","title":"Package List:","text":"<ul> <li>1 x WiFi Switch Controller</li> <li>1 x User Manual (see end of this page)</li> </ul>"},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#photos-of-the-case","title":"Photos of the case:","text":""},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#photos-of-the-pcb","title":"Photos of the PCB:","text":""},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#magic-moment-ewelink-slips-away-tasmota-appears","title":"Magic moment \u2013 eWeLink slips away \u2013 Tasmota appears:","text":""},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#result","title":"Result:","text":""},{"location":"devices/Canwing-CW001-WiFi-Smart-Switch/#original-users-manual-for-ewelink","title":"Original users manual for eWeLink:","text":""},{"location":"devices/Century-Aoke---Festnight-%28Sonoff-Basic-clone%29/","title":"Century Aoke   Festnight (Sonoff Basic clone)","text":""},{"location":"devices/Century-Aoke---Festnight-%28Sonoff-Basic-clone%29/#connection","title":"Connection","text":"<p>Vcc - 3,3V TX - RX RX - TX GND - GND</p>"},{"location":"devices/Century-Aoke---Festnight-%28Sonoff-Basic-clone%29/#additional-information","title":"Additional Information","text":"<p>SmartHome is a cheap Sonoff Basic clone, but they still work with Tasmota.  More Infos can be found here: #343.  </p>"},{"location":"devices/Century-Aoke---Festnight-%28Sonoff-Basic-clone%29/#device-images","title":"Device Images","text":"<p>I'll try to upload the images later.</p>"},{"location":"devices/Century-Aoke---Festnight-%28Sonoff-Basic-clone%29/#generic-module-config","title":"Generic Module Config","text":""},{"location":"devices/Dimmer-switch-with-Nuvoton-chip/","title":"Dimmer switch with Nuvoton chip","text":"<p>A generic touch dimmer flashed with Tasmota.</p> <p>On AliExpress you can buy a wifi dimmer for mains voltage (110 or 220V) It's a brandles dimmer, but can be found here: AliExpress page</p> <p>It comes in a couple of forms, but sinds I live in Holland, I chose the EU style, single gang, 220V, White edition. It has a glass front plate with 3 proximity/touch switches (On/Off, dimm up &amp; dimm down) and a wifi indicator LED. </p> <p>The inside houses 2 PCB's; a power board and a control board:</p> <p>The control board: </p> <p>There are two main chips on board: An ESP8266 and a Nuvoton n76e003at20 The Nuvoton will do the switch side of it all, the ESP communication.</p> <p>The mains board: </p> <p>For flashing, we only need the control board. Solder small wires to the pads as marked on the picture:</p> <ul> <li>3.3V</li> <li>GND</li> <li>RX</li> <li>TX</li> <li> <p>Sw (gpio0)</p> </li> <li> <p>Solder 'Res1' to GND</p> </li> </ul> <p>Note that the silkscreen on this board has TX and RX wrong.</p> <p></p> <p>Now use a USB to serial adapter to connect the wires. </p> <p>Use a 3.3V board, NOT 5V, this will destroy the ESP chip on the board!</p> <p>Connect: GND   to   GND 3.3V  to   3.3V RX    to   RX  (due to the fact the silkscreen is wrong, otherwise, RX connects to TX and vice versa) TX    to   TX SW    to   GND  -- only during power up, to put the ESP in programming mode.</p> <p>From here the upload is the same as for all other Tasmota devices. See the upload page for detailed info.</p> <p>Note: sonoff basic and classic variants do not support the serial bridge. To get this working you should use the standard tasmota.bin - NOT basic or classic.</p> <p>After the upload was successful, unplug the device from the serial adapter. You can now desolder all the connections you have made earlier. Also remove the wire between RES1 and GND. Then plug the board back in its housing. Be careful with the connector on the underside of the board. Line up the pins with te header and lightly press it in its place.</p>"},{"location":"devices/Dimmer-switch-with-Nuvoton-chip/#connecting-to-mains-installation","title":"Connecting to mains installation:","text":"<p>WARNING! THIS PROJECT INVOLVES WORKING WITH HIGH VOLTAGE AND YOU COULD KILL YOURSELF AND/OR SET YOUR HOUSE ON FIRE.</p> <p>Connect your light to the dimmer according the manual.  Keep in mind, the dimmer itself needs a Neutral wire as well. If you replace an existing switch or dimmer, it can be that you need to run an extra neutral wire.</p>"},{"location":"devices/Dimmer-switch-with-Nuvoton-chip/#first-connection","title":"First connection","text":"<p>When you first power up the dimmer switch, it comes up in AccessPoint mode. Follow the instructions here </p>"},{"location":"devices/Dimmer-switch-with-Nuvoton-chip/#set-correct-module-type","title":"Set correct module type","text":"<p>Once you have all connected, you should go to the configuration page of the Tasmota Dimmer. Go to your browser and fill in the IP address. Then go to 'Configuration' and then to 'Configure Module'. From the drop down menu select module 58: PS-16-DZ. Then hit Save. The module will restart and you are done!  You can now toggle the light and use the slider to dim the lights from the tasmota webpage. Or better, use your favorite domotica software to control it via MQTT.</p>"},{"location":"devices/ERC309-Kinetic-Switch/","title":"ERC309 Kinetic Switch","text":"<p>Discussed here</p>"},{"location":"devices/ERC309-Kinetic-Switch/#configuration","title":"Configuration","text":"<p>Configure as a <code>Tuya Dimmer (54)</code> (support as a BASE module was introduced in 6.2.1.16).  </p> <ul> <li>GPIO13 - Tuya Rx (108)</li> <li> <p>GPIO15 - Tuya Tx (107) </p> </li> <li> <p>Template: {\"NAME\":\"Kinetic Switch\",\"GPIO\":[255,255,255,255,255,255,0,0,255,108,255,107,255],\"FLAG\":0,\"BASE\":54}</p> </li> <li>Module </li> </ul>"},{"location":"devices/ERC309-Kinetic-Switch/#flashing","title":"Flashing","text":"<p>This device uses a Tuya TYWE3S Wi-Fi PCB module.  An easy soldering method is to take several Dupont style jumper wires, cut one end off, and apply a bit of solder to each stripped end.  This will keep the wire flexible and prevent any circuit board pads from ripping off.  Apply a bit of solder to each pad necessary to flash (double check your pin-outs).  Once the wire and pad have solder simply put the two together and apply a bit of heat and they will join together.  </p> <p> </p> <p>Attach the GPIO0 wire to ground during initial boot to flash.  A 3-pin header bridged together works great with GPIO0, GND and the GND from the USB flasher attached (TX pin to RX pin and RX pin to TX pin on USB flash adapter). Verify that you are using 3.3volts to flash, NOT 5V!</p> <p>Two options:</p> <ol> <li>Remove the ESP PCB by desoldering. This makes it easier to get to the pins of the TYWE3S board.</li> </ol> <p></p> <ol> <li>No PCB desoldering. You will have to connect the RESET pin of the MCU chip to GND. This requires a soldering iron with a thin tip.</li> </ol> <p></p> <p>Product Link</p>"},{"location":"devices/EXS-2-Channel-Wifi-Dimmer-V4/","title":"EXS 2 Channel Wifi Dimmer V4","text":""},{"location":"devices/EXS-2-Channel-Wifi-Dimmer-V4/#disclaimer","title":"Disclaimer","text":"<p> DANGER OF ELECTROCUTION </p> <p> You must de-solder ESP8266 pins from the PCB in order to flash Tasmota! You can't flash Tasmota over firmware from ex-store.de</p> <p>At the moment I can see no way to flash minimal.bin over the original firmware.</p> <p> How flash on assembled PCB </p> <p>Line TX and RX is directly wired from the dimmer to the MCU. Cut this 2 lines. For example desolder pin2 and pin3 from MCU. Solder cable on GPIO0, TX, RX (ESP8266) VCC and GND (See description on pcb). Connect cables with your USB adapter. Before you flash firmware connect the module with 230V (Solderpads \"230V IN\" and \"NULL\") since some USB adapters do not have enough power.</p> <p> Das Modul sollte nur geflasht werden wenn es sich nicht auf der Leiterplatte befindet! Die Firmware \"Tasmota\" kann nicht \u00fcber die Firmware von ex-store.de geflasht werden (OTA)</p> <p>Versuchen Sie es trotzdem ist das Modul unbrauchbar und muss ausgebaut werden und neu geflasht werden.</p> <p> Aufspielen der Tasmota Firmware mit dem Modul auf der Platine </p> <p>Die Leitungen TX und RX sind direkt mit der Dimm-MCU verdrahtet. Diese Leitungen m\u00fcssen getrennt werden. Zum Beispiel Pin2 und Pin3 von der MCU abl\u00f6ten (hochbiegen). L\u00f6ten Sie Kabel an GPIO0, TX, RX (ESP8266), VCC und GND (siehe Beschreibung auf der Platine). Verbinden Sie diese Kabel mit Ihrem USB Adapter. Bevor Sie die Firmware flashen, muss das Modul mit 230V (L\u00f6tpads \"230V IN\" und \"NULL\") verbunden werden. Einige USB-Adapter haben nicht gen\u00fcgend Strom um die Platine zu versorgen.</p> <p> 230V sind f\u00fcr Lebewesen Lebensgef\u00e4hrlich. Ein Stromschlag kann unter anderem Ihren Herzrythmus st\u00f6ren und zum Tode f\u00fchren. Dessen sollten Sie sich bewust sein wenn Sie an diesem Modul arbeiten.</p>"},{"location":"devices/EXS-2-Channel-Wifi-Dimmer-V4/#schematic","title":"Schematic","text":""},{"location":"devices/EXS-2-Channel-Wifi-Dimmer-V4/#menu","title":"Menu","text":""},{"location":"devices/EXS-2-Channel-Wifi-Dimmer-V4/#example-setup-with-dht22","title":"Example setup with DHT22","text":"<p>DHT wiring  VCC       - header VCC  Ground    - header GND  Data line - to GPIO14</p> <p> </p>"},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/","title":"EXS Relay V3.1 & V5.1","text":""},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#flush-wifi-moduls-with-latching-relays","title":"Flush Wifi Moduls with latching Relays","text":""},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#v31-relay","title":"V3.1 Relay","text":""},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#v50-relay","title":"V5.0 Relay","text":""},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#v50-relay-pcb-backside","title":"V5.0 Relay (PCB Backside)","text":""},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#pinouts","title":"Pinouts:","text":"<p>V3.1</p> <p>GPIO00 Module Pin 8 GPIO01 UART0_TXD Pin 2  GPIO02 Module Pin 7  GPIO03 UART0_RXD Pin 3 GPIO04 Module Pin 10 GPIO05 Module Pin 9 GPIO12 Relay1 (High = off) GPIO13 Relay1 (High = on )</p> <p>V5.0</p> <p>GPIO00 Module Pin 4 GPIO02 Module Pin 3 GPIO04 Module Pin 2 GPIO05 Module Pin 1 GPIO12 Relay1 ( High = Off) GPIO13 Relay1 ( High = On) GPIO14 Relay2 ( High = Off) GPIO15 LED1 GPIO16 Relay2 ( High = On)  </p>"},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#serial-connection","title":"Serial Connection","text":"<p>The only way to flashing the moduls you must soldering 4 wires to the RX/TX/3V3/GND pins from the ESP. The PCB have no serial pinout connector. For connecting the ground (GND) on a V5.0 Module you can use one of the 2 GND pinout connectors from the PCB. For flashing the moduls enable the flashmode of the ESP, connect PIN4 (GPIO00) to GND.</p> <p>!!! Don't flashing the module when it connected to the main power. You brick the device and your computer or USB Port. Use only a 3.3V USB Adapter for flashing!!!</p>"},{"location":"devices/EXS-Relay-V3.1-%26-V5.1/#notes","title":"Notes","text":"<p>For use the V5.0 Module with the \"EXS Relay(s)\" profile you must change the \"Module parameters\" (see picture below)</p> <p> </p> <p>Now you see in device setup</p> <p> </p> <p>The output pins of the V5.0 are reversed on the PCB. You must use \"out1\" for Relay2 and \"out2\" for Relay1 !!! This is the only way for support both Moduls with Tasmota. (thanks for this Note to Theo Arends)</p>"},{"location":"devices/Etekcity-Smart-WiFi-Light-Switch-ESWL01/","title":"Etekcity Smart WiFi Light Switch ESWL01","text":"<p>Generic Config\\ GPIO5  Led1\\ GPIO13 Relay1\\ GPIO14 Switch1\\ Execute switchmode1 3 in console.</p> <p>To put unit into flashing mode, short GPIO0 with GND</p> <p></p> <p></p>"},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/","title":"Geekcreit Sonoff 2 Channel Relay","text":"<p>Geekcreit \"Sonoff\" 2 Channel Relay</p> <ul> <li>Bare PCB version: https://www.aliexpress.com/item/Sonoff-2CH-AC85-250V-Wireless-Switch-Timer-Smart-Wifi-Switch-Universal-Automation-Module-Remote-Control-for/32948157608.html</li> <li>Version with enclosure: https://www.banggood.com/Geekcreit-2-Channel-AC-85V-250V-APP-Remote-Control-WIFI-Wireless-Switch-Socket-For-Smart-Home-p-1114958.html?rmmds=search&amp;cur_warehouse=CN</li> </ul> <p>The Geekcreit/\"Sonoff\" 2CH is based on the ESP8285 via the Itead PSF-B04. It is very similar to 4CH DIY, so this wiki page is based on the page for that device.</p> <p>More info here: https://github.com/arendst/Tasmota/issues/1970</p> <p></p>"},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/#serial-connection","title":"Serial Connection","text":""},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/#geekcreitsonoff-2ch","title":"Geekcreit/\"Sonoff\" 2CH","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. The four serial pins (3V3, Rx, Tx, GND) can be seen in the picture. Unless you have a very steady hand soldering will be required for the TX and RX on the ESP chip.</p> <p>Programming the Geekcreit/\"Sonoff\" 2CH is easy. The bottom left on-board-button is connected to GPIO0 and as with all ESP8266/ESP8285 modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to hold this button when booting the device for flashing.</p>"},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/#module-parameters","title":"Module parameters","text":""},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/#enable-gpio9-gpio10","title":"Enable GPIO9 &amp; GPIO10","text":"<p>To use GPIO9 and GPIO10 of the ESP8285, open the console and enter =&gt; \"SetOption51 on\".</p> <p>Restart the module.</p>"},{"location":"devices/Geekcreit-Sonoff-2-Channel-Relay/#assign-inputs-and-outputs","title":"Assign inputs and outputs","text":"<p>**Note: ** The third button on this device is not connected to a GPIO. Instead it is used to cycle through some relay modes that are supported by the two external ICs. Only one of these modes works with Tasmota, so it is necessary to continue to press this button 3 until the relays can be controlled from the toggle buttons in the Tasmota web UI.</p> <p></p> <p>Module Type =&gt; Generic (18)</p> <ul> <li>GPIO 1 =&gt; Button 1 (17)</li> <li>GPIO 9 =&gt; Button 2 (18)</li> <li>GPIO 10 =&gt; Button 3 (19)</li> <li>GPIO 14 =&gt; Button 4 (20)</li> <li>GPIO 12 =&gt; relay 1 (21)</li> <li>GPIO 5 =&gt; relay 2 (22)</li> <li>GPIO 13 =&gt; LED 1 (52)</li> </ul> <p>Restart the module.</p>"},{"location":"devices/Gosund-SP1/","title":"Gosund SP1","text":"<p>Purchase</p> <p>There are several clones of this device -- use the Teckin device:</p> <ul> <li>Gosund SP1 (Version 2.3 and 2.4)<ul> <li>To configure select Gosund SP1 v23 (55) or console command <code>Module 55</code></li> </ul> </li> <li>BlitzWolf SHP2 (Version 2.3 and 2.4)</li> </ul>"},{"location":"devices/Gosund-SP1/#watch-out-sp1-devices-sold-nowadays-do-not-always-contain-an-esp8266-variants-are-around-with-a-w701-cpu-which-is-incompatible-with-tasmota","title":"Watch out: SP1 devices sold nowadays do not always contain an ESP8266. Variants are around with a W701 cpu, which is incompatible with Tasmota!!","text":""},{"location":"devices/Gosund-SP1/#calibration","title":"Calibration","text":"<p>If you have another (better) volt and power meter, this procedure should increase the precision. Use an incandescent bulb or an iron. In the web UI Console, enter the (correct) readings using the following commands:</p> <p><code>Backlog VoltageSet &lt;voltage&gt;; CurrentSet &lt;current&gt;; PowerSet &lt;wattage&gt;</code></p>"},{"location":"devices/Gosund-SP1/#details","title":"Details","text":"<p> Rx and Tx are inverted on this picture! </p> <p></p> <p>More pictures</p>"},{"location":"devices/H801/","title":"H801","text":"<p>It's not entirely clear where these devices come from originally, but they are available from AliExpress and eBay.</p> <ul> <li>AliExpress: https://www.aliexpress.com/wholesale?catId=0&amp;SearchText=H801</li> <li>eBay: https://www.ebay.co.uk/sch/items/?_nkw=h801</li> </ul> <p></p>"},{"location":"devices/H801/#hardware","title":"Hardware","text":"<p>The chip used on this board is the ESP8266EX. 5 PWM outputs are connected to DTU35N06 MOSFETs to drive the 5 output channels (RGB + W1 + W2).</p> Function ESP Pin Channel R GPIO 15 PWM1 G GPIO 13 PWM2 B GPIO 12 PWM3 W1 GPIO 14 PWM4 W2 GPIO 04 PWM5 LED D1(red) GPIO 05 LED D2 (green) GPIO 01"},{"location":"devices/H801/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p></p> <p>You need to access the serial interface. The unpopulated serial header (3V3, RX, TX, GND) are available in the middle of the PCB, right next to J3. Note: the RX and TX pins are labelled from the terminal's perspective, not from the perspective of the ESP chip. This means you should connect the RX and TX pins from your computer's UART to the RX and TX pins on the board respectively, not crossing them over!</p> <p>To place the board into flashing mode, you will need to short J3. This can remain shorted while flashing is in progress, but you will need to remove the short in order to boot the Tasmota firmware.</p>"},{"location":"devices/H801/#flash-size","title":"Flash size","text":"<p>Please be aware that some of the H801 modules were sold with only 512kB of flash. You can check whether yours is affected by using esptool, with the flash-id command. Example in Windows PowerShell for COM3:</p> <pre><code>&gt; .\\esptool.exe --port COM3 flash-id\nesptool v5.1.0\nConnected to ESP8266 on COM3:\nChip type:          ESP8266EX\nFeatures:           Wi-Fi, 160MHz\nCrystal frequency:  26MHz\nMAC:                48:e7:29:49:3c:d2\n\nStub flasher running.\n\nFlash Memory Information:\n=========================\nManufacturer: ef\nDevice: 4014\nDetected flash size: 1MB\n\nHard resetting via RTS pin...\n</code></pre> <p>Under Detected flash size: you'll find the flash size. Mine had 1MB. If you only have 512kB of flash, you can still build your own firmware, but will have to remove components that you do not need, in order to reduce the size of the firmware binary. You will also have to use a linker script for the smaller flash. For an example, see this issue.</p>"},{"location":"devices/H801/#flashing","title":"Flashing","text":"<p>For flashing you can use the Web Installer. Select Tasmota Lite, click Connect and select COM port. Install Tasmota. After flashing reboot the device and it will boot and you can connect it to your WiFi.</p>"},{"location":"devices/H801/#first-boot","title":"First Boot","text":"<p>Most boards supported by the Tasmota firmware use GPIO 1 for serial TX. The H801, as shown in the image above, uses GPIO 2. As the serial RX is still the same as for other boards, it is possible for Tasmota to read from the serial connection but anything written will not be sent to your terminal. Blindly type the following command to set Tasmota to the H801 module type, and it will automatically switch to using GPIO 2 for serial TX allowing setup to proceed:</p> <pre><code>module 20\n</code></pre> <p>See #2155 for more details.</p>"},{"location":"devices/H801/#known-issue","title":"Known Issue","text":"<p>While powering up there is a short but bright light flash emitted from the strip. </p>"},{"location":"devices/Home-Awesome-Breathing-Light-Smart-Plug-Mini-TMRLIFE-%5B2-PACK%5D-WiFi-Smart-Plug/","title":"Home Awesome Breathing Light Smart Plug Mini TMRLIFE [2 PACK] WiFi Smart Plug","text":"<p>TMRLife Plug https://smile.amazon.com/gp/product/B0786L8TC1/ref=oh_aui_search_asin_title?ie=UTF8&amp;psc=1</p> <p>Home Awesome Plug https://smile.amazon.com/gp/product/B07HH29XNS/ref=ppx_yo_dt_b_asin_title_o02__o00_s00?ie=UTF8&amp;psc=1</p> <p>These are the same device.  Easily flashed with OTA</p> <p>GPIO is as follows Io0=pwm1 Io2=pwm2 Io5=pwm3 Io13=button1n Io15=relay1</p> <p>These make great night lights</p>"},{"location":"devices/Hompie-SWS1/","title":"Hompie SWS1","text":"<p>Very cheap outlet with USB-charger functionality (supposed to deliver 2A, have to test this though) and real 16A relay:</p> <p>Device Images   3.3V, GND and GPI00 are accessible on the main board. The used TYWE3S board unfortunately does not have easily reachable solderpads for TX/RX, but I managed to solder with a normal 60W iron between main board and TYWE3S board: </p> <p>Works perfectly with Tasmota 6.2.1 and the same configuration like SM-PW701E Socket Board: TYWE3S</p>"},{"location":"devices/HuaFan-Smart-Socket/","title":"The Huafan Wi-Fi Wireless Smart Socket/Plug.","text":""},{"location":"devices/HuaFan-Smart-Socket/#introduction","title":"Introduction","text":"<p> The HuaFan Wireless Wifi Smart Plug/Socket is a useful bit of kit that allows you to introduce home automation without getting into any mains re-wiring.  As an added bonus, the device also provides energy monitoring functions (voltage, current, power) in much the same way as the Sonoff Pow module does.  As you may have guessed, its 'smarts' come from an embedded ESP8266, which makes it a potential target for the excellent sonoff-tasmota code.</p> <p>This guide provides details on how to prepare the socket for the initial flashing with sonoff-tasmota code.</p>"},{"location":"devices/HuaFan-Smart-Socket/#what-is-it","title":"What is it?","text":"<p> This smart socket comes with its own iPhone/Android App and is controllable from the HF Smart cloud service. As well as allowing on/off control, the plug/socket also measures current, voltage and power.  It\u2019s pretty well made but almost certainly doesn\u2019t meet the full British electrical standards, as it doesn\u2019t have a shutter to close off the live socket holes when a plug is removed.  This a rather a shame and would not be too tricky to implement and would only marginally increase the cost of these pretty cheap (~\u00a3UK 10) units. The provided software/service all seemed rather closed and proprietary and not able to talk to other stuff.  So something had to change!</p>"},{"location":"devices/HuaFan-Smart-Socket/#the-name","title":"The Name","text":"<p>I'm mostly calling this a 'Smart Socket' but it also is called a 'Smart Plug' in some places. As it's got both, I guess both are right. \ufffc</p>"},{"location":"devices/HuaFan-Smart-Socket/#disassembly","title":"Disassembly","text":"<p>*** WARNING - Opening the unit potentially exposes mains voltages that can kill.  You proceed beyond here entirely at your own risk. ***</p> <p> There are no screws; to disassemble you need to prise it open on each side. </p> <p>\ufffcInside there is a main board with most of the components on the reverse.  The Wi-Fi and control comes from a small daughter board, soldered to the main board.\ufffc</p> <p> There\u2019s not a lot to see on the top apart from the mains relay, the button and the red/blue LEDs that illuminate it.\ufffc</p> <p> The main item of interest on the top is the daughter board.  This has our trusty ESP8266EX and an 8Mbit SPI flash memory. You can also see the 40MHz crystal - more on this later\u2026 \ufffc </p> <p>The reverse of the daughter board is pretty bare - only the Vcc (3.3V) and GND are marked. In this view you can also see the red and blue LEDs and the push button.  In its original configuration the red LED normally is set to the same state as the relay and the blue LED provides information on the state of connectivity.</p> <p></p> <p>Another warning...  </p> <p>What is marked as GND IS NOT GROUNDED, it\u2019s not even floating, GND IS CONNECTED TO THE NEUTRAL LINE OF THE MAINS.  Do not connect any equipment or yourself to the board whilst it is plugged onto a mains socket - EVEN IF THAT SOCKET APPEARS TO BE SWITCHED OFF.  Neutral is not 0V or Ground and should be treated as live (just in case it really is).  Always completely disconnect your programming / serial interface before plugging the device into a mains socket.</p> <p> You need a hefty soldering iron to unsolder the board from the plug pins and on the reverse you see the main circuitry. Next door to the AMS1117 3.3V regulator for the ESP is a HLW8012 chip that does the current/voltage/power measurement. Conveniently, this is the same chip that's used in the Sonoff Pow module, so all the code to drive it is already in place. Below the two ICs is R12 it's R002 i.e. a 2mOhm resistor.  This may be different to the one in the Sonoff, so expect to use different calibration settings. </p> <p></p>"},{"location":"devices/HuaFan-Smart-Socket/#hookup","title":"Hookup","text":"<p>Unless you are just curious, there\u2019s no real need to unsolder the main board.  You can get at everything you need to re-flash it on the top side of the main board. \ufffc  For programming you need to unplug the unit for any mains and make connections to GND, Vcc and Rx.  That\u2019s 1, 2 and 4 on the back of the daughter board, counting from the right.</p> <p>The connection for Tx should have been on the back of the daughter board (all the circuit board tracks are in place on the daughter board).  However, for some reason they didn\u2019t populate R5 (or removed it after programming) so the Tx signal does not appear on the rear of the board like it was clearly designed to do.  </p> <p> Instead you have two options, either re-instate R5 with a very small piece of wire (or a teeny resistor if you have one) or solder a wire directly to the resistor pad/chip pin.  As the connection should be temporary (subsequent flashes will be Over the Air) I initially went for the simpler but more fragile direct connection, mechanically secured with some insulating tape.</p> <p>If you do prefer to solder a small wire across R5 then you will need to cut the small links on the main board around pad 5, as the designers of the main board have connected this pad to the GND plane with two small links, one at the end and to the left side of the pad.  Again, all this is on the top of the main board, you don\u2019t need to go delving underneath.</p> <p>On the front of the daughter board there is the GPIO0 pin (pad number 4, reading from the left).  This needs to be manually connected to ground and then the power applied to the ESP8266 to put it in programming mode.  You can solder something onto this, as shown, or pick it up where it connects to the blue LED with a small clip probe.</p> <p></p>"},{"location":"devices/HuaFan-Smart-Socket/#daughter-board-pinout","title":"Daughter board pinout","text":"<p>Viewed from above the main board</p> <pre><code>                         Front     Back\nGPIO14 - HLW8012 P pulse     1 |B| 1  0V (marked GND)\nGPIO12 - HLW8012 I/V pulse   2 |O| 2  3.3V (marked VCC)\nGPIO13 - HLW8012 I/V select  3 |A| 3  GPIO05 - Relay-\nGPIO00 - Blue LED-           4 |R| 4  GPIO03 (U0RxD) - Red LED-\nGPIO04 - Button-             5 |D| 5  Initially GND but ready for GPIO01 (U0TxD)\n</code></pre>"},{"location":"devices/HuaFan-Smart-Socket/#hookup-solder-free-option","title":"Hookup - Solder Free Option","text":"<p>Adding to the great guide above ...</p> <p>So if soldering isn't your bag, there are a few connection points that you can get at with clip probes. There is a +5V and GND contact on the left side of the board and the right LED legs give access to the ESP's GPIO0 and RXD. The tricky bit is the ESP's TXD line which, as stated before, is only accessible on the daughter board via the chip's pin or an smd pad above and to the right. @jwrw, I am in awe of anyone that can solder onto this pad! As an alternative, try connecting an alligator clip to a sewing pin 8) to make a probe and holding it in place with your finger during firmware programming (hey, it only has to work once as from then on you use OTA). Powering via the pcb contacts requires more current than my FTDI was able to source so a separate 5V power supply is required (a Raspberry Pi can provide the +5V/GND via its GPIO header if you haven't got a dedicated power supply at hand).</p> <p></p>"},{"location":"devices/HuaFan-Smart-Socket/#building-firmware","title":"Building Firmware","text":"<p>The process for building the firmware for the HuaFan is basically the same as for the Sonoff but with a few additional steps.</p> <p>Firstly, make sure that you have installed release 5.5.0 of Tasmota or later and that you have completed all of the standard preparation tasks mentioned in the Wiki.</p> <p>Next, you should ensure that you have installed version 2.4.0-rc1 or later of ESP8266/Arduino core that includes support for the 40MHz crystal used by the HuaFan. Installation instructions can be found here but are essentially as follows: - Start Arduino and open Preferences window. - Swap the existing link for the stable ESP8266/Arduino core release with https://github.com/esp8266/Arduino/releases/download/2.4.0-rc1/package_esp8266com_index.json in Additional Board Manager URLs field.. - Open Boards Manager from Tools &gt; Board menu and update esp8266 platform (check that it is using the RC version).</p> <p>Lastly, you need to edit the boards.txt file to allow selection of the 40MHz Crystal via the Arduino IDE Tools menu. Add the following lines into the section for the \"Generic ESP8266 Module\" and immediately after the \"generic.menu.CpuFrequency\" items:</p> <pre><code>generic.menu.CrystalFreq.26=26 MHz`\ngeneric.menu.CrystalFreq.40=40 MHz`\ngeneric.menu.CrystalFreq.40.build.extra_flags=-DF_CRYSTAL=40000000\n</code></pre>"},{"location":"devices/Hyleton-313-Smart-Plug/","title":"Hyleton 313 Smart Plug","text":""},{"location":"devices/Hyleton-313-Smart-Plug/#intro","title":"Intro","text":"<p>Recently I bought a very nice and compact Smart Plug (UK variant) from Aliexpress - a Hyleton 313. This was in fact the smallest smart plug device with UK plug I've ever seen - it is no bigger than an average USB/phone charger:</p> <p></p> <p>Another good thing is that it is built around an ESP8266 module, which gives us the possibility to change its firmware and install Tasmota.</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#open-the-case","title":"Open the case","text":"<p>There are no visible screws, however it is not that difficult to open the case using some sharp plastic or metal pry tool and a heat gun (or hair dryer on max setting also works - hold on each side for about 20-30 seconds). Heat the edge of the plug a bit, then work your way slowly and pry from the middle of side with the button, slowly moving the tool towards the corners.</p> <p>Alternatively if you don't have a heat gun or hair dryer you can use a pry tool or something else thin to slowly \"saw\" away at the middle of the side with the button until you are through (about 2-3mm) .</p> <p>With or without a heat gun/hair drier it can be quite tough - be careful and keep your fingers away from the tool you are using!</p> <p>Once you have got through the layer of adhesive you can lever the case open to dislodge the adhesive on the other sides.  Be careful not to accidentally knock off the PCB supports in each corner as these are crucial to safety.</p> <p>Once the case is open, the top side of the PCB will be exposed:</p> <p></p> <p>The WiFi module is soldered vertically to the main PCB and sits right next to the relay. In order to get access to its pins, remove the screw from the centre of the PCB. After that the bottom plastic plate, which holds the three mains connector prongs, can be moved a bit to the side without desoldering anything (it is attached with short cables to the PCB, but cables' length is just enough to move it out of the way of the WiFi module's pins).</p> <p>Here's a view of the bottom side of the PCB:</p> <p></p> <p>You can see the product labels (product code, date and board revision), as well as the UL number.</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#wifi-module-pins","title":"WiFi module pins","text":"<p>Here is a close-up view of the module's pins as seen from the bottom of the main PCB: </p> <p>And this is how module pins numbers are mapped (I had to desolder the module looking for labels when I tried to identify it): </p> <p>Failed to identify the module, I had remove the metal shielding cap to find the routing of the ESP8266's pins, so I grabbed the multimeter and soon I had the following table:</p> Module pin ESP8266 pin Pin name Pin name ESP8266 pin Module pin 1 7 Chip Enable Tout (ADC) 6 2 3 9 MTMS / GPIO14 MTDI / GPIO12 10 4 5 12 MTCK / GPIO13 MTDO / GPIO15 13 6 7 15 GPIO0 GPIO2 14 8 9 16 GPIO4 GPIO5 24 10 11 25 U0RXD U0TXD 26 12 13 Vdd - - GND 14"},{"location":"devices/Hyleton-313-Smart-Plug/#serial-connection","title":"Serial Connection","text":"<p>For programming you need to solder 4 jumper wires to pins 11, 12, 13 and 14: </p> Pin Function 11 Rx 12 Tx 13 Vdd 14 Ground <p>In this picture Yellow is Tx, Orange is Ground, Grey is Rx and White is Vdd:</p> <p></p> <p>Connect the other end of the wires to your USB-to-serial adapter and make sure the supply voltage selected is 3.3V.</p> <p>Shorting pin 7 (GPIO0) to ground while plugging the serial adapter into the computer's USB port will bring the module into UART firmware upload mode. See devices/Esptool for details of how to flash the firmware when in firmware upload mode.</p> <p>Once you have flashed the firmware, leave the jumpers soldered to the pins and unplug &amp; reinsert your USB-to-serial adapter - this will reset the unit and provide voltage to the ESP8266 which will then boot the new Tasmota firmware - you'll see a Wifi network called \"sonof-xxxx\" if it has flashed successfully worked (if you do not see the wifi, the flashing process might not have worked correctly and you'll need to try again).</p> <p>If you see the wifi network come up ok, you can de-solder the jumpers and reassemble the unit.</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#reassembly","title":"Reassembly","text":"<p>Screw the PCB back to the housing, and place the PCB back into the other half of the socket. Apply a small 1mm bead of super glue around the edges and firmly clip the two halves back together again, and hold firmly for about 30 seconds to allow the glue to cure. </p> <p>If you've done everything right you should have a fairly clean looking plug still with just a small amount of cosmetic scratches on the bottom side of the unit where you used the pry tool.</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#dangerous-failure-mode-to-avoid","title":"Dangerous Failure Mode To Avoid","text":"<p>When reassembling the plug, be extremely careful to ensure that the resistor next to the PCB screw is not leaning towards the earth (top) pin! It is very easy to slightly bend it towards the earth pin when unscrewing. If the resistor is too close to the earth pin, the plastic shield for the earth pin on the upper-half of the case will press the resistor down onto the earth pin and when a plug is inserted it can short-out and trigger a small explosion:</p> <p></p> <p></p> <p>This will kill the socket, and maybe you too. Take extreme caution - mains electricity is dangerous.</p> <p>If you cannot neatly clip everything back into place (i.e. the two halves of the shell don't neatly sit together again, or there is a springiness) then you may have caught the resistor. If you accidentally broke off the PCB standoffs when opening the case, this is harder to detect (as the PCB may be pushed further down than usual) so be especially careful.  Double &amp; triple check.</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#configuration","title":"Configuration","text":"<p>Enroll your plug back onto your wifi as usual for Tasmota (i.e. join the wifi network started by the plug, give it your wifi details, then restart it).</p> <p>Once Tasmota's WebUI configuration interface is loaded in the browser, you need to configure the template type:</p> <ol> <li>Go to \"Configuration\"</li> <li>Go to \"Configure template\"</li> <li>Create a new template that looks like this one and save it:</li> </ol> <p></p> <p>Once you have saved the template:</p> <ol> <li>Wait for the device to restart</li> <li>Go to \"Configuration\"</li> <li>Go to \"Configure module\"</li> <li>Select the new template you just created and save.</li> </ol>"},{"location":"devices/Hyleton-313-Smart-Plug/#note-on-leds","title":"Note on LEDs","text":"<p>Sonoff devices usually have a bi-colour LED, but just one of the colours can be controlled directly. The other colour is usually tied together with the relay, so it cannot be controlled independently. I think that is the reason why the Tasmota firmware by default controls just Led1 when a single relay is configured. In the configuration above, only the blue LED will be used (tied to GPIO2). But if you prefer the red LED, just change the values for Led1i and Led2i (select Led1i for GPIO0 and Led2i for GPIO2).</p>"},{"location":"devices/Hyleton-313-Smart-Plug/#additional-details","title":"Additional Details","text":"<p>If you want to read a detailed project log that uses this plug, you can do so at GitHub Blog page, although some of the information is now out of date.</p>"},{"location":"devices/KMC-70008-light-switch/","title":"KMC 70008 light switch","text":"<p>Shopping</p> <p>Depending on the version of the firmware shipped on the device, you may be able to flash it using the Tuya-Convert OTA flashing tool. This tutorial shows how that tool works.</p> <p>If the OTA flash method does not work, you will have to solder leads to flash the device. Except for GPIO0, the programming pins are not broken out on the PCB. The module has the usual ESP-12 pin layout, so carefully solder right to the chip's pins. The device button is connected to GPIO0. You do not need to solder onto GPIO0. Just hold the button down when booting the device to get it into flash mode.</p> <p> </p> <p>Once you get the device flashed, set up the Wi-Fi configuration and connect to the device using a browser using its IP address. To keep the device from constantly rebooting, the first configuration step you should perform is to set the module type to Generic (18).</p> <p>Configuration: * Digiblur's Tasmota forked firmware * Generic (18) * GPIO0: Button1 * GPIO13: Led1i * GPIO14: Relay1</p> <p>When the blue LED on GPIO 13 is set to LED1i the white light shines when the relay is off and the blue light illuminates then the relay is on. </p> <p>Further configuration and setup may be required as the blue LED constantly flashes.</p>"},{"location":"devices/KS-602S-Switch/","title":"KS 602S Switch","text":"<p>These Wi-Fi Smart Light Switches are essentially a sonoff basic in a decora wall switch.</p>"},{"location":"devices/KS-602S-Switch/#gpio-map","title":"GPIO Map","text":"<p>GPIO 0 - Button1 - Button </p> <p>GPIO 12 - Relay1 - Red LED and Relay</p> <p>GPIO 13 - Led1 (not Led1i like the Sonoff Basic) Green LED </p> <p>**As of May 2019 there may be a modified version.  This is the pinout. ** * GPIO 0 - Button1 - Button  * GPIO 14 - Relay1 - Relay * GPIO 16 - Led1/Led1i - Red LED * I couldn't find the green LED but it exists.</p>"},{"location":"devices/KS-602S-Switch/#product-links","title":"Product Links","text":"<p>Amazon Link of KULED Branded Switches</p>"},{"location":"devices/KS-602S-Switch/#unboxing","title":"Unboxing","text":"<p>Some revisions of the switch have the header marked GND, RXD, TXD, 3V3. Some revisions do not.  It has been reported that some boxes have mixed revisions.  If you are ever in doubt, double check with a meter to determine your pins.  Flashing process and hardware revision without the labels can be seen on the following video link.</p> <p>RXD is connected to Transmit on your programmer TXD is connected to Receive on your programmer Ground and 3.3vdc to power unit during flash.</p> <p>You do not need to solder a header to flash the board, an empty 4 pin header connected to 4 dupont jumper wires held into the empty header location works fine with a little pressure to ensure connectivity.</p> <p></p> <p>Hold the button(GPIO0) and plug in programmer. Note for newer / touch button devices (as of March 2021): If you have the newer version without a physical switch, you will not be able to hold down a button to ender programming mode! The only way to enter programming mode is to physically short GPIO0 and GND (a picture of the GPIO0 location is here: https://raw.githubusercontent.com/tasmota/docs/master/docs/_media/gpio0.png). Make the connection, plug in the device, let go of the connection, and you should be in programming mode.</p> <p>Device works perfectly as a Sonoff Basic but the LED will be backwards as designed.  The Red LED is hardwired to the relay and the green is controllable over GPIO pins.  If you wish to change the functionality to have the green LED when the device is off, you can utilize or change the template to a generic device type and map the suggested names except you will choose Led1 instead of Led1i. </p> <p></p>"},{"location":"devices/Kesen-KS-604S/","title":"Kesen KS 604S","text":"<p>This Tuya Wi-Fi module ESP8266 based device has a really attractive form factor and functionality (in-wall, single gang, dual outlet, USB port, each individually controllable).</p> <p></p> <p>This device can be most easily flashed using using Tuya-Convert. Others have reported that flashing this device by attaching leads to the serial interface requires disassembling and unsoldering the internal AC components to get access to the needed contacts, however an AliBaba device was successfully flashed by connecting to the four terminals at the bottom of the back circuit board (3v3, Tx, Rx, G) and connecting pin D3 in block J7 to ground while booting and during the flashing process.</p>"},{"location":"devices/Kesen-KS-604S/#shopping","title":"Shopping","text":"<ul> <li>Amazon</li> <li>Alibaba (10 minimum)</li> </ul>"},{"location":"devices/Kesen-KS-604S/#configuration","title":"Configuration","text":"<p>It appears that there are different versions of the KS-604S. The device that @DavinKD flashed (likely purchased from Amazon in early to mid March 2019) has a different GPIO configuration than devices purchased from Alibaba in late March.</p> <p>Rear</p> <p></p>"},{"location":"devices/Kesen-KS-604S/#amazon-device","title":"Amazon Device","text":"<p>{\"NAME\":\"KS-604S\",\"GPIO\":[255,255,56,255,255,17,255,255,22,21,255,255,18],\"FLAG\":1,\"BASE\":18}</p> GPIO Function Configuration 2 Device Status (Green) LED1i (56) 5 Top Button Button1 (17) 12 Bottom Receptacle Relay2 (22) 13 Top Receptacle Relay1 (21) 16 Bottom Button Button2 (18) <p>The USB port on this variant is not switchable.</p>"},{"location":"devices/Kesen-KS-604S/#alibaba-device","title":"Alibaba Device","text":"<p>{\"NAME\":\"KS-604S\",\"GPIO\":[158,255,255,17,56,18,255,255,22,21,57,23,255],\"FLAG\":0,\"BASE\":18}</p> GPIO Function Configuration 0 Device Status (Green) LEDLinki (158) 3 Top Button Button1 (17) 4 Top LED (Orange) LED1i (56) 5 Bottom Button Button2 (18) 12 Bottom Receptacle Relay2 (22) 13 Top Receptacle Relay1 (21) 14 Bottom LED (Orange) LED2i (57) 15 USB Port Relay3 (23) <p>This configuration requires the <code>LedLinki</code> Component (introduced in 6.5.0.12) to associate the GPIO to the status LED indicator. In order for the LED power indicators to follow the state of each receptacle relay, <code>LedState</code> must be set to show the power state on the LEDs. Select the desired power on state for the device's relays using <code>PowerOnState</code> and/or a <code>System#Boot</code> triggered rule. This device also requires SetOption63 (introduced in 6.5.0.9) in order to disable relay power feedback state scanning at restart.</p> <p>The following Console statements define the necessary settings and rules as described above. <pre><code>Backlog SerialLog 0; PowerOnState 0; SetOption63 1; LEDState 1\nRule1 ON System#Boot DO Power3 On ENDON    # Turn the USB port on\nRule1 1\n</code></pre></p>"},{"location":"devices/KingArt/","title":"KingArt-N1 - Touch Light Light Switch","text":"<p>This is a relatively cheap Premium glass fronted touch panel, looks clean and minimal when installed too.  </p> <p>Table Of Contents: * Device Features * * Breakdown * * Capacitive Touch IC * Re-Programming * * Tools * * Setup * * Programming Mode * Reference</p>"},{"location":"devices/KingArt/#device-features","title":"Device Features","text":"<ul> <li>ESP8285 micro</li> <li>Blue status LED (micro controlled)</li> <li>Separate touch IC controlled switch status indicators (blue and red)</li> <li>Confirmed 10A/250VAC mains relay</li> </ul> <p> -- Image: The 1 Gang Touch Panel, featuring the glass front (protective plastic film still on)</p>"},{"location":"devices/KingArt/#breakdown","title":"Breakdown","text":"<p>Whats in the package...  This looks like a reasonably simple setup.  </p> <p>Removing the front glass panel you have access to the main control PCB.  This holds the ESP8285 micro-controller and accompanying guff.  I've worked through mapping most of the pins of interest - notes are in the images below.</p> <p>The control board runs off a 5V fed from the Power-Relay board at the read of the unit - a 3v3 reg is the control board for all the logic. The back of the control board has the touch controller and the 8way header to the Power-Relay board. There are only touch pads on the back of the control board as a means to interface with the microcontroller. There is no SonOff type programming header arrangement., see Re-Programming.</p> <ul> <li> <p>Control and Interface PCB  Sorry for the horrible pics.. will replace</p> </li> <li> <p>Some Application-Interesting Pin Allocations </p> </li> </ul> <p>*Trace for the King Art Switch  with 2 (Touch-)Button is confirmed  - works well with this Parameters</p> <p>The Power-Relay board is reasonably simple as well. This board, being a 1-gang switch, only has a single relay - but the PCB is set out for 3 (again, see images for trace and pin notes ).</p> <ul> <li>Power-Relay PCB  </li> </ul>"},{"location":"devices/KingArt/#capacitive-touch-ic","title":"Capacitive Touch IC","text":"<p>This board uses a dedicated capacitive touch control IC.</p> <p>Something interesting, that this IC manages touch switching as well a red and blue touch status LEDs for each of the touch pads that it services as the buttons. The IC illuminates a diffuser block over a 'button', indicating: * Blue : when Idle - button state is 'OFF' * Red+Blue  : when Active - button state is 'ON'</p> <p>The TW8001 is also linked to a red error indicator led on the front of the Control Board - it is co-located above the EPS8285 microcontroller's Blue status indicator. </p> <p>This appears to be used by the Touch IC to indicate its own state information * eg, if the touch is held for +30s the touch shows an error state (red LED) and resets - useful if you replace the front panel and it needs to recalibrate.</p> <p>With regard to interfacing with the microcontroller, this device seems function with GPIO-friendly pin state for the capacitive button state reporting.</p> <p></p> <p>Here is the only information I have been able to find on this device at the time of this investigation :  TechWave - TW8001.</p> <p>It does have much (or: any) in way of public datasheets. If anyone finds a datasheet please link it here!</p>"},{"location":"devices/KingArt/#re-programming","title":"Re-Programming","text":""},{"location":"devices/KingArt/#tools","title":"Tools","text":"<p>You shall need something in way of the following: (or whatever works for you, this is just my setup) * A USB-TTL adapter (TTL, 3V3.. something also with a 3V3 source)  * Some leads * A soldering iron (solder, bits.. etc) - I'm going to assume you know how/what to do with this.</p>"},{"location":"devices/KingArt/#setup","title":"Setup","text":"<p>(This is my setup) USB-TTL  |  Lead   |  Board   3V3        Red       3v3   TXD        White     RX   RXD        Grey      TX   GND        Black     GND</p> <p>NNB : DO NOT USE or CONNECT THE 5V  ever..</p> <p></p>"},{"location":"devices/KingArt/#programming-mode","title":"Programming Mode","text":"<p>Before you can program the board you have to start the ESP8285 micro in Programming Mode. This is important.</p> <p>Remember we soldered the blue lead to the board at (SW) - you will use this to force the micro to the required mode on startup.  (you can only do this on startup)</p> <p>Entering Programming Mode: * Remove power from the board * Short the blue lead (SW) to ground (use a ground pad on the board or on your programmer)    * NOW: Apply power.  You can remove the short to ground after a second or two.</p>"},{"location":"devices/KingArt/#so-are-we-in-programming-mode","title":"So, Are we in Programming Mode? ...","text":"<ul> <li> <p>Test Failed - try again If the board has its factory firmware installed still it usually flashes the status LED on startup.. (ie: not in programming mode)</p> </li> <li> <p>Test Success If you have successfully put the micro into programming mode the ONLY the blue status illumination of the touch pad will be ON. -&gt; Now you can access and upload to the device using your preferred tool (Atom IDE, ESPtool, Arduino.. etc)</p> </li> </ul> <p>Remember that the flashing mode MUST BE DOUT as it is for ALL devices on which Tasmota is flashed!</p>"},{"location":"devices/KingArt/#reference","title":"Reference","text":"<p>https://github.com/EphemeralPersistence/Sonoff-Tasmota/wiki</p>"},{"location":"devices/KingArts-touch-Dimmer/","title":"KingArts touch Dimmer","text":"<p>On AliExpress you can buy a wifi dimmer for mains voltage (110 or 220V) It's a brandles dimmer, but can be found here: AliExpress page</p> <p>It comes in a couple of forms, but sinds I live in Holland, I chose the EU style, single gang, 220V, White edition. It has a glass front plate with 3 proximity/touch switches (On/Off, dimm up &amp; dimm down) and a wifi indicator LED. </p> <p>The inside houses 2 PCB's; a power board and a control board:</p> <p>The control board: </p> <p>There are two main chips on board: An ESP8266 and a Nuvoton n76e003at20 The Nuvoton will do the switch side of it all, the ESP communication.</p> <p>The mains board: </p> <p>For flashing, we only need the control board. Solder small wires to the pads as marked on the picture:</p> <ul> <li>3.3V</li> <li>GND</li> <li>RX</li> <li>TX</li> <li> <p>Sw (gpio0)</p> </li> <li> <p>Solder 'Res1' to GND</p> </li> </ul> <p>Note that the silkscreen on this board has TX and RX wrong.</p> <p></p> <p>Now use a USB to serial adapter to connect the wires. </p> <p>Use a 3.3V board, NOT 5V, this will destroy the ESP chip on the board!</p> <p>Connect: GND   to   GND 3.3V  to   3.3V RX    to   RX  (due to the fact the silkscreen is wrong, otherwise, RX connects to TX and vice versa) TX    to   TX SW    to   GND  -- only during power up, to put the ESP in programming mode.</p> <p>From here the upload is the same as for all other Tasmota devices. See the upload page for detailed info.</p> <p>After the upload was successful, unplug the device from the serial adapter. You can now desolder all the connections you have made earlier. Also remove the wire between RES1 and GND. Then plug the board back in its housing. Be careful with the connector on the underside of the board. Line up the pins with te header and lightly press it in its place.</p>"},{"location":"devices/KingArts-touch-Dimmer/#connecting-to-mains-installation","title":"Connecting to mains installation:","text":"<p>WARNING! THIS PROJECT INVOLVES WORKING WITH HIGH VOLTAGE AND YOU COULD KILL YOURSELF AND/OR SET YOUR HOUSE ON FIRE.</p> <p>Connect your light to the dimmer according the manual.  Keep in mind, the dimmer itself needs a Neutral wire as well. If you replace an existing switch or dimmer, it can be that you need to run an extra neutral wire.</p>"},{"location":"devices/KingArts-touch-Dimmer/#first-connection","title":"First connection","text":"<p>When you first power up the dimmer switch, it comes up in AccessPoint mode. Follow the instructions here </p>"},{"location":"devices/KingArts-touch-Dimmer/#set-correct-module-type","title":"Set correct module type","text":"<p>Once you have all connected, you should go to the configuration page of the Tasmota Dimmer. Go to your browser and fill in the IP address. Then go to 'Configuration' and then to 'Configure Module'. From the drop down menu select module 58: PS-16-DZ. Then hit Save. The module will restart and you are done!  You can now toggle the light and use the slider to dimm the lights from the tasmota webpage. Or better, use your favorite domotica software to control it via MQTT.</p>"},{"location":"devices/Kohree-VHP560-Smart-Light-Compatible%2C-RGBCW-Wi-Fi-LED-Bulb-A19/","title":"Kohree VHP560 Smart Light Compatible, RGBCW Wi Fi LED Bulb A19","text":"<p>Kohree VHP560 Smart Light - A19 RGBCW Wi-Fi LED Bulb  </p> <p>Easily flashed OTA using Tuya-Convert (OTA flashable as of Sept. 29, 2019, recent purchase).  </p> <p>GPIO4 = PWM1 GPIO5 = PWM5 GPIO12 = PWM2 GPIO13 = PWM4 GPIO14 = PWM3  </p>"},{"location":"devices/LC-Technology-WiFi-Relay/","title":"LC Technology WiFi Relay","text":""},{"location":"devices/LC-Technology-WiFi-Relay/#lc-technology-wifi-relay-single-relay","title":"LC Technology WiFi Relay - Single Relay","text":"<p>The LC Technology relay devices use GPIO1 and GPIO3 for the serial communications used to control the relays. You do not need to specify these in the template. <code>SerialSend</code> uses these standard serial communications GPIO by default.</p> <p>In order to use LC Technology WiFi Relay for 1 relay version: </p> <ul> <li>Set module to Generic (18) (in module configuration and click save)</li> <li>Set D3 GPIO0 as Relay1 (21) (in module configuration and click save)</li> <li>Disable SerialLog (type <code>seriallog 0</code> in the Tasmota console)</li> <li>Add the following rules typing in the console:   <pre><code>Rule1\n on System#Boot do Backlog Baudrate 9600; SerialSend5 0 endon\n on Power1#State=1 do SerialSend5 A00101A2 endon\n on Power1#State=0 do SerialSend5 A00100A1 endon\n</code></pre></li> <li>Enable the rule (type <code>rule1 1</code> in the Tasmota console)</li> <li>Note: If you use LC Technology v1.2 and this rule does not work, try to use 115200 baudrate</li> <li>Note: If that doesn't work for you, you may find that using <code>Power1#Boot</code> as the event to trigger the baud rate setting (instead of <code>System#Boot</code>) works, as it did for me. So the alternate rule is:   <pre><code>on Power1#Boot do Backlog Baudrate 9600; SerialSend5 0 endon\non Power1#State=1 do SerialSend5 A00101A2 endon\non Power1#State=0 do SerialSend5 A00100A1 endon\n</code></pre></li> </ul>"},{"location":"devices/LC-Technology-WiFi-Relay/#lc-technology-wifi-relay-dual-relay-note-older-versions-of-this-board-used-a-baud-rate-of-9600-so-if-115200-doesnt-work-try-9600","title":"LC Technology WiFi Relay - Dual Relay (note, older versions of this board used a baud rate of 9600, so if 115200 doesn't work, try 9600)","text":"<p>To configure an LC Technology ESP8266 Relay X2, use the following settings...</p> <ul> <li>Set module to Generic (in module configuration and click save)</li> <li>Set GPIO0 and GPIO2 as Relay1 and Relay 2 (in module configuration and click save)</li> <li>Disable SerialLog (type <code>seriallog 0</code> in the Tasmota console)</li> <li>Add the following rules typing in the Tasmota console:   <pre><code>Rule1\n on System#Boot do Backlog Baudrate 9600; SerialSend5 0 endon\n on Power1#State=1 do SerialSend5 A00101A2 endon\n on Power1#State=0 do SerialSend5 A00100A1 endon\n on Power2#State=1 do SerialSend5 A00201A3 endon\n on Power2#State=0 do SerialSend5 A00200A2 endon\n</code></pre></li> <li>Enable the rule (type <code>rule1 1</code> in the Tasmota console)  </li> </ul>"},{"location":"devices/LC-Technology-WiFi-Relay/#lc-technology-wifi-relay-quad-relay","title":"LC Technology WiFi Relay - Quad Relay","text":"<p>Info</p> <p>The template provided below did not work on an ESP-01 running Tasmota 8.1.0 nor on an ESP-01S running Tasmota 14.2.0. If after setting the template string you do not see the options to configure the relevant GPIO pins, in configuration open <code>Configure Template</code> and manually configure GPIO0, GPIO2, GPIO4 and GPIO5 as Relay1, Relay2, Relay3 and Relay4.</p> <ul> <li>In configuration open <code>Configure Other</code> paste this template and select activate <code>{\"NAME\":\"LC Technology 4CH Relay\",\"GPIO\":[52,255,17,255,255,255,255,255,21,22,23,24,255],\"FLAG\":0,\"BASE\":18}</code></li> <li>Open <code>Configure Module</code> and set GPIO0, GPIO2, GPIO4 and GPIO5 as Relay1, Relay2, Relay3 and Relay4. Click Save.</li> <li>Disable SerialLog (type <code>seriallog 0</code> in the Tasmota console)</li> </ul> <p>Enter this command in console (configure the 1st rule) <pre><code>Rule1\n on System#Boot do Backlog Baudrate 115200; SerialSend5 0 endon\n on Power1#State=1 do SerialSend5 A00101A2 endon\n on Power1#State=0 do SerialSend5 A00100A1 endon\n on Power2#State=1 do SerialSend5 A00201A3 endon\n on Power2#State=0 do SerialSend5 A00200A2 endon\n on Power3#State=1 do SerialSend5 A00301A4 endon\n on Power3#State=0 do SerialSend5 A00300A3 endon\n on Power4#State=1 do SerialSend5 A00401A5 endon\n on Power4#State=0 do SerialSend5 A00400A4 endon\n</code></pre></p> <p>Info</p> <p>Make sure the jumper connectors on the three pairs of pins on the board are connected correctly. In my case, the ESP-01's TX and RX pins are connected to the middle pair of pins while the other microcontroller's RX and TX pins are connected to the pair of pins farthest from the ESP-01 (and closest to the microcontroller). These need to be connected via jumpers for the two to communicate.</p> <p>Info</p> <p>Older versions of this board used a baud rate of 9600, so if 115200 doesn't work, try 9600. To do so, replace the first line of <code>Rule1</code> with <code>on System#Boot do Backlog Baudrate 9600; SerialSend5 0 endon</code>.</p> <p>Enable the rule (type <code>rule1 1</code> in the Tasmota console). What this rule does is it sends serial commands to the second microcontroller on the board telling it to switch the respective relays on or off. The ESP-01 does not switch the relays itself.</p> <p>At this point, head back to the main menu and try toggling the different relays. If the relays work, you've successfully set up your relay board. If not, continue below.</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#switching-to-mode-1","title":"Switching to Mode 1","text":"<p>First, check the LEDs on the board. If LED D5 is on (blue on my board, the middle LED) then the controller is in Mode 2. By pressing the correct button during power up you can change back to Mode 1. Which button you need to press seems to vary between versions of this board. Try holding S1 during power up. If LED D7 turns on (red in my case) and LED D5 is off you've switched to Mode 1. If not, remove power and repeat with button S2. Be careful as when you press the wrong button afterwards you again change modes again! Again, go to the main menu and try toggling the relays. Should they still not work continue below.</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#configuring-the-nuvoton-n76e003at20","title":"Configuring the Nuvoton N76E003AT20","text":"<p>Newer versions of the board use the Nuvoton N76E003AT20 as its host microcontroller similary to the LC Technology WiFi Relay X2. This microcontroller requires a special configuration for it to start listening to serial commands. We need to add a new rule that sends this configuration to the N76E003AT20. However, if we combine this with our rule for turning on and off the relays, the rule gets too big and won't be accepted. We thus split it up into two rules. <pre><code>Rule 1\n on System#Boot do Backlog Baudrate 115200 endon\n on SerialReceived#Data=41542B5253540D0A do SerialSend5 5749464920434f4e4e45435445440a5749464920474f542049500a41542b4349504d55583d310a41542b4349505345525645523d312c383038300a41542b43495053544f3d333630 endon\n</code></pre> <pre><code>Rule2\n on Power1#State=1 do SerialSend5 A00101A2 endon\n on Power1#State=0 do SerialSend5 A00100A1 endon\n on Power2#State=1 do SerialSend5 A00201A3 endon\n on Power2#State=0 do SerialSend5 A00200A2 endon\n on Power3#State=1 do SerialSend5 A00301A4 endon\n on Power3#State=0 do SerialSend5 A00300A3 endon\n on Power4#State=1 do SerialSend5 A00401A5 endon\n on Power4#State=0 do SerialSend5 A00400A4 endon\n</code></pre> Afterwards activate both rules by entering <code>rule1 1</code> and <code>rule2 1</code>. Head back to the main menu and try toggling the relays. They should now switch as expected.</p> <p>Info</p> <p>For more information on what <code>Rule1</code> does, see the explanation in the section on the X2.</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#lc-tech-wifi-relay-x2-N76E003AT20","title":"LC Technology WiFi Relay X2 with Nuvoton N76E003AT20","text":"<p>Note: This version of the board has the Nuvoton N76E003AT20 as its host microcontroller instead of STC15F104W. This device requires a special configuration for it to start listening to serial commands.</p> <p>Use the following device template, configurable in <code>Configure Other</code>:</p> <pre><code>{\"NAME\":\"LC-ESP01-2R-5V\",\"GPIO\":[0,148,0,149,0,0,0,0,21,22,0,0,0],\"FLAG\":0,\"BASE\":18}\n</code></pre> <p>Add the following rules:</p> <pre><code>on System#Boot do Backlog Baudrate 115200 endon\non SerialReceived#Data=41542B5253540D0A do SerialSend5 5749464920434f4e4e45435445440a5749464920474f542049500a41542b4349504d55583d310a41542b4349505345525645523d312c383038300a41542b43495053544f3d333630 endon\non Power1#State=1 do SerialSend5 A00101A2 endon\non Power1#State=0 do SerialSend5 A00100A1 endon\non Power2#State=1 do SerialSend5 A00201A3 endon\non Power2#State=0 do SerialSend5 A00200A2 endon\n</code></pre> <p>Here's what the above code does line per line:</p> <ul> <li>Sets the serial baud rate to 115200 (this seems to be the default for the Nuvoton LCTech Relay)</li> <li>This sends a certain stream of serial messages (in hex) below after receiving AT+RST (41542B5253540D0A in hex) from the NUVOTON devices. This message seems to make the NUVOTON enter listening mode. The long stream of hex messages for sending is equivalent to the ff. key in ASCII:</li> </ul> <p><code>WIFI CONNECTED WIFI GOT IP AT+CIPMUX=1 AT+CIPSERVER=1,8080 AT+CIPSTO=360 <pre><code>* The PowerX#State=xxx... messages are triggers to send serial messages to the NUVOTON chip.\n\nDo not forget to enable the rule.\n\nAfter the device receives the bypass key, it wouldn't immediately respond to commands. The ESP has to wait for the following return messages echoed back to Serial first:\n</code></pre> AT+CIPMUX=1 AT+CIPSERVER=1,8080 AT+CIPSTO=360 <pre><code>After these messages are sent back by Nuvoton to the ESP, the green LED beside the green LED will start blinking once a second. From here you can verify that the relay indeed starts to receive commands from the ESP.\n\n## LC Technology WiFi Relay X4 with Nuvoton N76E003AT20\n\nNote: This version of the board has the Nuvoton N76E003AT20 as its host microcontroller instead of  STC15F104W. Becareful, not working with Nuvoton MS51FB9AE.  (Not sure why this 'be careful' comment is here, the following did work on LC x4 board with Nuvoton MS51FB9AE rec'd Jan 2021, and Tasmota 9.2.0  If the board LEDs are not solid red + 1 sec green blink, press button S2 when powering up board.  If buttons are pressed and solid blue is shown, it will not work.)\nSame special configuration than with X2 relay version with Nuvoton N76E003AT20.\n\nUse the following device template, configurable in `Configure Other`:\n</code></pre> {\"NAME\":\"LC-ESP01-4R-12V\",\"GPIO\":[0,148,0,149,0,0,0,0,21,22,23,24,0],\"FLAG\":0,\"BASE\":18} <pre><code>Add the following rules:\n</code></pre> Rule1 on System#Boot do Backlog Baudrate 115200 endon on SerialReceived#Data=41542B5253540D0A do SerialSend5 5749464920434f4e4e45435445440a5749464920474f542049500a41542b4349504d55583d310a41542b4349505345525645523d312c383038300a41542b43495053544f3d333630 endon on Power1#State=1 do SerialSend5 A00101A2 endon on Power1#State=0 do SerialSend5 A00100A1 endon on Power2#State=1 do SerialSend5 A00201A3 endon on Power2#State=0 do SerialSend5 A00200A2 endon on Power3#State=1 do SerialSend5 A00301A4 endon on Power3#State=0 do SerialSend5 A00300A3 endon on Power4#State=1 do SerialSend5 A00401A5 endon on Power4#State=0 do SerialSend5 A00400A4 endon Rule1 1 <pre><code>Activate the rules:\n</code></pre> Rule1 1</code> * Open <code>Configure Module</code> and set GPIO0, GPIO2, GPIO4 and GPIO5 as Relay1, Relay2, Relay3 and Relay4. Click Save. * Disable SerialLog (type <code>seriallog 0</code> in the Tasmota console)</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#beware-of-counterfeit-modules","title":"Beware of counterfeit modules","text":"<p>If your board just continuously flashes its led when powered on and no esp-01 is entered, the onboard STC15F104W needs to be programmed! For more details (link)</p> <p>Additionally, once programmed, you may also have to remove r4. Some issues exist where r3 and r4 are swapped, but just removing r4 works.</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#esp-01s-5v-relay-module-v10-relay","title":"ESP-01S 5V Relay Module V1.0 Relay","text":"<p>This board will not boot unless R2 is removed or the easier hardware fix below is carried out. A template is available ([here] (https://templates.blakadder.com/ESP-01S-Relay-v1.html))</p>"},{"location":"devices/LC-Technology-WiFi-Relay/#easier-hardware-fix","title":"Easier hardware fix","text":"<p>This is an easier fix for the ESP-01S relay v1.0 board, which does not require pcb cuts or resistor desoldering, just a 10K resistor soldered as in image: this mod prevents the relay flicker, and connects ch_pd, too</p> <p></p>"},{"location":"devices/LC-Technology-WiFi-Relay/#how-to-use-with-up-to-12v-power-supply","title":"How to use with up to 12V power supply","text":"<p>LC Technology WiFi Relay use CJT1117B linear regulator which support input power up to 12V. It is ok for ESP-01 and N76E003, but not for relay. Relay connected without any voltage regulator to input power directly.</p> <p>The easier way to replace existing relay. Part number for 12V relay is SRD-12VDC-SLC. You can use similar analogs for 6V and 9V.</p> <p></p>"},{"location":"devices/LSC-Smart-Connect-Smart-Power-Plug/","title":"LSC Smart Connect Smart Power Plug","text":"<p>Simple somewhat compact WiFi controllable EU plug socket. Sold in the Netherlands by Action.</p>"},{"location":"devices/LSC-Smart-Connect-Smart-Power-Plug/#product","title":"Product","text":""},{"location":"devices/LSC-Smart-Connect-Smart-Power-Plug/#internals","title":"Internals","text":"<p>Inside the device is a Tuya TYWE2S. This device can be flashed using a software OTA hack using tuya-convert</p>"},{"location":"devices/LSC-Smart-Connect-Smart-Power-Plug/#flashing","title":"Flashing","text":"<p>Simply connect the (clearly labeled) 3v3, GND, TX, RX pins of the TYWE2S to the appropriate pins on your serial adapter and connect IO0 to GND to enter flashing mode.</p> <p>With the device connected and in flashing mode, create a backup of the factory firmware, erase the flash, and flash a tasmota firmware approximately as follows:</p> <pre><code>esptool.py read_flash 0x000000 0x100000 image1M.bin\nesptool.py erase_flash\nesptool.py write_flash -fs 1MB -fm dout 0x0 tasmota-lite.bin`\n</code></pre>"},{"location":"devices/LSC-Smart-Connect-Smart-Power-Plug/#configuration","title":"Configuration","text":"<p>\u26a0\ufe0f Warning! While the below configuration is correct and working, configuring a button on GPIO14 will make the device reset itself to the default Tasmota configuration after a number of seconds.</p> <p></p>"},{"location":"devices/LeFun-SK2-Smart-Power-Strip/","title":"LeFun SK2 Smart Power Strip","text":"<p>The LeFun SK2 has 4 mains power and 4 USB ports. Each mains power is independently controlled and the USB group is controllable via a solid state relay. The ESP8266 module inside is likely a TYWE3S by Tuya but I didn't open the case and use the tuya-convert tool to flash.</p> <p></p> <p></p>"},{"location":"devices/Lingan-SWA1/","title":"Lingan SWA1","text":""},{"location":"devices/Lingan-SWA1/#connection","title":"Connection","text":"<p>Vcc - 3,3V TX - RX RX - TX GND - GND</p>"},{"location":"devices/Lingan-SWA1/#additional-information","title":"Additional Information","text":"<p>More Infos can be found here: Lingan SWA1 Plug in Wi-Fi Socket with MQTT (ESP8266).  </p>"},{"location":"devices/Lingan-SWA1/#device-images","title":"Device Images","text":""},{"location":"devices/Lingan-SWA1/#gpio-config","title":"GPIO Config","text":""},{"location":"devices/Luminea-ZX-2844-675/","title":"Luminea ZX-2844-*","text":"<p>also known as: * XS-RGBW-LedControl-V2.0.2 * JCD XS-RGBW</p> <p></p> <p>sold by PEARL and amazon (i know know if they are available outside D-A-CH) * https://www.pearl.de/a-ZX2844-3103.shtml * https://www.amazon.de/Luminea-Zubeh%C3%B6r-Smarthome-LED-Strips-WLAN-Controller-spritzwassergesch%C3%BCtzt/dp/B074T11793</p>"},{"location":"devices/Luminea-ZX-2844-675/#hardware","title":"Hardware","text":"<p>There is an ESP8266EX sitting on the backside. 4 PWM outputs are connected to drive the 4 output channels (RGB + W). Red is on GPIO14 Green is on GPIO12 Blue is on GPIO5 White is on GPIO13</p> <p>The pushbutton is GPIO13.  Assign it to Button1 for local on/off control.</p> <p>You can configure it as a \"generic module\"</p> <p>And set the GPIO as follow:</p> Function ESP Pin Channel R GPIO 14 PWM1 G GPIO 12 PWM2 B GPIO 5 PWM3 W GPIO 0 PWM4 PushButton GPIO 13 Button1 <p>There is a second version with a green PCB and different pinout:</p> Function ESP Pin Channel R GPIO 4 PWM1 G GPIO 12 PWM2 B GPIO 14 PWM3 W GPIO 5 PWM4 PushButton GPIO 0 Button1"},{"location":"devices/Luminea-ZX-2844-675/#serial-connection","title":"Serial Connection","text":"<p>See the Hardware Preparation page for general instructions.</p> <p></p> <p>The serial header (3.3V, RXD, TXD, GND) as well as GPIO0, GPIO2 and RESET (IO0, IO2, RST) are populated as test pads on the frontside of the PCB. You can easily add some solder to fix the wires during the flash process.</p> <p>To place the board into flashing mode, you will need to short IO0 to GND. This can remain shorted while flashing is in progress, but you will need to remove the short in order to boot the Tasmota firmware.</p>"},{"location":"devices/MagicHome-LED-strip-controller/","title":"MagicHome LED strip controller","text":""},{"location":"devices/MagicHome-LED-strip-controller/#magichome-led-controllers-aka-flux-led-aka-arilux-al-lc01","title":"MagicHome LED controllers (aka Flux-Led, aka Arilux AL-LC01)","text":"<ul> <li>Shopping</li> </ul> <p>Board is essentially an ESP-12S (or ESP-2M) with necessary voltage converters, little bit of flash, 3 or 4 MOSFETs to drive LED strip (depending on the model), connector for LED strip and optional IR receiver.</p> <p>Warning</p> <p>There are new versions of these boards that use an incompatible module, Tasmota cannot be flashed on them! Before anything, make sure your board has a compatible chip. </p> <p>Module is powered by 12V that is used to power LED strip as well. RGB models are declared as 144W, RGBW models as 192W.</p> <p>Module comes in (at least) 3 variants:  - LC01: RGB,  - LC02: RGBW and  - LC03: RGB  with IR receiver. - LC04: RGBW with IR receiver. - LC05: RGB  with Screw-Headers. - LC06: RGBW/WW  with Screw-Headers</p> <p>A different version of this controller with an ESP8285 is documented here The new models comes with the BL602 (RISC-V) and still incompatible as the issue</p>"},{"location":"devices/MagicHome-LED-strip-controller/#serial-connection","title":"Serial Connection","text":"<p>Board has RX, TX, GND and GPIO00 pads exposed on the bottom side of the PCB. You need to solder temporary wires those pads.</p> <p></p> <p>You need to power the board while keeping it connected to the programmer.</p> <p>With all Sonoff boards that work with AC, this is a big no-no that will fry your programmer, your Sonoff and might even get you killed. In this case, you'd be dealing with 12V, so the only thing that matters is to connect the GND of your programmer to GND of the board before you supply the 12V. Not doing so might fry your board and/or programmer, but would definitely not hurt you. </p> <p>Steps used:  1. Connect your programmer to a breadboard and notice the locations of GND, TX and RX columns. 1. Open the MagicHome controller box and expose bottom side of PCB 1. Solder 4 jumper wires to 4 exposed pads. 1. FIRST connect GND to your programmer (and make sure they are connected well!) 1. Connect RX from the MagicHome to TX on the programmer. TX from the board goes to RX on the programmer. 1. Connect GPIO00 to GND (best to use same column on the breadboard) 1. Connect the 12V power supply to MagicHome. As GPIO00 is connected to GND, board will go into flash mode. Disconnect GPIO00 after few seconds. 1. Upload Tasmota like it would be any other board. 1. Once upload is complete, disconnect power from the MagicHome controller 1. Disconnect RX and TX and then only then GND. GND gets disconnected LAST.</p> <p>You can then connect the power back to the board and Tasmota should be running on it. Once you verify that board is up and you can access it over the Web, you can unsolder temporary wires and update subsequent firmware versions using OTA.</p>"},{"location":"devices/MagicHome-LED-strip-controller/#configuration","title":"Configuration","text":"<p>Some GPIO are preconfigured with the board:  - GPIO05 - (PWM2) Green color on the led strip, first pin from the GND - GPIO14 - (PWM1) Red color on the LED strip, second pin from the GND - GPIO12 - (PWM3) Blue color on the LED strip, third pin from the GND</p> <p>For instructions to setup the 24 Button Remote visit the AL-LC04 device page</p> <p>Check this for Board Version 2.3 : #1867</p> <p>Due to variants, you can configure: - GPIO04 - on non-IR boards, it's an open pin you can use for Onewire, button or something else. It might have pull-down resistor and/or bypass capacitor, so please take that into consideration. On IR-enabled boards, IR receiver is connected to this pin, so you can use IRRecv as functionality. - GPIO13  -  This pin is not used on RGB board (so you'll leave it as \"None\"), but on RGBW, it's driving another channel (cold white or warm white) for LED strip.</p>"},{"location":"devices/MagicHome-LED-strip-controller/#variant-without-rxtx-pads","title":"Variant without Rx/Tx pads:","text":"<p>-</p>"},{"location":"devices/MagicHome-LED-strip-controller/#using-the-irrecv-ir-remote-feature","title":"Using the IRrecv (IR Remote) feature","text":"<p>If you have a variant with an IR Remote (as per the opening picture), you can use the new <code>rule</code> command to make the remote buttons change the light levels. For example, this rule allows me to turn it on and off, change the brightness, and turn it on to full white:</p> <pre><code>rule1 on IrReceived#Data=0xFFF807 do power OFF endon on IrReceived#Data=0xFFB04F do WAKEUP endon on IrReceived#Data=0xFF906F do dimmer + endon on IrReceived#Data=0xFFB847 do dimmer - endon on IrReceived#Data=0xFFA857 do color #000000ff endon\n</code></pre>"},{"location":"devices/MagicHome-LED-strip-controller/#full-set-of-rules-for-ir-remote","title":"Full Set of rules for IR remote","text":"<p>Each rule can only be 511 characters long, some of the colors below use the built in predefined shortcut color numbers. <pre><code>rule1 on IrReceived#Data=0xFFF807 do power OFF endon on IrReceived#Data=0xFFB04F do WAKEUP endon on IrReceived#Data=0xFF906F do dimmer + endon on IrReceived#Data=0xFFB847 do dimmer - endon on IrReceived#Data=0xFFA857 do color 12 endon on IrReceived#Data=0xFF9867 do color 1 endon on IrReceived#Data=0xFFD827 do color 2 endon on IrReceived#Data=0xFF8877 do color 3 endon on IrReceived#Data=0xFF28D7 do color  #007FFF endon  on IrReceived#Data=0xFF38C7 do color 4 endon\n\nrule2 on IrReceived#Data=0xFFE817 do color #FF3F00 endon on IrReceived#Data=0xFF48B7 do color #00FF3F endon on IrReceived#Data=0xFF6897 do color #3F00FF endon on IrReceived#Data=0xFF02FD do color 4 endon on IrReceived#Data=0xFF32CD do color #00FFBF endon on IrReceived#Data=0xFF20DF do color #7F00FF endon on IrReceived#Data=0xFF50AF do color #FF7F00 endon on IrReceived#Data=0xFF7887 do color #00BFFF endon on IrReceived#Data=0xFF708F do color #FF00FF endon on IrReceived#Data=0xFFF00F do color #FF003F endon\n\nrule3 on IrReceived#Data=0xFF00FF do scheme 4 endon on IrReceived#Data=0xFF58A7 do scheme 3 endon on IrReceived#Data=0xFF30CF do scheme 2 endon on IrReceived#Data=0xFFB24D do backlog BlinkCount 600; Power 3 endon\n</code></pre> After setting the rules you need to activate them with the following: <pre><code>rule1 1\nrule2 1\nrule3 1\n</code></pre></p> <p>The hex codes for the \"Data\" value come from the data tag when looking at the JSON sent via MQTT. You can also view this data on the Tasmota console screen. From here you can program it to do what ever you want. See here for more details: devices/Rules</p> <p></p>"},{"location":"devices/MagicHome-with-ESP8285/","title":"MagicHome with ESP8285","text":"<p>Yet another MagicHome RGB controller. I specifically had this one.</p> <p>Aside from it going 9-28V, there are no other external model numbers etc, however opening it up revealed a very different configuration inside, using an ESP8285 chip directly on the board.</p> <p></p> <p>(Right click and view the original image to see the full size image for all images below)</p>"},{"location":"devices/MagicHome-with-ESP8285/#identifying-this-board","title":"Identifying this board","text":"<p>Looking closely you can see it's an ESP8285, on the main board, it has the part number: <code>ZJ-WFMN-A V1.1</code>, <code>ZJ-WFMN-B V1.1</code>, <code>ZJ-WFMN-C V1.1</code>, or <code>ZJ-WFMN-D V1.0</code></p> <p> </p>"},{"location":"devices/MagicHome-with-ESP8285/#arilux-devices","title":"Arilux devices","text":"<p>The devices are similar to the Arilux devices. Here is an overview:</p> Model Color Support Voltages (sometimes) Remote PCB part number Link LC01 RGB 5-28V None ZJ-WFMN-A V1.1 [Banggood][LC01-banggood] LC02 RGBW 9-12V (5-28V) None ZJ-WFMN-B V1.1 [Banggood][LC02-banggood] LC03 RGB 5-28V IR ZJ-WFMN-A V1.1 [Banggood][LC03-banggood] LC04 RGBW 9-12V (5-28V) IR ZJ-WFMN-A V1.1 [Banggood][LC04-banggood] LC08 RGBWW/RGBWC 5-28V None [Banggood][LC08-banggood] LC09 RGB 5-28V RF [Banggood][LC09-banggood] LC10 RGBW 9-28V RF [Banggood][LC10-banggood] LC11 RGBWW/RGBWC 9-28V RF ZJ-WFMN-D V1.0 [Banggood][LC11-banggood]"},{"location":"devices/MagicHome-with-ESP8285/#flashing","title":"Flashing","text":"<p>I found that on the back it has pads to solder to so you can flash it.</p> <p></p> <p>The <code>IO0</code> port is <code>GPIO0</code> that needs to be pulled to ground when powered on for flashing (as per all ESP devices). I soldered cables to each of these. Note that some are very close to other pads, so be careful. If you want to avoid soldering, also pogo pins work well with the pads.</p> <p></p>"},{"location":"devices/MagicHome-with-ESP8285/#template-configuration","title":"Template configuration","text":"<p>Arilux LC01 (ZJ-WFMN-A V1.1)</p> <p>Automatic configuration:</p> Field Value Function Module type 37 Arilux LC01 Module type <p>Manual configuration:</p> Field Value Function Module type 18 Generic Module type GPIO5 37 PWM1 RED GPIO12 38 PWM2 GREEN GPIO13 39 PWM3 BLUE <p>Arilux LC02 (ZJ-WFMN-B V1.1)</p> Field Value Function Module type 18 Generic Module type GPIO5 38 PWM2 GREEN GPIO12 39 PWM3 BLUE GPIO13 40 PWM4 WHITE GPIO14 37 PWM1 RED <p>Arilux LC03 (ZJ-WFMN-A V1.1)</p> Field Value Function Module type 18 Generic Module type GPIO4 51 IRRecv IR Remote GPIO5 37 PWM1 RED GPIO12 38 PWM2 GREEN GPIO13 39 PWM3 BLUE <p>Arilux LC04 (ZJ-WFMN-A V1.1)</p> Field Value Function Module type 18 Generic Module type GPIO4 51 IRRecv IR Remote (optional, view console for debugging!) GPIO5 38 PWM2 BLUE GPIO12 37 PWM1 RED GPIO13 39 PWM3 GREEN GPIO15 40 PWM4 WHITE <p>Arilux LC11 (ZJ-WFMN-D V1.0)</p> Field Value Function Module type 18 Generic Module type GPIO4 147 ALux IrRcv GPIO5 40 PWM4 COLD WHITE GPIO12 38 PWM2 GREEN GPIO13 39 PWM3 BLUE GPIO14 37 PWM1 RED GPIO15 41 PWM5 WARM WHITE GPIO16 159 ALux IrSel <p>With all that done, one of the critical things I needed to do so I could set the colors was to run the command to set <code>SetOption15 1</code>. </p> <p>After that it is possible to test the lights functionality, e.g. with the command <code>Color #ff0000ff</code>.</p>"},{"location":"devices/MagicHome-with-ESP8285/#rf-control","title":"RF control","text":"<p>If you have an RF variant, you will want to configure the GPIOs like this:</p> <p><pre><code>  { \"MagicHome RF\",    // Magic Home RF (ESP8266) - (Arilux LC10)\n     GPIO_USER,        // GPIO00 Optional Button\n     GPIO_USER,        // GPIO01 Serial RXD and Optional sensor\n     GPIO_LED1_INV,    // GPIO02 Blue onboard LED (optional)\n     GPIO_USER,        // GPIO03 Serial TXD and Optional sensor0\n     GPIO_ARIRFRCV,    // GPIO04 RF receiver input (New Tasmota ALux IrRcv 147)\n     GPIO_PWM2,        // GPIO05 RGB LED Green\n     0, 0, 0, 0, 0, 0, // Flash connection\n     GPIO_PWM3,        // GPIO12 RGB LED Blue\n     GPIO_PWM4,        // GPIO13 RGBW LED White\n     GPIO_PWM1,        // GPIO14 RGB LED Red\n     GPIO_LED2_INV,    // GPIO15 RF receiver control (New Tasmota ALuxIrSel 159)\n     0, 0\n  },\n</code></pre> Tasmota template <pre><code>'{\"NAME\":\"MagicHome RGBW RF\",\"GPIO\":[0,0,56,0,147,38,0,0,39,40,37,159,0],\"FLAG\":0,\"BASE\":18}'\n</code></pre></p> <p>or like this:</p> <p><pre><code>  { \"MagicHome RF\",    // Magic Home RF (ESP8285) - (IRrecv)\n     GPIO_USER,        // GPIO00 Optional Button\n     GPIO_USER,        // GPIO01 Serial RXD and Optional sensor\n     GPIO_LED1_INV,    // GPIO02 Blue onboard LED (not soldered)\n     GPIO_USER,        // GPIO03 Serial TXD and Optional sensor0\n     GPIO_IRRECV,      // GPIO04 IR receiver input \n     GPIO_PWM1,        // GPIO05 RGB LED Green\n     0, 0, 0, 0, 0, 0, // Flash connection\n     GPIO_PWM2,        // GPIO12 RGB LED Blue\n     GPIO_PWM3,        // GPIO13 RGBW LED White\n     0, 0, 0\n  },\n</code></pre> After choosing the correct module type in your Tasmota configuration, press a key on the remote after boot for the device to learn your code. No need for the below rules for the RF variant</p>"},{"location":"devices/MagicHome-with-ESP8285/#full-set-of-rules-for-ir-remote","title":"Full Set of rules for IR remote","text":"<p>Each rule can only be 511 characters long, some of the colors below use the built in predefined shortcut color numbers.  <pre><code>Rule1 On IrReceived#Data=0x00FF906F Do Dimmer + EndOn On IrReceived#Data=0x00FF9867 Do Color2 1 EndOn On IrReceived#Data=0x00FFE817 Do HSBColor1 13 EndOn On IrReceived#Data=0x00FF02FD Do HSBColor1 23 EndOn On IrReceived#Data=0x00FF50AF Do HSBColor1 33 EndOn On IrReceived#Data=0x00FF38C7 Do HSBColor1 43 EndOn On IrReceived#Data=0x00FFB847 Do Dimmer - EndOn On IrReceived#Data=0x00FFD827 Do Color2 2 EndOn On IrReceived#Data=0x00FF48B7 Do HSBColor1 140 EndOn On IrReceived#Data=0x00FF32CD Do HSBColor1 160 EndOn\n\nRule2 On IrReceived#Data=0x00FF7887 Do HSBColor1 180 EndOn On IrReceived#Data=0x00FF28D7 Do HSBColor1 200 EndOn On IrReceived#Data=0x00FFF807 Do Power 0 EndOn On IrReceived#Data=0x00FF8877 Do Color2 3 EndOn On IrReceived#Data=0x00FF6897 Do HSBColor1 260 EndOn On IrReceived#Data=0x00FF20DF Do HSBColor1 280 EndOn On IrReceived#Data=0x00FF708F Do HSBColor1 300 EndOn On IrReceived#Data=0x00FFF00F Do HSBColor1 320 EndOn\n\nRule3 On IrReceived#Data=0x00FFB04F Do Power 1 EndOn On IrReceived#Data=0x00FFA857 Do Color2 12 EndOn On IrReceived#Data=0x00FFB24D Do Backlog Power 0; WakeupDuration 1; Dimmer 100; Wakeup EndOn On IrReceived#Data=0x00FF00FF Do Backlog Power 0; WakeupDuration 5; Wakeup EndOn On IrReceived#Data=0x00FF58A7 Do Backlog Scheme 2; Speed 1 EndOn On IrReceived#Data=0x00FF30CF Do Backlog Scheme 3; Speed 5 EndOn\n</code></pre></p> <p>A Google Sheets Document to edit the desired actions and create the three needed rules is linked here.</p> <p>Don't forget to activate the rules <pre><code>Backlog Rule1 1; Rule2 1; Rule3 1\n</code></pre></p> <p>The hex codes for the \"Data\" value come from the data tag when looking at the JSON sent via MQTT. You can also view this data on the Tasmota console screen. From here you can program it to do whatever you want using Rules.</p> <p>LC01-banggood LC02-banggood LC03-banggood LC04-banggood LC08-banggood LC09-banggood LC10-banggood LC11-banggood</p>"},{"location":"devices/Martin-Jerry-MJ-S01/","title":"Martin Jerry MJ S01","text":"<p>The chip inside is a Tuya TYWE3S which is based on the ESP8266.</p> <p>Template</p> GPIO Pin Selection 4 D2 Led1i (56) 5 D1 Led2i (57) 12 D6 Relay1 (21) 13 D7 Button1 (17) <p>All other component assignments should be set to <code>None (0)</code></p>"},{"location":"devices/Martin-Jerry-MJ-SD01/","title":"Martin Jerry MJ SD01","text":"<p>This model sells for about $20 on Amazon. </p>"},{"location":"devices/Martin-Jerry-MJ-SD01/#info-on-the-tuya","title":"Info on the Tuya","text":"<p>The chip inside is a Tuya TYWE3S. It replicates the capabilities of an ESP8266 plus some other functionality.</p> <p></p> <p>NOTE: THE RIGHT SIDE IS THE BACK OF THE BOARD. RST IS ON THE TOP LEFT OF THE LEFT PICTURE, AS WELL AS THE TOP LEFT OF THE PICTURE BELOW.</p> <p>Here\u2019s a picture of the chip inside the switch:</p> <p></p> <p>Pin 1 is labeled M1 in the silkscreen of the switch board. Here\u2019s the back, I desoldered it with my Quick 861DW:</p> <p></p> <p>On the other side of the board is an apparent test/programming header labeled CN1:</p> <p></p> <p>From top to bottom on CN1 above, they are:</p> Pin Signal CN1-1 TXD CN1-2 RXD CN1-3 GPIO2 CN1-4 GPIO0 CN1-5 GROUND CN1-6 VCC <p>See Tasmota Hardware Prep for more details</p> <p>I removed all the crappy lead-free solder and put on a little strip of female pin header:</p> <p></p> <p>There\u2019s another 4-wire connector that goes to the AC board. The wires are as follows:</p> Wire Description Black 3.3v consistent, probably to power the other side Purple Variable voltage tied to dimmer. Low to high it\u2019s: 360mV, 680mV, 1.32V, 1.94V, 2.57V, 3.20V White GPIO16 Red Ground <p>The other side features an STC15W404AS chip. This is the closest information sheet I\u2019ve found so far. It\u2019s likely there\u2019s an ADC receiver on the other side receiving our variable voltage on the purple wire above and converting that to the AC dimmer signal.</p> <p>When probing with the oscilloscope I noticed a 3.3v 1Khz square wave on GPIO13. It turns out this is the PWM that controls the output of the purple wire. This is done using the positive duty cycle of the wave. Here\u2019s a state table:</p> Setting Duty 1 (Min Setting) 20% Duty 2 40% Duty 3 60% Duty 4 80% Duty 5 (Max Setting) 100% Duty, constant 3.3v <p>We should be able to generate this same wave with whatever duty cycle we want in Tasmota to get much better dimming resolution than the default firmware provides.</p> <p>The buttons are tied as follows:</p> Button Description UP1 GPIO0 to GROUND when pushed DOWN1 TXD to GROUND when pushed ON/OFF 3.3v to GPIO15 when pushed RESET Wired through an LED and resistor to GPIO16, also goes to white wire (RESET for the STC?), ties to GROUND <p>The LEDs are wired as follows:</p> LED Description LED1 Passthrough to RESET, GPIO16, see above. LED2 GPIO14 LED3 GPIO12 LED4 GPIO5 LED5 RXD <ul> <li>FADE ON: Makes the PWM movements smooth</li> <li>DIMMER +/-: Moves dimmer up and down</li> <li>SPEED 3: Slows down fade a little</li> <li>SETOPTION15 1: Sets DIMMER mode rather than PWM</li> </ul> <p>Now that you can have rules set on dimmer actions, changing the LEDs with dimmer settings should be easy. I tried to do this before that existed, and it wasn't possible.</p>"},{"location":"devices/Mirabella-Genio-Bulb/","title":"Mirabella Genio Bulb","text":"<p>Mirabella have released a few smart bulbs. Here is a bit of a guide on how to flash them with Tasmota.</p> <p>There are two ways: Over the Air (OTA) or via Serial.</p>"},{"location":"devices/Mirabella-Genio-Bulb/#flashing-over-the-air","title":"Flashing Over the Air","text":"<p>Flashing over the air requires running a linux shell script called tuya-convert and hence requires a computer (I used a Raspberry PI 3) with a wifi adaptor that supports AP mode.  There are options if you run Windows to use either a virtual machine (it is reported that KALI Linux running on VMWare has worked) or potentially a live usb (I haven't tested it). </p> <p>Follow this procedure. </p> <p>To get the bulb into config mode, have the bulb on for at least 10 seconds, then cycle it off and on 3 times via a physical light switch. The bulb should flash rapidly when it's in config mode.</p> <p>Tasmota v6.4.1 basic build is included as part of the tuya-convert script. It will open a WiFi access point named sonoff-XXX on the bulb once flashed correctly.</p>"},{"location":"devices/Mirabella-Genio-Bulb/#flashing-via-serial","title":"Flashing via Serial","text":"<p>Flashing via Serial requires disassembling the bulb and soldiering wires to the board.</p> <p>Note: modifying these bulbs is dangerous if you do not understand what you are doing, please do so at your own risk!</p> <p>Mirabella Bulbs</p>"},{"location":"devices/Mirabella-Genio-Bulb/#disassembling-bulb","title":"Disassembling bulb","text":"<p>The 2 main outer parts of the bulb are stuck together with high temp silicone or something similar. Squeeze the outer of the bulb (the bit that looks like glass) as near to the join as possible, you can use a tool like a spudger or something if that helps to break the seal, being careful not to damage any internal parts or cut yourself!</p> <p>Once the outer (fake glass) is removed you will see this:</p> <p></p> <p>Carefully cut / scrape away as much of the sealent on the outer edge of the round circuit board then using some needle nose pliers and your spudger pry the round board out.</p> <p></p> <p>If you are really good at soldering and have a fine tip on your iron you could possibly skip this step and jump straight to the next one.</p>"},{"location":"devices/Mirabella-Genio-Bulb/#b22","title":"B22","text":"<p>Stand the bulb up and de-solder the 2 pads, and straighten the wires to remove the board.</p> <p></p>"},{"location":"devices/Mirabella-Genio-Bulb/#e27","title":"E27","text":"<p>Using a sharp strong blade carefully pry out the small terminal on the end of the bulb then straighten the wire in side</p> <p></p> <p></p> <p>This will allow you to pull the board out a little and get enough angle on it to make soldering easier.</p> <p>You should now have these parts (E27 bulb will be still partly assembled):</p>"},{"location":"devices/Mirabella-Genio-Bulb/#b22_1","title":"B22","text":""},{"location":"devices/Mirabella-Genio-Bulb/#e27_1","title":"E27","text":"<p>(with wires added)</p>"},{"location":"devices/Mirabella-Genio-Bulb/#connect-ftdi","title":"Connect FTDI","text":"<p>Connect your FTDI up to these pins:</p> <p> </p> <p>Flash with your preferred method I use this one (remember to connect GPIO0 to GND when plugging in your FTDI this will force the ESP into firmware write mode, you may need to try it a couple of times.</p>"},{"location":"devices/Mirabella-Genio-Bulb/#module-settings","title":"Module Settings","text":"<p>Once flashed I use termite (or you could use any serial command tool) to send my settings:</p> <p>Note: Change these to match your environment</p> <p><code>Backlog SSID1 YOUR_SSID_NAME; Password1 YOUR_WIFI_PASSWORD; MqttHost MQTT_INTERNAL_IP_ADDRESS; MqttUser MQTT_USER_NAME; MqttPassword MQTT_PASSWORD; module 38;topic bulb1; FriendlyName Bulb1</code> </p> <p>Or set manually from the web interface:</p>"},{"location":"devices/Mirabella-Genio-Bulb/#dimmable-warm-white-or-cool-white-bulbs","title":"Dimmable warm white or cool white bulbs","text":""},{"location":"devices/Mirabella-Genio-Bulb/#tunable-warmcool-white-bulbs","title":"Tunable warm/cool white bulbs","text":"<p>I based these settings on the RGBW settings. I would have thought PWM1-3 were redundant, but have only had it work with all of these assigned as per below. The bulb is then tunable, with a brightness slider and a cool/warm slider.</p> <ul> <li>Module type =&gt; Generic</li> <li>D2 GPIO4  =&gt; PWM1 (37)</li> <li>D1 GPIO5  =&gt; PWM4 (40)</li> <li>D6 GPIO12 =&gt; PWM2\ufffc (38)</li> <li>D7 GPIO13 =&gt; PWM5 (41)</li> <li>D5 GPIO14 =&gt; PWM3\ufffc (39)</li> </ul> <p></p>"},{"location":"devices/Mirabella-Genio-Bulb/#rgbw-colour-bulbs","title":"RGBW colour bulbs","text":"<ul> <li>Module type = Generic</li> <li>D2 GPIO4 = PWM1 37 = Red</li> <li>D6 GPIO12 = PWM2 38 = Green</li> <li>D5 GPIO14 = PWM3 39 = Blue</li> <li>D1 GPIO5 = PWM4 = White</li> </ul>"},{"location":"devices/Mirabella-Genio-Bulb/#rgbw-colour-bulbs-12w-version","title":"RGBW colour bulbs (12w version)","text":"<p>Newer versions operate under the SM2135 chipset. This can be confirmed when disassembled by inspecting the pins which connect the main board up to the LED board. They will be marked SDA1, CLK alongside the two other pins for the 12v and ground rails. </p> <p>These newer globes will require the following settings: * Module type = Generic * D5 GPIO14 = SM2135DAT (2) * D1 GPIO5 = SM2135CLK</p>"},{"location":"devices/Mirabella-Genio-Bulb/#re-assembly","title":"Re-assembly","text":"<p>Re-assembly procedure is the reverse of the disassemble procedure!</p>"},{"location":"devices/Mirabella-Genio-Smart-Plug/","title":"Mirabella Genio Smart Plug","text":"<p>This is a simple smart plug with the addition of a USB port, as far as I can see the USB port  is 'always on' and is not access this from the ESP module. Opening up the device was easy, 2 screws then a small amount of gentle prying exposed the components, 2 more screws had it fully deconstructed.</p> <p>The ESP module is mounted on a pcb with all of the required pins exposed.</p> <p> </p> <p>I was able to flash by connecting GPIO0 to GND while connecting my Serial Adaptor and flashing as per any other ESP device  Use the string below from the console of the device to configure everything (replace required data with your own SSID, Password, MQTT Settings etc.):</p> <p><code>Backlog SSID1 YOUR_SSID_NAME; Password1 YOUR_WIFI_PASSWORD; MqttHost MQTT_INTERNAL_IP_ADDRESS; MqttUser MQTT_USER_NAME; MqttPassword MQTT_PASSWORD; GPIO2 56; GPIO12 21; GPIO13 17;topic genio1; FriendlyName Genio1</code> </p> <p>my preferred flashing method Once flashed, the config should look like: </p> <p></p>"},{"location":"devices/Modify-KaKu-to-WKaKu-Power-Socket/","title":"Modify KaKu to WKaKu Power Socket","text":"<p>   The Dutch Klik Aan Klik Uit PAR-1000 434MHz Power socket might suffer from Capacitor degeneration. In effect the power needed to engage the relay is too low. Replacing the Yellow Capacitor often solves the problem.   I have several of these lying around and they can be used very well with sonoff functionality. As the sonoff PCA is a bit too large I decided to design my own PCA using kicad.    During Proof of Concept I used 5V power supplies from itead. After three units were built one crashed caused by debris on the PS PCA resulting in an AC short which in turn blew the large resistor. As the selected Songle relay has the control leads close to the AC leads I also changed the relay.   I decided to select the HiLink 5V power supply as it was also favourable on other sites. The relay now has the same connections as the one used in sonoff.    The parts used are: = HiLink 5V power supply HLK-PM01 (aliexpress) = 5V to 3V3 step down (aliexpress) = 5V relay OJE-SH-105DM (ebay) = ESP12-F (aliexpress) = Capacitors and led from kaku PCA = 2 x 1k and 1 x 10k Resistors</p> <p>The image on the right shows how I mounted the ESP12-F vertically. Notice the 10k resistor from GPIO15 to the board.</p> <p>The firmware used is sonoff without modification!</p>"},{"location":"devices/NEO-COOLCAM-NAS-WR01W/","title":"NEO COOLCAM NAS WR01W","text":"<p>This device is dangerous and is not allowed to use in EU anymore</p> <p>https://www.bundesnetzagentur.de/DE/Fachthemen/Telekommunikation/Technik/Marktueberwachung/MarkteinschraenkendeMassnahmen/EuVertriebsverbote.html?nn=268512</p>"},{"location":"devices/Nedis-WIFIP310FWT/","title":"Nedis WIFIP310FWT","text":"<p>ATTENTION! Verifying/updating this currently. This setup is not 100% accurate. 20190327</p> <p>Template:</p> <p><code>{\"NAME\":\"Nedis WIFIP310\",\"GPIO\":[0,56,0,17,22,21,0,0,0,23,24,0,0],\"FLAG\":1,\"BASE\":18}</code></p> <p>Description: 3 port AC outlets (European Schucko Type F) + 4 USB power outlets</p> <p>Power input: 16 A - 230 VAC</p> <p>Max. Power: 3680 W</p> <p>Power output: USB: 5 VDC /2.4 A each</p> <p></p> <p>Product page - Swedish Product page - English</p>"},{"location":"devices/Novostella-B22-RGB-LED-Colour-WiFi-Smart-Bulb/","title":"Novostella B22 RGB LED Colour WiFi Smart Bulb","text":"<p>Novostella B22 RGB LED Colour WiFi Smart Bulb</p> <p>https://www.amazon.co.uk/gp/product/B07DN4NLKM?ref_=oh_aui_search_asin_title&amp;psc=1&amp;pldnSite=1</p> <p>Easily flashed OTA.  GPIO is as follows.</p> <p>GPIO4 = PWM1 GPIO5 = PWM5 GPIO12 = PWM2 GPIO13 = PWM4 GPIO14 = PWM3</p>"},{"location":"devices/OBI-Socket-2/","title":"OBI Socket 2","text":"<p>Supported since version 6.4.1.8 as OBI Socket 2 (61)</p> <p>Another cheap socket from the German Hardware Store, based on ESP-WROOM-02 with 2MB Flash. Smaller form factor as the first OBI Socket. </p> <p></p>"},{"location":"devices/OBI-Socket-2/#special-attention","title":"\u26a0\ufe0f\ufe0f  Special Attention   \u26a0\ufe0f\ufe0f","text":"<p>DO NOT try to flash the module when it is connected to mains AC power. You WILL brick or destroy the device and your computer or USB Port and get electrocutes! Use only a 3.3V USB adapter for flashing </p> <p>DO NOT CONNECT ANYTHING TO THESE DEVICES!!! (No sensors, no switches, nothing) The OBI Socket 2 has no transformer to isolate the mains voltage. The entire circuit is at mains-level voltage! Only use the device as designed.</p> <p>One way to flash the module is soldering 4 wires to the RX/TX/3V3/GND pins from the ESP. The PCB has no serial pinout connector. For flashing the module enable the flash mode of the ESP, connect GPIO 0 to GND.</p> <p>Another way to flash is soldering 4 wires to the bottom side of the PCB as described on https://github.com/mattzzw/obi_socket/wiki/OBI-socket. If you follow that approach of powering the socket with 5V (which enables the relay coil allowing for acoustic feedback) you need to make sure to nevertheless use 3V3 for the actual serial interface to the module!!! This happens to work out very nicely with the popular cheap CH340 USB to Serial TTL adapters which come with a jumper to select between 5V and 3.3V. Setting the adapter to 3.3V by putting the jumper on the 3V3 and VCC pins leaves the 5V pin free. That pin is directly connected to the USB port. So you can just connect the four wires from the socket to the four free pins of the CH340 adapter :-)</p> <p>If you want the green Wi-Fi LED to work, please use version 6.4.1.8+. You can either use \"Obi Socket 2 Type (61)\" (with default behaviour \"Wi-Fi LED = off\" when connected) or use \"Generic (18)\" for manually override. See issue 4567 for details.</p>"},{"location":"devices/OBI-Socket-2/#pcb-serial-pinouts","title":"PCB serial pinouts","text":""},{"location":"devices/OBI-Socket-2/#pcb-serial-pinouts-back","title":"PCB serial pinouts (back)","text":"<p> ( Note: Same PCB as OBI Socket IP44 (Black) ) </p>"},{"location":"devices/OBI-WiFi-Socket-IP44/","title":"OBI WiFi Socket IP44","text":""},{"location":"devices/OBI-WiFi-Socket-IP44/#overview","title":"Overview","text":"<p>This WiFi socket is a cheap outdoor alternative to the popular low-cost indoor WiFi socket \"Wifi Stecker Schuko Wei\u00df\" from the German Diy-warehouse OBI. It is equipped with an ESP-WROOM-02 module. Sadly, there is no programming pin header and it can be kind of tricky to get the module into programming state (see below). You'll need some soldering skills to attach the programming wires. </p>"},{"location":"devices/OBI-WiFi-Socket-IP44/#where-to-buy","title":"Where to buy","text":"<p>The Outdoor Wifi Socket is only available in the OBI Diy-Warehouse. Its \"official name\" is \"Wifi Stecker Schuko Schwarz\". It can also be bought in the OBI online-store</p>"},{"location":"devices/OBI-WiFi-Socket-IP44/#open-the-socket","title":"Open the socket","text":"<p>Opening the socket is kind of difficult. The case is held together by two Tri-Wing screws, two tiny cross-head/PH screws, some sealing grease in the screw holes and some glue. </p> <p>First, you can remove the sealing grease out of the screw holes by using a matching drill. Drill out the sealing grease by turning it by hand, until you reach the screw head. </p> <p>After this, you can use the matching screw driver. The eventually remaining sealing grease will move aside.</p> <p>Tipp: Afterwards use normal cross screws to close the casing. After this its getting tricky: use a stable knife or a flat screw driver to carefully crack up the two halves of the case. In any case, try to NOT cut up your hands!</p>"},{"location":"devices/OBI-WiFi-Socket-IP44/#connection","title":"Connection","text":"<p>For convenient access to the programming pins, you can solder jump wires to the corresponding pads of the WROOM module. After successfully reprogramming the module, you can fold the wires into the socket in case of further tinkering. </p> <p>( Note: Same PCB as OBI Socket 2 ! )</p>"},{"location":"devices/OBI-WiFi-Socket-IP44/#entering-programming-mode","title":"Entering programming mode","text":"<p>Connect GPIO0 to GND before connecting power to enable flash mode!</p>"},{"location":"devices/OBI-WiFi-Socket-IP44/#gpio-config","title":"GPIO Config","text":""},{"location":"devices/OBI-Wifi-Socket/","title":"OBI Wifi Socket","text":""},{"location":"devices/OBI-Wifi-Socket/#where-to-buy","title":"Where to buy","text":"<p>As shown in the name the Wifi Socket is only available in the OBI Diy-Warehouse. It can also be bought in the OBI online-store </p>"},{"location":"devices/OBI-Wifi-Socket/#open-the-socket","title":"Open the socket","text":"<p>Opening the socket is kind of difficult. If you have one of the Tri-Wing screwdrivers it is much more easier. If you haven't got use a normal head screwdriver. Be careful not damaging your hand with it.</p> <p>Tipp: Afterwards use normal cross screws to close the casing.</p>"},{"location":"devices/OBI-Wifi-Socket/#connection","title":"Connection","text":"ESP Programmer VCC 3V3 TX RX RX TX GND GND <p>Connect GPIO0 to GND before connecting power to enable flash mode!</p>"},{"location":"devices/OBI-Wifi-Socket/#additional-information","title":"Additional Information","text":"<p>A low pulse on GPIO12 switches the relay on, a low pulse on GPIO5 switches it off. I have solved the 'pulse issue' by setting GPIO12 to always 0 (as LED) and works fine.  More Infos can be found here: #1988.</p>"},{"location":"devices/OBI-Wifi-Socket/#initial-configuration","title":"Initial Configuration","text":"<p>In the default configuration GPIO0 (which is also used to enable flash-mode) is setup as a Button. To enable AP-Mode and setup the correct GPIOs as described below, You can short GPIO0 to GND 4 times as if it was a button (see [[Button-usage]]) Using this method allows you to flash a precompiled binary</p>"},{"location":"devices/OBI-Wifi-Socket/#device-images","title":"Device Images","text":"<p>  (images from https://github.com/martin-ger/ESP8266-WiFi-Socket)  </p>"},{"location":"devices/OBI-Wifi-Socket/#gpio-config","title":"GPIO Config","text":"<p>UPDATE: with Tasmota 6.3.0 you have fully monitoring support (Add support for OBI Power Socket (#1988, #3944))</p> <p>** Beginning 6.3.0, no need to choose type 18 anymore, use type 51 Obi Socket ***</p> <p></p>"},{"location":"devices/Oittm-Smart-Plug/","title":"Oittm Smart Plug","text":"<p>Oittm provides a relatively cheap Wifi smart plug with an ESP8266, too.  </p> <p></p> <p>To enable the flash mode of the ESP connect GPIO 0 to GND. The wires have to be soldered directly onto the ESP chip itself, it won't work otherwise.</p>"},{"location":"devices/Oittm-Smart-Plug/#opening-the-device","title":"Opening the device","text":"<p>Remove the small plastics caps on the back and unscrew the first two screws and then again the next ones</p> <p> </p>"},{"location":"devices/Oittm-Smart-Plug/#pcb-layout","title":"PCB layout","text":"<p>!!Make sure to flash with 3.3V and disconnect the power plug from the power outlet before!!</p> <p> </p>"},{"location":"devices/Oittm-Smart-Plug/#web-configuration","title":"Web configuration","text":""},{"location":"devices/Oittm-Smart-Plug/#if-you-want-the-blue-led-instead-of-the-red-one-use-led2i","title":"If you want the blue LED instead of the red one, use <code>Led2i</code>","text":""},{"location":"devices/Other-Devices/","title":"Other Devices","text":""},{"location":"devices/Other-Devices/#this-page-is-here-for-archival-purposes-for-new-devices-use-tasmota-supported-devices-repository-new-submissions-here-will-not-be-approved","title":"This page is here for archival purposes. For new devices use Tasmota Supported Devices Repository! New submissions here will not be approved.","text":""},{"location":"devices/Other-Devices/#relayssonoff-basic-clones","title":"Relays/Sonoff Basic Clones","text":"<ul> <li>WL-SW01_10 WiFi Smart Switch - Sonoff Basic in a different form factor</li> <li>Canwing CW001 5A</li> <li>LC Technology WiFi Relay</li> <li>EXS Relay V3.1 &amp; V5.1</li> <li>Ledunia and NodeMcu</li> </ul>"},{"location":"devices/Other-Devices/#plugssockets","title":"Plugs/Sockets","text":"<ul> <li>Lingan SWA1</li> <li>Hyleton 313 Smart Plug</li> <li>Teckin SP23</li> <li>LA-WF3 Wifi Plug (Tuya TYWE2S) - Costco </li> <li>No-Brand Smart Plug with Tuya-based ESP8266MOD and ESP-12F modules</li> <li>WiOn 50055 Indoor Wi-Fi Switch With USB (support for relay and switch only - no power monitoring yet. See status here #82.)</li> <li>SM-SO301 4 mains Power Strip with 4 USB ports</li> <li>LeFun SK2 Smart Power Strip with 4 Mains + 4 USB</li> <li>meross MSS425 Smart Power Strip</li> <li>Gosund SP1</li> <li>SWB1 Wi-Fi Smart Power Strip</li> <li>Kesen KS-604S Dual Outlet</li> <li>Oittm Smart Plug</li> <li>Mirabella Genio Smart Plug</li> <li>CE Smart Home\u2122 Garden Power Stake</li> <li>4CH-Wifi-Socket-with-USB-Charger (Tuya TYWE2S)</li> <li>Anoopsyche JH-G01B1</li> <li>RGB Smart Socket with Power Monitor 16A EU</li> <li>Supernight Dual Wifi Plug</li> <li>TMRLife Plug or Home Awesome Plug</li> <li>SmartPlug AISIRER, AVATAR with POW</li> <li>SmartPlug NEO COOLCAM NAS WR01W</li> <li>Slitinto NX SP202</li> </ul>"},{"location":"devices/Other-Devices/#wall-switchesdimmers","title":"Wall Switches/Dimmers","text":"<ul> <li>KS-602 based switches like GresaTek, Jesiya, NewRice, Lyasi etc </li> <li>Smart Light Switch - SS118-01K1</li> <li>KMC 70008 Light Switch</li> <li>KS-602S Smart Wifi Light Switch</li> <li>Xenon SM-SW102-2 two-relay light switch</li> <li>Martin Jerry MJ-SD01 Smart Dimmer</li> <li>KingArt N1 - Other Sonoff T1 clone, flash works also on KingArt N2 (2 gangs)</li> <li>KingArt Dimmer Same as above, but a dimmer</li> </ul>"},{"location":"devices/Other-Devices/#lightsled-controllers","title":"Lights/LED Controllers","text":"<ul> <li>SP108E LED strip controller</li> <li>WS03 LED Controller</li> <li>Luminea-ZX-2844-675</li> <li>Mirabella Genio Smart Bulb</li> <li>Kohree VHP560 Smart Light Compatible, RGBCW Wi-Fi LED Bulb A19</li> <li>Novostella B22 RGBW Smart Light</li> <li>Xiaomi Mi Desk Lamp</li> </ul>"},{"location":"devices/Other-Devices/#out-of-production-devices","title":"Out of production devices","text":"<ul> <li>ITead Motor Clockwise/ Anticlockwise Running WiFi Wireless Switch</li> <li>PowStro - Sonoff Basic clone</li> <li>SmartHome - Sonoff Basic clone</li> <li>YUNTONG Smart - Sonoff Basic clone</li> <li>CSL (aplic WDP 303075)</li> <li>SM-PW701E Socket Board: (Tuya TYWE3S)</li> <li>WK30 (Tuya TYWE3S)</li> <li>Hompie-SWS1 (Tuya TYWE3S)</li> <li>Burnett BN K01 Smart Socket</li> <li>CNSKOU / CNSANKOU wall switches - Chinese Sonoff T1 clones</li> </ul>"},{"location":"devices/PS-16-DZ-Dimmer/","title":"PS-16-DZ Dimmer","text":"<p>The PS-16-DZ dimmer uses eWeLink app same as Sonoff devices. It's available from Amazon and Aliexpress. It may under different name, but the model number is PS-16-DZ.</p>"},{"location":"devices/PS-16-DZ-Dimmer/#pics","title":"Pics","text":"<p>Opened it up, found an ESP8285 and a Nuvoton N76E003.  </p>"},{"location":"devices/PS-16-DZ-Dimmer/#flash-and-gpio-pins","title":"Flash and GPIO pins","text":"<p>Remove the ESP8285 daughter card DLX-MKCK01 from the main board and flash Tasmota. <pre><code>pin1 RST -&gt; N76E003 P0.5/PWM2\npin2 TXD -&gt; N76E003 P0.7/RXD\npin3 RXD -&gt; N76E003 P0.6/TXD\npin4 GPIO13/MTCK -&gt; LED\npin5 3.3V\npin6 GND\n</code></pre></p>"},{"location":"devices/PS-16-DZ-Dimmer/#communication-between-esp8285-and-n76e003","title":"Communication between ESP8285 and N76E003","text":"<p>It uses AT command to communicate between ESP8285 and N76E003 over UART at 19200 baud. <pre><code>Turn on the switch from ESP8266:\nSend from ESP8266\nAT+UPDATE=\"sequence\":\"1528335040032\",\"switch\":\"on\"\nReceive from MCU\nAT+RESULT=\"sequence\":1528335040032\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn off the switch from ESP8266:\nSend from ESP8266\nAT+UPDATE=\"sequence\":\"1528335118327\",\"switch\":\"off\"\nReceive from MCU\nAT+RESULT=\"sequence\":1528335118327\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nChange brightness to 44 from ESP8266:\nSend from ESP8266:\nAT+UPDATE=\"sequence\":\"1528335181502\",\"bright\":44\nReceive from MCU\nAT+RESULT=\"sequence\":1528335181502\"\nSend from ESP8266:\nAT+SEND=ok\nAfter 0.7s\nReceive from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn on the switch with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nTurn off the switch with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"off\",\"bright\":44\nSend from ESP8266:\nAT+SEND=ok\n\nChange the brightness to 52 with faceplate button:\nReceived from MCU\nAT+UPDATE=\"switch\":\"on\",\"bright\":52\nSend from ESP8266:\nAT+SEND=ok\n\nHolding the middle button on faceplate to reset the device:\nReceived from MCU\nAT+SETTING=enterESPTOUCH\nSend from ESP8266:\nAT+SETTING=enterESPTOUCH\n</code></pre> The sequence number is a 13 digits unix timestamp (in milliseconds). The data after \"bright\" is the brightness. The maximum of the brightness is 100 and the minimum is 10. There is one byte 0x1B at the end of each AT command.</p>"},{"location":"devices/PowStro/","title":"PowStro","text":""},{"location":"devices/PowStro/#connection","title":"Connection","text":"<p>Vcc - 3,3V TX - RX RX - TX GND - GND</p>"},{"location":"devices/PowStro/#additional-information","title":"Additional Information","text":"<p>PowStro are fake Sonoff Basic, but they still work with Tasmota.  More Infos can be found here: #1419.  </p>"},{"location":"devices/PowStro/#device-images","title":"Device Images","text":""},{"location":"devices/PowStro/#gpio-config","title":"GPIO Config","text":""},{"location":"devices/RGB-Smart-Plug-16A/","title":"RGB Smart Plug 16A","text":"<p> * Aliexpress: Lonsonho Wifi Smart Socket Power Monitor EU 2 Pin * Aliexpress: RGB Smart Plug * amazon.de: Smart Steckdose, Wechsellicht 16A, WLAN Steckdose Wifi Stecker fernbedienbar, Stromverbrauch messen, funktioniert mit Alexa [Echo, Echo Dot] und Google Home, 4 Packs</p>"},{"location":"devices/RGB-Smart-Plug-16A/#ota-flashing","title":"OTA flashing","text":"<p>DEVICE IS DIFFICULT TO DISASSEMBLE SO ANY ERRORS WITH FLASHING OR CONFIGURATION CAN EASILY BRICK IT.</p> <p>DO NOT CONNECT ANY SENSOR TO THESE DEVICES. Only use them as designed. </p> <p>AS ALWAYS, YOU DO ANY OF THIS AT YOUR OWN RISK.</p> <p>Device case is glued so recommended way to flash it is using tuya-convert</p> <p>This method worked for 3 devices that were shipped before December 2019, never paired with Tuya apps and never powered on near open WiFi APs. So they had no chance to download Tuya-Convert updates. It may not work for devices with newer firmware.</p>"},{"location":"devices/RGB-Smart-Plug-16A/#prerequisites","title":"Prerequisites","text":"<ul> <li>You'll need a Linux device with both WiFi capable of running in AP mode and ethernet connection</li> <li>Clone/download tuya-convert</li> <li>Run <code>install_prereq.sh</code></li> </ul>"},{"location":"devices/RGB-Smart-Plug-16A/#ubuntu-only","title":"Ubuntu only","text":"<p>On Ubuntu, it's also necessary to temporary disable WiFi from Network Manager and stop/disable systemd-resolved.</p> <p>Edit <code>/etc/NetworkManager/NetworkManager.conf</code> and add  <pre><code>[keyfile]\nunmanaged-devices=interface-name:wlp2s0\n</code></pre> Replace wlp2s0 with your WiFi interface name if necessary.</p> <p>Then run  <pre><code>sudo systemctl restart network-manager.service \nsudo systemctl disable systemd-resolved.service \nsudo systemctl stop systemd-resolved.service \n</code></pre> Don't forget to undo everything after flashing, DNS and WiFi won't work otherwise.</p>"},{"location":"devices/RGB-Smart-Plug-16A/#start-flashing","title":"Start flashing","text":"<ul> <li>Run <code>start_flash.sh</code> and follow the instructions</li> <li>Connect any WiFi device to vtrust-flash AP when it asks to and make sure that it gets an IP address. If it doesn't stop and check logs in scripts folder for clues</li> <li>Connect socket to mains and long-press the button to enter pairing mode</li> <li>Tasmota is included with tuya-convert, follow script's instruction to flash it</li> <li>After flashing device should reboot and you should see Tasmota's WiFi AP (Sonoff-xxx). Run <code>stop_flash.sh</code> to shutdown vtrust-flash AP on a machine you used for OTA.</li> </ul>"},{"location":"devices/RGB-Smart-Plug-16A/#configuration","title":"Configuration","text":"<ul> <li>Connect to Tasmota's AP</li> <li>It's extremely important to enter correct WiFi configuration. Button is not on GPIO0 so won't do anything for default Sonoff Basic device profile.  </li> <li>It's recommended to temporary enter second WiFi with something easy like <code>SSID: TEST</code> <code>Password: testtest</code> so you could start that AP and re-configure the device if there are any issues with main WiFi connection.</li> <li>After it reboots and successfully connects to WiFi configure it as <code>Blizwolf SHP</code> module</li> <li>Now button and relay should work. Red and Blue LEDs will be used as status LEDs.</li> </ul>"},{"location":"devices/RGB-Smart-Plug-16A/#rgb-light","title":"RGB Light","text":"<p>Use this template to configure the device:</p> <p><code>{\"NAME\":\"RGB Smart Plug\",\"GPIO\":[37,0,39,0,38,134,0,0,131,17,132,21,0],\"FLAG\":0,\"BASE\":45}</code></p> <p>For older versions:</p> <p>Complete RGB support requires building slightly custom Tasmota. Edit <code>sonoff/sonoff_template.h</code> and replace \"BlitzWolf SHP\" configuration with the following: <pre><code>  { \"BlitzWolf SHP\",   // BlitzWolf BW-SHP2 and BW-SHP6 (ESP8285 - BL0937 or HJL-01 Energy Monitoring)\n                       // https://www.banggood.com/BlitzWolf-BW-SHP2-Smart-WIFI-Socket-EU-Plug-220V-16A-Work-with-Amazon-Alexa-Google-Assistant-p-1292899.html\n                       // https://www.amazon.de/Steckdose-Homecube-intelligente-Verbrauchsanzeige-funktioniert/dp/B076Q2LKHG/ref=sr_1_fkmr0_1\n                       // https://www.amazon.de/Intelligente-Stromverbrauch-Fernsteurung-Schaltbare-Energieklasse/dp/B076WZQS4S/ref=sr_1_1\n                       // https://www.aliexpress.com/store/product/BlitzWolf-BW-SHP6-EU-Plug-Metering-Version-WIFI-Smart-Socket-220V-240V-10A-Work-with-Amazon/1965360_32945504669.html\n     GPIO_USER,        // GPIO00 Red Led (1 = On, 0 = Off)\n     GPIO_USER,        // GPIO01 Serial RXD and Optional sensor\n     GPIO_USER,        // GPIO02 Blue Led (1 = On, 0 = Off)\n     GPIO_USER,        // GPIO03 Serial TXD and Optional sensor\n     GPIO_USER,        // GPIO04 \n     GPIO_HJL_CF,      // GPIO05 BL0937 or HJL-01 CF power\n     0, 0, 0, 0, 0, 0, // Flash connection\n     GPIO_NRG_SEL_INV, // GPIO12 BL0937 or HJL-01 Sel output (0 = Voltage)\n     GPIO_KEY1,        // GPIO13 Button\n     GPIO_NRG_CF1,     // GPIO14 BL0937 or HJL-01 CF1 current / voltage\n     GPIO_REL1,        // GPIO15 Relay (0 = Off, 1 = On)\n     0, 0\n  },\n</code></pre> Make sure that you don't have wrong WiFi configuration in user_config_override.h. Build and OTA flash it to the device using Tasmota. After it reboots configure as following:</p> <p>[[https://raw.githubusercontent.com/wiki/Astr0/Sonoff-Tasmota/images/lonsonho16a/config.png|Configuration]]</p> <p>RGB and dimming should work now.</p>"},{"location":"devices/RGB-Smart-Plug-16A/#disassembling-the-device","title":"Disassembling the device","text":"<p>This is not recommended. Do it only if you have to or just buy a new one. The device is hard to open and may be damaged. Components inside may have mains charge and electrocute you even if powered off. Do it at your own risk.</p> <p>One of my devices had a hardware issue - constantly losing WiFi, rebooted when wiggled in power socket, rebooted every few seconds on 1250W load, sometimes just hanged and not responded even to the button. Since it wasn't usable at all I tried to fix it. The reason was broken steel input pole inside(what?? how?? WTF??) that was making weak contact, couldn't fix it reliably.</p> <ul> <li>Unbend earth connections on the bottom to make them straight.</li> <li>Use a sharp knife to slice through glue between RGB ring and the case. Requires quite a lot of force and time. RGB ring may break in places where glue is stronger than the plastic. </li> <li>Use a screwdriver to pry the case open. </li> <li>Remove button cap </li> <li>Desolder output connections, try not to melt any plastic. Remove support plastic with a screwdriver, it's held to the PCB by two clips.</li> <li>Desolder input poles. This is tricky since there's a lot of solder. I've removed as much of it as possible with desoldering pump, then melted the solder and rotated the poles with pliers while it cooled. Poles are made of steel and steel don't accept solder well.</li> <li> <p>Remove the PCB by lifting it up. It's glued to the case on the bottom by the relay and held tight with input poles so it requires some force. Also, it's not easy to grab the PCB. I've used dip removing tweezers, holding PCB by holes for the earth connectors.  I figured out the pinout for flashing the device: </p> </li> <li> <p>Before assembling it back remove as much solder as possible from input and output pole pads. The device fits together very tight, so everything should be perfectly in place. Don't forget to glue the case back.</p> </li> </ul>"},{"location":"devices/RGB-Smart-Plug-16A/#alternative-to-disasselmy-drilling-two-holes","title":"Alternative to disasselmy: Drilling two holes.","text":"<p>_With all this information at hand it is also possible to drill two simple holes into the case to get to the necessary contact pads. I recommend a 6mm drill, carfully drill trough the case at he center of the ledge from the high power side opposite the power button.  See pictures. Now you can solder on a few temporary flash cables. Don't forget to pull IO0 to GND to get into flash mode.</p> <p>Few observations: * It has ESP8266EX with FM25F08 8Mbit flash. The module has lots of connections, some of them have only pads without tracks on the main board. High chances to find RX and TX there. Obviously, there should be VCC and GND to power up the module. * Uses HJL-01 with a shunt for power monitoring, so every mains power track that looks like it should be covered with solder but is not, probably should be covered with solder :) * It has 4 RGB LEDs. GPIO00-Red, GPIO02-Blue, GPIO04-Green * AFE BPD-SS-105DM 16A 250VAC relay * 16A SMD fuse for mains input * Something that's probably another fuse marked F1 for low-voltage circuitry power * Low-voltage part is not galvanically insulated from mains * There's \"QC Passed\" sticker on the relay</p>"},{"location":"devices/S1-Series---Wifi-Socket-S120-%28EU-model%29-chipset-TYWE2S/","title":"S1 Series   Wifi Socket S120 (EU model) chipset TYWE2S","text":""},{"location":"devices/S1-Series---Wifi-Socket-S120-%28EU-model%29-chipset-TYWE2S/#model","title":"Model","text":"<p>There's no brand on this one, I got it for 11\u20ac on ebay as \"Wifi Smart Sans Fil T\u00e9l\u00e9commande Prise de Courant Pour T\u00e9l\u00e9phone Prise EU Plug\" from this seller.</p> <p></p>"},{"location":"devices/S1-Series---Wifi-Socket-S120-%28EU-model%29-chipset-TYWE2S/#flashing","title":"Flashing","text":"<p>As chipset is a TYWE2S, you'll have to connect GPIO0 (marked IO0) manually to the ground. </p> <p></p> <p>There's better images than mines here and here on the wiki.</p>"},{"location":"devices/S1-Series---Wifi-Socket-S120-%28EU-model%29-chipset-TYWE2S/#configuration","title":"Configuration","text":"<ul> <li>GPIO5: Relay1 (21)</li> <li>GPIO12: Led1 (52)</li> <li>GPIO14: Button1 (17)</li> </ul>"},{"location":"devices/SK03-Outdoor-Smart-Plug/","title":"SK03 Outdoor Smart Plug","text":"<p>SK03 Outdoor Smart Plug which can be found as different brand names on Amazon.  The ESP8266 module inside is a TYWE3S by Tuya. The power monitoring is a HLW8012 much like the original Sonoff POW and other power monitoring modules.</p> <p>Pull the four rubber pads off the bottom to expose the screws and the unit opens up.  Unscrew the small screws from the board and it comes out of the case. The relay is close to the soldering points on the Tuya module but it can be done if you are careful.  GPIO0 is the button on the underside so you do not need to solder to that point, just hold the button during boot for your flashing process like you would with a Sonoff Basic.  </p> <p>digiblurDIY did a livestream showing this device, soldering and flashing process (split in two videos): https://www.youtube.com/watch?v=C5_BqptJA_w and https://www.youtube.com/watch?v=ca7P9TR9r68</p> <p>As of firmware 6.3.0.11, the SK03 is available for use in the module configuration. </p> <p>Information regarding the standard soldering and pinouts for the TYWE3S module:</p> <p> </p> <pre><code>  { \"SK03 Outdoor\",   // Outdoor smart plug with power monitoring HLW8012 chip - https://www.amazon.com/gp/product/B07CG7MBPV\n     GPIO_KEY1,        // GPIO00 Button\n     0, 0, 0,    \n     GPIO_HLW_CF,      // GPIO04 HLW8012 CF power\n     GPIO_NRG_CF1,     // GPIO05 HLW8012 CF1 current / voltage\n     0, 0, 0, 0, 0, 0, // Flash connection\n     GPIO_NRG_SEL_INV, // GPIO12 HLW8012 CF Sel output (0 = Voltage)\n     GPIO_LED2_INV,    // GPIO13 Red Led (0 = On, 1 = Off)\n     GPIO_LED1_INV,    // GPIO14 Blue Led (0 = On, 1 = Off)\n     GPIO_REL1,        // GPIO15 Relay (0 = Off, 1 = On)\n     0, 0\n  }\n</code></pre> <p> </p>"},{"location":"devices/SM-SO301/","title":"SM SO301","text":"<p>SM-SO301 with an FCC ID of 2AJ5F-SM-SO3015 has 4 mains power and 4 USB ports.  Each mains power is independently controlled and the USB group is controllable via a solid state relay. The ESP8266 module inside is a TYWE3S by Tuya. </p> <p>Model purchased SM-SO301 (it seems to change on Amazon and other places, search for the model#). Other resellers may sell the same unit with various mains voltages/plug types.</p> <p>Also sold under the Vivitar name model HA-1007-ACD (US version). There is also an HA-1007-AU (AUS version).</p>"},{"location":"devices/SM-SO301/#product","title":"Product","text":""},{"location":"devices/SM-SO301/#flashing-and-configuration-pictures","title":"Flashing and Configuration Pictures","text":"<p>Hold/Attach the GPIO0 wire/pin to ground during initial boot to flash. (TX pin to RX pin and RX pin to TX pin on USB flash adapter)</p> <p> </p>"},{"location":"devices/SP108E-HardwareAnalysis/","title":"SP108E HardwareAnalysis","text":"<p>So far I analyzed it is equipped with these chips:</p> <ul> <li>ESP-12F</li> <li>STM32F-030C8T (Cortex M0)</li> <li>Winbond 25Q32 (EEPROM)</li> <li>74HC245</li> <li>XL1509 3.3E1 (Step down regulator)</li> <li>RX/TX of STM is connected to ESP.</li> <li>74HC245 buffers the outputs</li> </ul> <p>ESP is connected to the STM RX/TX pins. No other connections seen. We can assume there is some firmware in the STM that does the low level connection to the LEDs.</p> <p>Question is how does the ESP communicate with the STM and what exactly does the STM at all. But we can mod the hardware so the ESP can talk to the LEDs.</p> <p>I made some pictures with phone and microscope.</p> <p>PCB</p> <p></p> <p>Open the housing, see the red marks for the holders)</p> <p></p> <p>RX/TX connection ESP to STM</p> <p></p> <p>STM32F0</p> <p></p> <p>EEPROM</p> <p></p> <p>Pins lead to the STM32F0 (Firmware flash? Debug?)</p> <p></p> <p>ESP-12 and its pins</p> <p></p> <p></p> <p>Buffer chip 74HC245</p> <p></p> <p>Traces on bottom side from STM to HC245 (actually R3 and R4)</p> <p></p> <p>Known differences to the 2nd gen</p> <p>The following picture shows the pcb of the 2nd generation of the SP108E. </p> <p></p> <p>The ESP12F was replaced to a proprietary ESP8285 pcb. Fortunately the pinout is printed on the back of the pcb so we can use it to connect the cables for flashing. As the pcb were already soldered out for taking the following picture it was flashed in this unmounted state. It should work as well while the ESP is soldered. Pay attention to the information below. </p> <p></p> <p>The STM32F0 was replaced through a Geehy APM32F030C8T6 ARM-Cortex M0 microcontroller. At least the reset pin is at the same place. So the hardware modification of the first gen can also be applied.</p> <p>For the hardware mod to make it working without the STM32F0/Geehy, there are several ways:</p>"},{"location":"devices/SP108E-HardwareAnalysis/#1-cut-traces-and-add-wires","title":"1. Cut traces and add wires","text":"<p>We need to break one of the traces on the bottom of the PCB. Then connect GPIO4 of ESP-12 with R4. Also RX/TX connection between STM32F0 and ESP-12 need to be broken up.</p>"},{"location":"devices/SP108E-HardwareAnalysis/#2-hold-stm32f0-in-reset","title":"2. Hold STM32F0 in reset","text":"<p>This is the simpler method, no cuts on the PCB required, just two additional wires. - NRST of STM32F0 to GND - IO4 of ESP-12 to R4</p> <p>See here for details.</p>"},{"location":"devices/SP108E-HardwareAnalysis/#flashing-prohibited-not-anymore-with-a-cut-in-the-pcb","title":"Flashing prohibited (not anymore with a cut in the PCB)","text":"<p>Major problem is that IO0 is directly connected to VCC, so we cannot bring ESP-12 into flash mode. This is for the older rev of the PCB and showing the same physical device seen in my very first posts a few years ago.</p> <p>After removing the ESP-12, the trace was visible and now it is easy to see where to cut the PCB. See the \"cut here\" in blue letters. I also sketched the VCC-trace in red. After the cut cut you can connect the IO0 to GND for reflashing. Later you need to connect back to VCC.</p> <p></p>"},{"location":"devices/SP108E-HardwareMod/","title":"SP108E HardwareMod","text":"<p>SP108e (1st gen)</p> <p>Below is correct, but IO0 is directly connected to VCC, so we cannot bring ESP-12 into flash mode. Will check for some OTA mode that can be used.</p> <p>With just two additional wires we can use Tasmota with the SP108E.</p> <p>Analysis of the hardware</p> <p>The trick is to hold the STM32F0 controller in reset. Then we do not need to cut any traces on the PCB because all pins of the STM32F0 are inputs.</p> <p>Another warning: I did not yet proof it actually works, this is work in progress.</p> <ul> <li>Wire 1 - NRST (pin 7) of STM32F0 to GND</li> <li>Wire 2 - IO4 of ESP-12 to R4</li> </ul> <p></p> <p>SP108E (2nd gen)</p> <p>With the new hardware version of the SP108E a new microcontroller (Geehy APM32F030C8T6) comes to control the WS2812 leds. It seems to be pin compatible at least for the part of its reset pin. As the data sheet reveals the NRST is also located to pin 7. The Espressif chip was replaced as well. It has a different pinout and cannot be flashed as the usual ESP12S or similar. See Analysis of the hardware page for more details on it. The picture below shows the necessary hardware modifications to run tasmota for the 2nd gen.</p> <ul> <li>Wire 1 NRST (pin 7) of Geehy APM32 to GND</li> <li>Wire 2 IO4 of ESP8285 to R4 (DAT)</li> </ul> <p></p>"},{"location":"devices/SP108E-LED-strip-controller/","title":"SP108E LED strip controller","text":"<p>This is a controller for the WS2812 and similar LED chips (stripes). Prize is 13..15\u20ac at ebay. It uses another controller (STM32F0) to control CLK and Data lines to the LEDs tripes.</p> <p>Warning: Construction zone.</p> <p>To run Tasmota on it, we need to modify the hardware. See here for details.</p> <p>Currently not working, see HardwareMod for details: \"Other than that, the normal flash instruction for Tasmota do apply.\"</p> <p>SP108E (1st Gen)</p> <p></p> <p>SP108E (2nd Gen)</p> <p>New generation of the WS2812 controller. A modification of the hardware is also necessary. See page for SP108E-HardwareMod from above.</p> <p></p> <p>Working </p>"},{"location":"devices/SWB1-Smart-Power-Strip/","title":"SWB1 Smart Power Strip","text":""},{"location":"devices/SWB1-Smart-Power-Strip/#product","title":"Product","text":"<p>SWB1 Wi-Fi smart power strip with 4 main ports. Each port can be controlled manually FCCID: 2AJK8-SWB1 This is a new device not using the Tuya PCB but is an esp8266ex based and works great with Tasmota</p> <p>The product can be purchased on amazon.ca (could be found on other amazon sites) </p>"},{"location":"devices/SWB1-Smart-Power-Strip/#inside","title":"Inside","text":"<p> Inside PCB</p> <p> The chip used WT8266-S1. The specs can be found on wireless-tags.com</p>"},{"location":"devices/SWB1-Smart-Power-Strip/#jtag","title":"JTAG","text":"<p> Pins used. You can choose one of 3 GND to your liking. the RESET(RST) pin is also marked for those that use that pin to reset the chip while flashing</p> <p>Alternatively, you can solder a header on to the COM2 through holes, and use those for flashing the WT8266 </p>"},{"location":"devices/SWB1-Smart-Power-Strip/#tasmota-configuration","title":"TASMOTA CONFIGURATION","text":""},{"location":"devices/SeedStudio-SenseCAP-D1/","title":"SeedStudio SenseCAP Indicator D1","text":"<p>The device is a 4-Inch Touch Screen IoT development platform powered by ESP32S3 &amp; RP2040. It has variants with LoRa support, and Air Quality support.</p> <p></p> <p>Link to purchase the device SeedStudio web site</p> <p>There are variants, all sharing the following features:</p> <ul> <li>ESP32S3 with 8MB Flash and 8MB PSRAM</li> <li>4 inch 480 x 480 pixels display, ST7701 controller, connected in parallel 8 bits mode to ESP32S3 for maximum display speed</li> <li>Capacitive Touchscreen, FT5x06 controller</li> <li>SD Card connector</li> <li>Dual I2C Groove connectors</li> <li>Dual USB-C connectors below and in the back of the device</li> <li>Buzzer MLT-8530, Resonant Frequency\uff1a2700Hz</li> <li>Also contains a RP2040 MCU, Dual ARM Cortex-M0+ up to 133MHz, 2MB of Flash</li> </ul> <p>We will focus below on the \"SenseCAP Indicator D1L\" which includes:</p> <ul> <li>internal SGP41 tVOC Air Quality Sensor (Range: 0-40000ppm, Accuracy: 400ppm - 5000ppm \u00b1(50ppm+5% of reading))</li> <li>internal SCD40 CO2 Carbon Dioxid Sensors (Range: 1-500 VOC Index Points)</li> <li>external AHT20 Temperature and Humidity sensor (Range: -40 ~ + 85 \u2103/\u00b1 0.3 \u2103; 0 ~ 100% RH/\u00b1 2% RH (25 \u2103))</li> </ul> <p></p>"},{"location":"devices/SeedStudio-SenseCAP-D1/#esp32s3-build","title":"ESP32S3 build","text":"<p>The device requires a self-compile with the following options:</p> <ul> <li>Compile with an environment that uses <code>board = esp32s3-qio_opi_120</code>, which enables Quad SPI Flash and Octal SPI PSRAM at 120MHz.</li> <li>Enable the following options: <code>USE_SDCARD</code>, <code>USE_I2C_SERIAL</code>, <code>USE_AHT2x</code>, <code>USE_SGP4X</code>, <code>USE_SCD40</code>, <code>USE_I2C</code>, <code>USE_SPI</code>, <code>USE_LVGL</code>, <code>USE_DISPLAY_LVGL_ONLY</code>, <code>USE_DISPLAY</code>, <code>USE_UNIVERSAL_TOUCH</code>, <code>USE_UNIVERSAL_DISPLAY</code></li> </ul> <p>In file <code>platformio_override.ini</code>, add the following section and select :</p> <pre><code>[env:tasmota32s3-qio_opi_120-SenseCap_D1]\n; device needs &gt;= 8MB Flash!!\nextends                     = env:tasmota32_base\nboard                       = esp32s3-qio_opi_120\nboard_build.partitions      = partitions/esp32_partition_app3904k_fs3392k.csv\nbuild_flags                 = ${env:tasmota32_base.build_flags}\n                              -DUSE_BERRY_ULP\n                              -DFIRMWARE_LVGL\n                              -DUSE_LVGL_OPENHASP\n                              -DUSE_I2C_SERIAL\n                              -DUSE_AHT2x\n                              -DUSE_SGP4X\n                              -DUSE_SCD40\n                              -DOTA_URL='\"\"'\n</code></pre> <p>and compile with:</p> <pre><code>default_envs =\n; *** Uncomment the line(s) below to select version(s)\n    tasmota32s3-qio_opi_120-SenseCap_D1\n</code></pre>"},{"location":"devices/SeedStudio-SenseCAP-D1/#auto-configuration","title":"Auto-configuration","text":"<p>For easy configuration, select \"Configuration\" then \"Auto-configuration\". Select \"SeedStudio-SenseCAP-D1\" in the dropdown and click on \"Apply configuration\". The device will download the configuration (internet connection is required) and reboot twice.</p> <p></p>"},{"location":"devices/SeedStudio-SenseCAP-D1/#configure-gpios-and-lvgl-display","title":"Configure GPIOs and LVGL Display","text":"<p>If you used Auto-Configuration, you can skip this section. This is a manual alternative to auto-configuration.</p> <p>Use:</p> <pre><code>Template {\"NAME\":\"SenseCAP Indicator D1\",\"GPIO\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11488,11520,0,6210,0,0,0,0,32,641,609,0,1,1,1,0,1,0,0],\"FLAG\":0,\"BASE\":1}\nModule 0\n</code></pre> <p>Add the following content in <code>display.ini</code> on the device file-system:</p> <pre><code>:H,ST7701,480,480,16,RGB,18,17,16,21,45,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,6\n:V,1,10,8,50,1,10,8,20,0\n:S,2,1,1,0,40,20\n:IS,41,48,-1,-1\nFF,5,77,01,00,00,10\nC0,2,3B,00\nC1,2,0D,02\nC2,2,31,05\nC7,1,04\nCD,1,08\nB0,10,00,11,18,0E,11,06,07,08,07,22,04,12,0F,AA,31,18\nB1,10,00,11,19,0E,12,07,08,08,08,22,04,11,11,A9,32,18\nFF,5,77,01,00,00,11\nB0,1,60\nB1,1,32\nB2,1,07\nB3,1,80\nB5,1,49\nB7,1,85\nB8,1,21\nC1,1,78\nC2,A1,78\nE0,3,00,1B,02\nE1,B,08,A0,00,00,07,A0,00,00,00,44,44\nE2,C,11,11,44,44,ED,A0,00,00,EC,A0,00,00\nE3,4,00,00,11,11\nE4,2,44,44\nE5,10,0A,E9,D8,A0,0C,EB,D8,A0,0E,ED,D8,A0,10,EF,D8,A0\nE6,4,00,00,11,11\nE7,2,44,44\nE8,10,09,E8,D8,A0,0B,EA,D8,A0,0D,EC,D8,A0,0F,EE,D8,A0\nEB,7,02,00,E4,E4,88,00,40\nEC,2,3C,00\nED,10,AB,89,76,54,02,FF,FF,FF,FF,FF,FF,20,45,67,98,BA\n36,1,10\nFF,5,77,01,00,00,13\nE1,1,E4\nFF,5,77,01,00,00,00\n21,0\n3A,1,60\n11,80\n29,80\n:B,120,02\n:UTI,FT5x06,I2,48,-1,-1\nRD A8\nCP 11\nRTF\nRD A3\nCP 64\nRTF\nRT\n:UTT\nRDM 00 16\nMV 2 1\nRT\n:UTX\nMV 3 2\nSCL 480 -1\nRT\n:UTY\nMV 5 2\nSCL 480 -1\nRT\n#\n</code></pre>"},{"location":"devices/SeedStudio-SenseCAP-D1/#using-air-quality-sensors","title":"Using Air Quality Sensors","text":"<p>According to the schematics, ESP32S3 is directly connected in I2C to the <code>FT5x06</code> TouchScreen Controller, and to the <code>PCA8535</code> IO Expander. The <code>SCD40</code>, <code>SGP41</code> and <code>AHT20</code> are connected in I2C to the <code>RP2040</code> MCU so out of reach of Tasmota. For this, we have added the <code>I2C_SERIAL</code> interface which allows to access remote I2C devices via a UAR interface using the same Serial protocol as NXP <code>SC18IM704</code> chip.</p> <p>To make it accessible from native I2C drivers, the I2C Serial driver must use bus <code>1</code>, and the I2C bus connected to ESP32S3 must use I2C bus <code>2</code>.</p> <p>Now you need to flash the <code>RP2040</code> and use a simple Micropython script to bridge the UART to I2C bus.</p>"},{"location":"devices/SeedStudio-SenseCAP-D1/#flashing-and-configuring-rp2040","title":"Flashing and configuring RP2040","text":""},{"location":"devices/SeedStudio-SenseCAP-D1/#step-1-flash-micropython","title":"Step 1. Flash Micropython","text":"<p>To flash the RP2040, you need to insert a pin in the \"reset\" small hole, and power-up the device while keeping the Reset button pushed. You can then release the Reset button.</p> <p>RP2040 boots in flash mode, and shows a USB disk. Simply download the latest RPI Pico Micropython firmware (file ending with <code>.uf2</code>) from the official Micropython site. This was tested with <code>RPI_PICO-20241025-v1.24.0.uf2</code>.</p>"},{"location":"devices/SeedStudio-SenseCAP-D1/#step-2-use-thonny","title":"Step 2. Use Thonny","text":"<p>For easy setup, download and install Thonny:</p> <ul> <li>Launch Thonny</li> <li>Connect to the RP2040: click on the lower right corner and select <code>MicroPython (RP2040)</code></li> <li>Copy and paste the Micropython code from below</li> <li>Click on \"Save\", select \"RP2040 Device\" and choose \"main.py\" as a filename</li> <li>You can hit the \"Run Current Script\" button (green arrow) to see the script running</li> <li>The script will automatically run at power on</li> </ul> <p>Here is how it should look like: </p>"},{"location":"devices/SeedStudio-SenseCAP-D1/#step-3-micropython-code-for-rp2040","title":"Step 3. MicroPython code for RP2040","text":"<pre><code># below is an example of Micropython code for Seedstudio SenseCap\n# that allows to bridge the UART on GPIO 16/17 to I2C on GPIO 20/21\n\nfrom machine import Pin, I2C\nfrom machine import Pin\nfrom machine import UART, Pin\nimport time\n\nuart = UART(0, baudrate=115200, tx=Pin(16), rx=Pin(17), timeout=30000, timeout_char=50, txbuf=128, rxbuf=128)\nprint(f\"CFG: UART initialized\")\n\npower_i2c = Pin(18, Pin.OUT)    # create output pin on GPIO0\npower_i2c.on()                 # set pin to \"on\" (high) level\n\ni2c = I2C(0, scl=Pin(21), sda=Pin(20), freq=400_000, timeout=1000)\n\n# print(f\"I2C: scan {i2c.scan()}\")\n\n# i2c_stat:\n# 0: no error\n# 1: I2C_NACK_ON_ADDRESS\n# 2: I2C_NACK_ON_DATA\n# 3: I2C_TIME_OUT\ni2c_stat = 0\ndef set_i2c_stat(v):\n    global i2c_stat\n    i2c_stat = v\n\ndef get_i2c_stat():\n    global i2c_stat\n    return i2c_stat\n\n\ndef ignore_until_P():\n    # read uart until none left or 'P' reached\n    # return last unprocessed char or None\n    while True:\n        c = uart.read(1)\n        if c is None:\n            return None # end of receive\n        if c == b'P':\n            cur_char = None\n            return None # end reached\n\ndef process_cmd_start():\n    # return last unprocessed char or None\n    addr_b = uart.read(1)\n    if addr_b is None:  print(\"start: no address sent\"); return None\n    addr = addr_b[0] &gt;&gt; 1\n    is_write = not bool(addr_b[0] &amp; 1)\n    len_b = uart.read(1)\n    if len_b is None:  print(\"start: no length sent\"); return None\n    len_i = len_b[0]\n    cmd_next = None\n    # dispatch depending on READ or WRITE\n    if is_write:\n        payload_b = bytes()\n        if len_i &gt; 0:\n            payload_b = uart.read(len_i)\n            if len(payload_b) &lt; len_i:\n                print(f\"start: payload {payload_b} too small, expected {len_i} bytes\")\n                return None\n        stop_bit = False\n        cmd_next = uart.read(1)\n        if cmd_next == b'P':\n            stop_bit = True\n        try:\n            set_i2c_stat(0)\n            acks_count = i2c.writeto(addr, payload_b, stop_bit)\n            #print(f\"{acks_count=} {len_i=}\")\n            if acks_count &lt; len_i:\n                set_i2c_stat(2)\n            else:\n                print(f\"I2C: [0x{addr:02X}] W '{payload_b.hex()}'\")\n            #print(f\"{acks_count=} {len_i=} {get_i2c_stat()=}\")\n        except Exception as error:\n            #print(f\"{error=}\")\n            set_i2c_stat(1)    # I2C_NACK_ON_ADDRESS\n        # if 'S' is followed, return to main loop\n        if cmd_next == b'S':\n            return cmd_next\n    else:\n        # read\n        payload_b = b''\n        #print(f\"read: [0x{addr:02X}] {len_i}\")\n        try:\n            set_i2c_stat(0)\n            payload_b = i2c.readfrom(addr, len_i, True)\n            print(f\"I2C: [0x{addr:02X}] R '{payload_b.hex()}' {len(payload_b)}/{len_i}\")\n            uart.write(payload_b)\n        except Exception as error:\n            print(f\"I2C: error while reading from 0x{addr:02X} len={len_i} error '{error}'\")\n            set_i2c_stat(1) # I2C_NACK_ON_ADDRESS\n            return None            \n    return None\n\n\ndef process_cmd_stop():\n    # return last unprocessed char or None\n    return None                         # do nothing\n\ndef process_cmd_read():\n    # return last unprocessed char or None\n    # we accept only 1 register for now\n    reg = uart.read(1)\n    if reg is None: print(\"read: no register sent\"); return None\n    cmd_next = uart.read(1)\n    if cmd_next is None or cmd_next != b'P': print(\"read: unfinished command\"); return None\n    #\n    reg = reg[0]  # convert to number\n    if reg == 0x0A: # I2CStat\n        uart.write(int.to_bytes(get_i2c_stat() | 0xF0))\n    else:\n        uart.write(int.to_bytes(0x00))\n    return None\n\ndef process_cmd_write():\n    # return last unprocessed char or None\n    print(\"I2C: ignore 'W' commmand\")\n    return ignore_until_P()\n\ndef process_cmd_version():\n    ignore_until_P()\n    uart.write(b'Tasmota I2C uart bridge 1.0\\x00')\n    return None\n\ndef process_cmd_ignore():\n    # return last unprocessed char or None\n    return ignore_until_P()\n\ndef process_discard():\n    # discard all bytes in input\n    # return last unprocessed char or None\n    while uart.any() &gt; 1:\n        uart.read(uart.any())\n    return None\n\ndef run():\n    cmd = None\n    while True:\n        if cmd is None and uart.any() &gt; 0:\n            cmd = uart.read(1)\n        if cmd is None:\n            time.sleep(0.01)\n        else:\n            #print(f\"SER: received cmd {cmd}\")\n            if cmd == b'S':\n                cmd = process_cmd_start()\n            elif cmd == b'P':\n                cmd = process_cmd_stop()\n            elif cmd == b'R':\n                cmd = process_cmd_read()\n            elif cmd == b'W':\n                cmd = process_cmd_write()\n            elif cmd == b'V':\n                cmd = process_cmd_version()\n            elif cmd == b'I' or cmd == b'O' or cmd == b'Z':\n                cmd = process_cmd_ignore()\n            else:\n                cmd = process_discard()\n\nrun()\n</code></pre>"},{"location":"devices/SeedStudio-SenseCAP-D1/#step-4-wrap-up","title":"Step 4. Wrap-up","text":"<p>Reboot and you should the sensors working.</p> <p>For reference, here are the boot logs with <code>Seriallog 3</code>:</p> <pre><code>00:00:00.251 CMD: Fall back to serial port, no SOF packet detected on USB port\n00:00:00.251 HDW: ESP32-S3 v0.2 (PSRAM)\n00:00:00.262 UFS: FlashFS mounted with 4380 kB free\n00:00:00.267 CFG: Loaded from File, Count 386\n00:00:00.273 QPC: Count 1\n00:00:00.274 CFG: CR 362/699, Busy 0\n00:00:00.275 I2C: Bus2 using GPIO40(SCL) and GPIO39(SDA)\n00:00:00.290 CFG: No '*.autoconf' file found\n00:00:00.295 BRY: Berry initialized, RAM used 6578 bytes\n00:00:00.298 BRY: No 'preinit.be'\n00:00:00.305 DSP: File descriptor used\n00:00:01.236 UTI: FT5x06 initialized\n00:00:01.236 DSP: ST7701 initialized\n00:00:02.239 I2C: I2C serial configured on GPIO TX 19 / RX 20 for bus 1\n00:00:02.260 I2C: I2C serial initialized\n00:00:02.261 SRC: Restart\n00:00:02.263 Project tasmota - Tasmota Version 14.3.0.4(tasmota)-3_1_0(2024-11-07T22:41:20)\n00:00:02.275 LVG: Allocating buffer1 112 KB in main memory (flushlines 120)\n00:00:02.280 LVG: LVGL initialized\n00:00:02.405 I2C: AHT2X found at 0x38\n00:00:03.069 SCD40 serial nr 0x2FC1 0x5B07 0x3BCF\n00:00:03.081 I2C: SCD40 found at 0x62\n00:00:03.116 SGP4X serial nr 0x0 0x57F 0x84F1\n00:00:03.137 SGP4X features: 0x3240\n00:00:03.137 I2C: SGP4X found at 0x59\n</code></pre>"},{"location":"devices/SeedStudio-SenseCAP-D1/#internals","title":"Internals","text":"<p>SeedStudio does not provide the detailed schematics, but still provides an overview of GPIO connection:</p> <p></p>"},{"location":"devices/Shelly-1/","title":"Shelly 1","text":"<p>The Shelly 1 is supported in Tasmota from version 6.2.1.7</p> <p>Shelly 1 Knowledge Base</p> <p>Shelly 1 API Reference</p> <p></p>"},{"location":"devices/Shelly-1/#flashing","title":"Flashing","text":"<p>There are two options to get Tasmota onto your Shelly:</p> <ol> <li>OTA update with an intermediate firmware (preferred - can be done in an already installed state)</li> <li>The common way using a serial adapter. DO NOT DO THIS WHEN CONNECTED TO AC MAINS!</li> </ol>"},{"location":"devices/Shelly-1/#ota-update","title":"OTA Update","text":"<p>Follow the guide from this repository: https://github.com/arendst/mgos-to-tasmota</p>"},{"location":"devices/Shelly-1/#special-shelly-attention","title":"\u26a0\ufe0f\ufe0fSpecial Shelly Attention\u26a0\ufe0f\ufe0f","text":"<p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!!! (No sensors, no switches, nothing)  The GPIOs on the Shelly are connected to AC power! Only use a Shelly as designed.</p> <p>There is possibility to attach DS18B20 or other sensors BUT only using Digital Voltage Isolator For example the company sells Temperature Sensor AddOn for Shelly 1/1PM with DS18B20. This should not fool you, never ever attach any sensor directly to the GPIOs - this expansion board uses TexasInstruments ISO7221 for voltage isolation. More information and Tasmota support for the extension board at https://github.com/arendst/Tasmota/issues/7469.</p> <p>Do not connect AC power and the serial connection at the same time The GND connection of the Shelly is connected to the live AC wire. Connecting serial with your PC will fry your PC.</p> <p>Check the correct jumper position before connecting AC power to Shelly 1. If the jumper is set to 12V you will destroy your Shelly!</p> <p>An ESP8266 with 2MB flash single relay device 42mm \"round\" in size.</p>"},{"location":"devices/Shelly-1/#serial-connection","title":"Serial Connection","text":"<p>Shelly1 comes with a partially exposed programming/debug header which can be used to flash Tasmota on the device. A serial-to-USB adapter is needed as well as a reliable 3.3V source with at least 350 mA drive capability. The following diagram shows the device pinout.</p> <p></p>"},{"location":"devices/Shelly-1/#flash-mode","title":"Flash mode","text":"<p>To be able to flash the Tasmota firmware you need to get into flash mode. Therefore connect a wire from GPIO0 to ground. For further information have a look at Hardware Preparation.</p>"},{"location":"devices/Shelly-1/#warning","title":"\u26a0\ufe0f\ufe0fWARNING\u26a0\ufe0f\ufe0f","text":"<p>Please note what version of the Shelly 1 you have (V1, V2 or V3). The V2 user guide is incorrect. The labels on the V2 switches are WRONG! The following image shows how to connect the device to mains power.</p> <p></p>"},{"location":"devices/Shelly-1/#video-tutorial-by-digiblurdiy","title":"Video tutorial by digiblurDIY","text":""},{"location":"devices/Shelly-1/#video-tutorial-by-burnsha","title":"Video tutorial by BurnsHA","text":""},{"location":"devices/Shelly-1PM/","title":"Shelly 1PM","text":"<p>The Shelly 1PM is supported from Tasmota 6.5.0.10 using a template.</p> <p>Shelly 1PM Knowledge Base</p> <p>Shelly 1PM API Reference</p> <p></p>"},{"location":"devices/Shelly-1PM/#special-shelly-attention","title":"\u26a0\ufe0f\ufe0fSpecial Shelly Attention\u26a0\ufe0f\ufe0f","text":"<p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!!! (No sensors, no switches, nothing)  The GPIOs on the Shelly are connected to AC power! Only use a Shelly as designed.</p> <p>Do not connect AC power and the serial connection at the same time The GND connection of the Shelly is connected to the live AC wire. Connecting serial with your PC will fry your PC.</p> <p>An ESP8266 with 2MB flash single relay device 42mm \"round\" in size.</p>"},{"location":"devices/Shelly-1PM/#serial-flashing","title":"Serial Flashing","text":"<p>Shelly 1PM comes with a partially exposed programming/debug header which can be used to flash Tasmota on the device. A USB-to-UART adapter is needed as well as a reliable 3.3V with at least 350 mA drive capability. The following diagram shows the device pinout.</p> <p></p>"},{"location":"devices/Shelly-1PM/#template","title":"Template","text":"<pre><code>{\"NAME\":\"Shelly 1PM\",\"GPIO\":[56,0,0,0,82,134,0,0,0,0,0,21,0],\"FLAG\":2,\"BASE\":18}\n</code></pre>"},{"location":"devices/Shelly-1PM/#calibration","title":"Calibration","text":"<p>Tasmota will disable serial logging after a restart as the communication between Tasmota and the Energy Monitoring chip is using the same serial interface. Make sure not to enable <code>SerialLog</code> as it will interfere with the Energy Monitoring functionality.</p> <p>To calibrate the Energy monitoring feature connect a known load and execute the commands shown below. Assumed an AC voltage of 240V, a resistive load of 60W and a line frequency of 50Hz. With a load of 60W the current should be 60W / 240V = 0.25A. <pre><code>FrequencySet 50.000\nPowerSet 60.00\nVoltageSet 240.0\nCurrentSet 250.0\n</code></pre> Pause a few seconds between executing the commands as the communication between Tasmota and the Energy Monitoring chip is a serial interface which can take over a second to complete.</p>"},{"location":"devices/Shelly-2.5/","title":"Shelly 2.5","text":"<p>The Shelly 2.5 is supported from Tasmota 6.5.0.8 using a template.</p> <p>Shelly 2.5 Knowledge Base</p> <p>Shelly 2.5 API Reference</p> <p>Shelly 2.5 Initial issue</p> <p></p>"},{"location":"devices/Shelly-2.5/#special-shelly-attention","title":"\u26a0\ufe0f\ufe0fSpecial Shelly Attention\u26a0\ufe0f\ufe0f","text":"<p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!!! (No sensors, no switches, nothing) The GPIOs on the Shelly are connected to AC power! Only use a Shelly as designed.</p> <p>Do not connect AC power and the serial connection at the same time The GND connection of the Shelly is connected to the live AC wire. Connecting serial with your PC will fry your PC.</p> <p>Warning (April 10, 2019): This appears to affect a percentage of their entire first run production. Check your device before powering it on.</p> <p>An ESP8266 with 2MB flash dual relay device with Energy Monitoring. Slightly smaller than the original Shelly 2.</p>"},{"location":"devices/Shelly-2.5/#serial-connection","title":"Serial Connection","text":"<p>The Shelly 2.5 model comes with a partially exposed programming/debug header which can be used to flash Tasmota on the device. A USB-to-UART adapter is needed as well as a reliable 3.3V with at least 350 mA drive capability. The following diagram shows the device pinout and power source voltage selection jumper.</p> <p></p> <p>The onboard connector is 1.27mm raster with 1mm diameter holes. Normal Dupont cables won't fit. To avoid damaging the pcb, use either a stripped 24 AWG Ethernet cable and breadboard as an adapter, or female header socket legs (see image below). The legs of a female header socket fit nicely. Solder them to custom-crimped Dupont wires for use with your USB-to-UART adapter. These often come with Wemos D1 Mini boards in multiple lengths.</p> <p> </p> <p>Otherwise you could simply buy an adapter that converts Dupont to 1.27mm raster at tindie</p>"},{"location":"devices/Shelly-2.5/#template","title":"Template","text":"<p>Tasmota 6.5.0.8 and higher supports Shelly 2.5</p> GPIO Component 0 LED1i 2 Button1 4 Relay1 5 Switch2n 12 I2C SDA 13 Switch1n 14 I2C SCL 15 Relay2 16 ADE7953 IRQ A0 Internal Temperature <p><code>{\"NAME\":\"Shelly 2.5\",\"GPIO\":[56,0,17,0,21,83,0,0,6,82,5,22,156],\"FLAG\":2,\"BASE\":18}</code></p> <p>Energy metering is done by an ADE7953 chip connected via I2C and IRQ on GPIO16.</p> <p>If you connect momentary switches, use the following template: <code>{\"NAME\":\"Shelly 2.5 (buttons)\",\"GPIO\":[56,0,19,0,21,127,0,0,6,126,5,22,156],\"FLAG\":2,\"BASE\":18}</code> <code>Button1</code> and <code>Button2</code> are assigned to the SW1 and SW2 external inputs. <code>Button3</code> is the button on the back of the device next to the pin header and you can optionally assign the behaviour you want using rules.</p> <p>If you want the buttons to respond instantly, go to the console and type <code>SetOption13 1</code>. But, if you want press/double press/hold functionality, run instead <code>Backlog SetOption1 1; SetOption11 1; SetOption32 20</code> to enable all three states and set hold time of 2 seconds. Use SetOption32 to set another hold time.</p> <p>If you want to see Voltage and Frequency also when the relays are off, use <code>SetOption21 1</code></p>"},{"location":"devices/Shelly-2.5/#flash-mode","title":"Flash mode","text":"<p>To be able to flash the Tasmota firmware you need to get into flash mode. Therefore connect a wire from GPIO0 to ground. For further information have a look at programming mode.</p>"},{"location":"devices/Shelly-2.5/#calibration","title":"Calibration","text":"<p>Tasmota will disable serial logging after a restart as the communication between Tasmota and the Energy Monitoring chip is using the same serial interface. Make sure not to enable <code>SerialLog</code> as it will interfere with the Energy Monitoring functionality.</p> <p>To calibrate the Energy monitoring feature connect a known load and execute the commands shown below. Assumed an AC voltage of 240V, a resistive load of 60W and a line frequency of 50Hz. With a load of 60W the current should be 60W / 240V = 0.25A. <pre><code>FrequencySet 50.000\nPowerSet 60.00\nVoltageSet 240.0\nCurrentSet 250.0\n</code></pre> Pause a few seconds between executing the commands as the communication between Tasmota and the energy monitoring chip is a serial interface which can take over a second to complete.</p>"},{"location":"devices/Shelly-2.5/#use-rules-to-control-shutter-endpoints","title":"Use rules to control shutter endpoints","text":"<p>As the Shelly 2.5 contains energy monitoring you can use rules to power off the shutter when too much current is drawn at the end point. This rule will power off both directions when the current becomes greater than 600mA. Before you activate the rule, let your shutter move and pay attention to the current value in the WebGUI. Note your value and add 0.050 to your value. After that, you change the value for the rule.</p> <p>Eg.: Your Value = 0.520 + 0.050 = 0.570</p> <p><code>energy#current[X]&gt;0.570</code></p> <pre><code>rule1 on energy#current[2]&gt;0.600 do shutterstop endon on energy#current[1]&gt;0.600 do shutterstop endon\nrule1 1\nrule1 5\n</code></pre>"},{"location":"devices/Shelly-2.5/#use-shelly-25-device-for-blinds-and-shutters","title":"Use Shelly 2.5 device for Blinds and Shutters","text":"<p>Further Information: Blinds and Shutters</p>"},{"location":"devices/Shelly-2.5/#ghost-switching","title":"Ghost switching","text":"<p>The Shelly 2.5 inputs appear to be notoriously susceptible to interference. Therefore ghost switching can happen if the wires are long (&gt;1m / 3ft). If you experience this issue, you might want to experiment with the switch debounce delay. It is set to 50 milliseconds by default.</p> <p>Use command <code>SwitchDebounce 100</code> to change it to a less sensitive value, which might work better. The value can be set up to 1000 milliseconds.</p> <p>Some issues were reported for this topic - search query</p>"},{"location":"devices/Shelly-2.5/#overheating","title":"Overheating","text":"<p>Due to the built-in temperature sensor, it is possible to switch off the relays when a certain temperature is exceeded. The limit for the original Shelly firmware seems to be around 95 \u00b0 C. Source</p> <p>The ambient temperature according to the manufacturer is between - 40 \u00b0 C up to 40 \u00b0 C</p> <p>Even at temperatures within this range, a significantly higher temperature can occur when installed behind switches or in walls. There are reports that temperature-related shutdowns occur at high loads. A standby temperature between 30-60 \u00b0 C seems normal. An overtemperature threshold is implemented in the Tasmota firmware.</p> <p>Note</p> <p>It is set to 90 \u00b0 C</p> <p>This can be changed via SetOption42.</p> <p>[!WARNING]It is absolutely not recommended to increase the limit.</p>"},{"location":"devices/Shelly-2/","title":"Shelly 2","text":"<p>Shelly 2 is discontinued and replaced by Shelly 2.5 </p> <p>The Shelly 2 is fully supported in Tasmota from version 6.2.1.7</p>"},{"location":"devices/Shelly-2/#special-shelly-attention","title":"\u26a0\ufe0f\ufe0fSpecial Shelly Attention\u26a0\ufe0f\ufe0f","text":"<p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!!! (No sensors, no switches, nothing)  The GPIOs on the Shelly are connected to AC power! Only use a Shelly as designed. </p> <p>Do not connect AC power and the serial connection at the same time The GND connection of the Shelly is connected to the live AC wire. Connecting serial with your PC will fry your PC.</p> <p>Check the correct jumper position before connecting AC power to Shelly 1. If the jumper is set to 12V you will destroy your Shelly!</p>"},{"location":"devices/Shelly-2/#shelly-2","title":"Shelly 2","text":"<p>An ESP8266 with 2MB flash dual relay device with Energy Monitoring the size of round 45mm. </p>"},{"location":"devices/Shelly-2/#templates-as-of-v64117","title":"Templates as of v6.4.1.17","text":"<p>The inbuilt template equals the following: <code>{\"NAME\":\"Shelly 2\",\"GPIO\":[0,135,0,136,21,22,0,0,9,0,10,137,0],\"FLAG\":0,\"BASE\":47}</code> An alternative template without switch pull-up is: <code>{\"NAME\":\"Shelly 2n\",\"GPIO\":[0,135,0,136,21,22,0,0,82,0,83,137,0],\"FLAG\":0,\"BASE\":47}</code></p>"},{"location":"devices/Shelly-2/#pullup-or-no-pullup","title":"Pullup or no pullup","text":"<p>The shelly 2 inputs may or may not need pullups for SW1 and SW2 to work correctly. Default state is pullups enabled.</p> <p>To disable pullups either use command SetOption62 1 or select the option from the GUI.</p> <p></p> <p>Refer to the following issue: https://github.com/arendst/Tasmota/issues/4841</p>"},{"location":"devices/Shelly-RGBW2/","title":"Shelly RGBW2","text":"<p>An ESP8266 with 2MB flash LED Controller.</p> <ul> <li>Supports any 12v or 24v White, RGB, or RGBW led strips and 12/24v led bulbs, with up to 288W combined power</li> <li>Supports four-way PWM, applied to control four colors LED(R/G/B/W) for colored lights, color temperature lights, and general lights</li> <li>A separate 12V/24V power supply unit is required</li> <li>12V --&gt; 144W combined / 45W per Channel</li> <li>24V --&gt; 288W combined / 90W per Channel</li> <li>Shelly RGBW2 Knowledge Base</li> <li>Shelly RGW2 API Reference</li> </ul>"},{"location":"devices/Shelly-RGBW2/#special-shelly-attention","title":"\u26a0\ufe0f\ufe0fSpecial Shelly Attention\u26a0\ufe0f\ufe0f","text":"<p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!</p> <p>No sensors, no switches, nothing!</p> <p>There is no galvanic isolation between the DC Inputs and the GPIOs.</p> <p>Do not connect AC/DC power and the serial connection at the same time!</p> <p>Only use a Shelly as designed.</p>"},{"location":"devices/Shelly-RGBW2/#serial-connection","title":"Serial Connection","text":"<p>The Shelly RGBW2 model comes with a partially exposed programming/debug header which can be used to flash Tasmota on the device. A USB-to-UART adapter is needed as well as a reliable 3.3V with at least 350 mA drive capability. The following diagram shows the device pinout.</p> <p></p> <p>The onboard connector is 1.27mm pitch with 1mm diameter holes. Normal Dupont cables won't fit. To avoid damaging the PCB, use either a stripped Ethernet cable and breadboard as an adapter, or female header socket legs (see image below). The legs of a female header socket fit nicely. Solder them to custom-crimped Dupont wires for use with your USB-to-UART adapter. These often come with Wemos D1 Mini boards in multiple lengths.</p> <p> </p>"},{"location":"devices/Shelly-RGBW2/#template","title":"Template","text":"GPIO Component 0 None 1 None 2 LEDLink 3 None 4 PWM4 5 USER 9 None 10 None 12 PWM1 13 Button1 14 PWM3 15 PWM2 16 None 17 OpAmp Current Monitor <p>Template:</p> <pre><code>{\"NAME\":\"ShellyRGBW2\",\"GPIO\":[0,0,157,0,40,89,0,0,37,17,39,38,0],\"FLAG\":7,\"BASE\":18}\n</code></pre> <p>Energy metering is done by a LM321 OpAmp (1mOhm Shunt low side) via GPIO17.</p> <p>If you want to use a push button, you should take a look at the Button and Switches.</p> <p>If you want the buttons to respond instantly, go to the console and type <code>SetOption13 1</code>.</p> <p>If you want press/double press/hold functionality, run instead <code>Backlog SetOption1 1; SetOption11 1; SetOption32 20</code> to enable all three states and set hold time of 2 seconds. Use SetOption32 to set another hold time.</p>"},{"location":"devices/Shelly-RGBW2/#flash-mode","title":"Flash mode","text":"<p>To be able to flash the Tasmota firmware you need to get into flash mode. Connect a wire from GPIO0 to ground when powering on the device. For further information have a look at programming mode.</p>"},{"location":"devices/Shelly-RGBW2/#calibration","title":"Calibration","text":"<p>After successfully flashing Tasmota and selecting the template for the Shelly RGBW2, you can start configuring the power consumption.</p> <ol> <li> <p>Disconnect the GPIOs and connect the Shelly RGBW to its future power supply. Set GPIO17 to ADC Input in the template configuration and click Save.</p> </li> <li> <p>After restarting, the actual ADC value of the analog input is displayed on the Main Menu as Analog0. There should be no LED lights on at this time.</p> <p>Make a note of this value. It's the baseValue passed to the <code>AdcParam</code> command later on.</p> </li> <li> <p>In the template configuration, set GPIO17 to ADC CT Power and click Save.</p> </li> <li> <p>Use the AdcParam command in the web console:</p> <pre><code>AdcParam 7, baseValue, Multiplier, Voltage/1000\n</code></pre> <p>For a 12VDC power supply and a baseValue of 407, the command looks like this:</p> <pre><code>AdcParam 7, 407, 3282, 0.012\n</code></pre> </li> <li> <p>If there are no lights on, the Main Menu should show only the Voltage but no consumption.</p> </li> <li>Connect a light source with a current consumption known to you. Or measure the current with a multimeter. Compare the displayed values in the menu and those of your meter. Please note that the measurement of the Shelly RGBW2 is very inaccurate due to its electrical construction.</li> </ol>"},{"location":"devices/Shelly-RGBW2/#calculate-the-analog-ct-multiplier-optional","title":"Calculate the Analog CT Multiplier (optional)","text":"<p>It may be necessary to calculate the Analog CT Multiplier value. Generally 3282 is sufficient.</p> <ol> <li>Set GPIO17 input back to ADC Input.</li> <li>Note the baseValue when the light is switched off.</li> <li>Switch on the light and note the displayed analog value (comparisonValue) and the current value displayed by your meter (realValue).</li> <li> <p>Calculate the Multiplier value:</p> <p>(comparisonValue - baseValue) x 100 / realValue = Multiplier</p> <p>Example:</p> <pre><code>comparisonValue = 455\nbaseValue = 407\nrealValue 1.5A\n\n(455-407)*100/1.5 = 3200\n</code></pre> </li> <li> <p>Set GPIO17 input back to ADC CT Power and start at step 4 of the  Calibration procedure.</p> </li> </ol>"},{"location":"devices/Shelly-RGBW2/#using-the-attached-ac-switch-adapter","title":"Using the Attached AC Switch Adapter","text":"<p>As described in AC Frequency Detection Switch section, the adapter sends pulses (by shorting red wire to GND), when AC voltage is present between the two black wires.</p> <p>Shelly RGBW2 has an onboard pull-up resistor to 3.3V. To make it work correctly, set GPIO5 to <code>Switch_n</code> mode. Then use the 'SwitchDebounce' command to set the number of pulses required for the switch to be recognized as on or off. For example, <code>SwitchDebounce 69</code>.</p>"},{"location":"devices/Shelly-RGBW2/#use-rules-to-control-both-switches","title":"Use Rules to Control Both Switches","text":"<p>If SetOption37 is set to 128 the RGB and White is split, use this rule to switch both RGB and White on/off with the connected hardware switch:</p> <pre><code>Rule1 ON Power1#State DO Power2 %value% ENDON\nRule1 1\n</code></pre>"},{"location":"devices/Shelly-RGBW2/#ghost-switching","title":"Ghost switching","text":"<p>The inputs on Shelly devices appear to be notoriously susceptible to interference. Therefore ghost switching can happen if the wires are long (&gt;1m / 3ft). If you experience this issue, you might want to experiment with the switch debounce delay. It is set to 50 milliseconds by default.</p> <p>Use command <code>SwitchDebounce 100</code> to change it to a less sensitive value, which might work better. The value can be set up to 1000 milliseconds.</p> <p>Some issues were reported for this topic - search query</p>"},{"location":"devices/Shelly-RGBW2/#light-setup","title":"Light setup","text":"<p>To get the equivalent of what Shelly calls \"White mode\", run <code>SetOption68 1</code>.</p> <p>To switch back to what Shelly calls \"Color mode\" (the default), run <code>SetOption68 0</code>.</p> <p>See Lights for more details.</p>"},{"location":"devices/Shelly-RGBW2/#pcb-images","title":"PCB images","text":""},{"location":"devices/Slitinto-NX-SP202/","title":"Slitinto NX SP202","text":"<p>indirectly supported as configuration of Digoo NX-SP202 seems to work fine</p> <p>Device can switch 2 individual plugs. It has a builtin metering sensor which measures power consumption of the sum of both.</p> <p>My 2 devices I bought at Amazon have ROHS and CE signs and are officially valid for a maximum of 16A.</p> <p>You can buy it at Amazon</p> <p>According to the template configuration the device seems to be compatible with Digoo NX-SP202</p>"},{"location":"devices/Slitinto-NX-SP202/#configuration","title":"Configuration","text":"<p>Currently Slitinto is not present as separate module but DIGOO NX-SP202 seems to work. I had to adjust voltage and current with the following commands in the console * command VoltageSet 233 // measured with a multimeter * command CurrentSet 171 // known milliampere of my reference (here lightbulb of 40watts) This calibration is potentially individual for every device so I would suggest to calibrate it with a known power consuming device like a good old light bulb where the wattage is well known.</p>"},{"location":"devices/Slitinto-NX-SP202/#flashing","title":"Flashing","text":""},{"location":"devices/Slitinto-NX-SP202/#disassembly","title":"Disassembly","text":"<p>The device has no screws but disassembling as not needed as you can flash it OTA using tuya-convert. Nevertheless one user described a method to \"crack\" it using a rubber hammer and then glue it together again with no visible defects.</p>"},{"location":"devices/Slitinto-NX-SP202/#pinout","title":"Pinout","text":"<p>Not known.</p>"},{"location":"devices/Slitinto-NX-SP202/#procedure","title":"Procedure","text":"<p>Here is described how to crack the device but also how to flash it OTA.</p>"},{"location":"devices/Slitinto-NX-SP202/#miscellaneous","title":"Miscellaneous","text":"<p>I use metering capable devices to observe the power consumption and execute rule based behaviour on base of the consumption values.</p> <p>i.e.: if the power consumption is lower than 10W for 30min (checked every 60 seconds) then switch off.</p> <p>My script for this looks like this: * rule1 on Energy#Power&gt;10 do backlog ruletimer1 1800; ruletimer2 60; rule1 off; endon * rule2 on rules#timer=1 do power2 off endon * rule3 on rules#timer=2 do rule1 on endon * rule1 on * rule2 on * rule3 on</p>"},{"location":"devices/Smart-Light-Switch--SS118-01K1/","title":"Smart Light Switch  SS118 01K1","text":"<p>Generic Smart Light Switch from Amazon</p> <p>TYWE3S Model - In Canada ESP8266-S1 Model - August 2019 </p>"},{"location":"devices/Smart-Light-Switch--SS118-01K1/#product","title":"Product","text":""},{"location":"devices/Smart-Light-Switch--SS118-01K1/#pins","title":"Pins","text":""},{"location":"devices/Smart-Light-Switch--SS118-01K1/#module-configuration","title":"Module Configuration","text":"<p>New Version - August 2019</p>"},{"location":"devices/Smart-Light-Switch--SS118-01K1/#product_1","title":"Product","text":""},{"location":"devices/Smart-Light-Switch--SS118-01K1/#pins_1","title":"Pins","text":""},{"location":"devices/Smart-Light-Switch--SS118-01K1/#module-configuration_1","title":"Module Configuration","text":"GPIO TasmotaComponent DeviceFunction 0 LedLink (157) Red LED 2 Button1 (17) Button 12 LED1i (56) Green LED 15 Relay1 (21) Relay"},{"location":"devices/SmartHome/","title":"SmartHome","text":""},{"location":"devices/SmartHome/#connection","title":"Connection","text":"<p>Vcc - 3,3V TX - RX RX - TX GND - GND</p>"},{"location":"devices/SmartHome/#additional-information","title":"Additional Information","text":"<p>SmartHome is a cheap Sonoff Basic clone, but they still work with Tasmota.  More Infos can be found here: #1474.  </p>"},{"location":"devices/SmartHome/#device-images","title":"Device Images","text":""},{"location":"devices/SmartHome/#generic-module-config","title":"Generic Module Config","text":""},{"location":"devices/SmartHome/#esp-module","title":"ESP Module","text":"<p>The module being used in this device is the esp8266-s3</p>"},{"location":"devices/SmartPlug-with-POW/","title":"SmartPlug with POW","text":"<p>Smart Plugs from Amazon with same internal parts: - AISIRER - AVATAR</p>"},{"location":"devices/SmartPlug-with-POW/#device","title":"Device:","text":"<ul> <li>solid design with 16A Relays</li> <li>8 MB memory chip</li> <li>2 LEDs</li> <li>POW function (unfortunately did not test yet, need help)</li> <li>very small size, easy to disassemble</li> <li>no need to disassemble PCBs</li> <li>test mode works with 5 or 3.3 V (relays also works)</li> </ul> <p>Disassemble * take off the lead with 2 screws * put small cross screwdriver inside 220V plug connector, there are 2 screws  * free the antenna from plastic (no need to disconnect) * pull of PCB from the case</p> <p>Important build flags. * in Platformio for Tasmota flag change from 1MB to 8MB is needed, otherwise flash fails.   build_flags = ${esp82xx_defaults.build_flags} -Wl,-Teagle.flash.8m.ld * in Arduino IDE:   board selected - \"Node MCU 1.0\", standard</p> <p>Found how some of PINS are linked to main PCB and are easy to connect for flashing</p> <p>PCB</p>"},{"location":"devices/SmartPlug-with-POW/#flashing","title":"Flashing:","text":"<p>I've decided to use 5V - there is a painted pad on the PCB, clean it and attach 5V (see image) * Connect GPIO0 to GND * Connect RX, TX * Connect 5V and GND * Connect USB to PC, start flashing</p> <p>Tasmota WEB config (Generic) * GPIO0 - Led1i * GPIO2 - Led2i * GPIO5 - HLW8012 CF * GPIO12 - HLWBLSELi * GPIO13 - Button1 * GPIO14 - HLWBL CF1 * GPIO15- Relais1</p> <p>webconfig</p> <p>IMPORTANT: in order to have an accurate measurement of Voltage/Current/Power, you have to calibrate the internal meter with a well know load (like lamp or hair dryer) using this detailed procedure.</p>"},{"location":"devices/SmartPlug-with-POW/#update-from-my-side","title":"Update from my side","text":"<p>I managed to flash two Aisirer plugs using pre-compiled tasmota.binaries, since my plugs had only 1M flash. I used 3.3V connected directly to the ESP board. I had some trouble with WLAN connectivity which caused the relays to pulse, so I switched to 2.3.0 core, which seems default again since a few releases. This runs quite well. Configure as BlitzWolf SHP(45) Module and also the power measurement is working.</p>"},{"location":"devices/SmartPlug-with-POW/#update-from-nos86","title":"Update from nos86","text":"<p>I have updated the guide in order to interface Tasmota with the power meter inside smart plug (tested only on AISIRER) and added the link for the power monitoring calibration</p>"},{"location":"devices/Sonoff-4CH-DIY/","title":"Sonoff 4CH DIY","text":"<p>Sonoff 4CH DIY</p> <ul> <li>Itead Shop: https://www.itead.cc/psf-b85.html</li> <li>Itead Wiki: https://www.itead.cc/wiki/PSF-B85</li> </ul> <p>The Sonoff 4CH DIY is based on the ESP8285.</p> <p></p>"},{"location":"devices/Sonoff-4CH-DIY/#serial-connection","title":"Serial Connection","text":""},{"location":"devices/Sonoff-4CH-DIY/#sonoff-4ch-diy","title":"Sonoff 4CH DIY","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. The four serial pins (3V3, Rx, Tx, GND) can be seen in the picture.</p> <p></p> <p>Programming the Sonoff 4CH DIY is a breeze although the on-board-button is not connected to GPIO0. As with all ESP8266/ESP8285 modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to connect GPIO0 and GND during power up.</p> <p>Luckily both GND and GPIO0 (as KEY 1) are available on the header. A simple jumper between GND and KEY 1 while programming will do.</p> <p></p>"},{"location":"devices/Sonoff-4CH-DIY/#module-parameters","title":"Module parameters","text":""},{"location":"devices/Sonoff-4CH-DIY/#type","title":"Type","text":"<p>Module Type =&gt; Generic (18)</p> <p>Restart the module.</p>"},{"location":"devices/Sonoff-4CH-DIY/#gpio9-gpio10","title":"GPIO9 &amp; GPIO10","text":"<p>To use GPIO9 and GPIO10 of the ESP8285, open the console and enter =&gt; \"SetOption51 on\".</p> <p>Restart the module.</p>"},{"location":"devices/Sonoff-4CH-DIY/#assign-inputs-and-outputs","title":"Assign inputs and outputs","text":"<ul> <li>GPIO 1 =&gt; Button 1 (17)</li> <li>GPIO 9 =&gt; Button 2 (18)</li> <li>GPIO 10 =&gt; Button 3 (19)</li> <li>GPIO 14 =&gt; Button 4 (20)</li> <li>GPIO 12 =&gt; relay 1 (21)</li> <li>GPIO 5 =&gt; relay 2 (22)</li> <li>GPIO 4 =&gt; relay 3 (23)</li> <li>GPIO 15 =&gt; relay 4 (24)</li> <li>GPIO 13 =&gt; LED 1 (52)</li> </ul>"},{"location":"devices/Sonoff-4CH-Pro/","title":"Sonoff 4CH Pro","text":"<p>Compared to the 4CH the main differences/improvements of the 4CH Pro are:</p> <ul> <li>Relays are isolated from mains and can each switch their own circuit (mains or low voltage).</li> <li>With stock firmware special modes are supported (stand-alone schedules, inching, interlocking).</li> <li>RF receiver (optional key fob or Sonoff RF Bridge 433 required).</li> <li>Dual microcontroller, both an ESP8285 and an STM32.</li> </ul>"},{"location":"devices/Sonoff-4CH-Pro/#serial-flashing","title":"Serial Flashing","text":""},{"location":"devices/Sonoff-4CH-Pro/#sonoff-4ch-pro","title":"Sonoff 4CH Pro","text":"<p>The \"FW/IO0\" button (Switch 1) is not directly connected to GPIO0 of the ESP module. A different method has to be used to program this board.</p> <p>To program the ESP chip disconnect power from the board, connect a cable from any Ground (GND) pin to the GPIO0 pin on the ESP (be careful not to touch any of the other pins). This is the second pin to the right on the top row of pins (see picture). While holding the pin connected power on the board. The board does not respond to any button pressed when in programming mode and LED 1, 2 and 3 are on (might differ per board). </p> <p>Use the ESP programming header as described in the picture to upload the firmware and follow regular programming procedure.</p> <p></p>"},{"location":"devices/Sonoff-4CH-Pro/#sonoff-4ch-pro-r2","title":"Sonoff 4CH Pro R2","text":"<p>On the R2 module the GPIO0 pin is broken out to a small pad to the right of the ESP package:</p> <p></p> <p>If you have 4CH R2 v1.0 hardware, the GPIO0 is available as L1 switch - you don't need to solder additional cable to the PCB. Just push it during powering on for 3 seconds and release. </p>"},{"location":"devices/Sonoff-4CH-Pro/#sonoff-4ch-pro-r3","title":"Sonoff 4CH Pro R3","text":"<p>R3 module has no any pad, so hold button 1 during powering for 3 seconds and release in order to put a chip in flashing mode. It is also possible to so use connect the pin of R21 on the board to the ground instead. </p> <p>If you like to use RF433 module is possible to direct connect SYN470R output to SDA (GPIO2), and then configure RF Receiver </p>"},{"location":"devices/Sonoff-4CH-Pro/#solving-sonoff-4ch-pro-programing-issues","title":"Solving Sonoff 4CH Pro programing issues","text":"<p>If you have problems to program the 4CH Pro, you might find below tips useful: * Use the ESP program header and ensure that the right port is set in the Arduino IDE.  * TX/RX are printed correctly on the pro version =&gt; TX goes to RX PIN and RX to TX. * GPIO0 needs to be connected to ground the first 3 seconds during reboot (or longer)! If not you can not program it. * On 4CH Pro R2 try switch S6 to 0 before connecting power to enter flash mode. Reset to 1 (default) after finished flashing.</p> <ol> <li>If you use Windows7+, check in the device manager if the port is not added/removed all 2 seconds.</li> <li>If yes then your USB port does not deliver enough ampere.</li> <li>And/Or reduce upload speed to 57600 in Arduino IDE.</li> <li>Use an active USB HUB if your computer delivers not enough ampere</li> <li>External power source will stabilize the 4CH-pro and you can increase upload speed back to 115200.</li> <li>Using a Laptop instead of a Desktop Tower might also do the trick as Laptops have a battery to deliver more ampere.</li> <li>you can not flash it with tasmota-minimal.bin, you need to flash it with tasmota.bin ! Using esptool following commands might be usefull (you need to change com port)  to clear: esptool.exe -cp COM6 -cb 115200 -ce -v to program: esptool.exe -cp COM6 -bm dout -cf tasmota.bin -v</li> </ol>"},{"location":"devices/Sonoff-4CH-Pro/#4ch-pro-dipswitch-configuration","title":"4CH Pro DIPSwitch Configuration","text":"<p>Most special modes of the 4CH Pro are controlled by DIP switch panels on the board. Please refer to the back of the board or the Sonoff documentation for more details. For normal operation with Tasmota the following settings are recommended:</p> <ul> <li>S6: 1</li> <li>K5: all 1</li> <li>K6: all 0</li> </ul> <p>(0 and 1 are printed onto the board next to the switch names)</p> <p>Changing these switches for operations like inching and interlocking are also supported with Tasmota.</p>"},{"location":"devices/Sonoff-4CH-Pro/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> </ul> <p>WARNING The Sonoff CH4 PRO is subject to radio frequency disturbances with random activation of the buttons.  To eliminate interference due to the U7 (SYN470RU7 RF-433  module) you can cut the wire between U7 and U8 (MCU STM32f030c6). This line starts from pin 10 of U7, the part towards MCU can be soldered to ground (surrounding area). It is also possible to set the RF module (U7) in shutdown-mode by unsoldering or cutting pin 11.</p> <p></p>"},{"location":"devices/Sonoff-4CH/","title":"Sonoff 4CH","text":""},{"location":"devices/Sonoff-4CH/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>Sonoff 4CH, Sonoff 4CH R2 and Sonoff 4CH R3 use the same configuration but have slightly different boards. Check which version you own before proceeding.</p>"},{"location":"devices/Sonoff-4CH/#sonoff-4ch","title":"Sonoff 4CH","text":"<p>Attention: The printed labels on the PCB for RX and TX may be incorrectly swapped as can be seen on the image. Regardless of the labels, the pin next to VCC33 is RX.</p> <p> The Sonoff 4CH features four hardware buttons. Button marked FW/IO0 is connected to GPIO0 and can be used to bring the module into flash mode. </p>"},{"location":"devices/Sonoff-4CH/#sonoff-4ch-r2-sonoff-4ch-r3","title":"Sonoff 4CH R2 / Sonoff 4CH R3","text":"<p>Board is labelled Sonoff 4CH R2 V1.0 or 4CH R3 V1.1.</p> <p>The RX and TX pins are correctly labelled on these PCB revisions. The button labelled IO0 is connected to GPIO0 and can be used to bring the module into flash mode.</p>"},{"location":"devices/Sonoff-4CH/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> </ul>"},{"location":"devices/Sonoff-B1-and-B1-R2/","title":"Sonoff B1 and B1 R2","text":"<p>PAGE MOVED!</p>"},{"location":"devices/Sonoff-B1/","title":"Sonoff B1","text":"<p>Sonoff B1 R2 is the replacement for Sonoff B1 and can be programmed the same way as the B1. See here for more background information.</p>"},{"location":"devices/Sonoff-B1/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. First pop up the top part of the bulb with controlled force. The PCB as shown in the image will become visible.</p> <p></p> <p></p> <p>The four serial pins (3V3, RX, TX, GND) as well as the GPIO0 signal line are available as test points and clearly marked. Solder wires to those or use pogo pins as you prefer.</p> <p>As with all modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to connect GPIO0 and GND during power up. An additional GND pad is available in the middle of the PCB.</p> <p>NOTE: If experiencing trouble getting the B1 R2 into flash mode, try pulling GPIO to GND during power up and holding it for 20 to 25 seconds before release.</p>"},{"location":"devices/Sonoff-B1/#led-hex10-color-codes","title":"LED HEX10 Color Codes","text":"<p>The Sonoff B1 uses a TEN charter HEX code for all colors.  Colors tested with firmware 5.9.1 20171107: * 00000000A0 = WARM * 000000A000 = COOL * 0000A00000 = BLUE * FF14500000 = PURPLE * 551A8B0000 = DARK PURPLE * A300000000 = RED * 00ff000000 = GREEN</p>"},{"location":"devices/Sonoff-B1/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page: http://sonoff.itead.cc/en/products/residential/sonoff-b1</li> <li>Itead Shop: https://www.itead.cc/sonoff-b1.html</li> <li>Itead Wiki: (not available)</li> </ul>"},{"location":"devices/Sonoff-Basic-and-BME280/","title":"Sonoff Basic and BME280","text":"<p>This feature is included only in tasmota-sensors.bin</p> <p>\"BME280 sensor, an environmental sensor with temperature, barometric pressure and humidity\", see Datasheet.</p> <p>\"tasmota-sensors.bin is needed for this to work. tasmota.bin and tasmota-lite.bin do not include the necessary driver.\"</p>"},{"location":"devices/Sonoff-Basic-and-BME280/#connect-bme280-to-sonoff-basic-based-on-the-gpio-locations","title":"Connect BME280 to Sonoff-Basic based on the GPIO locations","text":"<ul> <li>BME280-3.3V -&gt; Sonoff-3.3V</li> <li>BME280-GND -&gt; Sonoff-GND</li> <li>BME280-SCL -&gt; Sonoff-TX</li> <li>BME280-SDA -&gt; Sonoff-RX</li> </ul> <p>NOTE:  YOU NEED TO DISABLE SERIAL LOG COMPLETELY TO ALLOW SENSORS ON TX/RX PINS</p> <p>On the Tasmota web interface go to <code>Configuration-&gt;Configure Module</code> and set</p> <p></p>"},{"location":"devices/Sonoff-Basic/","title":"Sonoff Basic","text":"<p>Sonoff Basic - the one that started it all!</p>"},{"location":"devices/Sonoff-Basic/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p></p> <p>You need to access the serial interface. The four serial pins (3V3, Rx, Tx, GND) are available in the middle of the PCB, right next to the on-board button. Newer versions of the Sonoff Basic device provide five pins below the button, ignore the pin furthest away from the Button (GPIO14 or I02) if available. The square pin right next to the button is the 3.3V line.</p> <p>For flashing the Sonoff Basic, hold the button while connecting the 3.3V power. The LED remains off until the flashing process is done and the board is rebooted.</p> <p>If your switch is powering up but is showing a solid-blink-reset pattern see this FAQ entry for advice.</p> <ul> <li>GPIO00 - BUTTON</li> <li>GPIO12 - RELAY</li> <li> <p>GPIO13 - LED1</p> </li> <li> <p>GPIO03 - RX PIN</p> </li> <li>GPIO01 - TX PIN</li> </ul>"},{"location":"devices/Sonoff-Basic/#sonoff-basic-r3","title":"Sonoff Basic R3","text":"<p>This is the board layout for the third design iteration of the Sonoff Basic. </p> <p>The Sonoff Basic R3 uses the ESP8285 chip. With this version, the mains power reverts to solder rails directly on the PCB. It also moves the Wi-Fi module to a separate PCB mounted on the main PCB. It makes access to the underside of the serial interface contacts quite difficult.</p> <p>This version of the device supports the new Itead DIY architecture which allows OTA firmware upload. The device was reviewed by DigiblurDIY in this video.</p> <p>The serial interface pins are broken out on the PCB making flashing using a serial adapter as well. Since the underside of the contacts is not easily reachable, use a solderless solution (i.e., friction) to maintain contact with the pins to flash the device.</p>"},{"location":"devices/Sonoff-Basic/#sonoff-basic-r2","title":"Sonoff Basic R2","text":"<p>Around November 2018, Itead changed the layout of the Sonoff Basic (issue #4515). The new board is labeled as Sonoff RF R2 POWER V1.0. It is easily discerned from previous revisions since it uses wires instead of thick solder traces for mains power.</p> <p>The new version of the Sonoff Basic smart switch uses an ESP8285 SoC with the 1MB flash integrated into the same SoC chip.</p> <p>GPIO14 is no longer broken out to a contact on the PCB. Instead, GPIO02 (no pullup) is broken out. It is labeled as <code>IO2</code> on the board. To use GPIO02, take care that it is not being pulled low when the device is booting. Otherwise, the device will not boot into its regular operational mode. Alternatively, you can use use GPIO03 (Rx) which does not have any boot function restrictions. However, both of these GPIO are pulled high momentarily after boot. This means that any connected device may \"blink\" when the Sonoff is powering up.</p> <p>Unlike GPIO03, the GPIO02 PCB contact is not prepared for a pin. You will need to solder your cable directly on the board. Be careful. Too high a temperature or long heating can damage the contact and its connectivity. You should also make sure that there is no tension on the cable. Affix the cable with a cable tie and perhaps some hot glue.</p> <p>GPIO02 as a user configurable input is implemented in the Sonoff Basic module (introduced in 6.3.0.15). If you use GPIO03, you must use a device template (rather than selecting the Sonoff Basic module), and also disable serial logging (<code>SerialLog 0</code>).</p> <p> </p> <p>You can remove the thick wires from the PCB to use the screw connection on the output side for low voltage. Then add a screw terminal next to the relay for the LINE OUT. This keeps all high voltage on one side of the board </p>"},{"location":"devices/Sonoff-Basic/#sonoff-basic-r1","title":"Sonoff Basic R1","text":"<p>This is the board layout for the first board version of the Sonoff Basic.</p> <p></p> <p>(Image re-used from https://www.instructables.com/id/Use-Homie-Firmware-to-Drive-Sonoff-Switch-Module-E/ Thanks @amayii0)</p> <p>Usable GPIO: - GPIO14 is broken out on the PCB adjacent to the GND pin.  - GPIO13 - You must remove the bi-colour LED - GPIO04 - You must solder wire to pin on ESP chip </p>"},{"location":"devices/Sonoff-Basic/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> </ul>"},{"location":"devices/Sonoff-Dual-R2/","title":"Sonoff Dual R2","text":"<p>Sonoff Dual R2 is the replacement for Sonoff Dual. Compared to the Dual the main differences/improvements for R2 are: * As the second microcontroller has been removed both relays are now controlled directly by an ESP8285 * The button is now directly connected to the ESP8285 * The header connector is now supported in Tasmota </p>"},{"location":"devices/Sonoff-Dual-R2/#serial-flashing-sonoff-dual-r2","title":"Serial Flashing (Sonoff Dual R2)","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. VCC, RX, TX and GND are available at the bottom left end of the PCB in the image below. </p> <p>Programming the Sonoff Dual R2 is a breeze although the on-board-button is not connected to GPIO0. As with all ESP8266/ESP8285 modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to connect GPIO0 and GND during power up.</p> <p>Luckily both GND and GPIO0 (as BUTTON 0) are available on the second header. A simple jumper between GND and BUTTON 0  while powering on will do.</p> <p>For a video on how to flash the Sonoff Dual R2 with Tasmota, take a look here.</p>"},{"location":"devices/Sonoff-Dual-R2/#use-external-switches","title":"Use external switches","text":"<p>The relays can be controlled by external push buttons or switches connected to the header at the designated positions. BUTTON 0 (on GPIO0) connected to GND controls Relay1 and BUTTON 1 (on GPIO9) connected to GND controls Relay2.</p> <p>See the image on the right how to configure this functionality in Tasmota as Switch1 and Switch2.</p> <p>NOTE Make sure not to use a switch that keeps the connection between GND and BUTTON 0 active while power is re-applied as the device will start in programming mode.</p> <p>Note 2: GPIO9 and 10 can be safely used with an external switch (even rebooting with the contacts closed), and configured as such using a template. GPIO9 is available in the header, and GPIO10 is the board's button (you only need to solder a wire to the GPIO10 side of the button, no need to remove it).</p>"},{"location":"devices/Sonoff-Dual-R2/#sonoff-dual-not-r2","title":"Sonoff Dual (not R2)","text":""},{"location":"devices/Sonoff-Dual-R2/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. The four serial pins (3V3, Rx, Tx, GND) are available at the short end of the PCB and can be seen on the left side of the first image and are labeled in red on the second image. For the v2.0 version of the board you need to cross-over the serial interface, see troubleshooting.</p> <p> </p> <p>Programming the Sonoff Dual is more difficult because the on-board-button is not connected to GPIO0. As with all ESP8266 modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to connect GPIO0 and GND during power up.</p> <p>GND can be found on all three headers. GPIO0 can be accessed two ways: 1. Unscrew the Sonoff Dual from the housing and access the underside of the PCB You can find GPIO0 on one side of a resistor as shown in the second image. 2. GPIO0 can be found on the small inter layer via pointed at in the first image. Attention: If the via is covered by silk screen (green) you need to expose the underlying conductive (copper) by careful scratching it off.</p>"},{"location":"devices/Sonoff-Dual-R2/#restricted-button-functionality","title":"Restricted Button Functionality","text":"<p>Please be aware, that the button on the Sonoff Dual will initially not have any functionality!</p> <p>Other than on most Sonoff module the button is not connected to the normal button pin (GPIO0). After freshly flashing Tasmota (with the default module setting \"Sonoff Basic\"), the button will not act as described in the Buttons and Switches article. You will not be able to switch power or activate the special WiFi modes.</p> <p>You will need to configure wifi credentials connecting directly to the wifi AP your Dual will broadcast or configure the module firmware config beforehand via <code>user_config_override.h</code>.</p> <p>After configuring the device as a \"Sonoff Dual\", the button will regain normal functionality.</p>"},{"location":"devices/Sonoff-Dual-R2/#gpio-locations","title":"GPIO Locations","text":"<p>GPIO4 =&gt; red, GPIO14 =&gt; orange </p>"},{"location":"devices/Sonoff-Dual-R2/#solving-intermittent-relay-switch-errors","title":"Solving intermittent relay switch errors","text":"<p>Where most Sonoff's use GPIO to control one or more relays the Sonoff Dual and 4 Channel Inching Relay Assy do use the standard SERIAL interface to control the relays.</p> <p>Commands are send from the ESP8266 via a 19200 baud serial connection to a dedicated chip that controls the relays.</p> <p>It is therefore important to disable any serial communication to and from the device once you have debugged any anomalies.</p> <p>To assist easy installation serial logging is enabled by default in <code>user_config_override.h</code> for all Sonoffs. Once in production it's wise to turn it off for all Sonoffs. For the Dual it is almost mandatory to turn it off.</p> <p>Execute command <code>seriallog 0</code> once to turn all communication on the serial port off.</p> <p>If within 10 minutes no input is received serial communication is turned off too.</p> <p>Another reason for intermittent switching errors can be Power Saving. Make sure it is disabled by executing the command <code>sleep 0</code>.</p>"},{"location":"devices/Sonoff-Dual-R2/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page: http://sonoff.itead.cc/en/products/sonoff/sonoff-dual</li> <li>Itead Shop: https://www.itead.cc/sonoff-dual.html</li> <li>Itead Wiki: https://www.itead.cc/wiki/Sonoff_Dual</li> </ul>"},{"location":"devices/Sonoff-Dual/","title":"Sonoff Dual","text":"<p>Sonoff Dual has been obsoleted by Sonoff Dual R2. Before configuring your device check which revision you have since there are significant differences in how they operate.</p>"},{"location":"devices/Sonoff-Dual/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. The four serial pins (3V3, Rx, Tx, GND) are available at the short end of the PCB and can be seen on the left side of the first image and are labeled in red on the second image.</p> <p> Alternative GPIO locations </p> <p>Programming the Sonoff Dual is more difficult because the on-board-button is not connected to GPIO0. As with all ESP8266 modules pulling GPIO0 to GND is needed to put the chip in programming mode. You need to connect GPIO0 and GND during power up.</p> <p>GND can be found on all three headers. GPIO0 can be accessed in two ways: 1. Unscrew the Sonoff Dual from the housing and access the underside of the PCB. You can find GPIO0 on one side of a resistor as shown in the second image. 2. GPIO0 can be found on the small inter layer via pointed at in the first image. Attention: If the via is covered by silk screen (green) you need to expose the underlying conductive (copper) by carefully scratching it off.</p>"},{"location":"devices/Sonoff-Dual/#restricted-button-functionality","title":"Restricted Button Functionality","text":"<p>Please be aware, that the button on the Sonoff Dual will initially not have any functionality!</p> <p>The button is not connected to the normal button pin (GPIO0). After freshly flashing Tasmota (with the default module setting \"Sonoff Basic\"), the button will not act as described in the Buttons and Switches article. You will not be able to switch power or activate the special WiFi modes.</p> <p>After configuring the device as \"Sonoff Dual (5)\", the button will regain normal functionality.</p>"},{"location":"devices/Sonoff-Dual/#gpio-locations","title":"GPIO Locations","text":"<p>GPIO4 = red, GPIO14 = orange </p>"},{"location":"devices/Sonoff-Dual/#solving-intermittent-relay-switch-errors","title":"Solving intermittent relay switch errors","text":"<p>Where most Sonoff's use GPIO to control one or more relays the Sonoff Dual uses the serial interface to control the relays.</p> <p>Commands are send from the ESP8266 via a 19200 baud serial connection to a dedicated chip that controls the relays.</p> <p>It is therefore important to disable any serial communication to and from the device once you have debugged any anomalies.</p> <p>To assist easy installation serial logging is enabled by default in Tasmota. For the Dual it is mandatory to turn it off withe <code>SerialLog 0</code> command.</p> <p>Another reason for intermittent switching errors can be Power Saving. Make sure it is disabled by executing the command <code>sleep 0</code>.</p>"},{"location":"devices/Sonoff-Dual/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page: http://sonoff.itead.cc/en/products/sonoff/sonoff-dual</li> <li>Itead Shop: https://www.itead.cc/sonoff-dual.html</li> <li>Itead Wiki: https://www.itead.cc/wiki/Sonoff_Dual</li> </ul>"},{"location":"devices/Sonoff-Mini/","title":"Sonoff Mini","text":"<p>The Sonoff Mini is, as the name implies, a very small device, designed to be hidden where there's only supposed to be cables. Since it's not supposed to be visible, it's also designed to easily attach an external button.</p> <p>Tasmota can be flashed on this device via OTA using the Sonoff DIY feature.</p> <p>Several free GPIO are available. The OTA jumper pin is the most accessible and very easy to use on a pin header.</p> <p></p> GPIO Description 0 Button 1 TX 2 Available 3 RX 4 S2 (external switch input) 12 Relay and red LED 13 Blue LED 16 OTA jumper pin GND S1 (external switch input)"},{"location":"devices/Sonoff-PSA/","title":"Sonoff PSA","text":"<p>itead page</p> <p></p> <p> </p>"},{"location":"devices/Sonoff-Pow-R2/","title":"Sonoff Pow R2","text":""},{"location":"devices/Sonoff-Pow-R2/#special-attention","title":"\u26a0\ufe0f\ufe0fSpecial Attention   \u26a0\ufe0f\ufe0f","text":"<p>Do not connect AC power and the serial connection at the same time  The GND connection of the Pow is connected to the live AC wire. Connecting serial with your PC will fry your PC and will electrocute you. </p> <p>DO NOT CONNECT ANYTHING TO ANY GPIOs OF THESE DEVICES!!! (No sensors, no switches, nothing)  The GPIOs on the Pow are connected to AC power! Only use a POW R2 as designed. </p> <p>The AC connection between Pow and Pow R2 is different, please check exactly which version you have. - Pow R2: Lo-E-E-Li-N-N = LineOut-EarthOut-EarthIn-LineIn-NeutralOut-NeutralIn - Pow: Lo-E-E-N-N-Li = LineOut-EarthOut-EarthIn-NeutralOut-NeutralIn-LineIn</p>"},{"location":"devices/Sonoff-Pow-R2/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>3V3, RX, TX and GND pins are available at the rear/short end of the PCB.</p> <p></p> <p>To enter flash mode, press down on the button while powering the device.</p> <p>Note - After the module type is changed to \"Sonoff Pow R2\", the serial port is no longer available for entering configuration commands because the serial port is used to communicate to the power measurement chip.  Make sure you have set up your network connection before doing this.</p>"},{"location":"devices/Sonoff-Pow-R2/#serial-logging","title":"Serial logging","text":"<p>Serial logging is disabled by the Tasmota code for this module. Serial communication is used by the device to transfer the data from the energy monitoring chip to the ESP chip. Do not enable serial logging (SerialLog 0) on this device. It can cause the device software to crash. Be sure to leave it disabled.</p>"},{"location":"devices/Sonoff-Pow-R2/#video-tutorial-by-alsolh","title":"Video tutorial by alsolh","text":""},{"location":"devices/Sonoff-Pow-R2/#power-monitoring-calibration","title":"Power Monitoring Calibration","text":"<p>Sonoff Pow R2 might need calibration as correct measurements are influenced by hardware and timing differences. See Power Monitoring Calibration</p>"},{"location":"devices/Sonoff-Pow-R2/#telemetry","title":"Telemetry","text":"<p>The Sonoff Pow R2 can provide Energy, Power, Voltage and Current information in different ways.</p> <p>The preferred way is using the periodic telemetry data. Default setting <code>TelePeriod 300</code> will send telemetry data every 5 minutes.</p> <p>If the setting <code>PowerDelta</code> (new since version 5.12.0e) is not 0 (default 80%), telemetry will be sent on power change too.</p> <pre><code>tele/pow1/SENSOR = {\"Time\":\"2018-02-15T17:37:10\",\"ENERGY\":{\"TotalStartTime\":\"2018-11-14T18:39:40\",\"Total\":6.294,\"Yesterday\":5.340,\"Today\":0.954,\"Period\":217,\"Power\":2635,\"ApparentPower\":2650,\"ReactivePower\":282,\"Factor\":0.99,\"Voltage\":227,\"Current\":11.661}}\n</code></pre> <p>To request information you can use command <code>Status 8</code>. <pre><code>stat/pow1/STATUS8 = {\"StatusSNS\":{\"Time\":\"2018-11-15T08:54:18\",\"ENERGY\":{\"TotalStartTime\":\"2018-11-14T18:39:40\",\"Total\":6.404,\"Yesterday\":5.340,\"Today\":1.064,\"Power\":2629,\"ApparentPower\":2645,\"ReactivePower\":288,\"Factor\":0.99,\"Voltage\":226,\"Current\":11.677}}}\n</code></pre></p> <p>The presented information has the following meaning: <pre><code>Message        | Unit | Description\n---------------|------|-----------------------------------------------------\nTotalStartTime | Date | DateTime of calculation for Total\nTotal          | kWh  | Total Energy usage including Today\nYesterday      | kWh  | Total Energy usage between 00:00 and 24:00 yesterday\nToday          | kWh  | Total Energy usage today from 00:00 until now\nPeriod         | Wh   | Energy usage between previous message and now\nPower          | W    | Current effective power load\nApparentPower  | W    | Power load on the cable = sqrt(Power^2 + \n               |      | ReactivePower^2)\nReactivePower  | W    | Reactive load\nFactor         |      | The ratio of the real power flowing to the load to\n               |      | the apparent power in the circuit \nVoltage        | V    | Current line voltage\nCurrent        | A    | Current line current\n</code></pre></p>"},{"location":"devices/Sonoff-Pow-R2/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop (R2)</li> <li>Itead Wiki</li> </ul>"},{"location":"devices/Sonoff-Pow/","title":"Sonoff Pow","text":"<p>Sonoff Pow has been obsoleted with Sonoff Pow R2. Before configuring your device check which revision you have.</p>"},{"location":"devices/Sonoff-Pow/#special-attention","title":"\u26a0\ufe0f\ufe0fSpecial Attention   \u26a0\ufe0f\ufe0f","text":"<p>Do not connect AC power and the serial connection at the same time  The GND connection of the Pow is connected to the live AC wire. Connecting serial with your PC will fry your PC and will electrocute you. </p> <p>DO NOT CONNECT ANYTHING TO THESE DEVICES!!! (No sensors, no switches, nothing)  The GPIOs on the Pow are connected to AC power! Only use a POW as designed. </p> <p>The AC connection between Pow and Pow R2 is different, please check exactly which version you have. - Pow R2: Lo-E-E-Li-N-N = LineOut-EarthOut-EarthIn-LineIn-NeutralOut-NeutralIn - Pow: Lo-E-E-N-N-Li = LineOut-EarthOut-EarthIn-NeutralOut-NeutralIn-LineIn</p>"},{"location":"devices/Sonoff-Pow/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>3V3, RX, TX and GND pins are available at the rear end of the PCB.</p> <p></p> <p>To enter flash mode, press down on the button while powering the device.</p>"},{"location":"devices/Sonoff-Pow/#power-monitoring-calibration","title":"Power Monitoring Calibration","text":"<p>Sonoff Pow might need calibration as correct measurements are influenced by hardware and timing differences. See Power Monitoring Calibration</p>"},{"location":"devices/Sonoff-Pow/#telemetry","title":"Telemetry","text":"<p>The Sonoff Pow can provide Energy, Power, Voltage and Current information in different ways.</p> <p>The preferred way is using the periodic telemetry data. Default setting <code>TelePeriod 300</code> will send telemetry data every 5 minutes.</p> <p>If the setting <code>PowerDelta</code> (new since version 5.12.0e) is not 0 (default 80%), telemetry will be sent on power change too.</p> <pre><code>tele/pow1/SENSOR = {\"Time\":\"2018-02-15T17:37:10\",\"ENERGY\":{\"TotalStartTime\":\"2018-11-14T18:39:40\",\"Total\":6.294,\"Yesterday\":5.340,\"Today\":0.954,\"Period\":217,\"Power\":2635,\"ApparentPower\":2650,\"ReactivePower\":282,\"Factor\":0.99,\"Voltage\":227,\"Current\":11.661}}\n</code></pre> <p>To request information you can use command <code>Status 8</code>. <pre><code>stat/pow1/STATUS8 = {\"StatusSNS\":{\"Time\":\"2018-11-15T08:54:18\",\"ENERGY\":{\"TotalStartTime\":\"2018-11-14T18:39:40\",\"Total\":6.404,\"Yesterday\":5.340,\"Today\":1.064,\"Power\":2629,\"ApparentPower\":2645,\"ReactivePower\":288,\"Factor\":0.99,\"Voltage\":226,\"Current\":11.677}}}\n</code></pre></p> <p>The presented information has the following meaning: <pre><code>Message        | Unit | Description\n---------------|------|-----------------------------------------------------\nTotalStartTime | Date | DateTime of calculation for Total\nTotal          | kWh  | Total Energy usage including Today\nYesterday      | kWh  | Total Energy usage between 00:00 and 24:00 yesterday\nToday          | kWh  | Total Energy usage today from 00:00 until now\nPeriod         | Wh   | Energy usage between previous message and now\nPower          | W    | Current effective power load\nApparentPower  | W    | Power load on the cable = sqrt(Power^2 + \n               |      | ReactivePower^2)\nReactivePower  | W    | Reactive load\nFactor         |      | The ratio of the real power flowing to the load to\n               |      | the apparent power in the circuit \nVoltage        | V    | Current line voltage\nCurrent        | A    | Current line current\n</code></pre></p>"},{"location":"devices/Sonoff-Pow/#self-protection-for-sonoff-pow","title":"Self Protection for Sonoff Pow","text":"<p>ITEAD published a recall notice for the Sonoff Pow on March 1st 2017. Some units produced in december 2016 and january 2017 are not well suited for 16A. If you have one of these units you can decide to use them anyway by limiting the maximum current in software. It is, in fact,  possible to set a Maximum Power Threshold for the Sonoff Pow.</p> <p>If the power measured by the device exceeds the threshold set by the command <code>MaxPower</code> for a number of seconds set by the command <code>MaxPowerHold</code> the device will remain switched off for <code>MaxPowerWindow</code> seconds (to let it cool down, for example).</p> <p>For all details see issue #218</p>"},{"location":"devices/Sonoff-Pow/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> </ul>"},{"location":"devices/Sonoff-RF-Bridge-433/","title":"Sonoff RF Bridge 433","text":"<p>The Sonoff RF Bridge has two separate chips to handle the Wi-Fi (ESP8285) and RF (EFM8BB1) communications respectively. It is used to send and receive codes with 433.9MHz frequency RF devices. Codes received from RF devices such as remote controls is passed to the onboard ESP8285 via the serial interface. The code data is relayed via MQTT. Similarly, the Bridge receives commands over Wi-Fi and sends the encoded data to the RF chip to control an RF device. Thus, the Sonoff RF Bridge \"bridges\" communications between RF and Wi-Fi.</p> <p>Attention \u26a0\ufe0f\ufe0f\u26a0\ufe0f\ufe0f\u26a0\ufe0f\ufe0f There are now 3 versions of the <code>Sonoff RF Bridge 433</code>: the <code>R1</code> , <code>R2 V1.0</code> and <code>R2 V2.2</code>.</p> <p>Users reported limited success flashing Tasmota to <code>R2 V2.2</code>. RF firmware OB38S003 is available as tested with simple protocol receiving, but is incomplete and requires flasher tool.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#flash-tasmota","title":"Flash Tasmota","text":"<p>Please read the Hardware Preparation article for general flashing instructions.</p> <p>Access the serial interface available on the 5-pin header next to the switch as can be seen in the image.</p> <p></p> <p>To flash the ESP8285, first move the switch position towards the 5-pin header.</p> <p>Connect the serial-to-USB adapter and press the button on the edge while powering the device in order to put the ESP8285 into programming mode in order to upload the Tasmota firmware.</p> <p>After flashing the ESP8285, be sure to move the switch position away from the 5-pin header to restore the connection to the RF microcontroller.</p> <p>Configure the device as usual and select module <code>Sonoff Bridge (25)</code>. During normal operation the serial interface is used at 19200 baud to communicate with the RF microcontroller. Therefore serial logging (<code>SerialLog 0</code>) must be disabled.</p> <p>IMPORTANT: In the Module configuration GPIO4 and GPIO5 must be left as <code>00 None</code> On R2 versions of the Sonoff RF Bridge, a hardware modification is required in order to use these GPIOs.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#video-tutorial-by-alsolh","title":"Video tutorial by alsolh","text":""},{"location":"devices/Sonoff-RF-Bridge-433/#rf-firmware","title":"RF Firmware","text":"<p>The RF chip has its own firmware. The device is shipped with Itead firmware which supports a limited set of RF devices limited to mostly just Sonoff devices (a single 24-bit RF protocol). Some later versions of the factory firmware will only relay received RF data once the transmitting device stops. This is fine for remote controls or devices such as door sensors. But for devices such as smoke detectors, this behavior is not acceptable.</p> <p>Custom firmware is available for the RF chip which is commonly referred to as 'Portisch'. By updating the firmware on the RF chip, new types of devices and new features become usable. It also relays the RF data when the data is received rather than waiting until the transmitter stops.</p> <p>Tasmota supports the original Sonoff RF firmware and the Portisch firmware.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#rf-firmware-upgrade","title":"RF Firmware Upgrade","text":"<p>The RF upgrade requires wiring the bridge and then flashing the firmware via the Tasmota web UI.</p> <p>Attention \u26a0\ufe0f\ufe0f\u26a0\ufe0f\ufe0f\u26a0\ufe0f\ufe0f There are now 3 versions of the <code>Sonoff RF Bridge 433</code>: the <code>R1</code> , <code>R2 V1.0</code> and <code>R2 V2.2</code>.</p> <p>R1 </p> <p>R2 V1.0 RF firmware flashing: </p> <p>R2 V2.2 Read about it in Discussions : New Sonoff RF Bridge Board Layout (R2 v2.2) </p>"},{"location":"devices/Sonoff-RF-Bridge-433/#flashing-rf-firmware","title":"Flashing RF Firmware","text":"<ol> <li>Make sure you have previously flashed a Tasmota binary built with <code>RF_FLASH</code>. Refer to the builds table for pre-compiled binaries which include this feature. Otherwise the \"Magic byte is not 0xE9\" error will occur.</li> <li>Set the module type to <code>Sonoff Bridge (25)</code></li> <li>Connect two wires (this will be different depending on the <code>Sonoff RF Bridge 433</code> hardware version):<ul> <li>For <code>R1</code>: Connect <code>GPIO4 to C2Ck</code> and <code>GPIO5 to C2D</code>.</li> <li>For <code>R2</code>: Connect <code>GPIO4 to C2D</code> and <code>GPIO5 to C2Ck</code>.    ( The text on the R2 PCB silkscreen is switched. Therefore this is the same wiring as on the R1)</li> </ul> </li> <li>Switch the ON/OFF switch on the board to 'OFF' (to disconnect RF from ESP).</li> <li>Power up the bridge via the 3.3V &amp; GND pins. (See below if you need to power the device through the USB power port)</li> <li> <p>Obtain the Portisch firmware file:     (Clicking on the file link on the GitHub web site does not work since this will download the GitHub preview/content of the file rather than the raw file contents)</p> <ul> <li>Download the entire contents of the Tasmota GitHub project project via the green <code>Clone or Download</code> button to ensure that the firmware hex files are downloaded properly. The firmware files are located in the <code>./tools/fw_SonoffRfBridge_efm8bb1/</code> folder. Select the newest available hex file. Otherwise you may get <code>error \"Magic byte is not 0xE9\"</code>.</li> <li>As an alternative use wget/curl to download the raw file (https://github.com/arendst/Tasmota/tree/master/tools/fw_SonoffRfBridge_efm8bb1) directly. Select the newest available hex file. Otherwise you may get <code>error \"Magic byte is not 0xE9\"</code>. PowerShell example:</li> </ul> <pre><code>wget https://github.com/arendst/Tasmota/raw/master/tools/fw_SonoffRfBridge_efm8bb1/RF-Bridge-EFM8BB1-XXXXXXXX.hex -OutFile .\\RF-Bridge-EFM8BB1-XXXXXXXX.hex\n</code></pre> </li> <li> <p>Go to the Web UI Firmware Upgrade &gt; Upgrade by File Upload (introduced in v6.0.0a)</p> </li> <li>In the file selection dialog, navigate to the folder on your computer where you saved the hex file from step 6.</li> <li>Click Start Upgrade. The flashing should complete within 60 seconds. Device will restart after upgrade completes.</li> <li>Disconnect wiring and put the ON/OFF switch on the board back to 'ON' to enable the RF again.</li> </ol>"},{"location":"devices/Sonoff-RF-Bridge-433/#hardware-preparation-for-usb-powered-flashing","title":"Hardware Preparation for USB powered flashing","text":"<p>This section applies only to the R2 revision of the Sonoff RF Bridge</p> <p></p> <p>Apply this modification only if you intend to use USB for powering the device during flash process or if you want to use GPIO4 or GPIO5 for other purposes with the RF Bridge.</p> <p>The R2 revision boards connect the GPIO4 and GPIO5 pins to the USB data lines of the power connector. Compliant USB chargers/power supplies are expected to short the two pins together, which is a problem. These lines are not used by the original firmware, nor by Tasmota. The traces toward the USB power connector need to be cut to avoid interference by the USB wiring. Removing these connections does not interfere with the normal Bridge functionality.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#operation","title":"Operation","text":"<p>The Sonoff RF Bridge is able to learn up to 16 different fixed code remote control commands as provided by PT2260, PT2262, PT2264 and EV1527 transmitters. It was not able to recognize the latest Klik Aan Klik Uit (KaKu) remote control signals but some people managed to use the fixed code KaKu devices like PAR-1000 receiver and PAT-103 transmitter.</p> <p>Tasmota provides default remote control commands to all 16 keys so you can start using the bridge with a Sonoff 4Ch Pro or Sonoff RF device without having the bridge have to learn remote control commands.</p> <p>See RF Bridge commands.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#portisch-firmware-specific-usage","title":"Portisch Firmware Specific Usage","text":"<p>These sections only apply to the custom Portisch firmware.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#learning-commands-with-portisch-firmware","title":"Learning Commands with Portisch Firmware","text":"<p>In order to learn Buttons from your remote, go to the Console of your RF Bridge. There, enter <code>rfraw 177</code> and push the buttons on your remote. Repeat each button 2-3 times, as the signal may be different for each try. This will give you a so called B1 code of your button, which needs to be converted to a B0 code (see below).</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#sending-commands-with-portisch-firmware","title":"Sending Commands with Portisch Firmware","text":"<p>The commands learned with Portisch Firmware cannot be stored in device memory.  Instead, they must be sent as a command.</p> <p>Example using MQTT: <pre><code>cmnd/sonoffRFBridge/Backlog RfRaw AAB0210314016703F924180101011001100110010101100110011001010110010101100255; RfRaw 0\n</code></pre> Refer to issue #3973 for further information.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#b1-to-b0-conversion-tools","title":"B1 to B0 Conversion Tools","text":"<p>After learning how bitbucket works from  the Portisch wiki, use one of these tools to help convert received <code>B1</code> sniffing messages to the right 'B0' format to send in the 'RfRaw' command.</p> <ul> <li>Online   Process:</li> <li>Enter <code>rfraw 177</code> in the Sonoff Bridge web UI Console</li> <li>Press a function (each Button 2-3 times) on your remote control</li> <li>Copy the JSON payload output from the Console and paste it in the online converter and click <code>Convert</code>      e.g., <code>{\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37DC 010101010101101001010101101010100102 55\"}}</code></li> <li> <p>The utility will return the resulting B0 string to use in setting up commands in the RF Bridge      e.g., <code>AA B0 1A 03 08 07F9 0124 37DC 010101010101101001010101101010100102 55</code></p> </li> <li> <p>CLI (rename file from <code>BitBucketConverter.txt</code> to <code>BitBucketConverter.py</code>)   In the command line give the <code>B1</code> message string and the retries value (in decimal):   e.g., <code>BitBucketConverter.py \"AA B1 04 07EB 0157 00FD 3EBC 010101010101101001010101101010100103 55\" 20</code></p> </li> </ul> <p>Command Line : <code>\"AA B1 04 07EB 0157 00FD 3EBC 010101010101101001010101101010100103 55\" 20</code>   Result: <code>RfRaw AAB01C041407EB015700FD3EBC01010101010110100101010110101010010355</code></p> <ul> <li>Batch   Process:</li> <li>Enter <code>rfraw 177</code> in the Sonoff Bridge web UI Console</li> <li>Press each function (each Button 2-3 times) on your remote control</li> <li>Save everything from the console that happened after <code>rfraw 177</code> to a text file</li> <li>Run bitbuckedconverter.py -f console.txt<ul> <li>Each line of console.txt will be converted into a B0 string and displayed</li> </ul> </li> <li>Run bitbuckedconverter.py -f console.txt -e<ul> <li>Each line of console.txt will be converted into a B0 string and sent to the Bridge</li> </ul> </li> </ul> <p>Then:   * If the device reacted as expected, you can enter a name of the button (e.g., \"light\")   * Else enter nothing to try the next   * Repeat this until all lines have been tried   * The tool will create a list of buttons and their B0 codes that have worked (i.e. for which you have specified a name)   * In the end you can test all of these codes  </p> <ul> <li>\"Raw sniffing\"   As suggested by the Portisch firmware, perform the following:</li> </ul> <p>In the web UI Console, send   <code>RfRaw AAB155</code></p> <p>This will result in two consecutive messages:   1. The first one tells you that you are using one of the new firmware commands      <code>22:58:44 MQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":\"ON\"}</code></p> <ol> <li>The second one tells that the EFM8BB1 RF chip new firmware accepts the command and enters raw sniffing mode ('A0' means 'ACK')      <code>22:58:44 MQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AAA055\"}}</code></li> </ol> <p>After that keep pushing one of the buttons on the remote.   <pre><code>MQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AAA055\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 04 07F0 0128 00F2 3822 010101010101101001010101101010100103 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37DC 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37DC 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F4 0126 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F5 0127 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F7 0125 37DC 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0125 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F4 0123 37C8 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07FC 011E 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F8 0125 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F8 0124 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0125 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F8 0122 37C8 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F1 012D 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F4 0123 37C8 010101010101101001010101101010100102 55\"}}`\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F8 0128 37C8 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37D2 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F4 0124 37C8 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F9 0124 37C8 010101010101101001010101101010100102 55\"}}\nMQT: tele/sonoffRFbridge/RESULT = {\"RfRaw\":{\"Data\":\"AA B1 03 07F4 0123 37D2 010101010101101001010101101010100102 55\"}}\n</code></pre></p> <p>Notice that this sequence of messages all start with 'AA' then 'B1' and the last byte '55'</p> <p>The reason for pushing the remote button for several seconds is to get enough 'AA B1 ...... 55' sequences to select the best one to be transmitted back.</p> <p>Then discard the sequences with 'data values' not equal.</p> <p>In the example 'data values' are the <code>010101010101101001010101101010100102</code> string.</p> <p>Notice that before that 'data values' string there are several 2 byte values (they are called 'buckets'); they are time values in microseconds. The number of 'buckets' is indicated in a previous byte (in the example a 3 or a 4).</p> <p>In the example, discard the first message (it contains 4 buckets, whereas the rest have only 3 buckets).   Examine the values on the buckets in order to choose the message where more buckets are 'similar'.</p> <p>For example messages with '37D2' in the third bucket are good candidates. Messages with '0124' in the second bucket are also good candidates. First bucket values are very similar; '07F8' can be a good one.</p>"},{"location":"devices/Sonoff-RF-Bridge-433/#external-sources","title":"External Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> <li>RF Bridge 433 R2 Information</li> <li>New Sonoff RF Bridge Board Layout (R2 v2.2)</li> </ul>"},{"location":"devices/Sonoff-RF-R3/","title":"Sonoff RF R3","text":"<p>See Sonoff DIY for flashing instructions</p>"},{"location":"devices/Sonoff-RF-R3/#convert-rf-r3-into-an-rf-bridge","title":"Convert RF R3 into an RF Bridge","text":"<p>Instructions</p>"},{"location":"devices/Sonoff-RF/","title":"Sonoff RF","text":""},{"location":"devices/Sonoff-RF/#serial-flashing","title":"Serial Flashing","text":"<p>The Sonoff RF needs some tweaking as the connection needed during programming between the button and GPIO0 might not be present.</p> <p>This connection must be removed after the conversion to Tasmota or a button press will send the device in an ON/OFF loop.</p> <p></p> <p>This can be achieved by shorting both solder pads of R21 with a small screwdriver while holding down the button during programming. This can be a bit fiddly, and ideally you should check the bootloader output over serial to see whether you managed to get it into programming mode. Alternatively, Phalox installed a jumper wire (explained in the picture below). Remember to remove it after programming.</p> <p>The R2 V1.0 version of the Sonoff RF uses an ESP8285 which is covered by a horizontally orientated RF expansion board. Entering flash ready mode can be achieved by grounding K_P (which is connected to GPIO0) to the neighbouring GND pin on the RF board during power on.</p> <p></p> <p>Pairing the iTead RF remote controller is the same as with the original iTead software: - two short button presses will blink a red led shortly and start RF signal recognition. Three longer blinks signal RF reception. - three short button presses will keep the red led on for some seconds and erase the known RF code. </p> <p>I was unable to pair the Sonoff RF 434MHz receiver with my KaKu switches but the iTead provided remote control works just fine.</p>"},{"location":"devices/Sonoff-RF/#pairing-a-rf-remote-control","title":"Pairing a RF remote control","text":"<p>During programming a connection for R21 is needed in order to use a button press to ground GPIO0.</p> <p>To pair a RF remote control with the Sonoff RF it is important that there is NO connection made for R21.</p> <p>User gadjet installed a jumper in place of R21 allowing easy programming (jumper in), pairing (jumper out) and normal use (jumper out). The Slampher RF Revision 2.0 can have the same modification applied, but it requires its jumper across R3.</p> <p> </p>"},{"location":"devices/Sonoff-RF/#pairing-instructions","title":"Pairing Instructions","text":"<p>Pairing the iTead RF remote controller is the same as with the original iTead software: - two short button presses will blink a red led shortly and start RF signal recognition. Three longer blinks signal RF reception. - three short button presses will keep the red led on for some seconds and erase the known RF code. </p> <p>I was unable to pair the Sonoff RF 434MHz receiver with my KaKu switches but the iTead provided remote control works just fine.</p>"},{"location":"devices/Sonoff-RF/#version-2-pairing-instructions","title":"Version 2 Pairing Instructions","text":"<p>RF units produced after 6/2018 use a different procedure for pairing. </p> <ul> <li>Press and hold the button for 3-seconds until the red light flashes once, then press then button on your remote to program. </li> <li>Press and hold for button for 5-seconds until the red light flashes twice to clear remote programming.</li> </ul>"},{"location":"devices/Sonoff-S20/","title":"Sonoff S20","text":"<p>Sonoff S20 comes in 4 different plug type variations. Flashing process will be the same for each type.</p>"},{"location":"devices/Sonoff-S20/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>  The picture shows how to program the S20 Smart Socket powered by the serial-to-USB converter.  With newer US sockets, either use a right-angle header, or remove the header after flashing.  Otherwise,the pushbutton may rub against a pin and get stuck.</p> <p>Be sure it is NOT plugged in mains!</p> <p>Remove the \"hidden\" screw.</p> <p></p> <p>(optional) Remove the board from the plastic shell to have better access to serial pins. There are 2 screws at the red and blue wire. Be careful not to damage the soldered connection!</p> <p></p> <p>Connect the jumper wires.</p> <p></p> <p>From top to bottom (see image below): - Vcc (3,3V) - RXD - TXD - GND</p> <p></p> <p>Connected? Hold the little button pressed while connecting the serial-to-USB adapter to your computer. After about 2 seconds let go of the button. It is now in flashing mode and ready to be flashed with Tasmota.</p>"},{"location":"devices/Sonoff-S20/#video-tutorial-by-dont-it-yourself","title":"Video tutorial by Don't It Yourself","text":""},{"location":"devices/Sonoff-S20/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page: http://sonoff.itead.cc/en/products/residential/s20-socket</li> <li>Itead Wiki: https://www.itead.cc/wiki/S20_Smart_Socket</li> </ul>"},{"location":"devices/Sonoff-S20/#openhab-configuration","title":"OpenHab Configuration","text":"<p>sonoff.items: <pre><code>Switch S20_1 \"Coffee S20-1 Powerplug\" (LR,gLight) \n       { mqtt=\"&gt;[broker:cmnd/sonoff-S20-1/POWER:command:*:default],\n                 &lt;[broker:stat/sonoff-S20-1/POWER:state:default],\n                 &lt;[broker:stat/sonoff-S20-1/RESULT:state:JSONPATH($.POWER)],\n                 &lt;[broker:tele/sonoff-S20-1/STATE:state:JSONPATH($.POWER)]\n                 \"}\nSwitch S20_1_Reachable \"S20-1 reachable\" &lt;contact&gt; (gReachable)\n       { mqtt=\"&lt;[broker:tele/sonoff-S20-1/LWT:state:MAP(reachable.map)],\n               &lt;[broker:stat/sonoff-S20-1/RESULT:state:ON],\n               &lt;[broker:stat/sonoff-S20-1/POWER:state:ON],\n               &lt;[broker:tele/sonoff-S20-1/STATE:state:ON]\n               \" }\n</code></pre></p> <p>default.sitemap: <pre><code>        Switch item=S20_1 labelcolor=[S20_1_Reachable == \"ON\" = \"green\",S20_1_Reachable == \"OFF\" = \"red\"]\n</code></pre></p>"},{"location":"devices/Sonoff-S20/#configuration","title":"Configuration","text":"<p>Once set up and connected, you can set the module type to <code>Sonoff S2X (8)</code> in <code>Configure module</code>.</p>"},{"location":"devices/Sonoff-S26-Smart-Socket/","title":"Sonoff S26 Smart Socket","text":"<ul> <li>Itead Product Page: http://sonoff.itead.cc/en/products/residential/sonoff-s26-smart-plug</li> <li>Itead Shop: https://www.itead.cc/sonoff-s26-wifi-smart-plug.html</li> </ul>"},{"location":"devices/Sonoff-S26-Smart-Socket/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#led-state","title":"LED State","text":"<p>The S26 has a red LED connected to GPIO12 along with the relay so it's not possible to disable the power button LED entirely. Setting <code>LedState 0</code> disables the blue LED when the relay is turned on and reserves it for Wi-Fi/MQTT state only.</p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#soldering-guide","title":"Soldering guide","text":"<p>Apply rosin to shaved wires. Solder tin to the flats on the module.(First put solder tip to flat and apply tin). Gently solder the wires.</p> <p> </p> <p>Alternative solder points available for 3V3, GND and RX on the underside of the mainboard.</p> Jumper Pin J1 3V3 J2 GND J3 GPIO-12 J4 GPIO-0 J5 GPIO-13 J10 RX <p></p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#no-solder-connection","title":"No Solder Connection","text":"<p>With the help of some adhesive tape it is possible to achieve a flash without soldering.</p> <p>Hook your connecting wires / pins into the locations shown on the T1117A regulator - there is enough space under the SOT-223 package pins for a connection to be made.  Use some adhesive tape to hold these pins in place; it only needs to remain there for a few minutes. (Vout = 3v3, Pin 1 = GND)</p> <p></p> <p>Flip the board on its side to expose the TX and RX pins. Follow steps 1-4 below, ignoring the TX/RX connection. Once in flash mode, hold the TX/RX pin connection in place with one hand and start the flash with the other! It looks messy with the tape in the below photo but means no soldering required.</p> <p></p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#s26-release-2","title":"S26 Release 2","text":"<p>If you happen to have an S26R2 (sold since the end of 2021?), which is recognizable by the S26R2 label on the back of the case, you may choose to solder or not:</p> <p></p> <p>Board release v2.6 has a slightly different layout, and connecting to it may be even easier. In the above picture, serial flasher GND is connected to the capacitor, but you may use the GND pad on the board.</p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#bringing-the-module-into-flash-mode","title":"Bringing the Module into Flash Mode","text":"<ol> <li>Disconnect serial programmer and power</li> <li>Press and hold the on-board button - Note: The Button on the main board is not very sensitive and must be pressed firmly.</li> <li>Connect the serial programmer (VCC, RX, TX, GND)</li> <li>Release the on-board button</li> </ol> <p>The blue LED should NOT be blinking when in Flash mode.</p>"},{"location":"devices/Sonoff-S26-Smart-Socket/#storagememory","title":"Storage/Memory","text":"<p>Running Tasmota 6.1.1 the unit reports:</p> Flash Size 1024kB Program Flash Size 1024kB Program Size 536kB Free Program Space 464kB Free Memory 16kB"},{"location":"devices/Sonoff-S26-Smart-Socket/#more-information","title":"More information","text":"<p>See issue #2808 for user information</p>"},{"location":"devices/Sonoff-S31/","title":"Sonoff S31","text":"<p>\u26a0\ufe0f\ufe0f\ufe0f Do not connect AC power and the serial connection at the same time \ufe0f\ufe0f\ufe0f\u26a0\ufe0f\ufe0f\ufe0f</p> <p>The GND connection of the S31 is connected to the live AC wire. Connecting serial with your PC will fry your PC and will electrocute you. </p> <p>DO NOT CONNECT ANY SENSOR TO THESE DEVICES. Only use them as designed. </p> <p>The GPIOs on this device are connected to AC power, therefore it is not possible to safely add sensors or displays to it. </p>"},{"location":"devices/Sonoff-S31/#serial-flashing","title":"Serial Flashing","text":"<p>The S31 is easy to take apart. 1. Pry off the gray cover on the end. 2. Slide off the two rounded corner pieces to reveal the 3 screws. 3. Unscrew the 3 screws. 4. Lift off the cover. 5. There are no through holes.  You can solder a piece of header or you can fabricate something using pogo pins and just hold it for the duration of the flashing process.  But, be aware that can get tiring if you need to do it multiple times. 6. The pads are labeled, you need VCC, RX, TX, GND.  There are two others that also have RX and TX on them.  The ones next to the GND pin are not used for flashing. 7. Connect to your serial converter and 3V3. 8. You need to press the switch (GPIO0) before applying power to put into bootloader mode.</p> <p>For exact energy monitoring you might need to calibrate the device.</p> <p>Tinkerman's review of Sonoff S31</p>"},{"location":"devices/Sonoff-S31/#video-tutorial-by-bk-hobby","title":"Video tutorial by BK Hobby","text":""},{"location":"devices/Sonoff-S31/#video-tutorial-by-robert-cowan","title":"Video tutorial by Robert Cowan","text":""},{"location":"devices/Sonoff-S31/#prometheus-power-metrics-units","title":"Prometheus power metrics units","text":"<p>When enabled, the prometheus exporter will report <code>energy_power_kilowatts_daily</code> and <code>energy_power_kilowatts_total</code> metrics. While the naming convention implies that the metrics' values are measured in kilowatts, they are in fact measurements of kilowatt hours.</p>"},{"location":"devices/Sonoff-SC/","title":"Sonoff SC","text":""},{"location":"devices/Sonoff-SC/#serial-connection-flashing","title":"Serial Connection / Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>Flashing the ESP8266</p> <p>Remove the 4 screws on the bottom. The button is connected to GPIO0.</p> <p>You will have to remove the TX jumper in the board to avoid the ATMega328P to interfere in the upload process.</p> <p>Press and hold the button while powering the board to set the ESP8266 into flashing mode. Note! After flashing you need to set the baudrate to 19200. Don't forget to reconnect the TX jumper after flashing ;)</p> <p> </p>"},{"location":"devices/Sonoff-SV/","title":"Sonoff SV","text":"<p>Sonoff Safe Voltage is almost the same as Sonoff Basic R1. These are the differences between the two: * It can be powered by DC voltage * It has more usable GPIO pins     - GPIO4      - GPIO5      - GPIO14 * It has two LED status lights (RED and GREEN) * The traces on the bottom aren't soldered * The GND, TX, RX and 3v3 pins are labeled </p> <p></p>"},{"location":"devices/Sonoff-SV/#what-can-the-unit-handle","title":"\u26a0\ufe0f What can the unit handle \u26a0\ufe0f","text":"<p>The trace is 2 mm wide. By assuming the PCB trace thickness is 1 oz/ft^2 you can calculate the current: 2A</p> <p>If you are using more than 2A be sure to put more solder on the solder traces.</p>"},{"location":"devices/Sonoff-SV/#using-sonoff-sv","title":"Using Sonoff SV","text":"<p>You can use the Sonoff SV in three different ways:</p>"},{"location":"devices/Sonoff-SV/#1-variable-dc-voltage-between-5-24-v","title":"1. Variable DC voltage between 5-24 V","text":"<p>By not having the jumper connected in the far left. the voltage regulator is used for the relay.</p>"},{"location":"devices/Sonoff-SV/#2-solid-dc-voltage-5-v","title":"2. Solid DC voltage 5 V","text":"<p>By bridging the two pins you are connecting the 5 V input directly to the relay so you are bypassing the regulator so the relay still gets 5 V</p>"},{"location":"devices/Sonoff-SV/#3-with-ac-voltage","title":"3. \u26a0\ufe0f With AC voltage \u26a0\ufe0f","text":"<p>\u26a0\ufe0f \u26a1\ufe0f WARNING ONLY DO THIS WHEN YOU KNOW WHAT YOU ARE DOING. \u26a1\ufe0f \u26a0\ufe0f </p> <p>By removing the two 0 ohm SMD resistors next to the jumper you are disconnecting the voltage input from the logic. By doing this you can switch AC again like the Sonoff Basic. Than You can use the jumpers labeled 5~12 V as your DC voltage for the ESP and relay. </p> <p></p>"},{"location":"devices/Sonoff-SV/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page: </li> <li>Itead Shop: https://www.itead.cc/sonoff-sv.html</li> <li>Itead Wiki: https://www.itead.cc/wiki/Sonoff_SV</li> </ul>"},{"location":"devices/Sonoff-Slampher/","title":"Sonoff Slampher","text":"<p>See this article: Tasmota: Sonoff Slampher WiFi Bulb Holder Local Control (external link)</p> <p>I purchased a Sonoff Slampher V2 in July, 2020.  The circuit board didn't match either/any of the tutorial for getting the original or V2 devices into programming mode.  Though it's labeled \"V2\", the cluster of resistors/capacitors around the CPU is different; in particular the resistor at the position indicated by many of the tutorials as labelled <code>r9</code>, is instead labelled <code>r18</code>.  There does seem to be a trace attached to the GPIO0 pin on the CPU but it leads to a dead end (perhaps a via to the other side of the board).</p> <p>After much screwing around, I discovered that simply holding the button while I connected to the four header pins and powered it on put it into programming mode.</p> <p>I flashed it from a mac terminal window like so:</p> <pre><code>esptool.py --port /dev/tty.usbserial-A60226NF write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota.bin\n</code></pre> <p>The barcode on the box for the device that I received is 6920075757361, it's also labeled with MPN:IM190528001.  </p> <p>I purchased the device from Amazon, it was titled <code>SONOFF Slampher R2 433MHz RF&amp;WiFi Smart Lamp Bulb Holder for Smart Home, Compatible with Alexa and Google Assistant</code> and was at this URL: https://www.amazon.com/gp/product/B07TRSYJGB</p>"},{"location":"devices/Sonoff-T1/","title":"Sonoff T1","text":"<p>Sonoff-T1 seems to be an evolution of Sonoff Touch and exists in one, two or three button variations and contains a 433MHz receiver.</p> <p>Based on the ESP8285, but using a Silabs EFM8BB1 microcontroller to extend the number of IOs needed to control 3 buttons, with separate relays and LEDs together with the radio. SYN470R is used as 433Mhz Radio. The chip for touch is unlabeled.</p> <ul> <li>EFM8BB1 Data Sheet</li> <li>ESP8285 Data Sheet</li> <li>SYN470R Data Sheet</li> </ul>"},{"location":"devices/Sonoff-T1/#read-before-flashing","title":"Read before flashing","text":"<p>Tasmota has functionality to perform special actions on multiple button presses and long press for 40 seconds resets firmware to default. This will cause the T1 board to reset if relay board is not connected, because long press on Button1 will be detected. To avoid this, use command <code>SetOption13 1</code> immediately after flashing Tasmota.</p> <p>When powered solely with 3.3v from the serial-to-USB adapter long press will be detected by Tasmota on Button1.</p> <p>When powered solely with 3.3v from the serial-to-USB adapter RF functions do not work.</p> <p>If you can't flash successfully lower the baud rate, most likely to 74880.</p>"},{"location":"devices/Sonoff-T1/#serial-flashing","title":"Serial Flashing","text":""},{"location":"devices/Sonoff-T1/#sonoff-t1-uk","title":"Sonoff T1 UK","text":"<p>The front circuit board should be disconnected from the rear relay board to prevent power draw upsetting the flashing process. The unit must be powered up before attempting to enter programming mode. If touch Button1 is held while power is connected, the device will not go enter flash mode. The touch IC does not have time to recognise the key-press before the device boots.</p>"},{"location":"devices/Sonoff-T1/#touch-board-ver1","title":"Touch Board VER:1","text":"<p>The following board layouts are from the 3 variants of the Sonoff T1 UK variant and are marked Sonoff T1 R2 UK Touch Board, Ver 1.0. </p> <p> </p> <ol> <li>Entering Flashing mode varies between the 1, 2 and 3 channel versions. See the above picture for button nomenclature used. (The variations between the 3 versions appear to be managed by the touch IC rather than in the ESP). To enter flashing mode the unit should be powered and connected to the programmer of choice. Touch Button 1 should then be held while the reset button (4) is pressed. When the device reboots, Button 1 can be released. OR</li> <li>Double-press the reset-button</li> </ol> <p>Try option 1 OR option 2. This will cause the unit to reboot into flash mode. This is confirmed on a serial console (74880 baud) by the boot mode displaying (1,x) indicating that we are booted to the bootloader and not the flash.  You can also confirm booted to flash without a serial console, the main led should be off and the backlight LEDs lit dimly. There is no longer a need to solder anything to GPIO0 or to ground it while powering up for Ver1.0; this step is replaced by the above button sequence. However, GPIO0 to GND is the only way for Ver1.1 boards.</p>"},{"location":"devices/Sonoff-T1/#touch-board-ver11","title":"Touch Board Ver:1.1","text":"<p> Notes: 1. There is not enough room with this version to solder header pins to the programming port and still close the case. One possibility is to slightly bend the pins of a 4-way header and push it into the holes, removing it after programming. 2. GPIO0 is connected to the helper chip on this version, so the only way to get Ver1.1 of the board into flash mode is to solder a lead onto the resistor R19 from pin 15 on the ESP chip (GPIO0) and connect this lead to GND on power up; the device will set all the touch pads to dim and the WiFi LED D3 will NOT be on at all. 3. The connection marked 'LOG' on the J3 header is GPIO2.</p>"},{"location":"devices/Sonoff-T1/#touch-board-ver20","title":"Touch Board Ver:2.0","text":"<p>The 3v3, GND, TX, RX are pretty well labeled, but for BOOT mode you need to connect \"TP1 KEY0\" to the ground. See more details</p> <p>WARNING!! Do not attempt to power the device from your serial-to-USB adapter when connected to the relay board. This draws too much power and will cause the ESP to reboot frequently and reset all the configured settings.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-eu","title":"Sonoff T1 EU","text":"<p>For most devices, the UK version flashing guide may work.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-eu-1ch-2018-06-04","title":"Sonoff T1 EU 1CH (2018-06-04)","text":"<p> All the flashing pins are in the front top right corner (sorry about covering them with the wires). From top to bottom: - LOG (GPIO2 not used) - GND - TXD - RXD - VCC</p> <p>To flash simply connect GND, TXD, RXD, and VCC as any regular ESP. Hold the touch button, press reset at once, then it boots into flash mode (no blinking WiFi LED, dimmed touch button). If this does not work, try shorting R19 to GND as shown in \"Touch Board VER:1.1\" * Stock baud rate: 74880 * Relay pin: 0</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-eu-2ch-v10","title":"Sonoff T1 EU 2CH (v1.0)","text":"<p>For 2 Channel board version 1.0, you need to solder (or otherwise permanently connect) GPIO0 (R19) to GND before powering the board and only disconnect them once the flashing is complete.</p> <p></p> <p>After having connected GPIO0 and GND, power the board - it will boot directly to flashing mode. Flash your firmware and disconnect the board.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-eu-1ch2ch3ch-2018-10-03","title":"Sonoff T1 EU 1CH/2CH/3CH (2018-10-03)","text":"<p>There are two pin headers (J1 and J3) and no reset button. J3 is used for flashing. GPIO0 is exposed on the back as test point (TP2/GPIO0). Connecting it to any ground such as the ground from J1 when powering up puts the ESP8255 into flash mode. Baud rate for flashing is 74880.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-us","title":"Sonoff T1 US","text":"<p>It appears that SonOTA may work again with Sonoff firmware v2.0.1 or greater. This needs to be verified for this specific device. To get it working you can simply plug it to mains, once it's powered up, press and hold the button that's closer to the Wi-Fi logo (you'll hear a beep sound). Keep holding it until you hear that beep for the second time. Now let go. The Wi-Fi light should blink in pairs of 3. Now repeat the procedure (Press and hold until you hear the beep 2 times). Now you should be seeing the Wi-Fi logo flashing rapidly. You can proceed to try and flash with SonOTA now.</p>"},{"location":"devices/Sonoff-T1/#us-model-of-3-button-t1-received-direct-from-sonoff-china-2018-05-12","title":"US Model of 3-button T1, received direct from Sonoff China 2018-05-12","text":"<p>Front photo (Google photos) Rear photo (Google photos) (Sorry about the tape smudges).</p> <p>The header labels on J3 are accurate (apparently some boards have TX and RX reversed; this doesn't seem to suffer that).</p> <p>Flashed with SonOTA. Above method of getting into flash mode doesn't seem to work.</p> <p>UPDATE: I did flash it with the FTDI method. To put then in flash mode press 2 times quickly the internal switch S1.</p> <p>UPDATE 2: Confirmed by another user that flashed with SonOTA works as described on \"Preparing\"</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-us-3-gang","title":"Sonoff T1 US 3 Gang","text":"<p>The jump-wire method to enter the flash mode: * Jump the wire as attached picture * While keeping the wire connected then plug the serial-to-USB adapter to the computer * Wait for 1 to 2 seconds then release the jump-wire * You can start flashing the Sonoff T1 US 3C. </p>"},{"location":"devices/Sonoff-T1/#sonoff-tx-us-23-gang","title":"Sonoff TX US 2/3 Gang","text":"<p>The PCB layout for the TX/T0 model (vertical, black or white face-plate with squared-off, LED-lit buttons) is different again from the original T1.  There is no TP2/GPIO0 test point on the back of the PCB and R19 has moved.  The basic instructions for flashing the T1 (with a USB adapter) still work.</p> <p></p>"},{"location":"devices/Sonoff-T1/#_1","title":"Sonoff T1","text":"<p>It seems that Sonoff is trying to seal off the ESP using some glue see image:</p> <p></p>"},{"location":"devices/Sonoff-T1/#433mhz-remote","title":"433MHz remote","text":"<p>The Tasmota firmware is compatible with the RF remote feature built in to the T1 modules.  Pairing a new remote is the same procedure as a stock Sonoff, i.e., hold the desired button on your sonoff until you are  given 1 beep (approx 7 seconds), press the button on your RF remote. The Sonoff will beep to confirm the pairing. To unpair a remote, press until you are given 2 beeps, press the button on your RF remote. The Sonoff will beep to confirm the unpairing.</p>"},{"location":"devices/Sonoff-T1/#circuit","title":"Circuit","text":"<p>ESP8285 <pre><code>GPIO0 EFM8BB1 P1,3 Switch 1 input (Goes low when first touch button is pressed)\nGPIO04 is connected to the small (soft) reset button on the front.\nGPIO09 EFM8BB1 P1,4 - Switch 3 input (Goes low when third touch button is pressed)\nGPIO10 EFM8BB1 P1,5 - Switch 2 input\nGPIO13 is connected to status LED D3.\nGPIO12 Relay 1\nGPIO5 Relay 2\nGPIO4 Relay 3\nGPIO2 is connected on J3 pin 5 (LOG)\n</code></pre></p> <p>On the EFM8BB1 (QFN20 package) <pre><code>P0,0 Relay 1\nP0,1 Relay 2\nP0,2 Relay 3\nP0,3 Button 1\nP0,4 Button 2\nP0,5 Button 3\nP0,6 SYN470R Data Out\nP0,7 Buzzer\nP1,0 Led button 1\nP1,1 Led button 2\nP1,2 Led button 3\nP1,3 ESP8285 GPIO0\nP1,4 ESP8285 GPIO09\nP1,5 ESP8285 GPIO10\nP1,6 ESP8285 EXT_RSTB (RESET)\n</code></pre></p>"},{"location":"devices/Sonoff-T1/#ghost-switching","title":"Ghost Switching","text":"<p>Some of these devices are prone to hardware ghost switching. You may need to experiment with <code>ButtonDebounce</code> and <code>SetOption40</code> to reduce or eliminate these issues.  </p> <p>Also, during the flashing process, you may have soldered a lead to GPIO0 in order to connect it to GND for putting the ESP into programming mode. If there are any random oscillations on GPIO0, this can trigger the relay. The contacts on the PCB are very close together. Check that you don't have any stray solder to another contact. Even if there isn't contact, over time heat and humidity can cause any residual flux to become resistive and allow conductivity. Be sure to clean everything after removing any leads.</p>"},{"location":"devices/Sonoff-T1/#known-so-far","title":"Known so far","text":"<ul> <li>When pushing a button, the touch chip lift the power high to the EFM8BB1, and the EFM8BB1 chip ties the signal line for each button low, for the full duration of the keypress. Debouncing is not needed.</li> <li>433MHz remotes are compatible with the Tasmota firmware</li> <li>DO NOT attempt to power the device from your programmer when connected to the relay board. This draws too much power and will cause the ESP to reboot frequently and will reset all the configured settings.</li> <li>The relays state can be set on the GPIO's 12, 5 and 4.</li> <li>The switch status can be read on GPIO's 0, 10 and 9. Push button active low.</li> </ul>"},{"location":"devices/Sonoff-T1/#unknown-so-far","title":"Unknown so far","text":"<ul> <li>Where GPIO15 is connected? Over R18 10kOhm pull-down only?</li> </ul>"},{"location":"devices/Sonoff-T1/#official-sources","title":"Official Sources","text":""},{"location":"devices/Sonoff-T1/#sonoff-t1-uk_1","title":"Sonoff T1 UK","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> </ul> <p>The Sonoff T1 UK with 1 to 3 gang is fully supported by Tasmota starting with version 5.6.1.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-eu_1","title":"Sonoff T1 EU","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> </ul> <p>The Sonoff T1 EU with 1 to 3 gang is fully supported by Tasmota starting with version 5.6.1.</p>"},{"location":"devices/Sonoff-T1/#sonoff-t1-us_1","title":"Sonoff T1 US","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> </ul> <p>The Sonoff T1 US with 1 to 3 gang was launched March 2018. </p>"},{"location":"devices/Sonoff-T1/#sonoff-tx-us","title":"Sonoff TX US","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> </ul>"},{"location":"devices/Sonoff-TH/","title":"Sonoff TH","text":"<p>Sonoff TH10 or TH16 / Ver 2.0 (year 2017/2018/2019) based on ESP8266. TH10 has a relay rated to 10 amps and TH16 to 16 amps (Input voltage: 90~ 250V AC).</p>"},{"location":"devices/Sonoff-TH/#serial-flashing","title":"Serial Flashing","text":"<p>The 2.5mm jack socket connects to GPIO14. </p> <p>In PCB Ver 2.1 you can find a fifth pin next to the serial pins, labeled <code>EXP-LOG</code>. You can use this as GPIO2 to any generic purpose. Currently should make a custom template for it.</p>"},{"location":"devices/Sonoff-TH/#sonoff-sensors-with-25mm-jack","title":"Sonoff sensors with 2.5mm jack","text":"<p>Sonoff sells 3 sensors with 2.5mm jack to use with the Sonoff TH.  1. Sonoff TH Sensor Si7021 2. Sonoff TH Sensor AM2301 3. Sonoff Temp Sensor DS18B20</p> <p>Length of the wire is approximately 47cm apart from DS18b20 sensor that comes with approximately 1m long wire. Can be extended with a Sonoff 5m sensor extension cable. </p> <p>NOTE!!! Normally a Si7021 sensor is an I<sup>2</sup>C device. The Sonoff labelled Si7021 sensor is BASED on an Si7021, but, to make this sensor plug'n'play on a Sonoff TH an 8-bit MCU is added on the board. This changes the I<sup>2</sup>C communication of an Si7021 sensor to one-wire communication! That is why a \"Sonoff SI7021 sensor\" doesn't work in combination with a I<sup>2</sup>C library. </p> <p>Tasmota supports Sonoff TH with all three Sonoff sensors. Just select module Sonoff TH (4) and under GPIO14 configure the sensor you have connected. </p>"},{"location":"devices/Sonoff-TH/#not-supported","title":"NOT SUPPORTED","text":"<p>Si7021 sensor contains an integrated resistive heating element that may be used to drive off condensation. It's recommended enabling the heater when the humidity readings are above 80%. Humidity readings above 80% become very unreliable. If the \"Sonoff Si7021 sensor\" is used at the dew point and condensation occurs on the sensor, the on-chip heater could be activated to dry the sensor and restore operation once the sensor is above the dew point. Turning on the heater will also reduce the tendency of the humidity sensor to accumulate an offset due to \"memory\" of sustained high humidity conditions. Six different power levels are available. The maximum source current of a GPIO pin on an ESP8266 is about 12mA. So the first power level of 3.09mA and second power level of 9.18mA would be theoretically usable.    </p> <p>Keep that in mind if you use this \"Sonoff Si7021 sensor\" outdoors!  </p> <p>Si7021 Datasheet</p>"},{"location":"devices/Sonoff-TH/#official-sources","title":"Official Sources","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki</li> </ul>"},{"location":"devices/Sonoff-TX-Series/","title":"Sonoff TX Series","text":"<p>The sonoff TX Series comes with 4 versions T0, T1, T2, T3</p> <p>The boards are the same for all the series with only a difference in the T0 which has no RF chip</p>"},{"location":"devices/Sonoff-TX-Series/#flashing","title":"Flashing","text":"<p>The flashing steps are the same than for the older T1 switch but holding switch 1 does not put the board into flashing mode and there is no reset button on the board</p> <p>So to put a T1 Touch v1.0 board into flash mode you need to ground GPIO 0 which is exposed on the back of the board and plug the board to USB</p> <p>Here is an image of the wiring</p> <p></p> <p>Legend: * Yellow =&gt; 3.3v * Purple =&gt; GND * Green =&gt; TX FTDI to RX sonoff * Blue =&gt; RX FTDI to TX sonoff</p> <p>If the manipulation is done correctly the Wifi led will not blink when the device is powered, this means you are in flash mode and you can follow the other guide</p>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/","title":"Sonoff TX T0 Touch 1CH 2CH 3CH    US","text":"<p>June 2019 - Devices delivered with Sonoff v3.3.0 stock firmware.</p> <ul> <li>Product page</li> <li>Banggood</li> </ul> <p>Serial flashing works for this device. You may wish to check whether the Sonoff DIY flashing method works if this device is upgraded to v3.3.1.</p> <p>Board label: <code>T0US TOUCH v1.0 2008.11.15</code></p> <ul> <li>TX T0 US, 1-3CH boards are physically the same.</li> <li>Only need the \"top board\" to flash (not the bottom relay part) -- don't power with mains (you can't if you only use top anyway)</li> <li>R19 is tied to GPIO 0 to enter flash mode, just like on T1 but in a different spot for t0 (or US?).</li> <li>Find the C2 (j1) pins and look directly up about half inch for r19</li> <li>Ensure that you select 3.3v and not 5v! to flash the board.</li> <li>ESP8285 - 1M - DOUT - erase flash - 115200 baud</li> </ul> <p>Like the T1, this does not have enough room to solder a header on.</p> <p>Use a piece of thick cardboard to lay your top board on. Firmly press some jumpers through the serial holes into the cardboard.</p> <p>If you push these through at an angle will be good enough to make contact to connect to your serial adaptor, trial and error but is not hard. See photo below.</p> <p>Regular flashing steps apply: connect Ground, Vcc TX, RX to your serial adaptor. Pay attention to TX/RX!</p> <p>For flash mode, use another jumper through the ground hole on the C2 pins (left of the serial and label J1). Same as above, push the jumper through cardboard to secure it.</p> <p>While powered off hold the other end of jumper to R19 and then power up (plug in your USB serial adaptor).</p> <p>Hold it for 3-5 seconds after it powers up before removing it. </p> <p>You should not see the network status led flash anymore, then you know you're in flash mode. If it's flashing power off and try again.</p> <p>Using the TX T1 1-3 device template will work. A new T0 template is forthcoming. </p> <p> </p>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#start-to-finish-flashing-guide","title":"Start-to-Finish Flashing Guide","text":""},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#flashing","title":"Flashing","text":"<ol> <li>Connect the device's serial interface pins to the Serial-to-USB adapter. Be sure that your adapter is set to supply 3.3v. Place a jumper wire from GND to the side of R19 nearest the screw hole cutout - this is connected to GPIO0.</li> <li>Download <code>tasmota.bin</code> from http://ota.tasmota.com/tasmota</li> <li>Have <code>Flashing tool</code> running with the correct settings. Be sure to select <code>DOUT</code> and <code>Erase flash - yes</code>. Select the right COM port for your serial-to-USB adapter and select <code>tasmota.bin</code> from the folder where you downloaded the file. </li> <li>Plug the serial adapter into the USB port and click the <code>Flash</code> button on <code>Tasmota PyFlasher</code>.</li> <li>When you get the flash complete, remove the GND jumper wire from GPIO0.</li> <li>Cycle power on your device by disconnecting the serial adapter from the USB port for a couple of seconds and plugging it back in.</li> </ol>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#ip-configuration","title":"IP Configuration","text":"<ol> <li>Using a mobile device, scan for Wi-Fi networks and connect to the <code>sonoff-xxxx</code> access point. When it connects to the network, you may get a warning that there is no Internet connection and be prompted to connect to a different network. Do not allow the mobile device to select a different network.</li> <li>Open the browser on your mobile device and navigate to http://192.168.4.1.</li> <li>In the Tasmota web UI, scan wifi networks and select the network for your home. Then enter the network's password (click the checkbox to see the password you enter to ensure that it is correct and that your mobile device has not inadvertently capitalized the first letter if it is supposed to be lower case nor autocorrected what you entered). When you save the settings, the device will restart and connect to your home network. The <code>sonoff-xxxx</code> network will not longer be present. Therefore your mobile device will automatically be disconnected and should connect back to its data network.</li> <li>Check in your router or use an IP scanner to ensure that the device is connected to your home network. Make not of the IP address assigned to your device.</li> </ol>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#mqtt-configuration","title":"MQTT Configuration","text":"<ol> <li>Go to new IP address (http://<code>IP</code>) in a browser.</li> <li>Click Configuration-&gt;Configure MQTT-&gt;</li> <li>MQTT Host: Enter the address (192.168.xx.yy or Hostname) of your MQTT broker. If you use the Home Assistant embedded broker, this will be your HA server.</li> <li>User: Enter the username for your MQTT broker</li> <li>Password: Enter the password for your MQTT broker</li> <li>Topic: Enter the unique MQTT topic for your device</li> <li>Save your settings. The device will restart</li> </ol>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#device-configuration","title":"Device Configuration","text":"<ol> <li>Click Configuration-&gt;Configure Module-&gt;Module Type-&gt;Sonoff T1 3CH (30) (the appropriate module for your device model) and save. The device will restart.</li> <li>Test the operation of the switches from the web UI. You should hear the relays click.</li> <li>Click Console</li> <li>If you use Home Assistant, enter <code>SetOption19 1</code> to enable device auto-discovery.</li> <li>Check the log for any errors.</li> </ol> <p>Reassemble the switch and connect it to mains power. Check in your router or use an IP scanner to ensure that the device is connected to your home network. Also use the Tasmota web UI to ensure the switch is operating as expected.  </p>"},{"location":"devices/Sonoff-TX-T0-Touch-1CH-2CH-3CH----US/#home-assistant-configuration","title":"Home Assistant Configuration","text":"<ol> <li>Open TasmoAdmin via Hassio and Autoscan</li> <li>In Name1-&gt;Name3 enter switch position names again (note: understand orientation of switch)</li> <li>Go to \u2018Devices List\u2019 and check/test buttons click </li> <li>Click Cog configuration and enter names again and save</li> <li>Click Cog configuration, go to MQTT and change Group Topic to swtheatre and save</li> <li>Go to Devices List again and the circle arrows to restart the device</li> <li>Go to Integrations-&gt;MQTT and find the new switch and rename/locate items accordingly</li> </ol>"},{"location":"devices/Sonoff-Touch/","title":"Sonoff Touch","text":"<ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead Wiki: (n/a)</li> </ul> <p>Unlike most Sonoff modules, the Sonoff Touch is based on the ESP8285 rather than the ESP8266. The actual chip inside may be a PSF-A85.</p>"},{"location":"devices/Sonoff-Touch/#serial-connection","title":"Serial Connection","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>As always, you need to access the serial interface. Carefully remove the top PCB from the assembly. The hidden underside of the PCB contains the ESP8285 as shown in the pictures. The four serial pins (3V3, Rx, Tx, GND) can be seen in the pictures for the US version (left) and the EU version (right) of the module PCB.</p> <p> </p> <p>Be careful while removing and reassembling the top PCB. The touch sensor should be back in its intended place. Be sure to not touch it directly during the modifications.</p> <p>The Sonoff Touch button is not connected to GPIO0 and hence cannot be used to bring the module into Programming Mode. A connection between GPIO0 and GND needs to be made manually. GPIO0 can be found on the right side of the ESP8285 and is the second pin from the bottom, as can be seen on the pictures.</p> <p>Note: Even if you have the PSF-A85 chip inside instead of a default ESP8285, the GPIO0 pin is in the same location. Pay attention to the corner of the chip with three unused solder contacts. That is where the external antenna connector is located in the images above. The PSF-A85 in the Sonoff Touch does not have the external antenna connector soldered on.</p>"},{"location":"devices/Sonoff-Touch/#control-onoff-leds-on-sonoff-touch-solution","title":"Control ON/OFF Leds on Sonoff Touch solution","text":"<p>Solder the switch LED where the Wi-Fi LED is and then you can control the LED by using the command <code>LedPower ON</code>. The Switch LED is on all the time, even when the switch is off so you can easily find the switch in the dark.</p> <p></p> <p>Alternatively, you can solder the switch LED on 3.3v and ground but then you can't control the LED, it is always on and very bright.  </p> <p> </p>"},{"location":"devices/Sonoff-iFan02/","title":"Sonoff iFan02","text":"<p>The Sonoff iFan02 is supported in Tasmota from version 6.0.0b</p> <ul> <li>Itead Product Page</li> <li>Itead Shop</li> <li>Itead iFan02 Schematics</li> </ul>"},{"location":"devices/Sonoff-iFan02/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>Flashing using only a USB to serial converter will not work as the unit draws too much current as can be observed by a flashing blue led on the PCA and a lot of serial gibberish. As AC is not connected to Gnd I used the available power supply of the unit and connecting the USB to serial converter to J3 pins Gnd, Tx and Rx.</p> <p>The button is not connected to GPIO0 so flashing the unit requires some extra work. I managed to flash the iFan02 by soldering a wire to TP16 (GPIO00) on the bottom of the PCA. Keep this wire connected to Gnd during the power-on or reset process (pressing the button) and the unit will be in firmware upgrade mode. If you've soldered the gpio0 connection don't forget to unsolder before booting normally.  </p> <p>Connect RX -&gt; TX | 3.3 -&gt; 3.3 | TX -&gt; RX | GND -&gt; GND  and connect TP16 to GND (as used in the TTL). </p> <p>Press and hold the button while connecting to power.</p> <p></p> <p>If you have an Arduino you may be able to flash without providing an additional power source. I have successfully flashed using an Arduino Duemilanove with the atmel chip pulled out (basically using it for FTDI and 3.3v power regulation). Rx on Arduino goes to Rx on iFan02, Tx to Tx (no crossover like with FTDI). I did not have to press the button, only to ground TP16 while initiating the flash in Arduino IDE. The Arduino provides enough power to flash, however it will not boot into Tasmota unless you plug in to external power (it boot loops after flashing is complete).</p>"},{"location":"devices/Sonoff-iFan02/#additional-information","title":"Additional information","text":"<ul> <li>See issue #2839 for user information</li> <li>See issue #3412 light on after restore power</li> </ul> <p>Functioning iFan02 in Tasmota WebUI</p> <p></p> <p>iFan02 PCA with TP16 </p> <p></p> <p>Two users report the TP16 pad lifting after soldering a wire to ground as shown in picture.  This renders it useless.  It may be better to use a pogo pin contact, bare wire or solder and then epoxy/glue the wire in place, leaving it permanently.</p> <p>Board Top Showing ESP8285</p> <p></p> <p>ESP8285 Pinout </p> <p></p>"},{"location":"devices/Sonoff-iFan02/#using-hard-wired-push-button-switch-attached-to-ifan02-gpio-to-cycle-speeds","title":"Using hard wired push button switch attached to iFan02 GPIO to cycle speeds","text":"<p>If anyone wants to setup a single push button switch attached to the GPIO3 Serial + ground In that will cycle through the speeds and turn off - after setting it in the configuration (GPIO3 to 11 Switch3) the console code is: </p> <p><code>rule1 on switch3#state do FanSpeed + endon</code></p>"},{"location":"devices/Sonoff-iFan02/#alternate-power-supply-schematic","title":"Alternate Power Supply Schematic","text":""},{"location":"devices/Sonoff-iFan03/","title":"Sonoff iFan03","text":"<p>(For information on the iFan02 please see here - iFan02)</p>"},{"location":"devices/Sonoff-iFan03/#serial-flashing","title":"Serial Flashing","text":"<p>Please see the Hardware Preparation page for general instructions.</p> <p>Next, please see the Flashing page for general information on the flashing process.</p> <p>Flash the latest version of <code>tasmota.bin</code>:</p> <ol> <li> <p>Connect your serial flashing device pins to the iFan03 (for connection locations see the pin out on the left hand side of the picture below). </p> </li> <li> <p>When you are ready to flash your device, hold down the large white tipped button on the iFan03 while connecting the serial adapter to your computer. This will power the serial adapter as well as the iFan03. Usually, you can release the button on the iFan03 once it has fully booted - after 3-5 seconds once the lights have flashed. If the device does not enter programming mode successfully, cycle power but this time continue to hold the button during the entire firmware upload process (i.e., step 4 below).</p> </li> <li> <p>Using Tasmota PyFlasher (recommended):</p> </li> <li>Select the firmware file that you want to flash</li> <li>Set the COM port for your serial programming adapter</li> <li>Ensure that flash mode <code>Dual Output (DOUT)</code>, and baud rate of <code>115200</code> is selected</li> <li> <p>If you are flashing Tasmota for the first time, also select <code>yes, wipes all data</code>.</p> </li> <li> <p>Click on the \"Flash NodeMCU\" button and wait until the flashing process is completed. </p> </li> <li> <p>Cycle power on the serial adapter by unplugging and plugging it back in from the USB port. Do not hold down the iFan03 button. Wait for the iFan03 to reboot.</p> </li> <li> <p>If this is the first time you have flashed Tasmota on the device, connect to the iFan03 <code>sonoff-xxxx</code> Wi-Fi access point and configure your Wi-Fi credentials by opening <code>192.168.4.1</code> in a browser. Wait for the iFan03 to reboot.</p> </li> <li> <p>Find the IP address of the iFan03 and navigate to that IP address in any browser. Select \"Configure Module\" from the \"Configuration\" menu and select <code>Sonoff iFan03 (71)</code> from the drop down list.</p> </li> <li> <p>Wait for the iFan03 to restart and then continue any other required or desired configuration.</p> </li> </ol>"},{"location":"devices/Sonoff-iFan03/#us-ceiling-fans","title":"US Ceiling Fans","text":"<p>The capacitors in the iFan03 do not set the speed of US fans correctly. To correct the speeds for US ceiling fans, you need to remove the existing capacitors from the iFan03 and replace them with equivalently electrically rated 5uF (microfarad) capacitors. Do NOT do this if you are not comfortable using a soldering iron as improperly performing this action could increase the risk of bodily injury or property damage. </p>"},{"location":"devices/Sonoff-iFan03/#rf-remote-control-pairing","title":"RF Remote Control Pairing","text":"<p>To pair the remote control after the device has been flashed with the new firmware, the device needs to be powered from mains voltage (not from the USB serial flashing device). Be careful dealing with mains voltages. Ensure that all connections are correctly made and that the iFan03 covers are properly re-assembled.</p> <p>To pair the remote control, hold down any button on the remote control and apply power to the iFan03. Once the device boots up you should hear a series of clicks as the internal relays operate. Once completed you can test the remote and it should all be operational.</p> <p>To unpair the remote control, hold down the unpair button (located on bottom left of RF remote control, the icon looks like a chain link) for 20 seconds until you hear 3 beeps from the controller.</p> <p>Note: It is possible to have multiple ifan03 controllers paired to a single RF remote. If you have multiple ifan03 controllers on the same electircal circuit breaker, you are likely to pair them to the same RF remote if you use breaker to power on the controller while pairing the RF remote.     </p>"},{"location":"devices/Supernight-dual-wifi-plug/","title":"Supernight dual wifi plug","text":"<p>Received these in a 2 pack.  flashing with OTA was no issue.</p> <p>I quickly figured out most of the IO.</p> <ul> <li>GPIO1 = Left Socket Button</li> <li>GPIO3 = Left Socket Relay</li> <li>GPIO12 = Right Socket Relay</li> <li>GPIO14 = Red LED for both buttons</li> </ul> <p>The \"night light\" seems to be tied to the light sensor only and cannot be turned off.  This makes the plug a no-go for me.</p> <p>Also, I could not figure out the right socket button.  I ended up destroying one of the two plugs to see what was inside.</p> <p>There are 2 circuit boards.  One with the Wifi and esp module and another with the buttons and the night lights.  On the button board, the trace for the right button is purposely notched for that button so that it doesn't connect to the header leading to the second circuit board with the esp chip.  I'm really wishing I verified that button before flashing as I don't intend to buy more to test it.</p> <p>Found this on the issues tracker</p> <p>Just a quick update. I've still not figured out the second button, but I do have energy monitoring working now.</p> <p>My current pinout is... * GPIO1 = Left Socket Button * GPIO3 = Left Socket Relay * GPIO4 = HLW8012/Voltage (HLWBL CF1) * GPIO5 = HLW8012 CF Power (HLW8012 CF) * GPIO12 = Right Socket Relay * GPIO13 = HLW8012 Output (HLWBL SEL) * GPIO14 = Red LED for both buttons</p> <p>Pins 6,7,8 and 11 cause hard resets when I try to set them to switches or buttons.</p> <p>If you have tasmota &gt;= 6.4.1.14 then here is a template based on the above.</p> <p>{\"NAME\":\"SuperNight Dua\",\"GPIO\":[255,17,255,21,132,133,255,255,22,130,58,255,255],\"FLAG\":1,\"BASE\":18}</p>"},{"location":"devices/TYWE3S/","title":"TYWE3S","text":"<p>Pinout for flashing TYWE3S devices. Module has a nearly identical pinout to ESP-12 module series.</p> <p></p>"},{"location":"devices/TYWE3S/#tywe3s-wiring-for-flashing","title":"TYWE3S Wiring for Flashing","text":"TYWE3S Serial Programmer Vcc 3.3V EN 3.3V TX RX RX TX GND GND GPIO0 GND <p>Make sure to ground GPIO0 during boot.</p> <p>TYWE3S - Flashing Jig</p>"},{"location":"devices/TYWE3S/#additional-information","title":"Additional Information","text":"Pin Number Symbol IO type Function 1 TXD0 O UART0_TXD 2 RXD0 I/O UART0_RXD 3 GPIO5 I/O GPIO5_05 4 GPIO4 I/O GPIO5_04 5 GPIO0 I/O GPIO5_0(Participate in the module power-on initialization process,use with caution) 6 GPIO2 O UART0_TXD(Used to print module internal information) 7 GPIO15 O GPIO_15(Participate in the module power-on initialization process,use with caution) 8 GND P Power Reference Ground 9 VCC P Module Power Pin(3.3V) 10 GPIO13 I/O GPIO_13 11 GPIO12 I/O GPIO_12 12 GPIO14 I/O GPIO_14 13 GPIO16 I/O GPIO_16(Use 10K pull-up resistor for use) 14 EN I Module enable pin,normal use needs to receive 3.3V 15 ADC AI ADC port, 10-bit precision SAR ADC 16 RST I/O Hardware reset pin (low level effective, internal pull-up resistance) <p>For Switches and dimmers with additional MCU check guide here </p>"},{"location":"devices/Teckin-SP22/","title":"Teckin SP22","text":"<p>The BlitzWolf SHP2, HomeCube SP1, and Teckin SP22 are basically the same device barring the branding.</p>"},{"location":"devices/Teckin-SP22/#warning","title":"Warning","text":"<p>There are at least two Versions of the SP22 out.</p> <p>An old one with a TYWE2S WiFi module and ESP... chip. This version is compatible with Tasmota.</p> <p>A new one with a WR2 WiFi module and RTL8710BN chip. This one is not compatible with Tasmota.</p>"},{"location":"devices/Teckin-SP23/","title":"Teckin SP23","text":"<p>The Teckin SP23 is wifi enabled smart plug with the ability to remotely monitor power consumption and turn devices on and off.</p>"},{"location":"devices/Teckin-SP23/#details","title":"Details:","text":"<p>The Teckin SP23 appears to be a clone of the BlitzWolf SHP2 hardware with Tuya firmware. It uses an ESP8266EX and is capable of switching up to 16 amps at 250 VAC.</p> <p>Two Teckin SP23s (marked V1.2) purchased from Amazon UK (January 2019) have been flashed successfully and use BlitzWolf SHP2 Sonoff configuration. Voltage calibration may be required for accurate power monitoring.</p> <p>Two additional Teckin SP23s were purchased from Amazon UK (July 2019) and successfully flashed using Tuya-Convert. Upgrading to Tasmota 6.6 and using BlitzWolf SHP configuration was problematic - LED's did not show power status - but downgrading to 6.3 and using BlitzWolf SHP2 as above gave perfect performance. The units were not disassembled so there was no way of determining board version.  </p> <p>A set of 4 Teckin SP23s were purchased from Amazon UK (Sept 2019) and they flashed without issues using Tuya-Convert. This device functions properly with tasmota.bin 6.6.0 (LED flashing blue when ON) with the template in the repository. </p> <p>Two devices purchased on Amazon ES were already patched, but have been successfully flashed with the <code>new-sdk</code> branch of kueblc's tuya-convert fork.</p>"},{"location":"devices/Teckin-SP23/#how-to-flash","title":"How to flash","text":""},{"location":"devices/Teckin-SP23/#ota-flashing","title":"OTA Flashing","text":"<p>No hardware preparation is required to flash if you are confident about having the same version and can easily be flashed using Tuya-Convert methods.</p> <p>This results in a fully functional device when using the BlitzWolf SHP2 template.</p> <p>The ability to OTA flash the device may not work in the future. Tuya has patched their firmware to block the OTA flashing tools. If the manufacturer updates the firmware shipped with the device to the latest Tuya version, OTA flashing will cease to be an option. As of August 2019, devices purchased from Amazon (link above) were still able to be OTA flashed (via Tuya-Convert).</p>"},{"location":"devices/Teckin-SP23/#flashing-via-serial","title":"Flashing via serial","text":"<p>Video Tutorial by Marcus Bennett</p>"},{"location":"devices/Teckin-SP23/#configuration","title":"Configuration","text":"<p>After flashing and configuring the Wi-Fi parameters, use the Tasmota web UI Configure Template. Set <code>Based on</code> to <code>BlitzWolf SHP (45)</code> and then change <code>GPIO2</code> from <code>Led1i (56)</code> to <code>Led2i (57)</code> for the LED to operate properly.</p>"},{"location":"devices/Teckin-SP23/#how-to-disassemble-if-desired","title":"How to disassemble if desired","text":"<p>If you wish to confirm you have the same hardware the Teckin SP23 can be opened by hitting each side of the plug at the lip with a rubber mallet or similar. This will leave a visually unblemished enclosure which can be resecured with superglue or similar.</p> <p> </p> <p>Full album</p>"},{"location":"devices/Teckin-SP23/#home-automation-hub-integration","title":"Home Automation Hub Integration","text":""},{"location":"devices/Teckin-SP23/#openhab","title":"openHAB","text":"<p>sonoff.items: <pre><code>Switch BlitzwoIFSHP2 \"Switch\"  { mqtt=\"&gt;[broker:cmnd/BlitzwoIFSHP2/POWER:command:*:default],&lt;[broker:stat/BlitzwoIFSHP2/POWER:state:default]\" }\nNumber Power_Total \"Total: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Total)]\" }\nNumber Power_Today \"Today: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Today)]\" }\nNumber Power_Yesterday \"Yesterday: [%.3f kWh]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Yesterday)]\" }\nNumber Power \"Power: [%.1f Watt]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Power)]\" }\nNumber Voltage \"Voltage: [%.0f V]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Voltage)]\" }\nNumber Current \"Current: [%.3f A]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Current)]\" }\nNumber Factor \"Factor: [%.2f]\"  { mqtt=\"&lt;[broker:tele/BlitzwoIFSHP2/SENSOR:state:JSONPATH($.ENERGY.Factor)]\" }\n</code></pre></p> <p>default.sitemap: <pre><code>Switch item=BlitzwoIFSHP2 label=\"BlitzWoIF SHP2\" icon=\"socket\" mappings=[OFF=\"Off\",ON=\"On\"]     \nText item=Power label=\"Power: [%.1f Watt]\" icon=\"energy\"\nText item=Voltage label=\"Voltage: [%.0f V]\" icon=\"energy\"\nText item=Current label=\"Current: [%.3f A]\" icon=\"energy\"\nText item=Factor label=\"Factor: [%.2f]\" icon=\"energy\"\nText item=Power_Total label=\"Power Total: [%.3f kWh]\" icon=\"energy\"\nText item=Power_Today label=\"Power Today: [%.3f kWh]\" icon=\"energy\"\nText item=iPower_Yesterday label=\"Power Yesterday: [%.3f kWh]\" icon=\"energy\"\n</code></pre></p>"},{"location":"devices/Teckin-SP23/#home-assistant","title":"Home Assistant","text":"<pre><code>switch:\n  - platform: mqtt\n    name: \"Blitzwolf\"\n    state_topic: \"stat/blitzwolf/POWER\"\n    command_topic: \"cmnd/blitzwolf/POWER\"\n    payload_on: \"ON\"\n    payload_off: \"OFF\"\n    retain: false\n\nsensor:\n  - platform: mqtt\n    name: \"Blitzwolf Energy Today\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Today\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Yesterday\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Yesterday\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Energy Total\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Total\"] }}'\n    unit_of_measurement: \"kWh\"\n  - platform: mqtt\n    name: \"Blitzwolf Power\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Power\"] }}'\n    unit_of_measurement: \"W\"\n  - platform: mqtt\n    name: \"Blitzwolf Voltage\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Voltage\"] }}'\n    unit_of_measurement: \"V\"\n  - platform: mqtt\n    name: \"Blitzwolf Power Factor\"\n    state_topic: \"tele/blitzwolf/SENSOR\"\n    value_template: '{{ value_json[\"ENERGY\"][\"Factor\"] }}'\n</code></pre>"},{"location":"devices/Teckin-sp10/","title":"Teckin sp10","text":"<p>so I got a couple of these guys given to me  </p> <p>teckin sp10 on amazon.ca</p> <p>follow some great info here  I found the esp8266 as expected in here I was able to identify the module as an esp8266-s3 spec sheet</p> <p>@znanev did most of the work already  the uk version of this plug as noted by Znanev</p> <p>it took a great deal of time to confirm that I did indeed have the same pin outs as this UK plug I stumbled upon what I think is the original manufacturer of these but we will probably never know plug maker</p> <p> </p> <p>I am going to now shamelessly steal from @znanev as he wrote this much better than I could have </p>"},{"location":"devices/Teckin-sp10/#wifi-module-pins","title":"WiFi module pins","text":"<p>Here is a close-up view of the module's pins as seen from the bottom of the main PCB: </p> <p>And this is how module pins numbers are mapped (I had to desolder the module looking for labels when I tried to identify it): </p> <p>Failed to identify the module, I had remove the metal shielding cap to find the routing of the ESP8266's pins, so I grabbed the multimeter and soon I had the following table:</p> Module pin ESP8266 pin Pin name Pin name ESP8266 pin Module pin 1 7 Chip Enable Tout (ADC) 6 2 3 9 MTMS / GPIO14 MTDI / GPIO12 10 4 5 12 MTCK / GPIO13 MTDO / GPIO15 13 6 7 15 GPIO0 GPIO2 14 8 9 16 GPIO4 GPIO5 24 10 11 25 U0RXD U0TXD 26 12 13 Vdd - - GND 14"},{"location":"devices/Teckin-sp10/#serial-connection","title":"Serial Connection","text":"<p>For programming you need to solder 4 jumper wires to pins 11, 12, 13 and 14 (Rx, Tx, Vdd and GND). Connect the other end of the wires to your USB-to-serial adapter and make sure the supply voltage selected is 3.3V. Shorting pin 7 (GPIO0) to ground while plugging the serial adapter into the computer's USB port will bring the module into UART firmware upload mode. </p>"},{"location":"devices/Teckin-sp10/#configuration","title":"Configuration","text":"<p>Once Tasmota's WebUI configuration interface is loaded in the browser, you can change many settings using the menu options. Console window is where you can change almost all configuration parameters.</p> <p>Head straight to the Configure Module menu, selected 'Generic' for 'Module type'. Here are the settings that I selected on that screen:</p> <p></p> <p>Sonoff devices usually have a bi-colour LED, but just one of the colours can be controlled directly. The other colour is usually tied together with the relay, so it cannot be controlled independently. I think that is the reason why the Tasmota firmware by default controls just Led1 when a single relay is configured. In the configuration above, only the blue LED will be used (tied to GPIO2). But if you prefer the red LED, just change the values for Led1i and Led2i (select Led1i for GPIO0 and Led2i for GPIO2).</p> <p>end quote </p> <p>if you care led 2 is blue and led 1 is red </p> <p>I flashed the standard tasmota.bin  file to it with out any problems with both the esptools and with arduino  the one benefit to using arduino is that I was able to configure my wifi in advance</p> <p>I hope to update this and clean it up but I thought I should get it up here as I found nothing about this plug before I forget to post and I can't remember any details.</p> <p>Note: I have a newer version of this, labelled C7 HYS-X5-SOCKET_V1.2. The connectors for the ESP8266 board seem different. Still mapping them, but beware of following these instructions unless you know you have the same version. Update: looks like I actually destroyed the ESP8266 board somehow, using the software-only tuya-convert technique. After failing to get it to update, I opened up the case by putting it between two dowels in my vise, and tightening until it cracked open. There was zero resistance between pins 13 and 14. I fed it power at 3.3 volts to 1 amp, before giving up. An identical second plug updated without incident.</p>"},{"location":"devices/Tuya-Smart-Plug-Models-ESP8266MOD-by-AI-THINKER-and-ESP-12F-by-TUYA-LN-0026/","title":"Tuya Smart Plug Models ESP8266MOD by AI THINKER and ESP 12F by TUYA LN 0026","text":"<p>WARNING! The current version of these plugs does not come with an ESP8266, but with a custom TUYA chip, which can't be flashed with Tasmota.</p> <p>These are simple, No-Name smart plugs (I bought these at AliExpress). One of them has ESP8266MOD chip (by AI-THINKER), other one has ESP-12F chip (by TUYA L/N 0026). Both are actually same chips and are flashed the same way.</p> <p> </p> <p>You need to solder 5 wires: 1. VCC (3.3V) 2. GND (GROUND) 3. Rx 4. Tx 5. GPIO0</p> <p> </p> <p>To put this chips into flash mode, we need to jump wire GPIO0 and GROUND, before you plug your USB adapter into computer. Release jump wire after couple of seconds. Red LED (bottom one) should slightly lit up. Now you can start flashing process.</p> <p> </p> <p>When flashing process is complete, you can unplug USB adapter. Your TUYA smart plug is TASMOTIZED.</p> <p>THIS IS OPTIONAL!!! You can now use Termite app, to load your router WiFi SSID and password using below commands: (just copy and paste all of it, but put your details in). In Termite settings, check your COM number, where adapter is plugged in and select 115200.</p> <p>Backlog SSID1 YOUR_SSID_NAME; Password1 YOUR_WIFI_PASSWORD; MqttHost MQTT_INTERNAL_IP_ADDRESS; MqttUser MQTT_USER_NAME; MqttPassword MQTT_PASSWORD; GPIO2 56; GPIO12 21; GPIO13 17</p> <p>After that, Termite should tell you, what IP address was assigned to your smart plug. Put that IP address in your browser and you should see Tasmota GUI. Go into Configuration &gt; Configure Module &gt; Change to Generic (and click Save). After restart, go into Configuration &gt; Configure Module and change GPIO's as on screen below.</p> <p>You can change between D4 GPIO2 56 LED1i and D4 GPIO2 52 LED1 (Blue led on when device is on, or blue led on when device is off) </p> <p>That's it, now your smart plug will flash both red and blue leds and smart plug button should respond to presses.</p> <p>Special thanks to Travis Griggs for his help with flashing process (I based this tutorial on his own: LINK) </p>"},{"location":"devices/WL-SW01_10-WiFi-Smart-Switch/","title":"WL SW01 10 WiFi Smart Switch","text":"<p>Manufactured by Blue50 as WL-SW01_10 and also sold as TISHRIC.</p> <p>Sonoff Basic in a different form factor with the same features. </p> <p></p> <p>It contains an ESP8285 chip on a vertical breakout board with all the needed GPIOs broken out and labeled. There are also a couple pads on the board to solder VCC and G.</p> <p> </p> <p>Use template <code>{\"NAME\":\"WL-SW01_10\",\"GPIO\":[17,149,0,148,0,0,0,0,21,56,0,0,0],\"FLAG\":0,\"BASE\":1}</code></p> <p>If your Tasmota version doesn't support templates select module <code>Sonoff Basic (1)</code>.</p>"},{"location":"devices/WS03-WS01-WS05/","title":"WS03-Led Controller (from Aliexpress)","text":"<p>The WS01 LED-Controller uses an ESP8266-S1 Module (16MBit Flash) All required Pins for programming are available, as well as additional GPIO4 and GPIO2.</p> <p>Outside Images</p> <p>PCB Image with pinout</p> <p>GPIO2 &amp; GPIO4 are working for I<sup>2</sup>C (2=SDA 4=SCL). (Tested with DS3231 Module ) The device uses an additional CD4050 at the pins used for PWM.</p>"},{"location":"devices/Wemos-D1-Mini/","title":"Wemos D1 Mini","text":""},{"location":"devices/Wemos-D1-Mini/#flashing-wemos-with-tasmota","title":"Flashing Wemos with Tasmota","text":"<p>Flashing a Wemos D1 Mini with Tasmota firmware is nearly the same as for every other device. Just connect Wemos D1 mini via USB. No action required to enter Flashmode!</p>"},{"location":"devices/Wemos-D1-Mini/#configure-tasmota-for-wemos","title":"Configure Tasmota for Wemos","text":""},{"location":"devices/Wemos-D1-Mini/#generic-module","title":"Generic Module","text":"<p>In the Configuration -&gt; Configure Module page, select Module Type: \"18 Generic\". After Saving the settings, the WEMOS reboots with the Generic configuration. The first time you switch to \"18 Generic\" you will NOT see all the options as seen in the picture below YET. You have to save \"18 Generic\" first and when you go there again after the reboot you get the long table where you can change all the pin's parameters. These steps are confirmed to also work with the Wemos D1 mini PRO v2.0.0.</p> <p></p>"},{"location":"devices/Wemos-D1-Mini/#link-to-wemos-hardware-documentation","title":"Link to Wemos hardware &amp; documentation","text":"<p>DOCS dot WEMOS dot CC</p>"},{"location":"devices/Wemos-D1-R1-%26-R2/","title":"Wemos D1 R1 & R2","text":""},{"location":"devices/Wemos-D1-R1-%26-R2/#wemos-d1-release-1-r1-and-release-2-r2","title":"Wemos D1 Release 1 (R1) and Release 2 (R2)","text":"<p>Here you can find information for the big brother of the Wemos D1 mini which can be found here.</p>"},{"location":"devices/Wemos-D1-R1-%26-R2/#r1-vs-r2-the-difference","title":"R1 vs. R2 - The Difference","text":"<ul> <li>When you take a look at the figure 1 you will see it with one blink of the eye thet the old Wemos is different against the new version R2. The old version has an ESP8266 12B or 12E model. The new one has an ESP8266 12F model on the pcb board. You see this in the difference of the Wifi antenna. Here is a Wiki link to the different ESP8266 modules. The next part for R2 are the 2x4 solder pins for the serial and I2C interface which is not on the old model R1. The  techncal data/specifiactions are the same. SO as you see they look like an Arduino UNO including the stacks to mount different shields. Later I will give more information over shields which i have tested and there are a lot of them. </li> </ul> <p>Figure: WeMos D1 R1 vs. WeMos D1 R2</p> <p></p>"},{"location":"devices/Xenon-SM-SW102-2-two-relay-light-switch/","title":"Xenon SM SW102 2 two relay light switch","text":"<p>Amazon Link: https://www.amazon.com/Tempered-Controlled-Separately-Standard-Compatible/dp/B0719Q5G5B/ref=sr_1_3?ie=UTF8&amp;qid=1540511385&amp;sr=8-3&amp;keywords=xenon+light+switch&amp;dpID=21PWx5MUrEL&amp;preST=_SY300_QL70_&amp;dpSrc=srch</p> <p>Also sold as the Mojocraft Wireless Smart Wall Switch 2 Gang: https://www.amazon.com/Mojocraft-Wireless-Sensitive-Compatible-Required/dp/B072JCWH23/ref=sr_1_3?ie=UTF8&amp;qid=1540858092&amp;sr=8-3&amp;keywords=Mojocraft</p> <p>I didn't spot any headers, but device has a sub-board with an ESP-12 module on it. Solder right to the 3.3V, Ground, TX, RX, and GPIO pins and flash away. I set the device up as a generic device with the following assignments. </p> <ul> <li>GPIO 3 is button 2</li> <li>GPIO 4 is relay 2</li> <li>GPIO 12 is button 1 </li> <li>GPIO 13 is relay 1</li> </ul>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/","title":"Xiaomi Mi Desk Lamp","text":"<p>Mi Desk Lamp is a cold+warm white led lamp, which has a rotary knob that also acts as a push-button: - pushing it turns the lamp on/off - rotating it controls the brightness - rotating it while pushed controls the color temperature</p> <p>At the bottom of the lamp stand there is also a 'Reset' button, which can be pressed by a hairpin/toothpick/etc only.</p> <p>Manufacturer Link</p> <p></p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#configuration","title":"Configuration","text":"<p>Tasmota supports it directly as <code>Module \"Mi Desk Lamp\"</code>. This module is deactivated by default. You must add <code>#define ROTARY_V1</code> in your <code>user_config_override.h</code> and compile the firmware for this module to be available as a selection option.</p> <p>To configure it as <code>Generic</code>, here is the GPIO assignment: - GPIO02: Button (<code>GPIO_KEY1</code>) - GPIO04: Cold White (<code>GPIO_PWM1</code>) - GPIO05: Warm White (<code>GPIO_PWM2</code>) - GPIO12: Rotary switch A pin (<code>GPIO_ROT_A</code>) - GPIO13: Rotary switch B pin (<code>GPIO_ROT_B</code>)</p> <p>NOTE: The operation of the rotary switch depends on the module type being <code>MI_DESK_LAMP</code>, so full functionality cannot be achieved with the <code>Generic</code> config.</p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#flashing","title":"Flashing","text":"<p>This lamp is based on a YeeLight LXU 1.7 module, that contains: - an ESP8266 - 2 MB flash</p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#disassembly","title":"Disassembly","text":"<p>First of all, remove the knob by pushing some soft and flat tool underneath it and gently pry away from the stand.</p> <p>Then remove the bottom of the stand, held by 3 screws underneath the rubber strips: </p> <p>Underneath you find a small board for the power input and the reset button, and the controller board: </p> <p>The test points (8 vertical, 2 horizontal) are connected to the module pins 7..14 and 17..18 (see below). As GPIO0 is not among them, they aren't enough for flashing, so the board must be removed anyway.</p> <p>NOTE: You need to remove the knob before you can remove this controller board.</p> <p>The controller board contains - a 3.3V converter on the side of the white power wires - two LED drivers on the side of the red/blue/black LED wires - the rotary button - the Yeelight module</p> <p></p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#pinout","title":"Pinout","text":"<p>Left side: - Pin 1: ADC (N.C.) - Pin 2: GPIO15 (N.C.) - Pin 3: GND - Pin 4: GPIO0 - Pin 5: GND - Pin 6: GND</p> <p>Bottom: - Pin 7: GND - Pin 8: Vcc (3.3V) - Pin 9: GPIO14 (Reset button) - Pin 10: GPIO2 (Rotary button) - Pin 11: GPIO13 (Rotary B) - Pin 12: GPIO12 (Rotary A) - Pin 13: GPIO4 (Cold white) - Pin 14: GPIO5 (Warm white)</p> <p>Right side: - Pin 15: GND  - Pin 16: GND - Pin 17: RxD (N.C.) - Pin 18: TxD (N.C.) - Pin 19: GND (N.C.) - Pin 20: GND (N.C.)</p> <p>Three pins (ADC, GPIO0 and GPIO15) are not used by the lamp, they are available for hacking :).</p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#procedure","title":"Procedure","text":"<p>For serial flashing we need 2 power wires (GND, Vcc), 2 serial wires (RxD, TxD) and the boot mode button (GPIO0):</p> <p></p> <p>As there is plenty of free space in the lamp stand, I left the wires long enough to reach some empty area and soldered solo pin head sockets on them. This way they will be available if/when I decide to add something on those 3 extra pins :).</p> <p>The rest of the serial flashing process is as usual, but if you want to make a backup of the original firmware, keep in mind that the flash size is 2 MBs.</p> <p>If you are re-flashing the original firmware, the flash size must be explicitly set to '2MB-c1', the auto-detected '2MB' doesn't work, so: <code>esptool.py write_flash --flash_size 2MB-c1 0x00000 xiaomi_desk_lamp.orig.bin</code></p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#serial-logging","title":"Serial logging","text":"<p>A bonus feature for debugging/logging: The lamp has an external DC12V power supply, so there is no shock hazard. Nonetheless, accidental 12V can still cause damage to a 3.3V serial converter, so be cautious if you do serial logging on a live lamp.</p> <p>The original firmware sets the USART to the same 74880 baud as the ESP boot loader, and it dumps some details as well: <pre><code> ets Jan  8 2013,rst cause:1, boot mode:(3,7)\n\nload 0x60000020, len 4, room 16 \nphy ver: 1055_1, pp ver: 10.7\n\nrf cal sector: 507\ntcpip_task_hdl : 3fff2958, prio:10,stack:512\nidle_task_hdl : 3fff29f8,prio:0, stack:384\ntim_task_hdl : 3fff5188, prio:2,stack:512\npwm version:1.0.2\nmcu version: 1.3.0_0055\nprod: yeelink.light.lamp1\ndata  : 0x3ffe8000 ~ 0x3ffe91f4, len: 4596\nrodata: 0x3ffe9310 ~ 0x3ffeaa7c, len: 5996\nbss   : 0x3ffeaa80 ~ 0x3fff27d8, len: 32088\nheap  : 0x3fff27d8 ~ 0x40000000, len: 55336\nBUILD TIME: May 25 2018,07:01:12\nESP SDK VER: 1.5.0-dev(c6beda8)\ndid is 65282142\nmac addr 7811dc06cfd9\nreset reason: 0\ncurrent flash flag is 0, current user bin addr 0x101000\nmode : softAP(7a:11:dc:06:cf:d9)\ndhcp server start:(ip:192.168.4.1,mask:255.255.255.0,gw:192.168.4.1)\nadd if1\nbcn 100\n</code></pre></p>"},{"location":"devices/Xiaomi-Mi-Desk-Lamp/#hacking","title":"Hacking","text":"<p>The lamp has 3 pins that aren't used in normal operation: ADC, GPIO0 and GPIO15. GPIO15 is and must be pulled up for boot selection, so its usability is somewhat limited.</p> <p>On the other hand, if you already soldered wires to VCC, GND and GPIO0 for serial flashing, they are perfect for a DHT11 or DHT22 temperature+humidity sensor!</p> <p>As the lamp has external power supply, and the LEDs are in the upper part of the lamp, the temperature of the base is the same as of the ambient, and by its nature the lamp is situated on your desk, so it's a perfect place for temp+humidity measurements.</p> <p>If you want to place the sensor inside the lamp base, then you may need to remove some material from one of the weight panels, and if you choose to place it on the outside (e.g., near the base), then a convenient and relatively hidden path for the 3 wires is above the power jack, just enlarge the hole by 2 mm-s with a file.</p>"},{"location":"devices/YTF-IR-Bridge/","title":"YTF IR Bridge","text":"<ul> <li>YTF</li> <li>BaKEN - Identical to the YTF</li> <li>Tuya</li> </ul>"},{"location":"devices/YTF-IR-Bridge/#flashing","title":"Flashing","text":""},{"location":"devices/YTF-IR-Bridge/#ota-flashing","title":"OTA flashing","text":"<p>This device is based on a Tuya Wi-Fi module and may still be flashable with Tuya-Convert.</p>"},{"location":"devices/YTF-IR-Bridge/#serial-flashing","title":"Serial flashing","text":"<p>Like most devices, GPIO0 has to be held low during power up to get into flash mode. In the picture below, notice the red jumper wire between IO0 and GND. I soldered it in such a way I could hold it during power on, but release later (basically acts as a button), since it can not be held low if you want normal operation.</p> <p> </p>"},{"location":"devices/YTF-IR-Bridge/#configuration","title":"Configuration","text":"<p>Introduced in version 6.4.1.8 as <code>YTF IR Bridge (62)</code></p> GPIO Component Description 04 LED1i (52) Blue LED - Link status 05 IRrecv (51) IR Receiver 13 Button1 (17) Button 14 IRsend (8) IR Transmitter"},{"location":"devices/YTF-IR-Bridge/#ir-codes","title":"IR Codes","text":"<p>IR Code List</p>"},{"location":"devices/YUNTONG-Smart/","title":"YUNTONG Smart","text":"<ul> <li>Sonoff Basic Clone</li> <li>can be flashed to Tasmota</li> <li> <p>PIN assignment:</p> <p>PCB Antenna End: * TOP Layer - Bottom Layer * EN - TOUT * IO14 - IO12 * IO13 - IO15 * IO0 - IO2 * IO4 - IO5 * RX - TX * VCC - GND</p> </li> </ul> <p>The clone are based on the ESP-03S - User manual</p> <p></p>"},{"location":"devices/ZEOOTA-Wifi-Smart-Power-Strip-4-EU-outlets-with-4-USB-ports/","title":"ZEOOTA Wifi Smart Power Strip 4 EU outlets with 4 USB ports","text":"<p>This power strip has Tuya TYWE2S module (ESP8285 chip). Successfully flashed Tasmota on it.</p> <p>4 power outlets are individually controlled. USB ports have just one relay to switch all ports on/off.</p> <p>Model purchased: https://www.aliexpress.com/item/Wifi-Smart-Power-Strip-4-EU-Outlets-Plug-Socket-with-USB-4-Charging-Port-App-Voice/32864686078.html</p> <p></p> <p></p> <p></p> <p>Used this connection for flashing (just connect GPIO0 on the back side of the module to GND before USB connection to enter flash mode):</p> <p></p> <p>Module configuration:</p> <p></p>"},{"location":"devices/leegoal-plug/","title":"Description","text":"<p>Very nice and cheap plug :)</p> <p>https://www.amazon.de/gp/product/B07FD971T9/</p>"},{"location":"devices/leegoal-plug/#features","title":"Features:","text":"<ul> <li>3800 W switchi ng</li> <li>USB port 5V 2.1A for charging</li> <li>Power monitor</li> <li>Tuya compatible</li> </ul>"},{"location":"devices/leegoal-plug/#model-description","title":"Model description","text":"<ul> <li>FLHS ZN04</li> </ul>"},{"location":"devices/leegoal-plug/#configuration","title":"Configuration","text":"<p>Tasmota template based on BlitzWolf (45)</p> <p>{\"NAME\":\"Plug\",\"GPIO\":[57,0,56,0,0,134,0,0,131,17,132,21,0],\"FLAG\":0,\"BASE\":45}</p>"},{"location":"devices/leegoal-plug/#flashing","title":"Flashing","text":"<p>It is possible to flash over OTA. But, it seems flashing via OTA may leave remains of old firmware because it wasn't fully erased before flashing Tasmota. So the device can fail after feature updates. (I have 3 devices originally flashed via OTA bricked after update later). So if you flashed via OTA it better to not update FW anymore. Unfortunately I bricked one of my plugs (probably by typing wrong Wifi name), so I needed to flash manually.</p> <p>Manual flash should be done exactly as shown here: * https://github.com/arendst/Tasmota/issues/3950#issuecomment-436074625 * devices/Hyleton-313-Smart-Plug</p> <p>Access to the internals is easy. Casing is held by 3 torx screws (no glue anywhere).</p>"},{"location":"devices/leegoal-plug/#chip-info","title":"Chip info","text":"<p>Detecting chip type... ESP8266 Chip is ESP8266EX Features: WiFi MAC:  Manufacturer: a1 Device: 4014 Detected flash size: 1MB</p>"},{"location":"devices/meross-MSS425/","title":"Be Aware","text":"<p>There are different versions of this power strip. An MSS425EEU-R purchased in August 2019 was based on the Mediatek Wi-Fi chip and not on an ESP82xx! Tasmota is only suitable for ESP82xx based devices.  </p>"},{"location":"devices/meross-MSS425/#meross-power-strip","title":"meross Power Strip","text":"<p>This power strip was selling on Amazon for about $17 when I bought it. The ESP module is mounted on the side vertically on board. It's another Tuya TYWE3S, 1MB. For more information on the Tuya TYWE3S, see this page. I soldered pins on and bent them down to get everything back in the case.</p> <p></p> <p>To open, 4 screws are under the soft foot pads. They take a size 2.0 triangle bit; make sure you have a large collection of small screwdriver bits around.</p> <p>The programming header is directly on the Tuya module and is silkscreened with the labels for the pins. Solder onto those and program just like any other Tuya. There's unfortunately no button to get into firmware mode that I could find, so you have to ground the pin yourself. If you're using an external power source for the board and another power source for your TXD/RXD, make sure to tie the grounds together or else it won't talk. I burned on the generic tasmota release and set it up like so:</p> <p></p> <p>Relays 1-3 are the AC plugs Relays 4,5 are the USBs The button only turns off the first AC by default, but you could write rules to do whatever you want.</p>"},{"location":"devices/minitiger-Touch-Light-Switch/","title":"minitiger Touch Light Switch","text":"<p>This is a cheap Sonoff T1 clone. Available with 1/2/3 channels.</p> <p>The board has the ID 2PH89174A</p>"},{"location":"devices/minitiger-Touch-Light-Switch/#device","title":"Device","text":"<ul> <li>ESP8285 micro</li> <li>Blue status LED (micro controlled)</li> <li>Separate touch IC controlled switch status indicators (blue and red)</li> <li>Aliexpress link: Click</li> <li>Aliexpress link for no neutral version (single live wire) version: Click</li> </ul>"},{"location":"devices/minitiger-Touch-Light-Switch/#images","title":"Images","text":"<p>Front and soldering: Fullsize</p> <p></p> <p>Front and identification number: Fullsize</p> <p></p> <p>Back and GND: Fullsize</p> <p></p> <p>Soldering layout: Fullsize</p> <p></p>"},{"location":"devices/minitiger-Touch-Light-Switch/#flashing","title":"Flashing","text":"<p>This board can be flashed with vanilla sonoff-tasmota. I used esptool on linux to upload the firmware.</p>"},{"location":"devices/minitiger-Touch-Light-Switch/#programming-mode","title":"Programming mode:","text":"<p>Short GPIO0 to GND, as with all boards.</p> <p>If you have successfully put the micro into programming mode the LED does not light up!</p>"},{"location":"devices/minitiger-Touch-Light-Switch/#config","title":"Config:","text":""},{"location":"devices/minitiger-Touch-Light-Switch/#single-channel","title":"Single Channel:","text":"<p>Works out of the box, configured as Sonoff Basic. The LED does not light up when the switch is turned off. Configure as Sonoff T1 to enable the LED.</p>"},{"location":"devices/minitiger-Touch-Light-Switch/#dual-channel","title":"Dual Channel:","text":"<pre><code>    {\"NAME\":\"Wall Switch 2C\",\"GPIO\":[17,255,255,255,0,22,18,0,21,56,0,0,0],\"FLAG\":0,\"BASE\":28}\n</code></pre>"},{"location":"devices/minitiger-Touch-Light-Switch/#dual-channel-no-neutral-single-live-wire","title":"Dual Channel - No Neutral (Single Live Wire):","text":"<pre><code>    {\"NAME\":\"Wall Switch 2C\",\"GPIO\":[53,52,255,17,18,0,0,0,0,21,22,0,0],\"FLAG\":0,\"BASE\":28}\n</code></pre>"},{"location":"devices/minitiger-Touch-Light-Switch/#triple-channel","title":"Triple Channel:","text":"<p>Since I don't own such a board, you are on your own...</p> <p>Button 3 should be GPIO10 and Relay 3 should be GPIO4. Use at your own risk!</p>"},{"location":"devices/others/","title":"Others","text":""},{"location":"devices/others/#motor-clockwiseanticlockwise","title":"Motor Clockwise/Anticlockwise","text":"<p>(Now retired, see https://www.itead.cc/motor-reversing-wifi-wireless-switch.html)</p> <p>  This USB powered or external powered board provides one GPIO controlling two alternating relays with Normally Open (NO) and Normally Closed (NC) contacts. It can be used for changing directions of a connected motor.</p> <p>Programming the on-board 3.3V PSA-B is possible when Rx (Pin 7), Tx (Pin 8) and GND (Pin 9) are connected to the FTDI interface, the button is pressed and (USB) power is provided.</p>"},{"location":"devices/wk30/","title":"Wk30","text":""},{"location":"devices/wk30/#connection","title":"Connection","text":"<p>Vcc - 3.3V TX - RX RX - TX GND - GND  GPIO0 - GND</p>"},{"location":"devices/wk30/#additional-information","title":"Additional Information","text":"<p>This device is available on Amazon as \"Smart WiFi Plug Outlet Mini with Energy Monitoring.\" The product number, WK30 appears nowhere on the page on Amazon, so here's its ASIN: B07C326VKR</p> <p>It remains to be seen if this device actually features energy monitoring as in the title on Amazon.</p> <p>Nicely labeled holes for a header exist. The pictures below are with a header soldered on. All that was needed was to jumper GPIO0 to ground in addition to the usual connections. Once tasmota is up, configure the device as generic.</p>"},{"location":"devices/wk30/#device-images","title":"Device Images","text":""},{"location":"devices/wk30/#gpio-config","title":"GPIO Config","text":"<p>  This has the LEDs, GPIO4 and GPIO5 separated out as different relays so they can be controlled independently of the switch.</p>"}]}